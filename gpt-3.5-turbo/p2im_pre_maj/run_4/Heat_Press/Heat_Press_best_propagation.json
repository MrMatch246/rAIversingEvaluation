{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_unset_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setFlagIfUnset_000800f4(undefined4 inputValue)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_unset_000800f4",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_hardware_00080164",
            "code": "\nvoid initializeHardware_00080164(int **hardwareData)\n\n{\n  int returnValue;\n  \n  *hardwareData = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)hardwareData + 6)) {\n    pinMode(*(byte *)((int)hardwareData + 6),1);\n    digitalWrite(*(undefined *)((int)hardwareData + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**hardwareData + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)hardwareData + 0x49) = 0;\n  *(undefined *)((int)hardwareData + 0x4a) = 0;\n  *(undefined2 *)(hardwareData + 0x15) = 0;\n  *(undefined2 *)((int)hardwareData + 0x52) = 0;\n  *(undefined2 *)(hardwareData + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_hardware_00080164",
                "param_1": "hardwareData",
                "iVar1": "returnValue"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **data)\n\n{\n  bool isOverflow;\n  undefined result;\n  char counter;\n  int returnValue;\n  byte currentByte;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (returnValue = (**(code **)(**data + 8))(), returnValue != 0) {\n      currentByte = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      counter = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + currentByte + 9) = result;\n      currentByte = counter + 1;\n      *(byte *)((int)data + 0x49) = currentByte;\n      if (0x3f < currentByte) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isOverflow) {\n    counter = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)data + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "isOverflow",
                "uVar2": "result",
                "cVar3": "counter",
                "iVar4": "returnValue",
                "bVar5": "currentByte"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int data_start,uint data_length)\n\n{\n  int current_index;\n  uint checksum;\n  char bit_count;\n  uint bit_value;\n  \n  checksum = 0xffff;\n  for (current_index = data_start; (current_index - data_start & 0xffU) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    bit_count = '\\b';\n    do {\n      bit_value = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit_value != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_count = bit_count + -1;\n    } while (bit_count != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "data_start",
                "param_2": "data_length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_count",
                "uVar4": "bit_value"
            },
            "calling": [
                "sendTxBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_control_00080258",
            "code": "\nvoid updateChecksumAndControl_00080258(int **data,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  byte checksumByte;\n  undefined2 crcValue;\n  int tempVar;\n  uint checksumValue;\n  \n  checksumByte = *(byte *)((int)data + 0x49);\n  checksumValue = (uint)checksumByte;\n  crcValue = calcCRC(data,checksumValue,param2,param3,param3);\n  *(char *)((int)data + checksumValue + 9) = (char)((ushort)crcValue >> 8);\n  *(char *)((int)data + (checksumValue + 1 & 0xff) + 9) = (char)crcValue;\n  *(byte *)((int)data + 0x49) = checksumByte + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      tempVar = (**(code **)(**data + 0xc))();\n    } while (-1 < tempVar);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  tempVar = millis();\n  data[0x17] = (int *)(tempVar + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_control_00080258",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "bVar1": "checksumByte",
                "uVar2": "crcValue",
                "iVar3": "tempVar",
                "uVar4": "checksumValue"
            },
            "calling": [
                "query"
            ],
            "called": [
                "millis",
                "calcCRC",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "process_data_000802da",
            "code": "\nint processData_000802da(int data,uint flag,uint value,ushort *buffer)\n\n{\n  char result;\n  byte byteVar;\n  undefined undefinedVar;\n  ushort ushortVar;\n  uint uintVar;\n  ushort *ushortPtr;\n  undefined localVar1;\n  undefined localVar2;\n  ushort localVar3;\n  \n  localVar1 = (undefined)flag;\n  localVar2 = (undefined)(flag >> 8);\n  localVar3 = (ushort)value;\n  uintVar = value & 0xffff;\n  if (*(char *)(data + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(data + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flag & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(data + 9) = localVar1;\n  *(undefined *)(data + 10) = localVar2;\n  *(ushort **)(data + 0x4c) = buffer;\n  *(char *)(data + 0xb) = (char)(flag >> 0x18);\n  *(char *)(data + 0xc) = (char)(flag >> 0x10);\n  undefinedVar = (undefined)(value >> 8);\n  switch(localVar2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(data + 0xd) = undefinedVar;\n    break;\n  case 5:\n    ushortVar = *buffer;\n    if (ushortVar != 0) {\n      ushortVar = 1;\n    }\n    *(char *)(data + 0xd) = -(char)ushortVar;\n    uintVar = 0;\n    break;\n  case 6:\n    *(char *)(data + 0xd) = (char)(*buffer >> 8);\n    uintVar = (uint)*buffer;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(localVar3 >> 3) & 0xfe;\n    if ((value & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(data + 0xe) = (char)value;\n    *(undefined *)(data + 0xd) = undefinedVar;\n    *(byte *)(data + 0xf) = byteVar;\n    undefinedVar = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(data + 0xd) = undefinedVar;\n    *(char *)(data + 0xe) = (char)value;\n    buffer = buffer + -1;\n    *(char *)(data + 0xf) = (char)uintVar * '\\x02';\n    *(undefined *)(data + 0x49) = 7;\n    ushortPtr = buffer + uintVar;\n    while (buffer != ushortPtr) {\n      byteVar = *(byte *)(data + 0x49);\n      *(char *)(data + (uint)byteVar + 9) = (char)(buffer[1] >> 8);\n      uintVar = byteVar + 1 & 0xff;\n      *(char *)(data + 0x49) = (char)uintVar;\n      buffer = buffer + 1;\n      *(char *)(uintVar + data + 9) = (char)*buffer;\n      *(byte *)(data + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(data + 0xe) = (char)uintVar;\n  undefinedVar = 6;\nLAB_0008034a:\n  *(undefined *)(data + 0x49) = undefinedVar;\nswitchD_0008031e_caseD_7:\n  sendTxBuffer(data);\n  *(undefined *)(data + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "process_data_000802da",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "buffer",
                "cVar1": "result",
                "bVar2": "byteVar",
                "uVar3": "undefinedVar",
                "uVar4": "ushortVar",
                "uVar5": "uintVar",
                "puVar6": "ushortPtr",
                "local_1c": "localVar1",
                "local_1b": "localVar2",
                "local_18": "localVar3"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 checkAndUpdateValue_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "poll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "extract_words_from_data_00080410",
            "code": "\nvoid extractWordsFromData_00080410(int dataAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 word;\n  int address;\n  byte index;\n  uint byteIndex;\n  int destinationAddress;\n  \n  index = 0;\n  while( true ) {\n    byteIndex = (uint)index;\n    index = index + 1;\n    if (*(byte *)(dataAddress + 0xb) >> 1 <= byteIndex) break;\n    address = (byteIndex * 2 + 3 & 0xff) + dataAddress;\n    destinationAddress = *(int *)(dataAddress + 0x4c);\n    word = makeWord(*(undefined *)(address + 9),*(undefined *)(address + 10),address,\n                     *(byte *)(dataAddress + 0xb),param4);\n    *(undefined2 *)(destinationAddress + byteIndex * 2) = word;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "extract_words_from_data_00080410",
                "param_1": "dataAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "word",
                "iVar2": "address",
                "bVar3": "index",
                "uVar4": "byteIndex",
                "iVar5": "destinationAddress"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_answer_validity_0008043e",
            "code": "\nint checkAnswerValidity_0008043e(int **paramArray)\n\n{\n  char answerStatus;\n  uint returnValue;\n  int *currentTime;\n  int validationResult;\n  uint packetSize;\n  \n  if (*(byte *)((int)paramArray + 5) < 4) {\n    returnValue = (**(code **)(**paramArray + 8))();\n    packetSize = returnValue & 0xff;\n  }\n  currentTime = (int *)millis();\n  if (paramArray[0x17] < currentTime) {\n    *(undefined *)(paramArray + 2) = 0xff;\n    *(undefined *)((int)paramArray + 7) = 0;\n    *(short *)(paramArray + 0x15) = *(short *)(paramArray + 0x15) + 1;\n  }\n  else if (7 < packetSize) {\n    getRxBuffer(paramArray);\n    validationResult = validateAnswer(paramArray);\n    if (validationResult == 0) {\n      if (*(byte *)((int)paramArray + 10) - 3 < 2) {\n        get_FC3(paramArray);\n      }\n      *(undefined *)((int)paramArray + 7) = 0;\n      answerStatus = *(char *)((int)paramArray + 0x49);\n    }\n    else {\n      *(undefined *)((int)paramArray + 7) = 0;\n      answerStatus = (char)validationResult;\n    }\n    goto LAB_000804a2;\n  }\n  answerStatus = '\\0';\nLAB_000804a2:\n  return (int)answerStatus;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_answer_validity_0008043e",
                "param_1": "paramArray",
                "cVar1": "answerStatus",
                "uVar2": "returnValue",
                "piVar3": "currentTime",
                "iVar4": "validationResult",
                "unaff_r6": "packetSize"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "millis",
                "getRxBuffer",
                "get_FC3",
                "validateAnswer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_hardware_000804a8",
            "code": "\nundefined8 initializeHardware_000804a8(void)\n\n{\n  int currentTime;\n  \n  pinMode(1,0);\n  pinMode(6,1);\n  pinMode(0,1);\n  pinMode(1,1);\n  digitalWrite(0,0);\n  digitalWrite(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_hardware_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = millis();\n  currentTime = millis();\n  DAT_200709e0 = currentTime + 1000;\n  currentTime = millis();\n  DAT_20070a48 = currentTime + 1000;\n  currentTime = millis();\n  DAT_20070934 = currentTime + 1000;\n  currentTime = millis();\n  DAT_200708c0 = currentTime + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_hardware_000804a8",
                "iVar1": "currentTime"
            },
            "calling": [
                "main"
            ],
            "called": [
                "millis",
                "pinMode",
                "digitalWrite",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "update_sensor_data_000805d0",
            "code": "\n\n\nvoid updateSensorData_000805d0(void)\n\n{\n  uint uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  undefined4 uVar4;\n  undefined4 uVar5;\n  int iVar6;\n  uint *puVar7;\n  undefined4 *puVar8;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    uVar1 = millis();\n    if (DAT_200708c8 < uVar1) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = __floatunsisf(DAT_200708d8);\n      DAT_2007094c = __floatsisf(DAT_200708da / 10);\n      DAT_200709c4 = __floatunsisf(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n    }\n    break;\n  case '\\x03':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      puVar8 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      query(&DAT_200709e4,*puVar8,puVar8[1],puVar8[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    poll(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      puVar8 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = millis();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    puVar7 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *puVar7 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (uVar1 = millis(), DAT_200708c0 < uVar1)) {\n      DAT_20070960 = DAT_20070960 + 1;\n      iVar6 = millis();\n      DAT_200708c0 = iVar6 + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      uVar1 = millis();\n      if (DAT_200708c0 < uVar1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        iVar6 = millis();\n        DAT_200708c0 = iVar6 + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        puVar7 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      uVar1 = millis();\n      if (DAT_200708c0 < uVar1) {\n        DAT_2007090c = DAT_2007090c + 1;\n        iVar6 = millis();\n        DAT_200708c0 = iVar6 + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  uVar1 = millis();\n  if (DAT_200709e0 < uVar1) {\n    uVar2 = __floatsisf(DAT_20070940);\n    uVar3 = __aeabi_fsub(uVar2,DAT_200709c8);\n    uVar2 = DAT_200708c4;\n    DAT_20070930 = uVar3;\n    uVar4 = __addsf3(uVar3,DAT_200708c4);\n    uVar4 = __aeabi_fmul(uVar4,DAT_2007094c);\n    uVar4 = __addsf3(uVar4,DAT_20070914);\n    DAT_2007094c = uVar4;\n    uVar2 = __aeabi_fsub(uVar3,uVar2);\n    uVar2 = __aeabi_fmul(uVar2,DAT_200709c4);\n    uVar2 = __aeabi_fsub(uVar2,DAT_2007096c);\n    DAT_200709c4 = uVar2;\n    uVar5 = __aeabi_fmul(uVar3,DAT_20070a4c);\n    uVar5 = __addsf3(uVar5,uVar4);\n    __addsf3(uVar5,uVar2);\n    DAT_20070910 = __aeabi_f2iz();\n    DAT_2007091c = __floatsisf();\n    DAT_2007092c = 0;\n    DAT_200708c4 = uVar3;\n    DAT_20070914 = uVar4;\n    DAT_2007096c = uVar2;\n    iVar6 = millis();\n    DAT_200709e0 = iVar6 + DAT_20070970;\n  }\n  uVar2 = __floatsisf(DAT_20070970);\n  iVar6 = __aeabi_fcmpge(DAT_2007091c,uVar2);\n  if (iVar6 != 0) {\n    DAT_2007091c = uVar2;\n  }\n  iVar6 = __aeabi_fcmple(DAT_2007091c,0);\n  if (iVar6 != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = __fixunssfsi(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "update_sensor_data_000805d0"
            },
            "calling": [
                "main"
            ],
            "called": [
                "millis",
                "query",
                "__aeabi_f2iz",
                "__floatunsisf",
                "__addsf3",
                "__aeabi_fcmple",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "poll",
                "__floatsisf",
                "__fixunssfsi",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  String(&DAT_20070954,\"\");\n  __aeabi_atexit(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_board_00080ae4",
            "code": "\n\n\nvoid initializeBoard_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  SystemInit();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    digitalWrite(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(0x400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(0x400e0e00,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,0x3000,0);\n  PIO_Configure(0x400e1400,2,0x30,0);\n  PIO_Configure(0x400e1000,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,3,0);\n  PIO_Configure(0x400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  adc_disable_all_channel(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_board_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "main"
            ],
            "called": [
                "adc_init",
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_all_channel",
                "adc_configure_timing",
                "digitalWrite",
                "adc_disable_interrupt",
                "adc_configure_trigger",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_communication_00080c0c",
            "code": "\nvoid initializeCommunication_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initializeRingBuffer(&DAT_20070b84);\n  initializeRingBuffer(&DAT_20070ad8);\n  initializeUARTClass(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initializeRingBuffer(&DAT_20070de4);\n  initializeRingBuffer(&DAT_20070e6c);\n  initializeRingBuffer(&DAT_20070ef4);\n  initializeRingBuffer(&DAT_20070a50);\n  initializeRingBuffer(&DAT_20070c84);\n  initializeRingBuffer(&DAT_20070d0c);\n  initializeUSARTClass(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initializeUSARTClass(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initializeUSARTClass(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_communication_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "RingBuffer": "initializeRingBuffer",
                "UARTClass": "initializeUARTClass",
                "USARTClass": "initializeUSARTClass"
            },
            "calling": [],
            "called": [
                "RingBuffer",
                "UARTClass",
                "USARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "process_serial_events_00080ce0",
            "code": "\nvoid processSerialEvents_00080ce0(void)\n\n{\n  int dataAvailable;\n  \n  dataAvailable = available(&DAT_20070b60);\n  if (dataAvailable != 0) {\n    serialEvent();\n  }\n  dataAvailable = available(&DAT_20070c0c);\n  if (dataAvailable != 0) {\n    serialEvent1();\n  }\n  dataAvailable = available(&DAT_20070c34);\n  if (dataAvailable != 0) {\n    serialEvent2();\n  }\n  dataAvailable = available(&DAT_20070c5c);\n  if (dataAvailable != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "process_serial_events_00080ce0",
                "iVar1": "dataAvailable"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent2",
                "serialEvent1",
                "available",
                "serialEvent3",
                "serialEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_memory_value_00080d2e",
            "code": "\nvoid updateMemoryValue_00080d2e(int ptrData,undefined4 mode,uint value)\n\n{\n  uint newValue;\n  \n  *(uint *)(ptrData + 0x44) = value;\n  switch(mode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    newValue = *(uint *)(ptrData + 0x70) & *(uint *)(ptrData + 0x70) & ~value;\n    break;\n  case 2:\n    newValue = *(uint *)(ptrData + 0x70) | value;\n    break;\n  default:\n    goto handleDefaultCase;\n  }\n  *(uint *)(ptrData + 0x70) = newValue;\nhandleDefaultCase:\n  *(uint *)(ptrData + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_memory_value_00080d2e",
                "param_1": "ptrData",
                "param_2": "mode",
                "param_3": "value",
                "uVar1": "newValue",
                "switchD_00080d34_caseD_6": "handleDefaultCase"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_params_00080d54",
            "code": "\nvoid updateParams_00080d54(undefined4 *paramArray,undefined4 newValue,uint flag)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flag << 0x1f) < 0;\n  paramArray[17] = newValue;\n  if (isNegative) {\n    paramArray[25] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[24] = newValue;\n  }\n  isNegative = (flag & 10) != 0;\n  if (isNegative) {\n    paramArray[8] = newValue;\n  }\n  if (!isNegative) {\n    paramArray[9] = newValue;\n  }\n  if (((int)(flag << 0x1e) < 0) || ((int)(flag << 0x1c) < 0)) {\n    paramArray[32] = newValue;\n  }\n  paramArray[5] = newValue;\n  *paramArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_params_00080d54",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "flag",
                "bVar1": "isNegative",
                "param_1[0x11]": "paramArray[17]",
                "param_1[0x19]": "paramArray[25]",
                "param_1[0x18]": "paramArray[24]",
                "param_1[8]": "paramArray[8]",
                "param_1[9]": "paramArray[9]",
                "param_1[0x20]": "paramArray[32]",
                "param_1[5]": "paramArray[5]"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_parameters_00080d7a",
            "code": "\nvoid updateParameters_00080d7a(undefined4 *parameters,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  parameters[17] = value;\n  if (condition3 == 0) {\n    parameters[24] = value;\n  }\n  else {\n    parameters[25] = value;\n  }\n  if (condition2 == 0) {\n    parameters[21] = value;\n  }\n  else {\n    parameters[20] = value;\n  }\n  if (condition1 == 0) {\n    parameters[13] = value;\n  }\n  else {\n    parameters[12] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_parameters_00080d7a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3",
                "param_1[0x11]": "parameters[17]",
                "param_1[0x18]": "parameters[24]",
                "param_1[0x19]": "parameters[25]",
                "param_1[0x15]": "parameters[21]",
                "param_1[0x14]": "parameters[20]",
                "param_1[0xd]": "parameters[13]",
                "param_1[0xc]": "parameters[12]",
                "param_1[4]": "parameters[4]"
            },
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "set_peripheral_00080da0",
            "code": "\nundefined4 setPeripheral_00080da0(int device,int mode,undefined4 config,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(mode) {\n  case 1:\n  case 2:\n    setPeripheral_00080da0(device,mode,config);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = config;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = config;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = config;\n    }\n    break;\n  case 3:\n    setInput(device,config,flags,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    setOutput(device,config,mode == 5,(flags << 0x1d) >> 0x1f,flags & 1,mode,config\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "set_peripheral_00080da0",
                "param_1": "device",
                "param_2": "mode",
                "param_3": "config",
                "param_4": "flags",
                "bVar1": "isNegative",
                "PIO_SetPeripheral": "setPeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "pinMode",
                "FUN_00080ae4"
            ],
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_intersection_00080e04",
            "code": "\nuint checkBitwiseIntersection_00080e04(int inputPtr,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputPtr + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(inputPtr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "inputPtr",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 check_and_set_bit_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "calling": [
                "init",
                "pinMode",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f24": {
            "entrypoint": "0x00080f24",
            "current_name": "initialize_data_00080f24",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid initializeData_00080f24(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  \n  for (index = 0; (undefined4 *)((int)&relArray[0].offset + index) < &DAT_2007089c\n      ; index = index + 4) {\n    *(undefined4 *)((int)&relArray[0].offset + index) =\n         *(undefined4 *)(&DAT_0008588c + index);\n  }\n  for (ptr = &DAT_2007089c; ptr < (undefined4 *)0x200711c0; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  startExecution();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080f24": "initialize_data_00080f24",
                "iVar1": "index",
                "puVar2": "ptr",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset",
                "main": "startExecution"
            },
            "calling": [],
            "called": [
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *output,uint input_size,int multiplier,int threshold_scale_factor)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint threshold_values [16];\n  \n  threshold_values[0] = 0;\n  threshold_values[1] = 8;\n  threshold_values[2] = 0x10;\n  threshold_values[3] = 0x18;\n  threshold_values[4] = 0x40;\n  threshold_values[5] = 0x50;\n  threshold_values[6] = 0x60;\n  threshold_values[7] = 0x70;\n  threshold_values[8] = 0x200;\n  threshold_values[9] = 0x240;\n  threshold_values[10] = 0x280;\n  threshold_values[11] = 0x2c0;\n  threshold_values[12] = 0x300;\n  threshold_values[13] = 0x340;\n  threshold_values[14] = 0x380;\n  threshold_values[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  uVar1 = input_size / (uint)(multiplier * 2);\n  if (input_size == multiplier * 2 * uVar1) {\n    uVar1 = uVar1 - 1;\n  }\n  uVar2 = 0;\n  do {\n    if ((uint)(threshold_scale_factor * (int)(((ulonglong)input_size / (ulonglong)((uVar1 + 1) * 2)) / 1000000)) <=\n        threshold_values[uVar2]) {\n      output[1] = (uVar2 & 0xf) << 0x10 | (uVar1 & 0xff) << 8 | output[1];\n      return 0;\n    }\n    uVar2 = uVar2 + 1;\n  } while (uVar2 != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "output",
                "param_2": "input_size",
                "param_3": "multiplier",
                "param_4": "threshold_scale_factor",
                "local_58": "threshold_values"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_and_or_00081034",
            "code": "\nvoid updateAndOr_00081034(int objectAddress,uint value,uint flag)\n\n{\n  *(uint *)(objectAddress + 4) = value | *(uint *)(objectAddress + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_and_or_00081034",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_memory_00081042",
            "code": "\nvoid updateMemory_00081042(int memoryAddress,uint value,uint mask1,uint mask2)\n\n{\n  *(uint *)(memoryAddress + 4) =\n       mask1 | *(uint *)(memoryAddress + 4) | (value & 0xf) << 0x18 | (mask2 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_memory_00081042",
                "param_1": "memoryAddress",
                "param_2": "value",
                "param_3": "mask1",
                "param_4": "mask2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int address,uint bitPosition)\n\n{\n  *(int *)(address + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "address",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_value_00081066",
            "code": "\nvoid initializeValue_00081066(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_value_00081066",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_0008106e",
            "code": "\nvoid setParam_0008106e(int baseAddress,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_0008106e",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nundefined4 initialize_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "add_offset_to_global_var_0008118c",
            "code": "\nint addOffsetToGlobalVar_0008118c(int offset)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = offset + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "add_offset_to_global_var_0008118c",
                "param_1": "offset",
                "iVar1": "previousValue"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_error_code_000811ae",
            "code": "\nuint32_t getErrorCode_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "set_memory_value_000811b4",
            "code": "\nundefined4 setMemoryValue_000811b4(undefined4 result,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "set_memory_value_000811b4",
                "param_1": "result",
                "param_2": "memoryAddress"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_process_000811be",
            "code": "\nundefined4 initializeProcess_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_process_000811be"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_return_value_000811c2",
            "code": "\nundefined4 getReturnValue_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_return_value_000811c2"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_000811c6",
            "code": "\nundefined4 initialize_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_000811c6"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 param1,int sourceAddress,uint byteCount)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)byteCount; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(sourceAddress + i);\n  }\n  return byteCount & ~((int)byteCount >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "param1",
                "param_2": "sourceAddress",
                "param_3": "byteCount",
                "iVar1": "i"
            },
            "calling": [
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081208": {
            "entrypoint": "0x00081208",
            "current_name": "FUN_00081208",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {},
            "calling": [
                "loop",
                "setup",
                "sendTxBuffer",
                "poll"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "configure_io_00081210",
            "code": "\n\n\nint configureIO_00081210(int channelIndex,int configType)\n\n{\n  int result;\n  uint regValue;\n  undefined4 pinConfigType;\n  uint bitMask;\n  byte channelType;\n  byte channelConfig;\n  int configIndex;\n  int pioConfig;\n  \n  result = channelIndex;\n  if ((&DAT_00084d24)[channelIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[channelIndex] & 0xf) == 4) {\n      result = disableAdcChannel(0x400c0000,(&DAT_00084d31)[channelIndex * 0x1c]);\n    }\n    channelConfig = (&DAT_20070d94)[channelIndex];\n    channelType = channelConfig & 0xf;\n    if ((channelType < 3) && (channelConfig != 0)) {\n      if (channelType == 2) {\n        if (configType == 0) {\n          return result;\n        }\n      }\n      else if (channelType == 1) {\n        if (configType == 2) {\n          return result;\n        }\n      }\n      else if (channelType == 3) {\n        if (configType == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (configType != 1) {\nLAB_0008126c:\n      if (configType == 0) {\n        result = channelIndex * 0x1c;\n        enablePeripheralClock(*(undefined4 *)(&DAT_00084d20 + result));\n        result = configurePIO(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),0);\n        channelConfig = (&DAT_20070d94)[channelIndex] & 0xf0 | 2;\n      }\n      else {\n        if (configType != 2) {\n          return result;\n        }\n        result = channelIndex * 0x1c;\n        enablePeripheralClock(*(undefined4 *)(&DAT_00084d20 + result));\n        result = configurePIO(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),1);\n        channelConfig = (&DAT_20070d94)[channelIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[channelIndex] = channelConfig;\n      return result;\n    }\n    configIndex = channelIndex * 0x1c;\n    pioConfig = *(int *)(&DAT_00084d18 + configIndex);\n    if (channelConfig >> 4 == 0) {\n      pinConfigType = 4;\n    }\n    else {\n      pinConfigType = 5;\n    }\n    result = configurePIO(pioConfig,pinConfigType,*(undefined4 *)(&DAT_00084d1c + configIndex),\n                          *(undefined4 *)(&DAT_00084d28 + configIndex));\n    (&DAT_20070d94)[channelIndex] = (&DAT_20070d94)[channelIndex] & 0xf0 | 3;\n    if (*(int *)(pioConfig + 0x18) == -1) {\n      regValue = *(uint *)(&DAT_00084d20 + configIndex);\n      if (0x2c < regValue) {\n        return 1;\n      }\n      if (regValue < 0x20) {\n        regValue = 1 << (regValue & 0xff);\n        bitMask = _DAT_400e0618 & regValue;\n        if (bitMask == regValue) {\n          _DAT_400e0614 = bitMask;\n        }\n      }\n      else {\n        regValue = 1 << (regValue - 0x20 & 0xff);\n        bitMask = _DAT_400e0708 & regValue;\n        if (bitMask == regValue) {\n          _DAT_400e0704 = bitMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "configure_io_00081210",
                "param_1": "channelIndex",
                "param_2": "configType",
                "iVar1": "result",
                "uVar2": "regValue",
                "uVar3": "pinConfigType",
                "uVar4": "bitMask",
                "bVar5": "channelType",
                "bVar6": "channelConfig",
                "iVar7": "configIndex",
                "iVar8": "pioConfig",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "PIO_Configure": "configurePIO",
                "adc_disable_channel": "disableAdcChannel"
            },
            "calling": [
                "setup",
                "digitalWrite",
                "FUN_00080164"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_pin_mode_00081318",
            "code": "\nvoid updatePinMode_00081318(int pin,int newMode,undefined4 param)\n\n{\n  int outputStatus;\n  undefined4 outputData;\n  int outputPort;\n  \n  if ((&DAT_00084d24)[pin * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[pin] & 0xf) == 5) {\n      pinMode(pin,1,param,5,pin,newMode,param);\n    }\n    (&DAT_20070d94)[pin] = (&DAT_20070d94)[pin] & 0xf | (byte)(newMode << 4);\n    outputPort = *(int *)(&DAT_00084d18 + pin * 0x1c);\n    outputData = *(undefined4 *)(&DAT_00084d1c + pin * 0x1c);\n    outputStatus = PIO_GetOutputDataStatus(outputPort,outputData);\n    if (outputStatus == 0) {\n      if (newMode != 0) {\n        *(undefined4 *)(outputPort + 100) = outputData;\n        return;\n      }\n      *(undefined4 *)(outputPort + 0x60) = outputData;\n      return;\n    }\n    PIO_SetOutput(outputPort,outputData,newMode,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_pin_mode_00081318",
                "param_1": "pin",
                "param_2": "newMode",
                "param_3": "param",
                "iVar1": "outputStatus",
                "uVar2": "outputData",
                "iVar3": "outputPort"
            },
            "calling": [
                "getRxBuffer",
                "setup",
                "FUN_00080ae4",
                "sendTxBuffer",
                "FUN_00080164"
            ],
            "called": [
                "pinMode",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_relocation_is_last_00081388",
            "code": "\nvoid executeIfRelocationIsLast_00081388(void)\n\n{\n  if ((relocationArray[6].relocationInfo != 0xffffffff) &&\n     (relocationArray[6].relocationInfo = relocationArray[6].relocationInfo - 1,\n     relocationArray[6].relocationInfo == 0)) {\n    (*(codeToExecute *)((int)&relocationArray[0].relocationOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_relocation_is_last_00081388",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "relocationInfo",
                "r_offset": "relocationOffset",
                "code": "codeToExecute"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_buffer_000813a8",
            "code": "\nint initializeBuffer_000813a8(int buffer)\n\n{\n  memset(buffer,0,0x80);\n  *(undefined4 *)(buffer + 0x80) = 0;\n  *(undefined4 *)(buffer + 0x84) = 0;\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "param_1": "buffer"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_buffer_000813c2",
            "code": "\nvoid updateBuffer_000813c2(int buffer,undefined newData)\n\n{\n  uint currentIndex;\n  \n  currentIndex = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (currentIndex != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = newData;\n    *(uint *)(buffer + 0x80) = currentIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "buffer",
                "param_2": "newData",
                "uVar1": "currentIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPtr,undefined4 newValue)\n\n{\n  int ptr1;\n  uint updatedValue;\n  \n  ptr1 = *(int *)(dataPtr + 0x14);\n  if ((*(int *)(*(int *)(dataPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr1 + 0x84) == *(int *)(ptr1 + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptr1 + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr1 + 0x84) == updatedValue);\n    *(char *)(ptr1 + *(int *)(ptr1 + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPtr + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "ptr1",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initializeParameters_000814e4(undefined4 *parameters,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  parameter1 = 0;\n  parameter2 = 1000;\n  value1 = value1;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = value2;\n  parameter3 = value4;\n  value3 = value3;\n  parameter4 = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5",
                "param_1[1]": "parameter1",
                "param_1[2]": "parameter2",
                "param_1[4]": "parameter3",
                "param_1[5]": "parameter4",
                "param_1[6]": "value1",
                "param_1[8]": "value3"
            },
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_device_00081508",
            "code": "\nvoid initializeDevice_00081508(int deviceAddress,uint blockSize,undefined4 initialValue)\n\n{\n  int offset;\n  undefined4 *deviceRegisters;\n  \n  pmc_enable_periph_clk(*(undefined4 *)(deviceAddress + 0x20));\n  deviceRegisters = *(undefined4 **)(deviceAddress + 0x18);\n  deviceRegisters[0x48] = 0x202;\n  *deviceRegisters = 0xac;\n  deviceRegisters[1] = initialValue;\n  deviceRegisters[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / blockSize >> 4;\n  deviceRegisters[3] = 0xffffffff;\n  deviceRegisters[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(deviceAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(deviceAddress + 0x1c) & 0x1f);\n  offset = *(int *)(deviceAddress + 0x10);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  offset = *(int *)(deviceAddress + 0x14);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  *deviceRegisters = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_device_00081508",
                "param_1": "deviceAddress",
                "param_2": "blockSize",
                "param_3": "initialValue",
                "iVar1": "offset",
                "puVar2": "deviceRegisters"
            },
            "calling": [],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_uart_000815d4",
            "code": "\nundefined4 * initializeUART_000815d4(undefined4 *uartInstance,undefined4 uartData)\n\n{\n  UARTClass();\n  *uartInstance = &PTR_FUN_00081454_1_000857d8;\n  uartInstance[9] = uartData;\n  return uartInstance;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_uart_000815d4",
                "param_1": "uartInstance",
                "param_2": "uartData"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "get_FC3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "free_memory_000815fe",
            "code": "\nundefined4 * freeMemory_000815fe(undefined4 *memoryBlock)\n\n{\n  free(*memoryBlock);\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "free_memory_000815fe",
                "param_1": "memoryBlock"
            },
            "calling": [],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_and_free_memory_0008160c",
            "code": "\nvoid resetAndFreeMemory_0008160c(int *data)\n\n{\n  if (*data != 0) {\n    free();\n  }\n  *data = 0;\n  data[2] = 0;\n  data[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_and_free_memory_0008160c",
                "param_1": "data"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "resize_and_store_00081622",
            "code": "\nint resize_and_store_00081622(int *pointer,int size,undefined4 element_size,undefined4 alignment)\n\n{\n  int new_pointer;\n  \n  new_pointer = realloc(*pointer,size + 1,element_size,alignment,alignment);\n  if (new_pointer != 0) {\n    *pointer = new_pointer;\n    pointer[1] = size;\n    new_pointer = 1;\n  }\n  return new_pointer;\n}\n\n",
            "renaming": {
                "FUN_00081622": "resize_and_store_00081622",
                "param_1": "pointer",
                "param_2": "size",
                "param_3": "element_size",
                "param_4": "alignment",
                "iVar1": "new_pointer"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_modify_buffer_0008163a",
            "code": "\nundefined4 checkAndModifyBuffer_0008163a(int *buffer,uint size)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < size)) {\n    result = changeBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_modify_buffer_0008163a",
                "param_1": "buffer",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_data_0008165c",
            "code": "\nundefined4 * updateData_0008165c(undefined4 *data,undefined4 sourceString,undefined4 size)\n\n{\n  int reservationResult;\n  \n  reservationResult = reserve(data,size);\n  if (reservationResult == 0) {\n    invalidate(data);\n  }\n  else {\n    data[2] = size;\n    strcpy(*data,sourceString);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_data_0008165c",
                "param_1": "data",
                "param_2": "sourceString",
                "param_3": "size",
                "iVar1": "reservationResult"
            },
            "calling": [
                "String"
            ],
            "called": [
                "invalidate",
                "reserve",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_and_copy_00081682",
            "code": "\nundefined4 * initializeAndCopy_00081682(undefined4 *outputArray,int inputString)\n\n{\n  undefined4 stringLength;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputString != 0) {\n    stringLength = strlen(inputString);\n    copy(outputArray,inputString,stringLength);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_and_copy_00081682",
                "param_1": "outputArray",
                "param_2": "inputString",
                "uVar1": "stringLength"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_main_loop_000816a8",
            "code": "\nvoid runMainLoop_000816a8(void)\n\n{\n  configureWatchdog();\n  initializeBoard();\n  initializeVariant();\n  waitForMilliseconds(1);\n  setupBoard();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_main_loop_000816a8",
                "_watchdogDefaultSetup": "configureWatchdog",
                "initialize_board_00080ae4": "initializeBoard",
                "initVariant": "initializeVariant",
                "delay": "waitForMilliseconds",
                "setup": "setupBoard",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "loop",
                "delay",
                "FUN_00080ae4",
                "setup",
                "initVariant",
                "_watchdogDefaultSetup",
                "serialEventRun"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_default_settings_000816d4",
            "code": "\n\n\nvoid initializeDefaultSettings_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_default_settings_000816d4"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_data_00081714",
            "code": "\nundefined4 getGlobalData_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_data_00081714"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculateFloatingPoint_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint temp1;\n  uint temp2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool comparisonResult;\n  \n  temp1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  comparisonResult = result1 == 0;\n  if (!comparisonResult) {\n    input4 = input2 << 1;\n    comparisonResult = input4 == 0;\n  }\n  if (!comparisonResult) {\n    comparisonResult = result1 == input4;\n  }\n  shiftedInput1 = (int)result1 >> 0x18;\n  if (!comparisonResult) {\n    comparisonResult = shiftedInput1 == -1;\n  }\n  if (!comparisonResult) {\n    comparisonResult = (int)input4 >> 0x18 == -1;\n  }\n  if (comparisonResult) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      result1 = temp1;\n      if (shiftedInput1 == -1) {\n        result1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        temp1 = result1;\n      }\n      comparisonResult = (result1 & 0x7fffff) == 0;\n      if (comparisonResult) {\n        comparisonResult = (temp1 & 0x7fffff) == 0;\n      }\n      if (comparisonResult) {\n        comparisonResult = result1 == temp1;\n      }\n      if (!comparisonResult) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  comparisonResult = difference != 0;\n  result2 = result1;\n  if (comparisonResult && result1 <= input4) {\n    result2 = result1 + difference;\n  }\n  if (comparisonResult && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (comparisonResult && result1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (comparisonResult && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (result2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    comparisonResult = temp2 != 0;\n    temp2 = -temp2;\n    result1 = -result1 - (uint)comparisonResult;\n  }\n  if (result1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result1 = result1 * 2 + (uint)(temp1 != 0);\n    temp1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result1 = result1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (temp1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    temp1 = result2 - 1;\n    if (0xffffff < result1) {\n      temp1 = result1 & 1;\n      result1 = result1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = result2;\n      if (0xfd < result2) goto LAB_0008186a;\n    }\n  }\n  result1 = result1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "comparisonResult"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "perform_arithmetic_00081734",
            "code": "\nuint performArithmetic_00081734(uint operand1,uint operand2,undefined4 param3,uint param4)\n\n{\n  int firstOperandShifted;\n  int secondOperandShifted;\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint difference;\n  bool isZero;\n  \n  temp1 = operand1 << 1;\n  isZero = temp1 == 0;\n  if (!isZero) {\n    param4 = operand2 << 1;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = temp1 == param4;\n  }\n  firstOperandShifted = (int)temp1 >> 0x18;\n  if (!isZero) {\n    isZero = firstOperandShifted == -1;\n  }\n  if (!isZero) {\n    isZero = (int)param4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    secondOperandShifted = (int)(operand2 << 1) >> 0x18;\n    if (firstOperandShifted == -1 || secondOperandShifted == -1) {\n      temp1 = operand2;\n      if (firstOperandShifted == -1) {\n        temp1 = operand1;\n      }\n      if (firstOperandShifted != -1 || secondOperandShifted != -1) {\n        operand2 = temp1;\n      }\n      isZero = (temp1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (operand2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = temp1 == operand2;\n      }\n      if (!isZero) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((operand1 ^ operand2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        operand1 = operand2;\n      }\n      return operand1;\n    }\n    if (operand1 != operand2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = operand1 << 1;\n      if ((operand1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return operand1 + 0x800000;\n    }\n    operand1 = operand1 & 0x80000000;\nLAB_0008186a:\n    return operand1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - temp1;\n  isZero = difference != 0;\n  temp2 = temp1;\n  if (isZero && temp1 <= param4) {\n    temp2 = temp1 + difference;\n  }\n  if (isZero && temp1 <= param4) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (isZero && temp1 <= param4) {\n    operand1 = operand1 ^ operand2;\n  }\n  if (isZero && temp1 <= param4) {\n    operand2 = operand2 ^ operand1;\n  }\n  if (param4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return operand1;\n  }\n  temp1 = operand1 & 0xffffff | 0x800000;\n  if ((operand1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result = operand2 & 0xffffff | 0x800000;\n  if ((operand2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (temp2 == difference) {\n    result = result ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  operand1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isZero = result != 0;\n    result = -result;\n    temp1 = -temp1 - (uint)isZero;\n  }\n  if (temp1 < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    temp1 = temp1 * 2 + (uint)(difference != 0);\n    difference = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)difference < (int)temp2) {\n        temp1 = temp1 >> (-(difference - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (difference - temp2) * 0x800000;\n      }\n      return temp1 | operand1;\n    }\n  }\n  else {\n    difference = temp2 - 1;\n    if (0xffffff < temp1) {\n      difference = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | operand1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "perform_arithmetic_00081734",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "result",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "difference",
                "bVar7": "isZero",
                "iVar1": "firstOperandShifted",
                "iVar2": "secondOperandShifted"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "count_bits_and_calculate_00081894",
            "code": "\nuint countBitsAndCalculate_00081894(uint input)\n\n{\n  uint result;\n  uint temp;\n  int offset;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = LZCOUNT(input);\n  temp = result - 8;\n  offset = temp * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    mask = 0 << (temp & 0xff);\n    result = offset + (input << (temp & 0xff)) +\n            (0U >> (0x20 - temp & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  temp = input << result + 0x18;\n  result = offset + ((input >> (0x20 - (result + 0x18) & 0xff)) - ((int)temp >> 0x1f));\n  if ((temp & 0x7fffffff) == 0) {\n    result = result & ~(temp >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081894": "count_bits_and_calculate_00081894",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "temp",
                "iVar3": "offset",
                "uVar4": "mask"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_checksum_0008189c",
            "code": "\nuint calculateChecksum_0008189c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_checksum_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_00081944",
            "code": "\nuint calculateFloatingPoint_00081944(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  longlong lVar1;\n  uint result;\n  uint exponent1;\n  int exponentSum;\n  int exponentDiff;\n  uint product;\n  int exponent7;\n  uint mantissa1;\n  bool condition1;\n  bool condition2;\n  \n  exponent1 = value1 >> 0x17 & 0xff;\n  condition1 = exponent1 == 0;\n  if (!condition1) {\n    param4 = value2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = exponent1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = value2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      condition1 = value1 == 0 || value1 == 0x80000000;\n      result = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        condition1 = value2 == 0;\n        result = value1;\n      }\n      if (!condition1) {\n        condition1 = value2 == 0x80000000;\n      }\n      mantissa1 = result;\n      if (((condition1) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (mantissa1 = value2, (value2 & 0x7fffff) != 0)))) {\n        return mantissa1 | 0x7fc00000;\n      }\n      result = result ^ value2;\n      goto LAB_00081a94;\n    }\n    condition1 = (value1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (value2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    condition1 = exponent1 == 0;\n    result = value1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        value1 = value1 << 1;\n        condition1 = (value1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      exponent1 = exponent1 - 1;\n    }\n    value1 = value1 | result;\n    condition1 = param4 == 0;\n    result = value2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        value2 = value2 << 1;\n        condition1 = (value2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      param4 = param4 - 1;\n    }\n    value2 = value2 | result;\n  }\n  exponentSum = exponent1 + param4;\n  mantissa1 = value1 ^ value2;\n  exponent1 = value1 << 9;\n  condition1 = exponent1 == 0;\n  if (!condition1) {\n    value2 = value2 << 9;\n    condition1 = value2 == 0;\n  }\n  if (condition1) {\n    if (exponent1 == 0) {\n      value2 = value2 << 9;\n    }\n    result = mantissa1 & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    condition2 = SBORROW4(exponentSum,0x7f);\n    exponentDiff = exponentSum + -0x7f;\n    condition1 = exponentDiff == 0;\n    exponent7 = exponentDiff;\n    if (!condition1 && 0x7e < exponentSum) {\n      condition2 = SBORROW4(0xff,exponentDiff);\n      exponent7 = 0xff - exponentDiff;\n      condition1 = exponentDiff == 0xff;\n    }\n    if (!condition1 && exponent7 < 0 == condition2) {\n      result = result | exponentDiff * 0x800000;\n    }\n    if (!condition1 && exponent7 < 0 == condition2) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    condition2 = SBORROW4(exponentDiff,1);\n    mantissa1 = exponentSum - 0x80;\n    condition1 = mantissa1 == 0;\n    exponent1 = mantissa1;\n  }\n  else {\n    lVar1 = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    product = (uint)lVar1;\n    result = (uint)((ulonglong)lVar1 >> 0x20);\n    condition1 = result < 0x800000;\n    if (condition1) {\n      result = result << 1;\n    }\n    if (condition1) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = mantissa1 & 0x80000000 | result;\n    mantissa1 = (exponentSum + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(mantissa1,0xfd);\n    condition1 = mantissa1 == 0xfd;\n    exponent1 = mantissa1 - 0xfd;\n    if (mantissa1 < 0xfe) {\n      result = result + mantissa1 * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (condition1 || (int)exponent1 < 0 != condition2) {\n    condition1 = (int)(mantissa1 + 0x19) < 0;\n    if (mantissa1 == 0xffffffe7 || condition1 != SCARRY4(mantissa1,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (mantissa1 != 0xffffffe7 && condition1 == SCARRY4(mantissa1,0x19)) {\n      exponent1 = (result << 1) >> (-mantissa1 & 0xff);\n      mantissa1 = result << (mantissa1 + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | mantissa1 << 1) == 0) {\n        exponent1 = exponent1 & ~(mantissa1 >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_00081944",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "mantissa1",
                "iVar4": "exponentSum",
                "iVar5": "exponentDiff",
                "iVar7": "exponent7",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "calculate_result_00081bf4",
            "code": "\nuint calculate_result_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint mul_input_1;\n  uint mul_input_2;\n  uint combined_result;\n  bool is_zero;\n  \n  mul_input_1 = input_1 * 2;\n  mul_input_2 = input_2 * 2;\n  if (((int)mul_input_1 >> 0x18 == -1 || (int)mul_input_2 >> 0x18 == -1) &&\n     ((((int)mul_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)mul_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_result = mul_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_result == 0;\n  if (!is_zero) {\n    combined_result = input_1 ^ input_2;\n    is_zero = combined_result == 0;\n  }\n  is_negative = -1 < (int)combined_result;\n  if (is_negative) {\n    input_1 = mul_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && mul_input_2 <= mul_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || mul_input_2 > mul_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "mul_input_1",
                "uVar3": "mul_input_2",
                "uVar4": "combined_result",
                "bVar5": "is_zero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "compare_floats_00081c54",
            "code": "\nvoid compareFloats_00081c54(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_integers_00081c5c",
            "code": "\nundefined8 concatenateIntegers_00081c5c(undefined4 firstInteger,undefined4 secondInteger)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondInteger,firstInteger);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_integers_00081c5c",
                "param_1": "firstInteger",
                "param_2": "secondInteger"
            },
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmple"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_comparison_result_00081c94",
            "code": "\nbool check_comparison_result_00081c94(void)\n\n{\n  undefined zero_result_flag;\n  undefined carry_flag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carry_flag || (bool)zero_result_flag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_comparison_result_00081c94",
                "in_ZR": "zero_result_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_conditions_00081ca8",
            "code": "\nbool checkConditions_00081ca8(void)\n\n{\n  undefined isZeroOrBelow;\n  undefined isCarrySet;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isCarrySet || (bool)isZeroOrBelow;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_conditions_00081ca8",
                "in_ZR": "isZeroOrBelow",
                "in_CY": "isCarrySet"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "value_transformation_00081cd0",
            "code": "\nuint valueTransformation_00081cd0(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "value_transformation_00081cd0",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "difference"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "decode_unsigned_int_00081d1c",
            "code": "\nuint decodeUnsignedInt_00081d1c(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "decode_unsigned_int_00081d1c",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword symbolAddress,dword newValue,dword flag)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitmask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)malloc(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitmask = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = symbolAddress;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitmask;\n  relocationEntry[index + 0x42] = flag;\n  relocationEntry[99] = bitmask | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = newValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "symbolAddress",
                "param_2": "newValue",
                "param_3": "flag",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitmask"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "initialize_and_invoke_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid initialize_and_invoke_00081d7c(void)\n\n{\n  int counter;\n  code **function_ptr_array;\n  \n  _init();\n  function_ptr_array = (code **)0x85860;\n  counter = 0;\n  do {\n    counter = counter + 1;\n    function_ptr_array = function_ptr_array + 1;\n    (**function_ptr_array)();\n  } while (counter != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "initialize_and_invoke_00081d7c",
                "iVar1": "counter",
                "ppcVar2": "function_ptr_array"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "allocate_memory_00081df4",
            "code": "\nvoid allocateMemory_00081df4(undefined4 size)\n\n{\n  _malloc_r(relocationTable[140].r_offset,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "param_1": "size",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "free_elf32_rel_00081e04",
            "code": "\nvoid free_elf32_rel_00081e04(undefined4 data_ptr)\n\n{\n  _free_r(rel_array[140].offset,data_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "free_elf32_rel_00081e04",
                "param_1": "data_ptr",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_offset": "offset"
            },
            "calling": [
                "invalidate",
                "~String"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *lock_parameter,uint size)\n\n{\n  dword info1;\n  int offset1;\n  uint flags1;\n  uint flags2;\n  int val1;\n  uint val2;\n  dword offset2;\n  uint val3;\n  int val4;\n  undefined *ptr1;\n  dword info2;\n  dword info3;\n  int val5;\n  dword *ptr2;\n  uint size2;\n  undefined *ptr3;\n  dword *ptr4;\n  uint count;\n  \n  if (size + 0xb < 0x17) {\n    size2 = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    size2 = size + 0xb & 0xfffffff8;\n    if (((int)size2 < 0) || (size2 < size)) {\nLAB_00081e7a:\n      *lock_parameter = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock_parameter);\n  info1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (size2 < 0x1f8) {\n    val5 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + size2);\n    if ((val5 != size2 + 0x20070464) ||\n       (offset1 = val5 + 8, val5 = *(int *)(val5 + 0x14), offset1 != val5)) {\n      val1 = *(int *)(val5 + 0xc);\n      val4 = (*(uint *)(val5 + 4) & 0xfffffffc) + val5;\n      size2 = *(uint *)(val4 + 4);\n      offset1 = *(int *)(val5 + 8);\n      *(int *)(offset1 + 0xc) = val1;\n      *(int *)(val1 + 8) = offset1;\n      *(uint *)(val4 + 4) = size2 | 1;\n      __malloc_unlock(lock_parameter);\n      return (int *)(val5 + 8);\n    }\n    count = (size2 >> 3) + 2;\n  }\n  else {\n    count = size2 >> 9;\n    if (count == 0) {\n      offset1 = 0x7e;\n      val5 = 0x3f;\n    }\n    else if (count < 5) {\n      val5 = (size2 >> 6) + 0x38;\n      offset1 = val5 * 2;\n    }\n    else if (count < 0x15) {\n      val5 = count + 0x5b;\n      offset1 = val5 * 2;\n    }\n    else if (count < 0x55) {\n      val5 = (size2 >> 0xc) + 0x6e;\n      offset1 = val5 * 2;\n    }\n    else if (count < 0x155) {\n      val5 = (size2 >> 0xf) + 0x77;\n      offset1 = val5 * 2;\n    }\n    else if (count < 0x555) {\n      val5 = (size2 >> 0x12) + 0x7c;\n      offset1 = val5 * 2;\n    }\n    else {\n      offset1 = 0xfc;\n      val5 = 0x7e;\n    }\n    for (offset2 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[offset1]; offset1 * 4 + 0x20070464U != offset2\n        ; offset2 = *(dword *)(offset2 + 0xc)) {\n      count = *(uint *)(offset2 + 4) & 0xfffffffc;\n      val1 = count - size2;\n      if (0xf < val1) {\n        val5 = val5 + -1;\n        break;\n      }\n      if (-1 < val1) {\n        offset1 = count + offset2;\n        size2 = *(uint *)(offset1 + 4);\n        val1 = *(int *)(offset2 + 0xc);\n        val5 = *(int *)(offset2 + 8);\n        *(int *)(val5 + 0xc) = val1;\n        *(int *)(val1 + 8) = val5;\n        *(uint *)(offset1 + 4) = size2 | 1;\n        __malloc_unlock(lock_parameter);\n        return (int *)(offset2 + 8);\n      }\n    }\n    count = val5 + 1;\n  }\n  offset2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    flags1 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    flags2 = flags1 & 0xfffffffc;\n    val2 = flags2 - size2;\n    if (0xf < (int)val2) {\n      offset2 = size2 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = size2 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = offset2;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = offset2;\n      *(undefined4 *)(offset2 + 0xc) = 0x2007046c;\n      *(undefined4 *)(offset2 + 8) = 0x2007046c;\n      *(uint *)(offset2 + 4) = val2 | 1;\n      *(uint *)(offset2 + val2) = val2;\n      __malloc_unlock(lock_parameter);\n      return (int *)(info1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)val2) {\n      *(uint *)(flags2 + info1 + 4) = *(uint *)(flags2 + info1 + 4) | 1;\n      __malloc_unlock(lock_parameter);\n      return (int *)(info1 + 8);\n    }\n    if (flags2 < 0x200) {\n      flags2 = flags1 & 0xfffffff8;\n      val5 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags2);\n      offset2 = 1 << ((int)(flags1 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(info1 + 8) = val5;\n      *(uint *)(info1 + 0xc) = flags2 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = offset2;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags2) = info1;\n      *(dword *)(val5 + 0xc) = info1;\n    }\n    else {\n      val2 = flags1 >> 9;\n      if (val2 < 5) {\n        offset1 = (flags1 >> 6) + 0x38;\n        val5 = offset1 * 2;\n      }\n      else if (val2 < 0x15) {\n        offset1 = val2 + 0x5b;\n        val5 = offset1 * 2;\n      }\n      else if (val2 < 0x55) {\n        offset1 = (flags1 >> 0xc) + 0x6e;\n        val5 = offset1 * 2;\n      }\n      else if (val2 < 0x155) {\n        offset1 = (flags1 >> 0xf) + 0x77;\n        val5 = offset1 * 2;\n      }\n      else if (val2 < 0x555) {\n        offset1 = (flags1 >> 0x12) + 0x7c;\n        val5 = offset1 * 2;\n      }\n      else {\n        val5 = 0xfc;\n        offset1 = 0x7e;\n      }\n      offset2 = val5 * 4 + 0x20070464;\n      info2 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[val5];\n      if (info2 == offset2) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (offset1 >> 2 & 0xffU);\n        info3 = info2;\n      }\n      else {\n        do {\n          info3 = info2;\n          if ((*(uint *)(info2 + 4) & 0xfffffffc) <= flags2) break;\n          info2 = *(dword *)(info2 + 8);\n          info3 = info2;\n        } while (offset2 != info2);\n        info2 = *(dword *)(info3 + 0xc);\n      }\n      offset2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(info1 + 0xc) = info2;\n      *(dword *)(info1 + 8) = info3;\n      *(dword *)(info2 + 8) = info1;\n      *(dword *)(info3 + 0xc) = info1;\n    }\n  }\n  info1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  flags1 = 1 << ((int)count >> 2 & 0xffU);\n  if (flags1 <= offset2) {\n    if ((offset2 & flags1) == 0) {\n      count = count & 0xfffffffc;\n      do {\n        flags1 = flags1 << 1;\n        count = count + 4;\n      } while ((offset2 & flags1) == 0);\n    }\n    do {\n      ptr4 = &Elf32_Rel_ARRAY_20070000[count + 0x8c].r_info;\n      ptr2 = ptr4;\n      flags2 = count;\n      do {\n        for (ptr1 = (undefined *)ptr2[3]; ptr2 != (dword *)ptr1;\n            ptr1 = *(undefined **)(ptr1 + 0xc)) {\n          val2 = *(uint *)(ptr1 + 4) & 0xfffffffc;\n          val3 = val2 - size2;\n          if (0xf < (int)val3) {\n            offset1 = *(int *)(ptr1 + 8);\n            val5 = *(int *)(ptr1 + 0xc);\n            ptr3 = ptr1 + size2;\n            *(uint *)(ptr1 + 4) = size2 | 1;\n            *(int *)(offset1 + 0xc) = val5;\n            *(int *)(val5 + 8) = offset1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)ptr3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)ptr3;\n            *(undefined4 *)(ptr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(ptr3 + 8) = 0x2007046c;\n            *(uint *)(ptr3 + 4) = val3 | 1;\n            *(uint *)(ptr3 + val3) = val3;\n            __malloc_unlock(lock_parameter);\n            return (int *)(ptr1 + 8);\n          }\n          if (-1 < (int)val3) {\n            val5 = *(int *)(ptr1 + 8);\n            offset1 = *(int *)(ptr1 + 0xc);\n            *(uint *)(ptr1 + val2 + 4) = *(uint *)(ptr1 + val2 + 4) | 1;\n            *(int *)(val5 + 0xc) = offset1;\n            *(int *)(offset1 + 8) = val5;\n            __malloc_unlock(lock_parameter);\n            return (int *)(ptr1 + 8);\n          }\n        }\n        flags2 = flags2 + 1;\n        ptr2 = ptr2 + 2;\n      } while ((flags2 & 3) != 0);\n      do {\n        val2 = count & 3;\n        ptr1 = (undefined *)(ptr4 + -2);\n        count = count - 1;\n        if (val2 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~flags1;\n          break;\n        }\n        ptr4 = (dword *)*ptr4;\n      } while (ptr4 == (dword *)ptr1);\n      flags1 = flags1 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= flags1 &&\n           flags1 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (count = flags2, flags1 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & flags1) == 0; flags1 = flags1 << 1) {\n        count = count + 4;\n      }\n    } while( true );\n  }\n  count = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((size2 <= count) &&\n     (flags1 = count - size2, offset2 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)flags1))\n  goto LAB_0008211e;\n  flags1 = Elf32_Rel_ARRAY_20070000[141].r_info + count;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    flags2 = size2 + DAT_20071190 + 0x10;\n  }\n  else {\n    flags2 = size2 + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  offset2 = _sbrk_r(lock_parameter,flags2);\n  if ((offset2 == 0xffffffff) || ((offset2 < flags1 && (info1 != 0x20070464)))) {\n    count = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    val2 = DAT_20071194 + flags2;\n    DAT_20071194 = val2;\n    if ((flags1 == offset2) && ((flags1 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = flags2 + count | 1;\n    }\n    else {\n      info2 = offset2;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        info2 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = val2 + (offset2 - flags1);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = info2;\n      flags1 = offset2 & 7;\n      if (flags1 == 0) {\n        val5 = 0x1000;\n      }\n      else {\n        offset2 = offset2 + (8 - flags1);\n        val5 = 0x1008 - flags1;\n      }\n      val5 = val5 - (flags2 + offset2 & 0xfff);\n      offset1 = _sbrk_r(lock_parameter,val5);\n      if (offset1 == -1) {\n        flags1 = 1;\n        val5 = 0;\n      }\n      else {\n        flags1 = (offset1 - offset2) + val5 | 1;\n      }\n      val2 = DAT_20071194 + val5;\n      Elf32_Rel_ARRAY_20070000[141].r_info = offset2;\n      DAT_20071194 = val2;\n      *(uint *)(offset2 + 4) = flags1;\n      if (info1 != 0x20070464) {\n        if (count < 0x10) {\n          *(undefined4 *)(offset2 + 4) = 1;\n          count = 0;\n          goto LAB_00082108;\n        }\n        count = count - 0xc & 0xfffffff8;\n        *(uint *)(info1 + 4) = count | *(uint *)(info1 + 4) & 1;\n        *(undefined4 *)(info1 + count + 4) = 5;\n        *(undefined4 *)(info1 + count + 8) = 5;\n        if (0xf < count) {\n          _free_r(lock_parameter,info1 + 8);\n          val2 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < val2) {\n      DAT_2007118c = val2;\n    }\n    if (DAT_20071188 < val2) {\n      DAT_20071188 = val2;\n    }\n    count = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    offset2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  flags1 = count - size2;\n  if ((count < size2) || ((int)flags1 < 0x10)) {\n    __malloc_unlock(lock_parameter);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = size2 + offset2;\n  *(uint *)(offset2 + 4) = size2 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = flags1 | 1;\n  __malloc_unlock(lock_parameter);\n  return (int *)(offset2 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "lock_parameter",
                "param_2": "size",
                "dVar1": "info1",
                "iVar2": "offset1",
                "uVar3": "flags1",
                "uVar4": "flags2",
                "iVar5": "val1",
                "uVar6": "val2",
                "dVar7": "offset2",
                "uVar8": "val3",
                "iVar9": "val4",
                "puVar10": "ptr1",
                "dVar11": "info2",
                "dVar12": "info3",
                "iVar13": "val5",
                "pdVar14": "ptr2",
                "uVar15": "size2",
                "puVar16": "ptr3",
                "pdVar17": "ptr4",
                "uVar18": "count"
            },
            "calling": [
                "__smakebuf_r",
                "__sfvwrite_r",
                "_realloc_r",
                "malloc"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destEndPtr;\n  undefined4 *srcPtr;\n  uint tempSize;\n  uint remainingSize;\n  bool loopCondition;\n  \n  destEndPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      remainingSize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          srcPtr = destEndPtr;\n          loopCondition = remainingSize != 0;\n          remainingSize = remainingSize - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destEndPtr = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remainingSize = 4 - ((uint)destination & 3);\n      size = size - remainingSize;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destEndPtr = destPtr;\n      source = srcPtr;\n      if ((remainingSize & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destEndPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destEndPtr = *source;\n    destEndPtr[1] = source[1];\n    destEndPtr[2] = source[2];\n    destEndPtr[3] = source[3];\n    destEndPtr[4] = source[4];\n    destEndPtr[5] = source[5];\n    destEndPtr[6] = source[6];\n    destEndPtr[7] = source[7];\n    destEndPtr[8] = source[8];\n    destEndPtr[9] = source[9];\n    destEndPtr[10] = source[10];\n    destEndPtr[0xb] = source[0xb];\n    destEndPtr[0xc] = source[0xc];\n    destEndPtr[0xd] = source[0xd];\n    destEndPtr[0xe] = source[0xe];\n    destEndPtr[0xf] = source[0xf];\n    destEndPtr = destEndPtr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  tempSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destEndPtr = *source;\n      destEndPtr[1] = source[1];\n      destEndPtr[2] = source[2];\n      destEndPtr[3] = source[3];\n      destEndPtr = destEndPtr + 4;\n      source = source + 4;\n      loopCondition = 0xf < tempSize;\n      tempSize = tempSize - 0x10;\n    } while (loopCondition);\n  }\n  remainingSize = tempSize + 0xc;\n  srcPtr = destEndPtr;\n  destPtr = source;\n  if (0xfffffff3 < tempSize) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      loopCondition = 3 < remainingSize;\n      remainingSize = remainingSize - 4;\n      destEndPtr = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (loopCondition);\n  }\nLAB_000823d0:\n  if (remainingSize + 4 != 0) {\n    destPtr = destEndPtr;\n    srcPtr = source;\n    if ((remainingSize & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destEndPtr + 1);\n      *(undefined *)destEndPtr = *(undefined *)source;\n    }\n    if ((remainingSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destEndPtr",
                "puVar3": "srcPtr",
                "uVar4": "tempSize",
                "uVar5": "remainingSize",
                "bVar6": "loopCondition"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "reverse_copy_00082438",
            "code": "\nvoid reverseCopy_00082438(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int i;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *iter;\n  uint temp;\n  undefined *temp_ptr;\n  uint remaining;\n  \n  if ((src < dest) && (iter = (undefined4 *)((int)src + length), dest < iter)) {\n    temp_ptr = (undefined *)((int)dest + length);\n    i = length - 1;\n    if (length != 0) {\n      do {\n        iter = (undefined4 *)((int)iter + -1);\n        i = i + -1;\n        temp_ptr = temp_ptr + -1;\n        *temp_ptr = *(undefined *)iter;\n      } while (i != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    iter = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = iter + 4;\n      *iter = *src_ptr;\n      iter[1] = src_ptr[1];\n      iter[2] = src_ptr[2];\n      iter[3] = src_ptr[3];\n      iter = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    i = (length - 0x10 >> 4) + 1;\n    remaining = length & 0xf;\n    src = src + i * 4;\n    dest = dest + i * 4;\n    temp = remaining;\n    iter = dest;\n    src_ptr = src;\n    if (3 < remaining) {\n      do {\n        temp = temp - 4;\n        *iter = *src_ptr;\n        iter = iter + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp);\n      i = (remaining - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + i);\n      src = (undefined4 *)((int)src + i);\n      remaining = length & 3;\n    }\n    length = remaining;\n    if (length == 0) {\n      return;\n    }\n  }\n  iter = dest;\n  do {\n    src_ptr = (undefined4 *)((int)iter + 1);\n    *(undefined *)iter = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    iter = src_ptr;\n  } while (src_ptr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "i",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "iter",
                "uVar5": "temp",
                "puVar6": "temp_ptr",
                "uVar7": "remaining"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "copy_data_00082504",
            "code": "\nvoid copyData_00082504(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextDestPtr;\n  undefined4 concatValue;\n  uint remainingSize;\n  bool isSizeZero;\n  \n  if (((uint)dest & 3) != 0) {\n    isSizeZero = size == 0;\n    destPtr = dest;\n    size = size - 1;\n    if (isSizeZero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)dest & 3) == 0) break;\n      isSizeZero = size == 0;\n      destPtr = dest;\n      size = size - 1;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    concatValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    destPtr = dest;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *destPtr = concatValue;\n        destPtr[1] = concatValue;\n        destPtr[2] = concatValue;\n        destPtr[3] = concatValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)dest + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      destPtr = dest;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *dest = concatValue;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)destPtr + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    destPtr = dest;\n    do {\n      nextDestPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextDestPtr;\n    } while (nextDestPtr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "copy_data_00082504",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextDestPtr",
                "uVar3": "concatValue",
                "uVar4": "remainingSize",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "reallocate_memory_000825a0",
            "code": "\nvoid reallocateMemory_000825a0(undefined4 oldSize,undefined4 newSize)\n\n{\n  _realloc_r(Elf32_Rel_ARRAY_20070000[140].r_offset,oldSize,newSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "reallocate_memory_000825a0",
                "param_1": "oldSize",
                "param_2": "newSize"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_memory_000825b0",
            "code": "\nint * allocateMemory_000825b0(undefined4 *allocator_ptr,int *old_memory,uint new_size)\n\n{\n  dword variable1;\n  int *new_memory;\n  uint variable2;\n  int variable3;\n  uint variable4;\n  int variable5;\n  int *variable6;\n  uint variable7;\n  uint variable8;\n  int *variable9;\n  \n  if (old_memory == (int *)0x0) {\n    new_memory = (int *)_malloc_r(allocator_ptr,new_size);\n    return new_memory;\n  }\n  __malloc_lock();\n  variable4 = old_memory[-1];\n  variable7 = variable4 & 0xfffffffc;\n  new_memory = old_memory + -2;\n  if (new_size + 0xb < 0x17) {\n    variable8 = 0x10;\n  }\n  else {\n    variable8 = new_size + 0xb & 0xfffffff8;\n    if ((int)variable8 < 0) goto LAB_0008267c;\n  }\n  if (variable8 < new_size) {\nLAB_0008267c:\n    *allocator_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)variable7 < (int)variable8) {\n    variable1 = (int)new_memory + variable7;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == variable1) {\n      variable2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      variable1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(variable8 + 0x10) <= (int)(variable2 + variable7)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_memory + variable8;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (variable2 + variable7) - variable8 | 1;\n        old_memory[-1] = variable8 | old_memory[-1] & 1U;\n        __malloc_unlock(allocator_ptr);\n        return old_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(variable1 + 4) & 0xfffffffe) + variable1 + 4) & 1) == 0) {\n      variable2 = *(uint *)(variable1 + 4) & 0xfffffffc;\n      if ((int)variable8 <= (int)(variable2 + variable7)) {\n        variable5 = *(int *)(variable1 + 0xc);\n        variable3 = *(int *)(variable1 + 8);\n        *(int *)(variable3 + 0xc) = variable5;\n        *(int *)(variable5 + 8) = variable3;\n        variable7 = variable2 + variable7;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      variable2 = 0;\n      variable1 = 0;\n    }\n    if (-1 < (int)(variable4 << 0x1f)) {\n      variable9 = (int *)((int)new_memory - old_memory[-2]);\n      variable4 = (variable9[1] & 0xfffffffcU) + variable7;\n      if (variable1 != 0) {\n        if (variable1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(variable8 + 0x10) <= (int)(variable2 + variable4)) {\n            new_memory = variable9 + 2;\n            variable3 = *new_memory;\n            variable5 = variable9[3];\n            variable7 = variable7 - 4;\n            *(int *)(variable3 + 0xc) = variable5;\n            *(int *)(variable5 + 8) = variable3;\n            if (variable7 < 0x25) {\n              variable6 = new_memory;\n              if (0x13 < variable7) {\n                variable9[2] = *old_memory;\n                variable9[3] = old_memory[1];\n                if (variable7 < 0x1c) {\n                  old_memory = old_memory + 2;\n                  variable6 = variable9 + 4;\n                }\n                else {\n                  variable9[4] = old_memory[2];\n                  variable9[5] = old_memory[3];\n                  if (variable7 == 0x24) {\n                    variable9[6] = old_memory[4];\n                    variable6 = old_memory + 5;\n                    old_memory = old_memory + 6;\n                    variable9[7] = *variable6;\n                    variable6 = variable9 + 8;\n                  }\n                  else {\n                    old_memory = old_memory + 4;\n                    variable6 = variable9 + 6;\n                  }\n                }\n              }\n              *variable6 = *old_memory;\n              variable6[1] = old_memory[1];\n              variable6[2] = old_memory[2];\n            }\n            else {\n              memmove(new_memory,old_memory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)variable9 + variable8;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (variable2 + variable4) - variable8 | 1;\n            variable9[1] = variable8 | variable9[1] & 1U;\n            __malloc_unlock(allocator_ptr);\n            return new_memory;\n          }\n        }\n        else {\n          variable2 = variable2 + variable4;\n          if ((int)variable8 <= (int)variable2) {\n            variable5 = *(int *)(variable1 + 0xc);\n            variable3 = *(int *)(variable1 + 8);\n            *(int *)(variable3 + 0xc) = variable5;\n            *(int *)(variable5 + 8) = variable3;\n            variable6 = variable9 + 2;\n            variable3 = *variable6;\n            variable5 = variable9[3];\n            variable4 = variable7 - 4;\n            *(int *)(variable3 + 0xc) = variable5;\n            *(int *)(variable5 + 8) = variable3;\n            variable7 = variable2;\n            if (variable4 < 0x25) {\n              new_memory = variable6;\n              if (0x13 < variable4) {\n                variable9[2] = *old_memory;\n                variable9[3] = old_memory[1];\n                if (variable4 < 0x1c) {\n                  old_memory = old_memory + 2;\n                  new_memory = variable9 + 4;\n                }\n                else {\n                  variable9[4] = old_memory[2];\n                  variable9[5] = old_memory[3];\n                  if (variable4 == 0x24) {\n                    variable9[6] = old_memory[4];\n                    new_memory = old_memory + 5;\n                    old_memory = old_memory + 6;\n                    variable9[7] = *new_memory;\n                    new_memory = variable9 + 8;\n                  }\n                  else {\n                    old_memory = old_memory + 4;\n                    new_memory = variable9 + 6;\n                  }\n                }\n              }\n              *new_memory = *old_memory;\n              new_memory[1] = old_memory[1];\n              new_memory[2] = old_memory[2];\n              variable4 = variable9[1];\n              new_memory = variable9;\n              old_memory = variable6;\n            }\n            else {\n              memmove(variable6,old_memory);\n              variable4 = variable9[1];\n              new_memory = variable9;\n              old_memory = variable6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)variable8 <= (int)variable4) {\n        variable6 = variable9 + 2;\n        variable3 = *variable6;\n        variable5 = variable9[3];\n        variable2 = variable7 - 4;\n        *(int *)(variable3 + 0xc) = variable5;\n        *(int *)(variable5 + 8) = variable3;\n        variable7 = variable4;\n        if (variable2 < 0x25) {\n          new_memory = variable6;\n          if (0x13 < variable2) {\n            variable9[2] = *old_memory;\n            variable9[3] = old_memory[1];\n            if (variable2 < 0x1c) {\n              old_memory = old_memory + 2;\n              new_memory = variable9 + 4;\n            }\n            else {\n              variable9[4] = old_memory[2];\n              variable9[5] = old_memory[3];\n              if (variable2 == 0x24) {\n                variable9[6] = old_memory[4];\n                new_memory = old_memory + 5;\n                old_memory = old_memory + 6;\n                variable9[7] = *new_memory;\n                new_memory = variable9 + 8;\n              }\n              else {\n                old_memory = old_memory + 4;\n                new_memory = variable9 + 6;\n              }\n            }\n          }\n          *new_memory = *old_memory;\n          new_memory[1] = old_memory[1];\n          new_memory[2] = old_memory[2];\n          variable4 = variable9[1];\n          new_memory = variable9;\n          old_memory = variable6;\n        }\n        else {\n          memmove(variable6,old_memory);\n          variable4 = variable9[1];\n          new_memory = variable9;\n          old_memory = variable6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    variable9 = (int *)_malloc_r(allocator_ptr,new_size);\n    if (variable9 == (int *)0x0) goto LAB_000826a4;\n    variable4 = old_memory[-1];\n    if (variable9 + -2 != (int *)((variable4 & 0xfffffffe) + (int)new_memory)) {\n      variable7 = variable7 - 4;\n      if (variable7 < 0x25) {\n        new_memory = old_memory;\n        variable6 = variable9;\n        if (0x13 < variable7) {\n          *variable9 = *old_memory;\n          variable9[1] = old_memory[1];\n          if (variable7 < 0x1c) {\n            new_memory = old_memory + 2;\n            variable6 = variable9 + 2;\n          }\n          else {\n            variable9[2] = old_memory[2];\n            variable9[3] = old_memory[3];\n            if (variable7 == 0x24) {\n              variable9[4] = old_memory[4];\n              variable9[5] = old_memory[5];\n              new_memory = old_memory + 6;\n              variable6 = variable9 + 6;\n            }\n            else {\n              new_memory = old_memory + 4;\n              variable6 = variable9 + 4;\n            }\n          }\n        }\n        *variable6 = *new_memory;\n        variable6[1] = new_memory[1];\n        variable6[2] = new_memory[2];\n      }\n      else {\n        memmove(variable9,old_memory);\n      }\n      _free_r(allocator_ptr,old_memory);\n      goto LAB_000826a4;\n    }\n    variable7 = variable7 + (variable9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  variable2 = variable7 - variable8;\n  variable9 = old_memory;\n  if (variable2 < 0x10) {\n    new_memory[1] = variable4 & 1 | variable7;\n    *(uint *)((int)new_memory + variable7 + 4) = *(uint *)((int)new_memory + variable7 + 4) | 1;\n  }\n  else {\n    new_memory[1] = variable4 & 1 | variable8;\n    *(uint *)((int)new_memory + variable8 + 4) = variable2 | 1;\n    *(uint *)((int)new_memory + variable2 + variable8 + 4) = *(uint *)((int)new_memory + variable2 + variable8 + 4) | 1;\n    _free_r(allocator_ptr,(int)new_memory + variable8 + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(allocator_ptr);\n  return variable9;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_memory_000825b0",
                "param_1": "allocator_ptr",
                "param_2": "old_memory",
                "param_3": "new_size",
                "dVar1": "variable1",
                "piVar2": "new_memory",
                "uVar3": "variable2",
                "iVar4": "variable3",
                "uVar5": "variable4",
                "iVar6": "variable5",
                "piVar7": "variable6",
                "uVar8": "variable7",
                "uVar9": "variable8",
                "piVar10": "variable9"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "memmove",
                "__malloc_lock",
                "__malloc_unlock",
                "_free_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "allocate_memory_00082970",
            "code": "\nvoid allocateMemory_00082970(int *result,undefined4 size)\n\n{\n  int allocatedMemory;\n  \n  DAT_200711bc = 0;\n  allocatedMemory = _sbrk(size);\n  if ((allocatedMemory == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "result",
                "param_2": "size",
                "iVar1": "allocatedMemory"
            },
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copy_string_00082994(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_ptr;\n  uint *next_short_ptr;\n  uint current_word;\n  uint temp_word;\n  uint *dest_ptr;\n  bool is_zero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    next_short_ptr = src;\n    if (((uint)src & 1) != 0) {\n      next_short_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = next_short_ptr;\n    if (((uint)next_short_ptr & 2) != 0) {\n      src = (uint *)((int)next_short_ptr + 2);\n      current_short = *(ushort *)next_short_ptr;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  next_short_ptr = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto LAB_000829f8;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    next_short_ptr = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    next_ptr = next_short_ptr + 1;\n    temp_word = *next_short_ptr;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp_word;\n    if ((temp_word + 0xfefefeff & ~temp_word & 0x80808080) != 0) break;\n    next_short_ptr = next_short_ptr + 2;\n    current_word = *next_ptr;\n    dest_ptr = dest_ptr + 2;\n    *dest = temp_word;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)current_word;\n    temp_word = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp_word != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_short",
                "puVar3": "next_ptr",
                "puVar4": "next_short_ptr",
                "uVar5": "current_word",
                "uVar6": "temp_word",
                "puVar7": "dest_ptr",
                "bVar8": "is_zero"
            },
            "calling": [
                "copy"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZerosCount;\n  uint *ptrInput;\n  uint currentValue;\n  bool isZero;\n  \n  ptrInput = (uint *)(input & 0xfffffffc);\n  leadingZerosCount = -(input & 3);\n  currentValue = *ptrInput;\n  if ((input & 3) != 0) {\n    currentValue = currentValue | 0xffffffffU >> ((leadingZerosCount + 4U & 0x1f) << 3);\n  }\n  while (ptrInput = ptrInput + 1, (currentValue + 0xfefefeff & ~currentValue & 0x80808080) == 0) {\n    leadingZerosCount = leadingZerosCount + 4;\n    currentValue = *ptrInput;\n  }\n  isZero = (currentValue & 0xff) == 0;\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZero = (currentValue & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZero = (currentValue & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZerosCount",
                "puVar2": "ptrInput",
                "uVar3": "currentValue",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "write_to_file_00082ac0",
            "code": "\nint writeToFile_00082ac0(undefined4 filePointer,int fileDescriptor,int **buffer)\n\n{\n  int *currentPointer;\n  int result;\n  int *remainingBuffer;\n  uint iterationCount;\n  undefined4 *currentValue;\n  uint currentValue;\n  uint shiftedValue;\n  \n  if (-1 < *(int *)(fileDescriptor + 100) << 0x12) {\n    result = __sfvwrite_r();\n    buffer[2] = (int *)0x0;\n    buffer[1] = (int *)0x0;\n    return result;\n  }\n  remainingBuffer = buffer[2];\n  currentPointer = *buffer;\n  while (remainingBuffer != (int *)0x0) {\n    currentValue = currentPointer[1];\n    shiftedValue = currentValue >> 2;\n    if (shiftedValue != 0) {\n      currentValue = (undefined4 *)(*currentPointer + -4);\n      iterationCount = 0;\n      do {\n        currentValue = currentValue + 1;\n        result = _fputwc_r(filePointer,*currentValue,fileDescriptor);\n        iterationCount = iterationCount + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (shiftedValue != iterationCount);\n      remainingBuffer = buffer[2];\n    }\n    remainingBuffer = (int *)((int)remainingBuffer - (currentValue & 0xfffffffc));\n    buffer[2] = remainingBuffer;\n    currentPointer = currentPointer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  buffer[2] = (int *)0x0;\n  buffer[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "write_to_file_00082ac0",
                "param_1": "filePointer",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "piVar1": "currentPointer",
                "iVar2": "result",
                "piVar3": "remainingBuffer",
                "uVar4": "iterationCount",
                "puVar5": "currentValue",
                "uVar6": "currentValue",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "format_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formatString_00082b38(int buffer,int format,int *******args,int **size)\n\n{\n  bool hasWidth;\n  bool hasPlusSign;\n  bool hasNumberSign;\n  char signCharacter;\n  bool hasZeroPadding;\n  int ********argPtr;\n  int *width;\n  int result;\n  char digitCharacter;\n  int *******formatPtr;\n  uint digit;\n  int **argPtrs;\n  uint flags;\n  uint nextChar;\n  int numArgs;\n  int ********argPtrStack;\n  int numArgPtrs;\n  int *******remainingFormat;\n  int *arg;\n  int *******argPtrValue;\n  uint hexDigit;\n  int *highArg;\n  int *******remainingArgPtrs;\n  undefined4 highArgValue;\n  int ********argPtrValueStack;\n  bool argPtrNonZero;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = __swsetup_r(buffer,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = __sbprintf(buffer,format,args,size);\n    return result;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  argPtr = (int ********)local_68;\n  local_c8 = size;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  formatPtr = args;\n  if ((*(char *)args != '\\0') && (*(char *)args != '%')) {\n    do {\n      formatPtr = (int *******)((int)formatPtr + 1);\n      if (*(char *)formatPtr == '\\0') break;\n    } while (*(char *)formatPtr != '%');\n    argPtrValue = (int *******)((int)formatPtr - (int)args);\n    if (argPtrValue != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)argPtrValue);\n      *argPtr = args;\n      argPtr[1] = argPtrValue;\n      if (local_98 < 8) {\n        argPtr = argPtr + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)argPtrValue;\n          local_98 = 0;\n          argPtr = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        result = __sprint_r_part_0(buffer,format,&local_9c);\n        argPtr = (int ********)local_68;\n        if (result != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)argPtrValue;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)formatPtr != '\\0') {\n    local_a1 = '\\0';\n    nextChar = (uint)*(byte *)((int)formatPtr + 1);\n    flags = 0;\n    hasZeroPadding = false;\n    hasPlusSign = false;\n    hasWidth = false;\n    hasNumberSign = false;\n    argPtrNonZero = false;\n    argPtrValue = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    args = (int *******)((int)formatPtr + 1);\nLAB_00082c12:\n    args = (int *******)((int)args + 1);\nLAB_00082c16:\n    switch(nextChar) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (nextChar != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        argPtrValueStack = (int ********)&local_90;\n        local_90 = (char)nextChar;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      hasNumberSign = true;\n      nextChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2a:\n      argPtrValue = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)argPtrValue < 0) {\n        argPtrValue = (int *******)-(int)argPtrValue;\n        goto switchD_00082c20_caseD_2d;\n      }\n      nextChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2b:\n      nextChar = (uint)*(byte *)args;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      nextChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2e:\n      nextChar = (uint)*(byte *)args;\n      formatPtr = (int *******)((int)args + 1);\n      if (nextChar == 0x2a) {\n        nextChar = (uint)*(byte *)((int)args + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        args = formatPtr;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = nextChar - 0x30;\n      if (digit < 10) {\n        hexDigit = 0;\n        do {\n          args = (int *******)((int)formatPtr + 1);\n          nextChar = (uint)*(byte *)formatPtr;\n          hexDigit = digit + hexDigit * 10;\n          digit = nextChar - 0x30;\n          formatPtr = args;\n        } while (digit < 10);\n        local_d4 = (int *******)(hexDigit | (int)hexDigit >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        args = formatPtr;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      nextChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      hasPlusSign = true;\n      if (hasWidth == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      arg = *local_c8;\n      highArg = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      hasPlusSign = true;\n      if (hasWidth != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)hasPlusSign << 4;\n      numArgs = (uint)hasWidth << 5;\n      if ((hasPlusSign == 0) && (numArgs = (uint)argPtrNonZero << 6, argPtrNonZero != 0)) {\n        arg = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        highArg = (int *)0x0;\n      }\n      else {\n        result = numArgs;\n        arg = *local_c8;\n        local_c8 = local_c8 + 1;\n        highArg = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      hasPlusSign = true;\n      if (hasWidth != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((hasPlusSign) || (argPtrNonZero == false)) {\n        result = 1;\n        arg = *local_c8;\n        local_c8 = local_c8 + 1;\n        highArg = (int *)0x0;\n      }\n      else {\n        highArg = (int *)0x0;\n        arg = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (hasWidth == false) goto LAB_00083196;\nLAB_00082fb6:\n      argPtrs = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = argPtrs + 2;\n      arg = *argPtrs;\n      highArg = argPtrs[1];\n      goto LAB_00082fca;\n    case 99:\n      arg = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(arg,0);\n      local_d4 = (int *******)0x1;\n      argPtrValueStack = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (hasWidth != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((hasPlusSign == false) && (argPtrNonZero != false)) {\n        arg = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        highArg = (int *)((int)arg >> 0x1f);\n      }\n      else {\n        arg = *local_c8;\n        local_c8 = local_c8 + 1;\n        highArg = (int *)((int)arg >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)highArg < 0) {\n        argPtrNonZero = arg != (int *)0x0;\n        arg = (int *)-(int)arg;\n        highArg = (int *)(-(int)highArg - (uint)argPtrNonZero);\n        local_a1 = '-';\n        signCharacter = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        flags = flags & 0xffffff7f;\n      }\n      hasZeroPadding = false;\n      nextChar = (uint)arg | (uint)highArg;\n      result = 1;\n      signCharacter = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      argPtrNonZero = true;\n      nextChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x6c:\n      nextChar = (uint)*(byte *)args;\n      if (nextChar == 0x6c) {\n        hasWidth = true;\n        nextChar = (uint)*(byte *)((int)args + 1);\n        args = (int *******)((int)args + 1);\n      }\n      else {\n        hasPlusSign = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (hasWidth == false) {\n        if (hasPlusSign == false) {\n          if (argPtrNonZero) {\n            arg = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)arg = (short)local_c4;\n          }\n          else {\n            arg = *local_c8;\n            local_c8 = local_c8 + 1;\n            *arg = local_c4;\n          }\n        }\n        else {\n          arg = *local_c8;\n          local_c8 = local_c8 + 1;\n          *arg = local_c4;\n        }\n      }\n      else {\n        arg = *local_c8;\n        local_c8 = local_c8 + 1;\n        *arg = local_c4;\n        arg[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (hasWidth == false) goto LAB_00082f2a;\nLAB_00082d42:\n      argPtrs = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = argPtrs + 2;\n      arg = *argPtrs;\n      highArg = argPtrs[1];\n      result = 0;\n      break;\n    case 0x70:\n      arg = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      hasZeroPadding = true;\n      highArg = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      hasWidth = true;\n      nextChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x73:\n      argPtrValueStack = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (argPtrValueStack != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)strlen(argPtrValueStack);\n          formatPtr = (int *******)0x0;\n          signCharacter = local_a1;\n        }\n        else {\n          result = memchr(argPtrValueStack,0,local_d4);\n          signCharacter = local_a1;\n          if (result == 0) {\n            formatPtr = (int *******)0x0;\n          }\n          else {\n            remainingFormat = (int *******)(result - (int)argPtrValueStack);\n            if ((int)local_d4 <= (int)(int *******)(result - (int)argPtrValueStack)) {\n              remainingFormat = local_d4;\n            }\n            formatPtr = (int *******)0x0;\n            local_d4 = remainingFormat;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      argPtrValueStack = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      formatPtr = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!hasWidth) goto LAB_00082f7c;\nLAB_00082e62:\n      argPtrs = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = argPtrs + 2;\n      arg = *argPtrs;\n      highArg = argPtrs[1];\n      result = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (hasWidth != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((hasPlusSign == false) && (argPtrNonZero != false)) {\n        highArg = (int *)0x0;\n        arg = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        arg = *local_c8;\n        local_c8 = local_c8 + 1;\n        highArg = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((hasNumberSign) && (((uint)arg | (uint)highArg) != 0)) {\n        hasZeroPadding = true;\n        local_a0 = 0x30;\n        result = 2;\n        local_9f = (char)nextChar;\n      }\n      else {\n        result = 2;\n      }\n    }\n    local_a1 = '\\0';\n    signCharacter = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      flags = flags & 0xffffff7f;\n    }\n    nextChar = (uint)arg | (uint)highArg;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(highArg,arg);\n    formatPtr = local_d4;\n    if ((nextChar == 0) && (local_d4 == (int *******)0x0)) {\n      argPtrValueStack = (int ********)local_68;\n      if ((result != 0) || (!hasNumberSign)) goto LAB_00082da0;\n      argPtrValueStack = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (highArg != (int *)0x0 || (int *)0x9 < arg) {\n        argPtrStack = (int ********)(&cStack_6a + 1);\n        do {\n          argPtrValueStack = argPtrStack;\n          highArgValue = (undefined4)((ulonglong)lVar27 >> 0x20);\n          digitCharacter = '\\n';\n          __aeabi_uldivmod((int)lVar27,highArgValue,10,0);\n          *(char *)argPtrValueStack = digitCharacter + '0';\n          lVar27 = __aeabi_uldivmod((int)lVar27,highArgValue,10,0);\n          argPtrStack = (int ********)((int)argPtrValueStack + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)argPtrValueStack);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)arg + '0';\n      argPtrValueStack = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    argPtrStack = (int ********)(&cStack_6a + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      argPtrValueStack = argPtrStack;\n      nextChar = (uint)arg & 0xf;\n      arg = (int *)((uint)arg >> 4 | (int)highArg << 0x1c);\n      highArg = (int *)((uint)highArg >> 4);\n      *(char *)argPtrValueStack = local_c0[nextChar];\n      argPtrStack = (int ********)((int)argPtrValueStack + -1);\n    } while (((uint)arg | (uint)highArg) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)argPtrValueStack);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    __sprint_r_part_0(buffer,format,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    argPtrValueStack = argPtrStack;\n    width = (int *)((uint)arg >> 3 | (int)highArg << 0x1d);\n    highArg = (int *)((uint)highArg >> 3);\n    result = ((uint)arg & 7) + 0x30;\n    *(char *)argPtrValueStack = (char)result;\n    argPtrStack = (int ********)((int)argPtrValueStack + -1);\n    arg = width;\n  } while (((uint)width | (uint)highArg) != 0);\n  if (hasNumberSign) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)argPtrValueStack);\n    }\n    else {\n      *(undefined *)((int)argPtrValueStack + -1) = 0x30;\n      argPtrValueStack = argPtrStack;\n      local_d4 = (int *******)((int)local_68 - (int)argPtrStack);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)argPtrValueStack);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)formatPtr) {\n    local_dc = formatPtr;\n  }\n  if (signCharacter != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (hasZeroPadding) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((flags == 0) &&\n     (remainingFormat = (int *******)((int)argPtrValue - (int)local_dc), 0 < (int)remainingFormat)) {\n    if ((int)remainingFormat < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        remainingArgPtrs = remainingFormat;\n        result = local_98 + 1;\n        local_94 = local_94 + 4;\n        *argPtr = (int *******)0x85808;\n        argPtr[1] = (int *******)0x10;\n        if (result < 8) {\n          numArgs = local_98 + 2;\n          argPtr = argPtr + 2;\n          local_98 = result;\n        }\n        else if (local_94 == (int *******)0x0) {\n          numArgs = 1;\n          argPtr = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = result;\n          result = __sprint_r_part_0(buffer,format,&local_9c);\n          if (result != 0) goto LAB_000833de;\n          numArgs = local_98 + 1;\n          argPtr = (int ********)local_68;\n        }\n        remainingFormat = remainingArgPtrs + -4;\n      } while (0x10 < (int)remainingFormat);\n      remainingFormat = remainingArgPtrs + -4;\n      local_98 = numArgs;\n    }\n    local_94 = (int *******)((int)local_94 + (int)remainingFormat);\n    *argPtr = (int *******)0x85808;\n    argPtr[1] = remainingFormat;\n    if (local_98 < 8) {\n      result = local_98 + 1;\n      argPtr = argPtr + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      local_98 = 0;\n      argPtr = (int ********)local_68;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      result = local_98 + 1;\n      argPtr = (int ********)local_68;\n    }\n  }\n  else {\n    result = local_98 + 1;\n  }\n  numArgs = result;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    numArgs = 1;\n    *argPtr = (int *******)&local_a1;\n    argPtr[1] = (int *******)0x1;\n    local_98 = result;\n    if (result < 8) {\n      numArgs = result + 1;\n      argPtr = argPtr + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      argPtr = (int ********)local_68;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      numArgs = local_98 + 1;\n      argPtr = (int ********)local_68;\n    }\n  }\n  result = numArgs;\n  numArgPtrs = local_98;\n  if (hasZeroPadding) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *argPtr = (int *******)&local_a0;\n    argPtr[1] = (int *******)0x2;\n    if (numArgs < 8) {\n      result = numArgs + 1;\n      numArgPtrs = numArgs;\n      argPtr = argPtr + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      numArgPtrs = 0;\n      argPtr = (int ********)local_68;\n    }\n    else {\n      local_98 = numArgs;\n      result = __sprint_r_part_0(buffer,format,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      result = local_98 + 1;\n      numArgPtrs = local_98;\n      argPtr = (int ********)local_68;\n    }\n  }\n  local_98 = numArgPtrs;\n  if ((flags == 0x80) &&\n     (remainingFormat = (int *******)((int)argPtrValue - (int)local_dc), 0 < (int)remainingFormat)) {\n    if (0x10 < (int)remainingFormat) {\n      do {\n        while( true ) {\n          remainingArgPtrs = remainingFormat;\n          local_98 = numArgPtrs + 1;\n          local_94 = local_94 + 4;\n          *argPtr = (int *******)&DAT_00085848;\n          argPtr[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          result = numArgPtrs + 2;\n          argPtr = argPtr + 2;\nLAB_0008348e:\n          numArgPtrs = local_98;\n          remainingFormat = remainingArgPtrs + -4;\n          if ((int)(remainingArgPtrs + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&local_9c);\n          if (result == 0) {\n            result = local_98 + 1;\n            argPtr = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        numArgPtrs = 0;\n        remainingFormat = remainingArgPtrs + -4;\n        argPtr = (int ********)local_68;\n      } while (0x10 < (int)(remainingArgPtrs + -4));\nLAB_000834b4:\n      remainingFormat = remainingArgPtrs + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)remainingFormat);\n    *argPtr = (int *******)&DAT_00085848;\n    argPtr[1] = remainingFormat;\n    local_98 = result;\n    if (result < 8) {\n      result = result + 1;\n      argPtr = argPtr + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      local_98 = 0;\n      argPtr = (int ********)local_68;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      result = local_98 + 1;\n      argPtr = (int ********)local_68;\n    }\n  }\n  formatPtr = (int *******)((int)formatPtr - (int)local_d4);\n  argPtrStack = (int ********)local_68;\n  if ((int)formatPtr < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *argPtr = (int *******)argPtrValueStack;\n    argPtr[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = result;\n    if (result < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&local_9c);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    numArgs = local_98;\n    if (0x10 < (int)formatPtr) {\n      do {\n        while( true ) {\n          remainingFormat = formatPtr;\n          local_98 = numArgs + 1;\n          local_94 = local_94 + 4;\n          *argPtr = (int *******)&DAT_00085848;\n          argPtr[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          result = numArgs + 2;\n          argPtr = argPtr + 2;\nLAB_00083282:\n          numArgs = local_98;\n          formatPtr = remainingFormat + -4;\n          if ((int)(remainingFormat + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&local_9c);\n          if (result == 0) {\n            result = local_98 + 1;\n            argPtr = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        argPtr = (int ********)local_68;\n        numArgs = 0;\n        formatPtr = remainingFormat + -4;\n      } while (0x10 < (int)(remainingFormat + -4));\nLAB_000832aa:\n      formatPtr = remainingFormat + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)formatPtr);\n    *argPtr = (int *******)&DAT_00085848;\n    argPtr[1] = formatPtr;\n    if (result < 8) {\n      result = result + 1;\n      argPtr = argPtr + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = result;\n      result = __sprint_r_part_0(buffer,format,&local_9c);\n      if (result != 0) goto LAB_000833de;\n      result = local_98 + 1;\n      argPtr = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    argPtr = (int ********)local_68;\n    local_68 = (undefined  [4])argPtrValueStack;\nLAB_0008345a:\n    argPtrStack = argPtr + 2;\n    local_94 = local_d4;\n  }\n  if (((flags & 4) != 0) &&\n     (formatPtr = (int *******)((int)argPtrValue - (int)local_dc), 0 < (int)formatPtr)) {\n    result = local_98;\n    if ((int)formatPtr < 0x11) {\n      numArgs = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = result + 1;\n          local_94 = local_94 + 4;\n          *argPtrStack = (int *******)0x85808;\n          argPtrStack[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          numArgs = result + 2;\n          argPtrStack = argPtrStack + 2;\nLAB_00083316:\n          formatPtr = formatPtr + -4;\n          result = local_98;\n          if ((int)formatPtr < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&local_9c);\n          if (result == 0) {\n            numArgs = local_98 + 1;\n            argPtrStack = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        formatPtr = formatPtr + -4;\n        numArgs = 1;\n        result = 0;\n        argPtrStack = (int ********)local_68;\n      } while (0x10 < (int)formatPtr);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)formatPtr);\n    *argPtrStack = (int *******)0x85808;\n    argPtrStack[1] = formatPtr;\n    local_98 = numArgs;\n    if (7 < numArgs) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)argPtrValue) {\n          local_dc = argPtrValue;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      result = __sprint_r_part_0(buffer,format,&local_9c);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)argPtrValue) {\n    local_dc = argPtrValue;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (result = __sprint_r_part_0(buffer,format,&local_9c), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  argPtr = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = nextChar - 0x30;\n  argPtrValue = (int *******)0x0;\n  formatPtr = args;\n  do {\n    args = (int *******)((int)formatPtr + 1);\n    nextChar = (uint)*(byte *)formatPtr;\n    argPtrValue = (int *******)(digit + (int)argPtrValue * 10);\n    digit = nextChar - 0x30;\n    formatPtr = args;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  nextChar = (uint)*(byte *)args;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "format_string_00082b38",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "args",
                "param_4": "size",
                "bVar1": "hasWidth",
                "bVar2": "hasPlusSign",
                "bVar3": "hasNumberSign",
                "cVar4": "signCharacter",
                "bVar5": "hasZeroPadding",
                "ppppppppiVar6": "argPtr",
                "piVar7": "width",
                "iVar8": "result",
                "cVar9": "digitCharacter",
                "pppppppiVar10": "formatPtr",
                "uVar11": "digit",
                "ppiVar12": "argPtrs",
                "uVar13": "flags",
                "uVar14": "nextChar",
                "iVar15": "numArgs",
                "ppppppppiVar16": "argPtrStack",
                "iVar17": "numArgPtrs",
                "pppppppiVar18": "remainingFormat",
                "piVar19": "arg",
                "pppppppiVar20": "argPtrValue",
                "uVar21": "hexDigit",
                "piVar22": "highArg",
                "pppppppiVar23": "remainingArgPtrs",
                "uVar24": "highArgValue",
                "ppppppppiVar25": "argPtrValueStack",
                "bVar26": "argPtrNonZero"
            },
            "calling": [
                "__sbprintf"
            ],
            "called": [
                "__sprint_r.part.0",
                "strlen",
                "__sbprintf",
                "memchr",
                "__aeabi_uldivmod",
                "__sinit",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "print_and_flush_output_0008378c",
            "code": "\nint print_and_flush_output_0008378c(undefined4 output_file,int binary_data)\n\n{\n  int return_value;\n  int flush_result_check;\n  undefined *buffer [2];\n  undefined4 buffer_size;\n  ushort modified_data;\n  undefined2 param_value;\n  undefined *buffer_pointer;\n  undefined4 flush_buffer_size;\n  undefined4 flush_result;\n  undefined4 param_2c;\n  undefined4 param_24;\n  undefined4 param_100;\n  undefined stack_buffer [1024];\n  \n  param_100 = *(undefined4 *)(binary_data + 100);\n  param_2c = *(undefined4 *)(binary_data + 0x1c);\n  param_value = *(undefined2 *)(binary_data + 0xe);\n  param_24 = *(undefined4 *)(binary_data + 0x24);\n  buffer[0] = stack_buffer;\n  modified_data = *(ushort *)(binary_data + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  flush_buffer_size = 0x400;\n  flush_result = 0;\n  buffer_pointer = buffer[0];\n  return_value = _vfiprintf_r(output_file,buffer);\n  if ((-1 < return_value) && (flush_result_check = _fflush_r(output_file,buffer), flush_result_check != 0)) {\n    return_value = -1;\n  }\n  if ((int)((uint)modified_data << 0x19) < 0) {\n    *(ushort *)(binary_data + 0xc) = *(ushort *)(binary_data + 0xc) | 0x40;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "print_and_flush_output_0008378c",
                "param_1": "output_file",
                "param_2": "binary_data",
                "local_488": "buffer",
                "local_480": "buffer_size",
                "local_47c": "modified_data",
                "local_47a": "param_value",
                "local_478": "buffer_pointer",
                "local_474": "flush_buffer_size",
                "local_470": "flush_result",
                "local_46c": "param_2c",
                "local_464": "param_24",
                "local_424": "param_100",
                "auStack_420": "stack_buffer",
                "iVar1": "return_value",
                "iVar2": "flush_result_check"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_data_00083808",
            "code": "\nundefined4 processData_00083808(undefined4 *output_ptr,int *input_ptr)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint value1;\n  ushort value2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    __sinit();\n  }\n  value2 = *(ushort *)(input_ptr + 3);\n  value1 = (uint)value2;\n  if ((int)(value1 << 0x1c) < 0) {\n    temp_var2 = input_ptr[4];\n  }\n  else {\n    if (-1 < (int)(value1 << 0x1b)) {\n      *output_ptr = 9;\n      *(ushort *)(input_ptr + 3) = value2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(value1 << 0x1d) < 0) {\n      if ((int *)input_ptr[0xc] != (int *)0x0) {\n        if ((int *)input_ptr[0xc] != input_ptr + 0x10) {\n          _free_r(output_ptr);\n          value2 = *(ushort *)(input_ptr + 3);\n        }\n        input_ptr[0xc] = 0;\n      }\n      temp_var2 = input_ptr[4];\n      value2 = value2 & 0xffdb;\n      *input_ptr = temp_var2;\n      input_ptr[1] = 0;\n    }\n    else {\n      temp_var2 = input_ptr[4];\n    }\n    *(ushort *)(input_ptr + 3) = value2 | 8;\n    value1 = (uint)(value2 | 8);\n  }\n  if ((temp_var2 == 0) && ((value1 & 0x280) != 0x200)) {\n    __smakebuf_r(output_ptr,input_ptr);\n    value1 = (uint)*(ushort *)(input_ptr + 3);\n    temp_var2 = input_ptr[4];\n  }\n  if ((value1 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(value1 << 0x1e)) {\n      temp_var1 = input_ptr[5];\n    }\n    input_ptr[2] = temp_var1;\n  }\n  else {\n    input_ptr[6] = -input_ptr[5];\n    input_ptr[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input_ptr + 3) << 0x18) < 0)) {\n    *(ushort *)(input_ptr + 3) = *(ushort *)(input_ptr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [
                "__sfvwrite_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identityFunction_00083974(undefined4 inputValue)\n\n{\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "inputValue"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *inputBuffer,int *infoBuffer)\n\n{\n  int *ptr1;\n  int var1;\n  ushort flag;\n  uint temp;\n  int var2;\n  code *funcPtr;\n  undefined4 returnValue;\n  int var3;\n  \n  if ((inputBuffer != (int *)0x0) && (inputBuffer[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(infoBuffer + 3) == 0) {\n    return 0;\n  }\n  flag = *(ushort *)(infoBuffer + 3);\n  if ((int)((uint)flag << 0x1c) < 0) {\n    var3 = infoBuffer[4];\n    if (var3 == 0) {\n      return 0;\n    }\n    var1 = *infoBuffer;\n    if ((flag & 3) == 0) {\n      var2 = infoBuffer[5];\n    }\n    else {\n      var2 = 0;\n    }\n    *infoBuffer = var3;\n    var1 = var1 - var3;\n    infoBuffer[2] = var2;\n    do {\n      if (var1 < 1) {\n        return 0;\n      }\n      var2 = (*(code *)infoBuffer[9])(inputBuffer,infoBuffer[7],var3,var1,returnValue);\n      var1 = var1 - var2;\n      var3 = var3 + var2;\n    } while (0 < var2);\nLAB_00083a54:\n    *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoBuffer + 3) = flag | 0x800;\n  if ((infoBuffer[1] < 1) && (infoBuffer[0xf] < 1)) {\n    return 0;\n  }\n  funcPtr = (code *)infoBuffer[10];\n  if (funcPtr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flag | 0x800);\n  var3 = *inputBuffer;\n  *inputBuffer = 0;\n  if ((flag & 0x1000) == 0) {\n    var1 = (*funcPtr)(inputBuffer,infoBuffer[7],temp & 0x1000,1);\n    if ((var1 == -1) && (var2 = *inputBuffer, var2 != 0)) {\n      if ((var2 == 0x1d) || (var2 == 0x16)) {\n        *inputBuffer = var3;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp = (uint)*(ushort *)(infoBuffer + 3);\n    funcPtr = (code *)infoBuffer[10];\n  }\n  else {\n    var1 = infoBuffer[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (var1 = var1 - infoBuffer[1], infoBuffer[0xc] != 0)) {\n    var1 = var1 - infoBuffer[0xf];\n  }\n  var1 = (*funcPtr)(inputBuffer,infoBuffer[7],var1,0);\n  if (var1 == -1) {\n    var2 = *inputBuffer;\n    if (var2 != 0) {\n      if ((var2 != 0x1d) && (var2 != 0x16)) {\n        *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n      *infoBuffer = infoBuffer[4];\n      infoBuffer[1] = 0;\n      goto LAB_00083a00;\n    }\n    flag = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n    infoBuffer[1] = 0;\n    *(ushort *)(infoBuffer + 3) = flag;\n    *infoBuffer = infoBuffer[4];\n  }\n  else {\n    flag = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n    *infoBuffer = infoBuffer[4];\n    *(ushort *)(infoBuffer + 3) = flag;\n    infoBuffer[1] = 0;\n  }\n  if ((int)((uint)flag << 0x13) < 0) {\n    infoBuffer[0x14] = var1;\n  }\nLAB_00083a00:\n  ptr1 = (int *)infoBuffer[0xc];\n  *inputBuffer = var3;\n  if (ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr1 != infoBuffer + 0x10) {\n    _free_r(inputBuffer);\n  }\n  infoBuffer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "inputBuffer",
                "param_2": "infoBuffer",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "uVar3": "flag",
                "uVar4": "temp",
                "iVar5": "var2",
                "pcVar6": "funcPtr",
                "unaff_r4": "returnValue",
                "iVar7": "var3"
            },
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "fclose",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructuresPtr)\n\n{\n  undefined4 *struct1Ptr;\n  undefined4 *struct2Ptr;\n  \n  if (*(int *)(dataStructuresPtr + 0x38) == 0) {\n    struct1Ptr = *(undefined4 **)(dataStructuresPtr + 4);\n    *(undefined **)(dataStructuresPtr + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructuresPtr + 0x2e4) = 3;\n    *(int *)(dataStructuresPtr + 0x2e8) = dataStructuresPtr + 0x2ec;\n    *(undefined4 *)(dataStructuresPtr + 0x2e0) = 0;\n    *(undefined2 *)(struct1Ptr + 3) = 4;\n    *struct1Ptr = 0;\n    struct1Ptr[1] = 0;\n    struct1Ptr[2] = 0;\n    struct1Ptr[0x19] = 0;\n    *(undefined2 *)((int)struct1Ptr + 0xe) = 0;\n    struct1Ptr[4] = 0;\n    struct1Ptr[5] = 0;\n    struct1Ptr[6] = 0;\n    memset(struct1Ptr + 0x17,0,8);\n    struct2Ptr = *(undefined4 **)(dataStructuresPtr + 8);\n    struct1Ptr[7] = struct1Ptr;\n    struct1Ptr[8] = &LAB_00084440_1;\n    struct1Ptr[9] = 0x84465;\n    struct1Ptr[10] = 0x8449d;\n    struct1Ptr[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)struct2Ptr + 0xe) = 1;\n    *(undefined2 *)(struct2Ptr + 3) = 9;\n    *struct2Ptr = 0;\n    struct2Ptr[1] = 0;\n    struct2Ptr[2] = 0;\n    struct2Ptr[0x19] = 0;\n    struct2Ptr[4] = 0;\n    struct2Ptr[5] = 0;\n    struct2Ptr[6] = 0;\n    memset(struct2Ptr + 0x17,0,8);\n    struct1Ptr = *(undefined4 **)(dataStructuresPtr + 0xc);\n    struct2Ptr[7] = struct2Ptr;\n    struct2Ptr[8] = &LAB_00084440_1;\n    struct2Ptr[9] = 0x84465;\n    struct2Ptr[10] = 0x8449d;\n    struct2Ptr[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(struct1Ptr + 3) = 0x12;\n    *(undefined2 *)((int)struct1Ptr + 0xe) = 2;\n    *struct1Ptr = 0;\n    struct1Ptr[1] = 0;\n    struct1Ptr[2] = 0;\n    struct1Ptr[0x19] = 0;\n    struct1Ptr[4] = 0;\n    struct1Ptr[5] = 0;\n    struct1Ptr[6] = 0;\n    memset(struct1Ptr + 0x17,0,8);\n    struct1Ptr[7] = struct1Ptr;\n    struct1Ptr[8] = &LAB_00084440_1;\n    struct1Ptr[9] = 0x84465;\n    struct1Ptr[10] = 0x8449d;\n    struct1Ptr[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructuresPtr + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructuresPtr",
                "puVar1": "struct1Ptr",
                "puVar2": "struct2Ptr"
            },
            "calling": [
                "fclose",
                "_fflush_r",
                "__swbuf_r",
                "_vfiprintf_r",
                "__swsetup_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "convert_char_to_byte_00083c40",
            "code": "\nuint convertCharToByte_00083c40(undefined4 param_1,uint inputChar,byte **byteArray)\n\n{\n  int maxBytes;\n  uint result;\n  uint convertedByte;\n  byte *bytePtr;\n  uint index;\n  byte charByte;\n  byte additionalBytes [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(byteArray + 3) << 0x12)) {\n    *(ushort *)(byteArray + 3) = *(ushort *)(byteArray + 3) | 0x2000;\n    byteArray[0x19] = (byte *)((uint)byteArray[0x19] | 0x2000);\n  }\n  maxBytes = __locale_mb_cur_max();\n  if ((maxBytes == 1) && (inputChar - 1 < 0xff)) {\n    convertedByte = inputChar & 0xff;\n    charByte = (byte)convertedByte;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(param_1,&charByte,inputChar,byteArray + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(byteArray + 3) = *(ushort *)(byteArray + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return inputChar;\n    }\n    convertedByte = (uint)charByte;\n  }\n  index = 0;\n  do {\n    bytePtr = byteArray[2] + -1;\n    byteArray[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)byteArray[6] <= (int)bytePtr) {\n        **byteArray = (byte)convertedByte;\n        bytePtr = *byteArray;\n        convertedByte = (uint)*bytePtr;\n        if (convertedByte != 10) goto LAB_00083c90;\n      }\n      maxBytes = __swbuf_r(param_1,convertedByte,byteArray);\n      if (maxBytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **byteArray = (byte)convertedByte;\n      bytePtr = *byteArray;\nLAB_00083c90:\n      *byteArray = bytePtr + 1;\n    }\n    if (result <= index + 1) {\n      return inputChar;\n    }\n    convertedByte = (uint)additionalBytes[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "convert_char_to_byte_00083c40",
                "param_2": "inputChar",
                "param_3": "byteArray",
                "iVar1": "maxBytes",
                "uVar2": "result",
                "uVar3": "convertedByte",
                "pbVar4": "bytePtr",
                "uVar5": "index",
                "local_1c": "charByte",
                "abStack_1b": "additionalBytes"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "handle_memory_allocation_00083d00",
            "code": "\nundefined4 handleMemoryAllocation_00083d00(undefined4 lock,int size)\n\n{\n  int result;\n  uint info;\n  int offset;\n  \n  __malloc_lock();\n  info = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  offset = ((info - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < offset) {\n    result = _sbrk_r(lock,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + info) {\n      result = _sbrk_r(lock,-offset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = info - offset | 1;\n        __malloc_unlock(lock);\n        return 1;\n      }\n      offset = _sbrk_r(lock,0);\n      if (0xf < (int)(offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  __malloc_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "handle_memory_allocation_00083d00",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "info",
                "iVar3": "offset"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocation_00083d9c",
            "code": "\nvoid processRelocation_00083d9c(undefined4 lock,int relocationPointer)\n\n{\n  int currentValue;\n  bool isLastRelocation;\n  uint relocationSize;\n  dword previousRelocation;\n  int nextValue;\n  uint totalSize;\n  dword newRelocation;\n  uint adjustedSize;\n  dword updatedRelocation;\n  \n  if (relocationPointer == 0) {\n    return;\n  }\n  __malloc_lock();\n  relocationSize = *(uint *)(relocationPointer + -4);\n  newRelocation = relocationPointer - 8;\n  totalSize = relocationSize & 0xfffffffe;\n  previousRelocation = newRelocation + totalSize;\n  adjustedSize = *(uint *)(previousRelocation + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == previousRelocation) {\n    adjustedSize = adjustedSize + totalSize;\n    if (-1 < (int)(relocationSize << 0x1f)) {\n      newRelocation = newRelocation - *(int *)(relocationPointer + -8);\n      nextValue = *(int *)(newRelocation + 0xc);\n      currentValue = *(int *)(newRelocation + 8);\n      adjustedSize = adjustedSize + *(int *)(relocationPointer + -8);\n      *(int *)(currentValue + 0xc) = nextValue;\n      *(int *)(nextValue + 8) = currentValue;\n    }\n    previousRelocation = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(newRelocation + 4) = adjustedSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = newRelocation;\n    if (previousRelocation <= adjustedSize) {\n      _malloc_trim_r(lock,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(previousRelocation + 4) = adjustedSize;\n    if ((relocationSize & 1) == 0) {\n      newRelocation = newRelocation - *(int *)(relocationPointer + -8);\n      currentValue = *(int *)(newRelocation + 8);\n      totalSize = totalSize + *(int *)(relocationPointer + -8);\n      if (currentValue == 0x2007046c) {\n        isLastRelocation = true;\n      }\n      else {\n        nextValue = *(int *)(newRelocation + 0xc);\n        *(int *)(currentValue + 0xc) = nextValue;\n        *(int *)(nextValue + 8) = currentValue;\n        isLastRelocation = false;\n      }\n    }\n    else {\n      isLastRelocation = false;\n    }\n    if (-1 < *(int *)(previousRelocation + adjustedSize + 4) << 0x1f) {\n      totalSize = totalSize + adjustedSize;\n      currentValue = *(int *)(previousRelocation + 8);\n      if ((!isLastRelocation) && (currentValue == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = newRelocation;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = newRelocation;\n        *(undefined4 *)(newRelocation + 0xc) = 0x2007046c;\n        *(undefined4 *)(newRelocation + 8) = 0x2007046c;\n        *(uint *)(newRelocation + 4) = totalSize | 1;\n        *(uint *)(newRelocation + totalSize) = totalSize;\n        goto LAB_00083e30;\n      }\n      nextValue = *(int *)(previousRelocation + 0xc);\n      *(int *)(currentValue + 0xc) = nextValue;\n      *(int *)(nextValue + 8) = currentValue;\n    }\n    *(uint *)(newRelocation + 4) = totalSize | 1;\n    *(uint *)(newRelocation + totalSize) = totalSize;\n    if (!isLastRelocation) {\n      if (totalSize < 0x200) {\n        relocationSize = totalSize & 0xfffffff8;\n        currentValue = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + relocationSize);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(totalSize >> 3) >> 2 & 0xffU);\n        *(int *)(newRelocation + 8) = currentValue;\n        *(uint *)(newRelocation + 0xc) = relocationSize + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + relocationSize) = newRelocation;\n        *(dword *)(currentValue + 0xc) = newRelocation;\n        __malloc_unlock(lock);\n        return;\n      }\n      relocationSize = totalSize >> 9;\n      if (relocationSize < 5) {\n        currentValue = (totalSize >> 6) + 0x38;\n        nextValue = currentValue * 2;\n      }\n      else if (relocationSize < 0x15) {\n        currentValue = relocationSize + 0x5b;\n        nextValue = currentValue * 2;\n      }\n      else if (relocationSize < 0x55) {\n        currentValue = (totalSize >> 0xc) + 0x6e;\n        nextValue = currentValue * 2;\n      }\n      else if (relocationSize < 0x155) {\n        currentValue = (totalSize >> 0xf) + 0x77;\n        nextValue = currentValue * 2;\n      }\n      else if (relocationSize < 0x555) {\n        currentValue = (totalSize >> 0x12) + 0x7c;\n        nextValue = currentValue * 2;\n      }\n      else {\n        nextValue = 0xfc;\n        currentValue = 0x7e;\n      }\n      updatedRelocation = nextValue * 4 + 0x20070464;\n      previousRelocation = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextValue];\n      if (previousRelocation == updatedRelocation) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (currentValue >> 2 & 0xffU);\n        updatedRelocation = previousRelocation;\n      }\n      else {\n        do {\n          if ((*(uint *)(previousRelocation + 4) & 0xfffffffc) <= totalSize) break;\n          previousRelocation = *(dword *)(previousRelocation + 8);\n        } while (updatedRelocation != previousRelocation);\n        updatedRelocation = *(dword *)(previousRelocation + 0xc);\n      }\n      *(dword *)(newRelocation + 0xc) = updatedRelocation;\n      *(dword *)(newRelocation + 8) = previousRelocation;\n      *(dword *)(updatedRelocation + 8) = newRelocation;\n      *(dword *)(previousRelocation + 0xc) = newRelocation;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(lock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "process_relocation_00083d9c",
                "param_1": "lock",
                "param_2": "relocationPointer",
                "iVar1": "currentValue",
                "bVar2": "isLastRelocation",
                "uVar3": "relocationSize",
                "dVar4": "previousRelocation",
                "iVar5": "nextValue",
                "uVar6": "totalSize",
                "dVar7": "newRelocation",
                "uVar8": "adjustedSize",
                "dVar9": "updatedRelocation"
            },
            "calling": [
                "free",
                "__sfvwrite_r",
                "_realloc_r",
                "fclose",
                "_fflush_r",
                "__swsetup_r",
                "_malloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "decompress_data_00083f34",
            "code": "\nundefined4 decompressData_00083f34(undefined4 *error,uint *inputBuffer,uint **outputBuffer)\n\n{\n  int result;\n  uint flags;\n  uint value;\n  ushort temp;\n  uint temp2;\n  uint *pointer1;\n  uint *pointer2;\n  uint length;\n  uint newSize;\n  uint count;\n  uint chunkSize;\n  uint localFlag;\n  \n  if (outputBuffer[2] != (uint *)0x0) {\n    temp = *(ushort *)(inputBuffer + 3);\n    temp2 = (uint)temp;\n    if (((int)(temp2 << 0x1c) < 0) && (inputBuffer[4] != 0)) {\n      pointer2 = *outputBuffer;\n    }\n    else {\n      result = __swsetup_r(error,inputBuffer);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      temp = *(ushort *)(inputBuffer + 3);\n      temp2 = (uint)temp;\n      pointer2 = *outputBuffer;\n    }\n    if ((temp & 2) == 0) {\n      flags = temp2 & 2;\n      count = flags;\n      length = flags;\n      localFlag = flags;\n      if ((temp2 & 1) == 0) {\n        flags = 0;\n        count = 0;\n        while( true ) {\n          while (flags == 0) {\n            count = *pointer2;\n            pointer1 = pointer2 + 1;\n            pointer2 = pointer2 + 2;\n            flags = *pointer1;\n          }\n          length = inputBuffer[2];\n          if ((int)(temp2 << 0x16) < 0) {\n            if (flags < length) {\n              temp2 = *inputBuffer;\n              length = flags;\n            }\n            else if ((temp2 & 0x480) == 0) {\n              temp2 = *inputBuffer;\n            }\n            else {\n              result = *inputBuffer - inputBuffer[4];\n              length = result + 1 + flags;\n              newSize = (int)(inputBuffer[5] * 3) / 2;\n              if (length <= newSize) {\n                length = newSize;\n              }\n              if ((int)(temp2 << 0x15) < 0) {\n                newSize = _malloc_r(error,length);\n                if (newSize == 0) {\n                  *error = 0xc;\n                  temp = *(ushort *)(inputBuffer + 3);\n                  goto LAB_00084030;\n                }\n                memcpy(newSize,inputBuffer[4],result);\n                *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                newSize = _realloc_r(error);\n                if (newSize == 0) {\n                  _free_r(error,inputBuffer[4]);\n                  temp = *(ushort *)(inputBuffer + 3) & 0xff7f;\n                  *error = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp2 = newSize + result;\n              inputBuffer[4] = newSize;\n              inputBuffer[5] = length;\n              *inputBuffer = temp2;\n              inputBuffer[2] = length - result;\n              length = flags;\n            }\n            memmove(temp2,count,length);\n            inputBuffer[2] = inputBuffer[2] - length;\n            *inputBuffer = *inputBuffer + length;\n            length = flags;\n          }\n          else if ((inputBuffer[4] < *inputBuffer) || (temp2 = inputBuffer[5], flags < temp2)) {\n            if (flags < length) {\n              length = flags;\n            }\n            memmove(*inputBuffer,count,length);\n            temp2 = inputBuffer[2];\n            inputBuffer[2] = temp2 - length;\n            *inputBuffer = *inputBuffer + length;\n            if ((temp2 - length == 0) && (result = _fflush_r(error,inputBuffer), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            length = 0x7fffffff;\n            if (flags < 0x7fffffff) {\n              length = flags;\n            }\n            length = (*(code *)inputBuffer[9])(error,inputBuffer[7],count,(length / temp2) * temp2);\n            if ((int)length < 1) goto LAB_0008402e;\n          }\n          pointer1 = outputBuffer[2];\n          count = count + length;\n          flags = flags - length;\n          outputBuffer[2] = (uint *)((int)pointer1 - length);\n          if ((uint *)((int)pointer1 - length) == (uint *)0x0) break;\n          temp2 = (uint)*(ushort *)(inputBuffer + 3);\n        }\n      }\n      else {\n        do {\n          while (flags == 0) {\n            length = *pointer2;\n            flags = pointer2[1];\n            localFlag = 0;\n            pointer2 = pointer2 + 2;\n          }\n          if (localFlag == 0) {\n            result = memchr(length,10,flags);\n            if (result == 0) {\n              count = flags + 1;\n              localFlag = 1;\n            }\n            else {\n              count = (result + 1) - length;\n              localFlag = 1;\n            }\n          }\n          newSize = *inputBuffer;\n          temp2 = count;\n          if (flags <= count) {\n            temp2 = flags;\n          }\n          value = inputBuffer[5];\n          if ((inputBuffer[4] < newSize) && (chunkSize = inputBuffer[2] + value, (int)chunkSize < (int)temp2)) {\n            memmove(newSize,length,chunkSize);\n            *inputBuffer = *inputBuffer + chunkSize;\n            result = _fflush_r(error,inputBuffer);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp2 < (int)value) {\n            memmove(newSize,length,temp2);\n            inputBuffer[2] = inputBuffer[2] - temp2;\n            *inputBuffer = temp2 + *inputBuffer;\n            chunkSize = temp2;\n          }\n          else {\n            chunkSize = (*(code *)inputBuffer[9])(error,inputBuffer[7],length,value);\n            if ((int)chunkSize < 1) goto LAB_0008402e;\n          }\n          count = count - chunkSize;\n          if (count == 0) {\n            result = _fflush_r(error,inputBuffer);\n            if (result != 0) goto LAB_0008402e;\n            localFlag = 0;\n          }\n          pointer1 = outputBuffer[2];\n          length = length + chunkSize;\n          flags = flags - chunkSize;\n          outputBuffer[2] = (uint *)((int)pointer1 - chunkSize);\n        } while ((uint *)((int)pointer1 - chunkSize) != (uint *)0x0);\n      }\n    }\n    else {\n      flags = 0;\n      temp2 = 0;\n      do {\n        while( true ) {\n          count = temp2;\n          if (0x7ffffbff < temp2) {\n            count = 0x7ffffc00;\n          }\n          if (temp2 != 0) break;\n          flags = *pointer2;\n          temp2 = pointer2[1];\n          pointer2 = pointer2 + 2;\n        }\n        result = (*(code *)inputBuffer[9])(error,inputBuffer[7],flags,count);\n        if (result < 1) {\nLAB_0008402e:\n          temp = *(ushort *)(inputBuffer + 3);\nLAB_00084030:\n          *(ushort *)(inputBuffer + 3) = temp | 0x40;\n          return 0xffffffff;\n        }\n        pointer1 = outputBuffer[2];\n        flags = flags + result;\n        temp2 = temp2 - result;\n        outputBuffer[2] = (uint *)((int)pointer1 - result);\n      } while ((uint *)((int)pointer1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "decompress_data_00083f34",
                "param_1": "error",
                "param_2": "inputBuffer",
                "param_3": "outputBuffer",
                "iVar1": "result",
                "uVar2": "flags",
                "uVar3": "value",
                "uVar4": "temp",
                "uVar5": "temp2",
                "puVar6": "pointer1",
                "puVar7": "pointer2",
                "uVar8": "length",
                "uVar9": "newSize",
                "uVar10": "count",
                "uVar11": "chunkSize",
                "local_2c": "localFlag"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memmove",
                "_realloc_r",
                "memchr",
                "_free_r",
                "memcpy",
                "_fflush_r",
                "__swsetup_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_default_value_00084290",
            "code": "\nundefined4 get_default_value_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_default_value_00084290"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_elf_relocation_info_00084298",
            "code": "\ndword getElfRelocationInfo_00084298(void)\n\n{\n  return relInfoArray[274].r_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_elf_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relInfoArray"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "parse_file_info_000842a4",
            "code": "\nvoid parseFileInfo_000842a4(int fileDescriptor,int *fileInfo)\n\n{\n  ushort fileFlags;\n  int fileStatus;\n  int allocatedMemory;\n  uint fileFlagsAsUint;\n  bool isRegularFile;\n  undefined statBuffer [4];\n  uint localFlags;\n  \n  fileFlags = *(ushort *)(fileInfo + 3);\n  fileFlagsAsUint = (uint)fileFlags;\n  if ((int)(fileFlagsAsUint << 0x1e) < 0) {\n    *fileInfo = (int)fileInfo + 0x43;\n    fileInfo[4] = (int)fileInfo + 0x43;\n    fileInfo[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileInfo + 0xe)) {\n    fileStatus = _fstat_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe),statBuffer);\n    if (-1 < fileStatus) {\n      isRegularFile = (localFlags & 0xf000) == 0x2000;\n      if (((localFlags & 0xf000) == 0x8000) && (fileInfo[10] == 0x8449d)) {\n        fileStatus = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x400;\n        fileInfo[0x13] = 0x400;\n      }\n      else {\n        fileStatus = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    fileFlags = *(ushort *)(fileInfo + 3);\n    fileFlagsAsUint = (uint)fileFlags;\n  }\n  *(ushort *)(fileInfo + 3) = fileFlags | 0x800;\n  if ((fileFlagsAsUint & 0x80) == 0) {\n    fileStatus = 0x400;\n  }\n  else {\n    fileStatus = 0x40;\n  }\n  isRegularFile = false;\nLAB_00084300:\n  allocatedMemory = _malloc_r(fileDescriptor,fileStatus);\n  fileFlags = *(ushort *)(fileInfo + 3);\n  if (allocatedMemory == 0) {\n    if (-1 < (int)((uint)fileFlags << 0x16)) {\n      *(ushort *)(fileInfo + 3) = fileFlags | 2;\n      *fileInfo = (int)fileInfo + 0x43;\n      fileInfo[4] = (int)fileInfo + 0x43;\n      fileInfo[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(fileDescriptor + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(fileInfo + 3) = fileFlags | 0x80;\n    *fileInfo = allocatedMemory;\n    fileInfo[4] = allocatedMemory;\n    fileInfo[5] = fileStatus;\n    if ((isRegularFile) && (fileStatus = _isatty_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe)), fileStatus != 0)) {\n      *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "parse_file_info_000842a4",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "uVar1": "fileFlags",
                "iVar2": "fileStatus",
                "iVar3": "allocatedMemory",
                "uVar4": "fileFlagsAsUint",
                "bVar5": "isRegularFile",
                "auStack_54": "statBuffer",
                "local_50": "localFlags"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurance_00084384",
            "code": "\nuint * find_first_occurance_00084384(uint *array,char desired_value,uint array_length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_element;\n  bool is_last_element;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < array_length) {\n      current_element = array;\n      do {\n        xor_result = *current_element ^ CONCAT22(CONCAT11(desired_value,desired_value),CONCAT11(desired_value,desired_value));\n        array = current_element;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        array = current_element + 1;\n        current_element = current_element + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != desired_value) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_element = index == array_length - 1;\n        index = index + 1;\n        if (is_last_element) goto LAB_000843dc;\n      } while (*(char *)array != desired_value);\n    }\n  }\n  else if (array_length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != desired_value) {\n    current_element = (uint *)((int)array + 1);\n    array_length = array_length - 1;\n    do {\n      array = current_element;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (array_length == 0) goto LAB_000843dc;\n      current_element = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)array != desired_value);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurance_00084384",
                "param_1": "array",
                "param_2": "desired_value",
                "param_3": "array_length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_element",
                "bVar4": "is_last_element"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "write_data_00084464",
            "code": "\nvoid writeData_00084464(int *fileDescriptor,int dataStruct,undefined4 buffer,undefined4 size)\n\n{\n  int writeResult;\n  ushort flags;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  flags = *(ushort *)(dataStruct + 0xc);\n  if ((int)((uint)flags << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(dataStruct + 0xe),0,2);\n    flags = *(ushort *)(dataStruct + 0xc);\n  }\n  *(ushort *)(dataStruct + 0xc) = flags & 0xefff;\n  DAT_200711bc = 0;\n  writeResult = _write((int)*(short *)(dataStruct + 0xe),buffer,size,size,unused1,unused2,unused3,\n                 unused4);\n  if ((writeResult == -1) && (DAT_200711bc != 0)) {\n    *fileDescriptor = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "write_data_00084464",
                "param_1": "fileDescriptor",
                "param_2": "dataStruct",
                "param_3": "buffer",
                "param_4": "size",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4",
                "uVar2": "flags",
                "iVar1": "writeResult"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_file_offset_0008449c",
            "code": "\nvoid updateFileOffset_0008449c(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  int offset;\n  ushort newFlags;\n  \n  offset = _lseek_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  if (offset == -1) {\n    newFlags = *(ushort *)(bufferAddress + 0xc) & 0xefff;\n  }\n  else {\n    newFlags = *(ushort *)(bufferAddress + 0xc) | 0x1000;\n  }\n  if (offset != -1) {\n    *(int *)(bufferAddress + 0x50) = offset;\n  }\n  *(ushort *)(bufferAddress + 0xc) = newFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_file_offset_0008449c",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "iVar1": "offset",
                "uVar2": "newFlags"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int dataAddr,uint input,undefined4 *data,undefined4 size)\n\n{\n  ushort ushortValue;\n  uint uintValue;\n  undefined *ptrValue;\n  int intValue;\n  \n  if ((dataAddr != 0) && (*(int *)(dataAddr + 0x38) == 0)) {\n    __sinit();\n  }\n  ushortValue = *(ushort *)(data + 3);\n  uintValue = (uint)ushortValue;\n  data[2] = data[6];\n  if ((-1 < (int)(uintValue << 0x1c)) || (intValue = data[4], intValue == 0)) {\n    intValue = __swsetup_r(dataAddr,data,ushortValue,uintValue,size);\n    if (intValue != 0) {\n      return 0xffffffff;\n    }\n    ushortValue = *(ushort *)(data + 3);\n    intValue = data[4];\n    uintValue = (uint)ushortValue;\n  }\n  input = input & 0xff;\n  if ((int)(uintValue << 0x12) < 0) {\n    ptrValue = (undefined *)*data;\n    intValue = (int)ptrValue - intValue;\n    if (intValue < (int)data[5]) {\nLAB_000844f6:\n      intValue = intValue + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data[0x19] = data[0x19] & 0xffffdfff;\n    ptrValue = (undefined *)*data;\n    *(ushort *)(data + 3) = ushortValue | 0x2000;\n    intValue = (int)ptrValue - intValue;\n    if (intValue < (int)data[5]) goto LAB_000844f6;\n  }\n  intValue = _fflush_r(dataAddr,data);\n  if (intValue != 0) {\n    return 0xffffffff;\n  }\n  ptrValue = (undefined *)*data;\n  intValue = 1;\nLAB_000844f8:\n  data[2] = data[2] + -1;\n  *data = ptrValue + 1;\n  *ptrValue = (char)input;\n  if (((data[5] == intValue) ||\n      (((int)((uint)*(ushort *)(data + 3) << 0x1f) < 0 && (input == 10)))) &&\n     (intValue = _fflush_r(dataAddr,data), intValue != 0)) {\n    return 0xffffffff;\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "dataAddr",
                "param_2": "input",
                "param_3": "data",
                "param_4": "size",
                "uVar1": "ushortValue",
                "uVar2": "uintValue",
                "puVar3": "ptrValue",
                "iVar4": "intValue"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "_fflush_r",
                "__sinit",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "decode_string_0008456c",
            "code": "\nvoid decodeString_0008456c(undefined4 *result,int size,undefined4 value,undefined4 *status)\n\n{\n  code *functionPointer;\n  undefined4 charset;\n  int returnValue;\n  undefined temporaryBuffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (size == 0) {\n    charset = __locale_charset();\n    returnValue = (*functionPointer)(result,temporaryBuffer,0,charset,status);\n  }\n  else {\n    charset = __locale_charset();\n    returnValue = (*functionPointer)(result,size,value,charset,status);\n  }\n  if (returnValue == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "decode_string_0008456c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "value",
                "param_4": "status",
                "pcVar1": "functionPointer",
                "uVar2": "charset",
                "iVar3": "returnValue",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "convert_and_store_value_000845bc",
            "code": "\nundefined4 convertAndStoreValue_000845bc(undefined4 *outputValue,undefined *outputBuffer,uint inputValue)\n\n{\n  if (outputBuffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (inputValue < 0x100) {\n    *outputBuffer = (char)inputValue;\n    return 1;\n  }\n  *outputValue = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "convert_and_store_value_000845bc",
                "param_1": "outputValue",
                "param_2": "outputBuffer",
                "param_3": "inputValue"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_data_000846a4",
            "code": "\nundefined4 processData_000846a4(int data)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (data != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(data + 0xc) != 0) {\n      result = _fflush_r(offset,data);\n      if ((*(code **)(data + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(data + 0x2c))(offset,*(undefined4 *)(data + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n        _free_r(offset,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0) {\n        if (*(int *)(data + 0x30) != data + 0x40) {\n          _free_r(offset);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0) {\n        _free_r(offset);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(data + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_data_000846a4",
                "param_1": "data",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_file_status_000846b4",
            "code": "\nvoid checkFileStatus_000846b4(int *result,undefined4 fileDescriptor,undefined4 buffer,undefined4 bufferSize)\n\n{\n  int fileStatus;\n  \n  DAT_200711bc = 0;\n  fileStatus = _fstat(fileDescriptor,buffer,buffer,0,bufferSize);\n  if ((fileStatus == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_file_status_000846b4",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "bufferSize",
                "iVar1": "fileStatus"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_terminal_status_000846dc",
            "code": "\nvoid checkTerminalStatus_000846dc(int *outputVariable,undefined4 terminalFileDescriptor)\n\n{\n  int isTerminal;\n  \n  DAT_200711bc = 0;\n  isTerminal = _isatty(terminalFileDescriptor);\n  if ((isTerminal == -1) && (DAT_200711bc != 0)) {\n    *outputVariable = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_terminal_status_000846dc",
                "param_1": "outputVariable",
                "param_2": "terminalFileDescriptor",
                "iVar1": "isTerminal"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "set_file_pointer_and_check_error_00084700",
            "code": "\nvoid setFilePointerAndCheckError_00084700(int *returnValue,undefined4 fileHandle,undefined4 offset,undefined4 origin)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = _lseek(fileHandle,offset,origin);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *returnValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "set_file_pointer_and_check_error_00084700",
                "param_1": "returnValue",
                "param_2": "fileHandle",
                "param_3": "offset",
                "param_4": "origin",
                "iVar1": "result"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "read_data_00084728",
            "code": "\nvoid readData_00084728(int *output,undefined4 source,undefined4 destination,undefined4 size)\n\n{\n  int readResult;\n  \n  DAT_200711bc = 0;\n  readResult = _read(source,destination,size);\n  if ((readResult == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "read_data_00084728",
                "param_1": "output",
                "param_2": "source",
                "param_3": "destination",
                "param_4": "size",
                "iVar1": "readResult"
            },
            "calling": [],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_result_00084750",
            "code": "\nint calculate_result_00084750(int input_1,int input_2,int check_1,int check_2)\n\n{\n  int result;\n  \n  if ((check_2 == 0) && (check_1 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "check_1",
                "param_4": "check_2",
                "iVar1": "result"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculate_difference_0008477c(uint input_value,int param_size,undefined4 param_3,undefined4 param_4,int *output_params)\n\n{\n  uint result;\n  longlong multiplied_value;\n  \n  multiplied_value = __divdi3();\n  multiplied_value = multiplied_value * CONCAT44(param_4,param_3);\n  result = (uint)multiplied_value;\n  *output_params = input_value - result;\n  output_params[1] = (param_size - (int)((ulonglong)multiplied_value >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_value",
                "param_2": "param_size",
                "param_5": "output_params",
                "uVar1": "result",
                "lVar2": "multiplied_value"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculateDifference_000847ac(uint inputValue,int subtractionValue,undefined4 lowerPartParam,undefined4 upperPartParam,int *outputArray)\n\n{\n  uint result;\n  longlong multiplicationResult;\n  \n  multiplicationResult = __udivdi3();\n  multiplicationResult = multiplicationResult * CONCAT44(upperPartParam,lowerPartParam);\n  result = (uint)multiplicationResult;\n  *outputArray = inputValue - result;\n  outputArray[1] = (subtractionValue - (int)((ulonglong)multiplicationResult >> 0x20)) - (uint)(inputValue < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "inputValue",
                "param_2": "subtractionValue",
                "param_3": "lowerPartParam",
                "param_4": "upperPartParam",
                "param_5": "outputArray",
                "uVar1": "result",
                "lVar2": "multiplicationResult"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_with_remainder_000847e0",
            "code": "\nundefined8 divideWithRemainder_000847e0(uint dividend,uint dividendUpper,uint divisor,uint divisorUpper)\n\n{\n  longlong tempLong;\n  uint quotient;\n  uint quotientUpper;\n  uint quotientRemainder;\n  uint temp;\n  int shiftAmount;\n  uint temp1;\n  uint temp2;\n  uint isNegativeDividend;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool isBorrow;\n  \n  if ((int)dividendUpper < 0) {\n    isBorrow = dividend != 0;\n    dividend = -dividend;\n    dividendUpper = -dividendUpper - (uint)isBorrow;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)divisorUpper < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    isBorrow = divisor != 0;\n    divisor = -divisor;\n    divisorUpper = -divisorUpper - (uint)isBorrow;\n  }\n  if (divisorUpper == 0) {\n    if (dividendUpper < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        quotientUpper = dividend >> (0x20U - shiftAmount & 0xff);\n        divisor = divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n        dividendUpper = dividendUpper << shiftAmount | quotientUpper;\n      }\n      quotient = divisor >> 0x10;\n      quotientRemainder = dividendUpper / quotient;\n      temp1 = (divisor & 0xffff) * quotientRemainder;\n      temp3 = dividend >> 0x10 | (dividendUpper - quotient * quotientRemainder) * 0x10000;\n      quotientUpper = quotientRemainder;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        isBorrow = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        quotientUpper = quotientRemainder - 1;\n        if ((isBorrow == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n          quotientUpper = quotientRemainder - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp2 = (temp3 - temp1) / quotient;\n      quotientRemainder = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((temp3 - temp1) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= quotientRemainder && quotientRemainder - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= quotientRemainder && quotientRemainder - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | quotientUpper << 0x10;\n      quotientUpper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendUpper = dividendUpper - divisor;\n        quotientRemainder = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        quotientUpper = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        quotientUpper = dividendUpper >> (0x20U - shiftAmount & 0xff);\n        quotientRemainder = divisor >> 0x10;\n        temp3 = quotientUpper / quotientRemainder;\n        temp5 = divisor & 0xffff;\n        temp1 = temp5 * temp3;\n        temp2 = dividend >> (0x20U - shiftAmount & 0xff) | dividendUpper << shiftAmount;\n        quotientUpper = temp2 >> 0x10 | (quotientUpper - quotientRemainder * temp3) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotient = temp3;\n        if (quotientUpper <= temp1 && temp1 - quotientUpper != 0) {\n          isBorrow = CARRY4(quotientUpper,divisor);\n          quotientUpper = quotientUpper + divisor;\n          quotient = temp3 - 1;\n          if ((isBorrow == false) && (quotientUpper <= temp1 && temp1 - quotientUpper != 0)) {\n            quotient = temp3 - 2;\n            quotientUpper = quotientUpper + divisor;\n          }\n        }\n        temp = (quotientUpper - temp1) / quotientRemainder;\n        temp3 = temp5 * temp;\n        dividendUpper = temp2 & 0xffff | ((quotientUpper - temp1) - quotientRemainder * temp) * 0x10000;\n        quotientUpper = temp;\n        if (dividendUpper <= temp3 && temp3 - dividendUpper != 0) {\n          isBorrow = CARRY4(dividendUpper,divisor);\n          dividendUpper = dividendUpper + divisor;\n          quotientUpper = temp - 1;\n          if ((isBorrow == false) && (dividendUpper <= temp3 && temp3 - dividendUpper != 0)) {\n            quotientUpper = temp - 2;\n            dividendUpper = dividendUpper + divisor;\n          }\n        }\n        dividendUpper = dividendUpper - temp3;\n        quotientUpper = quotientUpper | quotient << 0x10;\n      }\n      quotient = dividendUpper / quotientRemainder;\n      temp3 = temp5 * quotient;\n      temp2 = dividend >> 0x10 | (dividendUpper - quotientRemainder * quotient) * 0x10000;\n      temp1 = quotient;\n      if (temp2 <= temp3 && temp3 - temp2 != 0) {\n        isBorrow = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient - 1;\n        if ((isBorrow == false) && (temp2 <= temp3 && temp3 - temp2 != 0)) {\n          temp1 = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp = (temp2 - temp3) / quotientRemainder;\n      temp5 = temp5 * temp;\n      quotientRemainder = dividend & 0xffff | ((temp2 - temp3) - quotientRemainder * temp) * 0x10000;\n      quotient = temp;\n      if (quotientRemainder <= temp5 && temp5 - quotientRemainder != 0) {\n        quotient = temp - 1;\n        if ((CARRY4(quotientRemainder,divisor) == false) &&\n           (quotientRemainder + divisor <= temp5 && temp5 - (quotientRemainder + divisor) != 0)) {\n          quotient = temp - 2;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n    }\n  }\n  else if (dividendUpper < divisorUpper) {\n    quotientUpper = 0;\n    quotient = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(divisorUpper);\n    if (shiftAmount == 0) {\n      if ((divisorUpper < dividendUpper) || (divisor <= dividend)) {\n        quotientUpper = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotientUpper = 0;\n      }\n    }\n    else {\n      quotientUpper = 0x20 - shiftAmount;\n      quotientRemainder = dividendUpper >> (quotientUpper & 0xff);\n      temp5 = divisor >> (quotientUpper & 0xff) | divisorUpper << shiftAmount;\n      temp3 = temp5 >> 0x10;\n      quotient = quotientRemainder / temp3;\n      temp2 = (temp5 & 0xffff) * quotient;\n      temp1 = dividendUpper << shiftAmount | dividend >> (quotientUpper & 0xff);\n      quotientRemainder = temp1 >> 0x10 | (quotientRemainder - temp3 * quotient) * 0x10000;\n      quotientUpper = quotient;\n      if (quotientRemainder <= temp2 && temp2 - quotientRemainder != 0) {\n        isBorrow = CARRY4(quotientRemainder,temp5);\n        quotientRemainder = quotientRemainder + temp5;\n        quotientUpper = quotient - 1;\n        if ((isBorrow == false) && (quotientRemainder <= temp2 && temp2 - quotientRemainder != 0)) {\n          quotientUpper = quotient - 2;\n          quotientRemainder = quotientRemainder + temp5;\n        }\n      }\n      temp = (quotientRemainder - temp2) / temp3;\n      temp4 = (temp5 & 0xffff) * temp;\n      quotientRemainder = temp1 & 0xffff | ((quotientRemainder - temp2) - temp3 * temp) * 0x10000;\n      quotient = temp;\n      if (quotientRemainder <= temp4 && temp4 - quotientRemainder != 0) {\n        isBorrow = CARRY4(quotientRemainder,temp5);\n        quotientRemainder = quotientRemainder + temp5;\n        quotient = temp - 1;\n        if ((isBorrow == false) && (quotientRemainder <= temp4 && temp4 - quotientRemainder != 0)) {\n          quotient = temp - 2;\n          quotientRemainder = quotientRemainder + temp5;\n        }\n      }\n      quotient = quotient | quotientUpper << 0x10;\n      tempLong = (ulonglong)quotient * (ulonglong)(divisor << shiftAmount);\n      temp1 = (uint)((ulonglong)tempLong >> 0x20);\n      quotientUpper = 0;\n      if ((quotientRemainder - temp4 < temp1) ||\n         ((quotientRemainder - temp4 == temp1 && (dividend << shiftAmount < (uint)tempLong)))) {\n        quotient = quotient - 1;\n        quotientUpper = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    isBorrow = quotient != 0;\n    quotient = -quotient;\n    quotientUpper = -quotientUpper - (uint)isBorrow;\n  }\n  return CONCAT44(quotientUpper,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "dividendUpper",
                "param_3": "divisor",
                "param_4": "divisorUpper",
                "lVar1": "tempLong",
                "uVar2": "quotient",
                "uVar3": "quotientUpper",
                "uVar4": "quotientRemainder",
                "uVar5": "temp",
                "iVar6": "shiftAmount",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "isNegativeDividend",
                "uVar10": "temp3",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "isBorrow"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "divide_and_multiply_00084a80",
            "code": "\nulonglong divideAndMultiply_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint dividendQuotient1;\n  uint divisorQuotient1;\n  uint dividendQuotient2;\n  uint dividendProduct;\n  uint tempDividendQuotient1;\n  uint tempDividendProduct;\n  uint divisorQuotient2;\n  uint tempQuotient1;\n  int bitCount;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      bitCount = LZCOUNT(quotient);\n      if (bitCount == 0) {\n        divisor = divisor - quotient;\n        divisorQuotient1 = quotient >> 0x10;\n        dividendProduct = quotient & 0xffff;\n        dividendQuotient1 = 1;\n      }\n      else {\n        quotient = quotient << bitCount;\n        divisorQuotient2 = divisor >> (0x20U - bitCount & 0xff);\n        divisorQuotient1 = quotient >> 0x10;\n        tempQuotient1 = divisorQuotient2 / divisorQuotient1;\n        dividendProduct = quotient & 0xffff;\n        dividendQuotient1 = dividendProduct * tempQuotient1;\n        tempDividendQuotient1 = dividend >> (0x20U - bitCount & 0xff) | divisor << bitCount;\n        dividendQuotient2 = tempDividendQuotient1 >> 0x10 | (divisorQuotient2 - divisorQuotient1 * tempQuotient1) * 0x10000;\n        dividend = dividend << bitCount;\n        divisorQuotient2 = tempQuotient1;\n        if (dividendQuotient2 <= dividendQuotient1 && dividendQuotient1 - dividendQuotient2 != 0) {\n          carryFlag = CARRY4(dividendQuotient2,quotient);\n          dividendQuotient2 = dividendQuotient2 + quotient;\n          divisorQuotient2 = tempQuotient1 - 1;\n          if ((carryFlag == false) && (dividendQuotient2 <= dividendQuotient1 && dividendQuotient1 - dividendQuotient2 != 0)) {\n            divisorQuotient2 = tempQuotient1 - 2;\n            dividendQuotient2 = dividendQuotient2 + quotient;\n          }\n        }\n        tempDividendProduct = (dividendQuotient2 - dividendQuotient1) / divisorQuotient1;\n        tempQuotient1 = dividendProduct * tempDividendProduct;\n        divisor = tempDividendQuotient1 & 0xffff | ((dividendQuotient2 - dividendQuotient1) - divisorQuotient1 * tempDividendProduct) * 0x10000;\n        dividendQuotient1 = tempDividendProduct;\n        if (divisor <= tempQuotient1 && tempQuotient1 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          dividendQuotient1 = tempDividendProduct - 1;\n          if ((carryFlag == false) && (divisor <= tempQuotient1 && tempQuotient1 - divisor != 0)) {\n            dividendQuotient1 = tempDividendProduct - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - tempQuotient1;\n        dividendQuotient1 = dividendQuotient1 | divisorQuotient2 << 0x10;\n      }\n      tempQuotient1 = divisor / divisorQuotient1;\n      dividendQuotient2 = dividendProduct * tempQuotient1;\n      tempDividendQuotient1 = dividend >> 0x10 | (divisor - divisorQuotient1 * tempQuotient1) * 0x10000;\n      divisorQuotient2 = tempQuotient1;\n      if (tempDividendQuotient1 <= dividendQuotient2 && dividendQuotient2 - tempDividendQuotient1 != 0) {\n        carryFlag = CARRY4(tempDividendQuotient1,quotient);\n        tempDividendQuotient1 = tempDividendQuotient1 + quotient;\n        divisorQuotient2 = tempQuotient1 - 1;\n        if ((carryFlag == false) && (tempDividendQuotient1 <= dividendQuotient2 && dividendQuotient2 - tempDividendQuotient1 != 0)) {\n          divisorQuotient2 = tempQuotient1 - 2;\n          tempDividendQuotient1 = tempDividendQuotient1 + quotient;\n        }\n      }\n      tempQuotient1 = (tempDividendQuotient1 - dividendQuotient2) / divisorQuotient1;\n      dividendProduct = dividendProduct * tempQuotient1;\n      tempDividendQuotient1 = dividend & 0xffff | ((tempDividendQuotient1 - dividendQuotient2) - divisorQuotient1 * tempQuotient1) * 0x10000;\n      divisorQuotient1 = tempQuotient1;\n      if (tempDividendQuotient1 <= dividendProduct && dividendProduct - tempDividendQuotient1 != 0) {\n        divisorQuotient1 = tempQuotient1 - 1;\n        if ((CARRY4(tempDividendQuotient1,quotient) == false) &&\n           (tempDividendQuotient1 + quotient <= dividendProduct && dividendProduct - (tempDividendQuotient1 + quotient) != 0)) {\n          divisorQuotient1 = tempQuotient1 - 2;\n        }\n      }\n      return CONCAT44(dividendQuotient1,divisorQuotient1 | divisorQuotient2 << 0x10);\n    }\n    bitCount = LZCOUNT(quotient);\n    if (bitCount != 0) {\n      divisorQuotient2 = dividend >> (0x20U - bitCount & 0xff);\n      quotient = quotient << bitCount;\n      dividend = dividend << bitCount;\n      divisor = divisorQuotient2 | divisor << bitCount;\n    }\n    dividendQuotient1 = quotient >> 0x10;\n    divisorQuotient1 = divisor / dividendQuotient1;\n    dividendProduct = (quotient & 0xffff) * divisorQuotient1;\n    tempQuotient1 = dividend >> 0x10 | (divisor - dividendQuotient1 * divisorQuotient1) * 0x10000;\n    divisorQuotient2 = divisorQuotient1;\n    if (tempQuotient1 <= dividendProduct && dividendProduct - tempQuotient1 != 0) {\n      carryFlag = CARRY4(tempQuotient1,quotient);\n      tempQuotient1 = tempQuotient1 + quotient;\n      divisorQuotient2 = divisorQuotient1 - 1;\n      if ((carryFlag == false) && (tempQuotient1 <= dividendProduct && dividendProduct - tempQuotient1 != 0)) {\n        divisorQuotient2 = divisorQuotient1 - 2;\n        tempQuotient1 = tempQuotient1 + quotient;\n      }\n    }\n    tempDividendQuotient1 = (tempQuotient1 - dividendProduct) / dividendQuotient1;\n    divisorQuotient1 = (quotient & 0xffff) * tempDividendQuotient1;\n    dividendProduct = dividend & 0xffff | ((tempQuotient1 - dividendProduct) - dividendQuotient1 * tempDividendQuotient1) * 0x10000;\n    dividendQuotient1 = tempDividendQuotient1;\n    if (dividendProduct <= divisorQuotient1 && divisorQuotient1 - dividendProduct != 0) {\n      dividendQuotient1 = tempDividendQuotient1 - 1;\n      if ((CARRY4(dividendProduct,quotient) == false) &&\n         (dividendProduct + quotient <= divisorQuotient1 && divisorQuotient1 - (dividendProduct + quotient) != 0)) {\n        dividendQuotient1 = tempDividendQuotient1 - 2;\n      }\n    }\n    dividendQuotient1 = dividendQuotient1 | divisorQuotient2 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    bitCount = LZCOUNT(remainder);\n    if (bitCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      dividendQuotient1 = 0;\n    }\n    else {\n      dividendQuotient1 = 0x20 - bitCount;\n      divisorQuotient2 = divisor >> (dividendQuotient1 & 0xff);\n      divisorQuotient1 = remainder << bitCount | quotient >> (dividendQuotient1 & 0xff);\n      dividendProduct = divisorQuotient1 >> 0x10;\n      dividendQuotient2 = divisorQuotient2 / dividendProduct;\n      tempQuotient1 = (divisorQuotient1 & 0xffff) * dividendQuotient2;\n      tempDividendQuotient1 = dividend >> (dividendQuotient1 & 0xff) | divisor << bitCount;\n      dividendQuotient1 = tempDividendQuotient1 >> 0x10 | (divisorQuotient2 - dividendProduct * dividendQuotient2) * 0x10000;\n      divisorQuotient2 = dividendQuotient2;\n      if (dividendQuotient1 <= tempQuotient1 && tempQuotient1 - dividendQuotient1 != 0) {\n        carryFlag = CARRY4(dividendQuotient1,divisorQuotient1);\n        dividendQuotient1 = dividendQuotient1 + divisorQuotient1;\n        divisorQuotient2 = dividendQuotient2 - 1;\n        if ((carryFlag == false) && (dividendQuotient1 <= tempQuotient1 && tempQuotient1 - dividendQuotient1 != 0)) {\n          divisorQuotient2 = dividendQuotient2 - 2;\n          dividendQuotient1 = dividendQuotient1 + divisorQuotient1;\n        }\n      }\n      dividendQuotient2 = (dividendQuotient1 - tempQuotient1) / dividendProduct;\n      tempDividendProduct = (divisorQuotient1 & 0xffff) * dividendQuotient2;\n      dividendProduct = tempDividendQuotient1 & 0xffff | ((dividendQuotient1 - tempQuotient1) - dividendProduct * dividendQuotient2) * 0x10000;\n      dividendQuotient1 = dividendQuotient2;\n      if (dividendProduct <= tempDividendProduct && tempDividendProduct - dividendProduct != 0) {\n        carryFlag = CARRY4(dividendProduct,divisorQuotient1);\n        dividendProduct = dividendProduct + divisorQuotient1;\n        dividendQuotient1 = dividendQuotient2 - 1;\n        if ((carryFlag == false) && (dividendProduct <= tempDividendProduct && tempDividendProduct - dividendProduct != 0)) {\n          dividendQuotient1 = dividendQuotient2 - 2;\n          dividendProduct = dividendProduct + divisorQuotient1;\n        }\n      }\n      dividendQuotient1 = dividendQuotient1 | divisorQuotient2 << 0x10;\n      temp = (ulonglong)dividendQuotient1 * (ulonglong)(quotient << bitCount);\n      divisorQuotient2 = (uint)((ulonglong)temp >> 0x20);\n      if ((dividendProduct - tempDividendProduct < divisorQuotient2) || ((dividendProduct - tempDividendProduct == divisorQuotient2 && (dividend << bitCount < (uint)temp)))\n         ) {\n        dividendQuotient1 = dividendQuotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)dividendQuotient1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "divide_and_multiply_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "dividendQuotient1",
                "uVar3": "divisorQuotient1",
                "uVar4": "dividendQuotient2",
                "uVar5": "dividendProduct",
                "uVar6": "tempDividendQuotient1",
                "uVar7": "tempDividendProduct",
                "uVar8": "divisorQuotient2",
                "uVar9": "tempQuotient1",
                "iVar10": "bitCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 102810,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f24",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_000804a8",
            "FUN_000816a8"
        ]
    ],
    "locked_functions": []
}