{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputParam)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_string_length_08000178",
            "code": "\nchar * find_string_length_08000178(char *input_string)\n\n{\n  char current_character;\n  char *current_position;\n  char *next_position;\n  \n  next_position = input_string;\n  do {\n    current_position = next_position + 1;\n    current_character = *next_position;\n    next_position = current_position;\n  } while (current_character != '\\0');\n  return current_position + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_string_length_08000178",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "current_position",
                "pcVar3": "next_position"
            },
            "calling": [
                "sendString",
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "execute_interrupt_08000188",
            "code": "\nvoid execute_interrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "execute_interrupt_08000188"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_afl_call_0800018c",
            "code": "\nundefined4 executeAflCall_0800018c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = aflCall(1,input1,0,0,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_afl_call_0800018c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "pin_control_08000214",
            "code": "\nvoid pinControl_08000214(uint pin,undefined4 value,undefined4 param3,undefined4 param4)\n\n{\n  bool isDigital;\n  int pinMode;\n  \n  if (0x3b < (int)pin) {\n    return;\n  }\n  pinMode = getPinMode(&DAT_200003d4,pin,param3,param4,param4);\n  if (pinMode == 3) {\n    if (pin < 0x3c) {\n      if ((&DAT_0800a908)[pin] == -1) {\n        pinMode = 0;\n      }\n      else {\n        pinMode = pinNameToDigitalPin();\n        if (pinMode == 0) {\n          pinMode = 0;\n        }\n        else {\n          pinMode = pinNameToDigitalPin((int)(char)(&DAT_0800a908)[pin]);\n          if (pinMode == 1) {\n            pinMode = 0;\n          }\n          else {\n            pinMode = isPinInPinMap((int)(char)(&DAT_0800a908)[pin],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      pinMode = 0;\n    }\n    if (pinMode != 0) {\n      analogWrite(pin,value);\n    }\n    setPinState(&DAT_200003d4,pin,value);\n  }\n  else if (pinMode == 4) {\n    if (pin < 0x3c) {\n      if ((&DAT_0800a908)[pin] == -1) {\n        isDigital = false;\n      }\n      else {\n        pinMode = pinNameToDigitalPin();\n        if (pinMode == 0) {\n          isDigital = false;\n        }\n        else {\n          pinMode = pinNameToDigitalPin((int)(char)(&DAT_0800a908)[pin]);\n          if (pinMode == 1) {\n            isDigital = false;\n          }\n          else {\n            isDigital = true;\n          }\n        }\n      }\n    }\n    else {\n      isDigital = false;\n    }\n    if (isDigital) {\n      setMappedMicroseconds(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin] * 3,value);\n    }\n    setPinState(&DAT_200003d4,pin,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "pin_control_08000214",
                "param_1": "pin",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "isDigital",
                "iVar2": "pinMode",
                "pinNametoDigitalPin": "pinNameToDigitalPin",
                "pin_in_pinmap": "isPinInPinMap",
                "set_mapped_microseconds_080026b0": "setMappedMicroseconds"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "analog_write_if_pin_mode_is_digital_output_0800021a",
            "code": "\nvoid analogWriteIfPinModeIsDigitalOutput_0800021a(uint pinNumber,undefined4 value,undefined4 mode,undefined4 state)\n\n{\n  bool isPinValid;\n  int pinMode;\n  \n  pinMode = getPinModeFromAddress(&DAT_200003d4,pinNumber,mode,state,state);\n  if (pinMode == 3) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        pinMode = 0;\n      }\n      else {\n        pinMode = getDigitalPinFromName();\n        if (pinMode == 0) {\n          pinMode = 0;\n        }\n        else {\n          pinMode = getDigitalPinFromName((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinMode == 1) {\n            pinMode = 0;\n          }\n          else {\n            pinMode = isPinInPinMap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      pinMode = 0;\n    }\n    if (pinMode != 0) {\n      writeAnalogValueToPin(pinNumber,value);\n    }\n    setPinState(&DAT_200003d4,pinNumber,value);\n  }\n  else if (pinMode == 4) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isPinValid = false;\n      }\n      else {\n        pinMode = getDigitalPinFromName();\n        if (pinMode == 0) {\n          isPinValid = false;\n        }\n        else {\n          pinMode = getDigitalPinFromName((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinMode == 1) {\n            isPinValid = false;\n          }\n          else {\n            isPinValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isPinValid = false;\n    }\n    if (isPinValid) {\n      setMappedMicroseconds(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3,value);\n    }\n    setPinState(&DAT_200003d4,pinNumber,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "analog_write_if_pin_mode_is_digital_output_0800021a",
                "param_1": "pinNumber",
                "param_2": "value",
                "param_3": "mode",
                "param_4": "state",
                "bVar1": "isPinValid",
                "iVar2": "pinMode",
                "getPinMode": "getPinModeFromAddress",
                "pinNametoDigitalPin": "getDigitalPinFromName",
                "pin_in_pinmap": "isPinInPinMap",
                "analogWrite": "writeAnalogValueToPin",
                "set_mapped_microseconds_080026b0": "setMappedMicroseconds"
            },
            "calling": [
                "analogWriteCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "analogWrite",
                "FUN_080026b0",
                "setPinState",
                "getPinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_08000488",
            "code": "\nvoid updateData_08000488(uint index,int flag)\n\n{\n  undefined4 analogValue;\n  \n  if ((int)index < 0xe) {\n    if (flag == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (index & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (index & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      analogValue = analogRead();\n      send_analog_data_08002ef2(&DAT_200003d4,index,analogValue);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "param_1": "index",
                "param_2": "flag",
                "uVar1": "analogValue"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [
                "analogRead",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "execute_servo_actions_080004d4",
            "code": "\nvoid executeServoActions_080004d4(int input,int flag)\n\n{\n  int counter;\n  undefined *servoPointer;\n  \n  if (input != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    servoPointer = &DAT_2000022c;\n    for (counter = 0xb; -1 < counter; counter = counter + -1) {\n      Servo(servoPointer);\n      servoPointer = servoPointer + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "execute_servo_actions_080004d4",
                "param_1": "input",
                "param_2": "flag",
                "iVar1": "counter",
                "puVar2": "servoPointer"
            },
            "calling": [],
            "called": [
                "Servo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "attach_servo_08000500",
            "code": "\nvoid attachServo_08000500(int servoIndex,int pinMode,int pinConfig,undefined4 undefinedParameter)\n\n{\n  if (0xb < DAT_200001ed) {\n    send_string_from_offset_08002f14(&DAT_200003d4,\"Max servos attached\",pinConfig,undefinedParameter,undefinedParameter);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servoIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servoIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < pinMode) && (0 < pinConfig)) {\n    updatePinMode(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex,pinMode,pinConfig);\n    return;\n  }\n  configurePinMode(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "attach_servo_08000500",
                "param_1": "servoIndex",
                "param_2": "pinMode",
                "param_3": "pinConfig",
                "param_4": "undefinedParameter",
                "update_pin_mode_080025ac": "updatePinMode",
                "configure_pin_mode_08002634": "configurePinMode"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [
                "FUN_080025ac",
                "FUN_08002634",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "detach_and_clear_index_08000588",
            "code": "\nvoid detachAndClearIndex_08000588(int index)\n\n{\n  detach(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "detach_and_clear_index_08000588",
                "param_1": "index"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [
                "detach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "pin_mode_control_080005f8",
            "code": "\nvoid pinModeControl_080005f8(uint pinNumber,int mode)\n\n{\n  int pinModeResult;\n  char previousDigitalPinMode;\n  bool shouldUpdatePinState;\n  uint analogPinIndex;\n  \n  pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n  if (pinModeResult != 0x7f) {\n    pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n    if (pinModeResult == 6) {\n      if (DAT_20000170 == '\\0') {\n        previousDigitalPinMode = '\\0';\n      }\n      else {\n        previousDigitalPinMode = DAT_20000170;\n        if (mode == 6) {\n          previousDigitalPinMode = '\\0';\n        }\n      }\n    }\n    else {\n      previousDigitalPinMode = '\\0';\n    }\n    if (previousDigitalPinMode != '\\0') {\n      disableI2CPins();\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        shouldUpdatePinState = false;\n      }\n      else {\n        pinModeResult = pinNametoDigitalPin();\n        if (pinModeResult == 0) {\n          shouldUpdatePinState = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinModeResult == 1) {\n            shouldUpdatePinState = false;\n          }\n          else if (mode == 4) {\n            shouldUpdatePinState = false;\n          }\n          else {\n            shouldUpdatePinState = true;\n          }\n        }\n      }\n    }\n    else {\n      shouldUpdatePinState = false;\n    }\n    if (shouldUpdatePinState) {\n      if ((byte)(&DAT_200001f0)[pinNumber] < 0xc) {\n        pinModeResult = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3);\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        detachServo(pinNumber);\n      }\n    }\n    analogPinIndex = pinNumber - 0x2e & 0xff;\n    if (analogPinIndex < 0xe) {\n      if (pinNumber < 0x3c) {\n        pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n      }\n      else {\n        pinModeResult = -1;\n      }\n      pinModeResult = pinNametoDigitalPin(pinModeResult);\n      if (pinModeResult == 0) {\n        shouldUpdatePinState = false;\n      }\n      else {\n        if (pinNumber < 0x3c) {\n          pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          pinModeResult = -1;\n        }\n        pinModeResult = pinNametoDigitalPin(pinModeResult);\n        if (pinModeResult == 1) {\n          shouldUpdatePinState = false;\n        }\n        else {\n          shouldUpdatePinState = true;\n        }\n      }\n    }\n    else {\n      shouldUpdatePinState = false;\n    }\n    if (shouldUpdatePinState) {\n      reportAnalogCallback(analogPinIndex,mode == 2);\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        shouldUpdatePinState = false;\n      }\n      else {\n        pinModeResult = pinNametoDigitalPin();\n        if (pinModeResult == 0) {\n          shouldUpdatePinState = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinModeResult == 1) {\n            shouldUpdatePinState = false;\n          }\n          else {\n            shouldUpdatePinState = true;\n          }\n        }\n      }\n    }\n    else {\n      shouldUpdatePinState = false;\n    }\n    if (shouldUpdatePinState) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] | (byte)(1 << (pinNumber & 7));\n      }\n      else {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] & ~(byte)(1 << (pinNumber & 7));\n      }\n    }\n    setPinState(&DAT_200003d4,pinNumber,0);\n    switch(mode) {\n    case 0:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          shouldUpdatePinState = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            shouldUpdatePinState = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              shouldUpdatePinState = false;\n            }\n            else {\n              shouldUpdatePinState = true;\n            }\n          }\n        }\n      }\n      else {\n        shouldUpdatePinState = false;\n      }\n      if (shouldUpdatePinState) {\n        pinMode(pinNumber,0);\n        setPinMode(&DAT_200003d4,pinNumber,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          shouldUpdatePinState = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            shouldUpdatePinState = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              shouldUpdatePinState = false;\n            }\n            else {\n              shouldUpdatePinState = true;\n            }\n          }\n        }\n      }\n      else {\n        shouldUpdatePinState = false;\n      }\n      if (shouldUpdatePinState) {\n        pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n        if (pinModeResult == 3) {\n          digitalWrite(pinNumber,0);\n        }\n        pinMode(pinNumber,1);\n        setPinMode(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n      break;\n    case 2:\n      if (analogPinIndex < 0xe) {\n        if (pinNumber < 0x3c) {\n          pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          pinModeResult = -1;\n        }\n        pinModeResult = pinNametoDigitalPin(pinModeResult);\n        if (pinModeResult == 0) {\n          shouldUpdatePinState = false;\n        }\n        else {\n          if (pinNumber < 0x3c) {\n            pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n          }\n          else {\n            pinModeResult = -1;\n          }\n          pinModeResult = pinNametoDigitalPin(pinModeResult);\n          if (pinModeResult == 1) {\n            shouldUpdatePinState = false;\n          }\n          else {\n            shouldUpdatePinState = true;\n          }\n        }\n      }\n      else {\n        shouldUpdatePinState = false;\n      }\n      if (shouldUpdatePinState) {\n        if (pinNumber < 0x3c) {\n          if ((&DAT_0800a908)[pinNumber] == -1) {\n            shouldUpdatePinState = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin();\n            if (pinModeResult == 0) {\n              shouldUpdatePinState = false;\n            }\n            else {\n              pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n              if (pinModeResult == 1) {\n                shouldUpdatePinState = false;\n              }\n            }\n          }\n        }\n        else {\n          shouldUpdatePinState = false;\n        }\n        if (shouldUpdatePinState) {\n          pinMode(pinNumber,0);\n        }\n        setPinMode(&DAT_200003d4,pinNumber,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          pinModeResult = 0;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            pinModeResult = 0;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              pinModeResult = 0;\n            }\n            else {\n              pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        pinMode(pinNumber,1);\n        analogWrite(pinNumber,0);\n        setPinMode(&DAT_200003d4,pinNumber,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          shouldUpdatePinState = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            shouldUpdatePinState = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              shouldUpdatePinState = false;\n            }\n            else {\n              shouldUpdatePinState = true;\n            }\n          }\n        }\n      }\n      else {\n        shouldUpdatePinState = false;\n      }\n      if (shouldUpdatePinState) {\n        setPinMode(&DAT_200003d4,pinNumber,4);\n        if (((byte)(&DAT_200001f0)[pinNumber] != 0xff) &&\n           (pinModeResult = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3), pinModeResult != 0))\n        {\n          shouldUpdatePinState = false;\n        }\n        if (shouldUpdatePinState) {\n          attachServo(pinNumber,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      send_string_from_offset_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          pinModeResult = 0;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            pinModeResult = 0;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              pinModeResult = 0;\n            }\n            else {\n              pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a69c);\n              if (pinModeResult == 0) {\n                pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        setPinMode(&DAT_200003d4,pinNumber,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          shouldUpdatePinState = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            shouldUpdatePinState = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              shouldUpdatePinState = false;\n            }\n            else {\n              shouldUpdatePinState = true;\n            }\n          }\n        }\n      }\n      else {\n        shouldUpdatePinState = false;\n      }\n      if (shouldUpdatePinState) {\n        pinMode(pinNumber,2);\n        setPinMode(&DAT_200003d4,pinNumber,0xb);\n        setPinState(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "pin_mode_control_080005f8",
                "param_1": "pinNumber",
                "param_2": "mode",
                "iVar1": "pinModeResult",
                "cVar2": "previousDigitalPinMode",
                "bVar3": "shouldUpdatePinState",
                "uVar4": "analogPinIndex"
            },
            "calling": [
                "sysexCallback",
                "enableI2CPins",
                "systemResetCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "analogWrite",
                "FUN_08002f14",
                "digitalWrite",
                "setPinState",
                "setPinMode",
                "attachServo",
                "pinNametoDigitalPin",
                "reportAnalogCallback",
                "disableI2CPins",
                "getPinMode",
                "attached",
                "pinMode",
                "detachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_pin_modes_08000a64",
            "code": "\nvoid initializePinModes_08000a64(void)\n\n{\n  int pinStatus;\n  uint pinIndex;\n  \n  for (pinIndex = 0; pinIndex < 0x3c; pinIndex = pinIndex + 1 & 0xff) {\n    if (pinIndex < 0x3c) {\n      if ((&DAT_0800a908)[pinIndex] == -1) {\n        pinStatus = 0;\n      }\n      else {\n        pinStatus = pinNametoDigitalPin();\n        if (pinStatus == 0) {\n          pinStatus = 0;\n        }\n        else {\n          pinStatus = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinIndex]);\n          if (pinStatus == 1) {\n            pinStatus = 0;\n          }\n          else {\n            pinStatus = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinIndex],&DAT_0800a69c);\n            if (pinStatus == 0) {\n              pinStatus = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinIndex],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      pinStatus = 0;\n    }\n    if (pinStatus != 0) {\n      setPinModeCallback(pinIndex,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_i2c_controller_08002a26(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_pin_modes_08000a64",
                "iVar1": "pinStatus",
                "uVar2": "pinIndex"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "FUN_08002a26",
                "setPinModeCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_pins_08000aec",
            "code": "\nvoid initializePins_08000aec(void)\n\n{\n  bool isPinValid;\n  int pinValue;\n  uint pinIndex;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    disableI2CPins();\n  }\n  for (pinIndex = 0; pinIndex < 5; pinIndex = pinIndex + 1 & 0xff) {\n    (&DAT_200001e8)[pinIndex] = 0;\n    (&DAT_20000174)[pinIndex] = 0;\n    (&DAT_20000180)[pinIndex] = 0;\n  }\n  for (pinIndex = 0; pinIndex < 0x3c; pinIndex = pinIndex + 1 & 0xff) {\n    if ((pinIndex - 0x2e & 0xff) < 0xe) {\n      if (pinIndex < 0x3c) {\n        pinValue = (int)(char)(&DAT_0800a908)[pinIndex];\n      }\n      else {\n        pinValue = -1;\n      }\n      pinValue = pinNametoDigitalPin(pinValue);\n      if (pinValue == 0) {\n        isPinValid = false;\n      }\n      else {\n        if (pinIndex < 0x3c) {\n          pinValue = (int)(char)(&DAT_0800a908)[pinIndex];\n        }\n        else {\n          pinValue = -1;\n        }\n        pinValue = pinNametoDigitalPin(pinValue);\n        if (pinValue == 1) {\n          isPinValid = false;\n        }\n        else {\n          isPinValid = true;\n        }\n      }\n    }\n    else {\n      isPinValid = false;\n    }\n    if (isPinValid) {\n      setPinModeCallback(pinIndex,2);\n    }\n    else {\n      if ((((pinIndex < 0x3c) && ((&DAT_0800a908)[pinIndex] != -1)) &&\n          (pinValue = pinNametoDigitalPin(), pinValue != 0)) &&\n         (pinValue = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinIndex]), pinValue != 1)) {\n        isPinValid = true;\n      }\n      if (isPinValid) {\n        setPinModeCallback(pinIndex,1);\n      }\n    }\n    (&DAT_200001f0)[pinIndex] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_pins_08000aec",
                "bVar1": "isPinValid",
                "iVar2": "pinValue",
                "uVar3": "pinIndex"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinNametoDigitalPin",
                "disableI2CPins",
                "setPinModeCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "send_digital_port_08000be8",
            "code": "\nvoid send_digital_port_08000be8(int offset,uint mask,int condition,undefined4 param)\n\n{\n  undefined1 *data_ptr_1;\n  undefined1 *data_ptr_2;\n  \n  data_ptr_1 = &DAT_20000174;\n  data_ptr_2 = (undefined1 *)((byte)(&DAT_20000174)[offset] & mask);\n  if ((condition != 0) ||\n     (data_ptr_1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[offset], data_ptr_2 != data_ptr_1)) {\n    send_digital_port_08000be8_with_offset_08002efe(&DAT_200003d4,offset,data_ptr_2,data_ptr_1,param);\n    (&DAT_20000180)[offset] = (char)data_ptr_2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "send_digital_port_08000be8",
                "param_1": "offset",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "param",
                "puVar1": "data_ptr_1",
                "puVar2": "data_ptr_2"
            },
            "calling": [
                "checkDigitalInputs"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "set_output_ports_based_on_conditions_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid setOutputPortsBasedOnConditions_08000ef8(void)\n\n{\n  byte byte1;\n  int pinValue;\n  bool bool1;\n  byte bool2;\n  \n  byte1 = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool2 = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(3);\n      if (pinValue == 1) {\n        bool2 = 0;\n      }\n      else if ((byte1 & 1) == 0) {\n        bool2 = 0;\n      }\n      else {\n        pinValue = digitalRead(0);\n        if (pinValue == 0) {\n          bool2 = 0;\n        }\n        else {\n          bool2 = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(2);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 2) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(1);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(10);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 4) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(2);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x13);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 8) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(3);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x15);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x10) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(4);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x14);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x20) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(5);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1a);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x40) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(6);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(8);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x80) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(7);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x80;\n    }\n    outputPort(0,bool2);\n  }\n  byte1 = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool2 = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(9);\n      if (pinValue == 1) {\n        bool2 = 0;\n      }\n      else if ((byte1 & 1) == 0) {\n        bool2 = 0;\n      }\n      else {\n        pinValue = digitalRead(8);\n        if (pinValue == 0) {\n          bool2 = 0;\n        }\n        else {\n          bool2 = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x27);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 2) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(9);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x16);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 4) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(10);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(7);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 8) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0xb);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(6);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x10) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0xc);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(5);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x20) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0xd);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x19);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x40) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0xe);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x18);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x80) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0xf);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x80;\n    }\n    outputPort(1,bool2,0);\n  }\n  byte1 = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool2 = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2a);\n      if (pinValue == 1) {\n        bool2 = 0;\n      }\n      else if ((byte1 & 1) == 0) {\n        bool2 = 0;\n      }\n      else {\n        pinValue = digitalRead(0x10);\n        if (pinValue == 0) {\n          bool2 = 0;\n        }\n        else {\n          bool2 = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2c);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 2) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x11);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xd);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 8) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x13);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xe);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x10) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x14);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xf);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x20) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x15);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x17);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x40) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x16);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2d);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x80) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x17);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x80;\n    }\n    outputPort(2,bool2,0);\n  }\n  byte1 = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool2 = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2e);\n      if (pinValue == 1) {\n        bool2 = 0;\n      }\n      else if ((byte1 & 1) == 0) {\n        bool2 = 0;\n      }\n      else {\n        pinValue = digitalRead(0x18);\n        if (pinValue == 0) {\n          bool2 = 0;\n        }\n        else {\n          bool2 = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2f);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 2) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x19);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x30);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 4) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x1a);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x31);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 8) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x1b);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x22);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x10) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x1c);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x23);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x20) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x1d);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2b);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x40) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x1e);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x32);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x80) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x1f);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x80;\n    }\n    outputPort(3,bool2,0);\n  }\n  byte1 = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool2 = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x29);\n      if (pinValue == 1) {\n        bool2 = 0;\n      }\n      else if ((byte1 & 1) == 0) {\n        bool2 = 0;\n      }\n      else {\n        pinValue = digitalRead(0x20);\n        if (pinValue == 0) {\n          bool2 = 0;\n        }\n        else {\n          bool2 = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x28);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 2) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x21);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x26);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 4) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x22);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x25);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 8) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x23);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xc);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x10) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x24);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xb);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x20) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x25);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1c);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x40) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x26);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      bool1 = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1b);\n      if (pinValue == 1) {\n        bool1 = false;\n      }\n      else if ((byte1 & 0x80) == 0) {\n        bool1 = false;\n      }\n      else {\n        pinValue = digitalRead(0x27);\n        if (pinValue == 0) {\n          bool1 = false;\n        }\n        else {\n          bool1 = true;\n        }\n      }\n    }\n    if (bool1) {\n      bool2 = bool2 | 0x80;\n    }\n    outputPort(4,bool2,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "set_output_ports_based_on_conditions_08000ef8",
                "bVar1": "byte1",
                "bVar3": "bool1",
                "bVar4": "bool2",
                "iVar2": "pinValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_device_08001b48",
            "code": "\nvoid initializeDevice_08001b48(void)\n\n{\n  setFirmwareNameAndVersion\n            (&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",2,\n             5);\n  updateData(&DAT_200003d4,0xe0,0x8000215);\n  updateData(&DAT_200003d4,0x90,address2);\n  updateData(&DAT_200003d4,0xc0,0x8000489);\n  updateData(&DAT_200003d4,0xd0,address4);\n  updateData(&DAT_200003d4,0xf4,0x80005f9);\n  updateData(&DAT_200003d4,0xf5,address6);\n  setDatValue(&DAT_200003d4,0xf0,0x8001cd1);\n  updateDataIfEqual(&DAT_200003d4,0xff,0x8000aed);\n  initializeAndBlinkDevice(&DAT_200003d4,0xe100);\n  resetCallback();\n  startForkServer(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_device_08001b48",
                "update_data_08002f2c": "updateData",
                "&LAB_080002ec_1": "address2",
                "&LAB_08000c18_1": "address4",
                "&LAB_080001a8_1": "address6",
                "set_dat_value_08002f94": "setDatValue",
                "update_data_if_equal_08002f84": "updateDataIfEqual",
                "initialize_and_blink_device_08003048": "initializeAndBlinkDevice",
                "systemResetCallback": "resetCallback",
                "startForkserver": "startForkServer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "FUN_08002f2c",
                "FUN_08003048",
                "FUN_08002f84",
                "FUN_08002f94",
                "startForkserver",
                "setFirmwareNameAndVersion",
                "systemResetCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "write_data_to_i2_c_slave_08001bf8",
            "code": "\nvoid write_data_to_i2_c_slave_08001bf8(undefined4 data_pointer,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  write_data_to_i2_c_slave_08001bf8_0800288c(&DAT_20000314,data_pointer,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "write_data_to_i2_c_slave_08001bf8",
                "param_1": "data_pointer"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "get_next_byte_from_data_08001c08",
            "code": "\nundefined get_next_byte_from_data_08001c08(void)\n\n{\n  undefined next_byte;\n  \n  next_byte = get_next_byte_08002720(&DAT_20000314);\n  return next_byte;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "get_next_byte_from_data_08001c08",
                "uVar1": "next_byte"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "extract_data_from_i2_c_device_08001c18",
            "code": "\nvoid extractDataFromI2CDevice_08001c18(undefined4 deviceAddress,uint registerAddress,int numBytes,undefined4 dataToWrite)\n\n{\n  undefined receivedData;\n  int receivedBytes;\n  int remainingBytes;\n  bool isDataAvailable;\n  \n  if (registerAddress == 0xffffffff) {\n    registerAddress = 0;\n  }\n  else {\n    beginTransmission(&DAT_20000314,deviceAddress);\n    wireWrite(registerAddress & 0xff);\n    check_and_write_data_08002a58(&DAT_20000314,dataToWrite);\n  }\n  requestFrom(&DAT_20000314,deviceAddress,numBytes);\n  receivedBytes = calculate_difference_0800270c(&DAT_20000314);\n  if (numBytes < receivedBytes) {\n    send_string_from_offset_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    receivedBytes = calculate_difference_0800270c(&DAT_20000314);\n    if (receivedBytes < numBytes) {\n      send_string_from_offset_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)deviceAddress;\n  DAT_20000131 = (undefined)registerAddress;\n  receivedBytes = 0;\n  while( true ) {\n    if (receivedBytes < numBytes) {\n      remainingBytes = calculate_difference_0800270c(&DAT_20000314);\n      if (remainingBytes == 0) {\n        isDataAvailable = false;\n      }\n      else {\n        isDataAvailable = true;\n      }\n    }\n    else {\n      isDataAvailable = false;\n    }\n    if (!isDataAvailable) break;\n    receivedData = wireRead();\n    (&DAT_20000132)[receivedBytes] = receivedData;\n    receivedBytes = receivedBytes + 1;\n  }\n  send_sysex_with_offset_08002f0a(&DAT_200003d4,0x77,numBytes + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "extract_data_from_i2_c_device_08001c18",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "numBytes",
                "param_4": "dataToWrite",
                "uVar1": "receivedData",
                "iVar2": "receivedBytes",
                "iVar3": "remainingBytes",
                "bVar4": "isDataAvailable"
            },
            "calling": [
                "loop",
                "sysexCallback"
            ],
            "called": [
                "FUN_08002a58",
                "requestFrom",
                "FUN_08002f14",
                "FUN_0800270c",
                "beginTransmission",
                "FUN_08002f0a",
                "wireRead",
                "wireWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "perform_action_08001cd0",
            "code": "\nvoid performAction_08001cd0(undefined4 actionType,int length,byte *data,undefined4 unused)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 returnValue;\n  byte byte4;\n  char char1;\n  int int1;\n  int int2;\n  uint uint1;\n  uint uint2;\n  int int3;\n  bool boolean;\n  \n  switch(actionType) {\n  case 0x69:\n    execute_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_08002f1e(&DAT_200003d4,0x6a);\n    for (uint1 = 0; uint1 < 0x3c; uint1 = uint1 + 1 & 0xff) {\n      uint2 = uint1 - 0x2e & 0xff;\n      if (uint2 < 0xe) {\n        if (uint1 < 0x3c) {\n          int1 = (int)(char)(&DAT_0800a908)[uint1];\n        }\n        else {\n          int1 = -1;\n        }\n        int1 = pinNametoDigitalPin(int1);\n        if (int1 == 0) {\n          uint2 = 0x7f;\n        }\n        else {\n          if (uint1 < 0x3c) {\n            int1 = (int)(char)(&DAT_0800a908)[uint1];\n          }\n          else {\n            int1 = -1;\n          }\n          int1 = pinNametoDigitalPin(int1);\n          if (int1 == 1) {\n            uint2 = 0x7f;\n          }\n        }\n      }\n      else {\n        uint2 = 0x7f;\n      }\n      execute_function_08002f1e(&DAT_200003d4,uint2);\n    }\n    execute_function_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_08002f1e(&DAT_200003d4,0x6c);\n    for (uint1 = 0; uint1 < 0x3c; uint1 = uint1 + 1 & 0xff) {\n      if (uint1 < 0x3c) {\n        if ((&DAT_0800a908)[uint1] == -1) {\n          boolean = false;\n        }\n        else {\n          int1 = pinNametoDigitalPin();\n          if (int1 == 0) {\n            boolean = false;\n          }\n          else {\n            int1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uint1]);\n            if (int1 == 1) {\n              boolean = false;\n            }\n            else {\n              boolean = true;\n            }\n          }\n        }\n      }\n      else {\n        boolean = false;\n      }\n      if (boolean) {\n        execute_function_08002f1e(&DAT_200003d4,0);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,0xb);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,1);\n      }\n      if ((uint1 - 0x2e & 0xff) < 0xe) {\n        if (uint1 < 0x3c) {\n          int1 = (int)(char)(&DAT_0800a908)[uint1];\n        }\n        else {\n          int1 = -1;\n        }\n        int1 = pinNametoDigitalPin(int1);\n        if (int1 == 0) {\n          boolean = false;\n        }\n        else {\n          if (uint1 < 0x3c) {\n            int1 = (int)(char)(&DAT_0800a908)[uint1];\n          }\n          else {\n            int1 = -1;\n          }\n          int1 = pinNametoDigitalPin(int1);\n          if (int1 == 1) {\n            boolean = false;\n          }\n          else {\n            boolean = true;\n          }\n        }\n      }\n      else {\n        boolean = false;\n      }\n      if (boolean) {\n        execute_function_08002f1e(&DAT_200003d4,2);\n        execute_function_08002f1e(&DAT_200003d4,10);\n      }\n      if (uint1 < 0x3c) {\n        if ((&DAT_0800a908)[uint1] == -1) {\n          int1 = 0;\n        }\n        else {\n          int1 = pinNametoDigitalPin();\n          if (int1 == 0) {\n            int1 = 0;\n          }\n          else {\n            int1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uint1]);\n            if (int1 == 1) {\n              int1 = 0;\n            }\n            else {\n              int1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[uint1],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        int1 = 0;\n      }\n      if (int1 != 0) {\n        execute_function_08002f1e(&DAT_200003d4,3);\n        execute_function_08002f1e(&DAT_200003d4,8);\n      }\n      if (uint1 < 0x3c) {\n        if ((&DAT_0800a908)[uint1] == -1) {\n          boolean = false;\n        }\n        else {\n          int1 = pinNametoDigitalPin();\n          if (int1 == 0) {\n            boolean = false;\n          }\n          else {\n            int1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uint1]);\n            if (int1 == 1) {\n              boolean = false;\n            }\n            else {\n              boolean = true;\n            }\n          }\n        }\n      }\n      else {\n        boolean = false;\n      }\n      if (boolean) {\n        execute_function_08002f1e(&DAT_200003d4,4);\n        execute_function_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (uint1 < 0x3c) {\n        if ((&DAT_0800a908)[uint1] == -1) {\n          int1 = 0;\n        }\n        else {\n          int1 = pinNametoDigitalPin();\n          if (int1 == 0) {\n            int1 = 0;\n          }\n          else {\n            int1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uint1]);\n            if (int1 == 1) {\n              int1 = 0;\n            }\n            else {\n              int1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[uint1],&DAT_0800a69c);\n              if (int1 == 0) {\n                int1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[uint1],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        int1 = 0;\n      }\n      if (int1 != 0) {\n        execute_function_08002f1e(&DAT_200003d4,6);\n        execute_function_08002f1e(&DAT_200003d4,1);\n      }\n      execute_function_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_function_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (length != 0) {\n      byte1 = *data;\n      execute_function_08002f1e(&DAT_200003d4,0xf0);\n      execute_function_08002f1e(&DAT_200003d4,0x6e);\n      execute_function_08002f1e(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        returnValue = getPinMode(&DAT_200003d4,byte1);\n        execute_function_08002f1e(&DAT_200003d4,returnValue);\n        uint1 = getPinState(&DAT_200003d4,byte1);\n        execute_function_08002f1e(&DAT_200003d4,uint1 & 0x7f);\n        uint1 = getPinState(&DAT_200003d4,byte1);\n        if ((uint1 & 0xff80) != 0) {\n          int1 = getPinState(&DAT_200003d4,byte1);\n          execute_function_08002f1e(&DAT_200003d4,(uint)(int1 << 0x12) >> 0x19);\n        }\n        uint1 = getPinState(&DAT_200003d4,byte1);\n        if ((uint1 & 0xc000) != 0) {\n          int1 = getPinState(&DAT_200003d4,byte1);\n          execute_function_08002f1e(&DAT_200003d4,(uint)(int1 << 0xb) >> 0x19);\n        }\n      }\n      execute_function_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < length) {\n      uint1 = (uint)data[1];\n      if (2 < length) {\n        uint1 = uint1 | (uint)data[2] << 7;\n      }\n      if (3 < length) {\n        uint1 = uint1 | (uint)data[3] << 0xe;\n      }\n      analogWriteCallback(*data,uint1);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < length) {\n      uint1 = (uint)*data;\n      byte1 = data[1];\n      byte4 = data[2];\n      byte2 = data[3];\n      byte3 = data[4];\n      if (uint1 < 0x3c) {\n        if ((&DAT_0800a908)[uint1] == -1) {\n          boolean = false;\n        }\n        else {\n          int1 = pinNametoDigitalPin();\n          if (int1 == 0) {\n            boolean = false;\n          }\n          else {\n            int1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[uint1]);\n            if (int1 == 1) {\n              boolean = false;\n            }\n            else {\n              boolean = true;\n            }\n          }\n        }\n      }\n      else {\n        boolean = false;\n      }\n      if (boolean) {\n        if ((byte)(&DAT_200001f0)[uint1] < 0xc) {\n          int1 = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[uint1] * 3);\n        }\n        else {\n          int1 = 0;\n        }\n        if (int1 != 0) {\n          detachServo(uint1);\n        }\n        attachServo(uint1,(uint)byte1 + (uint)byte4 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        setPinModeCallback(uint1,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = data[1];\n    byte4 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      send_string_from_offset_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byte4,byte1,unused);\n      return;\n    }\n    byte2 = *data;\n    boolean = (byte1 & 0x40) == 0;\n    if (byte4 < 0x19) {\n      switch(byte4) {\n      case 0:\n        beginTransmission(&DAT_20000314,byte2);\n        for (uint1 = 2; (int)uint1 < length; uint1 = uint1 + 2 & 0xff) {\n          wireWrite(data[uint1 + 1] * -0x80 + data[uint1]);\n        }\n        endTransmission(&DAT_20000314);\n        return;\n      case 8:\n        if (length == 6) {\n          int1 = (uint)data[2] + (uint)data[3] * 0x80;\n          char1 = data[4] + data[5] * -0x80;\n        }\n        else {\n          char1 = data[2] + data[3] * -0x80;\n          int1 = -1;\n        }\n        readAndReportData(byte2,int1,char1);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (length == 6) {\n            int1 = (uint)data[2] + (uint)data[3] * 0x80;\n            char1 = data[4] + data[5] * -0x80;\n          }\n          else {\n            char1 = data[2] + data[3] * -0x80;\n            int1 = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          int2 = (int)DAT_20000004;\n          int3 = int2 * 0xc;\n          (&DAT_20000188)[int3] = byte2;\n          (&DAT_2000018c)[int2 * 3] = int1;\n          (&DAT_20000190)[int3] = char1;\n          (&DAT_20000191)[int3] = boolean;\n          return;\n        }\n        send_string_from_offset_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,boolean,unused);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (uint1 = 0; int1 = DAT_20000004 + 1, (int)uint1 < int1; uint1 = uint1 + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[uint1 * 0xc]) goto LAB_08001e66;\n      }\n      uint1 = 0;\nLAB_08001e66:\n      for (; (int)uint1 < int1; uint1 = uint1 + 1 & 0xff) {\n        if (uint1 < 8) {\n          int2 = (uint1 + 1) * 0xc;\n          int3 = uint1 * 0xc;\n          (&DAT_20000188)[int3] = (&DAT_20000188)[int2];\n          (&DAT_2000018c)[uint1 * 3] = (&DAT_2000018c)[(uint1 + 1) * 3];\n          (&DAT_20000190)[int3] = (&DAT_20000190)[int2];\n          (&DAT_20000191)[int3] = (&DAT_20000191)[int2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    int1 = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < length) && (int1 != 0)) {\n      DAT_2000012c = int1;\n    }\n    if (DAT_20000170 == '\\0') {\n      enableI2CPins();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < length) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "perform_action_08001cd0",
                "param_1": "actionType",
                "param_2": "length",
                "param_3": "data",
                "param_4": "unused",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "uVar4": "returnValue",
                "bVar5": "byte4",
                "cVar6": "char1",
                "iVar7": "int1",
                "iVar8": "int2",
                "uVar9": "uint1",
                "uVar10": "uint2",
                "iVar11": "int3",
                "bVar12": "boolean"
            },
            "calling": [],
            "called": [
                "pin_in_pinmap",
                "FUN_08002f14",
                "readAndReportData",
                "attachServo",
                "pinNametoDigitalPin",
                "FUN_08002f1e",
                "endTransmission",
                "getPinState",
                "enableI2CPins",
                "analogWriteCallback",
                "beginTransmission",
                "getPinMode",
                "attached",
                "setPinModeCallback",
                "wireWrite",
                "detachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_digital_inputs_080022f8",
            "code": "\nvoid processDigitalInputs_080022f8(void)\n\n{\n  bool isDigitalPinEnabled;\n  int pinValue;\n  undefined4 analogValue;\n  uint loopCounter;\n  uint index;\n  \n  checkDigitalInputs();\n  while (pinValue = execute_function_from_pointer_08002ec4(&DAT_200003d4), pinValue != 0) {\n    processInput(&DAT_200003d4);\n  }\n  DAT_20000118 = millis();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (loopCounter = 0; loopCounter < 0x3c; loopCounter = loopCounter + 1 & 0xff) {\n      index = loopCounter - 0x2e & 0xff;\n      if (index < 0xe) {\n        if (loopCounter < 0x3c) {\n          pinValue = (int)(char)(&DAT_0800a908)[loopCounter];\n        }\n        else {\n          pinValue = -1;\n        }\n        pinValue = pinNametoDigitalPin(pinValue);\n        if (pinValue == 0) {\n          isDigitalPinEnabled = false;\n        }\n        else {\n          if (loopCounter < 0x3c) {\n            pinValue = (int)(char)(&DAT_0800a908)[loopCounter];\n          }\n          else {\n            pinValue = -1;\n          }\n          pinValue = pinNametoDigitalPin(pinValue);\n          if (pinValue == 1) {\n            isDigitalPinEnabled = false;\n          }\n          else {\n            pinValue = getPinMode(&DAT_200003d4,loopCounter);\n            if (pinValue == 2) {\n              isDigitalPinEnabled = true;\n            }\n            else {\n              isDigitalPinEnabled = false;\n            }\n          }\n        }\n      }\n      else {\n        isDigitalPinEnabled = false;\n      }\n      if ((isDigitalPinEnabled) && ((DAT_20000114 >> index & 1U) != 0)) {\n        analogValue = analogRead(index);\n        send_analog_data_08002ef2(&DAT_200003d4,index,analogValue);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (loopCounter = 0; (int)loopCounter < DAT_20000004 + 1; loopCounter = loopCounter + 1 & 0xff) {\n        pinValue = loopCounter * 0xc;\n        readAndReportData((&DAT_20000188)[pinValue],(&DAT_2000018c)[loopCounter * 3],(&DAT_20000190)[pinValue],\n                          (&DAT_20000191)[pinValue]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_digital_inputs_080022f8",
                "bVar1": "isDigitalPinEnabled",
                "iVar2": "pinValue",
                "uVar3": "analogValue",
                "uVar4": "loopCounter",
                "uVar5": "index"
            },
            "calling": [
                "main"
            ],
            "called": [
                "processInput",
                "analogRead",
                "readAndReportData",
                "FUN_08002ec4",
                "pinNametoDigitalPin",
                "millis",
                "checkDigitalInputs",
                "getPinMode",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_data_category_08002400",
            "code": "\nundefined4 check_data_category_08002400(int input_value)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(input_value * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_data_category_08002400",
                "param_1": "input_value",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_080025ac",
                "detach"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_timer_pulse_0800242c",
            "code": "\nvoid initializeTimerPulse_0800242c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initTimerPulse(param1,60000,0x5dc,&callbackFunction,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_timer_pulse_0800242c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "TimerPulseInit": "initTimerPulse",
                "LAB_08002444_1": "callbackFunction"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "TimerPulseInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "deinitialize_timer_pulse_08002578",
            "code": "\nvoid deinitializeTimerPulse_08002578(void)\n\n{\n  TimerPulseDeinit();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "deinitialize_timer_pulse_08002578"
            },
            "calling": [
                "detach"
            ],
            "called": [
                "TimerPulseDeinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "init_data_08002580",
            "code": "\nvoid initData_08002580(byte *output)\n\n{\n  char nextValue;\n  uint dataSize;\n  \n  dataSize = (uint)DAT_20000250;\n  if (0xb < dataSize) {\n    *output = 0xff;\n    return;\n  }\n  nextValue = DAT_20000250 + 1;\n  *output = DAT_20000250;\n  DAT_20000250 = nextValue;\n  *(undefined4 *)(&DAT_2000025c + dataSize * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "init_data_08002580",
                "param_1": "output",
                "cVar1": "nextValue",
                "uVar2": "dataSize"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "update_pin_mode_080025ac",
            "code": "\nbyte updatePinMode_080025ac(byte *data,uint pin,int value1,int value2)\n\n{\n  uint updatedBits;\n  uint originalBits;\n  uint index;\n  int offset;\n  \n  if (*data < 0xc) {\n    setPinMode(pin,1,value1,*data,value2);\n    originalBits = (uint)*data;\n    updatedBits = (byte)(&DAT_20000258)[originalBits * 8] & 0xffffffc0 | pin & 0x3f;\n    (&DAT_20000258)[originalBits * 8] = (char)updatedBits;\n    offset = -value1 + 0x220;\n    if (offset < 0) {\n      offset = -value1 + 0x223;\n    }\n    data[1] = (byte)((uint)(offset << 0x16) >> 0x18);\n    offset = -value2 + 0x960;\n    if (offset < 0) {\n      offset = -value2 + 0x963;\n    }\n    data[2] = (byte)((uint)(offset << 0x16) >> 0x18);\n    index = *data / 0xc;\n    offset = checkTimerActive(index,updatedBits,originalBits,(uint)*data * -0x55555555);\n    if (offset == 0) {\n      DAT_200002fc = (undefined)index;\n      initISR();\n    }\n    (&DAT_20000258)[(uint)*data * 8] = (&DAT_20000258)[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "update_pin_mode_080025ac",
                "param_1": "data",
                "param_2": "pin",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "updatedBits",
                "uVar2": "originalBits",
                "uVar3": "index",
                "iVar4": "offset",
                "pinMode": "setPinMode",
                "isTimerActive": "checkTimerActive"
            },
            "calling": [
                "attachServo",
                "FUN_08002634"
            ],
            "called": [
                "initISR",
                "isTimerActive",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "configure_pin_mode_08002634",
            "code": "\nvoid configurePinMode_08002634(undefined4 pin1,undefined4 pin2,undefined4 constant1,undefined4 constant2)\n\n{\n  updatePinMode(pin1,pin2,0x220,0x960,constant2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "configure_pin_mode_08002634",
                "param_1": "pin1",
                "param_2": "pin2",
                "param_3": "constant1",
                "param_4": "constant2",
                "update_pin_mode_080025ac": "updatePinMode"
            },
            "calling": [
                "attachServo"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "update_timer_status_08002644",
            "code": "\nvoid updateTimerStatus_08002644(byte *data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte currentStatus;\n  uint firstByte;\n  int isActive;\n  \n  firstByte = (uint)*data;\n  currentStatus = (&DAT_20000258)[firstByte * 8];\n  (&DAT_20000258)[firstByte * 8] = currentStatus & 0xbf;\n  isActive = isTimerActive(firstByte / 0xc,param2,currentStatus & 0xbf,firstByte * -0x55555555,param4);\n  if (isActive == 0) {\n    finISR(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "update_timer_status_08002644",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "currentStatus",
                "uVar2": "firstByte",
                "iVar3": "isActive"
            },
            "calling": [
                "detachServo"
            ],
            "called": [
                "finISR",
                "isTimerActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_array_value_0800267c",
            "code": "\nvoid updateArrayValue_0800267c(byte *array,int value)\n\n{\n  int index;\n  \n  if (*array < 0xc) {\n    index = (0x88 - (char)array[1]) * 4;\n    if ((index - value == 0 || index < value) &&\n       (index = (600 - (char)array[2]) * 4,\n       value == index || value + (600 - (char)array[2]) * -4 < 0 != SBORROW4(value,index)))\n    {\n      index = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*array * 8) = index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_array_value_0800267c",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "set_mapped_microseconds_080026b0",
            "code": "\nvoid setMappedMicroseconds_080026b0(int pinNumber,int inputValue)\n\n{\n  if (inputValue < 0x220) {\n    if (inputValue < 0) {\n      inputValue = 0;\n    }\n    else if (0xb4 < inputValue) {\n      inputValue = 0xb4;\n    }\n    inputValue = mapValue(inputValue,0,0xb4,(0x88 - *(char *)(pinNumber + 1)) * 4,\n                  (600 - *(char *)(pinNumber + 2)) * 4);\n  }\n  setMicroseconds(pinNumber,inputValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "set_mapped_microseconds_080026b0",
                "param_1": "pinNumber",
                "param_2": "inputValue",
                "map": "mapValue",
                "writeMicroseconds": "setMicroseconds"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "extract_byte_080026f8",
            "code": "\nuint extractByte_080026f8(byte *byteArray)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*byteArray * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "extract_byte_080026f8",
                "param_1": "byteArray"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "get_next_byte_08002720",
            "code": "\nuint get_next_byte_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "get_next_byte_08002720",
                "uVar1": "index"
            },
            "calling": [
                "wireRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "write_data_080027f0",
            "code": "\nuint write_data_080027f0(int data_ptr,undefined4 data,uint size)\n\n{\n  int write_result;\n  uint new_data_size;\n  \n  if (DAT_200003b4 == '\\0') {\n    write_result = i2c_slave_write_IT(data_ptr + 0x14,data,size & 0xffff);\n    if (write_result == 0) {\n      return size;\n    }\n    return 0;\n  }\n  new_data_size = DAT_200003b8 + size;\n  if (DAT_200003c5 < new_data_size) {\n    if (new_data_size < 0x20) {\n      new_data_size = 0x20;\n    }\n    DAT_200003cc = realloc(DAT_200003cc,new_data_size);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)new_data_size;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(data_ptr + 4) = 1;\n    return 0;\n  }\n  memcpy((uint)DAT_200003b6 + DAT_200003cc,data,size);\n  DAT_200003b6 = DAT_200003b6 + (char)size;\n  DAT_200003b8 = DAT_200003b6;\n  return size;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "write_data_080027f0",
                "param_1": "data_ptr",
                "param_2": "data",
                "param_3": "size",
                "iVar1": "write_result",
                "uVar2": "new_data_size"
            },
            "calling": [],
            "called": [
                "memcpy",
                "realloc",
                "i2c_slave_write_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "write_data_to_i2_c_slave_0800288c",
            "code": "\nundefined4 writeDataToI2CSlave_0800288c(int slaveDeviceAddress,undefined data)\n\n{\n  undefined4 success;\n  int result;\n  uint newSize;\n  undefined byteToWrite;\n  \n  byteToWrite = data;\n  if (DAT_200003b4 == '\\0') {\n    result = i2c_slave_write_IT(slaveDeviceAddress + 0x14,&byteToWrite,1);\n    if (result == 0) {\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    newSize = DAT_200003b8 + 1;\n    if (DAT_200003c5 < newSize) {\n      if (newSize < 0x20) {\n        newSize = 0x20;\n      }\n      DAT_200003cc = realloc(DAT_200003cc,newSize);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)newSize;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(slaveDeviceAddress + 4) = 1;\n      success = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = byteToWrite;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      success = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "write_data_to_i2_c_slave_0800288c",
                "param_1": "slaveDeviceAddress",
                "param_2": "data",
                "uVar1": "success",
                "iVar2": "result",
                "uVar3": "newSize",
                "local_11": "byteToWrite"
            },
            "calling": [
                "wireWrite"
            ],
            "called": [
                "realloc",
                "i2c_slave_write_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_parameters_0800291c",
            "code": "\nvoid initializeParameters_0800291c(val4 *params)\n\n{\n  params[1] = 0;\n  params[2] = 1000;\n  *params = &PTR_FUN_0800288c_1_0800a5a0;\n  *(val *)(params + 0x1b) = 0x19;\n  *(val *)((int)params + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "params",
                "undefined": "val"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "check_and_execute_wire_function_08002948",
            "code": "\nvoid checkAndExecuteWireFunction_08002948(int condition,int value)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    TwoWire(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "check_and_execute_wire_function_08002948",
                "param_1": "condition",
                "param_2": "value"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN7TwoWire8rxBufferE"
            ],
            "called": [
                "TwoWire"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_i2_c_08002968",
            "code": "\nvoid initializeI2C_08002968(int deviceAddress,uint flags)\n\n{\n  int shiftedFlags;\n  int configAddress;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    memset(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    memset(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shiftedFlags = (flags & 0x7f) << 1;\n  *(char *)(deviceAddress + 0x10) = (char)shiftedFlags;\n  if (flags == 0x33) {\n    *(undefined *)(deviceAddress + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(deviceAddress + 0x11) = 0;\n  }\n  configAddress = deviceAddress + 0x14;\n  i2c_custom_init(configAddress,100000,0x4000,shiftedFlags,*(undefined *)(deviceAddress + 0x11));\n  if (*(char *)(deviceAddress + 0x11) == '\\0') {\n    i2c_attachSlaveTxEvent(configAddress,&LAB_08002774_1);\n    i2c_attachSlaveRxEvent(configAddress,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_i2_c_08002968",
                "param_1": "deviceAddress",
                "param_2": "flags",
                "iVar1": "shiftedFlags",
                "iVar2": "configAddress"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "i2c_attachSlaveRxEvent",
                "i2c_custom_init",
                "memset",
                "i2c_attachSlaveTxEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_i2c_controller_08002a1c",
            "code": "\nvoid initialize_i2c_controller_08002a1c(undefined4 config_param1,undefined config_param2,undefined4 config_param3,undefined4 config_param4)\n\n{\n  initialize_i2_c_08002968(config_param1,config_param2,config_param3,config_param4,config_param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_i2c_controller_08002a1c",
                "param_1": "config_param1",
                "param_2": "config_param2",
                "param_3": "config_param3",
                "param_4": "config_param4"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_i2c_controller_08002a26",
            "code": "\nvoid initializeI2cController_08002a26(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_i2c_controller_08002a1c(param1,0x33,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_i2c_controller_08002a26",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "enableI2CPins"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 param,int value)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(value << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "param",
                "param_2": "value"
            },
            "calling": [
                "readAndReportData",
                "FUN_08002b68",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "check_and_write_data_08002a58",
            "code": "\nundefined4 checkAndWriteData_08002a58(int dataPointer)\n\n{\n  int writeResult;\n  undefined4 returnCode;\n  \n  if (*(char *)(dataPointer + 0x11) == '\\0') {\n    returnCode = 4;\n  }\n  else {\n    writeResult = i2c_master_write(dataPointer + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (writeResult == 0) {\n      returnCode = 0;\n    }\n    else if (writeResult == 1) {\n      returnCode = 1;\n    }\n    else {\n      returnCode = 4;\n    }\n    if (DAT_200003cc != 0) {\n      memset(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return returnCode;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "check_and_write_data_08002a58",
                "param_1": "dataPointer",
                "iVar1": "writeResult",
                "uVar2": "returnCode"
            },
            "calling": [
                "readAndReportData",
                "FUN_08002b68",
                "endTransmission"
            ],
            "called": [
                "i2c_master_write",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "write_data_08002ac0",
            "code": "\nvoid writeData_08002ac0(undefined4 data,undefined4 unused,undefined4 size,undefined4 buffer)\n\n{\n  checkAndWriteData(data,1,size,buffer,buffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "write_data_08002ac0",
                "param_1": "data",
                "param_2": "unused",
                "param_3": "size",
                "param_4": "buffer",
                "check_and_write_data_08002a58": "checkAndWriteData"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "resize_memory_08002acc",
            "code": "\nvoid resizeMemory_08002acc(uint requestedSize,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  if (DAT_200003c4 < requestedSize) {\n    if (requestedSize < 0x20) {\n      requestedSize = 0x20;\n    }\n    DAT_200003c8 = realloc(DAT_200003c8,requestedSize,param3,(uint)DAT_200003c4,param4);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)requestedSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "resize_memory_08002acc",
                "param_1": "requestedSize",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "read_and_process_i2_c_data_08002b68",
            "code": "\nundefined4\nreadAndProcessI2CData_08002b68(undefined4 *device,uint address,undefined4 dataBuffer,uint dataBufferSize,byte numBytes)\n\n{\n  int result;\n  uint numBytesRemaining;\n  uint actualDataSize;\n  \n  numBytesRemaining = (uint)numBytes;\n  if (*(char *)((int)device + 0x11) == '\\0') {\n    return 0;\n  }\n  actualDataSize = dataBufferSize;\n  allocateRxBuffer(dataBuffer);\n  if (DAT_200003c8 != 0) {\n    if (numBytesRemaining != 0) {\n      beginTransmission(device,address);\n      if (3 < numBytesRemaining) {\n        numBytesRemaining = 3;\n      }\n      while( true ) {\n        if (numBytesRemaining == 0) break;\n        (**(code **)*device)(device,dataBufferSize >> ((numBytesRemaining - 1 & 0x1f) << 3) & 0xff);\n        numBytesRemaining = numBytesRemaining - 1 & 0xff;\n      }\n      check_and_write_data_08002a58(device,0);\n    }\n    result = i2c_master_read(device + 5,(address & 0x7f) << 1,DAT_200003c8,dataBuffer,actualDataSize);\n    if (result != 0) {\n      dataBuffer = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)dataBuffer;\n    return dataBuffer;\n  }\n  device[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "read_and_process_i2_c_data_08002b68",
                "param_1": "device",
                "param_2": "address",
                "param_3": "dataBuffer",
                "param_4": "dataBufferSize",
                "param_5": "numBytes",
                "iVar1": "result",
                "uVar2": "numBytesRemaining",
                "uVar3": "actualDataSize"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "beginTransmission",
                "i2c_master_read",
                "allocateRxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "process_i2c_data_08002c00",
            "code": "\nvoid process_i2c_data_08002c00(void)\n\n{\n  read_and_process_i2c_data_08002c00();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "process_i2c_data_08002c00",
                "read_and_process_i2_c_data_08002b68": "read_and_process_i2c_data"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "initialize_i2c_data_processing_08002c14",
            "code": "\nvoid initialize_i2c_data_processing_08002c14(void)\n\n{\n  process_i2c_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "initialize_i2c_data_processing_08002c14",
                "process_i2c_data_08002c00": "process_i2c_data"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "execute_wire_function_08002c1e",
            "code": "\nvoid execute_wire_function_08002c1e(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  check_and_execute_wire_function_08002c1e_08002948(1,0xffff,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "execute_wire_function_08002c1e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 callbackFunc,undefined4 param1,undefined4 param2,undefined4 extraParam)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(param1,param2,param2,DAT_200005d4,extraParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "callbackFunc",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "extraParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_device_08002ce0",
            "code": "\nint initializeDevice_08002ce0(int deviceAddress)\n\n{\n  int offset;\n  \n  FirmataMarshaller(deviceAddress + 0x40);\n  offset = deviceAddress + 0x44;\n  FirmataParser(offset,deviceAddress,0x40);\n  *(undefined *)(deviceAddress + 0xc4) = 0;\n  *(undefined4 *)(deviceAddress + 200) = 0;\n  *(undefined *)(deviceAddress + 0x1f8) = 0;\n  setMemoryValues(offset,0xe0,staticAnalogCallback + 1,0);\n  setMemoryValues(offset,0x90,&analogCallbackAddress,0);\n  setMemoryValues(offset,0xc0,&callbackAddress1,0);\n  setMemoryValues(offset,0xd0,&callbackAddress2,0);\n  setMemoryValues(offset,0xf4,&callbackAddress3,0);\n  setMemoryValues(offset,0xf5,&callbackAddress4,0);\n  updateDataIfValueMatches(offset,0x71,&dataMatchAddress,0);\n  attachDevice(offset,0xf0,&attachAddress,0);\n  updateParameters(offset,0x79,&parameterAddress1,deviceAddress);\n  updateParametersWithAddressMatch(offset,0xf9,&parameterAddress2,deviceAddress);\n  updateParametersWithAddressMatch(offset,0xff,&parameterAddress3,0);\n  return deviceAddress;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_device_08002ce0",
                "param_1": "deviceAddress",
                "iVar1": "offset",
                "set_memory_values_08003306": "setMemoryValues",
                "update_data_if_value_matches_08003366": "updateDataIfValueMatches",
                "attach": "attachDevice",
                "update_parameters_08003346": "updateParameters",
                "update_parameters_08003350": "updateParametersWithAddressMatch",
                "LAB_08002c40_1": "analogCallbackAddress",
                "LAB_08002c7c_1": "callbackAddress1",
                "LAB_08002c90_1": "callbackAddress2",
                "LAB_08002c54_1": "callbackAddress3",
                "LAB_08002c68_1": "callbackAddress4",
                "LAB_08002ca4_1": "dataMatchAddress",
                "LAB_08002cb8_1": "attachAddress",
                "LAB_08002e1a_1": "parameterAddress1",
                "LAB_08002dea_1": "parameterAddress2",
                "LAB_08002cd0_1": "parameterAddress3"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003350",
                "FirmataMarshaller",
                "FUN_08003346",
                "FUN_08003306",
                "FirmataParser",
                "FUN_08003366",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "process_firmware_update_08002dbc",
            "code": "\nvoid processFirmwareUpdate_08002dbc(int status,int flag)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    FirmataClass(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "process_firmware_update_08002dbc",
                "param_1": "status",
                "param_2": "flag"
            },
            "calling": [],
            "called": [
                "FirmataClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "send_version_plus_offset_08002ddc",
            "code": "\nvoid send_version_plus_offset_08002ddc(int input_parameter,undefined4 unused_parameter_1,undefined4 unused_parameter_2,undefined4 unused_parameter_3)\n\n{\n  sendVersion(input_parameter + 0x40,2,5,unused_parameter_3,unused_parameter_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "send_version_plus_offset_08002ddc",
                "param_1": "input_parameter",
                "param_2": "unused_parameter_1",
                "param_3": "unused_parameter_2",
                "param_4": "unused_parameter_3"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "sendVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "send_firmware_version_08002df6",
            "code": "\nvoid send_firmware_version_08002df6(int device_address)\n\n{\n  undefined *firmware_data;\n  \n  if (*(byte *)(device_address + 0xc4) == 0) {\n    return;\n  }\n  firmware_data = *(undefined **)(device_address + 200);\n  sendFirmwareVersion(device_address + 0x40,*firmware_data,firmware_data[1],*(byte *)(device_address + 0xc4) - 2,firmware_data + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "send_firmware_version_08002df6",
                "param_1": "device_address",
                "puVar1": "firmware_data"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "sendFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "initialize_device_08002e26",
            "code": "\nvoid initializeDevice_08002e26(int deviceAddress,undefined4 configValue)\n\n{\n  *(undefined4 *)(deviceAddress + 0xc0) = configValue;\n  copyDataToBuffer(deviceAddress + 0x40);\n  printDeviceVersion(deviceAddress);\n  printDeviceFirmwareVersion(deviceAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "initialize_device_08002e26",
                "param_1": "deviceAddress",
                "param_2": "configValue",
                "copy_value_to_pointer_08003154": "copyDataToBuffer",
                "printVersion": "printDeviceVersion",
                "printFirmwareVersion": "printDeviceFirmwareVersion"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "printFirmwareVersion",
                "printVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_file_name_08002e44",
            "code": "\nvoid extractFileName_08002e44(int fileData,int filePath,undefined char1,undefined char2)\n\n{\n  byte byteValue;\n  char fileNameLength;\n  int cppOccurrenceIndex;\n  int lastSlashIndex;\n  undefined *allocatedMemory;\n  \n  cppOccurrenceIndex = strstr(filePath,\".cpp\");\n  lastSlashIndex = strrchr(filePath,0x2f);\n  if (lastSlashIndex == 0) {\n    lastSlashIndex = strrchr(filePath,0x5c);\n  }\n  if (lastSlashIndex != 0) {\n    filePath = lastSlashIndex + 1;\n  }\n  if (cppOccurrenceIndex == 0) {\n    fileNameLength = strlen(filePath);\n    *(char *)(fileData + 0xc4) = fileNameLength + '\\x02';\n  }\n  else {\n    *(char *)(fileData + 0xc4) = ((char)cppOccurrenceIndex - (char)filePath) + '\\x02';\n  }\n  free(*(undefined4 *)(fileData + 200));\n  byteValue = *(byte *)(fileData + 0xc4);\n  allocatedMemory = (undefined *)malloc(byteValue + 1);\n  *(undefined **)(fileData + 200) = allocatedMemory;\n  allocatedMemory[byteValue] = 0;\n  *allocatedMemory = char1;\n  allocatedMemory[1] = char2;\n  strncpy(allocatedMemory + 2,filePath,*(byte *)(fileData + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_file_name_08002e44",
                "param_1": "fileData",
                "param_2": "filePath",
                "param_3": "char1",
                "param_4": "char2",
                "bVar1": "byteValue",
                "cVar2": "fileNameLength",
                "iVar3": "cppOccurrenceIndex",
                "iVar4": "lastSlashIndex",
                "puVar5": "allocatedMemory"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "strlen",
                "free",
                "strrchr",
                "strstr",
                "malloc",
                "strncpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_from_pointer_08002ec4",
            "code": "\nvoid executeFunctionFromPointer_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_from_pointer_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "parse_and_process_data_08002ed2",
            "code": "\nvoid parse_and_process_data_08002ed2(int data_address)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(data_address + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_data(data_address + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "parse_and_process_data_08002ed2",
                "param_1": "data_address",
                "uVar1": "result",
                "parse": "process_data"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "parse"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "send_analog_data_08002ef2",
            "code": "\nvoid sendAnalogData_08002ef2(int baseAddress,undefined4 param2Value,undefined2 param3Value,undefined4 param4Value)\n\n{\n  sendAnalog(baseAddress + 0x40,param2Value,param3Value,param4Value,param4Value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "send_analog_data_08002ef2",
                "param_1": "baseAddress",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "send_digital_port_with_offset_08002efe",
            "code": "\nvoid sendDigitalPortWithOffset_08002efe(int baseAddress,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  sendDigitalPort(baseAddress + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "send_digital_port_with_offset_08002efe",
                "param_1": "baseAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "outputPort"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "send_sysex_with_offset_08002f0a",
            "code": "\nvoid send_sysex_with_offset_08002f0a(int input_offset)\n\n{\n  sendSysex(input_offset + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "send_sysex_with_offset_08002f0a",
                "param_1": "input_offset"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "send_string_from_offset_08002f14",
            "code": "\nvoid sendStringFromOffset_08002f14(int offset)\n\n{\n  sendString(offset + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "send_string_from_offset_08002f14",
                "param_1": "offset"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback",
                "attachServo",
                "setPinModeCallback"
            ],
            "called": [
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_function_08002f1e",
            "code": "\nvoid executeFunction_08002f1e(int functionPointer)\n\n{\n  (**(code **)**(undefined4 **)(functionPointer + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_function_08002f1e",
                "param_1": "functionPointer"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 status,uint code,undefined4 value)\n\n{\n  undefined4 tempValue;\n  \n  if (code == 0xd0) {\n    DAT_200005f0 = value;\n    return;\n  }\n  if (0xd0 < code) {\n    if (code == 0xf4) {\n      DAT_200005e0 = value;\n      return;\n    }\n    tempValue = value;\n    if ((code != 0xf5) && (tempValue = DAT_200005e4, code == 0xe0)) {\n      DAT_200005d4 = value;\n      return;\n    }\n    DAT_200005e4 = tempValue;\n    return;\n  }\n  if (code == 0x90) {\n    DAT_200005dc = value;\n    return;\n  }\n  if (code != 0xc0) {\n    return;\n  }\n  DAT_200005ec = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "status",
                "param_2": "code",
                "param_3": "value",
                "uVar1": "tempValue"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_data_if_equal_08002f84",
            "code": "\nvoid updateDataIfEqual_08002f84(undefined4 dataPointer,int value,undefined4 newValue)\n\n{\n  if (value == 0xff) {\n    DAT_200005e8 = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_data_if_equal_08002f84",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "newValue"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "set_dat_value_08002f94",
            "code": "\nvoid set_dat_value_08002f94(undefined4 input_param_1,undefined4 input_param_2,undefined4 new_dat_value)\n\n{\n  DAT_200005d0 = new_dat_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "set_dat_value_08002f94",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "new_dat_value"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_byte_value_from_offset_08002fa0",
            "code": "\nundefined getByteValueFromOffset_08002fa0(int offset,int baseAddress)\n\n{\n  return *(undefined *)(baseAddress + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_byte_value_from_offset_08002fa0",
                "param_1": "offset",
                "param_2": "baseAddress"
            },
            "calling": [
                "loop",
                "sysexCallback",
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_byte_value_08002fa8",
            "code": "\nvoid updateByteValue_08002fa8(int baseAddress,int offset,undefined newValue)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_byte_value_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_element_08002fba",
            "code": "\nundefined4 getElement_08002fba(int baseAddress,int index)\n\n{\n  return *(undefined4 *)(baseAddress + (index + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_element_08002fba",
                "param_1": "baseAddress",
                "param_2": "index"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "write_value_to_address_08002fc2",
            "code": "\nvoid writeValueToAddress_08002fc2(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + (offset + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "write_value_to_address_08002fc2",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "blink_led_08002fca",
            "code": "\nvoid blinkLED_08002fca(undefined4 pinNumber,undefined4 ledPin,int numBlinks,undefined4 delayOn,\n                 undefined4 delayOff)\n\n{\n  uint blinkCount;\n  \n  for (blinkCount = 0; (int)blinkCount < numBlinks; blinkCount = blinkCount + 1 & 0xff) {\n    delay(delayOff);\n    digitalWrite(ledPin,1);\n    delay(delayOn);\n    digitalWrite(ledPin,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "blink_led_08002fca",
                "param_1": "pinNumber",
                "param_2": "ledPin",
                "param_3": "numBlinks",
                "param_4": "delayOn",
                "param_5": "delayOff",
                "uVar1": "blinkCount"
            },
            "calling": [
                "blinkVersion"
            ],
            "called": [
                "delay",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "initialize_led_08003002",
            "code": "\nvoid initializeLED_08003002(int ledPin)\n\n{\n  if (*(char *)(ledPin + 0x1f8) != '\\0') {\n    return;\n  }\n  pinMode(0xd,1);\n  strobeBlinkLED(ledPin,0xd,2,0x28,0xd2);\n  delay(0xfa);\n  strobeBlinkLED(ledPin,0xd,5,0x28,0xd2);\n  delay(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "initialize_led_08003002",
                "param_1": "ledPin",
                "strobeBlinkPin": "strobeBlinkLED"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "strobeBlinkPin",
                "delay",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_and_blink_device_08003048",
            "code": "\nvoid initialize_and_blink_device_08003048(undefined4 version,undefined4 data,undefined4 param3,undefined4 param4)\n\n{\n  initialize(&DAT_20000700,data,6,param4,param4);\n  blink_version(version);\n  initialize_device(version,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_and_blink_device_08003048",
                "param_1": "version",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "begin": "initialize",
                "blinkVersion": "blink_version",
                "initialize_device_08002e26": "initialize_device"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "FUN_08002e26",
                "blinkVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_and_execute_0800307a",
            "code": "\nvoid decodeAndExecute_0800307a(undefined4 *functionPointer,uint inputLength,byte *inputData,uint maxIterations)\n\n{\n  uint currentByte;\n  uint bitOffset;\n  uint iterationCount;\n  uint byteIndex;\n  \n  currentByte = (uint)*inputData;\n  if (maxIterations == 0) {\n    maxIterations = 0xffffffff;\n  }\n  byteIndex = 0;\n  bitOffset = 0;\n  iterationCount = 0;\n  while ((byteIndex < inputLength && (iterationCount < maxIterations))) {\n    (***(code ***)(undefined4 *)*functionPointer)\n              ((undefined4 *)*functionPointer,((uint)inputData[byteIndex] << (bitOffset & 0xff) | currentByte) & 0x7f);\n    currentByte = (int)(uint)inputData[byteIndex] >> (7 - bitOffset & 0xff) & 0xff;\n    bitOffset = bitOffset + 1;\n    while ((iterationCount = iterationCount + 1, 6 < bitOffset && (iterationCount < maxIterations))) {\n      (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,currentByte & 0x7f);\n      currentByte = currentByte >> 7;\n      bitOffset = bitOffset - 7;\n    }\n    byteIndex = byteIndex + 1;\n  }\n  if ((bitOffset != 0) && (iterationCount < maxIterations)) {\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,(1 << (bitOffset & 0xff)) - 1U & currentByte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_and_execute_0800307a",
                "param_1": "functionPointer",
                "param_2": "inputLength",
                "param_3": "inputData",
                "param_4": "maxIterations",
                "uVar1": "currentByte",
                "uVar2": "bitOffset",
                "uVar3": "iterationCount",
                "uVar4": "byteIndex"
            },
            "calling": [
                "sendExtendedAnalog",
                "sendDigitalPort",
                "sendFirmwareVersion",
                "sendSysex",
                "sendAnalog"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "execute_encoded_function_08003106",
            "code": "\nvoid executeEncodedFunction_08003106(undefined4 *functionPointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 *functionPtr;\n  \n  functionPtr = (undefined4 *)*functionPointer;\n  if (functionPtr != (undefined4 *)0x0) {\n    (**(code **)*functionPtr)(functionPtr,0xf0);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,0x6f);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,value1);\n    encodeByteStream(functionPointer,value2,value3,value2);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "execute_encoded_function_08003106",
                "param_1": "functionPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "puVar1": "functionPtr"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_parameter_0800314e",
            "code": "\nvoid initializeParameter_0800314e(unsignedInt *pointerToValue)\n\n{\n  *pointerToValue = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_parameter_0800314e",
                "param_1": "pointerToValue",
                "undefined4": "unsignedInt"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_to_pointer_08003154",
            "code": "\nvoid copyValueToPointer_08003154(undefined4 *destination,undefined4 value)\n\n{\n  *destination = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_to_pointer_08003154",
                "param_1": "destination",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "process_data_08003158",
            "code": "\nvoid processData_08003158(undefined4 *dataPointer,uint dataSize,ushort dataValue)\n\n{\n  undefined4 *ptr;\n  ushort encodedData;\n  \n  ptr = (undefined4 *)*dataPointer;\n  if (ptr != (undefined4 *)0x0) {\n    encodedData = dataValue;\n    if (((int)dataSize < 0x10) && (dataValue < 0x4000)) {\n      (**(code **)*ptr)(ptr,dataSize | 0xe0);\n      encodeByteStream(dataPointer,2,&encodedData);\n    }\n    else {\n      sendExtendedAnalog(dataPointer,dataSize,2,&encodedData);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "process_data_08003158",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "param_3": "dataValue",
                "puVar1": "ptr",
                "local_a": "encodedData"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "sendExtendedAnalog",
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "execute_encoded_function_0800319e",
            "code": "\nvoid executeEncodedFunction_0800319e(undefined4 *functionPtr,uint flags,undefined2 data)\n\n{\n  undefined4 *functionPointer;\n  undefined2 encodedData;\n  \n  functionPointer = (undefined4 *)*functionPtr;\n  if (functionPointer != (undefined4 *)0x0) {\n    encodedData = data;\n    (**(code **)*functionPointer)(functionPointer,flags & 0xf | 0x90);\n    encodeByteStream(functionPtr,2,&encodedData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "execute_encoded_function_0800319e",
                "param_1": "functionPtr",
                "param_2": "flags",
                "param_3": "data",
                "puVar1": "functionPointer",
                "local_a": "encodedData"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "process_data_080031ce",
            "code": "\nvoid processData_080031ce(undefined4 *dataPointer,undefined4 param2,undefined4 param3,uint param4,int param5\n                 )\n\n{\n  undefined4 *functionPointer;\n  uint counter;\n  \n  functionPointer = (undefined4 *)*dataPointer;\n  if (functionPointer != (undefined4 *)0x0) {\n    (**(code **)*functionPointer)(functionPointer,0xf0,param3,*(code **)*functionPointer,param4);\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,0x79);\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,param2);\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,param3);\n    for (counter = 0; counter < param4; counter = counter + 1) {\n      encodeByteStream(dataPointer,1,param5 + counter,0);\n    }\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "process_data_080031ce",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "functionPointer",
                "uVar2": "counter"
            },
            "calling": [
                "printFirmwareVersion"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 *nextFunctionPointer;\n  \n  nextFunctionPointer = (undefined4 *)*functionPointer;\n  if (nextFunctionPointer != (undefined4 *)0x0) {\n    (**(code **)*nextFunctionPointer)(nextFunctionPointer,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,arg2);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,arg3);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "arg2",
                "param_3": "arg3",
                "puVar1": "nextFunctionPointer"
            },
            "calling": [
                "printVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "execute_and_encode_0800325a",
            "code": "\nvoid execute_and_encode_0800325a(undefined4 *function_ptr,undefined4 input_data,uint num_bytes,int offset)\n\n{\n  undefined4 *function_ptr_copy;\n  uint byte_index;\n  \n  function_ptr_copy = (undefined4 *)*function_ptr;\n  if (function_ptr_copy != (undefined4 *)0x0) {\n    (**(code **)*function_ptr_copy)(function_ptr_copy,0xf0);\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,input_data);\n    for (byte_index = 0; byte_index < num_bytes; byte_index = byte_index + 1) {\n      encodeByteStream(function_ptr,1,offset + byte_index,0);\n    }\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "execute_and_encode_0800325a",
                "param_1": "function_ptr",
                "param_2": "input_data",
                "param_3": "num_bytes",
                "param_4": "offset",
                "puVar1": "function_ptr_copy",
                "uVar2": "byte_index"
            },
            "calling": [
                "sendString",
                "FUN_08002f0a"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "send_sysex_data_080032a2",
            "code": "\nvoid sendSysexData_080032a2(undefined4 device,undefined4 data,undefined4 length,undefined4 extraParam)\n\n{\n  undefined4 dataLength;\n  \n  dataLength = strlen(data);\n  sendSysex(device,0x71,dataLength,data,extraParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "send_sysex_data_080032a2",
                "param_1": "device",
                "param_2": "data",
                "param_3": "length",
                "param_4": "extraParam",
                "uVar1": "dataLength"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "strlen",
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_memory_080032bc",
            "code": "\nvoid initializeMemory_080032bc(int ptr,int value,undefined4 data)\n\n{\n  *(int *)(ptr + 4) = value;\n  *(undefined4 *)(ptr + 8) = data;\n  *(undefined *)(ptr + 0xc) = 0;\n  *(undefined *)(ptr + 0xd) = 0;\n  *(undefined4 *)(ptr + 0x10) = 0;\n  *(undefined *)(ptr + 0x14) = 0;\n  *(undefined4 *)(ptr + 0x18) = 0;\n  *(undefined4 *)(ptr + 0x1c) = 0;\n  *(undefined4 *)(ptr + 0x20) = 0;\n  *(undefined4 *)(ptr + 0x24) = 0;\n  *(undefined4 *)(ptr + 0x28) = 0;\n  *(undefined4 *)(ptr + 0x2c) = 0;\n  *(undefined4 *)(ptr + 0x30) = 0;\n  *(undefined4 *)(ptr + 0x34) = 0;\n  *(undefined4 *)(ptr + 0x38) = 0;\n  *(undefined4 *)(ptr + 0x3c) = 0;\n  *(undefined4 *)(ptr + 0x40) = 0;\n  *(undefined4 *)(ptr + 0x44) = 0;\n  *(undefined4 *)(ptr + 0x48) = 0;\n  *(undefined4 *)(ptr + 0x4c) = 0;\n  *(undefined4 *)(ptr + 0x50) = 0;\n  *(undefined4 *)(ptr + 0x54) = 0;\n  *(undefined4 *)(ptr + 0x58) = 0;\n  *(undefined4 *)(ptr + 0x5c) = 0;\n  *(undefined4 *)(ptr + 0x60) = 0;\n  *(undefined4 *)(ptr + 100) = 0;\n  *(undefined4 *)(ptr + 0x68) = 0;\n  *(undefined4 *)(ptr + 0x6c) = 0;\n  *(undefined4 *)(ptr + 0x70) = 0;\n  *(undefined4 *)(ptr + 0x74) = 0;\n  *(undefined4 *)(ptr + 0x78) = 0;\n  *(bool *)ptr = value == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_memory_080032bc",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "data"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "set_memory_values_08003306",
            "code": "\nvoid setMemoryValues_08003306(int address,uint value,undefined4 data1,undefined4 data2)\n\n{\n  if (value == 0xd0) {\n    *(undefined4 *)(address + 0x58) = data1;\n    *(undefined4 *)(address + 0x28) = data2;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      *(undefined4 *)(address + 0x5c) = data1;\n      *(undefined4 *)(address + 0x2c) = data2;\n      return;\n    }\n    if (value == 0xf5) {\n      *(undefined4 *)(address + 0x60) = data1;\n      *(undefined4 *)(address + 0x30) = data2;\n    }\n    else if (value == 0xe0) {\n      *(undefined4 *)(address + 0x4c) = data1;\n      *(undefined4 *)(address + 0x1c) = data2;\n      return;\n    }\n    return;\n  }\n  if (value == 0x90) {\n    *(undefined4 *)(address + 0x50) = data1;\n    *(undefined4 *)(address + 0x20) = data2;\n    return;\n  }\n  if (value == 0xc0) {\n    *(undefined4 *)(address + 0x54) = data1;\n    *(undefined4 *)(address + 0x24) = data2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "set_memory_values_08003306",
                "param_1": "address",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_parameters_08003346",
            "code": "\nvoid updateParameters_08003346(int funcPtr,int checkValue,undefined4 paramValue1,undefined4 paramValue2)\n\n{\n  if (checkValue == 0x79) {\n    *(undefined4 *)(funcPtr + 0x70) = paramValue1;\n    *(undefined4 *)(funcPtr + 0x34) = paramValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_parameters_08003346",
                "param_1": "funcPtr",
                "param_2": "checkValue",
                "param_3": "paramValue1",
                "param_4": "paramValue2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_parameters_08003350",
            "code": "\nvoid update_parameters_08003350(int ptr1,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0xf9) {\n    *(undefined4 *)(ptr1 + 0x74) = newValue1;\n    *(undefined4 *)(ptr1 + 0x38) = newValue2;\n    return;\n  }\n  if (value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(ptr1 + 0x78) = newValue1;\n  *(undefined4 *)(ptr1 + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_parameters_08003350",
                "param_1": "ptr1",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_data_if_value_matches_08003366",
            "code": "\nvoid updateDataIfValueMatches_08003366(int dataPointer,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(dataPointer + 0x68) = newValue1;\n    *(undefined4 *)(dataPointer + 0x40) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_data_if_value_matches_08003366",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_function_parameters_08003370",
            "code": "\nvoid setFunctionParameters_08003370(int objAddress,undefined4 param2,undefined4 value1,undefined4 value2)\n\n{\n  *(undefined4 *)(objAddress + 0x6c) = value1;\n  *(undefined4 *)(objAddress + 0x44) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_function_parameters_08003370",
                "param_1": "objAddress",
                "param_2": "param2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_data_08003376",
            "code": "\nvoid updateData_08003376(undefined *dataStruct,undefined newValue,uint index)\n\n{\n  bool isGreaterThan;\n  \n  if (index < *(uint *)(dataStruct + 8)) {\n    isGreaterThan = false;\n  }\n  else {\n    isGreaterThan = true;\n    if (*(code **)(dataStruct + 100) != (code *)0x0) {\n      *dataStruct = 1;\n      (**(code **)(dataStruct + 100))(*(undefined4 *)(dataStruct + 0x3c));\n      if (index < *(uint *)(dataStruct + 8)) {\n        isGreaterThan = false;\n      }\n      else {\n        isGreaterThan = true;\n      }\n    }\n  }\n  if (!isGreaterThan) {\n    *(undefined *)(*(int *)(dataStruct + 4) + index) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_data_08003376",
                "param_1": "dataStruct",
                "param_2": "newValue",
                "param_3": "index",
                "bVar1": "isGreaterThan"
            },
            "calling": [
                "processSysexMessage",
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copyAndShiftBits_080033a8(undefined4 targetAddress,uint length,int sourceAddress)\n\n{\n  byte currentByte;\n  int targetIndex;\n  uint sourceIndex;\n  \n  targetIndex = 0;\n  for (sourceIndex = 0; sourceIndex < length; sourceIndex = sourceIndex + 2) {\n    currentByte = *(byte *)(sourceAddress + sourceIndex);\n    *(byte *)(sourceAddress + targetIndex) = currentByte;\n    *(byte *)(sourceAddress + targetIndex) = *(char *)(sourceAddress + sourceIndex + 1) << 7 | currentByte;\n    targetIndex = targetIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "targetAddress",
                "param_2": "length",
                "param_3": "sourceAddress",
                "bVar1": "currentByte",
                "iVar2": "targetIndex",
                "uVar3": "sourceIndex"
            },
            "calling": [
                "processSysexMessage"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_data_080033cc",
            "code": "\nvoid processData_080033cc(int dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int decodedSize;\n  char *charPointer;\n  \n  charPointer = *(char **)(dataPointer + 4);\n  firstChar = *charPointer;\n  if (firstChar == 'q') {\n    if (*(int *)(dataPointer + 0x68) != 0) {\n      decodedSize = decodeByteStream(dataPointer,*(int *)(dataPointer + 0x18) + -1,charPointer + 1,charPointer,param4);\n      bufferDataAtPosition(dataPointer,0,decodedSize + 1);\n      (**(code **)(dataPointer + 0x68))(*(undefined4 *)(dataPointer + 0x40),*(int *)(dataPointer + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(dataPointer + 0x70) != (code *)0x0) {\n      if (*(uint *)(dataPointer + 0x18) < 3) {\n        (**(code **)(dataPointer + 0x70))(*(undefined4 *)(dataPointer + 0x34),0,0);\n        return;\n      }\n      decodedSize = decodeByteStream(dataPointer,*(uint *)(dataPointer + 0x18) - 3,charPointer + 3,charPointer,param4);\n      bufferDataAtPosition(dataPointer,0,decodedSize + 3);\n      decodedSize = *(int *)(dataPointer + 4);\n      (**(code **)(dataPointer + 0x70))\n                (*(undefined4 *)(dataPointer + 0x34),*(undefined *)(decodedSize + 1),*(undefined *)(decodedSize + 2)\n                 ,decodedSize + 3);\n      return;\n    }\n  }\n  else if (*(code **)(dataPointer + 0x6c) != (code *)0x0) {\n    (**(code **)(dataPointer + 0x6c))\n              (*(undefined4 *)(dataPointer + 0x44),firstChar,*(int *)(dataPointer + 0x18) + -1,charPointer + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_data_080033cc",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "decodedSize",
                "pcVar3": "charPointer"
            },
            "calling": [
                "parse"
            ],
            "called": [
                "bufferDataAtPosition",
                "decodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_memory_0800344a",
            "code": "\nvoid initializeMemory_0800344a(int memoryAddress)\n\n{\n  uint index;\n  \n  *(undefined4 *)(memoryAddress + 0x10) = 0;\n  *(undefined *)(memoryAddress + 0xc) = 0;\n  *(undefined *)(memoryAddress + 0xd) = 0;\n  for (index = 0; index < *(uint *)(memoryAddress + 8); index = index + 1) {\n    *(undefined *)(*(int *)(memoryAddress + 4) + index) = 0;\n  }\n  *(undefined *)(memoryAddress + 0x14) = 0;\n  *(undefined4 *)(memoryAddress + 0x18) = 0;\n  if (*(code **)(memoryAddress + 0x78) != (code *)0x0) {\n    (**(code **)(memoryAddress + 0x78))(*(undefined4 *)(memoryAddress + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_memory_0800344a",
                "param_1": "memoryAddress",
                "uVar1": "index"
            },
            "calling": [
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_midi_event_08003474",
            "code": "\nvoid processMIDIEvent_08003474(int event_data,uint message_type)\n\n{\n  byte status_byte;\n  \n  if (*(char *)(event_data + 0x14) != '\\0') {\n    if (message_type != 0xf7) {\n      bufferDataAtPosition(event_data,message_type,*(undefined4 *)(event_data + 0x18));\n      *(int *)(event_data + 0x18) = *(int *)(event_data + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(event_data + 0x14) = 0;\n    processSysexMessage();\n    return;\n  }\n  if ((*(int *)(event_data + 0x10) == 0) || (0x7f < (int)message_type)) {\n    if ((int)message_type < 0xf0) {\n      *(byte *)(event_data + 0xd) = (byte)message_type & 0xf;\n      message_type = message_type & 0xf0;\n    }\n    if (message_type == 0xf0) {\n      *(undefined *)(event_data + 0x14) = 1;\n      *(undefined4 *)(event_data + 0x18) = 0;\n      return;\n    }\n    if (message_type < 0xf1) {\n      if (message_type != 0xc0) {\n        if (message_type < 0xc1) {\n          if (message_type != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (message_type == 0xd0) goto LAB_0800359c;\n          if (message_type != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(event_data + 0x10) = 2;\n        *(char *)(event_data + 0xc) = (char)message_type;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(event_data + 0x10) = 1;\n      *(char *)(event_data + 0xc) = (char)message_type;\n      return;\n    }\n    if (message_type != 0xf9) {\n      if (0xf9 < message_type) {\n        if (message_type == 0xff) {\n          systemReset(event_data);\n          return;\n        }\n        return;\n      }\n      if (1 < message_type - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(event_data + 0x74) != (code *)0x0) {\n      (**(code **)(event_data + 0x74))(*(undefined4 *)(event_data + 0x38));\n    }\n  }\n  else {\n    *(int *)(event_data + 0x10) = *(int *)(event_data + 0x10) + -1;\n    bufferDataAtPosition();\n    if ((*(int *)(event_data + 0x10) == 0) && (status_byte = *(byte *)(event_data + 0xc), status_byte != 0)) {\n      if (status_byte == 0xd0) {\n        if (*(code **)(event_data + 0x58) != (code *)0x0) {\n          (**(code **)(event_data + 0x58))\n                    (*(undefined4 *)(event_data + 0x28),*(undefined *)(event_data + 0xd),\n                     **(undefined **)(event_data + 4));\n        }\n      }\n      else if (status_byte < 0xd1) {\n        if (status_byte == 0x90) {\n          if (*(code **)(event_data + 0x50) != (code *)0x0) {\n            (**(code **)(event_data + 0x50))\n                      (*(undefined4 *)(event_data + 0x20),*(undefined *)(event_data + 0xd),\n                       (uint)(*(byte **)(event_data + 4))[1] + (uint)**(byte **)(event_data + 4) * 0x80);\n          }\n        }\n        else if ((status_byte == 0xc0) && (*(code **)(event_data + 0x54) != (code *)0x0)) {\n          (**(code **)(event_data + 0x54))\n                    (*(undefined4 *)(event_data + 0x24),*(undefined *)(event_data + 0xd),\n                     **(undefined **)(event_data + 4));\n        }\n      }\n      else if (status_byte == 0xf4) {\n        if (*(code **)(event_data + 0x5c) != (code *)0x0) {\n          (**(code **)(event_data + 0x5c))\n                    (*(undefined4 *)(event_data + 0x2c),(*(undefined **)(event_data + 4))[1],\n                     **(undefined **)(event_data + 4));\n        }\n      }\n      else if (status_byte == 0xf5) {\n        if (*(code **)(event_data + 0x60) != (code *)0x0) {\n          (**(code **)(event_data + 0x60))\n                    (*(undefined4 *)(event_data + 0x30),(*(undefined **)(event_data + 4))[1],\n                     **(undefined **)(event_data + 4));\n        }\n      }\n      else if ((status_byte == 0xe0) && (*(code **)(event_data + 0x4c) != (code *)0x0)) {\n        (**(code **)(event_data + 0x4c))\n                  (*(undefined4 *)(event_data + 0x1c),*(undefined *)(event_data + 0xd),\n                   (uint)(*(byte **)(event_data + 4))[1] + (uint)**(byte **)(event_data + 4) * 0x80);\n      }\n      *(undefined *)(event_data + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_midi_event_08003474",
                "param_1": "event_data",
                "param_2": "message_type",
                "bVar1": "status_byte"
            },
            "calling": [
                "processInput"
            ],
            "called": [
                "systemReset",
                "processSysexMessage",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_system_080035b8",
            "code": "\nvoid initializeSystem_080035b8(void)\n\n{\n  int result;\n  uint hclkFrequency;\n  undefined4 peripheralClockConfig [2];\n  undefined4 peripheralClockConfigSource;\n  undefined4 clockSource;\n  undefined4 clockConfigDivisor;\n  undefined4 clockConfigMultiplier;\n  undefined4 clockConfigPrescaler;\n  undefined4 mcoConfig;\n  undefined4 oscillatorConfig [4];\n  undefined4 enableInternalOscillator;\n  undefined4 internalOscillatorFrequency;\n  undefined4 oscillatorBypass;\n  undefined4 externalOscillatorFrequency;\n  undefined4 oscillatorTimeout;\n  \n  oscillatorConfig[0] = 2;\n  enableInternalOscillator = 1;\n  internalOscillatorFrequency = 0x10;\n  oscillatorBypass = 2;\n  externalOscillatorFrequency = 0;\n  oscillatorTimeout = 0x380000;\n  result = HAL_RCC_OscConfig(oscillatorConfig);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  clockSource = 0xf;\n  clockConfigDivisor = 2;\n  clockConfigMultiplier = 0;\n  clockConfigPrescaler = 0x400;\n  mcoConfig = 0;\n  result = HAL_RCC_ClockConfig(&clockSource);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  peripheralClockConfig[0] = 2;\n  peripheralClockConfigSource = 0x8000;\n  result = HAL_RCCEx_PeriphCLKConfig(peripheralClockConfig);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFrequency / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_system_080035b8",
                "local_30": "oscillatorConfig",
                "local_20": "enableInternalOscillator",
                "local_1c": "internalOscillatorFrequency",
                "local_14": "oscillatorBypass",
                "local_10": "externalOscillatorFrequency",
                "local_c": "oscillatorTimeout",
                "iVar1": "result",
                "local_44": "clockSource",
                "local_40": "clockConfigDivisor",
                "local_3c": "clockConfigMultiplier",
                "local_38": "clockConfigPrescaler",
                "local_34": "mcoConfig",
                "local_54": "peripheralClockConfig",
                "local_4c": "peripheralClockConfigSource",
                "uVar2": "hclkFrequency"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_RCC_GetHCLKFreq",
                "_Error_Handler",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003658": {
            "entrypoint": "0x08003658",
            "current_name": "initialize_memory_08003658",
            "code": "\nvoid initializeMemory_08003658(void)\n\n{\n  int index;\n  undefined4 *pointer;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_200000f4; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800ac18);\n  }\n  for (pointer = &DAT_200000f4; pointer < &DAT_20000a3c; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x800368a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003658": "initialize_memory_08003658",
                "iVar1": "index",
                "puVar2": "pointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "__libc_init_array",
                "SystemInit",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_hardware_configuration_080036a2",
            "code": "\nvoid initialize_hardware_configuration_080036a2(void)\n\n{\n  hw_config_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_hardware_configuration_080036a2"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "check_character_080036ac",
            "code": "\nuint checkCharacter_080036ac(int character)\n\n{\n  uint index;\n  \n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "check_character_080036ac",
                "param_1": "character",
                "uVar1": "index"
            },
            "calling": [
                "loop",
                "sysexCallback",
                "checkDigitalInputs",
                "enableI2CPins",
                "FUN_0800021a",
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "configure_sys_tick_080036d8",
            "code": "\nundefined4 configureSysTick_080036d8(uint priorityLevel)\n\n{\n  int systickConfigResult;\n  \n  systickConfigResult = HAL_SYSTICK_Config(DAT_20000018 / (1000 / DAT_2000000c));\n  if (systickConfigResult != 0) {\n    return 1;\n  }\n  if (0xf < priorityLevel) {\n    return 1;\n  }\n  HAL_NVIC_SetPriority(0xffffffff,priorityLevel,0);\n  DAT_20000010 = priorityLevel;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "configure_sys_tick_080036d8",
                "param_1": "priorityLevel",
                "iVar1": "systickConfigResult"
            },
            "calling": [
                "FUN_080058d2",
                "HAL_Init"
            ],
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_hardware_08003724",
            "code": "\n\n\nundefined4 initializeHardware_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setPriorityGrouping(3);\n  initializeTick(0xf);\n  initializeMsp();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_hardware_08003724",
                "HAL_NVIC_SetPriorityGrouping": "setPriorityGrouping",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializeMsp"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "addition_and_update_08003748",
            "code": "\nvoid additionAndUpdate_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "addition_and_update_08003748"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_data_08003760",
            "code": "\nundefined4 get_data_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_data_08003760"
            },
            "calling": [
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "i2c_master_write",
                "FUN_080058d2",
                "ADC_Enable",
                "HAL_RCC_OscConfig",
                "HAL_UART_Transmit",
                "UART_WaitOnFlagUntilTimeout",
                "i2c_master_read",
                "uart_debug_write",
                "ADC_ConversionStop_Disable",
                "GetCurrentMilli"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "calculate_delay_0800376c",
            "code": "\nundefined4 calculateDelay_0800376c(uint **data,uint timeout)\n\n{\n  int startTime;\n  uint periphFreq;\n  int duration;\n  undefined4 result;\n  uint *flags;\n  uint calculationResult;\n  uint counter;\n  \n  counter = 0;\n  startTime = HAL_GetTick();\n  calculationResult = DAT_20000018;\n  flags = *data;\n  if ((flags[2] & 0x100) == 0) {\n    if (((flags[1] & 0x100) == 0) && ((flags[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**data & 2) != 0) goto LAB_0800387e;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (duration = HAL_GetTick(), (uint)(duration - startTime) <= timeout))));\n      data[10] = (uint *)((uint)data[10] | 4);\n      *(undefined *)(data + 9) = 0;\n      result = 3;\n    }\n    else {\n      periphFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n      flags = *data;\n      if (((flags[4] & 0x24924924) == 0) && ((flags[3] & 0x924924) == 0)) {\n        if ((flags[4] & 0x12492492) == 0) {\n          if ((flags[3] & 0x492492) == 0) {\n            duration = 0x14;\n          }\n          else {\n            duration = 0x29;\n          }\n        }\n        else {\n          duration = 0x29;\n        }\n      }\n      else if (((flags[4] & 0x12492492) == 0) && ((flags[3] & 0x492492) == 0)) {\n        duration = 0x54;\n      }\n      else if ((flags[4] & 0x249249) == 0) {\n        if ((flags[3] & 0x249249) == 0) {\n          duration = 0x54;\n        }\n        else {\n          duration = 0xfc;\n        }\n      }\n      else {\n        duration = 0xfc;\n      }\n      calculationResult = (calculationResult / periphFreq) * duration;\n      for (; counter <= calculationResult && calculationResult - counter != 0; counter = counter + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (duration = HAL_GetTick(), timeout < (uint)(duration - startTime))))) {\n          data[10] = (uint *)((uint)data[10] | 4);\n          *(undefined *)(data + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **data = 0xffffffed;\n      data[10] = (uint *)((uint)data[10] | 0x200);\n      if (((*data)[2] & 0xe0000) == 0xe0000) {\n        if (data[3] == (uint *)0x0) {\n          data[10] = (uint *)((uint)data[10] & 0xfffffeff);\n          if (((uint)data[10] & 0x1000) == 0) {\n            data[10] = (uint *)((uint)data[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    data[10] = (uint *)((uint)data[10] | 0x20);\n    *(undefined *)(data + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "calculate_delay_0800376c",
                "param_1": "data",
                "param_2": "timeout",
                "iVar1": "startTime",
                "uVar2": "periphFreq",
                "iVar3": "duration",
                "uVar4": "result",
                "puVar5": "flags",
                "uVar6": "calculationResult",
                "local_1c": "counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_from_pointer_080038dc",
            "code": "\nundefined4 getOffsetFromPointer_080038dc(int *pointer)\n\n{\n  return *(undefined4 *)(*pointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_from_pointer_080038dc",
                "param_1": "pointer"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_configuration_080038e4",
            "code": "\nundefined4 updateConfiguration_080038e4(int *configPtr,uint *dataPtr)\n\n{\n  undefined4 result;\n  uint value;\n  int count;\n  \n  if (*(char *)(configPtr + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 9) = 1;\n    value = dataPtr[1];\n    if (value < 7) {\n      value = value * 5 - 5;\n      *(uint *)(*configPtr + 0x34) =\n           *dataPtr << (value & 0xff) | *(uint *)(*configPtr + 0x34) & ~(0x1f << (value & 0xff));\n    }\n    else if (value < 0xd) {\n      value = value * 5 - 0x23;\n      *(uint *)(*configPtr + 0x30) =\n           *dataPtr << (value & 0xff) | *(uint *)(*configPtr + 0x30) & ~(0x1f << (value & 0xff));\n    }\n    else {\n      value = value * 5 - 0x41;\n      *(uint *)(*configPtr + 0x2c) =\n           *dataPtr << (value & 0xff) | *(uint *)(*configPtr + 0x2c) & ~(0x1f << (value & 0xff));\n    }\n    value = *dataPtr;\n    if (value < 10) {\n      *(uint *)(*configPtr + 0x10) =\n           dataPtr[2] << (value * 3 & 0xff) |\n           *(uint *)(*configPtr + 0x10) & ~(7 << (value * 3 & 0xff));\n    }\n    else {\n      value = value * 3 - 0x1e;\n      *(uint *)(*configPtr + 0xc) =\n           dataPtr[2] << (value & 0xff) | *(uint *)(*configPtr + 0xc) & ~(7 << (value & 0xff));\n    }\n    if (*dataPtr - 0x10 < 2) {\n      if (*configPtr == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*dataPtr == 0x10) {\n            for (count = (DAT_20000018 / 1000000) * 10; count != 0; count = count + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        configPtr[10] = configPtr[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(configPtr + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_configuration_080038e4",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "result",
                "uVar2": "value",
                "local_c": "count"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_value_from_address_08003a1c",
            "code": "\nundefined4 get_value_from_address_08003a1c(int address)\n\n{\n  return *(undefined4 *)(address + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_value_from_address_08003a1c",
                "param_1": "address"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "initialize_hardware_08003a20",
            "code": "\nundefined4 initializeHardware_08003a20(int *param_1,undefined4 param)\n\n{\n  int currentTime;\n  undefined4 uVar2;\n  int hardwareValue;\n  uint delayCount;\n  \n  hardwareValue = *param_1;\n  if ((*(uint *)(hardwareValue + 8) & 1) == 0) {\n    *(uint *)(hardwareValue + 8) = *(uint *)(hardwareValue + 8) | 1;\n    for (delayCount = DAT_20000018 / 1000000; delayCount != 0; delayCount = delayCount - 1) {\n    }\n    hardwareValue = getCurrentTime(param_1,param,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*param_1 + 8) & 1) != 0) {\n        return 0;\n      }\n      currentTime = getCurrentTime();\n    } while ((uint)(currentTime - hardwareValue) < 3);\n    param_1[10] = param_1[10] | 0x10;\n    param_1[0xb] = param_1[0xb] | 1;\n    *(undefined *)(param_1 + 9) = 0;\n    uVar2 = 1;\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "initialize_hardware_08003a20",
                "param_2": "param",
                "iVar1": "currentTime",
                "iVar3": "hardwareValue",
                "local_14": "delayCount",
                "HAL_GetTick": "getCurrentTime"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "initialize_adc_08003aa0",
            "code": "\n\n\nint initializeADC_08003aa0(int *adcParameters)\n\n{\n  int result;\n  undefined4 *ptrToReg;\n  int regValue;\n  \n  if (*(char *)(adcParameters + 9) != '\\x01') {\n    *(undefined *)(adcParameters + 9) = 1;\n    result = ADC_Enable();\n    if (result == 0) {\n      adcParameters[10] = adcParameters[10] & 0xfffffcfeU | 0x100;\n      ptrToReg = (undefined4 *)*adcParameters;\n      if ((ptrToReg == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        adcParameters[10] = adcParameters[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          adcParameters[10] = adcParameters[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        adcParameters[10] = adcParameters[10] & 0xffefffff;\n        if ((ptrToReg[1] & 0x400) != 0) {\n          adcParameters[10] = adcParameters[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((adcParameters[10] & 0x1000U) == 0) {\n        adcParameters[0xb] = 0;\n      }\n      else {\n        adcParameters[0xb] = adcParameters[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(adcParameters + 9) = 0;\n      *ptrToReg = 0xfffffffd;\n      regValue = *adcParameters;\n      if (((*(uint *)(regValue + 8) & 0xe0000) == 0xe0000) &&\n         ((regValue != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(regValue + 8) = *(uint *)(regValue + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(regValue + 8) = *(uint *)(regValue + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(adcParameters + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "initialize_adc_08003aa0",
                "param_1": "adcParameters",
                "iVar1": "result",
                "puVar2": "ptrToReg",
                "iVar3": "regValue"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "disable_toggle_08003b8c",
            "code": "\nundefined4 disableToggle_08003b8c(int *deviceParams)\n\n{\n  int currentTime;\n  int deviceState;\n  \n  deviceState = *deviceParams;\n  if ((*(uint *)(deviceState + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(deviceState + 8) = *(uint *)(deviceState + 8) & 0xfffffffe;\n  deviceState = getTick();\n  do {\n    if ((*(uint *)(*deviceParams + 8) & 1) == 0) {\n      return 0;\n    }\n    currentTime = getTick();\n  } while ((uint)(currentTime - deviceState) < 3);\n  deviceParams[10] = deviceParams[10] | 0x10;\n  deviceParams[0xb] = deviceParams[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "disable_toggle_08003b8c",
                "param_1": "deviceParams",
                "iVar1": "currentTime",
                "iVar2": "deviceState",
                "HAL_GetTick": "getTick"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Init",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "update_adc_settings_08003bd8",
            "code": "\nundefined4 update_ADC_settings_08003bd8(int *adc_settings)\n\n{\n  int conversion_status;\n  uint bitmask1;\n  uint bitmask2;\n  \n  if (adc_settings == (int *)0x0) {\n    return 1;\n  }\n  if (adc_settings[10] == 0) {\n    adc_settings[0xb] = 0;\n    *(undefined *)(adc_settings + 9) = 0;\n    HAL_ADC_MspInit();\n  }\n  conversion_status = ADC_ConversionStop_Disable(adc_settings);\n  if (((adc_settings[10] & 0x10U) == 0) && (conversion_status == 0)) {\n    adc_settings[10] = adc_settings[10] & 0xffffeefdU | 2;\n    bitmask1 = adc_settings[1] | adc_settings[7] | adc_settings[3] << 1;\n    if (adc_settings[2] == 0x100) {\n      bitmask2 = 0x100;\n    }\n    else {\n      bitmask2 = 0;\n      if (adc_settings[2] == 1) {\n        bitmask2 = 0x100;\n      }\n    }\n    if (adc_settings[5] == 1) {\n      if (adc_settings[3] == 0) {\n        bitmask2 = bitmask2 | (adc_settings[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        adc_settings[10] = adc_settings[10] | 0x20;\n        adc_settings[0xb] = adc_settings[0xb] | 1;\n      }\n    }\n    *(uint *)(*adc_settings + 4) = bitmask2 | *(uint *)(*adc_settings + 4) & 0xffff16ff;\n    *(uint *)(*adc_settings + 8) = *(uint *)(*adc_settings + 8) & 0xffe1f7fd | bitmask1;\n    if ((adc_settings[2] == 0x100) || (adc_settings[2] == 1)) {\n      bitmask2 = (adc_settings[4] + -1) * 0x100000;\n    }\n    else {\n      bitmask2 = 0;\n    }\n    *(uint *)(*adc_settings + 0x2c) = bitmask2 | *(uint *)(*adc_settings + 0x2c) & 0xff0fffff;\n    if (bitmask1 != (*(uint *)(*adc_settings + 8) & 0xff1f0efe)) {\n      adc_settings[10] = adc_settings[10] & 0xffffffedU | 0x10;\n      adc_settings[0xb] = adc_settings[0xb] | 1;\n      return 1;\n    }\n    adc_settings[0xb] = 0;\n    adc_settings[10] = adc_settings[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  adc_settings[10] = adc_settings[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "update_adc_settings_08003bd8",
                "param_1": "adc_settings",
                "iVar1": "conversion_status",
                "uVar2": "bitmask1",
                "uVar3": "bitmask2"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "disable_adc_conversion_stop_08003ce8",
            "code": "\nint disableAdcConversionStop_08003ce8(int *adcParams)\n\n{\n  int result;\n  \n  if (adcParams == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    adcParams[10] = adcParams[10] | 2;\n    result = ADC_ConversionStop_Disable();\n    if (result == 0) {\n      *(undefined4 *)*adcParams = 0xffffffe0;\n      *(uint *)(*adcParams + 4) = *(uint *)(*adcParams + 4) & 0xff3f0000;\n      *(uint *)(*adcParams + 8) = *(uint *)(*adcParams + 8) & 0xff0106f0;\n      *(uint *)(*adcParams + 0xc) = *(uint *)(*adcParams + 0xc) & 0xff000000;\n      *(uint *)(*adcParams + 0x10) = *(uint *)(*adcParams + 0x10) & 0xc0000000;\n      *(uint *)(*adcParams + 0x14) = *(uint *)(*adcParams + 0x14) & 0xfffff000;\n      *(uint *)(*adcParams + 0x18) = *(uint *)(*adcParams + 0x18) & 0xfffff000;\n      *(uint *)(*adcParams + 0x1c) = *(uint *)(*adcParams + 0x1c) & 0xfffff000;\n      *(uint *)(*adcParams + 0x20) = *(uint *)(*adcParams + 0x20) & 0xfffff000;\n      *(uint *)(*adcParams + 0x24) = *(uint *)(*adcParams + 0x24) & 0xfffff000;\n      *(uint *)(*adcParams + 0x28) = *(uint *)(*adcParams + 0x28) & 0xfffff000;\n      *(uint *)(*adcParams + 0x2c) = *(uint *)(*adcParams + 0x2c) & 0xff000000;\n      *(uint *)(*adcParams + 0x2c) = *(uint *)(*adcParams + 0x2c) & 0xff000000;\n      *(uint *)(*adcParams + 0x30) = *(uint *)(*adcParams + 0x30) & 0xc0000000;\n      *(uint *)(*adcParams + 0x34) = *(uint *)(*adcParams + 0x34) & 0xc0000000;\n      *(uint *)(*adcParams + 0x38) = *(uint *)(*adcParams + 0x38) & 0xffc00000;\n      *(uint *)(*adcParams + 0x38) = *(uint *)(*adcParams + 0x38) & 0xffc00000;\n      deinitializeAdcMsp(adcParams);\n      adcParams[0xb] = 0;\n      adcParams[10] = 0;\n    }\n    *(undefined *)(adcParams + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "disable_adc_conversion_stop_08003ce8",
                "param_1": "adcParams",
                "iVar1": "result",
                "HAL_ADC_MspDeInit": "deinitializeAdcMsp"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspDeInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "check_adc_status_08003de4",
            "code": "\nint checkADCStatus_08003de4(int adcData)\n\n{\n  int result;\n  \n  if (*(char *)(adcData + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adcData + 0x24) = 1;\n  result = disableADCConversionStop;\n  if (result == 0) {\n    *(uint *)(adcData + 0x28) = *(uint *)(adcData + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(adcData + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "check_adc_status_08003de4",
                "param_1": "adcData",
                "iVar1": "result",
                "ADC_ConversionStop_Disable()": "disableADCConversionStop"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "initialize_adc_08003e20",
            "code": "\nint initializeADC_08003e20(int *adcData)\n\n{\n  uint dataLength;\n  int stopResult;\n  uint clockFreq;\n  int startTick;\n  int currentTick;\n  int loopCounter;\n  \n  if (*(char *)(adcData + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adcData + 9) = 1;\n  stopResult = ADC_ConversionStop_Disable();\n  if (stopResult == 0) {\n    adcData[10] = adcData[10] & 0xffffeefdU | 2;\n    dataLength = DAT_20000018;\n    clockFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loopCounter = dataLength / clockFreq << 1; loopCounter != 0; loopCounter = loopCounter + -1) {\n    }\n    ADC_Enable(adcData);\n    *(uint *)(*adcData + 8) = *(uint *)(*adcData + 8) | 8;\n    startTick = HAL_GetTick();\n    while (currentTick = *adcData, (*(uint *)(currentTick + 8) & 8) != 0) {\n      currentTick = HAL_GetTick();\n      if (10 < (uint)(currentTick - startTick)) {\n        adcData[10] = adcData[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adcData + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentTick + 8) = *(uint *)(currentTick + 8) | 4;\n    startTick = HAL_GetTick();\n    while ((*(uint *)(*adcData + 8) & 4) != 0) {\n      currentTick = HAL_GetTick();\n      if (10 < (uint)(currentTick - startTick)) {\n        adcData[10] = adcData[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adcData + 9) = 0;\n        return 1;\n      }\n    }\n    adcData[10] = adcData[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(adcData + 9) = 0;\n  return stopResult;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "initialize_adc_08003e20",
                "param_1": "adcData",
                "uVar1": "dataLength",
                "iVar2": "stopResult",
                "uVar3": "clockFreq",
                "iVar4": "startTick",
                "iVar5": "currentTick",
                "local_14": "loopCounter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "ADC_Enable",
                "ADC_ConversionStop_Disable",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_data_register_08003f0c",
            "code": "\n\n\nvoid updateDataRegister_08003f0c(uint input)\n\n{\n  _DAT_e000ed0c = (input & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_data_register_08003f0c",
                "param_1": "input"
            },
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_memory_value_08003f30",
            "code": "\n\n\nvoid updateMemoryValue_08003f30(uint address,uint value,uint mask)\n\n{\n  uint shiftedBits;\n  uint remainingBits;\n  \n  shiftedBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftedBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftedBits + 4 < 7) {\n    shiftedBits = 0;\n  }\n  else {\n    shiftedBits = shiftedBits - 3;\n  }\n  shiftedBits = (value & (1 << (remainingBits & 0xff)) - 1U) << (shiftedBits & 0xff) |\n          (1 << (shiftedBits & 0xff)) - 1U & mask;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftedBits << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftedBits << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_memory_value_08003f30",
                "param_1": "address",
                "param_2": "value",
                "param_3": "mask",
                "uVar1": "shiftedBits",
                "uVar2": "remainingBits"
            },
            "calling": [
                "i2c_custom_init",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "HAL_InitTick",
                "SystemClock_Config",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_at_index_08003f94",
            "code": "\nvoid setBitAtIndex_08003f94(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "param_1": "index"
            },
            "calling": [
                "i2c_custom_init",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "update_bit_in_memory_08003fb0",
            "code": "\nvoid updateBitInMemory_08003fb0(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "update_bit_in_memory_08003fb0",
                "param_1": "bitPosition"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_param_values_08003fd8",
            "code": "\n\n\nundefined4 set_param_values_08003fd8(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_param_values_08003fd8",
                "param_1": "value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_08004004",
            "code": "\nvoid setBit_08004004(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_08004004",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_flag_08004024",
            "code": "\n\n\nvoid updateFlag_08004024(int flagValue)\n\n{\n  if (flagValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_flag_08004024",
                "param_1": "flagValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_system_tick_08004046",
            "code": "\nvoid initializeSystemTick_08004046(void)\n\n{\n  handleSystemTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_system_tick_08004046",
                "HAL_SYSTICK_Callback": "handleSystemTick"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "set_processing_options_08004050",
            "code": "\n\n\nundefined4 set_processing_options_08004050(uint **options)\n\n{\n  uint *current_option;\n  \n  if (*(char *)((int)options + 0x21) != '\\x02') {\n    error_code = (uint *)0x4;\n    return 1;\n  }\n  **options = **options & 0xfffffff1;\n  **options = **options & 0xfffffffe;\n  current_option = *options;\n  if (current_option == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (current_option == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (current_option == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (current_option == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (current_option == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (current_option == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)options + 0x21) = 1;\n  *(undefined *)(options + 8) = 0;\n  if (callback_function_pointer != (uint *)0x0) {\n    (*(code *)callback_function_pointer)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "set_processing_options_08004050",
                "param_1": "options",
                "puVar1": "current_option",
                "param_1[0xe]": "error_code",
                "param_1[0xd]": "callback_function_pointer"
            },
            "calling": [
                "HAL_UART_IRQHandler",
                "I2C_ITError"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_flags_and_values_080040e8",
            "code": "\n\n\nvoid updateFlagsAndValues_080040e8(uint *flags,uint *inputParams)\n\n{\n  uint *ptr;\n  uint bitMask;\n  uint bitValue;\n  uint i;\n  uint opcode;\n  uint valueToUpdate;\n  int shift;\n  int index;\n  \n  valueToUpdate = 0;\n  i = 0;\n  do {\n    if (0xf < i) {\n      return;\n    }\n    bitMask = 1 << (i & 0xff);\n    bitValue = *inputParams & bitMask;\n    if (bitMask == bitValue) {\n      opcode = inputParams[1];\n      if (opcode == 0x12) {\n        valueToUpdate = inputParams[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          valueToUpdate = inputParams[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_0800423a;\n          if (opcode == 1) {\n            valueToUpdate = inputParams[3];\n          }\n        }\n        else if (opcode == 3) {\n          valueToUpdate = 0;\n        }\n        else if (opcode == 0x11) {\n          valueToUpdate = inputParams[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_0800423a:\n        if (inputParams[2] == 0) {\n          valueToUpdate = 4;\n        }\n        else if (inputParams[2] == 1) {\n          flags[4] = bitMask;\n          valueToUpdate = 8;\n        }\n        else {\n          flags[5] = bitMask;\n          valueToUpdate = 8;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((opcode == 0x10310000) || ((opcode == 0x10320000 || (opcode == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = i;\n      ptr = flags;\n      if (0xff < bitValue) {\n        bitMask = i - 8;\n        ptr = flags + 1;\n      }\n      *ptr = *ptr & ~(0xf << (bitMask << 2 & 0xff)) | valueToUpdate << (bitMask << 2 & 0xff);\n      if ((inputParams[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift = (i & 3) << 2;\n        if (flags == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (flags == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (flags == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (flags == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((i >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((i >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shift) | index << shift;\n        if ((inputParams[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitValue;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitValue;\n        }\n        if ((inputParams[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitValue;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitValue;\n        }\n        if ((inputParams[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitValue;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitValue;\n        }\n        if ((inputParams[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitValue;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_flags_and_values_080040e8",
                "param_1": "flags",
                "param_2": "inputParams",
                "puVar1": "ptr",
                "uVar2": "bitMask",
                "uVar3": "bitValue",
                "uVar4": "i",
                "uVar5": "opcode",
                "uVar6": "valueToUpdate",
                "iVar7": "shift",
                "iVar8": "index"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int data_address,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(data_address + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "data_address",
                "param_2": "bit_mask"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_param_value_080042e2",
            "code": "\nvoid setParamValue_080042e2(int obj,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(obj + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(obj + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "obj",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_gpio_state_080042f0",
            "code": "\n\n\nvoid update_gpio_state_080042f0(uint state)\n\n{\n  if ((_DAT_40010414 & state) != 0) {\n    _DAT_40010414 = state;\n    handle_gpio_interrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_gpio_state_080042f0",
                "param_1": "state",
                "HAL_GPIO_EXTI_Callback": "handle_gpio_interrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_control_value_0800430c",
            "code": "\nundefined4 updateControlValue_0800430c(int *inputArray)\n\n{\n  if (*(char *)((int)inputArray + 0x3e) == '@') {\n    if (conditionCheck1 == 0) {\n      *(uint *)(*inputArray + 0x10) = inputValue & 0xfe;\n    }\n    else {\n      *(uint *)(*inputArray + 0x10) = inputValue & 0xffU | 1;\n    }\n  }\n  else if (conditionCheck2 == 0x4000) {\n    if (*(char *)((int)inputArray + 0x3d) == '!') {\n      *(uint *)(*inputArray + 0x10) = inputValue & 0xfe;\n    }\n    else {\n      *(uint *)(*inputArray + 0x10) = inputValue & 0xffU | 1;\n    }\n  }\n  else if (conditionCheck1 == 0) {\n    *(uint *)(*inputArray + 0x10) = (uint)(inputValue << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (conditionCheck1 == 1) {\n    *(uint *)(*inputArray + 0x10) = (uint)(inputValue << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_control_value_0800430c",
                "param_1": "inputArray",
                "param_1[0x14]": "conditionCheck1",
                "param_1[0x11]": "inputValue",
                "param_1[4]": "conditionCheck2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "assign_byte_value_from_param_index_08004396",
            "code": "\nundefined4 assignByteValueFromParamIndex_08004396(int *paramArray)\n\n{\n  *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "assign_byte_value_from_param_index_08004396",
                "param_1": "paramArray"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "update_flags_080043a2",
            "code": "\nundefined4 updateFlags_080043a2(uint **parameters)\n\n{\n  uint *pointerVar;\n  \n  pointerVar = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((arrayPointer != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((arrayPointer == (uint *)0x0) && (arrayPointer2 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      arrayPointer = (uint *)((int)arrayPointer + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (pointerVar == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          pointerVar = *parameters;\n          if ((pointerVar[1] & 0x800) == 0) {\n            *pointerVar = *pointerVar | 0x200;\n          }\n          else {\n            *pointerVar = *pointerVar & 0xfffffbff;\n          }\n        }\n        else if (((pointerVar == (uint *)0x4) || (pointerVar == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        pointerVar = *parameters;\n        if ((pointerVar[1] & 0x800) != 0) {\n          pointerVar[1] = pointerVar[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        pointerVar = *parameters;\n        if ((pointerVar[1] & 0x800) != 0) {\n          pointerVar[1] = pointerVar[1] | 0x1000;\n        }\n      }\n      arrayPointer = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "update_flags_080043a2",
                "param_1": "parameters",
                "puVar1": "pointerVar",
                "param_1[0x14]": "arrayPointer",
                "param_1[4]": "arrayPointer2",
                "puVar1[1]": "pointerVar[1]",
                "param_1[0xc]": "parameters[0xc]",
                "param_1[0xb]": "parameters[0xb]"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_byte_array_0800457c",
            "code": "\nundefined4 updateByteArray_0800457c(int *byteArrayPtr)\n\n{\n  byte *currentByte;\n  \n  if (*(short *)(byteArrayPtrOffsetAddress + 0x2a) != 0) {\n    currentByte = (byte *)byteArrayPtrOffset;\n    byteArrayPtrOffset = (int)(currentByte + 1);\n    *(uint *)(*byteArrayPtr + 0x10) = (uint)*currentByte;\n    *(short *)(byteArrayPtrOffsetAddress + 0x2a) = *(short *)(byteArrayPtrOffsetAddress + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_byte_array_0800457c",
                "param_1": "byteArrayPtr",
                "pbVar1": "currentByte",
                "param_1[9]": "byteArrayPtrOffset",
                "(int)param_1": "byteArrayPtrOffsetAddress"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_value_0800459c",
            "code": "\nundefined4 updateValue_0800459c(int *inputArray)\n\n{\n  undefined *ptrToValue;\n  \n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    ptrToValue = (undefined *)valuePointer;\n    valuePointer = (int)(ptrToValue + 1);\n    *ptrToValue = (char)*(undefined4 *)(*inputArray + 0x10);\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_value_0800459c",
                "param_1": "inputArray",
                "puVar1": "ptrToValue",
                "param_1[9]": "valuePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "configure_i2_c_080045c0",
            "code": "\nundefined4 configureI2C_080045c0(uint **i2cConfig)\n\n{\n  bool isPCLK1Below2MHz;\n  uint pclk1Freq;\n  uint *i2cClockDivisor;\n  uint tempVar;\n  \n  if (i2cConfig == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)i2cConfig + 0x3d) == '\\0') {\n    *(undefined *)(i2cConfig + 0xf) = 0;\n    configureI2C_080045c0Pins();\n  }\n  *(undefined *)((int)i2cConfig + 0x3d) = 0x24;\n  **i2cConfig = **i2cConfig & 0xfffffffe;\n  pclk1Freq = HAL_RCC_GetPCLK1Freq();\n  if (i2cConfig[1] < (uint *)0x186a1) {\n    if (pclk1Freq < 2000000) {\n      isPCLK1Below2MHz = true;\n    }\n    else {\n      isPCLK1Below2MHz = false;\n    }\n  }\n  else {\n    isPCLK1Below2MHz = pclk1Freq < 4000000;\n  }\n  if (isPCLK1Below2MHz) {\n    return 1;\n  }\n  tempVar = pclk1Freq / 1000000;\n  (*i2cConfig)[1] = tempVar;\n  if ((uint *)0x186a0 < i2cConfig[1]) {\n    tempVar = (tempVar * 300) / 1000;\n  }\n  (*i2cConfig)[8] = tempVar + 1;\n  i2cClockDivisor = i2cConfig[1];\n  if (i2cClockDivisor < (uint *)0x186a1) {\n    pclk1Freq = (pclk1Freq - 1) / (uint)((int)i2cClockDivisor << 1) + 1 & 0xfff;\n    if (pclk1Freq < 4) {\n      pclk1Freq = 4;\n    }\n  }\n  else {\n    if (i2cConfig[2] == (uint *)0x0) {\n      tempVar = (pclk1Freq - 1) / (uint)((int)i2cClockDivisor * 3);\n    }\n    else {\n      tempVar = (pclk1Freq - 1) / (uint)((int)i2cClockDivisor * 0x19);\n    }\n    if ((tempVar + 1 & 0xfff) == 0) {\n      pclk1Freq = 1;\n    }\n    else if (i2cConfig[2] == (uint *)0x0) {\n      pclk1Freq = (pclk1Freq - 1) / (uint)((int)i2cClockDivisor * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      pclk1Freq = (pclk1Freq - 1) / (uint)((int)i2cClockDivisor * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*i2cConfig)[7] = pclk1Freq;\n  **i2cConfig = (uint)i2cConfig[7] | (uint)i2cConfig[8];\n  (*i2cConfig)[2] = (uint)i2cConfig[4] | (uint)i2cConfig[3];\n  (*i2cConfig)[3] = (uint)i2cConfig[5] | (uint)i2cConfig[6];\n  **i2cConfig = **i2cConfig | 1;\n  i2cConfig[0x10] = (uint *)0x0;\n  *(undefined *)((int)i2cConfig + 0x3d) = 0x20;\n  i2cConfig[0xc] = (uint *)0x0;\n  *(undefined *)((int)i2cConfig + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "configure_i2_c_080045c0",
                "param_1": "i2cConfig",
                "bVar1": "isPCLK1Below2MHz",
                "uVar2": "pclk1Freq",
                "puVar3": "i2cClockDivisor",
                "uVar4": "tempVar",
                "HAL_I2C_MspInit": "configureI2CPins"
            },
            "calling": [
                "i2c_custom_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "check_and_initialize_08004728",
            "code": "\nundefined4 checkAndInitialize_08004728(uint **inputArray,uint *param_2,uint *param_3,undefined2 param_4)\n\n{\n  undefined4 returnValue;\n  uint *currentPointer;\n  int localCounter;\n  \n  if (*(char *)((int)inputArray + 0x3d) == ' ') {\n    localCounter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (localCounter == 0) {\n        inputArray[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputArray + 0x3d) = 0x20;\n        *(undefined *)(inputArray + 0xf) = 0;\n        return 3;\n      }\n      currentPointer = *inputArray;\n      localCounter = localCounter + -1;\n    } while ((currentPointer[6] & 2) != 0);\n    if (*(char *)(inputArray + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputArray + 0xf) = 1;\n      if ((*currentPointer & 1) == 0) {\n        *currentPointer = *currentPointer | 1;\n      }\n      **inputArray = **inputArray & 0xfffff7ff;\n      *(undefined *)((int)inputArray + 0x3d) = 0x21;\n      *(undefined *)((int)inputArray + 0x3e) = 0x10;\n      returnValue = 0;\n      inputArray[0x10] = (uint *)0x0;\n      inputArray[9] = param_3;\n      *(undefined2 *)((int)inputArray + 0x2a) = param_4;\n      inputArray[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(inputArray + 10) = *(undefined2 *)((int)inputArray + 0x2a);\n      inputArray[0x11] = param_2;\n      **inputArray = **inputArray | 0x100;\n      *(undefined *)(inputArray + 0xf) = 0;\n      (*inputArray)[1] = (*inputArray)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004728": "check_and_initialize_08004728",
                "param_1": "inputArray",
                "uVar1": "returnValue",
                "puVar2": "currentPointer",
                "local_c": "localCounter"
            },
            "calling": [
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "initialize_communication_080047f4",
            "code": "\nundefined4 initializeCommunication_080047f4(uint **communicationBuffer,uint *inputData,uint *outputData,undefined2 communicationFlag)\n\n{\n  undefined4 returnValue;\n  uint *currentBuffer;\n  int iterationCount;\n  \n  if (*(char *)((int)communicationBuffer + 0x3d) == ' ') {\n    iterationCount = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (iterationCount == 0) {\n        communicationBuffer[0xc] = (uint *)0x0;\n        *(undefined *)((int)communicationBuffer + 0x3d) = 0x20;\n        *(undefined *)(communicationBuffer + 0xf) = 0;\n        return 3;\n      }\n      currentBuffer = *communicationBuffer;\n      iterationCount = iterationCount + -1;\n    } while ((currentBuffer[6] & 2) != 0);\n    if (*(char *)(communicationBuffer + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(communicationBuffer + 0xf) = 1;\n      if ((*currentBuffer & 1) == 0) {\n        *currentBuffer = *currentBuffer | 1;\n      }\n      **communicationBuffer = **communicationBuffer & 0xfffff7ff;\n      *(undefined *)((int)communicationBuffer + 0x3d) = 0x22;\n      *(undefined *)((int)communicationBuffer + 0x3e) = 0x10;\n      returnValue = 0;\n      communicationBuffer[0x10] = (uint *)0x0;\n      communicationBuffer[9] = outputData;\n      *(undefined2 *)((int)communicationBuffer + 0x2a) = communicationFlag;\n      communicationBuffer[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(communicationBuffer + 10) = *(undefined2 *)((int)communicationBuffer + 0x2a);\n      communicationBuffer[0x11] = inputData;\n      **communicationBuffer = **communicationBuffer | 0x400;\n      **communicationBuffer = **communicationBuffer | 0x100;\n      *(undefined *)(communicationBuffer + 0xf) = 0;\n      (*communicationBuffer)[1] = (*communicationBuffer)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "initialize_communication_080047f4",
                "param_1": "communicationBuffer",
                "param_2": "inputData",
                "param_3": "outputData",
                "param_4": "communicationFlag",
                "uVar1": "returnValue",
                "puVar2": "currentBuffer",
                "local_c": "iterationCount"
            },
            "calling": [
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "process_input_080048c8",
            "code": "\nundefined4 processInput_080048c8(uint **inputParams,uint *paramPtr1,int paramValue,uint *paramPtr2)\n\n{\n  undefined4 result;\n  uint *ptrVar;\n  \n  if (*(char *)((int)inputParams + 0x3d) == '(') {\n    if (paramPtr1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (paramValue == 0) {\n      result = 1;\n    }\n    else if (*(char *)(inputParams + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputParams + 0xf) = 1;\n      ptrVar = *inputParams;\n      if ((*ptrVar & 1) == 0) {\n        *ptrVar = *ptrVar | 1;\n      }\n      **inputParams = **inputParams & 0xfffff7ff;\n      *(undefined *)((int)inputParams + 0x3d) = 0x29;\n      *(undefined *)((int)inputParams + 0x3e) = 0x20;\n      result = 0;\n      inputParams[0x10] = (uint *)0x0;\n      inputParams[9] = paramPtr1;\n      *(short *)((int)inputParams + 0x2a) = (short)paramValue;\n      inputParams[0xb] = paramPtr2;\n      *(undefined2 *)(inputParams + 10) = *(undefined2 *)((int)inputParams + 0x2a);\n      *(undefined *)(inputParams + 0xf) = 0;\n      (*inputParams)[1] = (*inputParams)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "process_input_080048c8",
                "param_1": "inputParams",
                "param_2": "paramPtr1",
                "param_3": "paramValue",
                "param_4": "paramPtr2",
                "uVar1": "result",
                "puVar2": "ptrVar"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "evaluate_condition_08004954",
            "code": "\nundefined4 evaluate_condition_08004954(uint **input,uint *output,int length,uint *data)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input + 0x3d) == '(') {\n    if (output == (uint *)0x0) {\n      result = 1;\n    }\n    else if (length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input + 0xf) = 1;\n      ptr = *input;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input = **input & 0xfffff7ff;\n      *(undefined *)((int)input + 0x3d) = 0x2a;\n      *(undefined *)((int)input + 0x3e) = 0x20;\n      result = 0;\n      input[0x10] = (uint *)0x0;\n      input[9] = output;\n      *(short *)((int)input + 0x2a) = (short)length;\n      input[0xb] = data;\n      *(undefined2 *)(input + 10) = *(undefined2 *)((int)input + 0x2a);\n      *(undefined *)(input + 0xf) = 0;\n      (*input)[1] = (*input)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "evaluate_condition_08004954",
                "param_1": "input",
                "param_2": "output",
                "param_3": "length",
                "param_4": "data",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_data_080049e0",
            "code": "\nundefined4 initializeData_080049e0(uint **data)\n\n{\n  uint *ptrData;\n  \n  if (*(char *)((int)data + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)data + 0x3d) = 0x28;\n  ptrData = *data;\n  if ((*ptrData & 1) == 0) {\n    *ptrData = *ptrData | 1;\n  }\n  **data = **data | 0x400;\n  (*data)[1] = (*data)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_data_080049e0",
                "param_1": "data",
                "puVar1": "ptrData"
            },
            "calling": [
                "i2c_attachSlaveRxEvent",
                "HAL_I2C_ErrorCallback",
                "i2c_attachSlaveTxEvent",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "update_buffer_data_08004a24",
            "code": "\nundefined4 updateBufferData_08004a24(int *bufferPtr)\n\n{\n  char character;\n  byte *bytePtr;\n  \n  character = *(char *)((int)bufferPtr + 0x3d);\n  if (*(short *)((int)bufferPtr + 0x2a) != 0) {\n    bytePtr = (byte *)bufferPtr[9];\n    bufferPtr[9] = (int)(bytePtr + 1);\n    *(uint *)(*bufferPtr + 0x10) = (uint)*bytePtr;\n    *(short *)((int)bufferPtr + 0x2a) = *(short *)((int)bufferPtr + 0x2a) + -1;\n    if ((*(short *)((int)bufferPtr + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*bufferPtr + 4) = *(uint *)(*bufferPtr + 4) & 0xfffffbff;\n      bufferPtr[0xc] = 0x21;\n      *(undefined *)((int)bufferPtr + 0x3d) = 0x28;\n      HAL_I2C_SlaveTxCpltCallback();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "update_buffer_data_08004a24",
                "param_1": "bufferPtr",
                "cVar1": "character",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "process_data_08004a76",
            "code": "\nundefined4 processData_08004a76(int *param_1)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)param_1 + 0x3d);\n  if (*(short *)((int)param_1 + 0x2a) != 0) {\n    ptr = (undefined *)nextPtr;\n    nextPtr = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*param_1 + 0x10);\n    *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n    if ((*(short *)((int)param_1 + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*param_1 + 4) = *(uint *)(*param_1 + 4) & 0xfffffbff;\n      paramC = 0x22;\n      *(undefined *)((int)param_1 + 0x3d) = 0x28;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "process_data_08004a76",
                "cVar1": "charValue",
                "puVar2": "ptr",
                "param_1[9]": "nextPtr",
                "param_1[0xc]": "paramC"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_i2_c_address_08004ac2",
            "code": "\nundefined4 processI2CAddress_08004ac2(int *i2cData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selectedAddress;\n  uint addressFlags;\n  \n  addressFlags = *(uint *)(*i2cData + 0x18);\n  if ((addressFlags & 0x80) == 0) {\n    selectedAddress = *(undefined2 *)(i2cData + 3);\n  }\n  else {\n    selectedAddress = *(undefined2 *)(i2cData + 6);\n  }\n  HAL_I2C_AddrCallback(i2cData,(*(uint *)(*i2cData + 0x18) & 4) == 0,selectedAddress,addressFlags,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_i2_c_address_08004ac2",
                "param_1": "i2cData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "selectedAddress",
                "uVar2": "addressFlags"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "handle_i2_c_interrupt_08004aec",
            "code": "\nundefined4 handleI2CInterrupt_08004aec(uint **i2cParams)\n\n{\n  if (((i2cParams[0xb] == (uint *)0x4) || (i2cParams[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)i2cParams + 0x3d) == '(')) {\n    i2cParams[0xb] = (uint *)0xffff0000;\n    (*i2cParams)[1] = (*i2cParams)[1] & 0xfffff8ff;\n    (*i2cParams)[5] = 0xfffffbff;\n    **i2cParams = **i2cParams & 0xfffffbff;\n    i2cParams[0xc] = (uint *)0x0;\n    *(undefined *)((int)i2cParams + 0x3d) = 0x20;\n    *(undefined *)((int)i2cParams + 0x3e) = 0;\n    callI2CListenCpltCallback();\n  }\n  else if (*(char *)((int)i2cParams + 0x3d) == '!') {\n    i2cParams[0xb] = (uint *)0xffff0000;\n    i2cParams[0xc] = (uint *)0x21;\n    *(undefined *)((int)i2cParams + 0x3d) = 0x20;\n    *(undefined *)((int)i2cParams + 0x3e) = 0;\n    (*i2cParams)[1] = (*i2cParams)[1] & 0xfffff8ff;\n    (*i2cParams)[5] = 0xfffffbff;\n    **i2cParams = **i2cParams & 0xfffffbff;\n    callI2CSlaveTxCpltCallback();\n  }\n  else {\n    (*i2cParams)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "handle_i2_c_interrupt_08004aec",
                "param_1": "i2cParams",
                "HAL_I2C_ListenCpltCallback()": "callI2CListenCpltCallback()",
                "HAL_I2C_SlaveTxCpltCallback()": "callI2CSlaveTxCpltCallback()"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_data_08004b82",
            "code": "\nundefined4 processData_08004b82(uint **params)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)params + 0x3d);\n  pointer = params[0xb];\n  if ((*(short *)(params + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*params)[1] = (*params)[1] & 0xfffff8ff;\n      **params = **params | 0x200;\n      params[0xc] = (uint *)0x0;\n      *(undefined *)((int)params + 0x3d) = 0x20;\n      if (*(char *)((int)params + 0x3e) == '@') {\n        *(undefined *)((int)params + 0x3e) = 0;\n        handleI2CMemTxCplt();\n      }\n      else {\n        *(undefined *)((int)params + 0x3e) = 0;\n        handleI2CMasterTxCplt();\n      }\n    }\n    else {\n      (*params)[1] = (*params)[1] & 0xfffff8ff;\n      params[0xc] = (uint *)0x11;\n      *(undefined *)((int)params + 0x3e) = 0;\n      *(undefined *)((int)params + 0x3d) = 0x20;\n      handleI2CMasterTxCplt();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)params + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)params + 0x2a) == 0) {\n      (*params)[1] = (*params)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)params + 0x3e) == '@') {\n      if (params[0x14] == (uint *)0x0) {\n        if (params[0x13] == (uint *)0x1) {\n          (*params)[4] = (uint)params[0x12] & 0xff;\n          params[0x14] = (uint *)((int)params[0x14] + 2);\n        }\n        else {\n          (*params)[4] = (uint)((int)params[0x12] << 0x10) >> 0x18;\n          params[0x14] = (uint *)((int)params[0x14] + 1);\n        }\n      }\n      else if (params[0x14] == (uint *)0x1) {\n        (*params)[4] = (uint)params[0x12] & 0xff;\n        params[0x14] = (uint *)((int)params[0x14] + 1);\n      }\n      else if (params[0x14] == (uint *)0x2) {\n        if (*(char *)((int)params + 0x3d) == '\\\"') {\n          **params = **params | 0x100;\n        }\n        else if (*(char *)((int)params + 0x3d) == '!') {\n          pointer = params[9];\n          params[9] = (uint *)((int)pointer + 1);\n          (*params)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = params[9];\n      params[9] = (uint *)((int)pointer + 1);\n      (*params)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_data_08004b82",
                "param_1": "params",
                "cVar1": "character",
                "puVar2": "pointer",
                "HAL_I2C_MemTxCpltCallback": "handleI2CMemTxCplt",
                "HAL_I2C_MasterTxCpltCallback": "handleI2CMasterTxCplt"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_data_08004ccc",
            "code": "\nundefined4 processData_08004ccc(uint **data)\n\n{\n  uint *value;\n  \n  value = data[11];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        data[12] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MemTxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MasterTxCpltCallback();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        data[12] = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      value = data[9];\n      data[9] = (uint *)((int)value + 1);\n      (*data)[4] = (uint)*(byte *)value;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_data_08004ccc",
                "param_1": "data",
                "puVar1": "value",
                "param_1[0xb]": "data[11]",
                "param_1[0xc]": "data[12]"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "update_flags_and_callbacks_08004d6c",
            "code": "\nundefined4 updateFlagsAndCallbacks_08004d6c(uint **parameters)\n\n{\n  uint *pointer;\n  \n  if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)parameters + 0x2a) < 4) {\n      if (*(ushort *)((int)parameters + 0x2a) - 2 < 2) {\n        if (value3 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n      }\n      else {\n        if (value3 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n        (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n        pointer = value4;\n        value4 = (uint *)((int)pointer + 1);\n        *(char *)pointer = (char)(*parameters)[4];\n        *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        parameters[0xc] = (uint *)0x0;\n        if (*(char *)((int)parameters + 0x3e) == '@') {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          HAL_I2C_MemRxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)parameters + 0x3e) = 0;\n          HAL_I2C_MasterRxCpltCallback();\n        }\n      }\n    }\n    else {\n      pointer = value4;\n      value4 = (uint *)((int)pointer + 1);\n      *(char *)pointer = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "update_flags_and_callbacks_08004d6c",
                "param_1": "parameters",
                "puVar1": "pointer",
                "param_1[0xb]": "value3",
                "param_1[9]": "value4"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "handle_i2c_data_08004e3c",
            "code": "\nundefined4 handle_i2c_data_08004e3c(uint **data_ptr)\n\n{\n  uint *ptr_value;\n  \n  ptr_value = ptr_value_b;\n  if (*(short *)(data_ptr_cast + 0x2a) == 3) {\n    if (((ptr_value == (uint *)0x4) || (ptr_value == (uint *)0x8)) || (ptr_value == (uint *)0xffff0000)) {\n      **data_ptr = **data_ptr & 0xfffffbff;\n    }\n    ptr_value = ptr_value_9;\n    ptr_value_9 = (uint *)(ptr_value_cast + 1);\n    *(char *)ptr_value = (char)(*data_ptr)[4];\n    *(short *)(data_ptr_cast + 0x2a) = *(short *)(data_ptr_cast + 0x2a) + -1;\n  }\n  else if (*(short *)(data_ptr_cast + 0x2a) == 2) {\n    if (((ptr_value == (uint *)0x4) || (ptr_value == (uint *)0x8)) || (ptr_value == (uint *)0xffff0000)) {\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffffcff;\n      **data_ptr = **data_ptr | 0x200;\n    }\n    else {\n      if (ptr_value == (uint *)0x2) {\n        **data_ptr = **data_ptr | 0x400;\n      }\n      else {\n        **data_ptr = **data_ptr & 0xfffffbff;\n      }\n      (*data_ptr)[1] = (*data_ptr)[1] & 0xfffffcff;\n    }\n    ptr_value = ptr_value_9;\n    ptr_value_9 = (uint *)(ptr_value_cast + 1);\n    *(char *)ptr_value = (char)(*data_ptr)[4];\n    *(short *)(data_ptr_cast + 0x2a) = *(short *)(data_ptr_cast + 0x2a) + -1;\n    ptr_value = ptr_value_9;\n    ptr_value_9 = (uint *)(ptr_value_cast + 1);\n    *(char *)ptr_value = (char)(*data_ptr)[4];\n    *(short *)(data_ptr_cast + 0x2a) = *(short *)(data_ptr_cast + 0x2a) + -1;\n    *(undefined *)(data_ptr_cast + 0x3d) = 0x20;\n    ptr_value_c = (uint *)0x0;\n    if (*(char *)(data_ptr_cast + 0x3e) == '@') {\n      *(undefined *)(data_ptr_cast + 0x3e) = 0;\n      HAL_I2C_MemRxCpltCallback();\n    }\n    else {\n      *(undefined *)(data_ptr_cast + 0x3e) = 0;\n      HAL_I2C_MasterRxCpltCallback();\n    }\n  }\n  else {\n    ptr_value = ptr_value_9;\n    ptr_value_9 = (uint *)(ptr_value_cast + 1);\n    *(char *)ptr_value = (char)(*data_ptr)[4];\n    *(short *)(data_ptr_cast + 0x2a) = *(short *)(data_ptr_cast + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "handle_i2c_data_08004e3c",
                "param_1": "data_ptr",
                "puVar1": "ptr_value",
                "(int)param_1": "data_ptr_cast",
                "param_1[0xb]": "ptr_value_b",
                "param_1[9]": "ptr_value_9",
                "(int)puVar1": "ptr_value_cast",
                "param_1[0xc]": "ptr_value_c"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "handle_i2_c_event_08004f3c",
            "code": "\nvoid handleI2CEvent_08004f3c(uint **eventData)\n\n{\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  \n  if (*(byte *)((int)eventData + 0x3d) - 0x29 < 2) {\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)eventData + 0x3d) != '`') && (((*eventData)[1] & 0x800) == 0)) {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n    }\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n  }\n  **eventData = **eventData & 0xfffff7ff;\n  ptr3 = *eventData;\n  if ((ptr3[1] & 0x800) == 0) {\n    if (*(char *)((int)eventData + 0x3d) == '`') {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n      eventData[0x10] = (uint *)0x0;\n      if ((ptr3[5] & 0x40) != 0) {\n        ptr2 = eventData[9];\n        eventData[9] = (uint *)((int)ptr2 + 1);\n        *(char *)ptr2 = (char)ptr3[4];\n      }\n      **eventData = **eventData & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(eventData);\n    }\n    else {\n      if ((ptr3[5] & 0x40) != 0) {\n        ptr2 = eventData[9];\n        eventData[9] = (uint *)((int)ptr2 + 1);\n        *(char *)ptr2 = (char)ptr3[4];\n      }\n      HAL_I2C_ErrorCallback(eventData);\n    }\n  }\n  else {\n    ptr3[1] = ptr3[1] & 0xfffff7ff;\n    if (*(char *)((int)eventData[0xd] + 0x21) == '\\x01') {\n      eventData[0xe][0xd] = (uint)&LAB_080053cc_1;\n      result = HAL_DMA_Abort_IT(eventData[0xe]);\n      if (result != 0) {\n        if (((*eventData)[5] & 0x40) != 0) {\n          ptr3 = eventData[9];\n          eventData[9] = (uint *)((int)ptr3 + 1);\n          *(char *)ptr3 = (char)(*eventData)[4];\n        }\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)eventData[0xe][0xd])();\n      }\n    }\n    else {\n      eventData[0xd][0xd] = (uint)&LAB_080053cc_1;\n      result = HAL_DMA_Abort_IT(eventData[0xd]);\n      if (result != 0) {\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)eventData[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)eventData + 0x3d) == '(') && (((uint)eventData[0x10] & 4) != 0)) {\n    eventData[0xb] = (uint *)0xffff0000;\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback(eventData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "handle_i2_c_event_08004f3c",
                "param_1": "eventData",
                "iVar1": "result",
                "puVar2": "ptr2",
                "puVar3": "ptr3"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_data_08005084",
            "code": "\nundefined4 processData_08005084(uint **data)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  pointer1 = *data;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = data[9];\n      data[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      pointer1 = data[9];\n      data[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_ListenCpltCallback();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  else {\n    I2C_ITError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_data_08005084",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "handle_i2_c_events_08005188",
            "code": "\nvoid handleI2CEvents_08005188(int *data)\n\n{\n  int dataPtr;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  dataPtr = *data;\n  flag3 = *(uint *)(dataPtr + 0x18);\n  flag1 = *(uint *)(dataPtr + 0x14);\n  flag2 = *(uint *)(dataPtr + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          I2C_Master_ADDR(data);\n        }\n      }\n      else {\n        I2C_Master_ADD10(data);\n      }\n    }\n    else {\n      I2C_Master_SB(data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      I2C_Slave_ADDR();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      I2C_Slave_STOPF(data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "handle_i2_c_events_08005188",
                "param_1": "data",
                "iVar1": "dataPtr",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3"
            },
            "calling": [],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_RXNE",
                "I2C_SlaveReceive_BTF",
                "I2C_SlaveTransmit_BTF",
                "I2C_SlaveTransmit_TXE",
                "I2C_MasterReceive_BTF",
                "I2C_Slave_ADDR",
                "I2C_MasterTransmit_BTF",
                "I2C_Master_ADDR",
                "I2C_MasterTransmit_TXE",
                "I2C_Master_SB",
                "I2C_Slave_STOPF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "update_status_and_settings_080052f0",
            "code": "\nvoid updateStatusAndSettings_080052f0(uint **inputData)\n\n{\n  char character;\n  uint *ptr;\n  uint value1;\n  uint value2;\n  \n  ptr = *inputData;\n  value1 = ptr[5];\n  value2 = ptr[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    inputData[0x10] = (uint *)((uint)inputData[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n    **inputData = **inputData | 0x8000;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    inputData[0x10] = (uint *)((uint)inputData[0x10] | 2);\n    (*inputData)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)inputData + 0x3d);\n    if (((*(char *)((int)inputData + 0x3e) == ' ') && (*(short *)((int)inputData + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (inputData[0xc] == (uint *)0x21)))))) {\n      I2C_Slave_AF(inputData);\n    }\n    else {\n      inputData[0x10] = (uint *)((uint)inputData[0x10] | 4);\n      if (*(char *)((int)inputData + 0x3e) == '\\x10') {\n        **inputData = **inputData | 0x200;\n      }\n      (*inputData)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    inputData[0x10] = (uint *)((uint)inputData[0x10] | 8);\n    (*inputData)[5] = 0xfffff7ff;\n  }\n  if (inputData[0x10] != (uint *)0x0) {\n    I2C_ITError(inputData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "update_status_and_settings_080052f0",
                "param_1": "inputData",
                "cVar1": "character",
                "puVar2": "ptr",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_value_0800542a",
            "code": "\nundefined getByteValue_0800542a(int address)\n\n{\n  return *(undefined *)(address + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_value_0800542a",
                "param_1": "address"
            },
            "calling": [
                "i2c_master_write",
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_offset_value_08005430",
            "code": "\nundefined4 getOffsetValue_08005430(int offset)\n\n{\n  return *(undefined4 *)(offset + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_offset_value_08005430",
                "param_1": "offset"
            },
            "calling": [
                "i2c_master_write",
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\nvoid delayFunction_08005434(int delayTime)\n\n{\n  bool isNotZero;\n  int iterationCount;\n  \n  iterationCount = delayTime * (DAT_20000018 / 8000);\n  do {\n    isNotZero = iterationCount != 0;\n    iterationCount = iterationCount + -1;\n  } while (isNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "param_1": "delayTime",
                "local_4": "iterationCount",
                "bVar1": "isNotZero"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "check_peripheral_status_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkPeripheralStatus_08005460(uint *peripheralStatus)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint value;\n  bool flag;\n  \n  if ((*peripheralStatus & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (peripheralStatus[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = peripheralStatus[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (peripheralStatus[1] == 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*peripheralStatus & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (peripheralStatus[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | peripheralStatus[5] << 3;\n    }\n    else if (peripheralStatus[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | peripheralStatus[5] << 3;\n    }\n  }\n  if ((*peripheralStatus & 8) != 0) {\n    if (peripheralStatus[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((*peripheralStatus & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    value = peripheralStatus[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (peripheralStatus[3] == 0) {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (peripheralStatus[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (peripheralStatus[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (peripheralStatus[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | peripheralStatus[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | peripheralStatus[8] | peripheralStatus[9];\n        _DAT_42420060 = 1;\n        startTime = HAL_GetTick();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = HAL_GetTick();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "check_peripheral_status_08005460",
                "param_1": "peripheralStatus",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "flag"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "RCC_Delay",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_value_08005840",
            "code": "\n\n\nuint calculateValue_08005840(void)\n\n{\n  uint uVar1;\n  undefined2 calculationResult;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  \n  var4 = 0x10100f0e;\n  var3 = 0xd0c0b0a;\n  var2 = 0x9080706;\n  var1 = 0x5040302;\n  calculationResult = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&var1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&calculationResult - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "local_1c": "calculationResult",
                "uStack_18": "var1",
                "uStack_14": "var2",
                "uStack_10": "var3",
                "uStack_c": "var4"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "initialize_system_080058ac",
            "code": "\n\n\nundefined4 initializeSystem_080058ac(uint *configParams,uint numParams)\n\n{\n  int startTime;\n  int currentTime;\n  uint sysClockFreq;\n  \n  if ((_DAT_40022000 & 7) < numParams) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | numParams;\n    if (numParams != (numParams & 7)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configParams[2];\n  }\n  if ((*configParams & 1) != 0) {\n    sysClockFreq = configParams[1];\n    if (sysClockFreq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sysClockFreq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sysClockFreq | _DAT_40021004 & 0xfffffffc;\n    startTime = HAL_GetTick();\n    if (configParams[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (configParams[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (numParams < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | numParams;\n    if (numParams != (numParams & 7)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configParams[3];\n  }\n  if ((*configParams & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configParams[4] << 3;\n  }\n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000018 = sysClockFreq >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "initialize_system_080058ac",
                "param_1": "configParams",
                "param_2": "numParams",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "sysClockFreq"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_peripheral_080058d2",
            "code": "\n\n\nundefined4 initializePeripheral_080058d2(uint *flags,uint num)\n\n{\n  int startTime;\n  int currTime;\n  uint sysClockFreq;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    sysClockFreq = flags[1];\n    if (sysClockFreq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sysClockFreq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sysClockFreq | _DAT_40021004 & 0xfffffffc;\n    startTime = HAL_GetTick();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currTime = HAL_GetTick();\n        if (5000 < (uint)(currTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currTime = HAL_GetTick();\n        if (5000 < (uint)(currTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currTime = HAL_GetTick();\n        if (5000 < (uint)(currTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (num < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | num;\n    if (num != (num & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000018 = sysClockFreq >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_peripheral_080058d2",
                "param_1": "flags",
                "param_2": "num",
                "iVar1": "startTime",
                "iVar2": "currTime",
                "uVar3": "sysClockFreq"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_global_variable_08005a1c",
            "code": "\nundefined4 getGlobalVariable_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_global_variable_08005a1c"
            },
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_adjusted_hclk_freq_08005a28",
            "code": "\n\n\nuint getAdjustedHCLKFreq_08005a28(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_adjusted_hclk_freq_08005a28",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "UART_SetConfig",
                "getTimerClkFreq",
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_hclk_frequency_08005a48",
            "code": "\n\n\nuint getHCLKFrequency_08005a48(void)\n\n{\n  uint HCLKFrequency;\n  \n  HCLKFrequency = HAL_RCC_GetHCLKFreq();\n  return HCLKFrequency >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_hclk_frequency_08005a48",
                "uVar1": "HCLKFrequency"
            },
            "calling": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "UART_SetConfig",
                "getTimerClkFreq"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_params_08005a68",
            "code": "\n\n\nvoid initialize_params_08005a68(undefined4 *output,uint *config)\n\n{\n  *output = 0xf;\n  output[1] = _DAT_40021004 & 3;\n  output[2] = _DAT_40021004 & 0xf0;\n  output[3] = _DAT_40021004 & 0x700;\n  output[4] = _DAT_40021004 >> 3 & 0x700;\n  *config = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_params_08005a68",
                "param_1": "output",
                "param_2": "config"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_configuration_08005aa4",
            "code": "\n\n\nundefined4 updateConfiguration_08005aa4(uint *config)\n\n{\n  uint status;\n  uint oldValue;\n  int startTime;\n  int currentTime;\n  bool isFlagClear;\n  \n  if ((*config & 1) != 0) {\n    isFlagClear = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagClear) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (config[1] & 0x300))) {\n      oldValue = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      status = _DAT_40021020 & 1;\n      _DAT_40021020 = oldValue;\n      if (status != 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentTime = HAL_GetTick();\n          if (5000 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | config[1];\n    if (isFlagClear) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*config & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | config[2];\n  }\n  if ((*config & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | config[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_configuration_08005aa4",
                "param_1": "config",
                "uVar1": "status",
                "uVar2": "oldValue",
                "iVar3": "startTime",
                "iVar4": "currentTime",
                "bVar5": "isFlagClear"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_clock_frequency_08005bb8",
            "code": "\n\n\nuint calculateClockFrequency_08005bb8(int clockType)\n\n{\n  uint frequency;\n  undefined2 prescaler;\n  undefined4 multiplier;\n  undefined4 divider;\n  undefined4 prescalerValue;\n  undefined4 dividerValue;\n  \n  dividerValue = 0x10100f0e;\n  prescalerValue = 0xd0c0b0a;\n  divider = 0x9080706;\n  multiplier = 0x5040302;\n  prescaler = 0x201;\n  if (clockType == 2) {\n    frequency = HAL_RCC_GetPCLK2Freq();\n    frequency = frequency / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (clockType == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      frequency = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        frequency = 4000000;\n      }\n      else {\n        frequency = 8000000 / *(byte *)((int)&prescaler - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      frequency = frequency * *(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        frequency = (frequency * 2) / 3;\n      }\n    }\n  }\n  else if (clockType == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      frequency = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      frequency = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        frequency = 0;\n      }\n      else {\n        frequency = 0xf424;\n      }\n    }\n    else {\n      frequency = 0;\n    }\n  }\n  else {\n    frequency = 0;\n  }\n  return frequency;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_clock_frequency_08005bb8",
                "param_1": "clockType",
                "uVar1": "frequency",
                "local_24": "prescaler",
                "uStack_20": "multiplier",
                "uStack_1c": "divider",
                "uStack_18": "prescalerValue",
                "uStack_14": "dividerValue"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "handle_rtc_alarm_event_08005cb4",
            "code": "\n\n\nvoid handleRtcAlarmEvent_08005cb4(uint **rtcData)\n\n{\n  if (((**rtcData & 2) != 0) && (((*rtcData)[1] & 2) != 0)) {\n    handleAlarmCallback();\n    (*rtcData)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)rtcData + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "handle_rtc_alarm_event_08005cb4",
                "param_1": "rtcData",
                "HAL_RTC_AlarmAEventCallback": "handleAlarmCallback"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_data_08005cec",
            "code": "\nvoid updateData_08005cec(int dataAddress,uint *updateValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(dataAddress + 4);\n  updatedValue3 = *updateValues;\n  updatedValue1 = *(uint *)(dataAddress + 0x20) & 0xfffffffd | updateValues[2];\n  if (dataAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | updateValues[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | updateValues[5] | updateValues[6];\n  }\n  *(uint *)(dataAddress + 4) = updatedValue2;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(dataAddress + 0x34) = updateValues[1];\n  *(uint *)(dataAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_data_08005cec",
                "param_1": "dataAddress",
                "param_2": "updateValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "configure_data_08005d48",
            "code": "\nvoid configureData_08005d48(int configPtr,uint *dataPtr)\n\n{\n  uint configValue1;\n  uint configValue2;\n  uint dataValue;\n  \n  *(uint *)(configPtr + 0x20) = *(uint *)(configPtr + 0x20) & 0xfffffeff;\n  configValue2 = *(uint *)(configPtr + 4);\n  dataValue = *dataPtr;\n  configValue1 = *(uint *)(configPtr + 0x20) & 0xfffffdff | dataPtr[2] << 8;\n  if (configPtr == 0x40012c00) {\n    configValue1 = (configValue1 & 0xfffff7ff | dataPtr[3] << 8) & 0xfffffbff;\n    configValue2 = configValue2 & 0xffffcfff | dataPtr[5] << 4 | dataPtr[6] << 4;\n  }\n  *(uint *)(configPtr + 4) = configValue2;\n  *(uint *)(configPtr + 0x1c) = *(uint *)(configPtr + 0x1c) & 0xffffff8c | dataValue;\n  *(uint *)(configPtr + 0x3c) = dataPtr[1];\n  *(uint *)(configPtr + 0x20) = configValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "configure_data_08005d48",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "configValue1",
                "uVar2": "configValue2",
                "uVar3": "dataValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_parameter_values_08005dac",
            "code": "\nvoid updateParameterValues_08005dac(int parameterAddress,int *parameterValues)\n\n{\n  uint tempValue1;\n  int tempValue2;\n  int tempValue3;\n  \n  *(uint *)(parameterAddress + 0x20) = *(uint *)(parameterAddress + 0x20) & 0xffffefff;\n  tempValue1 = *(uint *)(parameterAddress + 4);\n  tempValue2 = *parameterValues;\n  tempValue3 = parameterValues[2];\n  if (parameterAddress == 0x40012c00) {\n    tempValue1 = tempValue1 & 0xffffbfff | parameterValues[5] << 6;\n  }\n  *(uint *)(parameterAddress + 4) = tempValue1;\n  *(uint *)(parameterAddress + 0x1c) = *(uint *)(parameterAddress + 0x1c) & 0xffff8cff | tempValue2 << 8;\n  *(int *)(parameterAddress + 0x40) = parameterValues[1];\n  *(uint *)(parameterAddress + 0x20) = *(uint *)(parameterAddress + 0x20) & 0xffffdfff | tempValue3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_parameter_values_08005dac",
                "param_1": "parameterAddress",
                "param_2": "parameterValues",
                "uVar1": "tempValue1",
                "iVar2": "tempValue2",
                "iVar3": "tempValue3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "deinitialize_timer_08005df4",
            "code": "\nvoid deinitializeTimer_08005df4(uint **timerPtr)\n\n{\n  uint *valPtr;\n  \n  *(undefined *)((int)timerPtr + 0x3d) = 2;\n  valPtr = *timerPtr;\n  if ((valPtr[8] & 0x1111) == 0) {\n    if ((valPtr[8] & 0x444) == 0) {\n      *valPtr = *valPtr & 0xfffffffe;\n    }\n  }\n  HAL_TIM_OC_MspDeInit(timerPtr);\n  *(undefined *)((int)timerPtr + 0x3d) = 0;\n  *(undefined *)(timerPtr + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "deinitialize_timer_08005df4",
                "param_1": "timerPtr",
                "puVar1": "valPtr"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "HAL_TIM_OC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "disable_pwm_timer_08005e2e",
            "code": "\nvoid disable_pwm_timer_08005e2e(uint **parameter)\n\n{\n  uint *pointer_to_param_1;\n  \n  *(undefined *)((int)parameter + 0x3d) = 2;\n  pointer_to_param_1 = *parameter;\n  if ((pointer_to_param_1[8] & 0x1111) == 0) {\n    if ((pointer_to_param_1[8] & 0x444) == 0) {\n      *pointer_to_param_1 = *pointer_to_param_1 & 0xfffffffe;\n    }\n  }\n  deinitialize_pwm_timer(parameter);\n  *(undefined *)((int)parameter + 0x3d) = 0;\n  *(undefined *)(parameter + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "disable_pwm_timer_08005e2e",
                "param_1": "parameter",
                "puVar1": "pointer_to_param_1",
                "HAL_TIM_PWM_MspDeInit": "deinitialize_pwm_timer"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "handle_tim_events_08005e6e",
            "code": "\nvoid handleTimEvents_08005e6e(int *timerData)\n\n{\n  int timerValue;\n  \n  timerValue = *timerData;\n  if (((*(uint *)(timerValue + 0x10) & 2) != 0) && ((*(uint *)(timerValue + 0xc) & 2) != 0)) {\n    *(undefined4 *)(timerValue + 0x10) = 0xfffffffd;\n    *(undefined *)(timerData + 7) = 1;\n    if ((*(uint *)(*timerData + 0x18) & 3) == 0) {\n      handleOC_DelayElapsedCallback();\n      handlePWM_PulseFinishedCallback(timerData);\n    }\n    else {\n      handleIC_CaptureCallback();\n    }\n    *(undefined *)(timerData + 7) = 0;\n  }\n  timerValue = *timerData;\n  if (((*(uint *)(timerValue + 0x10) & 4) != 0) && ((*(uint *)(timerValue + 0xc) & 4) != 0)) {\n    *(undefined4 *)(timerValue + 0x10) = 0xfffffffb;\n    *(undefined *)(timerData + 7) = 2;\n    if ((*(uint *)(*timerData + 0x18) & 0x300) == 0) {\n      handleOC_DelayElapsedCallback(timerData);\n      handlePWM_PulseFinishedCallback(timerData);\n    }\n    else {\n      handleIC_CaptureCallback(timerData);\n    }\n    *(undefined *)(timerData + 7) = 0;\n  }\n  timerValue = *timerData;\n  if (((*(uint *)(timerValue + 0x10) & 8) != 0) && ((*(uint *)(timerValue + 0xc) & 8) != 0)) {\n    *(undefined4 *)(timerValue + 0x10) = 0xfffffff7;\n    *(undefined *)(timerData + 7) = 4;\n    if ((*(uint *)(*timerData + 0x1c) & 3) == 0) {\n      handleOC_DelayElapsedCallback(timerData);\n      handlePWM_PulseFinishedCallback(timerData);\n    }\n    else {\n      handleIC_CaptureCallback(timerData);\n    }\n    *(undefined *)(timerData + 7) = 0;\n  }\n  timerValue = *timerData;\n  if (((*(uint *)(timerValue + 0x10) & 0x10) != 0) && ((*(uint *)(timerValue + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(timerValue + 0x10) = 0xffffffef;\n    *(undefined *)(timerData + 7) = 8;\n    if ((*(uint *)(*timerData + 0x1c) & 0x300) == 0) {\n      handleOC_DelayElapsedCallback(timerData);\n      handlePWM_PulseFinishedCallback(timerData);\n    }\n    else {\n      handleIC_CaptureCallback(timerData);\n    }\n    *(undefined *)(timerData + 7) = 0;\n  }\n  timerValue = *timerData;\n  if (((*(uint *)(timerValue + 0x10) & 1) != 0) && ((*(uint *)(timerValue + 0xc) & 1) != 0)) {\n    *(undefined4 *)(timerValue + 0x10) = 0xfffffffe;\n    handlePeriodElapsedCallback(timerData);\n  }\n  timerValue = *timerData;\n  if (((*(uint *)(timerValue + 0x10) & 0x80) != 0) && ((*(uint *)(timerValue + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(timerValue + 0x10) = 0xffffff7f;\n    handleBreakCallback(timerData);\n  }\n  timerValue = *timerData;\n  if (((*(uint *)(timerValue + 0x10) & 0x40) != 0) && ((*(uint *)(timerValue + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(timerValue + 0x10) = 0xffffffbf;\n    handleTriggerCallback(timerData);\n  }\n  timerValue = *timerData;\n  if (((*(uint *)(timerValue + 0x10) & 0x20) != 0) && ((*(uint *)(timerValue + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(timerValue + 0x10) = 0xffffffdf;\n    handleCommutationCallback(timerData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "handle_tim_events_08005e6e",
                "param_1": "timerData",
                "iVar1": "timerValue",
                "HAL_TIM_OC_DelayElapsedCallback": "handleOC_DelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback": "handlePWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback": "handleIC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback": "handlePeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback": "handleBreakCallback",
                "HAL_TIM_TriggerCallback": "handleTriggerCallback",
                "HAL_TIMEx_CommutationCallback": "handleCommutationCallback"
            },
            "calling": [],
            "called": [
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_08005fe8",
            "code": "\nvoid updateMemory_08005fe8(uint *memoryPointer,uint *dataPointer)\n\n{\n  uint revisedMemoryValue;\n  \n  revisedMemoryValue = *memoryPointer;\n  if ((((memoryPointer == (uint *)0x40012c00) || (memoryPointer == (uint *)0x40000000)) ||\n      (memoryPointer == (uint *)0x40000400)) || (memoryPointer == (uint *)0x40000800)) {\n    revisedMemoryValue = revisedMemoryValue & 0xffffff8f | dataPointer[1];\n  }\n  if (((memoryPointer == (uint *)0x40012c00) || (memoryPointer == (uint *)0x40000000)) ||\n     ((memoryPointer == (uint *)0x40000400 || (memoryPointer == (uint *)0x40000800)))) {\n    revisedMemoryValue = revisedMemoryValue & 0xfffffcff | dataPointer[3];\n  }\n  *memoryPointer = revisedMemoryValue & 0xffffff7f | dataPointer[5];\n  memoryPointer[0xb] = dataPointer[2];\n  memoryPointer[10] = *dataPointer;\n  if (memoryPointer == (uint *)0x40012c00) {\n    uRam40012c30 = dataPointer[4];\n  }\n  memoryPointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memoryPointer",
                "param_2": "dataPointer",
                "uVar1": "revisedMemoryValue"
            },
            "calling": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_OC_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_timer_08006060",
            "code": "\nundefined4 initializeTimer_08006060(undefined4 *timerParameters)\n\n{\n  if (timerParameters != (undefined4 *)0x0) {\n    if (*(char *)((int)timerParameters + 0x3d) == '\\0') {\n      *(undefined *)(timerParameters + 0xf) = 0;\n      HAL_TIM_OC_MspInit();\n    }\n    *(undefined *)((int)timerParameters + 0x3d) = 2;\n    TIM_Base_SetConfig(*timerParameters,timerParameters + 1);\n    *(undefined *)((int)timerParameters + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_timer_08006060",
                "param_1": "timerParameters"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_OC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_pwm_08006092",
            "code": "\nundefined4 initializePWM_08006092(undefined4 *configParams)\n\n{\n  if (configParams != (undefined4 *)0x0) {\n    if (*(char *)((int)configParams + 0x3d) == '\\0') {\n      *(undefined *)(configParams + 0xf) = 0;\n      HAL_TIM_PWM_MspInit();\n    }\n    *(undefined *)((int)configParams + 0x3d) = 2;\n    TIM_Base_SetConfig(*configParams,configParams + 1);\n    *(undefined *)((int)configParams + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_pwm_08006092",
                "param_1": "configParams"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_params_080060c4",
            "code": "\nvoid updateParams_080060c4(int param,int *paramsArray)\n\n{\n  uint updatedParam1;\n  uint updatedParam2;\n  int paramValue;\n  \n  *(uint *)(param + 0x20) = *(uint *)(param + 0x20) & 0xffffffef;\n  updatedParam2 = *(uint *)(param + 4);\n  paramValue = *paramsArray;\n  updatedParam1 = *(uint *)(param + 0x20) & 0xffffffdf | paramsArray[2] << 4;\n  if (param == 0x40012c00) {\n    updatedParam1 = (updatedParam1 & 0xffffff7f | paramsArray[3] << 4) & 0xffffffbf;\n    updatedParam2 = updatedParam2 & 0xfffff3ff | paramsArray[5] << 2 | paramsArray[6] << 2;\n  }\n  *(uint *)(param + 4) = updatedParam2;\n  *(uint *)(param + 0x18) = *(uint *)(param + 0x18) & 0xffff8cff | paramValue << 8;\n  *(int *)(param + 0x38) = paramsArray[1];\n  *(uint *)(param + 0x20) = updatedParam1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_params_080060c4",
                "param_1": "param",
                "param_2": "paramsArray",
                "uVar1": "updatedParam1",
                "uVar2": "updatedParam2",
                "iVar3": "paramValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "set_tim_config_08006128",
            "code": "\nundefined4 setTimConfig_08006128(undefined4 *config,undefined4 param1,undefined4 param2)\n\n{\n  if (*(char *)(config + 0xf) != '\\x01') {\n    *(undefined *)(config + 0xf) = 1;\n    *(undefined *)((int)config + 0x3d) = 2;\n    switch(param2) {\n    case 0:\n      TIM_OC1_SetConfig(*config);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(*config);\n      break;\n    case 8:\n      TIM_OC3_SetConfig(*config);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(*config);\n    }\n    *(undefined *)((int)config + 0x3d) = 1;\n    *(undefined *)(config + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "set_tim_config_08006128",
                "param_1": "config",
                "param_2": "param1",
                "param_3": "param2"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "configure_tim_output_compare_08006186",
            "code": "\nundefined4 configure_TIM_output_compare_08006186(int *config_data,int param_offset,undefined4 channel)\n\n{\n  if (*(char *)(config_data + 0xf) != '\\x01') {\n    *(undefined *)(config_data + 0xf) = 1;\n    *(undefined *)((int)config_data + 0x3d) = 2;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(*config_data);\n      *(uint *)(*config_data + 0x18) = *(uint *)(*config_data + 0x18) | 8;\n      *(uint *)(*config_data + 0x18) = *(uint *)(*config_data + 0x18) & 0xfffffffb;\n      *(uint *)(*config_data + 0x18) = *(uint *)(*config_data + 0x18) | *(uint *)(param_offset + 0x10);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(*config_data);\n      *(uint *)(*config_data + 0x18) = *(uint *)(*config_data + 0x18) | 0x800;\n      *(uint *)(*config_data + 0x18) = *(uint *)(*config_data + 0x18) & 0xfffffbff;\n      *(uint *)(*config_data + 0x18) = *(uint *)(*config_data + 0x18) | *(int *)(param_offset + 0x10) << 8;\n      break;\n    case 8:\n      TIM_OC3_SetConfig(*config_data);\n      *(uint *)(*config_data + 0x1c) = *(uint *)(*config_data + 0x1c) | 8;\n      *(uint *)(*config_data + 0x1c) = *(uint *)(*config_data + 0x1c) & 0xfffffffb;\n      *(uint *)(*config_data + 0x1c) = *(uint *)(*config_data + 0x1c) | *(uint *)(param_offset + 0x10);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(*config_data);\n      *(uint *)(*config_data + 0x1c) = *(uint *)(*config_data + 0x1c) | 0x800;\n      *(uint *)(*config_data + 0x1c) = *(uint *)(*config_data + 0x1c) & 0xfffffbff;\n      *(uint *)(*config_data + 0x1c) = *(uint *)(*config_data + 0x1c) | *(int *)(param_offset + 0x10) << 8;\n    }\n    *(undefined *)((int)config_data + 0x3d) = 1;\n    *(undefined *)(config_data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "configure_tim_output_compare_08006186",
                "param_1": "config_data",
                "param_2": "param_offset",
                "param_3": "channel"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bitwise_value_08006262",
            "code": "\nvoid updateBitwiseValue_08006262(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bitwise_value_08006262",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_PWM_Start",
                "HAL_TIM_PWM_Stop",
                "HAL_TIM_OC_Stop_IT"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "set_tim_channel_permissions_08006280",
            "code": "\nundefined4 setTimChannelPermissions_08006280(uint **channelParams,undefined4 permissionLevel)\n\n{\n  switch(permissionLevel) {\n  case 0:\n    (*channelParams)[3] = (*channelParams)[3] | 2;\n    break;\n  case 4:\n    (*channelParams)[3] = (*channelParams)[3] | 4;\n    break;\n  case 8:\n    (*channelParams)[3] = (*channelParams)[3] | 8;\n    break;\n  case 0xc:\n    (*channelParams)[3] = (*channelParams)[3] | 0x10;\n  }\n  setTimChannelCommand(*channelParams,permissionLevel,1);\n  if (*channelParams == (uint *)0x40012c00) {\n    timerFlag = timerFlag | 0x8000;\n  }\n  **channelParams = **channelParams | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "set_tim_channel_permissions_08006280",
                "param_1": "channelParams",
                "param_2": "permissionLevel",
                "TIM_CCxChannelCmd": "setTimChannelCommand",
                "uRam40012c44": "timerFlag"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "set_param_bitmask_080062f4",
            "code": "\nundefined4 setParamBitmask_080062f4(uint **paramArray,undefined4 bitmask)\n\n{\n  uint *currentParam;\n  \n  switch(bitmask) {\n  case 0:\n    (*paramArray)[3] = (*paramArray)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*paramArray)[3] = (*paramArray)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*paramArray)[3] = (*paramArray)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*paramArray)[3] = (*paramArray)[3] & 0xffffffef;\n  }\n  configureChannel(*paramArray,bitmask,0);\n  if (((*paramArray == (uint *)0x40012c00) && ((address2 & 0x1111) == 0)) &&\n     ((address2 & 0x444) == 0)) {\n    address3 = address3 & 0xffff7fff;\n  }\n  currentParam = *paramArray;\n  if (((currentParam[8] & 0x1111) == 0) && ((currentParam[8] & 0x444) == 0)) {\n    *currentParam = *currentParam & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "set_param_bitmask_080062f4",
                "param_1": "paramArray",
                "param_2": "bitmask",
                "puVar1": "currentParam",
                "TIM_CCxChannelCmd": "configureChannel",
                "uRam40012c20": "address2",
                "uRam40012c44": "address3"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "configure_c_cx_channel_08006390",
            "code": "\nundefined4 configureCCxChannel_08006390(uint **channelAddr,undefined4 paramValue)\n\n{\n  TIM_CCxChannelCmd(*channelAddr,paramValue,1);\n  if (*channelAddr == (uint *)0x40012c00) {\n    memoryFlag = memoryFlag | 0x8000;\n  }\n  **channelAddr = **channelAddr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "configure_c_cx_channel_08006390",
                "param_1": "channelAddr",
                "param_2": "paramValue",
                "uRam40012c44": "memoryFlag"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "configure_tim_channel_080063c0",
            "code": "\nundefined4 configureTimChannel_080063c0(uint **channelPtr,undefined4 channelValue)\n\n{\n  uint *channelPtrCopy;\n  \n  TIM_CCxChannelCmd(*channelPtr,channelValue,0);\n  if (((*channelPtr == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  channelPtrCopy = *channelPtr;\n  if (((channelPtrCopy[8] & 0x1111) == 0) && ((channelPtrCopy[8] & 0x444) == 0)) {\n    *channelPtrCopy = *channelPtrCopy & 0xfffffffe;\n  }\n  *(undefined *)((int)channelPtr + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "configure_tim_channel_080063c0",
                "param_1": "channelPtr",
                "param_2": "channelValue",
                "puVar1": "channelPtrCopy"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_value_at_offset_08006420",
            "code": "\nvoid updateValueAtOffset_08006420(int baseAddress,uint bitOffset,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_value_at_offset_08006420",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Start",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_channel_mode_and_flags_0800643c",
            "code": "\nundefined4 setChannelModeAndFlags_0800643c(uint **channelPtr,undefined4 channelMode)\n\n{\n  setChannelCommand(*channelPtr,channelMode,4);\n  (*channelPtr)[0x11] = (*channelPtr)[0x11] | 0x8000;\n  **channelPtr = **channelPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_channel_mode_and_flags_0800643c",
                "param_1": "channelPtr",
                "param_2": "channelMode",
                "TIM_CCxNChannelCmd": "setChannelCommand"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "disable_c_cx_n_channel_08006460",
            "code": "\nundefined4 disableCCxNChannel_08006460(uint **channelPointer,undefined4 param)\n\n{\n  uint *pointer;\n  \n  disableChannelCommand(*channelPointer,param,0);\n  pointer = *channelPointer;\n  if (((pointer[8] & 0x1111) == 0) && ((pointer[8] & 0x444) == 0)) {\n    pointer[0x11] = pointer[0x11] & 0xffff7fff;\n  }\n  pointer = *channelPointer;\n  if (((pointer[8] & 0x1111) == 0) && ((pointer[8] & 0x444) == 0)) {\n    *pointer = *pointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "disable_c_cx_n_channel_08006460",
                "param_1": "channelPointer",
                "param_2": "param",
                "puVar1": "pointer",
                "TIM_CCxNChannelCmd": "disableChannelCommand"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "clear_flags_080064b0",
            "code": "\nvoid clearFlags_080064b0(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xfffffedf;\n  *(uint *)(*ptr + 0x14) = *(uint *)(*ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "clear_flags_080064b0",
                "param_1": "ptr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_binary_data_080064cc",
            "code": "\nundefined4 processBinaryData_080064cc(int *data)\n\n{\n  short remainingIterations;\n  byte *bytePointer;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)data[8];\n    data[8] = (int)(bytePointer + 1);\n    *(uint *)(*data + 4) = (uint)*bytePointer;\n  }\n  remainingIterations = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remainingIterations;\n  if (remainingIterations == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_binary_data_080064cc",
                "param_1": "data",
                "sVar1": "remainingIterations",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_frequency_08006538",
            "code": "\nvoid calculateFrequency_08006538(int *frequencyData)\n\n{\n  int freq1;\n  int freq2;\n  int freq3;\n  int freq4;\n  int freq5;\n  int freq6;\n  int freq7;\n  int freq8;\n  int freq9;\n  int freq10;\n  \n  *(uint *)(*frequencyData + 0x10) = *(uint *)(*frequencyData + 0x10) & 0xffffcfff | frequencyData[3];\n  *(uint *)(*frequencyData + 0xc) =\n       frequencyData[2] | frequencyData[4] | frequencyData[5] | *(uint *)(*frequencyData + 0xc) & 0xffffe9f3;\n  *(uint *)(*frequencyData + 0x14) = *(uint *)(*frequencyData + 0x14) & 0xfffffcff | frequencyData[6];\n  freq10 = *frequencyData;\n  if (freq10 != 0x40013800) {\n    freq1 = HAL_RCC_GetPCLK1Freq();\n    freq6 = frequencyData[1];\n    freq2 = HAL_RCC_GetPCLK1Freq();\n    freq7 = frequencyData[1];\n    freq3 = HAL_RCC_GetPCLK1Freq();\n    freq8 = frequencyData[1];\n    freq4 = HAL_RCC_GetPCLK1Freq();\n    freq9 = frequencyData[1];\n    freq5 = HAL_RCC_GetPCLK1Freq();\n    *(uint *)(freq10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(freq4 * 0x19) / (uint)(freq9 << 2) +\n                        (int)(((ulonglong)(uint)(freq5 * 0x19) / (ulonglong)(uint)(frequencyData[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(freq2 * 0x19) / (uint)(freq7 << 2) +\n           (int)(((ulonglong)(uint)(freq3 * 0x19) / (ulonglong)(uint)(freq8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(freq1 * 0x19) / (ulonglong)(uint)(freq6 << 2)) / 100) * 0x10;\n    return;\n  }\n  freq10 = HAL_RCC_GetPCLK2Freq();\n  freq5 = frequencyData[1];\n  freq1 = HAL_RCC_GetPCLK2Freq();\n  freq6 = frequencyData[1];\n  freq2 = HAL_RCC_GetPCLK2Freq();\n  freq7 = frequencyData[1];\n  freq3 = HAL_RCC_GetPCLK2Freq();\n  freq8 = frequencyData[1];\n  freq4 = HAL_RCC_GetPCLK2Freq();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(freq3 * 0x19) / (uint)(freq8 << 2) +\n                                (int)(((ulonglong)(uint)(freq4 * 0x19) /\n                                      (ulonglong)(uint)(frequencyData[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(freq1 * 0x19) / (uint)(freq6 << 2) +\n                   (int)(((ulonglong)(uint)(freq2 * 0x19) / (ulonglong)(uint)(freq7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(freq10 * 0x19) / (ulonglong)(uint)(freq5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_frequency_08006538",
                "param_1": "frequencyData",
                "iVar1": "freq1",
                "iVar2": "freq2",
                "iVar3": "freq3",
                "iVar4": "freq4",
                "iVar5": "freq5",
                "iVar6": "freq6",
                "iVar7": "freq7",
                "iVar8": "freq8",
                "iVar9": "freq9",
                "iVar10": "freq10"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "validate_params_080066e8",
            "code": "\nundefined4 validateParams_080066e8(uint **paramArray,uint bitMask,uint isConditionTrue,int startTick,uint timeout)\n\n{\n  int currentTick;\n  \n  do {\n    if (((bitMask & ~**paramArray) == 0) != isConditionTrue) {\n      return 0;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTick = HAL_GetTick(), (uint)(currentTick - startTick) <= timeout))));\n  (*paramArray)[3] = (*paramArray)[3] & 0xfffffe5f;\n  (*paramArray)[5] = (*paramArray)[5] & 0xfffffffe;\n  *(undefined *)((int)paramArray + 0x39) = 0x20;\n  *(undefined *)((int)paramArray + 0x3a) = 0x20;\n  *(undefined *)(paramArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "validate_params_080066e8",
                "param_1": "paramArray",
                "param_2": "bitMask",
                "param_3": "isConditionTrue",
                "param_4": "startTick",
                "param_5": "timeout",
                "iVar1": "currentTick"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_uart_0800674e",
            "code": "\nundefined4 initialize_UART_0800674e(int *uart_config)\n\n{\n  if (uart_config != (int *)0x0) {\n    if (*(char *)((int)uart_config + 0x39) == '\\0') {\n      *(undefined *)(uart_config + 0xe) = 0;\n      HAL_UART_MspInit();\n    }\n    *(undefined *)((int)uart_config + 0x39) = 0x24;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) & 0xffffdfff;\n    UART_SetConfig(uart_config);\n    *(uint *)(*uart_config + 0x10) = *(uint *)(*uart_config + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_config + 0x14) = *(uint *)(*uart_config + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_config + 0xc) = *(uint *)(*uart_config + 0xc) | 0x2000;\n    uart_config[0xf] = 0;\n    *(undefined *)((int)uart_config + 0x39) = 0x20;\n    *(undefined *)((int)uart_config + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_uart_0800674e",
                "param_1": "uart_config"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 processData_080067ac(int *dataBuffer,ushort *inputBuffer,int inputLength,undefined4 timeout)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataBuffer + 0x39) == ' ') {\n    if (inputBuffer == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (inputLength == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataBuffer + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataBuffer + 0xe) = 1;\n      dataBuffer[0xf] = 0;\n      *(undefined *)((int)dataBuffer + 0x39) = 0x21;\n      returnValue = HAL_GetTick();\n      *(short *)(dataBuffer + 9) = (short)inputLength;\n      *(short *)((int)dataBuffer + 0x26) = (short)inputLength;\n      while (*(short *)((int)dataBuffer + 0x26) != 0) {\n        *(short *)((int)dataBuffer + 0x26) = *(short *)((int)dataBuffer + 0x26) + -1;\n        if (dataBuffer[2] == 0x1000) {\n          result = UART_WaitOnFlagUntilTimeout(dataBuffer,0x80,0,returnValue,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataBuffer + 4) = *inputBuffer & 0x1ff;\n          if (dataBuffer[4] == 0) {\n            inputBuffer = inputBuffer + 1;\n          }\n          else {\n            inputBuffer = (ushort *)((int)inputBuffer + 1);\n          }\n        }\n        else {\n          result = UART_WaitOnFlagUntilTimeout(dataBuffer,0x80,0,returnValue,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataBuffer + 4) = (uint)*(byte *)inputBuffer;\n          inputBuffer = (ushort *)((int)inputBuffer + 1);\n        }\n      }\n      result = UART_WaitOnFlagUntilTimeout(dataBuffer,0x40,0,returnValue,timeout);\n      if (result == 0) {\n        *(undefined *)((int)dataBuffer + 0x39) = 0x20;\n        *(undefined *)(dataBuffer + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "dataBuffer",
                "param_2": "inputBuffer",
                "param_3": "inputLength",
                "param_4": "timeout",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "UART_WaitOnFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "validate_input_0800688e",
            "code": "\nundefined4 validate_input_0800688e(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value1;\n    *(short *)(input_array + 9) = (short)value2;\n    *(short *)((int)input_array + 0x26) = (short)value2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "validate_input_0800688e",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "input_array[8]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_params_080068d6",
            "code": "\nundefined4 validate_params_080068d6(int *ptr_data,int value_1,int value_2)\n\n{\n  if (*(char *)((int)ptr_data + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(ptr_data + 0xe) != '\\x01') {\n    ptr_data_10 = value_1;\n    *(short *)(ptr_data + 0xb) = (short)value_2;\n    *(short *)((int)ptr_data + 0x2e) = (short)value_2;\n    ptr_data_f = 0;\n    *(undefined *)((int)ptr_data + 0x3a) = 0x22;\n    *(undefined *)(ptr_data + 0xe) = 0;\n    *(uint *)(*ptr_data + 0xc) = *(uint *)(*ptr_data + 0xc) | 0x100;\n    *(uint *)(*ptr_data + 0x14) = *(uint *)(*ptr_data + 0x14) | 1;\n    *(uint *)(*ptr_data + 0xc) = *(uint *)(*ptr_data + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_params_080068d6",
                "param_1": "ptr_data",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[10]": "ptr_data_10",
                "param_1[0xf]": "ptr_data_f"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "update_uart_config_08006932",
            "code": "\nundefined4 updateUartConfig_08006932(int *uartConfig)\n\n{\n  *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) & 0xffffffbf;\n  *(undefined *)((int)uartConfig + 0x39) = 0x20;\n  HAL_UART_TxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "update_uart_config_08006932",
                "param_1": "uartConfig"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *data)\n\n{\n  byte *bytePtr;\n  short shortVar;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPtr = (undefined *)data[10];\n    data[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePtr = (byte *)data[10];\n    data[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  shortVar = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = shortVar;\n  if (shortVar != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  HAL_UART_RxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "sVar2": "shortVar",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "check_and_handle_uart_operations_080069ec",
            "code": "\nvoid checkAndHandleUARTOperations_080069ec(uint **param)\n\n{\n  int result;\n  uint value2;\n  uint *ptr;\n  uint value4;\n  uint value5;\n  \n  ptr = *param;\n  value5 = *ptr;\n  value2 = ptr[3];\n  if ((((value5 & 0xf) == 0) && ((value5 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    UART_Receive_IT(param);\n    return;\n  }\n  if (((value5 & 0xf) == 0) || ((value4 = ptr[5] & 1, value4 == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value5 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      UART_Transmit_IT(param);\n      return;\n    }\n    if (((value5 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      UART_EndTransmit_IT(param);\n    }\n  }\n  else {\n    if (((value5 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      param[0xf] = (uint *)((uint)param[0xf] | 1);\n    }\n    if (((value5 & 4) != 0) && (value4 != 0)) {\n      param[0xf] = (uint *)((uint)param[0xf] | 2);\n    }\n    if (((value5 & 2) != 0) && (value4 != 0)) {\n      param[0xf] = (uint *)((uint)param[0xf] | 4);\n    }\n    if (((value5 & 8) != 0) && (value4 != 0)) {\n      param[0xf] = (uint *)((uint)param[0xf] | 8);\n    }\n    if (param[0xf] != (uint *)0x0) {\n      if (((value5 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        UART_Receive_IT(param);\n      }\n      if ((((uint)param[0xf] & 8) == 0) && (((*param)[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(param);\n        param[0xf] = (uint *)0x0;\n        return;\n      }\n      UART_EndRxTransfer(param);\n      ptr = *param;\n      if ((ptr[5] & 0x40) == 0) {\n        HAL_UART_ErrorCallback(param);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (param[0xd] == (uint *)0x0) {\n        HAL_UART_ErrorCallback(param);\n        return;\n      }\n      param[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      result = HAL_DMA_Abort_IT(param[0xd]);\n      if (result != 0) {\n        (*(code *)param[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "check_and_handle_uart_operations_080069ec",
                "param_1": "param",
                "iVar1": "result",
                "uVar2": "value2",
                "puVar3": "ptr",
                "uVar4": "value4",
                "uVar5": "value5"
            },
            "calling": [],
            "called": [
                "UART_EndRxTransfer",
                "UART_EndTransmit_IT",
                "UART_Receive_IT",
                "HAL_UART_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address"
            },
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "extract_bit_08006b28",
            "code": "\nuint extractBit_08006b28(uint value,int address)\n\n{\n  return *(uint *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "extract_bit_08006b28",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "analogWrite",
                "digitalWrite",
                "digitalRead",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "set_bit_in_memory_08006b3e",
            "code": "\nvoid setBitInMemory_08006b3e(uint inputValue,int memoryAddress)\n\n{\n  uint bitOffset;\n  \n  bitOffset = (inputValue << 0x18) >> 0x1c;\n  *(uint *)(memoryAddress + bitOffset * 4) = *(uint *)(memoryAddress + bitOffset * 4) | 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "set_bit_in_memory_08006b3e",
                "param_1": "inputValue",
                "param_2": "memoryAddress",
                "uVar1": "bitOffset"
            },
            "calling": [
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "set_bit_to_zero_08006b5c",
            "code": "\nvoid setBitToZero_08006b5c(uint inputValue,int arrayAddress)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (inputValue << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedIndex * 4) = *(uint *)(arrayAddress + shiftedIndex * 4) & ~(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "set_bit_to_zero_08006b5c",
                "param_1": "inputValue",
                "param_2": "arrayAddress",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_memory_address_08006b7c",
            "code": "\nundefined4 get_memory_address_08006b7c(undefined4 input_number)\n\n{\n  switch(input_number) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_memory_address_08006b7c",
                "param_1": "input_number"
            },
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_memory_addresses_08006bb8",
            "code": "\n\n\nundefined4 setMemoryAddresses_08006bb8(undefined4 inputValue)\n\n{\n  undefined4 outputValue;\n  \n  switch(inputValue) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    outputValue = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    outputValue = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    outputValue = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    outputValue = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    outputValue = 0x40011800;\n    break;\n  default:\n    outputValue = 0;\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_memory_addresses_08006bb8",
                "param_1": "inputValue",
                "uVar1": "outputValue"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "calculate_pinmap_08006c60",
            "code": "\nuint calculatePinmap_08006c60(undefined4 deviceID,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int pinmap_result;\n  uint shiftedResult;\n  \n  pinmap_result = pinmap_function(deviceID,&DAT_0800a5b8,param3,param4,param4);\n  shiftedResult = (uint)(pinmap_result << 0xc) >> 0x1b;\n  if (0x10 < shiftedResult - 1) {\n    shiftedResult = 0;\n  }\n  return shiftedResult;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "calculate_pinmap_08006c60",
                "param_1": "deviceID",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "pinmap_result",
                "uVar2": "shiftedResult"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "map_pin_function_08006c7c",
            "code": "\nundefined4 map_pin_function_08006c7c(undefined4 pin,undefined4 ptr,undefined4 arg1,undefined4 arg2)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(pin,&DAT_0800a6cc,arg1,arg2,arg2);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "map_pin_function_08006c7c",
                "param_1": "pin",
                "param_2": "ptr",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "pwm_start",
                "pwm_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "initialize_gpio_08006ca8",
            "code": "\n\n\nvoid initialize_GPIO_08006ca8(int *gpio_input,undefined4 clock_signal)\n\n{\n  undefined4 gpio_port;\n  uint gpio_pin;\n  int gpio_mode;\n  uint pin_mask;\n  undefined4 gpio_speed;\n  undefined4 gpio_pull;\n  \n  gpio_mode = *gpio_input;\n  if (gpio_mode == 0x40012400) {\n    gpio_pin = _DAT_40021018 | 0x200;\n    gpio_mode = 0x200;\n    _DAT_40021018 = gpio_pin;\n  }\n  else {\n    gpio_pin = 0x40012800;\n    if (gpio_mode == 0x40012800) {\n      gpio_pin = _DAT_40021018 | 0x400;\n      gpio_mode = 0x400;\n      _DAT_40021018 = gpio_pin;\n    }\n  }\n  gpio_port = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,clock_signal,gpio_pin,gpio_mode);\n  pin_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  gpio_speed = 3;\n  gpio_pull = 0;\n  HAL_GPIO_Init(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "initialize_gpio_08006ca8",
                "param_1": "gpio_input",
                "param_2": "clock_signal",
                "uVar1": "gpio_port",
                "uVar2": "gpio_pin",
                "iVar3": "gpio_mode",
                "local_18": "pin_mask",
                "local_14": "gpio_speed",
                "local_10": "gpio_pull"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_control_registers_08006d24",
            "code": "\n\n\nvoid updateControlRegisters_08006d24(int *ptr_value)\n\n{\n  if (*ptr_value != 0x40012400) {\n    if (*ptr_value == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_control_registers_08006d24",
                "param_1": "ptr_value"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "measure_adc_value_08006d80",
            "code": "\nundefined2 measure_adc_value_08006d80(undefined4 peripheral)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 adc_value;\n  uint channel;\n  undefined4 is_init_success;\n  undefined4 config_status;\n  int adc_handle;\n  undefined4 init_status;\n  undefined4 calibration_status;\n  undefined4 start_status;\n  undefined4 start_status;\n  undefined4 conversion_status;\n  undefined4 config_status;\n  undefined4 calibration_status;\n  undefined4 stop_status;\n  \n  memset(&adc_handle,0,0x30);\n  channel = 0;\n  is_init_success = 0;\n  config_status = 0;\n  adc_value = 0;\n  adc_handle = pinmap_peripheral(peripheral,&DAT_0800a5b8);\n  if (adc_handle == 0) {\n    adc_value = 0;\n  }\n  else {\n    init_status = 0;\n    calibration_status = 0;\n    start_status = 0;\n    conversion_status = 0;\n    calibration_status = 0xe0000;\n    stop_status = 0;\n    start_status = 1;\n    config_status = 0;\n    DAT_20000014 = (undefined)peripheral;\n    iVar1 = HAL_ADC_Init(&adc_handle);\n    if (iVar1 == 0) {\n      channel = get_adc_channel(peripheral);\n      if (channel < 0x12) {\n        is_init_success = 1;\n        config_status = 2;\n        iVar1 = HAL_ADC_ConfigChannel(&adc_handle,&channel);\n        if (iVar1 == 0) {\n          iVar1 = HAL_ADCEx_Calibration_Start(&adc_handle);\n          if (iVar1 == 0) {\n            iVar1 = HAL_ADC_Start(&adc_handle);\n            if (iVar1 == 0) {\n              iVar1 = HAL_ADC_PollForConversion(&adc_handle,10);\n              if (iVar1 == 0) {\n                uVar2 = HAL_ADC_GetState(&adc_handle);\n                if ((uVar2 & 0x200) != 0) {\n                  adc_value = HAL_ADC_GetValue(&adc_handle);\n                }\n                iVar1 = HAL_ADC_Stop(&adc_handle);\n                if (iVar1 == 0) {\n                  iVar1 = HAL_ADC_DeInit(&adc_handle);\n                  if (iVar1 != 0) {\n                    adc_value = 0;\n                  }\n                }\n                else {\n                  adc_value = 0;\n                }\n              }\n              else {\n                adc_value = 0;\n              }\n            }\n            else {\n              adc_value = 0;\n            }\n          }\n          else {\n            adc_value = 0;\n          }\n        }\n        else {\n          adc_value = 0;\n        }\n      }\n      else {\n        adc_value = 0;\n      }\n    }\n    else {\n      adc_value = 0;\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "measure_adc_value_08006d80",
                "param_1": "peripheral",
                "local_46": "adc_value",
                "local_44": "channel",
                "local_40": "is_init_success",
                "local_3c": "config_status",
                "local_38": "adc_handle",
                "local_34": "init_status",
                "local_30": "calibration_status",
                "local_2c": "start_status",
                "local_28": "start_status",
                "local_24": "conversion_status",
                "local_20": "config_status",
                "local_1c": "calibration_status",
                "local_10": "stop_status"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "HAL_ADC_ConfigChannel",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_GetValue",
                "HAL_ADC_Init",
                "HAL_ADC_Start",
                "memset",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_gpio_08006e68",
            "code": "\n\n\nvoid initializeGPIO_08006e68(undefined4 clockPin)\n\n{\n  int pinmapResult;\n  undefined4 portClock;\n  uint pinMask;\n  undefined4 config1;\n  undefined4 config2;\n  undefined4 config3;\n  \n  pinmapResult = pinmap_function((int)(char)DAT_20000014,&DAT_0800a6cc);\n  timer_enable_clock(clockPin);\n  portClock = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  config1 = 2;\n  config2 = 0;\n  config3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(pinmapResult << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  pinMask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  HAL_GPIO_Init(portClock,&pinMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_gpio_08006e68",
                "param_1": "clockPin",
                "iVar1": "pinmapResult",
                "uVar2": "portClock",
                "local_20": "pinMask",
                "local_1c": "config1",
                "local_18": "config2",
                "local_14": "config3"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [
                "timer_enable_clock",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "disable_timer_clock_08007110",
            "code": "\nvoid disable_timer_clock_08007110(void)\n\n{\n  timer_disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "disable_timer_clock_08007110"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "configure_pwm_peripheral_08007118",
            "code": "\nvoid configurePwmPeripheral_08007118(undefined4 peripheralId,uint desiredFrequency,int channelCount,undefined4 initialTimConfig,char enablePwm)\n\n{\n  uint uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 cr1Reg;\n  undefined4 cr2Reg;\n  undefined4 smcrReg;\n  undefined4 dierReg;\n  undefined4 ccmr1Reg;\n  undefined4 ccmr2Reg;\n  undefined4 ccerReg;\n  int timHandle;\n  int prescaler;\n  undefined4 counterMode;\n  int pwmChCount;\n  undefined4 arrReg;\n  undefined4 cmpReg;\n  undefined breakPolarity;\n  \n  memset(&timHandle,0,0x40);\n  cr1Reg = 0;\n  cr2Reg = 0;\n  smcrReg = 0;\n  dierReg = 0;\n  ccmr1Reg = 0;\n  ccmr2Reg = 0;\n  ccerReg = 0;\n  timHandle = pinmap_peripheral(peripheralId,&DAT_0800a6cc);\n  if (timHandle != 0) {\n    uVar1 = getTimerClkFreq();\n    prescaler = uVar1 / desiredFrequency - 1;\n    pwmChCount = channelCount + -1;\n    arrReg = 0;\n    counterMode = 0;\n    cmpReg = 0;\n    breakPolarity = 0;\n    if (enablePwm == '\\x01') {\n      DAT_20000014 = (undefined)peripheralId;\n      iVar2 = HAL_TIM_PWM_Init(&timHandle);\n      if (iVar2 != 0) {\n        return;\n      }\n    }\n    iVar2 = get_pwm_channel(peripheralId);\n    if ((((iVar2 == 0) || (iVar2 == 4)) || (iVar2 == 8)) || ((iVar2 == 0xc || (iVar2 == 0x18)))) {\n      cr1Reg = 0x60;\n      smcrReg = 0;\n      ccmr1Reg = 0;\n      dierReg = 0;\n      ccerReg = 0;\n      ccmr2Reg = 0;\n      cr2Reg = initialTimConfig;\n      iVar3 = HAL_TIM_PWM_ConfigChannel(&timHandle,&cr1Reg,iVar2);\n      if (iVar3 == 0) {\n        uVar1 = pinmap_function(peripheralId,&DAT_0800a6cc);\n        if ((uVar1 & 0x100000) == 0) {\n          HAL_TIM_PWM_Start(&timHandle,iVar2);\n        }\n        else {\n          HAL_TIMEx_PWMN_Start(&timHandle,iVar2);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "configure_pwm_peripheral_08007118",
                "param_1": "peripheralId",
                "param_2": "desiredFrequency",
                "param_3": "channelCount",
                "param_4": "initialTimConfig",
                "param_5": "enablePwm",
                "local_74": "cr1Reg",
                "local_70": "cr2Reg",
                "local_6c": "smcrReg",
                "local_68": "dierReg",
                "local_64": "ccmr1Reg",
                "local_60": "ccmr2Reg",
                "local_5c": "ccerReg",
                "local_58": "timHandle",
                "local_54": "prescaler",
                "local_50": "counterMode",
                "local_4c": "pwmChCount",
                "local_48": "arrReg",
                "local_44": "cmpReg",
                "local_1b": "breakPolarity"
            },
            "calling": [
                "analogWrite"
            ],
            "called": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel",
                "pinmap_function",
                "HAL_TIMEx_PWMN_Start",
                "memset",
                "get_pwm_channel",
                "HAL_TIM_PWM_Start",
                "getTimerClkFreq",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "stop_pwm_080071e4",
            "code": "\nvoid stop_pwm_080071e4(undefined4 peripheral)\n\n{\n  int pwm_channel;\n  uint function_value;\n  int pwm_instance [17];\n  \n  pwm_instance[0] = pinmap_peripheral(peripheral,&DAT_0800a6cc);\n  if ((pwm_instance[0] != 0) &&\n     ((((pwm_channel = get_pwm_channel(peripheral), pwm_channel == 0 || (pwm_channel == 4)) || (pwm_channel == 8)) ||\n      ((pwm_channel == 0xc || (pwm_channel == 0x18)))))) {\n    function_value = pinmap_function(peripheral,&DAT_0800a6cc);\n    if ((function_value & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(pwm_instance,pwm_channel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(pwm_instance,pwm_channel);\n    }\n    HAL_TIM_PWM_DeInit(pwm_instance);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "stop_pwm_080071e4",
                "param_1": "peripheral",
                "iVar1": "pwm_channel",
                "uVar2": "function_value",
                "local_50": "pwm_instance"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "pinmap_function",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "get_current_time_0800723c",
            "code": "\nvoid get_current_time_0800723c(void)\n\n{\n  current_time;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "get_current_time_0800723c",
                "HAL_GetTick()": "current_time"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "handle_system_tick_08007246",
            "code": "\nvoid handleSystemTick_08007246(void)\n\n{\n  incrementTick();\n  systemTickIRQHandler();\n  nonOsSystemTickHandler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "handle_system_tick_08007246",
                "HAL_IncTick": "incrementTick",
                "HAL_SYSTICK_IRQHandler": "systemTickIRQHandler",
                "noOsSystickHandler": "nonOsSystemTickHandler"
            },
            "calling": [],
            "called": [
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_gpio_port_08007258",
            "code": "\n\n\nvoid initialize_GPIO_Port_08007258(uint port_number,undefined4 pin_mode,undefined4 pin_config)\n\n{\n  undefined4 GPIO_Port;\n  uint pin_mask;\n  undefined4 pin_mode;\n  undefined4 pin_config;\n  undefined4 constant_value;\n  \n  GPIO_Port = set_GPIO_Port_Clock((port_number << 0x18) >> 0x1c);\n  pin_mask = 1 << (port_number & 0xf) & 0xffff;\n  constant_value = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((port_number - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((port_number == 0xf) || (port_number == 0x13)) || (port_number == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  pin_mode = pin_mode;\n  pin_config = pin_config;\n  HAL_GPIO_Init(GPIO_Port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_gpio_port_08007258",
                "param_1": "port_number",
                "param_2": "pin_mode",
                "param_3": "pin_config",
                "uVar1": "GPIO_Port",
                "local_20": "pin_mask",
                "local_1c": "pin_mode",
                "local_18": "pin_config",
                "local_14": "constant_value"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "set_pin_state_080072d8",
            "code": "\nvoid setPinState_080072d8(undefined4 GPIO_Port,undefined2 GPIO_Pin,int state,undefined4 param)\n\n{\n  if (state == 0) {\n    writePin(GPIO_Port,GPIO_Pin,0,param,param);\n    return;\n  }\n  writePin(GPIO_Port,GPIO_Pin,1,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "set_pin_state_080072d8",
                "param_1": "GPIO_Port",
                "param_2": "GPIO_Pin",
                "param_3": "state",
                "param_4": "param",
                "HAL_GPIO_WritePin": "writePin"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "read_gpio_pin_080072f0",
            "code": "\nvoid read_gpio_pin_080072f0(undefined4 gpio_port,undefined2 pin_config,undefined4 param_3,undefined4 param_4)\n\n{\n  HAL_GPIO_ReadPin(gpio_port,pin_config,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "read_gpio_pin_080072f0",
                "param_1": "gpio_port",
                "param_2": "pin_config"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_system_080072fa",
            "code": "\nvoid initializeSystem_080072fa(void)\n\n{\n  initializeHardware();\n  configureClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_system_080072fa",
                "HAL_Init": "initializeHardware",
                "SystemClock_Config": "configureClock"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "HAL_Init",
                "SystemClock_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_in_array_08007306",
            "code": "\nundefined4 find_value_in_array_08007306(int value_to_find,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value_to_find) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_in_array_08007306",
                "param_1": "value_to_find",
                "param_2": "array"
            },
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_peripheral_08007320",
            "code": "\nundefined4 findPeripheral_08007320(int inputValue)\n\n{\n  undefined4 peripheral;\n  \n  if (inputValue != -1) {\n    peripheral = pinmap_find_peripheral();\n    return peripheral;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_peripheral_08007320",
                "param_1": "inputValue",
                "uVar1": "peripheral"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "uart_debug_write",
                "pwm_start",
                "adc_read_value",
                "uart_debug_init",
                "pwm_stop"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_value_index_08007332",
            "code": "\nint find_value_index_08007332(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_value_index_08007332",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_find_pin",
                "pinmap_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_valid_pin_0800734a",
            "code": "\nundefined4 find_valid_pin_0800734a(int input_pin)\n\n{\n  undefined4 valid_pin;\n  \n  if (input_pin != 0) {\n    valid_pin = pinmap_find_pin();\n    return valid_pin;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_valid_pin_0800734a",
                "param_1": "input_pin",
                "uVar1": "valid_pin"
            },
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_index_0800735a",
            "code": "\nundefined4 find_value_index_0800735a(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_index_0800735a",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_function_by_param_08007376",
            "code": "\nundefined4 find_function_by_param_08007376(int input_param)\n\n{\n  undefined4 found_function;\n  \n  if (input_param == -1) {\n    return 0xffffffff;\n  }\n  found_function = pinmap_find_function();\n  return found_function;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_function_by_param_08007376",
                "param_1": "input_param",
                "uVar1": "found_function"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "pwm_start",
                "HAL_TIM_PWM_MspInit",
                "get_adc_channel",
                "pwm_stop",
                "get_pwm_channel"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "find_parameter_in_array_0800738a",
            "code": "\nundefined4 find_parameter_in_array_0800738a(int target_value,char *array)\n\n{\n  if (target_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (target_value == *array) break;\n    array = array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "find_parameter_in_array_0800738a",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "sysexCallback",
                "analogWrite",
                "enableI2CPins",
                "FUN_0800021a",
                "setPinModeCallback",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_smaller_080073ae",
            "code": "\nint compare_and_return_smaller_080073ae(int number1,int number2)\n\n{\n  if (number1 != number2) {\n    if (number1 == 0) {\n      return number2;\n    }\n    if (number2 == 0) {\n      return number1;\n    }\n    number1 = 0;\n  }\n  return number1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_smaller_080073ae",
                "param_1": "number1",
                "param_2": "number2"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_080073c0",
            "code": "\nvoid executeCallback_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_080073c0"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "_Error_Handler",
                "SystemClock_Config"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_memory_080073ec",
            "code": "\n\n\nvoid initializeMemory_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_memory_080073ec"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_flags_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateFlags_08007438(int *input)\n\n{\n  if (*input == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = input;\n  }\n  if (*input == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = input;\n  }\n  if (*input == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = input;\n  }\n  if (*input == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = input;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_flags_08007438",
                "param_1": "input"
            },
            "calling": [
                "HAL_TIM_PWM_MspInit",
                "HAL_TIM_OC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_registers_080074e0",
            "code": "\n\n\nvoid updateRegisters_080074e0(int *registers)\n\n{\n  if (*registers == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*registers == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*registers == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*registers == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_registers_080074e0",
                "param_1": "registers"
            },
            "calling": [
                "HAL_TIM_OC_MspDeInit",
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "check_timer_ir_qn_08007544",
            "code": "\nundefined4 checkTimerIRQn_08007544(uint irqNumber)\n\n{\n  if (irqNumber == 0xffffffff) {\n    return 0;\n  }\n  if (irqNumber == 0x40000400) {\n    return 0x1d;\n  }\n  if (irqNumber < 0x40000401) {\n    if (irqNumber == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (irqNumber == 0x40000800) {\n      return 0x1e;\n    }\n    if (irqNumber == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  printUnknownIRQnMessage(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "check_timer_ir_qn_08007544",
                "param_1": "irqNumber",
                "iprintf": "printUnknownIRQnMessage"
            },
            "calling": [
                "TimerPulseDeinit",
                "TimerPulseInit"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint instance)\n\n{\n  if (instance == 0xffffffff) {\n    return 0;\n  }\n  if (instance == 0x40000400) {\n    return 1;\n  }\n  if (instance < 0x40000401) {\n    if (instance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (instance == 0x40000800) {\n      return 1;\n    }\n    if (instance == 0x40012c00) {\n      return 2;\n    }\n  }\n  printMessage(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "instance",
                "iprintf": "printMessage"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_timer_clk_080075dc",
            "code": "\nint calculateTimerClk_080075dc(undefined4 input_param)\n\n{\n  uint local_uint_1;\n  int timer_clk_src;\n  uint local_uint_2;\n  undefined4 config_1;\n  undefined4 config_2;\n  undefined4 config_3;\n  undefined4 config_4;\n  uint local_uint_3;\n  uint local_uint_4;\n  \n  config_2 = 0;\n  config_3 = 0;\n  config_4 = 0;\n  local_uint_3 = 0;\n  local_uint_4 = 0;\n  config_1 = 0;\n  HAL_RCC_GetClockConfig(&config_2,&config_1);\n  timer_clk_src = getTimerClkSrc(input_param);\n  local_uint_1 = local_uint_4;\n  local_uint_2 = local_uint_3;\n  if (timer_clk_src == 1) {\n    timer_clk_src = HAL_RCC_GetPCLK1Freq();\n  }\n  else if (timer_clk_src == 2) {\n    timer_clk_src = HAL_RCC_GetPCLK2Freq();\n    local_uint_2 = local_uint_1;\n  }\n  else {\n    iprintf(\"TIM: Unknown clock source\");\n    timer_clk_src = 0;\n    local_uint_2 = 0;\n  }\n  if (local_uint_2 != 0x500) {\n    if (local_uint_2 < 0x501) {\n      if (local_uint_2 != 0x400) {\n        return timer_clk_src;\n      }\n    }\n    else if ((local_uint_2 != 0x600) && (local_uint_2 != 0x700)) {\n      return timer_clk_src;\n    }\n  }\n  return timer_clk_src << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_timer_clk_080075dc",
                "param_1": "input_param",
                "uVar1": "local_uint_1",
                "iVar2": "timer_clk_src",
                "uVar3": "local_uint_2",
                "local_20": "config_1",
                "local_1c": "config_2",
                "local_18": "config_3",
                "local_14": "config_4",
                "local_10": "local_uint_3",
                "local_c": "local_uint_4"
            },
            "calling": [
                "TimerPulseInit",
                "pwm_start"
            ],
            "called": [
                "HAL_RCC_GetClockConfig",
                "HAL_RCC_GetPCLK2Freq",
                "getTimerClkSrc",
                "HAL_RCC_GetPCLK1Freq",
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_timer_08007648",
            "code": "\nvoid initializeTimer_08007648(undefined4 *timerParams,undefined4 configValue,undefined4 irqPriority,undefined4 irqHandler)\n\n{\n  char irqFlag;\n  uint timerClkFreq;\n  int initStatus;\n  undefined4 *timerInstance;\n  undefined4 captureCompareValue;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  \n  captureCompareValue = 0;\n  localVar1 = 0;\n  localVar2 = 0;\n  localVar3 = 0;\n  localVar4 = 0;\n  localVar5 = 0;\n  localVar6 = 0;\n  timerInstance = timerParams + 1;\n  *timerParams = 0x40000000;\n  timerParams[1] = 0x40000000;\n  timerParams[4] = configValue;\n  timerClkFreq = getTimerClkFreq();\n  timerParams[2] = timerClkFreq / 1000000 - 1;\n  timerParams[5] = 0;\n  timerParams[3] = 0;\n  timerParams[6] = 0;\n  timerParams[0x13] = irqHandler;\n  captureCompareValue = 0;\n  localVar2 = 0;\n  localVar4 = 0;\n  localVar3 = 0;\n  localVar5 = 0;\n  localVar6 = 0;\n  localVar1 = irqPriority;\n  irqFlag = getTimerIrq(*timerParams);\n  HAL_NVIC_SetPriority((int)irqFlag,0xe,0);\n  irqFlag = getTimerIrq(*timerParams);\n  HAL_NVIC_EnableIRQ((int)irqFlag);\n  initStatus = HAL_TIM_OC_Init(timerInstance);\n  if ((initStatus == 0) && (initStatus = HAL_TIM_OC_ConfigChannel(timerInstance,&captureCompareValue,0), initStatus == 0)) {\n    HAL_TIM_OC_Start_IT(timerInstance,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_timer_08007648",
                "param_1": "timerParams",
                "param_2": "configValue",
                "param_3": "irqPriority",
                "param_4": "irqHandler",
                "cVar1": "irqFlag",
                "uVar2": "timerClkFreq",
                "iVar3": "initStatus",
                "puVar4": "timerInstance",
                "local_34": "captureCompareValue",
                "local_30": "localVar1",
                "local_2c": "localVar2",
                "local_28": "localVar3",
                "local_24": "localVar4",
                "local_20": "localVar5",
                "local_1c": "localVar6"
            },
            "calling": [
                "initISR"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_OC_ConfigChannel",
                "getTimerIrq",
                "HAL_TIM_OC_Init",
                "getTimerClkFreq",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "disable_timer_irq_080076e0",
            "code": "\nvoid disableTimerIRQ_080076e0(undefined4 *ptr_to_config)\n\n{\n  char timerIRQ;\n  int deInitStatus;\n  \n  ptr_to_config[0x13] = 0;\n  timerIRQ = getTimerIrq(*ptr_to_config);\n  HAL_NVIC_DisableIRQ((int)timerIRQ);\n  deInitStatus = HAL_TIM_OC_DeInit(ptr_to_config + 1);\n  if (deInitStatus == 0) {\n    HAL_TIM_OC_Stop_IT(ptr_to_config + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "disable_timer_irq_080076e0",
                "param_1": "ptr_to_config",
                "cVar1": "timerIRQ",
                "iVar2": "deInitStatus"
            },
            "calling": [
                "finISR"
            ],
            "called": [
                "HAL_NVIC_DisableIRQ",
                "getTimerIrq",
                "HAL_TIM_OC_DeInit",
                "HAL_TIM_OC_Stop_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_timer_08007708",
            "code": "\nvoid initializeTimer_08007708(void)\n\n{\n  enableTimerClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_timer_08007708",
                "timer_enable_clock": "enableTimerClock"
            },
            "calling": [
                "HAL_TIM_OC_Init"
            ],
            "called": [
                "timer_enable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "disable_clock_08007710",
            "code": "\nvoid disable_clock_08007710(void)\n\n{\n  disable_clock_08007710();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "disable_clock_08007710",
                "timer_disable_clock": "disable_clock"
            },
            "calling": [
                "HAL_TIM_OC_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtractFour_08007718(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input"
            },
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_timer_callback_0800771c",
            "code": "\nvoid executeTimerCallback_0800771c(int timerObj)\n\n{\n  int timerHandle;\n  \n  timerHandle = get_timer_obj();\n  if ((*(code **)(timerHandle + 0x4c) != (code *)0x0) && (*(char *)(timerObj + 0x1c) == '\\x01')) {\n    (**(code **)(timerHandle + 0x4c))(timerHandle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_timer_callback_0800771c",
                "param_1": "timerObj",
                "iVar1": "timerHandle"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "run_timer_function_08007736",
            "code": "\nvoid runTimerFunction_08007736(void)\n\n{\n  int timerObject;\n  \n  timerObject = getTimerObject();\n  if (*(code **)(timerObject + 0x48) != (code *)0x0) {\n    (**(code **)(timerObject + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "run_timer_function_08007736",
                "iVar1": "timerObject",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_pointer_value_08007744",
            "code": "\nundefined4 get_pointer_value_08007744(int input_param)\n\n{\n  return *(undefined4 *)(*(int *)(input_param + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_pointer_value_08007744",
                "param_1": "input_param"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_param_value_0800774a",
            "code": "\nvoid setParamValue_0800774a(int paramPointer,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(paramPointer + 4) + 0x24) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_param_value_0800774a",
                "param_1": "paramPointer",
                "param_2": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "update_parameter_value_08007750",
            "code": "\nvoid updateParameterValue_08007750(int param1,int param2,undefined4 newParamVal)\n\n{\n  *(undefined4 *)(*(int *)(param1 + 4) + 0x34 + param2 * 4) = newParamVal;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "update_parameter_value_08007750",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "newParamVal"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_080077b0",
            "code": "\n\n\nvoid initializeI2C_080077b0(int *i2cConfig,int param2,int param3,int param4,undefined param5)\n\n{\n  int pin1Peripheral;\n  int pin2Peripheral;\n  undefined4 gpioPortC;\n  uint tempVar1;\n  uint tempVar2;\n  int *i2cHandle;\n  uint pinMask1;\n  uint pinFunc1;\n  uint pinFncSel1;\n  undefined4 pinMode1;\n  \n  if (i2cConfig != (int *)0x0) {\n    i2cHandle = i2cConfig + 1;\n    pin1Peripheral = pinmap_peripheral((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n    pin2Peripheral = pinmap_peripheral((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n    if ((pin1Peripheral == 0) || (pin2Peripheral == 0)) {\n      iprintf(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      pin1Peripheral = pinmap_merge_peripheral(pin1Peripheral,pin2Peripheral);\n      *i2cConfig = pin1Peripheral;\n      if (pin1Peripheral == 0) {\n        iprintf(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (pin1Peripheral == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)i2cConfig + 0x5a) = 0x1f;\n          *(undefined *)((int)i2cConfig + 0x5b) = 0x20;\n          DAT_20000668 = i2cHandle;\n        }\n        if (*i2cConfig == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)i2cConfig + 0x5a) = 0x21;\n          *(undefined *)((int)i2cConfig + 0x5b) = 0x22;\n          DAT_2000066c = i2cHandle;\n        }\n        gpioPortC = set_GPIO_Port_Clock((uint)((int)*(char *)((int)i2cConfig + 0x59) << 0x18) >> 0x1c);\n        pinMask1 = 1 << ((int)*(char *)((int)i2cConfig + 0x59) & 0xfU) & 0xffff;\n        tempVar1 = pinmap_function((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n        tempVar2 = pinmap_function((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n        pinFunc1 = (tempVar1 >> 3 & 1) << 4 | tempVar2 & 7;\n        pinMode1 = 3;\n        pin1Peripheral = pinmap_function((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n        pinFncSel1 = (uint)(pin1Peripheral << 0x1a) >> 0x1e;\n        pin1Peripheral = pinmap_function((int)*(char *)((int)i2cConfig + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        tempVar2 = 1;\n        tempVar1 = _DAT_40021018;\n        switch((uint)(pin1Peripheral << 0x11) >> 0x19) {\n        case 1:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 2:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 3:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 4:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 5:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 6:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 7:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 8:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 9:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 10:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xb:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xc:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xd:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xe:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xf:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x10:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x11:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x12:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x13:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x14:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x15:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x16:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x17:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x1b:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x1c:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x21:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x22:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x23:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x24:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = tempVar2;\n        }\n        HAL_GPIO_Init(gpioPortC,&pinMask1,tempVar1,tempVar2);\n        gpioPortC = set_GPIO_Port_Clock((uint)((int)*(char *)(i2cConfig + 0x16) << 0x18) >> 0x1c);\n        pinMask1 = 1 << ((int)*(char *)(i2cConfig + 0x16) & 0xfU) & 0xffff;\n        tempVar1 = pinmap_function((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n        tempVar2 = pinmap_function((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n        pinFunc1 = (tempVar1 >> 3 & 1) << 4 | tempVar2 & 7;\n        pinMode1 = 3;\n        pin1Peripheral = pinmap_function((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n        pinFncSel1 = (uint)(pin1Peripheral << 0x1a) >> 0x1e;\n        pin1Peripheral = pinmap_function((int)*(char *)(i2cConfig + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        tempVar2 = 1;\n        tempVar1 = _DAT_40021018;\n        switch((uint)(pin1Peripheral << 0x11) >> 0x19) {\n        case 1:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 2:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 3:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 4:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 5:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 6:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 7:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 8:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 9:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 10:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xb:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xc:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xd:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xe:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0xf:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x10:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x11:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x12:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x13:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x14:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x15:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x16:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x17:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x1b:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x1c:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x21:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x22:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x23:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = tempVar2;\n          break;\n        case 0x24:\n          tempVar1 = 0x40010000;\n          tempVar2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = tempVar2;\n        }\n        HAL_GPIO_Init(gpioPortC,&pinMask1,tempVar1,tempVar2);\n        i2cConfig[1] = *i2cConfig;\n        i2cConfig[2] = param2;\n        i2cConfig[3] = 0;\n        i2cConfig[4] = param4;\n        i2cConfig[7] = 0xff;\n        i2cConfig[5] = param3;\n        i2cConfig[6] = 0;\n        i2cConfig[8] = 0;\n        i2cConfig[9] = 0;\n        *(undefined *)((int)i2cConfig + 0x41) = 0;\n        HAL_NVIC_SetPriority((int)*(char *)((int)i2cConfig + 0x5a),0,1);\n        HAL_NVIC_EnableIRQ((int)*(char *)((int)i2cConfig + 0x5a));\n        HAL_NVIC_SetPriority((int)*(char *)((int)i2cConfig + 0x5b),0,1);\n        HAL_NVIC_EnableIRQ((int)*(char *)((int)i2cConfig + 0x5b));\n        HAL_I2C_Init(i2cHandle);\n        *(undefined *)((int)i2cConfig + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "param_1": "i2cConfig",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "pin1Peripheral",
                "iVar2": "pin2Peripheral",
                "uVar3": "gpioPortC",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "piVar6": "i2cHandle",
                "local_38": "pinMask1",
                "local_34": "pinFunc1",
                "local_30": "pinFncSel1",
                "local_2c": "pinMode1"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "iprintf",
                "pinmap_merge_peripheral",
                "HAL_I2C_Init",
                "HAL_GPIO_Init",
                "HAL_NVIC_SetPriority",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "transmit_and_check_status_08007e74",
            "code": "\nint transmitAndCheckStatus_08007e74(int deviceAddress,undefined4 data,undefined4 size,undefined4 timeout)\n\n{\n  int startTime;\n  int status;\n  uint elapsedTime;\n  int result;\n  int deviceHandle;\n  undefined4 timeoutCopy;\n  \n  timeoutCopy = timeout;\n  startTime = HAL_GetTick();\n  elapsedTime = 0;\n  result = 2;\n  do {\n    deviceHandle = deviceAddress + 4;\n    status = HAL_I2C_Master_Transmit_IT(deviceHandle,data,size,timeout,timeoutCopy);\n    if (status == 0) {\n      result = 0;\n      while ((status = HAL_I2C_GetState(deviceHandle), status != 0x20 && (result == 0))) {\n        status = HAL_GetTick();\n        elapsedTime = status - startTime;\n        if (elapsedTime < 0x65) {\n          status = HAL_I2C_GetError(deviceHandle);\n          if (status != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    status = HAL_I2C_GetError(deviceHandle);\n  } while ((status == 4) && (elapsedTime < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "transmit_and_check_status_08007e74",
                "param_1": "deviceAddress",
                "param_2": "data",
                "param_3": "size",
                "param_4": "timeout",
                "iVar1": "startTime",
                "iVar2": "status",
                "uVar3": "elapsedTime",
                "iVar4": "result",
                "iVar5": "deviceHandle",
                "uVar6": "timeoutCopy"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "HAL_I2C_Master_Transmit_IT",
                "HAL_I2C_GetState",
                "HAL_I2C_GetError",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_bytes_08007ede",
            "code": "\nundefined4 copy_bytes_08007ede(int destination,int source,uint num_bytes)\n\n{\n  uint index;\n  \n  if (0x20 < num_bytes) {\n    return 2;\n  }\n  for (index = 0; index < num_bytes; index = index + 1 & 0xff) {\n    *(undefined *)(destination + index + 0x68) = *(undefined *)(source + index);\n    *(char *)(destination + 0x88) = *(char *)(destination + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_bytes_08007ede",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "num_bytes",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "receive_data_from_i2_c_device_08007f0e",
            "code": "\nint receiveDataFromI2CDevice_08007f0e(int deviceAddress,undefined4 receiveBuffer,undefined4 bufferSize,undefined4 timeout)\n\n{\n  int startTime;\n  int errorCode;\n  uint elapsedTime;\n  int status;\n  int i2cHandle;\n  undefined4 temp;\n  \n  temp = timeout;\n  startTime = getCurrentTime();\n  elapsedTime = 0;\n  status = 2;\n  do {\n    i2cHandle = deviceAddress + 4;\n    errorCode = startI2CMasterReceive(i2cHandle,receiveBuffer,bufferSize,timeout,temp);\n    if (errorCode == 0) {\n      status = 0;\n      while ((errorCode = getI2CState(i2cHandle), errorCode != 0x20 && (status == 0))) {\n        errorCode = getCurrentTime();\n        elapsedTime = errorCode - startTime;\n        if (elapsedTime < 0x65) {\n          errorCode = getI2CError(i2cHandle);\n          if (errorCode != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    errorCode = getI2CError(i2cHandle);\n  } while ((errorCode == 4) && (elapsedTime < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "receive_data_from_i2_c_device_08007f0e",
                "param_1": "deviceAddress",
                "param_2": "receiveBuffer",
                "param_3": "bufferSize",
                "param_4": "timeout",
                "iVar1": "startTime",
                "iVar2": "errorCode",
                "uVar3": "elapsedTime",
                "iVar4": "status",
                "iVar5": "i2cHandle",
                "uVar6": "temp",
                "HAL_GetTick": "getCurrentTime",
                "HAL_I2C_Master_Receive_IT": "startI2CMasterReceive",
                "HAL_I2C_GetState": "getI2CState",
                "HAL_I2C_GetError": "getI2CError"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "HAL_I2C_GetState",
                "HAL_I2C_Master_Receive_IT",
                "HAL_I2C_GetError",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_4_08007f78",
            "code": "\nint subtract_4_08007f78(int num)\n\n{\n  return num + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_4_08007f78",
                "param_1": "num"
            },
            "calling": [
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "set_i2_c_listen_mode_08007f7c",
            "code": "\nvoid setI2CListenMode_08007f7c(int device,int mode)\n\n{\n  if (device != 0) {\n    if (mode != 0) {\n      *(int *)(device + 0x60) = mode;\n      HAL_I2C_EnableListen_IT(device + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "set_i2_c_listen_mode_08007f7c",
                "param_1": "device",
                "param_2": "mode"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_i2_c_data_08007f8e",
            "code": "\nvoid updateI2CData_08007f8e(int data_ptr,int value)\n\n{\n  if (data_ptr != 0) {\n    if (value != 0) {\n      *(int *)(data_ptr + 100) = value;\n      HAL_I2C_EnableListen_IT(data_ptr + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_i2_c_data_08007f8e",
                "param_1": "data_ptr",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "i2c_data_transfer_08007fa0",
            "code": "\nvoid i2c_data_transfer_08007fa0(int i2c_device,int is_transmit,int expected_param,undefined4 callback_function)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = get_i2c_object();\n  if (expected_param == *(int *)(i2c_device + 0xc)) {\n    if (is_transmit == 0) {\n      *(undefined *)(i2c_obj + 0x88) = 0;\n      *(undefined *)(i2c_obj + 0x5c) = 0;\n      if (*(code **)(i2c_obj + 100) != (code *)0x0) {\n        (**(code **)(i2c_obj + 100))();\n      }\n      sequential_transmit(i2c_device,i2c_obj + 0x68,*(undefined *)(i2c_obj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2c_obj + 0x5c) = 1;\n    sequential_receive(i2c_device,i2c_obj + 0x68,0x20,8,callback_function);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "i2c_data_transfer_08007fa0",
                "param_1": "i2c_device",
                "param_2": "is_transmit",
                "param_3": "expected_param",
                "param_4": "callback_function",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "get_i2c_object",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "sequential_transmit",
                "HAL_I2C_Slave_Sequential_Receive_IT": "sequential_receive"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "enable_i2c_listen_08007ff0",
            "code": "\nvoid enable_i2c_listen_08007ff0(undefined4 i2c_handle)\n\n{\n  int i2c_obj;\n  \n  i2c_obj = retrieve_i2c_object();\n  if (((*(code **)(i2c_obj + 0x60) != (code *)0x0) && (*(char *)(i2c_obj + 0x5c) == '\\x01')) &&\n     (*(char *)(i2c_obj + 0x2c) != ' ')) {\n    (**(code **)(i2c_obj + 0x60))(i2c_obj + 0x68);\n  }\n  enable_i2c_listen_08007ff0_interrupt(i2c_handle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "enable_i2c_listen_08007ff0",
                "param_1": "i2c_handle",
                "iVar1": "i2c_obj",
                "get_i2c_obj": "retrieve_i2c_object",
                "HAL_I2C_EnableListen_IT": "enable_i2c_listen_interrupt"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_ITError",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "enable_i2_c_listen_it_08008020",
            "code": "\nvoid enableI2CListenIT_08008020(undefined4 inputParam)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (*(char *)(i2cObj + 0x5d) == '\\0') {\n    enableI2CListenInterrupt(inputParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "enable_i2_c_listen_it_08008020",
                "param_1": "inputParam",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "configure_uart_08008078",
            "code": "\n\n\nvoid configureUART_08008078(int *uartConfig)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 gpioClock1;\n  uint functionMapping;\n  uint gpioMask;\n  uint gpioConfig;\n  uint gpioAltFunc;\n  undefined4 gpioInitStruct;\n  \n  if (uartConfig != (int *)0x0) {\n    peripheral1 = pinmap_peripheral((int)*(char *)(uartConfig + 0x16),&DAT_0800a864);\n    peripheral2 = pinmap_peripheral((int)*(char *)((int)uartConfig + 0x59),&DAT_0800a81c);\n    if ((peripheral2 == 0) || (peripheral1 == 0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\",peripheral2);\n    }\n    else {\n      peripheral1 = pinmap_merge_peripheral(peripheral1);\n      *uartConfig = peripheral1;\n      if (peripheral1 == 0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uartConfig + 0x11) = 0;\n          *(undefined *)((int)uartConfig + 0x5a) = 0x25;\n        }\n        else if (peripheral1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uartConfig + 0x11) = 1;\n          *(undefined *)((int)uartConfig + 0x5a) = 0x26;\n        }\n        else if (peripheral1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uartConfig + 0x11) = 2;\n          *(undefined *)((int)uartConfig + 0x5a) = 0x27;\n        }\n        gpioClock1 = set_GPIO_Port_Clock((uint)((int)*(char *)((int)uartConfig + 0x59) << 0x18) >> 0x1c);\n        functionMapping = pinmap_function((int)*(char *)((int)uartConfig + 0x59),&DAT_0800a81c);\n        gpioMask = 1 << (*(byte *)((int)uartConfig + 0x59) & 0xf) & 0xffff;\n        gpioConfig = (functionMapping >> 3 & 1) << 4 | functionMapping & 7;\n        gpioAltFunc = (functionMapping << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((functionMapping << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        gpioInitStruct = 3;\n        HAL_GPIO_Init(gpioClock1,&gpioMask);\n        gpioClock1 = set_GPIO_Port_Clock((uint)((int)*(char *)(uartConfig + 0x16) << 0x18) >> 0x1c);\n        functionMapping = pinmap_function((int)*(char *)(uartConfig + 0x16),&DAT_0800a864);\n        gpioMask = 1 << (*(byte *)(uartConfig + 0x16) & 0xf) & 0xffff;\n        gpioConfig = (functionMapping >> 3 & 1) << 4 | functionMapping & 7;\n        gpioAltFunc = (functionMapping << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(gpioClock1,&gpioMask);\n        (&DAT_200006c0)[*(byte *)(uartConfig + 0x11)] = uartConfig + 1;\n        uartConfig[1] = *uartConfig;\n        uartConfig[2] = uartConfig[0x12];\n        uartConfig[3] = uartConfig[0x13];\n        uartConfig[4] = uartConfig[0x14];\n        uartConfig[5] = uartConfig[0x15];\n        uartConfig[6] = 0xc;\n        uartConfig[7] = 0;\n        uartConfig[8] = 0;\n        HAL_UART_Init(uartConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "configure_uart_08008078",
                "param_1": "uartConfig",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "uVar3": "gpioClock1",
                "uVar4": "functionMapping",
                "local_20": "gpioMask",
                "local_1c": "gpioConfig",
                "local_18": "gpioAltFunc",
                "local_14": "gpioInitStruct"
            },
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "called": [
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "HAL_UART_Init",
                "pinmap_merge_peripheral",
                "iprintf",
                "HAL_GPIO_Init",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initialize_uart_080084b0(void)\n\n{\n  int pinmap_result;\n  undefined4 peripheral_result;\n  \n  pinmap_result = pinmap_peripheral(2,&DAT_0800a864);\n  if (pinmap_result != 0) {\n    peripheral_result = pinmap_peripheral(2,&DAT_0800a864);\n    DAT_20000075 = pinmap_pin(peripheral_result,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    uart_init(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "pinmap_result",
                "uVar2": "peripheral_result"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_pin",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "transmit_data_08008500",
            "code": "\nuint transmitData_08008500(undefined4 data,uint length)\n\n{\n  int startTick;\n  int peripheral;\n  uint index;\n  \n  startTick = HAL_GetTick();\n  peripheral = pinmap_peripheral(2,&DAT_0800a864);\n  if (peripheral == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (peripheral = pinmap_peripheral(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != peripheral))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (uart_debug_init(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    peripheral = HAL_UART_Transmit((&DAT_200006c0)[index],data,length & 0xffff,1000);\n    if (peripheral == 0) {\n      return length;\n    }\n    peripheral = HAL_GetTick();\n  } while ((uint)(peripheral - startTick) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "transmit_data_08008500",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "startTick",
                "iVar2": "peripheral",
                "uVar3": "index"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "uart_debug_init",
                "HAL_UART_Transmit",
                "HAL_GetTick",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "is_uart_state_valid_080085b8",
            "code": "\nbool is_uart_state_valid_080085b8(int device_handle)\n\n{\n  uint uart_state;\n  \n  uart_state = HAL_UART_GetState((&DAT_200006c0)[*(byte *)(device_handle + 0x44)]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "is_uart_state_valid_080085b8",
                "param_1": "device_handle",
                "uVar1": "uart_state"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "is_uart_state_enabled_080085dc",
            "code": "\nbool isUartStateEnabled_080085dc(int index)\n\n{\n  uint uartState;\n  \n  uartState = HAL_UART_GetState((&DAT_200006c0)[*(byte *)(index + 0x44)]);\n  return (uartState & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "is_uart_state_enabled_080085dc",
                "param_1": "index",
                "uVar1": "uartState"
            },
            "calling": [],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "extract_data_08008600",
            "code": "\nundefined4 extract_data_08008600(int data_size,undefined *data_buffer,undefined4 param_3,undefined4 param_4)\n\n{\n  int is_serial_rx_active;\n  \n  if (data_size == 0) {\n    return 0xffffffff;\n  }\n  is_serial_rx_active = serial_rx_active();\n  if (is_serial_rx_active == 0) {\n    *data_buffer = *(undefined *)(data_size + 0x45);\n    HAL_UART_Receive_IT((&DAT_200006c0)[*(byte *)(data_size + 0x44)],data_size + 0x45,1,&DAT_200006c0,\n                        param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "extract_data_08008600",
                "param_1": "data_size",
                "param_2": "data_buffer",
                "iVar1": "is_serial_rx_active"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "initialize_serial_communication_0800863c",
            "code": "\nvoid initializeSerialCommunication_0800863c(int serialDevice,undefined4 baudRate,undefined4 dataBits,undefined4 stopBits)\n\n{\n  int isRxActive;\n  uint deviceIndex;\n  \n  if (serialDevice != 0) {\n    isRxActive = serial_rx_active();\n    if (isRxActive == 0) {\n      deviceIndex = (uint)*(byte *)(serialDevice + 0x44);\n      *(undefined4 *)(&DAT_20000670 + deviceIndex * 4) = baudRate;\n      *(int *)(&DAT_20000684 + deviceIndex * 4) = serialDevice;\n      HAL_NVIC_SetPriority((int)*(char *)(serialDevice + 0x5a),0,1,deviceIndex,stopBits);\n      HAL_NVIC_EnableIRQ((int)*(char *)(serialDevice + 0x5a));\n      HAL_UART_Receive_IT((&DAT_200006c0)[*(byte *)(serialDevice + 0x44)],serialDevice + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "initialize_serial_communication_0800863c",
                "param_1": "serialDevice",
                "param_2": "baudRate",
                "param_3": "dataBits",
                "param_4": "stopBits",
                "iVar1": "isRxActive",
                "uVar2": "deviceIndex"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Receive_IT",
                "HAL_NVIC_SetPriority",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "initialize_peripheral_08008694",
            "code": "\nvoid initializePeripheral_08008694(int peripheralAddress,undefined4 peripheralValue)\n\n{\n  byte byteValue;\n  \n  if (peripheralAddress != 0) {\n    byteValue = *(byte *)(peripheralAddress + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = peripheralValue;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = peripheralAddress;\n    HAL_NVIC_SetPriority((int)*(char *)(peripheralAddress + 0x5a),0,2);\n    HAL_NVIC_EnableIRQ((int)*(char *)(peripheralAddress + 0x5a));\n    HAL_UART_Transmit_IT\n              ((&DAT_200006c0)[*(byte *)(peripheralAddress + 0x44)],\n               *(int *)(peripheralAddress + 100) + (uint)*(ushort *)(peripheralAddress + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "initialize_peripheral_08008694",
                "param_1": "peripheralAddress",
                "param_2": "peripheralValue",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_index_080086e8",
            "code": "\nuint find_index_080086e8(int input)\n\n{\n  uint index;\n  \n  if (input == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (input == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_index_080086e8",
                "param_1": "input",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_uart_command_0800870c",
            "code": "\nvoid executeUartCommand_0800870c(void)\n\n{\n  uint uartIndex;\n  \n  uartIndex = uart_index();\n  if (uartIndex < 5) {\n    (**(code **)(&DAT_20000670 + uartIndex * 4))(*(undefined4 *)(&DAT_20000684 + uartIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_uart_command_0800870c",
                "uVar1": "uartIndex"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "transmit_data_08008730",
            "code": "\nvoid transmitData_08008730(void)\n\n{\n  uint uartIndex;\n  int result;\n  int uartPointer;\n  \n  uartIndex = uart_index();\n  uartPointer = *(int *)(&DAT_200006ac + uartIndex * 4);\n  if ((uartIndex < 5) && (result = (**(code **)(&DAT_20000698 + uartIndex * 4))(uartPointer), result != -1)) {\n    HAL_UART_Transmit_IT\n              ((&DAT_200006c0)[*(byte *)(uartPointer + 0x44)],\n               *(int *)(uartPointer + 100) + (uint)*(ushort *)(uartPointer + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "transmit_data_08008730",
                "uVar1": "uartIndex",
                "iVar2": "result",
                "iVar3": "uartPointer"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocate_memory_08008804(int size_requested)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocated_memory = DAT_200006d4;\n  if (DAT_200006d4 + size_requested <= stack_address) {\n    DAT_200006d4 = DAT_200006d4 + size_requested;\n    return allocated_memory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size_requested",
                "puVar1": "allocated_memory",
                "&stack0x00000000": "stack_address"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_default_value_08008840",
            "code": "\nundefined4 get_default_value_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_default_value_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "initialize_memory_08008846",
            "code": "\nundefined4 initializeMemory_08008846(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "initialize_memory_08008846",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "check_if_initialized_08008850",
            "code": "\nbool check_if_initialized_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "check_if_initialized_08008850",
                "undefined4": "bool"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "initialize_08008854",
            "code": "\nundefined4 initialize_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "initialize_08008854"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_application_08008858",
            "code": "\nundefined4 initializeApplication_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_application_08008858"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "write_debug_message_0800885c",
            "code": "\nvoid write_debug_message_0800885c(undefined4 param_1,undefined4 data_1,undefined4 data_2,undefined4 data_3)\n\n{\n  uart_debug_write(data_1,data_2,data_2,data_3,data_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "write_debug_message_0800885c",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "endless_loop_08008868",
            "code": "\nvoid endlessLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "endless_loop_08008868"
            },
            "calling": [
                "abort",
                "_exit"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_and_return_0800886c",
            "code": "\nundefined4 initializeDataAndReturn_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_and_return_0800886c"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "initialize_flag_0800887c",
            "code": "\nundefined4 initializeFlag_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "initialize_flag_0800887c"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "convert_value_08008880",
            "code": "\nuint convert_value_08008880(uint input_value)\n\n{\n  bool is_less_than_0x3c;\n  char char_value;\n  uint converted_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_0x3c = true;\n    }\n    else {\n      is_less_than_0x3c = false;\n    }\n  }\n  else {\n    is_less_than_0x3c = input_value < 0x3c;\n  }\n  if (is_less_than_0x3c) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    char_value = (&DAT_0800a908)[input_value];\n  }\n  else {\n    char_value = -1;\n  }\n  if (char_value == -1) {\n    converted_value = 0;\n  }\n  else {\n    converted_value = adc_read_value();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return converted_value >> (0xc - DAT_20000088 & 0xff);\n      }\n      return converted_value << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return converted_value;\n}\n\n",
            "renaming": {
                "FUN_08008880": "convert_value_08008880",
                "param_1": "input_value",
                "bVar1": "is_less_than_0x3c",
                "cVar2": "char_value",
                "uVar3": "converted_value"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "configure_pin_080088e0",
            "code": "\nvoid configurePin_080088e0(uint pinIndex,uint pinValue)\n\n{\n  int pinConfigured;\n  int mappedPin;\n  \n  if (pinIndex < 0x3c) {\n    mappedPin = (int)(char)(&DAT_0800a908)[pinIndex];\n  }\n  else {\n    mappedPin = -1;\n  }\n  if (mappedPin != -1) {\n    pinConfigured = getMappedPin(mappedPin,&DAT_0800a6cc);\n    if (pinConfigured == 0) {\n      setPinMode(pinIndex,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          pinValue = pinValue << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          pinValue = pinValue >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (pinValue < 0x80) {\n        setPinValue(pinIndex,0);\n      }\n      else {\n        setPinValue(pinIndex,1);\n      }\n    }\n    else {\n      pinConfigured = isPinConfigured(mappedPin,&DAT_200006d8);\n      if (pinConfigured == 0) {\n        setPinConfigured(mappedPin,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          pinValue = pinValue << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          pinValue = pinValue >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      startPWM(mappedPin,0x3e418,0xff,pinValue,pinConfigured == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "configure_pin_080088e0",
                "param_1": "pinIndex",
                "param_2": "pinValue",
                "iVar1": "pinConfigured",
                "iVar2": "mappedPin",
                "pin_in_pinmap": "getMappedPin",
                "pinMode": "setPinMode",
                "digitalWrite": "setPinValue",
                "is_pin_configured": "isPinConfigured",
                "set_pin_configured": "setPinConfigured",
                "pwm_start": "startPWM"
            },
            "calling": [
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "set_pin_configured",
                "pwm_start",
                "is_pin_configured",
                "digitalWrite",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "initialize_pin_08008990",
            "code": "\nvoid initializePin_08008990(uint pinIndex,undefined4 pinMode,undefined4 isPullup,undefined1 *pinConfigArray)\n\n{\n  int isConfigured;\n  undefined1 *pinConfigPtr;\n  int selectedPin;\n  \n  if (pinIndex < 0x3c) {\n    selectedPin = (int)(char)(&DAT_0800a908)[pinIndex];\n    pinConfigPtr = &DAT_0800a908;\n  }\n  else {\n    selectedPin = -1;\n    pinConfigPtr = pinConfigArray;\n  }\n  if (selectedPin != -1) {\n    isConfigured = is_pin_configured(selectedPin,&DAT_200006d8,isPullup,pinConfigPtr,pinConfigArray);\n    if (isConfigured != 0) {\n      isConfigured = pin_in_pinmap(selectedPin,&DAT_0800a6cc);\n      if (isConfigured != 0) {\n        pwm_stop(selectedPin);\n      }\n      reset_pin_configured(selectedPin,&DAT_200006d8);\n    }\n    switch(pinMode) {\n    case 0:\n      digital_io_init(selectedPin,0);\n      break;\n    case 1:\n      digital_io_init(selectedPin,1,0);\n      break;\n    case 2:\n      digital_io_init(selectedPin,0,1);\n      break;\n    case 3:\n      digital_io_init(selectedPin,0,2);\n    }\n    set_pin_configured(selectedPin,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "initialize_pin_08008990",
                "param_1": "pinIndex",
                "param_2": "pinMode",
                "param_3": "isPullup",
                "param_4": "pinConfigArray",
                "iVar1": "isConfigured",
                "iVar3": "selectedPin",
                "puVar2": "pinConfigPtr"
            },
            "calling": [
                "FUN_080025ac",
                "blinkVersion",
                "analogWrite",
                "setPinModeCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "set_pin_configured",
                "is_pin_configured",
                "pwm_stop",
                "reset_pin_configured",
                "digital_io_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "configure_pin_08008a24",
            "code": "\nvoid configurePin_08008a24(uint pinIndex,undefined4 value,undefined4 param3,undefined1 *data)\n\n{\n  int pinConfigured;\n  undefined4 GPIOport;\n  undefined1 *pinData;\n  uint pinValue;\n  \n  if (pinIndex < 0x3c) {\n    pinValue = (uint)(char)(&DAT_0800a908)[pinIndex];\n    pinData = &DAT_0800a908;\n  }\n  else {\n    pinValue = 0xffffffff;\n    pinData = data;\n  }\n  if ((pinValue != 0xffffffff) &&\n     (pinConfigured = is_pin_configured(pinValue,&DAT_200006ec,param3,pinData,data), pinConfigured != 0)) {\n    GPIOport = get_GPIO_Port((pinValue << 0x18) >> 0x1c);\n    digital_io_write(GPIOport,1 << (pinValue & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "configure_pin_08008a24",
                "param_1": "pinIndex",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "data",
                "iVar1": "pinConfigured",
                "uVar2": "GPIOport",
                "puVar3": "pinData",
                "uVar4": "pinValue"
            },
            "calling": [
                "strobeBlinkPin",
                "analogWrite",
                "setPinModeCallback"
            ],
            "called": [
                "is_pin_configured",
                "get_GPIO_Port",
                "digital_io_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_pin_08008a6c",
            "code": "\nchar check_pin_08008a6c(uint pin_number)\n\n{\n  char is_configured;\n  int is_pin_configured;\n  undefined4 gpio_port;\n  uint pin_mask;\n  \n  if (pin_number < 0x3c) {\n    pin_mask = (uint)(char)(&DAT_0800a908)[pin_number];\n  }\n  else {\n    pin_mask = 0xffffffff;\n  }\n  if (pin_mask == 0xffffffff) {\n    is_configured = '\\0';\n  }\n  else {\n    is_pin_configured = is_pin_configured(pin_mask,&DAT_200006ec);\n    if (is_pin_configured == 0) {\n      is_configured = '\\0';\n    }\n    else {\n      gpio_port = get_GPIO_Port((pin_mask << 0x18) >> 0x1c);\n      is_configured = digital_io_read(gpio_port,1 << (pin_mask & 0xf) & 0xffff);\n    }\n  }\n  if (is_configured != '\\0') {\n    is_configured = '\\x01';\n  }\n  return is_configured;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_pin_08008a6c",
                "param_1": "pin_number",
                "cVar1": "is_configured",
                "iVar2": "is_pin_configured",
                "uVar3": "gpio_port",
                "uVar4": "pin_mask"
            },
            "calling": [
                "checkDigitalInputs"
            ],
            "called": [
                "digital_io_read",
                "is_pin_configured",
                "get_GPIO_Port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "get_current_milliseconds_08008abc",
            "code": "\nvoid getCurrentMilliseconds_08008abc(void)\n\n{\n  GetCurrentMilli();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "get_current_milliseconds_08008abc"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "blinkVersion",
                "strobeBlinkPin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_checksum_08008afa",
            "code": "\nushort calculate_checksum_08008afa(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_checksum_08008afa",
                "param_1": "input_value"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "update_and_store_data_08008b66",
            "code": "\nvoid updateAndStoreData_08008b66(int deviceHandle)\n\n{\n  int returnValue;\n  ushort newIndex;\n  undefined receivedData;\n  \n  returnValue = uart_getc(deviceHandle,&receivedData);\n  if ((returnValue == 0) &&\n     (newIndex = *(short *)(deviceHandle + 0x60) + 1U & 0x3f, newIndex != *(ushort *)(deviceHandle + 0x62))) {\n    *(undefined *)(*(int *)(deviceHandle + 0x5c) + (uint)*(ushort *)(deviceHandle + 0x60)) = receivedData;\n    *(ushort *)(deviceHandle + 0x60) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "update_and_store_data_08008b66",
                "param_1": "deviceHandle",
                "iVar1": "returnValue",
                "uVar2": "newIndex",
                "local_9": "receivedData"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_function_08008c20",
            "code": "\nvoid initializeFunction_08008c20(int functionParameter)\n\n{\n  *(int *)(functionParameter + 0x130) = functionParameter + 0x11;\n  *(undefined2 *)(functionParameter + 0x134) = 0;\n  *(undefined2 *)(functionParameter + 0x136) = 0;\n  *(int *)(functionParameter + 0x138) = functionParameter + 0x51;\n  *(undefined2 *)(functionParameter + 0x13c) = 0;\n  *(undefined2 *)(functionParameter + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_function_08008c20",
                "param_1": "functionParameter"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_port_08008c44",
            "code": "\nvoid initializeSerialPort_08008c44(int baseAddress,undefined4 baudRate,byte serialConfig)\n\n{\n  uint dataBits;\n  byte configOptions;\n  int numBits;\n  code *jumpTable;\n  \n  *(undefined4 *)(baseAddress + 0x11c) = baudRate;\n  *(byte *)(baseAddress + 0x140) = serialConfig;\n  configOptions = serialConfig & 7;\n  if (configOptions == 4) {\n    numBits = 7;\n  }\n  else if (configOptions == 6) {\n    numBits = 8;\n  }\n  else if (configOptions == 2) {\n    numBits = 6;\n  }\n  else {\n    numBits = 0;\n  }\n  if ((serialConfig & 0x30) == 0x30) {\n    *(undefined4 *)(baseAddress + 0x128) = 0x600;\n    numBits = numBits + 1;\n  }\n  else if ((serialConfig & 0x20) == 0) {\n    *(undefined4 *)(baseAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(baseAddress + 0x128) = 0x400;\n    numBits = numBits + 1;\n  }\n  if ((serialConfig & 8) == 0) {\n    *(undefined4 *)(baseAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(baseAddress + 0x124) = 0x2000;\n  }\n  if (numBits == 8) {\n    *(undefined4 *)(baseAddress + 0x120) = 0;\n  }\n  else if (numBits == 9) {\n    *(undefined4 *)(baseAddress + 0x120) = 0x1000;\n  }\n  else {\n    numBits = 0;\n  }\n  if (numBits != 0) {\n    uart_init(baseAddress + 0xd4);\n    uart_attach_rx_callback(baseAddress + 0xd4,0x8008b67);\n    return;\n  }\n  jumpTable = (code *)0x8008cee;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (dataBits < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[dataBits];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0,dataBits,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_port_08008c44",
                "param_1": "baseAddress",
                "param_2": "baudRate",
                "param_3": "serialConfig",
                "extraout_r1": "dataBits",
                "bVar1": "configOptions",
                "iVar2": "numBits",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "uart_init",
                "uart_attach_rx_callback",
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_return_value_based_on_input_08008d00",
            "code": "\nvoid setReturnValueBasedOnInput_08008d00(int baseAddress,uint inputValue)\n\n{\n  undefined returnValue;\n  code *jumpTable;\n  \n  if (inputValue < 0x3c) {\n    returnValue = (&DAT_0800a908)[inputValue];\n  }\n  else {\n    returnValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 0x12d) = returnValue;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_return_value_based_on_input_08008d00",
                "param_1": "baseAddress",
                "param_2": "inputValue",
                "uVar1": "returnValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_default_value_08008d18",
            "code": "\nvoid setDefaultValue_08008d18(int baseAddress,uint index)\n\n{\n  undefined defaultValue;\n  \n  if (index < 0x3c) {\n    defaultValue = (&DAT_0800a908)[index];\n  }\n  else {\n    defaultValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = defaultValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_default_value_08008d18",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "defaultValue"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_component_08008d30",
            "code": "\nundefined4 *\ninitialize_component_08008d30(undefined4 *component,undefined4 pin,undefined4 value,undefined4 param)\n\n{\n  undefined pin_value;\n  \n  offset_1 = 0;\n  offset_2 = 1000;\n  *component = &PTR_LAB_08008ba4_1_0800aab8;\n  if (component == (undefined4 *)&DAT_20000700) {\n    setRx(&DAT_20000700,0,value,&DAT_20000700,param);\n    setTx(&DAT_20000700,1);\n  }\n  else {\n    pin_value = pinmap_pin(pin,&DAT_0800a81c);\n    *(undefined *)((int)component + 0x12d) = pin_value;\n    pin_value = pinmap_pin(pin,&DAT_0800a864);\n    *(undefined *)(component + 0x4b) = pin_value;\n  }\n  initialize_component_08008d30_function_call;\n  return component;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_component_08008d30",
                "param_1": "component",
                "param_2": "pin",
                "param_3": "value",
                "param_4": "param",
                "uVar1": "pin_value",
                "param_1[1]": "offset_1",
                "param_1[2]": "offset_2",
                "init(param_1)": "initialize_component_function_call"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "setRx",
                "init",
                "setTx",
                "pinmap_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_serial_connection_08008d8c",
            "code": "\nvoid initializeSerialConnection_08008d8c(int status,int flag,undefined4 parameter1,undefined4 parameter2)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    HardwareSerial(&DAT_20000700,0x40004400,parameter1,0xffff,parameter2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_serial_connection_08008d8c",
                "param_1": "status",
                "param_2": "flag",
                "param_3": "parameter1",
                "param_4": "parameter2"
            },
            "calling": [],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_0800ab0c;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_ip_address_08008e14",
            "code": "\nvoid initializeIPAddress_08008e14(int flag,int value)\n\n{\n  if ((flag == 1) && (value == 0xffff)) {\n    IPAddress(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_ip_address_08008e14",
                "param_1": "flag",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "IPAddress"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_interpolation_08008ef4",
            "code": "\nint calculateInterpolation_08008ef4(int startValue1,int startValue2,int endValue,int startResult,int endResult)\n\n{\n  return (uint)((endResult - startResult) * (startValue1 - startValue2)) / (uint)(endValue - startValue2) + startResult;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_interpolation_08008ef4",
                "param_1": "startValue1",
                "param_2": "startValue2",
                "param_3": "endValue",
                "param_4": "startResult",
                "param_5": "endResult"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "configure_hardware_08008f0e",
            "code": "\nvoid configureHardware_08008f0e(void)\n\n{\n  HAL_NVIC_SetPriorityGrouping(3);\n  initializeHardwareConfiguration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "configure_hardware_08008f0e",
                "initialize_hardware_configuration_080036a2": "initializeHardwareConfiguration"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "FUN_080036a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "continuous_loop_08008f1c",
            "code": "\nvoid continuousLoop_08008f1c(void)\n\n{\n  initializeVariant();\n  initializeEnvironment();\n  do {\n    performLoopIteration();\n    processSerialEvents();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "continuous_loop_08008f1c",
                "initVariant": "initializeVariant",
                "setup": "initializeEnvironment",
                "loop": "performLoopIteration",
                "serialEventRun": "processSerialEvents"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "initVariant",
                "loop",
                "serialEventRun",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\nchar countSetBits_08008f3c(uint num)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; num != 1; num = num >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "param_1": "num",
                "cVar1": "bitCount"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_data_08008f78",
            "code": "\nvoid initializeData_08008f78(int status,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    registerCleanup(0,cleanupFunction,&DAT_20000000,&DAT_2000084c,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "__aeabi_atexit": "registerCleanup",
                "&LAB_08008f50_1": "cleanupFunction"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "check_and_execute_function_08009084",
            "code": "\nvoid checkAndExecuteFunction_08009084(int input)\n\n{\n  int pinId;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  throwBadFunctionCall;\n  pinId = getPinId;\n  if ((&DAT_20000858)[pinId * 5] != 0) {\n    checkAndExecuteFunction_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "check_and_execute_function_08009084",
                "param_1": "input",
                "iVar1": "pinId",
                "__throw_bad_function_call()": "throwBadFunctionCall",
                "get_pin_id()": "getPinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "perform_pin_check_08009094",
            "code": "\nvoid performPinCheck_08009094(void)\n\n{\n  int pinId;\n  \n  pinId = retrievePinId();\n  if ((&DAT_20000858)[pinId * 5] != 0) {\n    executeOperation();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "perform_pin_check_08009094",
                "iVar1": "pinId",
                "get_pin_id": "retrievePinId",
                "operator()": "executeOperation"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "register_cxa_at_exit_handler_080090c2",
            "code": "\nvoid registerCxaAtExitHandler_080090c2(undefined4 handlerFunction,undefined4 handlerObject)\n\n{\n  __cxa_atexit(handlerObject,handlerFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "register_cxa_at_exit_handler_080090c2",
                "param_1": "handlerFunction",
                "param_2": "handlerObject"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "log_assertion_failure_080090cc",
            "code": "\nvoid logAssertionFailure_080090cc(undefined4 fileName,undefined4 lineNumber,char *condition,undefined4 functionName)\n\n{\n  undefined4 filePointer;\n  char *commaString;\n  undefined8 abortResult;\n  undefined4 extraInfo;\n  \n  filePointer = *(undefined4 *)(DAT_20000090 + 0xc);\n  extraInfo = functionName;\n  if (condition == (char *)0x0) goto LAB_080090f0;\n  commaString = \", function: \";\n  do {\n    fiprintf(filePointer,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,fileName,lineNumber,\n             commaString,condition,extraInfo);\n    abortResult = abort();\n    lineNumber = (undefined4)((ulonglong)abortResult >> 0x20);\n    filePointer = (undefined4)abortResult;\nLAB_080090f0:\n    condition = \"\";\n    commaString = condition;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "log_assertion_failure_080090cc",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "condition",
                "param_4": "functionName",
                "uVar1": "filePointer",
                "pcVar2": "commaString",
                "uVar3": "abortResult",
                "uVar4": "extraInfo"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_left_by32_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftLeftBy32_08009108(undefined4 inputValue,uint shiftValue)\n\n{\n  return (ulonglong)shiftValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_left_by32_08009108",
                "param_1": "inputValue",
                "param_2": "shiftValue"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "print_with_stack_08009124",
            "code": "\nvoid printWithStack_08009124(undefined4 formatString,undefined4 arg1,undefined4 stackVar1,undefined4 stackVar2)\n\n{\n  undefined4 stackVar3;\n  undefined4 stackVar4;\n  \n  stackVar3 = stackVar1;\n  stackVar4 = stackVar2;\n  _vfiprintf_r(DAT_20000090,formatString,arg1,&stackVar3,formatString,&stackVar3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "print_with_stack_08009124",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "stackVar1",
                "param_4": "stackVar2",
                "uStack_8": "stackVar3",
                "uStack_4": "stackVar4"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid execute_functions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(function_pointer *)(&DAT_0800abe4)[index])();\n  }\n  initialize();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(function_pointer *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index",
                "code": "function_pointer",
                "_init": "initialize"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "premain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid allocateMemory_08009190(undefined4 size)\n\n{\n  _malloc_r(DAT_20000090,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "param_1": "size"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "free_memory_080091a0",
            "code": "\nvoid free_memory_080091a0(undefined4 memory_address)\n\n{\n  _free_r(DAT_20000090,memory_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "free_memory_080091a0",
                "param_1": "memory_address"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copy_data_080091b0(int dst_start,undefined *src_start,int size)\n\n{\n  undefined *src_end;\n  undefined *dst_end;\n  \n  dst_end = (undefined *)(dst_start + -1);\n  src_end = src_start + size;\n  for (; src_start != src_end; src_start = src_start + 1) {\n    dst_end = dst_end + 1;\n    *dst_end = *src_start;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "dst_start",
                "param_2": "src_start",
                "param_3": "size",
                "puVar1": "src_end",
                "puVar2": "dst_end"
            },
            "calling": [
                "realloc",
                "FUN_080027f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *memory,undefined value,int length)\n\n{\n  undefined *endOfMemory;\n  \n  endOfMemory = memory + length;\n  for (; memory != endOfMemory; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endOfMemory"
            },
            "calling": [
                "std.isra.0",
                "__sfp",
                "FUN_08002a58",
                "pwm_start",
                "adc_read_value",
                "FUN_08002968",
                "__sfmoreglue"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "initialize_memory_block_080091d8",
            "code": "\nvoid initializeMemoryBlock_080091d8(undefined4 *result,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **temp;\n  int **current;\n  int **next;\n  int *temp2;\n  int **prev;\n  int **block;\n  \n  if (size == 0) {\n    return;\n  }\n  block = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    block = (int **)((int)block + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  next = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    block[1] = (int *)0x0;\n    current = temp;\n    DAT_2000098c = block;\n  }\n  else {\n    next = DAT_2000098c;\n    if (block < DAT_2000098c) {\n      current = (int **)*block;\n      next = (int **)((int)block + (int)current);\n      if (DAT_2000098c == next) {\n        temp2 = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        next = (int **)((int)temp2 + (int)current);\n        *block = (int *)next;\n      }\n      block[1] = (int *)DAT_2000098c;\n      DAT_2000098c = block;\n    }\n    else {\n      do {\n        prev = next;\n        next = (int **)prev[1];\n        if (next == (int **)0x0) break;\n      } while (next <= block);\n      current = (int **)*prev;\n      if ((int **)((int)prev + (int)current) == block) {\n        current = (int **)((int)current + (int)*block);\n        *prev = (int *)current;\n        if (next == (int **)((int)prev + (int)current)) {\n          temp2 = *next;\n          next = (int **)next[1];\n          current = (int **)((int)current + (int)temp2);\n          *prev = (int *)current;\n          prev[1] = (int *)next;\n        }\n      }\n      else if (block < (int **)((int)prev + (int)current)) {\n        *result = 0xc;\n      }\n      else {\n        current = (int **)((int)block + (int)*block);\n        if (next == current) {\n          temp2 = *next;\n          next = (int **)next[1];\n          current = (int **)((int)temp2 + (int)*block);\n          *block = (int *)current;\n        }\n        block[1] = (int *)next;\n        prev[1] = (int *)block;\n      }\n    }\n  }\n  __malloc_unlock(result,current,next,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "initialize_memory_block_080091d8",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "temp",
                "ppiVar1": "current",
                "ppiVar2": "next",
                "piVar3": "temp2",
                "ppiVar4": "prev",
                "ppiVar5": "block"
            },
            "calling": [
                "abort",
                "realloc",
                "free",
                "__swsetup_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *size_ptr,uint num_bytes)\n\n{\n  uint *current_ptr;\n  int remaining_space;\n  uint *previous_ptr;\n  uint space_difference;\n  uint *new_ptr;\n  uint allocated_size;\n  \n  allocated_size = (num_bytes + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < num_bytes)) {\n    *size_ptr = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_ptr = DAT_2000098c;\n    new_ptr = DAT_2000098c;\n    while (previous_ptr = current_ptr, previous_ptr != (uint *)0x0) {\n      space_difference = *previous_ptr - allocated_size;\n      if (-1 < (int)space_difference) {\n        if (space_difference < 0xc) {\n          if (new_ptr == previous_ptr) {\n            current_ptr = (uint *)new_ptr[1];\n            DAT_2000098c = current_ptr;\n          }\n          else {\n            current_ptr = (uint *)previous_ptr[1];\n          }\n          if (new_ptr != previous_ptr) {\n            new_ptr[1] = (uint)current_ptr;\n            new_ptr = previous_ptr;\n          }\n        }\n        else {\n          *previous_ptr = space_difference;\n          *(uint *)((int)previous_ptr + space_difference) = allocated_size;\n          new_ptr = (uint *)((int)previous_ptr + space_difference);\n        }\n        goto LAB_080092d4;\n      }\n      new_ptr = previous_ptr;\n      current_ptr = (uint *)previous_ptr[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = _sbrk_r(size_ptr);\n    }\n    current_ptr = (uint *)_sbrk_r(size_ptr,allocated_size);\n    if ((current_ptr != (uint *)0xffffffff) &&\n       ((new_ptr = (uint *)((int)current_ptr + 3U & 0xfffffffc), current_ptr == new_ptr ||\n        (remaining_space = _sbrk_r(size_ptr,(int)new_ptr - (int)current_ptr), remaining_space != -1)))) {\n      *new_ptr = allocated_size;\nLAB_080092d4:\n      __malloc_unlock(size_ptr);\n      allocated_size = (int)new_ptr + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(new_ptr + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)new_ptr + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *size_ptr = 0xc;\n    __malloc_unlock(size_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "size_ptr",
                "param_2": "num_bytes",
                "puVar1": "current_ptr",
                "iVar2": "remaining_space",
                "puVar3": "previous_ptr",
                "uVar4": "space_difference",
                "puVar5": "new_ptr",
                "uVar6": "allocated_size"
            },
            "calling": [
                "realloc",
                "__smakebuf_r",
                "malloc",
                "__sfmoreglue"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint processInput_0800932c(int inputStruct,byte inputByte,byte **inputData)\n\n{\n  int tempVar1;\n  byte *tempVar2;\n  byte *tempVar3;\n  uint result;\n  \n  tempVar2 = inputData[2] + -1;\n  inputData[2] = tempVar2;\n  if ((-1 < (int)tempVar2) ||\n     (((int)inputData[6] <= (int)tempVar2 && (tempVar2 = (byte *)(uint)inputByte, tempVar2 != (byte *)0xa))))\n  {\n    tempVar2 = *inputData;\n    *inputData = tempVar2 + 1;\n    *tempVar2 = inputByte;\n    return (uint)inputByte;\n  }\n  if ((inputStruct != 0) && (*(int *)(inputStruct + 0x18) == 0)) {\n    __sinit();\n  }\n  if (inputData == (byte **)&DAT_0800aba4) {\n    inputData = *(byte ***)(inputStruct + 4);\n  }\n  else if (inputData == (byte **)&DAT_0800abc4) {\n    inputData = *(byte ***)(inputStruct + 8);\n  }\n  else if (inputData == (byte **)&DAT_0800ab84) {\n    inputData = *(byte ***)(inputStruct + 0xc);\n  }\n  inputData[2] = inputData[6];\n  tempVar3 = (byte *)(uint)*(ushort *)(inputData + 3);\n  tempVar1 = (int)tempVar3 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar3 = inputData[4], tempVar3 != (byte *)0x0)) ||\n     (tempVar1 = __swsetup_r(inputStruct,inputData,tempVar1,tempVar3,tempVar2), tempVar1 == 0)) {\n    result = (uint)inputByte;\n    tempVar1 = (int)*inputData - (int)inputData[4];\n    if ((tempVar1 < (int)inputData[5]) || (tempVar1 = _fflush_r(inputStruct,inputData), tempVar1 == 0)) {\n      inputData[2] = inputData[2] + -1;\n      tempVar2 = *inputData;\n      *inputData = tempVar2 + 1;\n      *tempVar2 = inputByte;\n      if ((byte *)(tempVar1 + 1) != inputData[5]) {\n        if (-1 < (int)((uint)*(ushort *)(inputData + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      tempVar1 = _fflush_r(inputStruct,inputData);\n      if (tempVar1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "inputStruct",
                "param_2": "inputByte",
                "param_3": "inputData",
                "iVar1": "tempVar1",
                "pbVar2": "tempVar2",
                "pbVar3": "tempVar3",
                "uVar4": "result"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__sinit",
                "_fflush_r",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "write_bytes_08009358",
            "code": "\nint write_bytes_08009358(undefined4 _file,undefined4 _buf,undefined *data_ptr,int size)\n\n{\n  int bytes_written;\n  undefined *end_ptr;\n  int remaining_size;\n  \n  end_ptr = data_ptr + size;\n  remaining_size = size;\n  do {\n    if (data_ptr == end_ptr) {\n      return 0;\n    }\n    bytes_written = __sfputc_r(_file,*data_ptr,_buf,size,remaining_size);\n    size = bytes_written + 1;\n    data_ptr = data_ptr + 1;\n  } while (size != 0);\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_08009358": "write_bytes_08009358",
                "param_1": "_file",
                "param_2": "_buf",
                "param_3": "data_ptr",
                "param_4": "size",
                "iVar1": "bytes_written",
                "puVar2": "end_ptr",
                "iVar3": "remaining_size"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "print_formatted_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint print_formatted_0800937c(int output_stream,undefined4 *format_string,byte *args,int *arg_pointer)\n\n{\n  int status;\n  int *temp_pointer;\n  bool found_number_flag;\n  byte *current_char;\n  byte *string_pointer;\n  int constant_1;\n  int temp_variable;\n  int *arg_pointer;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int field_width;\n  int characters_printed;\n  byte conversion;\n  undefined flag_space;\n  undefined flag_plus;\n  undefined flag_hash;\n  undefined4 arg_pointer_temp;\n  \n  arg_pointer = arg_pointer;\n  if ((output_stream != 0) && (*(int *)(output_stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format_string == &DAT_0800aba4) {\n    format_string = *(undefined4 **)(output_stream + 4);\n  }\n  else if (format_string == (undefined4 *)&DAT_0800abc4) {\n    format_string = *(undefined4 **)(output_stream + 8);\n  }\n  else if (format_string == (undefined4 *)&DAT_0800ab84) {\n    format_string = *(undefined4 **)(output_stream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format_string + 3) << 0x1c)) || (format_string[4] == 0)) &&\n     (temp_variable = __swsetup_r(output_stream,format_string), temp_variable != 0)) {\n    return -1;\n  }\n  characters_printed = 0;\n  flag_space = 0x20;\n  flag_plus = 0x30;\n  current_char = args;\nLAB_080093be:\n  string_pointer = current_char;\n  if (*string_pointer != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  current_char = string_pointer + 1;\n  if (*string_pointer != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  temp_variable = (int)string_pointer - (int)args;\n  if (temp_variable != 0) {\n    status = __sfputs_r(output_stream,format_string,args,temp_variable);\n    if (status == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(format_string + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return characters_printed;\n    }\n    characters_printed = characters_printed + temp_variable;\n  }\n  if (*string_pointer == 0) goto LAB_08009568;\n  flags = 0;\n  field_width = 0;\n  precision = -1;\n  width = 0;\n  flag_hash = 0;\n  arg_pointer_temp = 0;\n  current_char = string_pointer + 1;\n  while( true ) {\n    temp_variable = memchr(\"#-0+ \",*current_char);\n    args = current_char + 1;\n    if (temp_variable == 0) break;\n    flags = 1 << (temp_variable + 0xf7ff54b0U & 0xff) | flags;\n    current_char = args;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag_hash = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag_hash = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    temp_pointer = arg_pointer + 1;\n    temp_variable = *arg_pointer;\n    arg_pointer = temp_pointer;\n    if (temp_variable < 0) {\n      field_width = -temp_variable;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    found_number_flag = false;\n    temp_variable = field_width;\n    args = current_char;\n    while( true ) {\n      if (9 < *args - 0x30) break;\n      temp_variable = temp_variable * 10 + (*args - 0x30);\n      found_number_flag = true;\n      args = args + 1;\n    }\n    if (!found_number_flag) goto LAB_080094a6;\n  }\n  field_width = temp_variable;\nLAB_080094a6:\n  if (*args == 0x2e) {\n    if (args[1] == 0x2a) {\n      args = args + 2;\n      temp_pointer = arg_pointer + 1;\n      precision = *arg_pointer;\n      arg_pointer = temp_pointer;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      found_number_flag = false;\n      temp_variable = 0;\n      precision = 0;\n      while( true ) {\n        args = args + 1;\n        if (9 < *args - 0x30) break;\n        temp_variable = temp_variable * 10 + (*args - 0x30);\n        found_number_flag = true;\n      }\n      if (found_number_flag) {\n        precision = temp_variable;\n      }\n    }\n  }\n  temp_variable = memchr(&DAT_0800ab56,*args,3);\n  if (temp_variable != 0) {\n    args = args + 1;\n    flags = flags | 0x40 << (temp_variable + 0xf7ff54aaU & 0xff);\n  }\n  conversion = *args;\n  args = args + 1;\n  temp_variable = memchr(\"efgEFG\",conversion,6);\n  if (temp_variable == 0) {\n    constant_1 = _printf_i(output_stream,&flags,format_string,0x8009359,&arg_pointer);\n    if (constant_1 == -1) goto LAB_08009568;\n  }\n  else {\n    arg_pointer = (int *)(((int)arg_pointer + 7U & 0xfffffff8) + 8);\n  }\n  characters_printed = characters_printed + constant_1;\n  current_char = args;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "print_formatted_0800937c",
                "param_1": "output_stream",
                "param_2": "format_string",
                "param_3": "args",
                "param_4": "arg_pointer",
                "iVar1": "status",
                "piVar2": "temp_pointer",
                "bVar3": "found_number_flag",
                "pbVar4": "current_char",
                "pbVar5": "string_pointer",
                "unaff_r9": "constant_1",
                "iVar6": "temp_variable",
                "local_8c": "arg_pointer",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "field_width",
                "local_74": "characters_printed",
                "local_70": "conversion",
                "local_6f": "flag_space",
                "local_6e": "flag_plus",
                "local_45": "flag_hash",
                "local_30": "arg_pointer_temp"
            },
            "calling": [
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__sinit",
                "memchr",
                "_printf_i",
                "__sfputs_r",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocess_data_080095a8(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_length;\n  uint offset;\n  bool is_condition_true;\n  \n  max_length = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_length = data[2];\n  }\n  *output = max_length;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_length + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_length = (uint)*(byte *)((int)data + 0x43);\n  if (max_length != 0) {\n    max_length = 1;\n  }\n  offset = max_length;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_length + 0x43) = 0x30;\n    offset = max_length + 2;\n    *(undefined *)((int)data + max_length + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,offset);\n  if (index != -1) {\n    max_length = data[3];\n    is_condition_true = (*data & 6) != 4;\n    if (is_condition_true) {\n      max_length = 0;\n    }\n    offset = 0;\n    if (!is_condition_true) {\n      max_length = max_length - *output;\n    }\n    if (!is_condition_true) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_length = max_length + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_length == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_length",
                "uVar4": "offset",
                "bVar5": "is_condition_true"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "print_formatted_text_08009698",
            "code": "\nuint print_formatted_text_08009698(undefined4 format_string,uint *args,undefined4 width,code *output_function,uint **ptr_numargs)\n\n{\n  byte first_byte;\n  int result;\n  uint *ptr_arg;\n  int output_result;\n  char *digit_string;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint arg_value;\n  uint printed_chars;\n  char *formatted_arg;\n  char *format_ptr;\n  uint num_printed_chars [2];\n  \n  first_byte = *(byte *)(args + 6);\n  format_ptr = (char *)((int)args + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_08009852;\n          if (first_byte != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)args + 0x45) = 0x58;\n          digit_string = \"0123456789ABCDEF\";\nLAB_080097e2:\n          base = *args;\n          ptr_arg = *ptr_numargs;\n          *ptr_numargs = ptr_arg + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            arg_value = (uint)*(ushort *)ptr_arg;\n          }\n          else {\n            arg_value = *ptr_arg;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *args = base | 0x20;\n          }\n          if (arg_value == 0) {\n            *args = *args & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08009778:\n          *(undefined *)((int)args + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_080096c8;\n          arg_value = *args;\n          ptr_arg = *ptr_numargs;\n          if ((arg_value & 0x80) == 0) {\n            *ptr_numargs = ptr_arg + 1;\n            if ((arg_value & 0x40) == 0) goto LAB_080096e8;\n            arg_value = (uint)(short)*(ushort *)ptr_arg;\n          }\n          else {\n            *ptr_numargs = ptr_arg + 1;\nLAB_080096e8:\n            arg_value = *ptr_arg;\n          }\n          if ((int)arg_value < 0) {\n            arg_value = -arg_value;\n            *(undefined *)((int)args + 0x43) = 0x2d;\n          }\n          digit_string = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        printed_chars = args[1];\n        args[2] = printed_chars;\n        formatted_arg = format_ptr;\n        if ((int)printed_chars < 0) {\n          if (arg_value != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)args + 0x42) = *digit_string;\n          formatted_arg = (char *)((int)args + 0x42);\n        }\n        else {\n          *args = *args & 0xfffffffb;\n          if (arg_value == 0) {\n            if (printed_chars != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              printed_chars = arg_value / base;\n              formatted_arg = formatted_arg + -1;\n              *formatted_arg = digit_string[arg_value - base * printed_chars];\n              arg_value = printed_chars;\n            } while (printed_chars != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*args << 0x1f) < 0)) && ((int)args[1] <= (int)args[4]))\n        {\n          formatted_arg[-1] = '0';\n          formatted_arg = formatted_arg + -1;\n        }\n        args[4] = (int)format_ptr - (int)formatted_arg;\n        format_ptr = formatted_arg;\n        goto LAB_080097be;\n      }\n      ptr_arg = *ptr_numargs;\n      *ptr_numargs = ptr_arg + 1;\n      *(char *)((int)args + 0x42) = (char)*ptr_arg;\nLAB_08009728:\n      format_ptr = (char *)((int)args + 0x42);\n      arg_value = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_0800974e:\n            arg_value = *args;\n            ptr_arg = *ptr_numargs;\n            if ((arg_value & 0x80) == 0) {\n              *ptr_numargs = ptr_arg + 1;\n              if ((arg_value & 0x40) == 0) goto LAB_0800975c;\n              arg_value = (uint)*(ushort *)ptr_arg;\n            }\n            else {\n              *ptr_numargs = ptr_arg + 1;\nLAB_0800975c:\n              arg_value = *ptr_arg;\n            }\n            if (first_byte == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            digit_string = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (first_byte == 0x70) {\n            *args = *args | 0x20;\nLAB_0800970e:\n            digit_string = \"0123456789abcdef\";\n            *(undefined *)((int)args + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_0800974e;\n          if (first_byte == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)args + 0x42) = first_byte;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*ptr_numargs;\n      *ptr_numargs = (uint *)(ppcVar8 + 1);\n      format_ptr = *ppcVar8;\n      result = memchr(format_ptr,0,args[1]);\n      if (result != 0) {\n        args[1] = result - (int)format_ptr;\n      }\n      arg_value = args[1];\n    }\n    args[4] = arg_value;\n    *(undefined *)((int)args + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  arg_value = *args;\n  ppuVar7 = (uint **)*ptr_numargs;\n  base = args[5];\n  if ((arg_value & 0x80) == 0) {\n    *ptr_numargs = (uint *)(ppuVar7 + 1);\n    ptr_arg = *ppuVar7;\n    if ((arg_value & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr_arg = (short)base;\n  }\n  else {\n    *ptr_numargs = (uint *)(ppuVar7 + 1);\n    ptr_arg = *ppuVar7;\nLAB_0800983e:\n    *ptr_arg = base;\n  }\nLAB_08009852:\n  args[4] = 0;\nLAB_080097be:\n  result = _printf_common(format_string,args,num_printed_chars,width,output_function);\n  if ((result == -1) || (result = (*output_function)(format_string,width,format_ptr,args[4]), result == -1)) {\nLAB_080097d2:\n    arg_value = 0xffffffff;\n  }\n  else {\n    if ((int)(*args << 0x1e) < 0) {\n      for (result = 0; result < (int)(args[3] - num_printed_chars[0]); result = result + 1) {\n        output_result = (*output_function)(format_string,width,(int)args + 0x19,1);\n        if (output_result == -1) goto LAB_080097d2;\n      }\n    }\n    arg_value = args[3];\n    if ((int)args[3] < (int)num_printed_chars[0]) {\n      arg_value = num_printed_chars[0];\n    }\n  }\n  return arg_value;\n}\n\n",
            "renaming": {
                "FUN_08009698": "print_formatted_text_08009698",
                "param_1": "format_string",
                "param_2": "args",
                "param_3": "width",
                "param_4": "output_function",
                "param_5": "ptr_numargs",
                "bVar1": "first_byte",
                "iVar2": "result",
                "puVar3": "ptr_arg",
                "iVar4": "output_result",
                "pcVar5": "digit_string",
                "uVar6": "base",
                "uVar9": "arg_value",
                "uVar10": "printed_chars",
                "pcVar11": "formatted_arg",
                "pcVar12": "format_ptr",
                "local_24": "num_printed_chars"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "memchr",
                "_printf_common"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "format_and_print_080098d8",
            "code": "\nvoid formatAndPrint_080098d8(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int baseAddress;\n  undefined4 formatPtr;\n  undefined4 argPtr;\n  undefined4 argPtr2;\n  undefined4 argPtr3;\n  \n  baseAddress = DAT_20000090;\n  formatPtr = formatString;\n  argPtr = arg1;\n  argPtr2 = arg2;\n  argPtr3 = arg3;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    __sinit(DAT_20000090);\n  }\n  _vfiprintf_r(baseAddress,*(undefined4 *)(baseAddress + 8),formatString,&argPtr,formatPtr,&argPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "format_and_print_080098d8",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "baseAddress",
                "uVar2": "formatPtr",
                "uStack_c": "argPtr",
                "uStack_8": "argPtr2",
                "uStack_4": "argPtr3"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "getTimerClkSrc",
                "getTimerIrq",
                "getTimerClkFreq"
            ],
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "resize_memory_block_08009908",
            "code": "\nint resizeMemoryBlock_08009908(int sourceBlock,uint newSize)\n\n{\n  undefined4 oldSize;\n  int resultBlock;\n  uint usableSize;\n  \n  oldSize = DAT_20000090;\n  if (sourceBlock != 0) {\n    if (newSize == 0) {\n      _free_r();\n      resultBlock = 0;\n    }\n    else {\n      usableSize = _malloc_usable_size_r();\n      resultBlock = sourceBlock;\n      if ((usableSize < newSize) && (resultBlock = _malloc_r(oldSize,newSize), resultBlock != 0)) {\n        memcpy(resultBlock,sourceBlock,newSize);\n        _free_r(oldSize,sourceBlock);\n      }\n    }\n    return resultBlock;\n  }\n  resultBlock = _malloc_r(DAT_20000090,newSize,newSize,&DAT_20000090);\n  return resultBlock;\n}\n\n",
            "renaming": {
                "FUN_08009908": "resize_memory_block_08009908",
                "param_1": "sourceBlock",
                "param_2": "newSize",
                "uVar1": "oldSize",
                "iVar2": "resultBlock",
                "uVar3": "usableSize"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c",
                "allocateRxBuffer"
            ],
            "called": [
                "memcpy",
                "_malloc_usable_size_r",
                "_malloc_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_memory_08009918",
            "code": "\nvoid allocateMemory_08009918(int *resultPtr,undefined4 size)\n\n{\n  int allocatedAddress;\n  \n  DAT_20000a38 = 0;\n  allocatedAddress = _sbrk(size);\n  if ((allocatedAddress == -1) && (DAT_20000a38 != 0)) {\n    *resultPtr = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_memory_08009918",
                "param_1": "resultPtr",
                "param_2": "size",
                "iVar1": "allocatedAddress"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_first_occurrence_08009938",
            "code": "\nchar * findFirstOccurrence_08009938(char *string,char targetChar)\n\n{\n  char *currentChar;\n  \n  do {\n    currentChar = string;\n    if (*currentChar == '\\0') {\n      if (targetChar != '\\0') {\n        currentChar = (char *)0x0;\n      }\n      return currentChar;\n    }\n    string = currentChar + 1;\n  } while (targetChar != *currentChar);\n  return currentChar;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_first_occurrence_08009938",
                "param_1": "string",
                "param_2": "targetChar",
                "pcVar1": "currentChar"
            },
            "calling": [
                "strrchr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nvoid copyString_08009954(char *destination,char *source,int size)\n\n{\n  char currentChar;\n  int remainingSize;\n  char *destPtr;\n  \n  do {\n    destPtr = destination;\n    remainingSize = size;\n    if (remainingSize == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = destPtr + 1;\n    *destPtr = currentChar;\n    source = source + 1;\n    size = remainingSize + -1;\n  } while (currentChar != '\\0');\n  for (; destination != destPtr + remainingSize; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "cVar1": "currentChar",
                "iVar2": "remainingSize",
                "pcVar3": "destPtr"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nint find_last_occurrence_0800997e(int str,int char_to_find,undefined4 start,undefined4 end)\n\n{\n  int last_occurrence;\n  int previous_occurrence;\n  \n  if (char_to_find != 0) {\n    previous_occurrence = 0;\n    while (last_occurrence = strchr(str,char_to_find,start,str,end), last_occurrence != 0) {\n      str = last_occurrence + 1;\n      previous_occurrence = last_occurrence;\n    }\n    return previous_occurrence;\n  }\n  previous_occurrence = strchr();\n  return previous_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "str",
                "param_2": "char_to_find",
                "param_3": "start",
                "param_4": "end",
                "iVar1": "last_occurrence",
                "iVar2": "previous_occurrence"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "strchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_first_occurrence_080099a4",
            "code": "\nchar * find_first_occurrence_080099a4(char *str1,char *str2)\n\n{\n  char *current_char1;\n  char *current_char2;\n  char *next_char2;\n  \n  if (*str1 == '\\0') {\n    if (*str2 != '\\0') {\n      str1 = (char *)0x0;\n    }\n    return str1;\n  }\n  do {\n    current_char1 = str1;\n    if (*current_char1 == '\\0') {\n      return (char *)0x0;\n    }\n    next_char2 = str2 + -1;\n    current_char2 = current_char1 + -1;\n    do {\n      next_char2 = next_char2 + 1;\n      if (*next_char2 == '\\0') {\n        return current_char1;\n      }\n      current_char2 = current_char2 + 1;\n      str1 = current_char1 + 1;\n    } while (*current_char2 == *next_char2);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_first_occurrence_080099a4",
                "param_1": "str1",
                "param_2": "str2",
                "pcVar1": "current_char1",
                "pcVar2": "current_char2",
                "pcVar3": "next_char2"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "decode_binary_function_08009a80",
            "code": "\nuint decode_binary_function_08009a80(undefined4 *output,undefined4 *input)\n\n{\n  int data_ptr;\n  uint result;\n  ushort value;\n  \n  data_ptr = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data(DAT_20000090);\n  }\n  if (input == &DAT_0800aba4) {\n    input = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input == (undefined4 *)&DAT_0800abc4) {\n    input = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input == (undefined4 *)&DAT_0800ab84) {\n    input = *(undefined4 **)(data_ptr + 0xc);\n  }\n  value = *(ushort *)(input + 3);\n  result = (uint)value;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          free_memory(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = condition_1;\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((condition_1 == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    create_buffer(output,input);\n  }\n  value = *(ushort *)(input + 3);\n  result = value & 1;\n  if ((value & 1) == 0) {\n    if (-1 < (int)((uint)value << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (condition_1 == 0) {\n    value = *(ushort *)(input + 3);\n    result = (int)(short)value & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(input + 3) = value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "decode_binary_function_08009a80",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "value",
                "__sinit": "initialize_data",
                "_free_r": "free_memory",
                "__smakebuf_r": "create_buffer",
                "param_2[4]": "condition_1"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfputc_r"
            ],
            "called": [
                "__sinit",
                "__smakebuf_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_function_08009b5c",
            "code": "\nvoid processFunction_08009b5c(void)\n\n{\n  uint *pointer1;\n  int variable2;\n  int *pointer3;\n  int *pointer4;\n  uint variable5;\n  ushort variable6;\n  int variable7;\n  code *functionPtr;\n  int variable9;\n  uint variable10;\n  code *jumptable;\n  bool booleanVar;\n  undefined8 variable12;\n  \n  raise(6);\n  jumptable = (code *)0x8009b6b;\n  variable12 = _exit(1);\n  pointer3 = (int *)((ulonglong)variable12 >> 0x20);\n  pointer1 = (uint *)variable12;\n  variable6 = *(ushort *)(pointer3 + 3);\n  variable5 = (uint)variable6;\n  if ((int)(variable5 << 0x1c) < 0) {\n    variable2 = pointer3[4];\n    if (variable2 != 0) {\n      variable7 = variable5 << 0x1e;\n      booleanVar = variable7 != 0;\n      if (booleanVar) {\n        variable7 = 0;\n      }\n      variable9 = *pointer3;\n      if (!booleanVar) {\n        variable7 = pointer3[5];\n      }\n      *pointer3 = variable2;\n      pointer3[2] = variable7;\n      for (variable9 = variable9 - variable2; 0 < variable9; variable9 = variable9 - variable7) {\n        variable7 = (*(code *)pointer3[10])(pointer1,pointer3[8],variable2,variable9);\n        if (variable7 < 1) {\n          variable6 = *(ushort *)(pointer3 + 3);\n          goto LAB_08009c62;\n        }\n        variable2 = variable2 + variable7;\n      }\n    }\n  }\n  else if (((0 < pointer3[1]) || (0 < pointer3[0x10])) &&\n          (functionPtr = (code *)pointer3[0xb], functionPtr != (code *)0x0)) {\n    variable10 = *pointer1;\n    *pointer1 = 0;\n    if ((variable6 & 0x1000) == 0) {\n      variable2 = (*functionPtr)(pointer1,pointer3[8],variable5 & 0x1000,1);\n      if ((variable2 == -1) && (variable5 = *pointer1, variable5 != 0)) {\n        if ((variable5 != 0x1d) && (variable5 != 0x16)) {\n          *(ushort *)(pointer3 + 3) = *(ushort *)(pointer3 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumptable)();\n          return;\n        }\n        *pointer1 = variable10;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      variable2 = pointer3[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer3 + 3) << 0x1d) < 0) &&\n       (variable2 = variable2 - pointer3[1], pointer3[0xd] != 0)) {\n      variable2 = variable2 - pointer3[0x10];\n    }\n    variable2 = (*(code *)pointer3[0xb])(pointer1,pointer3[8],variable2,0);\n    variable6 = *(ushort *)(pointer3 + 3);\n    if ((variable2 == -1) &&\n       ((0x1d < *pointer1 || (-1 < (int)((0x20400001U >> (*pointer1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(pointer3 + 3) = variable6 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumptable)(0xffffffff);\n      return;\n    }\n    pointer3[1] = 0;\n    *pointer3 = pointer3[4];\n    if (((int)((uint)variable6 << 0x13) < 0) && ((variable2 != -1 || (*pointer1 == 0)))) {\n      pointer3[0x15] = variable2;\n    }\n    pointer4 = (int *)pointer3[0xd];\n    *pointer1 = variable10;\n    if (pointer4 != (int *)0x0) {\n      if (pointer4 != pointer3 + 0x11) {\n        _free_r(pointer1);\n      }\n      pointer3[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumptable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_function_08009b5c",
                "puVar1": "pointer1",
                "iVar2": "variable2",
                "piVar3": "pointer3",
                "piVar4": "pointer4",
                "uVar5": "variable5",
                "uVar6": "variable6",
                "iVar7": "variable7",
                "pcVar8": "functionPtr",
                "iVar9": "variable9",
                "uVar10": "variable10",
                "UNRECOVERED_JUMPTABLE_00": "jumptable",
                "bVar11": "booleanVar",
                "uVar12": "variable12"
            },
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "called": [
                "raise",
                "_exit",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 processData_08009c7c(uint *dataPointer,int *paramList)\n\n{\n  undefined4 returnValue;\n  int value;\n  int *tempVar;\n  uint ushortValue;\n  ushort ushortData;\n  int tempValue;\n  undefined4 unaffValue1;\n  undefined4 unaffValue2;\n  code *functionPointer;\n  int tempValue2;\n  uint dataValue;\n  code *jumpTable;\n  bool bVar10;\n  \n  if (paramList[4] != 0) {\n    if ((dataPointer != (uint *)0x0) && (dataPointer[6] == 0)) {\n      __sinit();\n    }\n    if (paramList == &DAT_0800aba4) {\n      paramList = (int *)dataPointer[1];\n    }\n    else if (paramList == (int *)&DAT_0800abc4) {\n      paramList = (int *)dataPointer[2];\n    }\n    else if (paramList == (int *)&DAT_0800ab84) {\n      paramList = (int *)dataPointer[3];\n    }\n    if (*(short *)(paramList + 3) != 0) {\n      ushortData = *(ushort *)(paramList + 3);\n      ushortValue = (uint)ushortData;\n      if ((int)(ushortValue << 0x1c) < 0) {\n        value = paramList[4];\n        if (value != 0) {\n          tempValue = ushortValue << 0x1e;\n          bVar10 = tempValue != 0;\n          if (bVar10) {\n            tempValue = 0;\n          }\n          tempValue2 = *paramList;\n          if (!bVar10) {\n            tempValue = paramList[5];\n          }\n          *paramList = value;\n          paramList[2] = tempValue;\n          for (tempValue2 = tempValue2 - value; 0 < tempValue2; tempValue2 = tempValue2 - tempValue) {\n            tempValue = (*(code *)paramList[10])(dataPointer,paramList[8],value,tempValue2,unaffValue1,unaffValue2);\n            if (tempValue < 1) {\n              ushortData = *(ushort *)(paramList + 3);\n              goto LAB_08009c62;\n            }\n            value = value + tempValue;\n          }\n        }\n      }\n      else if (((0 < paramList[1]) || (0 < paramList[0x10])) &&\n              (functionPointer = (code *)paramList[0xb], functionPointer != (code *)0x0)) {\n        dataValue = *dataPointer;\n        *dataPointer = 0;\n        if ((ushortData & 0x1000) == 0) {\n          value = (*functionPointer)(dataPointer,paramList[8],ushortValue & 0x1000,1);\n          if ((value == -1) && (ushortValue = *dataPointer, ushortValue != 0)) {\n            if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n              *(ushort *)(paramList + 3) = *(ushort *)(paramList + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *dataPointer = dataValue;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          value = paramList[0x15];\n        }\n        if (((int)((uint)*(ushort *)(paramList + 3) << 0x1d) < 0) &&\n           (value = value - paramList[1], paramList[0xd] != 0)) {\n          value = value - paramList[0x10];\n        }\n        value = (*(code *)paramList[0xb])(dataPointer,paramList[8],value,0);\n        ushortData = *(ushort *)(paramList + 3);\n        if ((value == -1) &&\n           ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(paramList + 3) = ushortData | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        paramList[1] = 0;\n        *paramList = paramList[4];\n        if (((int)((uint)ushortData << 0x13) < 0) && ((value != -1 || (*dataPointer == 0)))) {\n          paramList[0x15] = value;\n        }\n        tempVar = (int *)paramList[0xd];\n        *dataPointer = dataValue;\n        if (tempVar != (int *)0x0) {\n          if (tempVar != paramList + 0x11) {\n            _free_r(dataPointer);\n          }\n          paramList[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "dataPointer",
                "param_2": "paramList",
                "uVar1": "returnValue",
                "iVar2": "value",
                "piVar3": "tempVar",
                "uVar4": "ushortValue",
                "uVar5": "ushortData",
                "iVar6": "tempValue",
                "unaff_r4": "unaffValue1",
                "unaff_r5": "unaffValue2",
                "pcVar7": "functionPointer",
                "iVar8": "tempValue2",
                "uVar9": "dataValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_08009cdc",
            "code": "\nvoid initializeData_08009cdc(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[25] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  memset(data + 0x17,0,8);\n  data[8] = data;\n  data[9] = 0x800a021;\n  data[10] = 0x800a043;\n  data[11] = 0x800a07b;\n  data[12] = &functionPtr;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_08009cdc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_0800a09e_1": "functionPtr",
                "param_1[1]": "data[1]",
                "param_1[2]": "data[2]",
                "param_1[0x19]": "data[25]",
                "param_1[4]": "data[4]",
                "param_1[5]": "data[5]",
                "param_1[6]": "data[6]",
                "param_1[8]": "data[8]",
                "param_1[9]": "data[9]",
                "param_1[10]": "data[10]",
                "param_1[0xb]": "data[11]",
                "param_1[0xc]": "data[12]"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_memory_08009d24",
            "code": "\nundefined4 * allocateMemory_08009d24(undefined4 size,int count)\n\n{\n  undefined4 *allocatedMemory;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  allocatedMemory = (undefined4 *)_malloc_r(size,offset + 0x74);\n  if (allocatedMemory != (undefined4 *)0x0) {\n    *allocatedMemory = 0;\n    allocatedMemory[1] = count;\n    allocatedMemory[2] = allocatedMemory + 3;\n    memset(allocatedMemory + 3,0,offset + 0x68);\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_memory_08009d24",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "allocatedMemory",
                "iVar2": "offset"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initializeData_08009d50(undefined4 *data)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (data[6] == 0) {\n    data[0x12] = 0;\n    data[0x13] = 0;\n    data[0x14] = 0;\n    pointer = &DAT_20000094;\n    data[10] = &function_label;\n    if (data == &DAT_20000094) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data == &DAT_20000094) {\n      data[6] = pointer;\n    }\n    result = getFloatValue();\n    data[1] = result;\n    result = getFloatValue(data);\n    data[2] = result;\n    result = getFloatValue(data);\n    data[3] = result;\n    standardizeValue(data[1],4,0);\n    standardizeValue(data[2],9,1);\n    standardizeValue(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "pointer",
                "&LAB_08009cd0_1": "&function_label",
                "__sfp": "getFloatValue",
                "std_isra_0": "standardizeValue"
            },
            "calling": [
                "_fflush_r",
                "_vfiprintf_r",
                "__sfp",
                "iprintf",
                "__sfputc_r",
                "__swsetup_r"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_data_structures_08009db0",
            "code": "\nint * initializeDataStructures_08009db0(undefined4 *errorCode,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currentPointer1;\n  int *currentPointer2;\n  int **pointerToPointer;\n  \n  if (DAT_200000ac == 0) {\n    initializeData(&DAT_20000094);\n  }\n  pointerToPointer = (int **)&DAT_200000dc;\n  do {\n    currentPointer2 = pointerToPointer[2];\n    currentPointer1 = pointerToPointer[1];\n    while (currentPointer1 = (int *)((int)currentPointer1 + -1), -1 < (int)currentPointer1) {\n      if (*(shortValue *)(currentPointer2 + 3) == 0) {\n        *(undefined2Value *)((int)currentPointer2 + 0xe) = 0xffff;\n        currentPointer2[0x19] = 0;\n        *(undefined2Value *)(currentPointer2 + 3) = 1;\n        *currentPointer2 = 0;\n        currentPointer2[2] = 0;\n        currentPointer2[1] = 0;\n        currentPointer2[4] = 0;\n        currentPointer2[5] = 0;\n        currentPointer2[6] = 0;\n        initializeMemory(currentPointer2 + 0x17,0,8,1,param4);\n        currentPointer2[0xd] = 0;\n        currentPointer2[0xe] = 0;\n        currentPointer2[0x12] = 0;\n        currentPointer2[0x13] = 0;\n        return currentPointer2;\n      }\n      currentPointer2 = currentPointer2 + 0x1a;\n    }\n    if (*pointerToPointer == (int *)0x0) {\n      currentPointer1 = (int *)increaseMemorySize(errorCode,4);\n      *pointerToPointer = currentPointer1;\n      if (currentPointer1 == (int *)0x0) {\n        *errorCode = 0xc;\n        return (int *)0x0;\n      }\n    }\n    pointerToPointer = (int **)*pointerToPointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_data_structures_08009db0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentPointer1",
                "piVar2": "currentPointer2",
                "ppiVar3": "pointerToPointer",
                "short": "shortValue",
                "undefined2": "undefined2Value",
                "memset": "initializeMemory",
                "__sinit": "initializeData",
                "__sfmoreglue": "increaseMemorySize"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sinit",
                "memset",
                "__sfmoreglue"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_file_permissions_08009e64",
            "code": "\nundefined4 checkFilePermissions_08009e64(undefined4 fileDescriptor,int fileInformation,undefined4 *result,uint *filePermissions)\n\n{\n  int fileStatus;\n  undefined4 permissionsFlag;\n  undefined stackBuffer [4];\n  uint mode;\n  \n  if ((*(short *)(fileInformation + 0xe) < 0) ||\n     (fileStatus = _fstat_r(fileDescriptor,(int)*(short *)(fileInformation + 0xe),stackBuffer), fileStatus < 0)) {\n    *filePermissions = 0;\n    if ((int)((uint)*(ushort *)(fileInformation + 0xc) << 0x18) < 0) {\n      permissionsFlag = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *filePermissions = (uint)((mode & 0xf000) == 0x2000);\n  }\n  permissionsFlag = 0x400;\nLAB_08009ea4:\n  *result = permissionsFlag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_1": "fileDescriptor",
                "param_2": "fileInformation",
                "param_3": "result",
                "param_4": "filePermissions",
                "iVar1": "fileStatus",
                "uVar2": "permissionsFlag",
                "auStack_4c": "stackBuffer",
                "local_48": "mode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_device_08009eac",
            "code": "\nvoid initializeDevice_08009eac(int deviceIdentifier,int *deviceData)\n\n{\n  ushort dataStatus;\n  int allocatedMemory;\n  int tempDeviceIdentifier;\n  int *tempDeviceData;\n  \n  if (-1 < (int)((uint)*(ushort *)(deviceData + 3) << 0x1e)) {\n    tempDeviceIdentifier = deviceIdentifier;\n    tempDeviceData = deviceData;\n    dataStatus = __swhatbuf_r(deviceIdentifier,deviceData,&tempDeviceIdentifier,&tempDeviceData);\n    allocatedMemory = _malloc_r(deviceIdentifier,tempDeviceIdentifier);\n    if (allocatedMemory != 0) {\n      *(undefined **)(deviceIdentifier + 0x28) = &LAB_08009cd0_1;\n      *deviceData = allocatedMemory;\n      *(ushort *)(deviceData + 3) = *(ushort *)(deviceData + 3) | 0x80;\n      deviceData[4] = allocatedMemory;\n      deviceData[5] = tempDeviceIdentifier;\n      if ((tempDeviceData != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(deviceIdentifier,(int)*(short *)((int)deviceData + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(deviceData + 3) = *(ushort *)(deviceData + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(deviceData + 3) = dataStatus | *(ushort *)(deviceData + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(deviceData + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(deviceData + 3) = *(ushort *)(deviceData + 3) & 0xfffc | 2;\n  }\n  *deviceData = (int)deviceData + 0x47;\n  deviceData[4] = (int)deviceData + 0x47;\n  deviceData[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_device_08009eac",
                "param_1": "deviceIdentifier",
                "param_2": "deviceData",
                "uVar1": "dataStatus",
                "iVar2": "allocatedMemory",
                "local_18": "tempDeviceIdentifier",
                "local_14": "tempDeviceData"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "__swhatbuf_r",
                "_malloc_r",
                "_isatty_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_first_occurrence_08009f2c",
            "code": "\nchar * findFirstOccurrence_08009f2c(char *inputString,char targetChar,int length)\n\n{\n  char *currentChar;\n  char *nextChar;\n  \n  currentChar = inputString;\n  do {\n    nextChar = currentChar;\n    if (nextChar == inputString + length) {\n      return (char *)0x0;\n    }\n    currentChar = nextChar + 1;\n  } while (*nextChar != targetChar);\n  return nextChar;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_first_occurrence_08009f2c",
                "param_1": "inputString",
                "param_2": "targetChar",
                "param_3": "length",
                "pcVar1": "currentChar",
                "pcVar2": "nextChar"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "check_and_execute_function_08009fe8",
            "code": "\nint check_and_execute_function_08009fe8(uint input_value)\n\n{\n  int *data_array;\n  undefined4 pid;\n  int function_ptr;\n  code *function;\n  undefined4 unused_variable_1;\n  undefined4 unused_variable_2;\n  undefined4 unused_variable_3;\n  undefined4 *data_array_ptr;\n  \n  data_array = DAT_20000090;\n  data_array_ptr = &DAT_20000090;\n  if (0x1f < input_value) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  function_ptr = DAT_20000090[0x11];\n  if ((function_ptr != 0) && (function = *(code **)(function_ptr + input_value * 4), function != (code *)0x0)) {\n    if (function != (code *)0x1) {\n      if (function == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(function_ptr + input_value * 4) = 0;\n      (*function)(input_value);\n    }\n    return 0;\n  }\n  pid = _getpid_r(DAT_20000090);\n  DAT_20000a38 = 0;\n  function_ptr = _kill(pid,input_value,input_value,0,data_array_ptr,unused_variable_1,unused_variable_2,unused_variable_3);\n  if ((function_ptr == -1) && (DAT_20000a38 != 0)) {\n    *data_array = DAT_20000a38;\n  }\n  return function_ptr;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "check_and_execute_function_08009fe8",
                "param_1": "input_value",
                "piVar1": "data_array",
                "uVar2": "pid",
                "iVar3": "function_ptr",
                "pcVar4": "function",
                "unaff_r4": "unused_variable_1",
                "unaff_r5": "unused_variable_2",
                "in_lr": "unused_variable_3",
                "puVar5": "data_array_ptr"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a01c": {
            "entrypoint": "0x0800a01c",
            "current_name": "FUN_0800a01c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_data_0800a020",
            "code": "\nvoid updateData_0800a020(undefined4 buffer,int data)\n\n{\n  int numBytesRead;\n  uint result;\n  bool isSuccess;\n  \n  numBytesRead = _read_r(buffer,(int)*(short *)(data + 0xe));\n  isSuccess = -1 < numBytesRead;\n  if (isSuccess) {\n    result = *(int *)(data + 0x54) + numBytesRead;\n  }\n  else {\n    result = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (isSuccess) {\n    *(uint *)(data + 0x54) = result;\n  }\n  if (!isSuccess) {\n    *(short *)(data + 0xc) = (short)result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "buffer",
                "param_2": "data",
                "iVar1": "numBytesRead",
                "uVar2": "result",
                "bVar3": "isSuccess"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "write_data_to_file_0800a042",
            "code": "\nvoid writeDataToFile_0800a042(int *fileDescriptor,int headerOffset,undefined4 buffer,undefined4 size)\n\n{\n  int writeResult;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  \n  if ((int)((uint)*(ushort *)(headerOffset + 0xc) << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(headerOffset + 0xe),0,2);\n  }\n  *(ushort *)(headerOffset + 0xc) = *(ushort *)(headerOffset + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  writeResult = _write((int)*(short *)(headerOffset + 0xe),buffer,size,size,size,unusedVar1,unusedVar2,\n                 unusedVar3);\n  if ((writeResult == -1) && (DAT_20000a38 != 0)) {\n    *fileDescriptor = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "write_data_to_file_0800a042",
                "param_1": "fileDescriptor",
                "param_2": "headerOffset",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "writeResult",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "in_lr": "unusedVar3"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "handle_file_seek_0800a07a",
            "code": "\nvoid handleFileSeek_0800a07a(undefined4 fileDescriptor,int structPointer)\n\n{\n  int seekResult;\n  ushort modifiedFlags;\n  bool isSeekError;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(structPointer + 0xe));\n  isSeekError = seekResult == -1;\n  if (isSeekError) {\n    modifiedFlags = *(ushort *)(structPointer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(structPointer + 0x54) = seekResult;\n    modifiedFlags = *(ushort *)(structPointer + 0xc) | 0x1000;\n  }\n  if (isSeekError) {\n    *(ushort *)(structPointer + 0xc) = modifiedFlags;\n  }\n  if (!isSeekError) {\n    *(ushort *)(structPointer + 0xc) = modifiedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "handle_file_seek_0800a07a",
                "param_1": "fileDescriptor",
                "param_2": "structPointer",
                "iVar1": "seekResult",
                "uVar2": "modifiedFlags",
                "bVar3": "isSeekError"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "get_file_size_0800a0ec",
            "code": "\nvoid get_file_size_0800a0ec(int *result,undefined4 file_descriptor,undefined4 stat_buf,undefined4 buffer_size)\n\n{\n  int status;\n  \n  DAT_20000a38 = 0;\n  status = _fstat(file_descriptor,stat_buf,stat_buf,0,buffer_size);\n  if ((status == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "get_file_size_0800a0ec",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buf",
                "param_4": "buffer_size",
                "iVar1": "status"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "check_and_assign_tty_0800a110",
            "code": "\nvoid checkAndAssignTTY_0800a110(int *outputVariable,undefined4 fileDescriptor)\n\n{\n  int isTerminal;\n  \n  DAT_20000a38 = 0;\n  isTerminal = _isatty(fileDescriptor);\n  if ((isTerminal == -1) && (DAT_20000a38 != 0)) {\n    *outputVariable = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "check_and_assign_tty_0800a110",
                "param_1": "outputVariable",
                "param_2": "fileDescriptor",
                "iVar1": "isTerminal"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "seek_and_assign_value_0800a130",
            "code": "\nvoid seekAndAssignValue_0800a130(int *output,undefined4 fileDescriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seekResult;\n  \n  DAT_20000a38 = 0;\n  seekResult = _lseek(fileDescriptor,offset,whence,whence,whence);\n  if ((seekResult == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "seek_and_assign_value_0800a130",
                "param_1": "output",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seekResult"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_final_value_0800a154",
            "code": "\nint calculateFinalValue_0800a154(undefined4 result,int baseValue)\n\n{\n  int finalValue;\n  \n  finalValue = *(int *)(baseValue + -4) + -4;\n  if (*(int *)(baseValue + -4) < 0) {\n    finalValue = finalValue + *(int *)(baseValue + finalValue);\n  }\n  return finalValue;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_final_value_0800a154",
                "param_1": "result",
                "param_2": "baseValue",
                "iVar1": "finalValue"
            },
            "calling": [
                "realloc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "read_and_assign_0800a168",
            "code": "\nvoid readAndAssign_0800a168(int *result,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_20000a38 = 0;\n  readResult = _read(fileDescriptor,buffer,count,count,count);\n  if ((readResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "read_and_assign_0800a168",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "abort_and_set_variables_0800a18c",
            "code": "\nvoid abort_and_set_variables_0800a18c(void)\n\n{\n  code *jumptable;\n  \n  jumptable = abort_and_set_variables_0800a18c;\n  abort();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "abort_and_set_variables_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 218009,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08000588",
            "FUN_080005e0",
            "FUN_08000aec",
            "FUN_08000ef8",
            "FUN_08002400",
            "FUN_0800242c",
            "FUN_08002578",
            "FUN_08002580",
            "FUN_080025ac",
            "FUN_08002644",
            "FUN_0800267c",
            "FUN_080026b0",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_0800291c",
            "FUN_08002948",
            "FUN_08002968",
            "FUN_08002a30",
            "FUN_08002a58",
            "FUN_08002acc",
            "FUN_08002c2c",
            "FUN_08002dbc",
            "FUN_08002ddc",
            "FUN_08002df6",
            "FUN_08002e44",
            "FUN_08002ec4",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08002f14",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_08002fca",
            "FUN_08003002",
            "FUN_0800307a",
            "FUN_08003106",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_08003158",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800322c",
            "FUN_0800325a",
            "FUN_080032a2",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_080033cc",
            "FUN_0800344a",
            "FUN_08003474",
            "FUN_080035b8",
            "FUN_08003658",
            "FUN_080036a2",
            "FUN_080036ac",
            "FUN_080036d8",
            "FUN_08003724",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_0800376c",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003a20",
            "FUN_08003aa0",
            "FUN_08003b8c",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_08003e20",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_080042f0",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_080045c0",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_08004f3c",
            "FUN_08005084",
            "FUN_08005188",
            "FUN_080052f0",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005460",
            "FUN_08005840",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005a1c",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005a68",
            "FUN_08005aa4",
            "FUN_08005bb8",
            "FUN_08005cb4",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08005fe8",
            "FUN_08006060",
            "FUN_08006092",
            "FUN_080060c4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006262",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_08006420",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_08006538",
            "FUN_080066e8",
            "FUN_0800674e",
            "FUN_080067ac",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_080069ec",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006ca8",
            "FUN_08006d24",
            "FUN_08006d80",
            "FUN_08006e68",
            "FUN_08007110",
            "FUN_08007118",
            "FUN_080071e4",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_080072fa",
            "FUN_08007306",
            "FUN_08007320",
            "FUN_08007332",
            "FUN_0800734a",
            "FUN_0800735a",
            "FUN_08007376",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080075dc",
            "FUN_08007648",
            "FUN_080076e0",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_08007718",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_080077b0",
            "FUN_08007e74",
            "FUN_08007ede",
            "FUN_08007f0e",
            "FUN_08007f78",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_08008078",
            "FUN_080084b0",
            "FUN_08008500",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008694",
            "FUN_080086e8",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_0800885c",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008880",
            "FUN_080088e0",
            "FUN_08008990",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008afa",
            "FUN_08008b66",
            "FUN_08008c20",
            "FUN_08008c44",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008d30",
            "FUN_08008d8c",
            "FUN_08008df8",
            "FUN_08008e14",
            "FUN_08008ef4",
            "FUN_08008f1c",
            "FUN_08008f3c",
            "FUN_08008f78",
            "FUN_08009094",
            "FUN_080090c2",
            "FUN_080090cc",
            "FUN_08009108",
            "FUN_08009124",
            "FUN_08009148",
            "FUN_08009190",
            "FUN_080091a0",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_08009270",
            "FUN_0800932c",
            "FUN_08009358",
            "FUN_0800937c",
            "FUN_080095a8",
            "FUN_08009698",
            "FUN_080098d8",
            "FUN_08009908",
            "FUN_08009918",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_0800997e",
            "FUN_080099a4",
            "FUN_08009a80",
            "FUN_08009b5c",
            "FUN_08009c7c",
            "FUN_08009cdc",
            "FUN_08009d24",
            "FUN_08009d50",
            "FUN_08009db0",
            "FUN_08009e64",
            "FUN_08009eac",
            "FUN_08009f2c",
            "FUN_08009fe8",
            "FUN_0800a020",
            "FUN_0800a042",
            "FUN_0800a07a",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a154",
            "FUN_0800a168"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000488",
            "FUN_080005f8",
            "FUN_08000be8",
            "FUN_08001bf8",
            "FUN_08001c08",
            "FUN_08001c18",
            "FUN_08001cd0",
            "FUN_080022f8",
            "FUN_08002634",
            "FUN_08002a1c",
            "FUN_08002ac0",
            "FUN_08002b68",
            "FUN_08002c1e",
            "FUN_08002ce0",
            "FUN_08002e26",
            "FUN_08008f0e"
        ],
        [
            "FUN_08000500",
            "FUN_08002a26",
            "FUN_08002c00",
            "FUN_08003048"
        ],
        [
            "FUN_08000a64",
            "FUN_08001b48",
            "FUN_08002c14"
        ],
        [
            "FUN_08009084",
            "FUN_0800a18c"
        ]
    ],
    "locked_functions": []
}