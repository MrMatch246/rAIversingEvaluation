{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *string_ptr;\n  \n  string_ptr = input_string;\n  do {\n    next_char = string_ptr + 1;\n    current_char = *string_ptr;\n    string_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "string_ptr"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_interrupt_08000188",
            "code": "\nvoid initializeInterrupt_08000188(void)\n\n{\n  triggerSoftwareInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_interrupt_08000188",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "initialize_interrupt_handler_0800018c",
            "code": "\nundefined4 initialize_interrupt_handler_0800018c(undefined4 value_1,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = initialize_interrupt_08000188(1,value_1,0,0,value_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "initialize_interrupt_handler_0800018c",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_input_08000214",
            "code": "\nvoid process_input_08000214(uint index,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool isValid;\n  int offsetValue;\n  \n  if (0x3b < (int)index) {\n    return;\n  }\n  offsetValue = get_offset_value_08002fa0(&DAT_200003d4,index,param_3,param_4,param_4);\n  if (offsetValue == 3) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        offsetValue = 0;\n      }\n      else {\n        offsetValue = find_char_index_080036ac();\n        if (offsetValue == 0) {\n          offsetValue = 0;\n        }\n        else {\n          offsetValue = find_char_index_080036ac((int)(char)(&DAT_0800a908)[index]);\n          if (offsetValue == 1) {\n            offsetValue = 0;\n          }\n          else {\n            offsetValue = find_match_0800738a((int)(char)(&DAT_0800a908)[index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      offsetValue = 0;\n    }\n    if (offsetValue != 0) {\n      process_input_08000214_data_080088e0(index,value);\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,index,value);\n  }\n  else if (offsetValue == 4) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        isValid = false;\n      }\n      else {\n        offsetValue = find_char_index_080036ac();\n        if (offsetValue == 0) {\n          isValid = false;\n        }\n        else {\n          offsetValue = find_char_index_080036ac((int)(char)(&DAT_0800a908)[index]);\n          if (offsetValue == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      calculate_and_store_value_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3,value);\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,index,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_input_08000214",
                "param_1": "index",
                "param_2": "value",
                "bVar1": "isValid",
                "iVar2": "offsetValue"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "process_data_0800021a",
            "code": "\nvoid process_data_0800021a(uint input_index,undefined4 input_value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool is_valid;\n  int offset_value;\n  \n  offset_value = get_offset_value_08002fa0(&DAT_200003d4,input_index,param_3,param_4,param_4);\n  if (offset_value == 3) {\n    if (input_index < 0x3c) {\n      if ((&DAT_0800a908)[input_index] == -1) {\n        offset_value = 0;\n      }\n      else {\n        offset_value = find_char_index_080036ac();\n        if (offset_value == 0) {\n          offset_value = 0;\n        }\n        else {\n          offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[input_index]);\n          if (offset_value == 1) {\n            offset_value = 0;\n          }\n          else {\n            offset_value = find_match_0800738a((int)(char)(&DAT_0800a908)[input_index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      offset_value = 0;\n    }\n    if (offset_value != 0) {\n      process_input_data_080088e0(input_index,input_value);\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,input_index,input_value);\n  }\n  else if (offset_value == 4) {\n    if (input_index < 0x3c) {\n      if ((&DAT_0800a908)[input_index] == -1) {\n        is_valid = false;\n      }\n      else {\n        offset_value = find_char_index_080036ac();\n        if (offset_value == 0) {\n          is_valid = false;\n        }\n        else {\n          offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[input_index]);\n          if (offset_value == 1) {\n            is_valid = false;\n          }\n          else {\n            is_valid = true;\n          }\n        }\n      }\n    }\n    else {\n      is_valid = false;\n    }\n    if (is_valid) {\n      calculate_and_store_value_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[input_index] * 3,input_value);\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,input_index,input_value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "process_data_0800021a",
                "param_1": "input_index",
                "param_2": "input_value",
                "bVar1": "is_valid",
                "iVar2": "offset_value"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_bits_08000488",
            "code": "\nvoid updateBits_08000488(uint bitPosition,int value)\n\n{\n  undefined4 result;\n  \n  if ((int)bitPosition < 0xe) {\n    if (value == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (bitPosition & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (bitPosition & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      result = processAndShift();\n      executeDecodedFunction(&DAT_200003d4,bitPosition,result);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_bits_08000488",
                "param_1": "bitPosition",
                "param_2": "value",
                "uVar1": "result",
                "process_and_shift_08008880": "processAndShift",
                "execute_decoded_function_08002ef2": "executeDecodedFunction"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_data_if_param1_is_1_080004d4",
            "code": "\nvoid initialize_data_if_param1_is_1_080004d4(int param_is_1,int param_value)\n\n{\n  int loop_counter;\n  undefined *data_pointer;\n  \n  if (param_is_1 != 1) {\n    return;\n  }\n  if (param_value == 0xffff) {\n    data_pointer = &DAT_2000022c;\n    for (loop_counter = 0xb; -1 < loop_counter; loop_counter = loop_counter + -1) {\n      initialize_data_08002580(data_pointer);\n      data_pointer = data_pointer + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_data_if_param1_is_1_080004d4",
                "param_1": "param_is_1",
                "param_2": "param_value",
                "iVar1": "loop_counter",
                "puVar2": "data_pointer"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "update_servo_data_08000500",
            "code": "\nvoid updateServoData_08000500(int servoIndex,int param2,int param3,undefined4 param4)\n\n{\n  if (0xb < DAT_200001ed) {\n    handleMaxServoError(&DAT_200003d4,\"Max servos attached\",param3,param4,param4);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servoIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servoIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < param2) && (0 < param3)) {\n    processValidData(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex,param2,param3);\n    return;\n  }\n  processInvalidData(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servoIndex] * 3,servoIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "update_servo_data_08000500",
                "param_1": "servoIndex",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "process_data_08002f14": "handleMaxServoError",
                "process_data_080025ac": "processValidData",
                "process_data_08002634": "processInvalidData"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "initialize_memory_and_set_timer_irq_08000588",
            "code": "\nvoid initializeMemoryAndSetTimerIRQ_08000588(int inputParam)\n\n{\n  initialize_memory_and_set_timer_irq_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[inputParam] * 3);\n  if (((&DAT_200001f0)[inputParam] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[inputParam];\n  }\n  (&DAT_200001f0)[inputParam] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "initialize_memory_and_set_timer_irq_08000588",
                "param_1": "inputParam"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "improved_process_pin_data_080005f8",
            "code": "\nvoid improved_process_pin_data_080005f8(uint pin_number,int mode)\n\n{\n  int offset_value;\n  char character;\n  bool flag;\n  uint transformed_value;\n  \n  offset_value = get_offset_value_08002fa0(&DAT_200003d4,pin_number);\n  if (offset_value != 0x7f) {\n    offset_value = get_offset_value_08002fa0(&DAT_200003d4,pin_number);\n    if (offset_value == 6) {\n      if (DAT_20000170 == '\\0') {\n        character = '\\0';\n      }\n      else {\n        character = DAT_20000170;\n        if (mode == 6) {\n          character = '\\0';\n        }\n      }\n    }\n    else {\n      character = '\\0';\n    }\n    if (character != '\\0') {\n      initialize_data_080005e0();\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        flag = false;\n      }\n      else {\n        offset_value = find_char_index_080036ac();\n        if (offset_value == 0) {\n          flag = false;\n        }\n        else {\n          offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n          if (offset_value == 1) {\n            flag = false;\n          }\n          else if (mode == 4) {\n            flag = false;\n          }\n          else {\n            flag = true;\n          }\n        }\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (flag) {\n      if ((byte)(&DAT_200001f0)[pin_number] < 0xc) {\n        offset_value = get_byte_value_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3);\n      }\n      else {\n        offset_value = 0;\n      }\n      if (offset_value != 0) {\n        initialize_memory_and_set_timer_irq_08000588(pin_number);\n      }\n    }\n    transformed_value = pin_number - 0x2e & 0xff;\n    if (transformed_value < 0xe) {\n      if (pin_number < 0x3c) {\n        offset_value = (int)(char)(&DAT_0800a908)[pin_number];\n      }\n      else {\n        offset_value = -1;\n      }\n      offset_value = find_char_index_080036ac(offset_value);\n      if (offset_value == 0) {\n        flag = false;\n      }\n      else {\n        if (pin_number < 0x3c) {\n          offset_value = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          offset_value = -1;\n        }\n        offset_value = find_char_index_080036ac(offset_value);\n        if (offset_value == 1) {\n          flag = false;\n        }\n        else {\n          flag = true;\n        }\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (flag) {\n      update_bits_08000488(transformed_value,mode == 2);\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        flag = false;\n      }\n      else {\n        offset_value = find_char_index_080036ac();\n        if (offset_value == 0) {\n          flag = false;\n        }\n        else {\n          offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n          if (offset_value == 1) {\n            flag = false;\n          }\n          else {\n            flag = true;\n          }\n        }\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (flag) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] | (byte)(1 << (pin_number & 7));\n      }\n      else {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] & ~(byte)(1 << (pin_number & 7));\n      }\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,pin_number,0);\n    switch(mode) {\n    case 0:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          flag = false;\n        }\n        else {\n          offset_value = find_char_index_080036ac();\n          if (offset_value == 0) {\n            flag = false;\n          }\n          else {\n            offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        process_data_08008990(pin_number,0);\n        update_character_08002fa8(&DAT_200003d4,pin_number,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          flag = false;\n        }\n        else {\n          offset_value = find_char_index_080036ac();\n          if (offset_value == 0) {\n            flag = false;\n          }\n          else {\n            offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        offset_value = get_offset_value_08002fa0(&DAT_200003d4,pin_number);\n        if (offset_value == 3) {\n          process_data_08008a24(pin_number,0);\n        }\n        process_data_08008990(pin_number,1);\n        update_character_08002fa8(&DAT_200003d4,pin_number,1);\n        return;\n      }\n      break;\n    case 2:\n      if (transformed_value < 0xe) {\n        if (pin_number < 0x3c) {\n          offset_value = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          offset_value = -1;\n        }\n        offset_value = find_char_index_080036ac(offset_value);\n        if (offset_value == 0) {\n          flag = false;\n        }\n        else {\n          if (pin_number < 0x3c) {\n            offset_value = (int)(char)(&DAT_0800a908)[pin_number];\n          }\n          else {\n            offset_value = -1;\n          }\n          offset_value = find_char_index_080036ac(offset_value);\n          if (offset_value == 1) {\n            flag = false;\n          }\n          else {\n            flag = true;\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        if (pin_number < 0x3c) {\n          if ((&DAT_0800a908)[pin_number] == -1) {\n            flag = false;\n          }\n          else {\n            offset_value = find_char_index_080036ac();\n            if (offset_value == 0) {\n              flag = false;\n            }\n            else {\n              offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n              if (offset_value == 1) {\n                flag = false;\n              }\n            }\n          }\n        }\n        else {\n          flag = false;\n        }\n        if (flag) {\n          process_data_08008990(pin_number,0);\n        }\n        update_character_08002fa8(&DAT_200003d4,pin_number,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          offset_value = 0;\n        }\n        else {\n          offset_value = find_char_index_080036ac();\n          if (offset_value == 0) {\n            offset_value = 0;\n          }\n          else {\n            offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              offset_value = 0;\n            }\n            else {\n              offset_value = find_match_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        offset_value = 0;\n      }\n      if (offset_value != 0) {\n        process_data_08008990(pin_number,1);\n        process_input_data_080088e0(pin_number,0);\n        update_character_08002fa8(&DAT_200003d4,pin_number,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          flag = false;\n        }\n        else {\n          offset_value = find_char_index_080036ac();\n          if (offset_value == 0) {\n            flag = false;\n          }\n          else {\n            offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        update_character_08002fa8(&DAT_200003d4,pin_number,4);\n        if (((byte)(&DAT_200001f0)[pin_number] != 0xff) &&\n           (offset_value = get_byte_value_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3),\n           offset_value != 0)) {\n          flag = false;\n        }\n        if (flag) {\n          update_servo_data_08000500(pin_number,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      process_data_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          offset_value = 0;\n        }\n        else {\n          offset_value = find_char_index_080036ac();\n          if (offset_value == 0) {\n            offset_value = 0;\n          }\n          else {\n            offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              offset_value = 0;\n            }\n            else {\n              offset_value = find_match_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a69c);\n              if (offset_value == 0) {\n                offset_value = find_match_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        offset_value = 0;\n      }\n      if (offset_value != 0) {\n        update_character_08002fa8(&DAT_200003d4,pin_number,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          flag = false;\n        }\n        else {\n          offset_value = find_char_index_080036ac();\n          if (offset_value == 0) {\n            flag = false;\n          }\n          else {\n            offset_value = find_char_index_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        process_data_08008990(pin_number,2);\n        update_character_08002fa8(&DAT_200003d4,pin_number,0xb);\n        write_value_to_memory_08002fc2(&DAT_200003d4,pin_number,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "improved_process_pin_data_080005f8",
                "param_1": "pin_number",
                "param_2": "mode",
                "iVar1": "offset_value",
                "cVar2": "character",
                "bVar3": "flag",
                "uVar4": "transformed_value"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "process_pin_data_08000a64",
            "code": "\nvoid process_pin_data_08000a64(void)\n\n{\n  int result;\n  uint index;\n  \n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_char_index();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_char_index((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = find_match((int)(char)(&DAT_0800a908)[index],&DAT_0800a69c);\n            if (result == 0) {\n              result = find_match((int)(char)(&DAT_0800a908)[index],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      improved_process_pin_data_08000a64(index,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_i2c_device(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "process_pin_data_08000a64",
                "uVar2": "index",
                "iVar1": "result",
                "find_char_index_080036ac": "find_char_index",
                "find_match_0800738a": "find_match",
                "improved_process_pin_data_080005f8": "improved_process_pin_data",
                "initialize_i2c_device_08002a26": "initialize_i2c_device"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_pin_data_08000aec",
            "code": "\nvoid initialize_pin_data_08000aec(void)\n\n{\n  bool is_valid_pin;\n  int char_index;\n  uint index;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initialize_data_080005e0();\n  }\n  for (index = 0; index < 5; index = index + 1 & 0xff) {\n    (&DAT_200001e8)[index] = 0;\n    (&DAT_20000174)[index] = 0;\n    (&DAT_20000180)[index] = 0;\n  }\n  for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n    if ((index - 0x2e & 0xff) < 0xe) {\n      if (index < 0x3c) {\n        char_index = (int)(char)(&DAT_0800a908)[index];\n      }\n      else {\n        char_index = -1;\n      }\n      char_index = find_char_index_080036ac(char_index);\n      if (char_index == 0) {\n        is_valid_pin = false;\n      }\n      else {\n        if (index < 0x3c) {\n          char_index = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          char_index = -1;\n        }\n        char_index = find_char_index_080036ac(char_index);\n        if (char_index == 1) {\n          is_valid_pin = false;\n        }\n        else {\n          is_valid_pin = true;\n        }\n      }\n    }\n    else {\n      is_valid_pin = false;\n    }\n    if (is_valid_pin) {\n      improved_process_pin_data_080005f8(index,2);\n    }\n    else {\n      if ((((index < 0x3c) && ((&DAT_0800a908)[index] != -1)) &&\n          (char_index = find_char_index_080036ac(), char_index != 0)) &&\n         (char_index = find_char_index_080036ac((int)(char)(&DAT_0800a908)[index]), char_index != 1)) {\n        is_valid_pin = true;\n      }\n      if (is_valid_pin) {\n        improved_process_pin_data_080005f8(index,1);\n      }\n    }\n    (&DAT_200001f0)[index] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_pin_data_08000aec",
                "bVar1": "is_valid_pin",
                "iVar2": "char_index",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "process_data_08000be8",
            "code": "\nvoid process_data_08000be8(int index,uint mask,int check,undefined4 param)\n\n{\n  undefined1 *ptr1;\n  undefined1 *ptr2;\n  \n  ptr1 = &DAT_20000174;\n  ptr2 = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((check != 0) ||\n     (ptr1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], ptr2 != ptr1)) {\n    process_decoded_data_08002efe(&DAT_200003d4,index,ptr2,ptr1,param);\n    (&DAT_20000180)[index] = (char)ptr2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "process_data_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "check",
                "param_4": "param",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "process_flags_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid processFlags_08000ef8(void)\n\n{\n  byte flagByte;\n  int index;\n  bool condition;\n  byte result;\n  \n  flagByte = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_char_index_080036ac(3);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_value_08008a6c(0);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(2);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(1);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 2;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(10);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 4) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(2);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 4;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x13);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(3);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 8;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x15);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(4);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x10;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x14);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(5);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x20;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x1a);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(6);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x40;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(8);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(7);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x80;\n    }\n    process_data_08000be8(0,result);\n  }\n  flagByte = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_char_index_080036ac(9);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_value_08008a6c(8);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x27);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(9);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 2;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x16);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 4) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(10);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 4;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(7);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0xb);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 8;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(6);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0xc);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x10;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(5);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0xd);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x20;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x19);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0xe);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x40;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x18);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0xf);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x80;\n    }\n    process_data_08000be8(1,result,0);\n  }\n  flagByte = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_char_index_080036ac(0x2a);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x10);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x2c);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x11);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 2;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0xd);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x13);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 8;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0xe);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x14);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x10;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0xf);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x15);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x20;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x17);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x16);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x40;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x2d);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x17);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x80;\n    }\n    process_data_08000be8(2,result,0);\n  }\n  flagByte = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_char_index_080036ac(0x2e);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x18);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x2f);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x19);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 2;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x30);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 4) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x1a);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 4;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x31);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x1b);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 8;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x22);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x1c);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x10;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x23);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x1d);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x20;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x2b);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x1e);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x40;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x32);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x1f);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x80;\n    }\n    process_data_08000be8(3,result,0);\n  }\n  flagByte = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      result = 0;\n    }\n    else {\n      index = find_char_index_080036ac(0x29);\n      if (index == 1) {\n        result = 0;\n      }\n      else if ((flagByte & 1) == 0) {\n        result = 0;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x20);\n        if (index == 0) {\n          result = 0;\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x28);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 2) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x21);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 2;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x26);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 4) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x22);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 4;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x25);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 8) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x23);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 8;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0xc);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x10) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x24);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x10;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0xb);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x20) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x25);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x20;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x1c);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x40) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x26);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x40;\n    }\n    index = find_char_index_080036ac();\n    if (index == 0) {\n      condition = false;\n    }\n    else {\n      index = find_char_index_080036ac(0x1b);\n      if (index == 1) {\n        condition = false;\n      }\n      else if ((flagByte & 0x80) == 0) {\n        condition = false;\n      }\n      else {\n        index = check_bit_value_08008a6c(0x27);\n        if (index == 0) {\n          condition = false;\n        }\n        else {\n          condition = true;\n        }\n      }\n    }\n    if (condition) {\n      result = result | 0x80;\n    }\n    process_data_08000be8(4,result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "process_flags_08000ef8",
                "bVar1": "flagByte",
                "iVar2": "index",
                "bVar3": "condition",
                "bVar4": "result"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initialize_gateway_08001b48(void)\n\n{\n  extractFilePathAndExtension(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  updateData(&DAT_200003d4,0xe0,0x8000215);\n  updateData(&DAT_200003d4,0x90,&label1);\n  updateData(&DAT_200003d4,0xc0,0x8000489);\n  updateData(&DAT_200003d4,0xd0,&label2);\n  updateData(&DAT_200003d4,0xf4,0x80005f9);\n  updateData(&DAT_200003d4,0xf5,&label3);\n  setGlobalData(&DAT_200003d4,0xf0,0x8001cd1);\n  setParamIfEqualToFF(&DAT_200003d4,0xff,0x8000aed);\n  initializeSerialPort(&DAT_200003d4,0xe100);\n  initializePinData();\n  initializeInterruptHandler(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "extract_file_path_and_extension_08002e44": "extractFilePathAndExtension",
                "update_data_08002f2c": "updateData",
                "set_global_data_08002f94": "setGlobalData",
                "set_param_if_equal_to_ff_08002f84": "setParamIfEqualToFF",
                "initialize_serial_port_08003048": "initializeSerialPort",
                "initialize_pin_data_08000aec": "initializePinData",
                "initialize_interrupt_handler_0800018c": "initializeInterruptHandler",
                "LAB_080002ec_1": "label1",
                "LAB_08000c18_1": "label2",
                "LAB_080001a8_1": "label3"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "copy_data_08001bf8",
            "code": "\nvoid copyData_08001bf8(undefined4 sourceData,undefined4 unused,undefined4 destData,undefined4 size)\n\n{\n  copy_or_append_data_0800288c(&DAT_20000314,sourceData,destData,size,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "copy_data_08001bf8",
                "param_1": "sourceData",
                "param_2": "unused",
                "param_3": "destData",
                "param_4": "size"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "extract_byte_from_memory_08001c08",
            "code": "\nundefined extractByteFromMemory_08001c08(void)\n\n{\n  undefined uVar1;\n  \n  uVar1 = extract_byte_from_memory_08002720(&DAT_20000314);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "extract_byte_from_memory_08001c08"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_received_data_08001c18",
            "code": "\nvoid processReceivedData_08001c18(undefined4 dataType,uint dataLength,int expectedLength,undefined4 validationParam)\n\n{\n  undefined extractedByte;\n  int difference;\n  int difference2;\n  bool isValid;\n  \n  if (dataLength == 0xffffffff) {\n    dataLength = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,dataType);\n    copy_data_08001bf8(dataLength & 0xff);\n    check_data_validity_08002a58(&DAT_20000314,validationParam);\n  }\n  initialize_and_validate_08002c14(&DAT_20000314,dataType,expectedLength);\n  difference = calculate_difference_0800270c(&DAT_20000314);\n  if (expectedLength < difference) {\n    process_data_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    difference = calculate_difference_0800270c(&DAT_20000314);\n    if (difference < expectedLength) {\n      process_data_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)dataType;\n  DAT_20000131 = (undefined)dataLength;\n  difference = 0;\n  while( true ) {\n    if (difference < expectedLength) {\n      difference2 = calculate_difference_0800270c(&DAT_20000314);\n      if (difference2 == 0) {\n        isValid = false;\n      }\n      else {\n        isValid = true;\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (!isValid) break;\n    extractedByte = extract_byte_from_memory_08001c08();\n    (&DAT_20000132)[difference] = extractedByte;\n    difference = difference + 1;\n  }\n  decode_and_process_data_08002f0a(&DAT_200003d4,0x77,expectedLength + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_received_data_08001c18",
                "param_1": "dataType",
                "param_2": "dataLength",
                "param_3": "expectedLength",
                "param_4": "validationParam",
                "uVar1": "extractedByte",
                "iVar2": "difference",
                "iVar3": "difference2",
                "bVar4": "isValid"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "process_input_08001cd0",
            "code": "\nvoid processInput_08001cd0(undefined4 opcode,int size,byte *data,undefined4 param_4)\n\n{\n  byte firstByte;\n  byte secondByte;\n  byte thirdByte;\n  undefined4 offsetValue;\n  byte bitMask;\n  char character;\n  int index;\n  int index2;\n  uint loopVar;\n  uint tempVar;\n  int index3;\n  bool flag;\n  \n  switch(opcode) {\n  case 0x69:\n    execute_callback_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_callback_function_08002f1e(&DAT_200003d4,0x6a);\n    for (loopVar = 0; loopVar < 0x3c; loopVar = loopVar + 1 & 0xff) {\n      tempVar = loopVar - 0x2e & 0xff;\n      if (tempVar < 0xe) {\n        if (loopVar < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[loopVar];\n        }\n        else {\n          index = -1;\n        }\n        index = find_char_index_080036ac(index);\n        if (index == 0) {\n          tempVar = 0x7f;\n        }\n        else {\n          if (loopVar < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[loopVar];\n          }\n          else {\n            index = -1;\n          }\n          index = find_char_index_080036ac(index);\n          if (index == 1) {\n            tempVar = 0x7f;\n          }\n        }\n      }\n      else {\n        tempVar = 0x7f;\n      }\n      execute_callback_function_08002f1e(&DAT_200003d4,tempVar);\n    }\n    execute_callback_function_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_callback_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_callback_function_08002f1e(&DAT_200003d4,0x6c);\n    for (loopVar = 0; loopVar < 0x3c; loopVar = loopVar + 1 & 0xff) {\n      if (loopVar < 0x3c) {\n        if ((&DAT_0800a908)[loopVar] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_char_index_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_char_index_080036ac((int)(char)(&DAT_0800a908)[loopVar]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_function_08002f1e(&DAT_200003d4,0);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n        execute_callback_function_08002f1e(&DAT_200003d4,0xb);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n      }\n      if ((loopVar - 0x2e & 0xff) < 0xe) {\n        if (loopVar < 0x3c) {\n          index = (int)(char)(&DAT_0800a908)[loopVar];\n        }\n        else {\n          index = -1;\n        }\n        index = find_char_index_080036ac(index);\n        if (index == 0) {\n          flag = false;\n        }\n        else {\n          if (loopVar < 0x3c) {\n            index = (int)(char)(&DAT_0800a908)[loopVar];\n          }\n          else {\n            index = -1;\n          }\n          index = find_char_index_080036ac(index);\n          if (index == 1) {\n            flag = false;\n          }\n          else {\n            flag = true;\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_function_08002f1e(&DAT_200003d4,2);\n        execute_callback_function_08002f1e(&DAT_200003d4,10);\n      }\n      if (loopVar < 0x3c) {\n        if ((&DAT_0800a908)[loopVar] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_char_index_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_char_index_080036ac((int)(char)(&DAT_0800a908)[loopVar]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = find_match_0800738a((int)(char)(&DAT_0800a908)[loopVar],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_callback_function_08002f1e(&DAT_200003d4,3);\n        execute_callback_function_08002f1e(&DAT_200003d4,8);\n      }\n      if (loopVar < 0x3c) {\n        if ((&DAT_0800a908)[loopVar] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_char_index_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_char_index_080036ac((int)(char)(&DAT_0800a908)[loopVar]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        execute_callback_function_08002f1e(&DAT_200003d4,4);\n        execute_callback_function_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (loopVar < 0x3c) {\n        if ((&DAT_0800a908)[loopVar] == -1) {\n          index = 0;\n        }\n        else {\n          index = find_char_index_080036ac();\n          if (index == 0) {\n            index = 0;\n          }\n          else {\n            index = find_char_index_080036ac((int)(char)(&DAT_0800a908)[loopVar]);\n            if (index == 1) {\n              index = 0;\n            }\n            else {\n              index = find_match_0800738a((int)(char)(&DAT_0800a908)[loopVar],&DAT_0800a69c);\n              if (index == 0) {\n                index = find_match_0800738a((int)(char)(&DAT_0800a908)[loopVar],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        index = 0;\n      }\n      if (index != 0) {\n        execute_callback_function_08002f1e(&DAT_200003d4,6);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n      }\n      execute_callback_function_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_callback_function_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (size != 0) {\n      firstByte = *data;\n      execute_callback_function_08002f1e(&DAT_200003d4,0xf0);\n      execute_callback_function_08002f1e(&DAT_200003d4,0x6e);\n      execute_callback_function_08002f1e(&DAT_200003d4,firstByte);\n      if (firstByte < 0x3c) {\n        offsetValue = get_offset_value_08002fa0(&DAT_200003d4,firstByte);\n        execute_callback_function_08002f1e(&DAT_200003d4,offsetValue);\n        loopVar = get_element_from_offset_08002fba(&DAT_200003d4,firstByte);\n        execute_callback_function_08002f1e(&DAT_200003d4,loopVar & 0x7f);\n        loopVar = get_element_from_offset_08002fba(&DAT_200003d4,firstByte);\n        if ((loopVar & 0xff80) != 0) {\n          index = get_element_from_offset_08002fba(&DAT_200003d4,firstByte);\n          execute_callback_function_08002f1e(&DAT_200003d4,(uint)(index << 0x12) >> 0x19);\n        }\n        loopVar = get_element_from_offset_08002fba(&DAT_200003d4,firstByte);\n        if ((loopVar & 0xc000) != 0) {\n          index = get_element_from_offset_08002fba(&DAT_200003d4,firstByte);\n          execute_callback_function_08002f1e(&DAT_200003d4,(uint)(index << 0xb) >> 0x19);\n        }\n      }\n      execute_callback_function_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < size) {\n      loopVar = (uint)data[1];\n      if (2 < size) {\n        loopVar = loopVar | (uint)data[2] << 7;\n      }\n      if (3 < size) {\n        loopVar = loopVar | (uint)data[3] << 0xe;\n      }\n      process_input_08000214(*data,loopVar);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < size) {\n      loopVar = (uint)*data;\n      firstByte = data[1];\n      bitMask = data[2];\n      secondByte = data[3];\n      thirdByte = data[4];\n      if (loopVar < 0x3c) {\n        if ((&DAT_0800a908)[loopVar] == -1) {\n          flag = false;\n        }\n        else {\n          index = find_char_index_080036ac();\n          if (index == 0) {\n            flag = false;\n          }\n          else {\n            index = find_char_index_080036ac((int)(char)(&DAT_0800a908)[loopVar]);\n            if (index == 1) {\n              flag = false;\n            }\n            else {\n              flag = true;\n            }\n          }\n        }\n      }\n      else {\n        flag = false;\n      }\n      if (flag) {\n        if ((byte)(&DAT_200001f0)[loopVar] < 0xc) {\n          index = get_byte_value_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[loopVar] * 3);\n        }\n        else {\n          index = 0;\n        }\n        if (index != 0) {\n          initialize_memory_and_set_timer_irq_08000588(loopVar);\n        }\n        update_servo_data_08000500(loopVar,(uint)firstByte + (uint)bitMask * 0x80,(uint)secondByte + (uint)thirdByte * 0x80);\n        improved_process_pin_data_080005f8(loopVar,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    firstByte = data[1];\n    bitMask = firstByte & 0x18;\n    if ((firstByte & 0x20) != 0) {\n      process_data_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",bitMask,firstByte,param_4);\n      return;\n    }\n    secondByte = *data;\n    flag = (firstByte & 0x40) == 0;\n    if (bitMask < 0x19) {\n      switch(bitMask) {\n      case 0:\n        initialize_data_08002a30(&DAT_20000314,secondByte);\n        for (loopVar = 2; (int)loopVar < size; loopVar = loopVar + 2 & 0xff) {\n          copy_data_08001bf8(data[loopVar + 1] * -0x80 + data[loopVar]);\n        }\n        validate_data_08002ac0(&DAT_20000314);\n        return;\n      case 8:\n        if (size == 6) {\n          index = (uint)data[2] + (uint)data[3] * 0x80;\n          character = data[4] + data[5] * -0x80;\n        }\n        else {\n          character = data[2] + data[3] * -0x80;\n          index = -1;\n        }\n        process_received_data_08001c18(secondByte,index,character);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (size == 6) {\n            index = (uint)data[2] + (uint)data[3] * 0x80;\n            character = data[4] + data[5] * -0x80;\n          }\n          else {\n            character = data[2] + data[3] * -0x80;\n            index = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          index2 = (int)DAT_20000004;\n          index3 = index2 * 0xc;\n          (&DAT_20000188)[index3] = secondByte;\n          (&DAT_2000018c)[index2 * 3] = index;\n          (&DAT_20000190)[index3] = character;\n          (&DAT_20000191)[index3] = flag;\n          return;\n        }\n        process_data_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,flag,param_4);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (loopVar = 0; index = DAT_20000004 + 1, (int)loopVar < index; loopVar = loopVar + 1 & 0xff) {\n        if (secondByte == (&DAT_20000188)[loopVar * 0xc]) goto LAB_08001e66;\n      }\n      loopVar = 0;\nLAB_08001e66:\n      for (; (int)loopVar < index; loopVar = loopVar + 1 & 0xff) {\n        if (loopVar < 8) {\n          index2 = (loopVar + 1) * 0xc;\n          index3 = loopVar * 0xc;\n          (&DAT_20000188)[index3] = (&DAT_20000188)[index2];\n          (&DAT_2000018c)[loopVar * 3] = (&DAT_2000018c)[(loopVar + 1) * 3];\n          (&DAT_20000190)[index3] = (&DAT_20000190)[index2];\n          (&DAT_20000191)[index3] = (&DAT_20000191)[index2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    index = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < size) && (index != 0)) {\n      DAT_2000012c = index;\n    }\n    if (DAT_20000170 == '\\0') {\n      process_pin_data_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < size) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "process_input_08001cd0",
                "param_1": "opcode",
                "param_2": "size",
                "param_3": "data",
                "bVar1": "firstByte",
                "bVar2": "secondByte",
                "bVar3": "thirdByte",
                "uVar4": "offsetValue",
                "bVar5": "bitMask",
                "cVar6": "character",
                "iVar7": "index",
                "iVar8": "index2",
                "uVar9": "loopVar",
                "uVar10": "tempVar",
                "iVar11": "index3",
                "bVar12": "flag"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_binary_data_080022f8",
            "code": "\nvoid processBinaryData_080022f8(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  undefined4 uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  process_flags_08000ef8();\n  while (iVar2 = executeCallback(&DAT_200003d4), iVar2 != 0) {\n    processInputFromBinary(&DAT_200003d4);\n  }\n  DAT_20000118 = initializeGlobalVariable();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (uVar4 = 0; uVar4 < 0x3c; uVar4 = uVar4 + 1 & 0xff) {\n      uVar5 = uVar4 - 0x2e & 0xff;\n      if (uVar5 < 0xe) {\n        if (uVar4 < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[uVar4];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = findCharIndex(iVar2);\n        if (iVar2 == 0) {\n          bVar1 = false;\n        }\n        else {\n          if (uVar4 < 0x3c) {\n            iVar2 = (int)(char)(&DAT_0800a908)[uVar4];\n          }\n          else {\n            iVar2 = -1;\n          }\n          iVar2 = findCharIndex(iVar2);\n          if (iVar2 == 1) {\n            bVar1 = false;\n          }\n          else {\n            iVar2 = getOffsetValue(&DAT_200003d4,uVar4);\n            if (iVar2 == 2) {\n              bVar1 = true;\n            }\n            else {\n              bVar1 = false;\n            }\n          }\n        }\n      }\n      else {\n        bVar1 = false;\n      }\n      if ((bVar1) && ((DAT_20000114 >> uVar5 & 1U) != 0)) {\n        uVar3 = processAndShift(uVar5);\n        executeDecodedFunction(&DAT_200003d4,uVar5,uVar3);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (uVar4 = 0; (int)uVar4 < DAT_20000004 + 1; uVar4 = uVar4 + 1 & 0xff) {\n        iVar2 = uVar4 * 0xc;\n        processReceivedData((&DAT_20000188)[iVar2],(&DAT_2000018c)[uVar4 * 3],(&DAT_20000190)[iVar2],\n                     (&DAT_20000191)[iVar2]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_binary_data_080022f8",
                "execute_callback_08002ec4": "executeCallback",
                "process_input_from_binary_08002ed2": "processInputFromBinary",
                "initialize_global_variable_08008abc": "initializeGlobalVariable",
                "find_char_index_080036ac": "findCharIndex",
                "get_offset_value_08002fa0": "getOffsetValue",
                "process_and_shift_08008880": "processAndShift",
                "execute_decoded_function_08002ef2": "executeDecodedFunction",
                "process_received_data_08001c18": "processReceivedData"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_for_bit_08002400",
            "code": "\nundefined4 check_for_bit_08002400(int input_value)\n\n{\n  uint iterator;\n  \n  iterator = 0;\n  while( true ) {\n    if (0xb < iterator) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(input_value * 0xc + iterator) * 8] & 0x40) != 0) break;\n    iterator = iterator + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_for_bit_08002400",
                "param_1": "input_value",
                "uVar1": "iterator"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_parameters_0800242c",
            "code": "\nvoid initialize_parameters_0800242c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_params_helper(param1,60000,0x5dc,&label_08002444,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_parameters_0800242c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_parameters_08007648": "initialize_params_helper",
                "LAB_08002444_1": "label_08002444"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "initialize_memory_and_set_timer_irq_08002578",
            "code": "\nvoid initialize_memory_and_set_timer_irq_08002578(void)\n\n{\n  initialize_memory_and_set_timer_irq_08002578_080076e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "initialize_memory_and_set_timer_irq_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *outputBuffer)\n\n{\n  char nextCharacter;\n  uint dataSize;\n  \n  dataSize = (uint)DAT_20000250;\n  if (0xb < dataSize) {\n    *outputBuffer = 0xff;\n    return;\n  }\n  nextCharacter = DAT_20000250 + 1;\n  *outputBuffer = DAT_20000250;\n  DAT_20000250 = nextCharacter;\n  *(undefined4 *)(&DAT_2000025c + dataSize * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "outputBuffer",
                "cVar1": "nextCharacter",
                "uVar2": "dataSize"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "process_data_080025ac",
            "code": "\nbyte process_data_080025ac(byte *data_array,uint param_value,int offset1,int offset2)\n\n{\n  uint new_value1;\n  uint new_value2;\n  uint new_value3;\n  int updated_offset1;\n  \n  if (*data_array < 0xc) {\n    process_data_080025ac_08008990(param_value,1,offset1,*data_array,offset2);\n    new_value2 = (uint)*data_array;\n    new_value1 = (byte)(&DAT_20000258)[new_value2 * 8] & 0xffffffc0 | param_value & 0x3f;\n    (&DAT_20000258)[new_value2 * 8] = (char)new_value1;\n    updated_offset1 = -offset1 + 0x220;\n    if (updated_offset1 < 0) {\n      updated_offset1 = -offset1 + 0x223;\n    }\n    data_array[1] = (byte)((uint)(updated_offset1 << 0x16) >> 0x18);\n    updated_offset1 = -offset2 + 0x960;\n    if (updated_offset1 < 0) {\n      updated_offset1 = -offset2 + 0x963;\n    }\n    data_array[2] = (byte)((uint)(updated_offset1 << 0x16) >> 0x18);\n    new_value3 = *data_array / 0xc;\n    updated_offset1 = check_bit(new_value3,new_value1,new_value2,(uint)*data_array * -0x55555555);\n    if (updated_offset1 == 0) {\n      DAT_200002fc = (undefined)new_value3;\n      initialize_parameters_0800242c();\n    }\n    (&DAT_20000258)[(uint)*data_array * 8] = (&DAT_20000258)[(uint)*data_array * 8] | 0x40;\n  }\n  return *data_array;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "process_data_080025ac",
                "param_1": "data_array",
                "param_2": "param_value",
                "param_3": "offset1",
                "param_4": "offset2",
                "uVar1": "new_value1",
                "uVar2": "new_value2",
                "uVar3": "new_value3",
                "iVar4": "updated_offset1",
                "check_for_bit_08002400": "check_bit"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "process_data_08002634",
            "code": "\nvoid process_data_08002634(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_data_08002634_080025ac(input_param_1,input_param_2,0x220,0x960,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "process_data_08002634",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "initialize_memory_and_set_timer_irq_08002644",
            "code": "\nvoid initialize_memory_and_set_timer_irq_08002644(byte *data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte currentByte;\n  uint convertedValue;\n  int result;\n  \n  convertedValue = (uint)*data;\n  currentByte = (&DAT_20000258)[convertedValue * 8];\n  (&DAT_20000258)[convertedValue * 8] = currentByte & 0xbf;\n  result = check_for_bit_08002400(convertedValue / 0xc,param2,currentByte & 0xbf,convertedValue * -0x55555555,param4);\n  if (result == 0) {\n    initialize_memory_and_set_timer_irq_08002644_08002578(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "initialize_memory_and_set_timer_irq_08002644",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "currentByte",
                "uVar2": "convertedValue",
                "iVar3": "result"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "store_value_based_on_condition_0800267c",
            "code": "\nvoid storeValueBasedOnCondition_0800267c(byte *inputArray,int comparisonValue)\n\n{\n  int resultValue;\n  \n  if (*inputArray < 0xc) {\n    resultValue = (0x88 - (char)inputArray[1]) * 4;\n    if ((resultValue - comparisonValue == 0 || resultValue < comparisonValue) &&\n       (resultValue = (600 - (char)inputArray[2]) * 4,\n       comparisonValue == resultValue || comparisonValue + (600 - (char)inputArray[2]) * -4 < 0 != SBORROW4(comparisonValue,resultValue)))\n    {\n      resultValue = comparisonValue;\n    }\n    *(int *)(&DAT_2000025c + (uint)*inputArray * 8) = resultValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "store_value_based_on_condition_0800267c",
                "param_1": "inputArray",
                "param_2": "comparisonValue",
                "iVar1": "resultValue"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "calculate_and_store_value_080026b0",
            "code": "\nvoid calculate_and_store_value_080026b0(int input_param1,int input_param2)\n\n{\n  if (input_param2 < 0x220) {\n    if (input_param2 < 0) {\n      input_param2 = 0;\n    }\n    else if (0xb4 < input_param2) {\n      input_param2 = 0xb4;\n    }\n    input_param2 = calculate_result(input_param2,0,0xb4,(0x88 - *(char *)(input_param1 + 1)) * 4,\n                           (600 - *(char *)(input_param1 + 2)) * 4);\n  }\n  store_value_based_on_condition(input_param1,input_param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "calculate_and_store_value_080026b0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "calculate_result_08008ef4": "calculate_result",
                "store_value_based_on_condition_0800267c": "store_value_based_on_condition"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "get_byte_value_080026f8",
            "code": "\nuint getByteValue_080026f8(byte *input)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*input * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "get_byte_value_080026f8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "extract_byte_from_memory_08002720",
            "code": "\nuint extractByteFromMemory_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "extract_byte_from_memory_08002720",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "process_data_080027f0",
            "code": "\nuint process_data_080027f0(int input_offset,undefined4 data_address,uint data_size)\n\n{\n  int copy_result;\n  uint updated_data_size;\n  \n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data_08007ede(input_offset + 0x14,data_address,data_size & 0xffff);\n    if (copy_result == 0) {\n      return data_size;\n    }\n    return 0;\n  }\n  updated_data_size = DAT_200003b8 + data_size;\n  if (DAT_200003c5 < updated_data_size) {\n    if (updated_data_size < 0x20) {\n      updated_data_size = 0x20;\n    }\n    DAT_200003cc = allocate_or_copy_data_08009908(DAT_200003cc,updated_data_size);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)updated_data_size;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(input_offset + 4) = 1;\n    return 0;\n  }\n  copy_data_080091b0((uint)DAT_200003b6 + DAT_200003cc,data_address,data_size);\n  DAT_200003b6 = DAT_200003b6 + (char)data_size;\n  DAT_200003b8 = DAT_200003b6;\n  return data_size;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "process_data_080027f0",
                "param_1": "input_offset",
                "param_2": "data_address",
                "param_3": "data_size",
                "iVar1": "copy_result",
                "uVar2": "updated_data_size"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "copy_or_append_data_0800288c",
            "code": "\nundefined4 copy_or_append_data_0800288c(int source_address,undefined data)\n\n{\n  undefined4 success;\n  int copy_result;\n  uint new_data_size;\n  undefined byte_to_copy;\n  \n  byte_to_copy = data;\n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data_08007ede(source_address + 0x14,&byte_to_copy,1);\n    if (copy_result == 0) {\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    new_data_size = DAT_200003b8 + 1;\n    if (DAT_200003c5 < new_data_size) {\n      if (new_data_size < 0x20) {\n        new_data_size = 0x20;\n      }\n      DAT_200003cc = allocate_or_copy_data_08009908(DAT_200003cc,new_data_size);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)new_data_size;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(source_address + 4) = 1;\n      success = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = byte_to_copy;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      success = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "copy_or_append_data_0800288c",
                "param_1": "source_address",
                "param_2": "data",
                "uVar1": "success",
                "iVar2": "copy_result",
                "uVar3": "new_data_size",
                "local_11": "byte_to_copy"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_parameters_0800291c",
            "code": "\nvoid initializeParameters_0800291c(undefined4 *parameters)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = &PTR_copy_or_append_data_0800288c_1_0800a5a0;\n  *(undefined *)(parameters + 0x1b) = 0x19;\n  *(undefined *)((int)parameters + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "parameters"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "check_param_and_initialize_08002948",
            "code": "\nvoid check_param_and_initialize_08002948(int param_check,int param_value)\n\n{\n  if (param_check != 1) {\n    return;\n  }\n  if (param_value == 0xffff) {\n    initialize_parameters(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "check_param_and_initialize_08002948",
                "param_1": "param_check",
                "param_2": "param_value",
                "initialize_parameters_0800291c": "initialize_parameters"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_i2c_device_08002968",
            "code": "\nvoid initialize_i2c_device_08002968(int device_address,uint device_config)\n\n{\n  int shifted_config;\n  int device_pointer;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory_080091c6(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shifted_config = (device_config & 0x7f) << 1;\n  *(char *)(device_address + 0x10) = (char)shifted_config;\n  if (device_config == 0x33) {\n    *(undefined *)(device_address + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(device_address + 0x11) = 0;\n  }\n  device_pointer = device_address + 0x14;\n  initialize_i2_c_module_080077b0(device_pointer,100000,0x4000,shifted_config,*(undefined *)(device_address + 0x11));\n  if (*(char *)(device_address + 0x11) == '\\0') {\n    set_and_initialize_parameters_08007f8e(device_pointer,&LAB_08002774_1);\n    update_data_08007f7c(device_pointer,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_i2c_device_08002968",
                "param_1": "device_address",
                "param_2": "device_config",
                "iVar1": "shifted_config",
                "iVar2": "device_pointer"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_i2c_device_08002a1c",
            "code": "\nvoid initialize_i2c_device_08002a1c(undefined4 device_address,undefined param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_i2c_device_08002a1c_08002968(device_address,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_i2c_device_08002a1c",
                "param_1": "device_address"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_i2c_device_08002a26",
            "code": "\nvoid initialize_i2c_device_08002a26(undefined4 device_address,undefined4 unused_param,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_i2c_device_08002a26_08002a1c(device_address,0x33,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_i2c_device_08002a26",
                "param_1": "device_address",
                "param_2": "unused_param"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 status,int inputValue)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(inputValue << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "status",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "check_data_validity_08002a58",
            "code": "\nundefined4 check_data_validity_08002a58(int data_address)\n\n{\n  int data_processing_result;\n  undefined4 result;\n  \n  if (*(char *)(data_address + 0x11) == '\\0') {\n    result = 4;\n  }\n  else {\n    data_processing_result = process_and_check_data_08007e74(data_address + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (data_processing_result == 0) {\n      result = 0;\n    }\n    else if (data_processing_result == 1) {\n      result = 1;\n    }\n    else {\n      result = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "check_data_validity_08002a58",
                "param_1": "data_address",
                "iVar1": "data_processing_result",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "validate_data_08002ac0",
            "code": "\nvoid validate_data_08002ac0(undefined4 data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  check_data_validity_08002a58(data,1,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "validate_data_08002ac0",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "allocate_and_copy_data_08002acc",
            "code": "\nvoid allocate_and_copy_data_08002acc(uint data_size,undefined4 unused_param,undefined4 data_buffer,undefined4 unused_param_2)\n\n{\n  if (DAT_200003c4 < data_size) {\n    if (data_size < 0x20) {\n      data_size = 0x20;\n    }\n    DAT_200003c8 = allocate_or_copy_data(DAT_200003c8,data_size,data_buffer,(uint)DAT_200003c4,unused_param_2);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)data_size;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "allocate_and_copy_data_08002acc",
                "param_1": "data_size",
                "param_2": "unused_param",
                "param_3": "data_buffer",
                "param_4": "unused_param_2",
                "allocate_or_copy_data_08009908": "allocate_or_copy_data"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "initialize_and_validate_08002b68",
            "code": "\nundefined4\ninitialize_and_validate_08002b68(undefined4 *data_array,uint array_length,undefined4 data_to_copy,uint shift_value,byte byte_value)\n\n{\n  int result;\n  uint byte_counter;\n  uint original_shift_value;\n  \n  byte_counter = (uint)byte_value;\n  if (*(char *)((int)data_array + 0x11) == '\\0') {\n    return 0;\n  }\n  original_shift_value = shift_value;\n  allocate_and_copy_data_08002acc(data_to_copy);\n  if (DAT_200003c8 != 0) {\n    if (byte_counter != 0) {\n      initialize_data_08002a30(data_array,array_length);\n      if (3 < byte_counter) {\n        byte_counter = 3;\n      }\n      while( true ) {\n        if (byte_counter == 0) break;\n        (**(code **)*data_array)(data_array,shift_value >> ((byte_counter - 1 & 0x1f) << 3) & 0xff);\n        byte_counter = byte_counter - 1 & 0xff;\n      }\n      check_data_validity_08002a58(data_array,0);\n    }\n    result = check_and_update_data_08007f0e(data_array + 5,(array_length & 0x7f) << 1,DAT_200003c8,data_to_copy,original_shift_value);\n    if (result != 0) {\n      data_to_copy = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)data_to_copy;\n    return data_to_copy;\n  }\n  data_array[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "initialize_and_validate_08002b68",
                "param_1": "data_array",
                "param_2": "array_length",
                "param_3": "data_to_copy",
                "param_4": "shift_value",
                "param_5": "byte_value",
                "iVar1": "result",
                "uVar2": "byte_counter",
                "uVar3": "original_shift_value"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "initialize_and_validate_08002c00",
            "code": "\nvoid initialize_and_validate_08002c00(void)\n\n{\n  initialize_and_validate_08002c00_08002b68();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "initialize_and_validate_08002c00"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "initialize_and_validate_08002c14",
            "code": "\nvoid initialize_and_validate_08002c14(void)\n\n{\n  initialize_and_validate_08002c14_08002c00();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "initialize_and_validate_08002c14"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_with_check_08002c1e",
            "code": "\nvoid initialize_with_check_08002c1e(undefined4 check_value,undefined4 limit,undefined4 param_3,undefined4 param_4)\n\n{\n  check_param_and_initialize_08002948(1,0xffff,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_with_check_08002c1e",
                "param_1": "check_value",
                "param_2": "limit"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 callbackFunction,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(param_2,param_3,param_3,DAT_200005d4,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "callbackFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_function_08002ce0",
            "code": "\nint initializeFunction_08002ce0(int inputParam)\n\n{\n  int updatedVar1;\n  \n  initializeValueToZero(inputParam + 0x40);\n  updatedVar1 = inputParam + 0x44;\n  initializeMemory(updatedVar1,inputParam,0x40);\n  *(undefined *)(inputParam + 0xc4) = 0;\n  *(undefined4 *)(inputParam + 200) = 0;\n  *(undefined *)(inputParam + 0x1f8) = 0;\n  updateSettings(updatedVar1,0xe0,executeCallback + 1,0);\n  updateSettings(updatedVar1,0x90,&label_1,0);\n  updateSettings(updatedVar1,0xc0,&label_2,0);\n  updateSettings(updatedVar1,0xd0,&label_3,0);\n  updateSettings(updatedVar1,0xf4,&label_4,0);\n  updateSettings(updatedVar1,0xf5,&label_5,0);\n  updateData(updatedVar1,0x71,&LAB_08002ca4_1,0);\n  setParameters(updatedVar1,0xf0,&label_6,0);\n  updateParameters(updatedVar1,0x79,&label_7,inputParam);\n  updateParamValues(updatedVar1,0xf9,&label_8,inputParam);\n  updateParamValues(updatedVar1,0xff,&label_9,0);\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_function_08002ce0",
                "param_1": "inputParam",
                "iVar1": "updatedVar1",
                "initialize_value_to_zero_0800314e": "initializeValueToZero",
                "initialize_memory_080032bc": "initializeMemory",
                "update_settings_08003306": "updateSettings",
                "execute_callback_08002c2c": "executeCallback",
                "LAB_08002c40_1": "label_1",
                "LAB_08002c7c_1": "label_2",
                "LAB_08002c90_1": "label_3",
                "LAB_08002c54_1": "label_4",
                "LAB_08002c68_1": "label_5",
                "update_data_08003366": "updateData",
                "set_parameters_08003370": "setParameters",
                "LAB_08002cb8_1": "label_6",
                "update_parameters_08003346": "updateParameters",
                "LAB_08002e1a_1": "label_7",
                "update_param_values_08003350": "updateParamValues",
                "LAB_08002dea_1": "label_8",
                "LAB_08002cd0_1": "label_9"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "check_and_initialize_08002dbc",
            "code": "\nvoid check_and_initialize_08002dbc(int status,int value)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_function_08002ce0(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "check_and_initialize_08002dbc",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_command_08002ddc",
            "code": "\nvoid execute_command_08002ddc(int base_address,undefined4 value_1,undefined4 value_2,undefined4 execution_context)\n\n{\n  execute_function_0800322c(base_address + 0x40,2,5,execution_context,execution_context);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_command_08002ddc",
                "param_1": "base_address",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "execution_context"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "decode_and_process_data_08002df6",
            "code": "\nvoid decode_and_process_data_08002df6(int input_offset)\n\n{\n  undefined *data_ptr;\n  \n  if (*(byte *)(input_offset + 0xc4) == 0) {\n    return;\n  }\n  data_ptr = *(undefined **)(input_offset + 200);\n  decode_and_process_data_08002df6_080031ce(input_offset + 0x40,*data_ptr,data_length,*(byte *)(input_offset + 0xc4) - 2,data_ptr + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "decode_and_process_data_08002df6",
                "param_1": "input_offset",
                "puVar1": "data_ptr",
                "puVar1[1]": "data_length"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "initialize_data_processing_08002e26",
            "code": "\nvoid initializeDataProcessing_08002e26(int dataStructAddress,undefined4 dataValue)\n\n{\n  *(undefined4 *)(dataStructAddress + 0xc0) = dataValue;\n  copyDataValue(dataStructAddress + 0x40);\n  executeDataProcessing(dataStructAddress);\n  decodeAndProcessData(dataStructAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "initialize_data_processing_08002e26",
                "param_1": "dataStructAddress",
                "param_2": "dataValue",
                "copy_value_08003154": "copyDataValue",
                "execute_command_08002ddc": "executeDataProcessing",
                "decode_and_process_data_08002df6": "decodeAndProcessData"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_file_path_and_extension_08002e44",
            "code": "\nvoid extractFilePathAndExtension_08002e44(int outputBuffer,int inputFilePath,undefined param3,undefined param4)\n\n{\n  byte byteValue;\n  char charValue;\n  int extensionIndex;\n  int lastSlashIndex;\n  undefined *allocatedMemory;\n  \n  extensionIndex = find_substring_080099a4(inputFilePath,\".cpp\");\n  lastSlashIndex = find_last_character_index_0800997e(inputFilePath,0x2f);\n  if (lastSlashIndex == 0) {\n    lastSlashIndex = find_last_character_index_0800997e(inputFilePath,0x5c);\n  }\n  if (lastSlashIndex != 0) {\n    inputFilePath = lastSlashIndex + 1;\n  }\n  if (extensionIndex == 0) {\n    charValue = find_end_of_string_08000178(inputFilePath);\n    *(char *)(outputBuffer + 0xc4) = charValue + '\\x02';\n  }\n  else {\n    *(char *)(outputBuffer + 0xc4) = ((char)extensionIndex - (char)inputFilePath) + '\\x02';\n  }\n  update_data_080091a0(*(undefined4 *)(outputBuffer + 200));\n  byteValue = *(byte *)(outputBuffer + 0xc4);\n  allocatedMemory = (undefined *)allocate_and_init_memory_08009190(byteValue + 1);\n  *(undefined **)(outputBuffer + 200) = allocatedMemory;\n  allocatedMemory[byteValue] = 0;\n  *allocatedMemory = param3;\n  allocatedMemory[1] = param4;\n  copy_string_with_limit_08009954(allocatedMemory + 2,inputFilePath,*(byte *)(outputBuffer + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_file_path_and_extension_08002e44",
                "param_1": "outputBuffer",
                "param_2": "inputFilePath",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteValue",
                "cVar2": "charValue",
                "iVar3": "extensionIndex",
                "iVar4": "lastSlashIndex",
                "puVar5": "allocatedMemory"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_callback_08002ec4",
            "code": "\nvoid executeCallback_08002ec4(int functionPointer)\n\n{\n  (**(function **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_callback_08002ec4",
                "param_1": "functionPointer",
                "code": "function"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_input_from_binary_08002ed2",
            "code": "\nvoid process_input_from_binary_08002ed2(int binary_data)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(binary_data + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_input(binary_data + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_input_from_binary_08002ed2",
                "param_1": "binary_data",
                "uVar1": "result",
                "process_input_08003474": "process_input"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "execute_decoded_function_08002ef2",
            "code": "\nvoid executeDecodedFunction_08002ef2(int inputBuffer,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  decode_and_execute_08003158(inputBuffer + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "execute_decoded_function_08002ef2",
                "param_1": "inputBuffer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "process_decoded_data_08002efe",
            "code": "\nvoid process_decoded_data_08002efe(int data_offset,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  decode_and_process_0800319e(data_offset + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "process_decoded_data_08002efe",
                "param_1": "data_offset",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "decode_and_process_data_08002f0a",
            "code": "\nvoid decode_and_process_data_08002f0a(int original_data)\n\n{\n  decode_and_process_data_08002f0a_helper(original_data + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "decode_and_process_data_08002f0a",
                "param_1": "original_data",
                "decode_and_process_data_0800325a": "decode_and_process_data_helper"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "process_data_08002f14",
            "code": "\nvoid processData_08002f14(int input)\n\n{\n  processData_08002f14Subset(input + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "process_data_08002f14",
                "param_1": "input",
                "process_data_080032a2": "processDataSubset"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_callback_function_08002f1e",
            "code": "\nvoid executeCallbackFunction_08002f1e(int callbackFunctionPointer)\n\n{\n  (**(code **)**(undefined4 **)(callbackFunctionPointer + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_callback_function_08002f1e",
                "param_1": "callbackFunctionPointer"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 tempVar1;\n  \n  if (param2 == 0xd0) {\n    DAT_200005f0 = param3;\n    return;\n  }\n  if (0xd0 < param2) {\n    if (param2 == 0xf4) {\n      DAT_200005e0 = param3;\n      return;\n    }\n    tempVar1 = param3;\n    if ((param2 != 0xf5) && (tempVar1 = DAT_200005e4, param2 == 0xe0)) {\n      DAT_200005d4 = param3;\n      return;\n    }\n    DAT_200005e4 = tempVar1;\n    return;\n  }\n  if (param2 == 0x90) {\n    DAT_200005dc = param3;\n    return;\n  }\n  if (param2 != 0xc0) {\n    return;\n  }\n  DAT_200005ec = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "tempVar1"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "set_param_if_equal_to_ff_08002f84",
            "code": "\nvoid setParamIfEqualToFF_08002f84(undefined4 param,int value,undefined4 newValue)\n\n{\n  if (value == 0xff) {\n    DAT_200005e8 = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "set_param_if_equal_to_ff_08002f84",
                "param_1": "param",
                "param_2": "value",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "set_global_data_08002f94",
            "code": "\nvoid set_global_data_08002f94(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  DAT_200005d0 = input_param_3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "set_global_data_08002f94",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_offset_value_08002fa0",
            "code": "\nundefined get_offset_value_08002fa0(int offset,int base_address)\n\n{\n  return *(undefined *)(base_address + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_offset_value_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_character_08002fa8",
            "code": "\nvoid updateCharacter_08002fa8(int characterAddress,int offset,undefined newCharacterValue)\n\n{\n  if (*(char *)(characterAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(characterAddress + offset + 0xcc) = newCharacterValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_character_08002fa8",
                "param_1": "characterAddress",
                "param_2": "offset",
                "param_3": "newCharacterValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_element_from_offset_08002fba",
            "code": "\nundefined4 getElementFromOffset_08002fba(int baseAddress,int offset)\n\n{\n  return *(undefined4 *)(baseAddress + (offset + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_element_from_offset_08002fba",
                "param_1": "baseAddress",
                "param_2": "offset"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "write_value_to_memory_08002fc2",
            "code": "\nvoid writeValueToMemory_08002fc2(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + (offset + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "write_value_to_memory_08002fc2",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "process_data_loop_08002fca",
            "code": "\nvoid process_data_loop_08002fca(undefined4 param_1,undefined4 param_2,int num_iterations,undefined4 param_4,\n                 undefined4 param_5)\n\n{\n  uint iteration_count;\n  \n  for (iteration_count = 0; (int)iteration_count < num_iterations; iteration_count = iteration_count + 1 & 0xff) {\n    FUNC_08008ac4(param_5);\n    process_data_08008a24(param_2,1);\n    FUNC_08008ac4(param_4);\n    process_data_08008a24(param_2,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "process_data_loop_08002fca",
                "param_3": "num_iterations",
                "uVar1": "iteration_count"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "process_data_if_needed_08003002",
            "code": "\nvoid process_data_if_needed_08003002(int data_ptr)\n\n{\n  if (*(char *)(data_ptr + 0x1f8) != '\\0') {\n    return;\n  }\n  process_data(0xd,1);\n  loop_through_data(data_ptr,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  loop_through_data(data_ptr,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "process_data_if_needed_08003002",
                "param_1": "data_ptr",
                "process_data_08008990": "process_data",
                "process_data_loop_08002fca": "loop_through_data"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_serial_port_08003048",
            "code": "\nvoid initialize_serial_port_08003048(undefined4 input_data,undefined4 port_config,undefined4 unused_param,undefined4 process_data)\n\n{\n  configure_serial_port_08008c44(&DAT_20000700,port_config,6,process_data,process_data);\n  process_data_if_needed_08003002(input_data);\n  initialize_data_processing_08002e26(input_data,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_serial_port_08003048",
                "param_1": "input_data",
                "param_2": "port_config",
                "param_3": "unused_param",
                "param_4": "process_data"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_data_0800307a",
            "code": "\nvoid decodeData_0800307a(undefined4 *outputBuffer,uint inputSize,byte *inputData,uint maxOutputSize)\n\n{\n  uint currentByte;\n  uint bitOffset;\n  uint outputIndex;\n  uint inputIndex;\n  \n  currentByte = (uint)*inputData;\n  if (maxOutputSize == 0) {\n    maxOutputSize = 0xffffffff;\n  }\n  inputIndex = 0;\n  bitOffset = 0;\n  outputIndex = 0;\n  while ((inputIndex < inputSize && (outputIndex < maxOutputSize))) {\n    (***(code ***)(undefined4 *)*outputBuffer)\n              ((undefined4 *)*outputBuffer,((uint)inputData[inputIndex] << (bitOffset & 0xff) | currentByte) & 0x7f);\n    currentByte = (int)(uint)inputData[inputIndex] >> (7 - bitOffset & 0xff) & 0xff;\n    bitOffset = bitOffset + 1;\n    while ((outputIndex = outputIndex + 1, 6 < bitOffset && (outputIndex < maxOutputSize))) {\n      (***(code ***)(undefined4 *)*outputBuffer)((undefined4 *)*outputBuffer,currentByte & 0x7f);\n      currentByte = currentByte >> 7;\n      bitOffset = bitOffset - 7;\n    }\n    inputIndex = inputIndex + 1;\n  }\n  if ((bitOffset != 0) && (outputIndex < maxOutputSize)) {\n    (***(code ***)(undefined4 *)*outputBuffer)((undefined4 *)*outputBuffer,(1 << (bitOffset & 0xff)) - 1U & currentByte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_data_0800307a",
                "param_1": "outputBuffer",
                "param_2": "inputSize",
                "param_3": "inputData",
                "param_4": "maxOutputSize",
                "uVar1": "currentByte",
                "uVar2": "bitOffset",
                "uVar3": "outputIndex",
                "uVar4": "inputIndex"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "execute_decoding_process_08003106",
            "code": "\nvoid executeDecodingProcess_08003106(undefined4 *dataPointer,undefined4 targetValue,undefined4 decodeParam1,undefined4 decodeParam2)\n\n{\n  undefined4 *functionPointer;\n  \n  functionPointer = (undefined4 *)*dataPointer;\n  if (functionPointer != (undefined4 *)0x0) {\n    (**(code **)*functionPointer)(functionPointer,0xf0);\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,0x6f);\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,targetValue);\n    decode_data_0800307a(dataPointer,decodeParam1,decodeParam2,decodeParam1);\n    (***(code ***)(undefined4 *)*dataPointer)((undefined4 *)*dataPointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "execute_decoding_process_08003106",
                "param_1": "dataPointer",
                "param_2": "targetValue",
                "param_3": "decodeParam1",
                "param_4": "decodeParam2",
                "puVar1": "functionPointer"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_value_to_zero_0800314e",
            "code": "\nvoid initializeValueToZero_0800314e(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_value_to_zero_0800314e",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_08003154",
            "code": "\nvoid copyValue_08003154(undefined4 *destination,undefined4 source)\n\n{\n  *destination = source;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_08003154",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "decode_and_execute_08003158",
            "code": "\nvoid decode_and_execute_08003158(undefined4 *data_pointer,uint size,ushort value)\n\n{\n  undefined4 *ptr;\n  ushort decoded_value;\n  \n  ptr = (undefined4 *)*data_pointer;\n  if (ptr != (undefined4 *)0x0) {\n    decoded_value = value;\n    if (((int)size < 0x10) && (value < 0x4000)) {\n      (**(code **)*ptr)(ptr,size | 0xe0);\n      decode_data_0800307a(data_pointer,2,&decoded_value);\n    }\n    else {\n      execute_decoding_process_08003106(data_pointer,size,2,&decoded_value);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "decode_and_execute_08003158",
                "param_1": "data_pointer",
                "param_2": "size",
                "param_3": "value",
                "puVar1": "ptr",
                "local_a": "decoded_value"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "decode_and_process_0800319e",
            "code": "\nvoid decode_and_process_0800319e(undefined4 *input_data,uint flags,undefined2 starting_value)\n\n{\n  undefined4 *function_ptr;\n  undefined2 current_value;\n  \n  function_ptr = (undefined4 *)*input_data;\n  if (function_ptr != (undefined4 *)0x0) {\n    current_value = starting_value;\n    (**(code **)*function_ptr)(function_ptr,flags & 0xf | 0x90);\n    decode_data_0800307a(input_data,2,&current_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "decode_and_process_0800319e",
                "param_1": "input_data",
                "param_2": "flags",
                "param_3": "starting_value",
                "puVar1": "function_ptr",
                "local_a": "current_value"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "decode_and_process_data_080031ce",
            "code": "\nvoid decode_and_process_data_080031ce(undefined4 *data_ptr,undefined4 param_2,undefined4 param_3,uint data_size,int param_5\n                 )\n\n{\n  undefined4 *function_ptr;\n  uint index;\n  \n  function_ptr = (undefined4 *)*data_ptr;\n  if (function_ptr != (undefined4 *)0x0) {\n    (**(code **)*function_ptr)(function_ptr,0xf0,param_3,*(code **)*function_ptr,data_size);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x79);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_3);\n    for (index = 0; index < data_size; index = index + 1) {\n      decode_data_0800307a(data_ptr,1,param_5 + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "decode_and_process_data_080031ce",
                "param_1": "data_ptr",
                "param_4": "data_size",
                "puVar1": "function_ptr",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 paramValue1,undefined4 paramValue2)\n\n{\n  undefined4 *pointerToFunction;\n  \n  pointerToFunction = (undefined4 *)*functionPointer;\n  if (pointerToFunction != (undefined4 *)0x0) {\n    (**(code **)*pointerToFunction)(pointerToFunction,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,paramValue1);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,paramValue2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "paramValue1",
                "param_3": "paramValue2",
                "puVar1": "pointerToFunction"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "decode_and_process_data_0800325a",
            "code": "\nvoid decode_and_process_data_0800325a(undefined4 *data_array_ptr,undefined4 second_param,uint num_elements,int offset)\n\n{\n  undefined4 *data_ptr;\n  uint index;\n  \n  data_ptr = (undefined4 *)*data_array_ptr;\n  if (data_ptr != (undefined4 *)0x0) {\n    (**(code **)*data_ptr)(data_ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_array_ptr)((undefined4 *)*data_array_ptr,second_param);\n    for (index = 0; index < num_elements; index = index + 1) {\n      decode_data_0800307a(data_array_ptr,1,offset + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_array_ptr)((undefined4 *)*data_array_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "decode_and_process_data_0800325a",
                "param_1": "data_array_ptr",
                "param_2": "second_param",
                "param_3": "num_elements",
                "param_4": "offset",
                "puVar1": "data_ptr",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "process_data_080032a2",
            "code": "\nvoid processData_080032a2(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 endOfStringAddr;\n  \n  endOfStringAddr = find_end_of_string_08000178(inputParam2);\n  decode_and_process_data_0800325a(inputParam1,0x71,endOfStringAddr,inputParam2,inputParam4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "process_data_080032a2",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "endOfStringAddr"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_memory_080032bc",
            "code": "\nvoid initializeMemory_080032bc(int memoryPtr,int value,undefined4 extraData)\n\n{\n  *(int *)(memoryPtr + 4) = value;\n  *(undefined4 *)(memoryPtr + 8) = extraData;\n  *(undefined *)(memoryPtr + 0xc) = 0;\n  *(undefined *)(memoryPtr + 0xd) = 0;\n  *(undefined4 *)(memoryPtr + 0x10) = 0;\n  *(undefined *)(memoryPtr + 0x14) = 0;\n  *(undefined4 *)(memoryPtr + 0x18) = 0;\n  *(undefined4 *)(memoryPtr + 0x1c) = 0;\n  *(undefined4 *)(memoryPtr + 0x20) = 0;\n  *(undefined4 *)(memoryPtr + 0x24) = 0;\n  *(undefined4 *)(memoryPtr + 0x28) = 0;\n  *(undefined4 *)(memoryPtr + 0x2c) = 0;\n  *(undefined4 *)(memoryPtr + 0x30) = 0;\n  *(undefined4 *)(memoryPtr + 0x34) = 0;\n  *(undefined4 *)(memoryPtr + 0x38) = 0;\n  *(undefined4 *)(memoryPtr + 0x3c) = 0;\n  *(undefined4 *)(memoryPtr + 0x40) = 0;\n  *(undefined4 *)(memoryPtr + 0x44) = 0;\n  *(undefined4 *)(memoryPtr + 0x48) = 0;\n  *(undefined4 *)(memoryPtr + 0x4c) = 0;\n  *(undefined4 *)(memoryPtr + 0x50) = 0;\n  *(undefined4 *)(memoryPtr + 0x54) = 0;\n  *(undefined4 *)(memoryPtr + 0x58) = 0;\n  *(undefined4 *)(memoryPtr + 0x5c) = 0;\n  *(undefined4 *)(memoryPtr + 0x60) = 0;\n  *(undefined4 *)(memoryPtr + 100) = 0;\n  *(undefined4 *)(memoryPtr + 0x68) = 0;\n  *(undefined4 *)(memoryPtr + 0x6c) = 0;\n  *(undefined4 *)(memoryPtr + 0x70) = 0;\n  *(undefined4 *)(memoryPtr + 0x74) = 0;\n  *(undefined4 *)(memoryPtr + 0x78) = 0;\n  *(bool *)memoryPtr = value == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_memory_080032bc",
                "param_1": "memoryPtr",
                "param_2": "value",
                "param_3": "extraData"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "update_settings_08003306",
            "code": "\nvoid updateSettings_08003306(int ptr,uint value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0xd0) {\n    *(undefined4 *)(ptr + 0x58) = newValue1;\n    *(undefined4 *)(ptr + 0x28) = newValue2;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      *(undefined4 *)(ptr + 0x5c) = newValue1;\n      *(undefined4 *)(ptr + 0x2c) = newValue2;\n      return;\n    }\n    if (value == 0xf5) {\n      *(undefined4 *)(ptr + 0x60) = newValue1;\n      *(undefined4 *)(ptr + 0x30) = newValue2;\n    }\n    else if (value == 0xe0) {\n      *(undefined4 *)(ptr + 0x4c) = newValue1;\n      *(undefined4 *)(ptr + 0x1c) = newValue2;\n      return;\n    }\n    return;\n  }\n  if (value == 0x90) {\n    *(undefined4 *)(ptr + 0x50) = newValue1;\n    *(undefined4 *)(ptr + 0x20) = newValue2;\n    return;\n  }\n  if (value == 0xc0) {\n    *(undefined4 *)(ptr + 0x54) = newValue1;\n    *(undefined4 *)(ptr + 0x24) = newValue2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "update_settings_08003306",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_parameters_08003346",
            "code": "\nvoid updateParameters_08003346(int baseAddress,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0x79) {\n    *(undefined4 *)(baseAddress + 0x70) = newValue1;\n    *(undefined4 *)(baseAddress + 0x34) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_parameters_08003346",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_param_values_08003350",
            "code": "\nvoid updateParamValues_08003350(int ptr,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0xf9) {\n    *(undefined4 *)(ptr + 0x74) = newValue1;\n    *(undefined4 *)(ptr + 0x38) = newValue2;\n    return;\n  }\n  if (value != 0xff) {\n    return;\n  }\n  *(undefined4 *)(ptr + 0x78) = newValue1;\n  *(undefined4 *)(ptr + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_param_values_08003350",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_data_08003366",
            "code": "\nvoid updateData_08003366(int ptr,int value,undefined4 data1,undefined4 data2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(ptr + 0x68) = data1;\n    *(undefined4 *)(ptr + 0x40) = data2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_data_08003366",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_parameters_08003370",
            "code": "\nvoid setParameters_08003370(int objectAddress,undefined4 unusedParameter,undefined4 value1,undefined4 value2)\n\n{\n  *(undefined4 *)(objectAddress + 0x6c) = value1;\n  *(undefined4 *)(objectAddress + 0x44) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_parameters_08003370",
                "param_1": "objectAddress",
                "param_2": "unusedParameter",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "copy_value_to_file_08003376",
            "code": "\nvoid copyValueToFile_08003376(undefined *buffer,undefined value,uint position)\n\n{\n  bool isValidPosition;\n  \n  if (position < *(uint *)(buffer + 8)) {\n    isValidPosition = false;\n  }\n  else {\n    isValidPosition = true;\n    if (*(code **)(buffer + 100) != (code *)0x0) {\n      *buffer = 1;\n      (**(code **)(buffer + 100))(*(undefined4 *)(buffer + 0x3c));\n      if (position < *(uint *)(buffer + 8)) {\n        isValidPosition = false;\n      }\n      else {\n        isValidPosition = true;\n      }\n    }\n  }\n  if (!isValidPosition) {\n    *(undefined *)(*(int *)(buffer + 4) + position) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "copy_value_to_file_08003376",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "position",
                "bVar1": "isValidPosition"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copyAndShiftBits_080033a8(undefined4 sourceAddress,uint length,int destinationAddress)\n\n{\n  byte currentByte;\n  int destinationIndex;\n  uint sourceIndex;\n  \n  destinationIndex = 0;\n  for (sourceIndex = 0; sourceIndex < length; sourceIndex = sourceIndex + 2) {\n    currentByte = *(byte *)(destinationAddress + sourceIndex);\n    *(byte *)(destinationAddress + destinationIndex) = currentByte;\n    *(byte *)(destinationAddress + destinationIndex) = *(char *)(destinationAddress + sourceIndex + 1) << 7 | currentByte;\n    destinationIndex = destinationIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "sourceAddress",
                "param_2": "length",
                "param_3": "destinationAddress",
                "iVar2": "destinationIndex",
                "uVar3": "sourceIndex",
                "bVar1": "currentByte"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_input_string_080033cc",
            "code": "\nvoid processInputString_080033cc(int inputData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int indexVar;\n  char *charPtr;\n  \n  charPtr = *(char **)(inputData + 4);\n  firstChar = *charPtr;\n  if (firstChar == 'q') {\n    if (*(int *)(inputData + 0x68) != 0) {\n      indexVar = copy_and_shift_bits_080033a8(inputData,*(int *)(inputData + 0x18) + -1,charPtr + 1,charPtr,param4);\n      copy_value_to_file_08003376(inputData,0,indexVar + 1);\n      (**(code **)(inputData + 0x68))(*(undefined4 *)(inputData + 0x40),*(int *)(inputData + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(inputData + 0x70) != (code *)0x0) {\n      if (*(uint *)(inputData + 0x18) < 3) {\n        (**(code **)(inputData + 0x70))(*(undefined4 *)(inputData + 0x34),0,0);\n        return;\n      }\n      indexVar = copy_and_shift_bits_080033a8(inputData,*(uint *)(inputData + 0x18) - 3,charPtr + 3,charPtr,param4);\n      copy_value_to_file_08003376(inputData,0,indexVar + 3);\n      indexVar = *(int *)(inputData + 4);\n      (**(code **)(inputData + 0x70))\n                (*(undefined4 *)(inputData + 0x34),*(undefined *)(indexVar + 1),*(undefined *)(indexVar + 2)\n                 ,indexVar + 3);\n      return;\n    }\n  }\n  else if (*(code **)(inputData + 0x6c) != (code *)0x0) {\n    (**(code **)(inputData + 0x6c))\n              (*(undefined4 *)(inputData + 0x44),firstChar,*(int *)(inputData + 0x18) + -1,charPtr + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_input_string_080033cc",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "indexVar",
                "pcVar3": "charPtr"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_function_0800344a",
            "code": "\nvoid initializeFunction_0800344a(int functionData)\n\n{\n  uint index;\n  \n  *(undefined4 *)(functionData + 0x10) = 0;\n  *(undefined *)(functionData + 0xc) = 0;\n  *(undefined *)(functionData + 0xd) = 0;\n  for (index = 0; index < *(uint *)(functionData + 8); index = index + 1) {\n    *(undefined *)(*(int *)(functionData + 4) + index) = 0;\n  }\n  *(undefined *)(functionData + 0x14) = 0;\n  *(undefined4 *)(functionData + 0x18) = 0;\n  if (*(code **)(functionData + 0x78) != (code *)0x0) {\n    (**(code **)(functionData + 0x78))(*(undefined4 *)(functionData + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_function_0800344a",
                "param_1": "functionData",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_input_08003474",
            "code": "\nvoid process_input_08003474(int ptr,uint value)\n\n{\n  byte byteVal;\n  \n  if (*(char *)(ptr + 0x14) != '\\0') {\n    if (value != 0xf7) {\n      copy_value_to_file_08003376(ptr,value,*(undefined4 *)(ptr + 0x18));\n      *(int *)(ptr + 0x18) = *(int *)(ptr + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(ptr + 0x14) = 0;\n    process_input_08003474_string_080033cc();\n    return;\n  }\n  if ((*(int *)(ptr + 0x10) == 0) || (0x7f < (int)value)) {\n    if ((int)value < 0xf0) {\n      *(byte *)(ptr + 0xd) = (byte)value & 0xf;\n      value = value & 0xf0;\n    }\n    if (value == 0xf0) {\n      *(undefined *)(ptr + 0x14) = 1;\n      *(undefined4 *)(ptr + 0x18) = 0;\n      return;\n    }\n    if (value < 0xf1) {\n      if (value != 0xc0) {\n        if (value < 0xc1) {\n          if (value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (value == 0xd0) goto LAB_0800359c;\n          if (value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(ptr + 0x10) = 2;\n        *(char *)(ptr + 0xc) = (char)value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(ptr + 0x10) = 1;\n      *(char *)(ptr + 0xc) = (char)value;\n      return;\n    }\n    if (value != 0xf9) {\n      if (0xf9 < value) {\n        if (value == 0xff) {\n          initialize_function_0800344a(ptr);\n          return;\n        }\n        return;\n      }\n      if (1 < value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(ptr + 0x74) != (code *)0x0) {\n      (**(code **)(ptr + 0x74))(*(undefined4 *)(ptr + 0x38));\n    }\n  }\n  else {\n    *(int *)(ptr + 0x10) = *(int *)(ptr + 0x10) + -1;\n    copy_value_to_file_08003376();\n    if ((*(int *)(ptr + 0x10) == 0) && (byteVal = *(byte *)(ptr + 0xc), byteVal != 0)) {\n      if (byteVal == 0xd0) {\n        if (*(code **)(ptr + 0x58) != (code *)0x0) {\n          (**(code **)(ptr + 0x58))\n                    (*(undefined4 *)(ptr + 0x28),*(undefined *)(ptr + 0xd),\n                     **(undefined **)(ptr + 4));\n        }\n      }\n      else if (byteVal < 0xd1) {\n        if (byteVal == 0x90) {\n          if (*(code **)(ptr + 0x50) != (code *)0x0) {\n            (**(code **)(ptr + 0x50))\n                      (*(undefined4 *)(ptr + 0x20),*(undefined *)(ptr + 0xd),\n                       (uint)(*(byte **)(ptr + 4))[1] + (uint)**(byte **)(ptr + 4) * 0x80);\n          }\n        }\n        else if ((byteVal == 0xc0) && (*(code **)(ptr + 0x54) != (code *)0x0)) {\n          (**(code **)(ptr + 0x54))\n                    (*(undefined4 *)(ptr + 0x24),*(undefined *)(ptr + 0xd),\n                     **(undefined **)(ptr + 4));\n        }\n      }\n      else if (byteVal == 0xf4) {\n        if (*(code **)(ptr + 0x5c) != (code *)0x0) {\n          (**(code **)(ptr + 0x5c))\n                    (*(undefined4 *)(ptr + 0x2c),(*(undefined **)(ptr + 4))[1],\n                     **(undefined **)(ptr + 4));\n        }\n      }\n      else if (byteVal == 0xf5) {\n        if (*(code **)(ptr + 0x60) != (code *)0x0) {\n          (**(code **)(ptr + 0x60))\n                    (*(undefined4 *)(ptr + 0x30),(*(undefined **)(ptr + 4))[1],\n                     **(undefined **)(ptr + 4));\n        }\n      }\n      else if ((byteVal == 0xe0) && (*(code **)(ptr + 0x4c) != (code *)0x0)) {\n        (**(code **)(ptr + 0x4c))\n                  (*(undefined4 *)(ptr + 0x1c),*(undefined *)(ptr + 0xd),\n                   (uint)(*(byte **)(ptr + 4))[1] + (uint)**(byte **)(ptr + 4) * 0x80);\n      }\n      *(undefined *)(ptr + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_input_08003474",
                "param_1": "ptr",
                "param_2": "value",
                "bVar1": "byteVal"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_device_080035b8",
            "code": "\nvoid initializeDevice_080035b8(void)\n\n{\n  int result;\n  uint dataAddress;\n  undefined4 configurationParams [2];\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 data [4];\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  \n  data[0] = 2;\n  flag1 = 1;\n  flag2 = 0x10;\n  flag3 = 2;\n  flag4 = 0;\n  flag5 = 0x380000;\n  result = validate_and_delay_08005460(data);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  param2 = 0xf;\n  param3 = 2;\n  param4 = 0;\n  param5 = 0x400;\n  param6 = 0;\n  result = update_configuration_080058ac(&param2);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  configurationParams[0] = 2;\n  param1 = 0x8000;\n  result = update_flags_and_registers_08005aa4(configurationParams);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  dataAddress = get_data_address_08005a1c();\n  validate_param_08003fd8(dataAddress / 1000);\n  set_flag_08004024(4);\n  update_character_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_device_080035b8",
                "local_54": "configurationParams",
                "local_4c": "param1",
                "local_44": "param2",
                "local_40": "param3",
                "local_3c": "param4",
                "local_38": "param5",
                "local_34": "param6",
                "local_30": "data",
                "local_20": "flag1",
                "local_1c": "flag2",
                "local_14": "flag3",
                "local_10": "flag4",
                "local_c": "flag5",
                "iVar1": "result",
                "uVar2": "dataAddress"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_080073ec();\n  execute_functions_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  run_continuous_process_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_device_080036a2",
            "code": "\nvoid initialize_device_080036a2(void)\n\n{\n  initialize_and_setup_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_device_080036a2",
                "initialize_and_initialize_device_080072fa": "initialize_and_setup_device"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "find_char_index_080036ac",
            "code": "\nuint find_char_index_080036ac(int value)\n\n{\n  uint index;\n  \n  if ((uint)(value << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (value != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "find_char_index_080036ac",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "validate_and_update_param_080036d8",
            "code": "\nundefined4 validate_and_update_param_080036d8(uint input_param)\n\n{\n  int validation_result;\n  \n  validation_result = validate_param_08003fd8(DAT_20000018 / (1000 / DAT_2000000c));\n  if (validation_result != 0) {\n    return 1;\n  }\n  if (0xf < input_param) {\n    return 1;\n  }\n  update_character_08003f30(0xffffffff,input_param,0);\n  DAT_20000010 = input_param;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "validate_and_update_param_080036d8",
                "param_1": "input_param",
                "iVar1": "validation_result"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_memory_and_params_08003724",
            "code": "\n\n\nundefined4 initialize_memory_and_params_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_memory_address(3);\n  validate_and_update_parameter(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_memory_and_params_08003724",
                "update_memory_address_08003f0c": "update_memory_address",
                "validate_and_update_param_080036d8": "validate_and_update_parameter"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "accumulate_data_08003748",
            "code": "\nvoid accumulateData_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "accumulate_data_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_global_variable_value_08003760",
            "code": "\nundefined4 get_global_variable_value_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_global_variable_value_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "calculate_return_value_0800376c",
            "code": "\nundefined4 calculateReturnValue_0800376c(uint **parameterArray,uint parameter)\n\n{\n  int globalVarValue1;\n  uint parameter2Value;\n  int globalVarValue2;\n  undefined4 returnValue;\n  uint *pointerToParamArray;\n  uint dataValue;\n  uint counter;\n  \n  counter = 0;\n  globalVarValue1 = get_global_variable_value_08003760();\n  dataValue = DAT_20000018;\n  pointerToParamArray = *parameterArray;\n  if ((pointerToParamArray[2] & 0x100) == 0) {\n    if (((pointerToParamArray[1] & 0x100) == 0) && ((pointerToParamArray[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**parameterArray & 2) != 0) goto LAB_0800387e;\n      } while ((parameter == 0xffffffff) ||\n              ((parameter != 0 && (globalVarValue2 = get_global_variable_value_08003760(), (uint)(globalVarValue2 - globalVarValue1) <= parameter))));\n      parameterArray[10] = (uint *)((uint)parameterArray[10] | 4);\n      *(undefined *)(parameterArray + 9) = 0;\n      returnValue = 3;\n    }\n    else {\n      parameter2Value = calculate_parameter_08005bb8(2);\n      pointerToParamArray = *parameterArray;\n      if (((pointerToParamArray[4] & 0x24924924) == 0) && ((pointerToParamArray[3] & 0x924924) == 0)) {\n        if ((pointerToParamArray[4] & 0x12492492) == 0) {\n          if ((pointerToParamArray[3] & 0x492492) == 0) {\n            globalVarValue2 = 0x14;\n          }\n          else {\n            globalVarValue2 = 0x29;\n          }\n        }\n        else {\n          globalVarValue2 = 0x29;\n        }\n      }\n      else if (((pointerToParamArray[4] & 0x12492492) == 0) && ((pointerToParamArray[3] & 0x492492) == 0)) {\n        globalVarValue2 = 0x54;\n      }\n      else if ((pointerToParamArray[4] & 0x249249) == 0) {\n        if ((pointerToParamArray[3] & 0x249249) == 0) {\n          globalVarValue2 = 0x54;\n        }\n        else {\n          globalVarValue2 = 0xfc;\n        }\n      }\n      else {\n        globalVarValue2 = 0xfc;\n      }\n      dataValue = (dataValue / parameter2Value) * globalVarValue2;\n      for (; counter <= dataValue && dataValue - counter != 0; counter = counter + 1) {\n        if ((parameter != 0xffffffff) &&\n           ((parameter == 0 || (globalVarValue2 = get_global_variable_value_08003760(), parameter < (uint)(globalVarValue2 - globalVarValue1))))) {\n          parameterArray[10] = (uint *)((uint)parameterArray[10] | 4);\n          *(undefined *)(parameterArray + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **parameterArray = 0xffffffed;\n      parameterArray[10] = (uint *)((uint)parameterArray[10] | 0x200);\n      if (((*parameterArray)[2] & 0xe0000) == 0xe0000) {\n        if (parameterArray[3] == (uint *)0x0) {\n          parameterArray[10] = (uint *)((uint)parameterArray[10] & 0xfffffeff);\n          if (((uint)parameterArray[10] & 0x1000) == 0) {\n            parameterArray[10] = (uint *)((uint)parameterArray[10] | 1);\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        returnValue = 0;\n      }\n    }\n  }\n  else {\n    parameterArray[10] = (uint *)((uint)parameterArray[10] | 0x20);\n    *(undefined *)(parameterArray + 9) = 0;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "calculate_return_value_0800376c",
                "param_1": "parameterArray",
                "param_2": "parameter",
                "iVar1": "globalVarValue1",
                "uVar2": "parameter2Value",
                "iVar3": "globalVarValue2",
                "uVar4": "returnValue",
                "puVar5": "pointerToParamArray",
                "uVar6": "dataValue",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "extract_offset_value_080038dc",
            "code": "\nundefined4 extract_offset_value_080038dc(int *offset_pointer)\n\n{\n  return *(undefined4 *)(*offset_pointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "extract_offset_value_080038dc",
                "param_1": "offset_pointer"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "set_configuration_080038e4",
            "code": "\nundefined4 setConfiguration_080038e4(int *configPtr,uint *dataPtr)\n\n{\n  undefined4 returnValue;\n  uint shiftValue;\n  int count;\n  \n  if (*(char *)(configPtr + 9) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 9) = 1;\n    shiftValue = dataPtr[1];\n    if (shiftValue < 7) {\n      shiftValue = shiftValue * 5 - 5;\n      *(uint *)(*configPtr + 0x34) =\n           *dataPtr << (shiftValue & 0xff) | *(uint *)(*configPtr + 0x34) & ~(0x1f << (shiftValue & 0xff));\n    }\n    else if (shiftValue < 0xd) {\n      shiftValue = shiftValue * 5 - 0x23;\n      *(uint *)(*configPtr + 0x30) =\n           *dataPtr << (shiftValue & 0xff) | *(uint *)(*configPtr + 0x30) & ~(0x1f << (shiftValue & 0xff));\n    }\n    else {\n      shiftValue = shiftValue * 5 - 0x41;\n      *(uint *)(*configPtr + 0x2c) =\n           *dataPtr << (shiftValue & 0xff) | *(uint *)(*configPtr + 0x2c) & ~(0x1f << (shiftValue & 0xff));\n    }\n    shiftValue = *dataPtr;\n    if (shiftValue < 10) {\n      *(uint *)(*configPtr + 0x10) =\n           dataPtr[2] << (shiftValue * 3 & 0xff) |\n           *(uint *)(*configPtr + 0x10) & ~(7 << (shiftValue * 3 & 0xff));\n    }\n    else {\n      shiftValue = shiftValue * 3 - 0x1e;\n      *(uint *)(*configPtr + 0xc) =\n           dataPtr[2] << (shiftValue & 0xff) | *(uint *)(*configPtr + 0xc) & ~(7 << (shiftValue & 0xff));\n    }\n    if (*dataPtr - 0x10 < 2) {\n      if (*configPtr == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*dataPtr == 0x10) {\n            for (count = (DAT_20000018 / 1000000) * 10; count != 0; count = count + -1) {\n            }\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        configPtr[10] = configPtr[10] | 0x20;\n        returnValue = 1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n    *(undefined *)(configPtr + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "set_configuration_080038e4",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "returnValue",
                "uVar2": "shiftValue",
                "local_c": "count"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_offset_value_08003a1c",
            "code": "\nundefined4 getOffsetValue_08003a1c(int offsetPointer)\n\n{\n  return *(undefined4 *)(offsetPointer + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_offset_value_08003a1c",
                "param_1": "offsetPointer"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "update_flag_if_not_set_08003a20",
            "code": "\nundefined4 updateFlagIfNotSet_08003a20(int *values,undefined4 flag)\n\n{\n  int globalValue;\n  undefined4 uVar2;\n  int value;\n  uint iterations;\n  \n  value = *values;\n  if ((*(uint *)(value + 8) & 1) == 0) {\n    *(uint *)(value + 8) = *(uint *)(value + 8) | 1;\n    for (iterations = DAT_20000018 / 1000000; iterations != 0; iterations = iterations - 1) {\n    }\n    value = getGlobalValue(values,flag,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*values + 8) & 1) != 0) {\n        return 0;\n      }\n      globalValue = getGlobalValue();\n    } while ((uint)(globalValue - value) < 3);\n    flag1 = flag1 | 0x10;\n    flag2 = flag2 | 1;\n    *(undefined *)(values + 9) = 0;\n    uVar2 = 1;\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "update_flag_if_not_set_08003a20",
                "param_1": "values",
                "param_2": "flag",
                "iVar1": "globalValue",
                "iVar3": "value",
                "local_14": "iterations",
                "get_global_variable_value_08003760": "getGlobalValue",
                "param_1[10]": "flag1",
                "param_1[0xb]": "flag2"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "update_flag_and_check_08003aa0",
            "code": "\n\n\nint update_flag_and_check_08003aa0(int *param_array)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(param_array + 9) != '\\x01') {\n    *(undefined *)(param_array + 9) = 1;\n    result = update_flag_if_not_set_08003a20();\n    if (result == 0) {\n      param_array[10] = param_array[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*param_array;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        param_array[10] = param_array[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          param_array[10] = param_array[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        param_array[10] = param_array[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          param_array[10] = param_array[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((param_array[10] & 0x1000U) == 0) {\n        param_array[0xb] = 0;\n      }\n      else {\n        param_array[0xb] = param_array[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(param_array + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *param_array;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(param_array + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "update_flag_and_check_08003aa0",
                "param_1": "param_array",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "value"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "update_status_08003b8c",
            "code": "\nundefined4 updateStatus_08003b8c(int *status)\n\n{\n  int value1;\n  int value2;\n  \n  value2 = *status;\n  if ((*(uint *)(value2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(value2 + 8) = *(uint *)(value2 + 8) & 0xfffffffe;\n  value2 = get_global_variable_value_08003760();\n  do {\n    if ((*(uint *)(*status + 8) & 1) == 0) {\n      return 0;\n    }\n    value1 = get_global_variable_value_08003760();\n  } while ((uint)(value1 - value2) < 3);\n  status[10] = status[10] | 0x10;\n  status[0xb] = status[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "update_status_08003b8c",
                "param_1": "status",
                "iVar1": "value1",
                "iVar2": "value2"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "update_memory_and_status_08003bd8",
            "code": "\nundefined4 updateMemoryAndStatus_08003bd8(int *inputArray)\n\n{\n  int status;\n  uint combinedValues;\n  uint flag;\n  \n  if (inputArray == (int *)0x0) {\n    return 1;\n  }\n  if (inputArray[10] == 0) {\n    inputArray[0xb] = 0;\n    *(undefined *)(inputArray + 9) = 0;\n    updateMemoryAndParameterValues;\n  }\n  status = update_status_08003b8c(inputArray);\n  if (((inputArray[10] & 0x10U) == 0) && (status == 0)) {\n    inputArray[10] = inputArray[10] & 0xffffeefdU | 2;\n    combinedValues = inputArray[1] | inputArray[7] | inputArray[3] << 1;\n    if (inputArray[2] == 0x100) {\n      flag = 0x100;\n    }\n    else {\n      flag = 0;\n      if (inputArray[2] == 1) {\n        flag = 0x100;\n      }\n    }\n    if (inputArray[5] == 1) {\n      if (inputArray[3] == 0) {\n        flag = flag | (inputArray[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        inputArray[10] = inputArray[10] | 0x20;\n        inputArray[0xb] = inputArray[0xb] | 1;\n      }\n    }\n    *(uint *)(*inputArray + 4) = flag | *(uint *)(*inputArray + 4) & 0xffff16ff;\n    *(uint *)(*inputArray + 8) = *(uint *)(*inputArray + 8) & 0xffe1f7fd | combinedValues;\n    if ((inputArray[2] == 0x100) || (inputArray[2] == 1)) {\n      flag = (inputArray[4] + -1) * 0x100000;\n    }\n    else {\n      flag = 0;\n    }\n    *(uint *)(*inputArray + 0x2c) = flag | *(uint *)(*inputArray + 0x2c) & 0xff0fffff;\n    if (combinedValues != (*(uint *)(*inputArray + 8) & 0xff1f0efe)) {\n      inputArray[10] = inputArray[10] & 0xffffffedU | 0x10;\n      inputArray[0xb] = inputArray[0xb] | 1;\n      return 1;\n    }\n    inputArray[0xb] = 0;\n    inputArray[10] = inputArray[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  inputArray[10] = inputArray[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "update_memory_and_status_08003bd8",
                "param_1": "inputArray",
                "iVar1": "status",
                "uVar2": "combinedValues",
                "uVar3": "flag",
                "update_memory_and_parameter_values_08006ca8()": "updateMemoryAndParameterValues"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "clear_permissions_08003ce8",
            "code": "\nint clearPermissions_08003ce8(int *parameters)\n\n{\n  int result;\n  \n  if (parameters == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    parameters[10] = parameters[10] | 2;\n    result = updateStatus();\n    if (result == 0) {\n      *(pointer *)*parameters = 0xffffffe0;\n      *(uint *)(*parameters + 4) = *(uint *)(*parameters + 4) & 0xff3f0000;\n      *(uint *)(*parameters + 8) = *(uint *)(*parameters + 8) & 0xff0106f0;\n      *(uint *)(*parameters + 0xc) = *(uint *)(*parameters + 0xc) & 0xff000000;\n      *(uint *)(*parameters + 0x10) = *(uint *)(*parameters + 0x10) & 0xc0000000;\n      *(uint *)(*parameters + 0x14) = *(uint *)(*parameters + 0x14) & 0xfffff000;\n      *(uint *)(*parameters + 0x18) = *(uint *)(*parameters + 0x18) & 0xfffff000;\n      *(uint *)(*parameters + 0x1c) = *(uint *)(*parameters + 0x1c) & 0xfffff000;\n      *(uint *)(*parameters + 0x20) = *(uint *)(*parameters + 0x20) & 0xfffff000;\n      *(uint *)(*parameters + 0x24) = *(uint *)(*parameters + 0x24) & 0xfffff000;\n      *(uint *)(*parameters + 0x28) = *(uint *)(*parameters + 0x28) & 0xfffff000;\n      *(uint *)(*parameters + 0x2c) = *(uint *)(*parameters + 0x2c) & 0xff000000;\n      *(uint *)(*parameters + 0x2c) = *(uint *)(*parameters + 0x2c) & 0xff000000;\n      *(uint *)(*parameters + 0x30) = *(uint *)(*parameters + 0x30) & 0xc0000000;\n      *(uint *)(*parameters + 0x34) = *(uint *)(*parameters + 0x34) & 0xc0000000;\n      *(uint *)(*parameters + 0x38) = *(uint *)(*parameters + 0x38) & 0xffc00000;\n      *(uint *)(*parameters + 0x38) = *(uint *)(*parameters + 0x38) & 0xffc00000;\n      updatePermissions(parameters);\n      parameters[0xb] = 0;\n      parameters[10] = 0;\n    }\n    *(undefined *)(parameters + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "clear_permissions_08003ce8",
                "param_1": "parameters",
                "iVar1": "result",
                "update_status_08003b8c": "updateStatus",
                "undefined4": "pointer",
                "param_1[10]": "parameters[10]",
                "update_permissions_08006d24": "updatePermissions",
                "param_1[0xb]": "parameters[0xb]"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "update_status_08003de4",
            "code": "\nint update_status_08003de4(int input)\n\n{\n  int status;\n  \n  if (*(char *)(input + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(input + 0x24) = 1;\n  status = update_status_08003de4_helper();\n  if (status == 0) {\n    *(uint *)(input + 0x28) = *(uint *)(input + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(input + 0x24) = 0;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "update_status_08003de4",
                "param_1": "input",
                "iVar1": "status",
                "update_status_08003b8c": "update_status_helper"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "check_and_update_status_08003e20",
            "code": "\nint checkAndUpdateStatus_08003e20(int *inputArray)\n\n{\n  uint var1;\n  int status;\n  uint var3;\n  int globalVar1;\n  int globalVar2;\n  int loopCounter;\n  \n  if (*(char *)(inputArray + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(inputArray + 9) = 1;\n  status = update_status_08003b8c();\n  if (status == 0) {\n    inputArray[10] = inputArray[10] & 0xffffeefdU | 2;\n    var1 = DAT_20000018;\n    var3 = calculate_parameter_08005bb8(2);\n    for (loopCounter = var1 / var3 << 1; loopCounter != 0; loopCounter = loopCounter + -1) {\n    }\n    update_flag_if_not_set_08003a20(inputArray);\n    *(uint *)(*inputArray + 8) = *(uint *)(*inputArray + 8) | 8;\n    globalVar1 = get_global_variable_value_08003760();\n    while (globalVar2 = *inputArray, (*(uint *)(globalVar2 + 8) & 8) != 0) {\n      globalVar2 = get_global_variable_value_08003760();\n      if (10 < (uint)(globalVar2 - globalVar1)) {\n        inputArray[10] = inputArray[10] & 0xffffffedU | 0x10;\n        *(undefined *)(inputArray + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(globalVar2 + 8) = *(uint *)(globalVar2 + 8) | 4;\n    globalVar1 = get_global_variable_value_08003760();\n    while ((*(uint *)(*inputArray + 8) & 4) != 0) {\n      globalVar2 = get_global_variable_value_08003760();\n      if (10 < (uint)(globalVar2 - globalVar1)) {\n        inputArray[10] = inputArray[10] & 0xffffffedU | 0x10;\n        *(undefined *)(inputArray + 9) = 0;\n        return 1;\n      }\n    }\n    inputArray[10] = inputArray[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(inputArray + 9) = 0;\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "check_and_update_status_08003e20",
                "param_1": "inputArray",
                "uVar1": "var1",
                "iVar2": "status",
                "uVar3": "var3",
                "iVar4": "globalVar1",
                "iVar5": "globalVar2",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_memory_address_08003f0c",
            "code": "\n\n\nvoid updateMemoryAddress_08003f0c(uint value)\n\n{\n  _DAT_e000ed0c = (value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_memory_address_08003f0c",
                "param_1": "value"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_character_08003f30",
            "code": "\n\n\nvoid updateCharacter_08003f30(uint characterAddress,uint bitMask1,uint bitMask2)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitMask1 & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & bitMask2;\n  if ((int)characterAddress < 0) {\n    *(char *)((characterAddress & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(characterAddress + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_character_08003f30",
                "param_1": "characterAddress",
                "param_2": "bitMask1",
                "param_3": "bitMask2",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_08003f94",
            "code": "\nvoid setBit_08003f94(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_08003f94",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid setBitInMemory_08003fb0(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n    performDataSyncBarrier(0xf);\n    performInstructionSyncBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bitPosition",
                "DataSynchronizationBarrier": "performDataSyncBarrier",
                "InstructionSynchronizationBarrier": "performInstructionSyncBarrier"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "validate_param_08003fd8",
            "code": "\n\n\nundefined4 validate_param_08003fd8(int input_param)\n\n{\n  if (input_param - 1U < 0x1000000) {\n    _DAT_e000e014 = input_param - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "validate_param_08003fd8",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_08004004",
            "code": "\nvoid setBit_08004004(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_08004004",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "set_flag_08004024",
            "code": "\n\n\nvoid setFlag_08004024(int flagValue)\n\n{\n  if (flagValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "set_flag_08004024",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "execute_initialization_08004046",
            "code": "\nvoid execute_initialization_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "execute_initialization_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "update_config_08004050",
            "code": "\n\n\nundefined4 updateConfig_08004050(uint **config)\n\n{\n  uint *configValue;\n  \n  if (*(char *)((int)config + 0x21) != '\\x02') {\n    config[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **config = **config & 0xfffffff1;\n  **config = **config & 0xfffffffe;\n  configValue = *config;\n  if (configValue == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (configValue == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (configValue == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (configValue == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (configValue == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (configValue == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)config + 0x21) = 1;\n  *(undefined *)(config + 8) = 0;\n  if (functionPointer != (uint *)0x0) {\n    (*(code *)functionPointer)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "update_config_08004050",
                "param_1": "config",
                "puVar1": "configValue",
                "param_1[0xd]": "functionPointer"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_parameter_values_080040e8",
            "code": "\n\n\nvoid updateParameterValues_080040e8(uint *registerConfig,uint *maskConfig)\n\n{\n  uint *registerConfigPtr;\n  uint bitMask;\n  uint maskedValue;\n  uint bitIndex;\n  uint constantValue;\n  uint updatedValue;\n  int shiftAmount1;\n  int shiftAmount2;\n  \n  updatedValue = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    maskedValue = *maskConfig & bitMask;\n    if (bitMask == maskedValue) {\n      constantValue = maskConfig[1];\n      if (constantValue == 0x12) {\n        updatedValue = maskConfig[3] + 0xc;\n      }\n      else if (constantValue < 0x13) {\n        if (constantValue == 2) {\n          updatedValue = maskConfig[3] + 8;\n        }\n        else if (constantValue < 3) {\n          if (constantValue == 0) goto LAB_0800423a;\n          if (constantValue == 1) {\n            updatedValue = maskConfig[3];\n          }\n        }\n        else if (constantValue == 3) {\n          updatedValue = 0;\n        }\n        else if (constantValue == 0x11) {\n          updatedValue = maskConfig[3] + 4;\n        }\n      }\n      else if (constantValue == 0x10210000) {\nLAB_0800423a:\n        if (maskConfig[2] == 0) {\n          updatedValue = 4;\n        }\n        else if (maskConfig[2] == 1) {\n          registerConfig[4] = bitMask;\n          updatedValue = 8;\n        }\n        else {\n          registerConfig[5] = bitMask;\n          updatedValue = 8;\n        }\n      }\n      else if (constantValue < 0x10210001) {\n        if ((constantValue == 0x10110000) || (constantValue == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((constantValue == 0x10310000) || ((constantValue == 0x10320000 || (constantValue == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = bitIndex;\n      registerConfigPtr = registerConfig;\n      if (0xff < maskedValue) {\n        bitMask = bitIndex - 8;\n        registerConfigPtr = registerConfig + 1;\n      }\n      *registerConfigPtr = *registerConfigPtr & ~(0xf << (bitMask << 2 & 0xff)) | updatedValue << (bitMask << 2 & 0xff);\n      if ((maskConfig[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount1 = (bitIndex & 3) << 2;\n        if (registerConfig == (uint *)0x40010800) {\n          shiftAmount2 = 0;\n        }\n        else if (registerConfig == (uint *)0x40010c00) {\n          shiftAmount2 = 1;\n        }\n        else if (registerConfig == (uint *)0x40011000) {\n          shiftAmount2 = 2;\n        }\n        else if (registerConfig == (uint *)0x40011400) {\n          shiftAmount2 = 3;\n        }\n        else {\n          shiftAmount2 = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shiftAmount1) | shiftAmount2 << shiftAmount1;\n        if ((maskConfig[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~maskedValue;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | maskedValue;\n        }\n        if ((maskConfig[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~maskedValue;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | maskedValue;\n        }\n        if ((maskConfig[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~maskedValue;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | maskedValue;\n        }\n        if ((maskConfig[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~maskedValue;\n        }\n        else {\n          _DAT_4001040c = maskedValue | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_parameter_values_080040e8",
                "param_1": "registerConfig",
                "param_2": "maskConfig",
                "puVar1": "registerConfigPtr",
                "uVar2": "bitMask",
                "uVar3": "maskedValue",
                "uVar4": "bitIndex",
                "uVar5": "constantValue",
                "uVar6": "updatedValue",
                "iVar7": "shiftAmount1",
                "iVar8": "shiftAmount2"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bits_080042d4",
            "code": "\nundefined4 check_bits_080042d4(int input_value,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input_value + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bits_080042d4",
                "param_1": "input_value",
                "param_2": "bit_mask"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_param_value_080042e2",
            "code": "\nvoid setParamValue_080042e2(int objectAddress,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(objectAddress + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(objectAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "process_data_if_flag_set_080042f0",
            "code": "\n\n\nvoid process_data_if_flag_set_080042f0(uint flag)\n\n{\n  if ((_DAT_40010414 & flag) != 0) {\n    _DAT_40010414 = flag;\n    verify_and_process_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "process_data_if_flag_set_080042f0",
                "param_1": "flag",
                "check_and_process_data_08009094": "verify_and_process_data"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_flag_value_0800430c",
            "code": "\nundefined4 updateFlagValue_0800430c(int *flagData)\n\n{\n  if (*(char *)((int)flagData + 0x3e) == '@') {\n    if (flagIndex == 0) {\n      *(uint *)(*flagData + 0x10) = flagByte & 0xfe;\n    }\n    else {\n      *(uint *)(*flagData + 0x10) = flagByte & 0xffU | 1;\n    }\n  }\n  else if (checkValue == 0x4000) {\n    if (*(char *)((int)flagData + 0x3d) == '!') {\n      *(uint *)(*flagData + 0x10) = flagByte & 0xfe;\n    }\n    else {\n      *(uint *)(*flagData + 0x10) = flagByte & 0xffU | 1;\n    }\n  }\n  else if (flagIndex == 0) {\n    *(uint *)(*flagData + 0x10) = (uint)(flagByte << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flagIndex == 1) {\n    *(uint *)(*flagData + 0x10) = (uint)(flagByte << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_flag_value_0800430c",
                "param_1": "flagData",
                "param_1[0x14]": "flagIndex",
                "param_1[0x11]": "flagByte",
                "param_1[4]": "checkValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "set_byte_value_08004396",
            "code": "\nundefined4 set_byte_value_08004396(int *ptr)\n\n{\n  *(uint *)(*ptr + 0x10) = ptr[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "set_byte_value_08004396",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "set_flags_080043a2",
            "code": "\nundefined4 setFlags_080043a2(uint **params)\n\n{\n  uint *ptrVar1;\n  \n  ptrVar1 = params[0xb];\n  if ((*(char *)((int)params + 0x3d) == '\\\"') &&\n     ((params[0x14] != (uint *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((params[0x14] == (uint *)0x0) && (params[4] == (uint *)0xc000)) {\n      **params = **params | 0x100;\n      params[0x14] = (uint *)((int)params[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (ptrVar1 == (uint *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          ptrVar1 = *params;\n          if ((ptrVar1[1] & 0x800) == 0) {\n            *ptrVar1 = *ptrVar1 | 0x200;\n          }\n          else {\n            *ptrVar1 = *ptrVar1 & 0xfffffbff;\n          }\n        }\n        else if (((ptrVar1 == (uint *)0x4) || (ptrVar1 == (uint *)0x8)) ||\n                (params[0xc] == (uint *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (params[0xb] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (params[0xb] == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        ptrVar1 = *params;\n        if ((ptrVar1[1] & 0x800) != 0) {\n          ptrVar1[1] = ptrVar1[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        ptrVar1 = *params;\n        if ((ptrVar1[1] & 0x800) != 0) {\n          ptrVar1[1] = ptrVar1[1] | 0x1000;\n        }\n      }\n      params[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "set_flags_080043a2",
                "param_1": "params",
                "puVar1": "ptrVar1"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_buffer_data_0800457c",
            "code": "\nundefined4 updateBufferData_0800457c(int *buffer)\n\n{\n  byte *currentByte;\n  \n  if (*(short *)((int)buffer + 0x2a) != 0) {\n    currentByte = (byte *)buffer[9];\n    buffer[9] = (int)(currentByte + 1);\n    *(uint *)(*buffer + 0x10) = (uint)*currentByte;\n    *(short *)((int)buffer + 0x2a) = *(short *)((int)buffer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_buffer_data_0800457c",
                "param_1": "buffer",
                "pbVar1": "currentByte"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_param_and_decrease_0800459c",
            "code": "\nundefined4 updateParamAndDecrease_0800459c(int *paramArray)\n\n{\n  undefined *ptrToParamArray;\n  \n  if (*(short *)((int)paramArray + 0x2a) != 0) {\n    ptrToParamArray = (undefined *)paramArray[9];\n    paramArray[9] = (int)(ptrToParamArray + 1);\n    *ptrToParamArray = (char)*(undefined4 *)(*paramArray + 0x10);\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_param_and_decrease_0800459c",
                "param_1": "paramArray",
                "puVar1": "ptrToParamArray"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "initialize_parameters_080045c0",
            "code": "\nundefined4 initializeParameters_080045c0(uint **parameters)\n\n{\n  bool isThresholdMet;\n  uint shiftedData;\n  uint *pointer;\n  uint calculatedValue;\n  \n  if (parameters == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)parameters + 0x3d) == '\\0') {\n    *(undefined *)(parameters + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x24;\n  **parameters = **parameters & 0xfffffffe;\n  shiftedData = get_shifted_data_08005a28();\n  if (parameters[1] < (uint *)0x186a1) {\n    if (shiftedData < 2000000) {\n      isThresholdMet = true;\n    }\n    else {\n      isThresholdMet = false;\n    }\n  }\n  else {\n    isThresholdMet = shiftedData < 4000000;\n  }\n  if (isThresholdMet) {\n    return 1;\n  }\n  calculatedValue = shiftedData / 1000000;\n  (*parameters)[1] = calculatedValue;\n  if ((uint *)0x186a0 < parameters[1]) {\n    calculatedValue = (calculatedValue * 300) / 1000;\n  }\n  (*parameters)[8] = calculatedValue + 1;\n  pointer = parameters[1];\n  if (pointer < (uint *)0x186a1) {\n    shiftedData = (shiftedData - 1) / (uint)((int)pointer << 1) + 1 & 0xfff;\n    if (shiftedData < 4) {\n      shiftedData = 4;\n    }\n  }\n  else {\n    if (parameters[2] == (uint *)0x0) {\n      calculatedValue = (shiftedData - 1) / (uint)((int)pointer * 3);\n    }\n    else {\n      calculatedValue = (shiftedData - 1) / (uint)((int)pointer * 0x19);\n    }\n    if ((calculatedValue + 1 & 0xfff) == 0) {\n      shiftedData = 1;\n    }\n    else if (parameters[2] == (uint *)0x0) {\n      shiftedData = (shiftedData - 1) / (uint)((int)pointer * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      shiftedData = (shiftedData - 1) / (uint)((int)pointer * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*parameters)[7] = shiftedData;\n  **parameters = (uint)parameters[7] | (uint)parameters[8];\n  (*parameters)[2] = (uint)parameters[4] | (uint)parameters[3];\n  (*parameters)[3] = (uint)parameters[5] | (uint)parameters[6];\n  **parameters = **parameters | 1;\n  parameters[0x10] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "initialize_parameters_080045c0",
                "param_1": "parameters",
                "bVar1": "isThresholdMet",
                "uVar2": "shiftedData",
                "puVar3": "pointer",
                "uVar4": "calculatedValue"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "process_data_08004728",
            "code": "\nundefined4 processData_08004728(uint **data,uint *ptr1,uint *ptr2,undefined2 param)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x21;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = ptr2;\n      *(undefined2 *)((int)data + 0x2a) = param;\n      data[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data[0x11] = ptr1;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004728": "process_data_08004728",
                "param_1": "data",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "param",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "update_data_080047f4",
            "code": "\nundefined4 updateData_080047f4(uint **data,uint *ptr1,uint *ptr2,undefined2 code)\n\n{\n  undefined4 returnValue;\n  uint *ptr3;\n  int count;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    count = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (count == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr3 = *data;\n      count = count + -1;\n    } while ((ptr3[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr3 & 1) == 0) {\n        *ptr3 = *ptr3 | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x22;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      returnValue = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = ptr2;\n      *(undefined2 *)((int)data + 0x2a) = code;\n      data[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data[0x11] = ptr1;\n      **data = **data | 0x400;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "update_data_080047f4",
                "param_1": "data",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "code",
                "uVar1": "returnValue",
                "puVar2": "ptr3",
                "local_c": "count"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "process_params_080048c8",
            "code": "\nundefined4 processParams_080048c8(uint **paramsPtr,uint *dataPtr,int length,uint *resultPtr)\n\n{\n  undefined4 returnValue;\n  uint *ptrValue;\n  \n  if (*(char *)((int)paramsPtr + 0x3d) == '(') {\n    if (dataPtr == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (length == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(paramsPtr + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(paramsPtr + 0xf) = 1;\n      ptrValue = *paramsPtr;\n      if ((*ptrValue & 1) == 0) {\n        *ptrValue = *ptrValue | 1;\n      }\n      **paramsPtr = **paramsPtr & 0xfffff7ff;\n      *(undefined *)((int)paramsPtr + 0x3d) = 0x29;\n      *(undefined *)((int)paramsPtr + 0x3e) = 0x20;\n      returnValue = 0;\n      paramsPtr[0x10] = (uint *)0x0;\n      paramsPtr[9] = dataPtr;\n      *(short *)((int)paramsPtr + 0x2a) = (short)length;\n      paramsPtr[0xb] = resultPtr;\n      *(undefined2 *)(paramsPtr + 10) = *(undefined2 *)((int)paramsPtr + 0x2a);\n      *(undefined *)(paramsPtr + 0xf) = 0;\n      (*paramsPtr)[1] = (*paramsPtr)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "process_params_080048c8",
                "param_1": "paramsPtr",
                "param_2": "dataPtr",
                "param_3": "length",
                "param_4": "resultPtr",
                "uVar1": "returnValue",
                "puVar2": "ptrValue"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "validate_input_08004954",
            "code": "\nundefined4 validate_input_08004954(uint **input_data,uint *optional_param,int param_count,uint *param_array)\n\n{\n  undefined4 result;\n  uint *pointer_var;\n  \n  if (*(char *)((int)input_data + 0x3d) == '(') {\n    if (optional_param == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param_count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_data + 0xf) = 1;\n      pointer_var = *input_data;\n      if ((*pointer_var & 1) == 0) {\n        *pointer_var = *pointer_var | 1;\n      }\n      **input_data = **input_data & 0xfffff7ff;\n      *(undefined *)((int)input_data + 0x3d) = 0x2a;\n      *(undefined *)((int)input_data + 0x3e) = 0x20;\n      result = 0;\n      input_data[0x10] = (uint *)0x0;\n      input_data[9] = optional_param;\n      *(short *)((int)input_data + 0x2a) = (short)param_count;\n      input_data[0xb] = param_array;\n      *(undefined2 *)(input_data + 10) = *(undefined2 *)((int)input_data + 0x2a);\n      *(undefined *)(input_data + 0xf) = 0;\n      (*input_data)[1] = (*input_data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "validate_input_08004954",
                "param_1": "input_data",
                "param_2": "optional_param",
                "param_3": "param_count",
                "param_4": "param_array",
                "uVar1": "result",
                "puVar2": "pointer_var"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_parameters_080049e0",
            "code": "\nundefined4 initializeParameters_080049e0(uint **parameters)\n\n{\n  uint *currentParameter;\n  \n  if (*(char *)((int)parameters + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x28;\n  currentParameter = *parameters;\n  if ((*currentParameter & 1) == 0) {\n    *currentParameter = *currentParameter | 1;\n  }\n  **parameters = **parameters | 0x400;\n  (*parameters)[1] = (*parameters)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_parameters_080049e0",
                "param_1": "parameters",
                "puVar1": "currentParameter"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "update_parameter_value_08004a24",
            "code": "\nundefined4 updateParameterValue_08004a24(int *parameter)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)parameter + 0x3d);\n  if (*(short *)((int)parameter + 0x2a) != 0) {\n    bytePointer = (byte *)parameter[9];\n    parameter[9] = (int)(bytePointer + 1);\n    *(uint *)(*parameter + 0x10) = (uint)*bytePointer;\n    *(short *)((int)parameter + 0x2a) = *(short *)((int)parameter + 0x2a) + -1;\n    if ((*(short *)((int)parameter + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*parameter + 4) = *(uint *)(*parameter + 4) & 0xfffffbff;\n      parameter[0xc] = 0x21;\n      *(undefined *)((int)parameter + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "update_parameter_value_08004a24",
                "param_1": "parameter",
                "cVar1": "charValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "update_flag_value_08004a76",
            "code": "\nundefined4 updateFlagValue_08004a76(int *flagArray)\n\n{\n  char flagValue;\n  undefined *ptr;\n  \n  flagValue = *(char *)((int)flagArray + 0x3d);\n  if (*(short *)((int)flagArray + 0x2a) != 0) {\n    ptr = (undefined *)flagArray[9];\n    flagArray[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*flagArray + 0x10);\n    *(short *)((int)flagArray + 0x2a) = *(short *)((int)flagArray + 0x2a) + -1;\n    if ((*(short *)((int)flagArray + 0x2a) == 0) && (flagValue == '*')) {\n      *(uint *)(*flagArray + 4) = *(uint *)(*flagArray + 4) & 0xfffffbff;\n      errorCode = 0x22;\n      *(undefined *)((int)flagArray + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "update_flag_value_08004a76",
                "param_1": "flagArray",
                "cVar1": "flagValue",
                "puVar2": "ptr",
                "param_1[0xc]": "errorCode"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_params_08004ac2",
            "code": "\nundefined4 process_params_08004ac2(int *input_data,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 selected_value;\n  uint flag;\n  \n  flag = *(uint *)(*input_data + 0x18);\n  if ((flag & 0x80) == 0) {\n    selected_value = *(undefined2 *)(input_data + 3);\n  }\n  else {\n    selected_value = *(undefined2 *)(input_data + 6);\n  }\n  process_params_08004ac2_08007fa0(input_data,(*(uint *)(*input_data + 0x18) & 4) == 0,selected_value,flag,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_params_08004ac2",
                "param_1": "input_data",
                "uVar1": "selected_value",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "initialize_security_checks_08004aec",
            "code": "\nundefined4 initialize_security_checks_08004aec(uint **params)\n\n{\n  if (((check_value == (uint *)0x4) || (check_value == (uint *)0x8)) &&\n     (*(char *)(param_address + 0x3d) == '(')) {\n    check_value = (uint *)0xffff0000;\n    (*params)[1] = (*params)[1] & 0xfffff8ff;\n    (*params)[5] = 0xfffffbff;\n    **params = **params & 0xfffffbff;\n    action_value = (uint *)0x0;\n    *(undefined *)(param_address + 0x3d) = 0x20;\n    *(undefined *)(param_address + 0x3e) = 0;\n    execute_initialize_function;\n  }\n  else if (*(char *)(param_address + 0x3d) == '!') {\n    check_value = (uint *)0xffff0000;\n    action_value = (uint *)0x21;\n    *(undefined *)(param_address + 0x3d) = 0x20;\n    *(undefined *)(param_address + 0x3e) = 0;\n    (*params)[1] = (*params)[1] & 0xfffff8ff;\n    (*params)[5] = 0xfffffbff;\n    **params = **params & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*params)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "initialize_security_checks_08004aec",
                "param_1": "params",
                "param_1[0xb]": "check_value",
                "param_1[0xc]": "action_value",
                "(int)param_1": "param_address",
                "initialize_and_execute_08007ff0()": "execute_initialize_function"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_input_08004b82",
            "code": "\nundefined4 process_input_08004b82(uint **input_data)\n\n{\n  char input_char;\n  uint *data_ptr;\n  \n  input_char = *(char *)((int)input_data + 0x3d);\n  data_ptr = input_data[0xb];\n  if ((*(short *)(input_data + 10) == 0) && (input_char == '!')) {\n    if ((data_ptr == (uint *)0x4) || ((data_ptr == (uint *)0x8 || (data_ptr == (uint *)0xffff0000)))) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      **input_data = **input_data | 0x200;\n      input_data[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      if (*(char *)((int)input_data + 0x3e) == '@') {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)input_data + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n      input_data[0xc] = (uint *)0x11;\n      *(undefined *)((int)input_data + 0x3e) = 0;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((input_char == '!') || ((*(char *)((int)input_data + 0x3e) == '@' && (input_char == '\\\"')))) {\n    if (*(short *)((int)input_data + 0x2a) == 0) {\n      (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input_data + 0x3e) == '@') {\n      if (input_data[0x14] == (uint *)0x0) {\n        if (input_data[0x13] == (uint *)0x1) {\n          (*input_data)[4] = (uint)input_data[0x12] & 0xff;\n          input_data[0x14] = (uint *)((int)input_data[0x14] + 2);\n        }\n        else {\n          (*input_data)[4] = (uint)((int)input_data[0x12] << 0x10) >> 0x18;\n          input_data[0x14] = (uint *)((int)input_data[0x14] + 1);\n        }\n      }\n      else if (input_data[0x14] == (uint *)0x1) {\n        (*input_data)[4] = (uint)input_data[0x12] & 0xff;\n        input_data[0x14] = (uint *)((int)input_data[0x14] + 1);\n      }\n      else if (input_data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)input_data + 0x3d) == '\\\"') {\n          **input_data = **input_data | 0x100;\n        }\n        else if (*(char *)((int)input_data + 0x3d) == '!') {\n          data_ptr = input_data[9];\n          input_data[9] = (uint *)((int)data_ptr + 1);\n          (*input_data)[4] = (uint)*(byte *)data_ptr;\n          *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      data_ptr = input_data[9];\n      input_data[9] = (uint *)((int)data_ptr + 1);\n      (*input_data)[4] = (uint)*(byte *)data_ptr;\n      *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_input_08004b82",
                "param_1": "input_data",
                "cVar1": "input_char",
                "puVar2": "data_ptr",
                "param_1[0xb]": "input_data[0xb]",
                "param_1[0xc]": "input_data[0xc]"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_param_08004ccc",
            "code": "\nundefined4 processParam_08004ccc(uint **param)\n\n{\n  uint *tempPtr;\n  \n  tempPtr = param[0xb];\n  if (*(char *)((int)param + 0x3d) == '!') {\n    if (*(short *)((int)param + 0x2a) == 0) {\n      if (((tempPtr == (uint *)0x4) || (tempPtr == (uint *)0x8)) || (tempPtr == (uint *)0xffff0000)) {\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        **param = **param | 0x200;\n        param3Ptr = (uint *)0x0;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        param3Ptr = (uint *)0x11;\n        *(undefined *)((int)param + 0x3e) = 0;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      tempPtr = param4Ptr;\n      param4Ptr = (uint *)((int)tempPtr + 1);\n      (*param)[4] = (uint)*(byte *)tempPtr;\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_param_08004ccc",
                "param_1": "param",
                "puVar1": "tempPtr",
                "param_1[0xc]": "param3Ptr",
                "param_1[9]": "param4Ptr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "update_flags_08004d6c",
            "code": "\nundefined4 updateFlags_08004d6c(uint **param)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)param + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)param + 0x2a) < 4) {\n      if (*(ushort *)((int)param + 0x2a) - 2 < 2) {\n        if (paramB == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n          **param = **param | 0x800;\n        }\n        (*param)[1] = (*param)[1] & 0xfffffbff;\n      }\n      else {\n        if (paramB == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n        }\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        tempPtr = param9;\n        param9 = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*param)[4];\n        *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        param[0xc] = (uint *)0x0;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      tempPtr = param9;\n      param9 = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "update_flags_08004d6c",
                "param_1": "param",
                "puVar1": "tempPtr",
                "param_1[0xb]": "paramB",
                "param_1[9]": "param9"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "update_data_and_state_08004e3c",
            "code": "\nundefined4 updateDataAndState_08004e3c(uint **data)\n\n{\n  uint *tempValue;\n  \n  tempValue = data[0xb];\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((tempValue == (uint *)0x4) || (tempValue == (uint *)0x8)) || (tempValue == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    tempValue = data[9];\n    data[9] = (uint *)((int)tempValue + 1);\n    *(char *)tempValue = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((tempValue == (uint *)0x4) || (tempValue == (uint *)0x8)) || (tempValue == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (tempValue == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    tempValue = data[9];\n    data[9] = (uint *)((int)tempValue + 1);\n    *(char *)tempValue = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    tempValue = data[9];\n    data[9] = (uint *)((int)tempValue + 1);\n    *(char *)tempValue = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    tempValue = data[9];\n    data[9] = (uint *)((int)tempValue + 1);\n    *(char *)tempValue = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "update_data_and_state_08004e3c",
                "param_1": "data",
                "puVar1": "tempValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_and_execute_08004f3c",
            "code": "\nvoid initialize_and_execute_08004f3c(uint **parameters)\n\n{\n  int update_result;\n  uint *temp_ptr;\n  uint *temp_ptr2;\n  \n  if (*(byte *)((int)parameters + 0x3d) - 0x29 < 2) {\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)parameters + 0x3d) != '`') && (((*parameters)[1] & 0x800) == 0)) {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n    }\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n  }\n  **parameters = **parameters & 0xfffff7ff;\n  temp_ptr2 = *parameters;\n  if ((temp_ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)parameters + 0x3d) == '`') {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0x10] = (uint *)0x0;\n      if ((temp_ptr2[5] & 0x40) != 0) {\n        temp_ptr = parameters[9];\n        parameters[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)temp_ptr2[4];\n      }\n      **parameters = **parameters & 0xfffffffe;\n      FUNC_08004f3a(parameters);\n    }\n    else {\n      if ((temp_ptr2[5] & 0x40) != 0) {\n        temp_ptr = parameters[9];\n        parameters[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)temp_ptr2[4];\n      }\n      check_and_initialize_parameters_08008020(parameters);\n    }\n  }\n  else {\n    temp_ptr2[1] = temp_ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)parameters[0xd] + 0x21) == '\\x01') {\n      parameters[0xe][0xd] = (uint)&LAB_080053cc_1;\n      update_result = update_config_08004050(parameters[0xe]);\n      if (update_result != 0) {\n        if (((*parameters)[5] & 0x40) != 0) {\n          temp_ptr2 = parameters[9];\n          parameters[9] = (uint *)((int)temp_ptr2 + 1);\n          *(char *)temp_ptr2 = (char)(*parameters)[4];\n        }\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xe][0xd])();\n      }\n    }\n    else {\n      parameters[0xd][0xd] = (uint)&LAB_080053cc_1;\n      update_result = update_config_08004050(parameters[0xd]);\n      if (update_result != 0) {\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)parameters[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)parameters + 0x3d) == '(') && (((uint)parameters[0x10] & 4) != 0)) {\n    parameters[0xb] = (uint *)0xffff0000;\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    initialize_and_execute_08004f3c_08007ff0(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_and_execute_08004f3c",
                "param_1": "parameters",
                "iVar1": "update_result",
                "puVar2": "temp_ptr",
                "puVar3": "temp_ptr2"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_data_08005084",
            "code": "\nundefined4 processData_08005084(uint **data)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  pointer1 = *data;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = data[9];\n      data[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      pointer1 = data[9];\n      data[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      initialize_and_execute_08007ff0();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    initialize_and_execute_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_data_08005084",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_function_08005188",
            "code": "\nvoid processFunction_08005188(int *inputArray)\n\n{\n  int arrayValue;\n  uint flagValue1;\n  uint flagValue2;\n  uint flagValue3;\n  \n  arrayValue = *inputArray;\n  flagValue3 = *(uint *)(arrayValue + 0x18);\n  flagValue1 = *(uint *)(arrayValue + 0x14);\n  flagValue2 = *(uint *)(arrayValue + 4);\n  if ((*(char *)((int)inputArray + 0x3e) == '\\x10') || (*(char *)((int)inputArray + 0x3e) == '@')) {\n    if (((flagValue1 & 0x10001) == 0) || ((flagValue2 & 0x200) == 0)) {\n      if (((flagValue1 & 0x10008) == 0) || ((flagValue2 & 0x200) == 0)) {\n        if (((flagValue1 & 0x10002) != 0) && ((flagValue2 & 0x200) != 0)) {\n          setFlags(inputArray);\n        }\n      }\n      else {\n        setByteValue(inputArray);\n      }\n    }\n    else {\n      updateFlagValue(inputArray);\n    }\n    if ((flagValue3 & 0x100004) == 0) {\n      if ((((flagValue1 & 0x10040) != 0) && ((flagValue2 & 0x400) != 0)) && ((flagValue1 & 0x10004) == 0)) {\n        updateFlags(inputArray);\n        return;\n      }\n      if (((flagValue1 & 0x10004) != 0) && ((flagValue2 & 0x200) != 0)) {\n        updateDataAndState(inputArray);\n        return;\n      }\n    }\n    else {\n      if ((((flagValue1 & 0x10080) != 0) && ((flagValue2 & 0x400) != 0)) && ((flagValue1 & 0x10004) == 0)) {\n        processInput(inputArray);\n        return;\n      }\n      if (((flagValue1 & 0x10004) != 0) && ((flagValue2 & 0x200) != 0)) {\n        processParam(inputArray);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flagValue1 & 0x10002) != 0) && ((flagValue2 & 0x200) != 0)) {\n      processParams();\n      return;\n    }\n    if (((flagValue1 & 0x10010) != 0) && ((flagValue2 & 0x200) != 0)) {\n      processData(inputArray);\n      return;\n    }\n    if ((flagValue3 & 0x100004) == 0) {\n      if ((((flagValue1 & 0x10040) != 0) && ((flagValue2 & 0x400) != 0)) && ((flagValue1 & 0x10004) == 0)) {\n        updateFlagValue2(inputArray);\n        return;\n      }\n      if (((flagValue1 & 0x10004) != 0) && ((flagValue2 & 0x200) != 0)) {\n        updateParamAndDecrease(inputArray);\n      }\n    }\n    else {\n      if ((((flagValue1 & 0x10080) != 0) && ((flagValue2 & 0x400) != 0)) && ((flagValue1 & 0x10004) == 0)) {\n        updateParameterValue(inputArray);\n        return;\n      }\n      if (((flagValue1 & 0x10004) != 0) && ((flagValue2 & 0x200) != 0)) {\n        updateBufferData(inputArray);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_function_08005188",
                "param_1": "inputArray",
                "iVar1": "arrayValue",
                "uVar2": "flagValue1",
                "uVar3": "flagValue2",
                "uVar4": "flagValue3",
                "set_flags_080043a2": "setFlags",
                "set_byte_value_08004396": "setByteValue",
                "update_flag_value_0800430c": "updateFlagValue",
                "update_flags_08004d6c": "updateFlags",
                "update_data_and_state_08004e3c": "updateDataAndState",
                "process_input_08004b82": "processInput",
                "process_param_08004ccc": "processParam",
                "process_params_08004ac2": "processParams",
                "process_data_08005084": "processData",
                "update_flag_value_08004a76": "updateFlagValue2",
                "update_param_and_decrease_0800459c": "updateParamAndDecrease",
                "update_parameter_value_08004a24": "updateParameterValue",
                "update_buffer_data_0800457c": "updateBufferData"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "update_security_settings_080052f0",
            "code": "\nvoid updateSecuritySettings_080052f0(uint **param)\n\n{\n  char character;\n  uint *pointer;\n  uint value1;\n  uint value2;\n  \n  pointer = *param;\n  value1 = pointer[5];\n  value2 = pointer[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n    **param = **param | 0x8000;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 2);\n    (*param)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)param + 0x3d);\n    if (((*(char *)((int)param + 0x3e) == ' ') && (*(short *)((int)param + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (param[0xc] == (uint *)0x21)))))) {\n      initialize_security_checks_08004aec(param);\n    }\n    else {\n      param[0x10] = (uint *)((uint)param[0x10] | 4);\n      if (*(char *)((int)param + 0x3e) == '\\x10') {\n        **param = **param | 0x200;\n      }\n      (*param)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 8);\n    (*param)[5] = 0xfffff7ff;\n  }\n  if (param[0x10] != (uint *)0x0) {\n    initialize_and_execute_08004f3c(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "update_security_settings_080052f0",
                "param_1": "param",
                "cVar1": "character",
                "puVar2": "pointer",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_from_address_0800542a",
            "code": "\nundefined getByteFromAddress_0800542a(int address)\n\n{\n  return *(undefined *)(address + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_from_address_0800542a",
                "param_1": "address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_value_from_offset_08005430",
            "code": "\nundefined4 get_value_from_offset_08005430(int offset)\n\n{\n  return *(undefined4 *)(offset + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_value_from_offset_08005430",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "calculate_delay_08005434",
            "code": "\nvoid calculateDelay_08005434(int inputValue)\n\n{\n  bool bVar1;\n  int delayCount;\n  \n  delayCount = inputValue * (DAT_20000018 / 8000);\n  do {\n    bVar1 = delayCount != 0;\n    delayCount = delayCount + -1;\n  } while (bVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "calculate_delay_08005434",
                "param_1": "inputValue",
                "local_4": "delayCount"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "validate_and_delay_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 validate_and_delay_08005460(uint *flags)\n\n{\n  int prev_time_val;\n  int curr_time_val;\n  undefined4 result;\n  uint param_1_val;\n  bool integer_flag;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      param_1_val = flags[1];\n      if (param_1_val == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (param_1_val == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (param_1_val == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        prev_time_val = get_time_value();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          curr_time_val = get_time_value();\n          if (100 < (uint)(curr_time_val - prev_time_val)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        prev_time_val = get_time_value();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          curr_time_val = get_time_value();\n          if (100 < (uint)(curr_time_val - prev_time_val)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      prev_time_val = get_time_value();\n      while ((_DAT_40021000 & 2) != 0) {\n        curr_time_val = get_time_value();\n        if (2 < (uint)(curr_time_val - prev_time_val)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      prev_time_val = get_time_value();\n      while ((_DAT_40021000 & 2) == 0) {\n        curr_time_val = get_time_value();\n        if (2 < (uint)(curr_time_val - prev_time_val)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      prev_time_val = get_time_value();\n      while ((_DAT_40021024 & 2) != 0) {\n        curr_time_val = get_time_value();\n        if (2 < (uint)(curr_time_val - prev_time_val)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      prev_time_val = get_time_value();\n      while ((_DAT_40021024 & 2) == 0) {\n        curr_time_val = get_time_value();\n        if (2 < (uint)(curr_time_val - prev_time_val)) {\n          return 3;\n        }\n      }\n      calculate_delay(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    integer_flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (integer_flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      prev_time_val = get_time_value();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        curr_time_val = get_time_value();\n        if (100 < (uint)(curr_time_val - prev_time_val)) {\n          return 3;\n        }\n      }\n    }\n    param_1_val = flags[3];\n    if (param_1_val == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (param_1_val == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (param_1_val == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      prev_time_val = get_time_value();\n      while ((_DAT_40021020 & 2) != 0) {\n        curr_time_val = get_time_value();\n        if (5000 < (uint)(curr_time_val - prev_time_val)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      prev_time_val = get_time_value();\n      while ((_DAT_40021020 & 2) == 0) {\n        curr_time_val = get_time_value();\n        if (5000 < (uint)(curr_time_val - prev_time_val)) {\n          return 3;\n        }\n      }\n    }\n    if (integer_flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    prev_time_val = get_time_value();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        prev_time_val = get_time_value();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          curr_time_val = get_time_value();\n        } while ((uint)(curr_time_val - prev_time_val) < 3);\n        return 3;\n      }\n      curr_time_val = get_time_value();\n    } while ((uint)(curr_time_val - prev_time_val) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    prev_time_val = get_time_value();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      curr_time_val = get_time_value();\n    } while ((uint)(curr_time_val - prev_time_val) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "validate_and_delay_08005460",
                "param_1": "flags",
                "iVar1": "prev_time_val",
                "iVar2": "curr_time_val",
                "uVar3": "result",
                "uVar4": "param_1_val",
                "bVar5": "integer_flag",
                "get_global_variable_value_08003760": "get_time_value",
                "calculate_delay_08005434": "calculate_delay"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_delay_08005840",
            "code": "\n\n\nuint calculateDelay_08005840(void)\n\n{\n  uint uVar1;\n  undefined2 result;\n  undefined4 offset;\n  undefined4 multiplier;\n  undefined4 dividend;\n  undefined4 constant;\n  \n  constant = 0x10100f0e;\n  dividend = 0xd0c0b0a;\n  multiplier = 0x9080706;\n  offset = 0x5040302;\n  result = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&offset + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&result - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_delay_08005840",
                "local_1c": "result",
                "uStack_18": "offset",
                "uStack_14": "multiplier",
                "uStack_10": "dividend",
                "uStack_c": "constant"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "update_configuration_080058ac",
            "code": "\n\n\nundefined4 updateConfiguration_080058ac(uint *configData,uint configSize)\n\n{\n  int iVar1;\n  int iVar2;\n  uint tempVariable;\n  \n  if ((_DAT_40022000 & 7) < configSize) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | configSize;\n    if (configSize != (configSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*configData & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configData[2];\n  }\n  if ((*configData & 1) != 0) {\n    tempVariable = configData[1];\n    if (tempVariable == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((tempVariable != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = tempVariable | _DAT_40021004 & 0xfffffffc;\n    iVar1 = getGlobalVariableValue();\n    if (configData[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = getGlobalVariableValue();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (configData[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = getGlobalVariableValue();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = getGlobalVariableValue();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (configSize < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | configSize;\n    if (configSize != (configSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*configData & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configData[3];\n  }\n  if ((*configData & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configData[4] << 3;\n  }\n  tempVariable = calculateDelay();\n  DAT_20000018 = tempVariable >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validate_and_update_param_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "update_configuration_080058ac",
                "param_1": "configData",
                "param_2": "configSize",
                "uVar3": "tempVariable",
                "get_global_variable_value_08003760": "getGlobalVariableValue",
                "calculate_delay_08005840": "calculateDelay"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "validate_and_update_delay_080058d2",
            "code": "\n\n\nundefined4 validate_and_update_delay_080058d2(uint *param_1,uint value)\n\n{\n  int current_value;\n  int new_value;\n  uint delay;\n  \n  if ((*param_1 & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | param_1[2];\n  }\n  if ((*param_1 & 1) != 0) {\n    delay = param_1[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    current_value = get_current_value();\n    if (param_1[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        new_value = get_current_value();\n        if (5000 < (uint)(new_value - current_value)) {\n          return 3;\n        }\n      }\n    }\n    else if (param_1[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        new_value = get_current_value();\n        if (5000 < (uint)(new_value - current_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        new_value = get_current_value();\n        if (5000 < (uint)(new_value - current_value)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*param_1 & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | param_1[3];\n  }\n  if ((*param_1 & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | param_1[4] << 3;\n  }\n  delay = calculate_delay();\n  DAT_20000018 = delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validate_and_update_parameter(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "validate_and_update_delay_080058d2",
                "param_2": "value",
                "iVar1": "current_value",
                "iVar2": "new_value",
                "uVar3": "delay",
                "get_global_variable_value_08003760": "get_current_value",
                "calculate_delay_08005840": "calculate_delay",
                "validate_and_update_param_080036d8": "validate_and_update_parameter"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_data_address_08005a1c",
            "code": "\nundefined4 get_data_address_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_data_address_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_shifted_data_08005a28",
            "code": "\n\n\nuint get_shifted_data_08005a28(void)\n\n{\n  uint data_address;\n  \n  data_address = get_data_address_08005a1c();\n  return data_address >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_shifted_data_08005a28",
                "uVar1": "data_address"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "shifted_data_08005a48",
            "code": "\n\n\nuint shiftedData_08005a48(void)\n\n{\n  uint dataAddress;\n  \n  dataAddress = getDataAddress();\n  return dataAddress >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "shifted_data_08005a48",
                "uVar1": "dataAddress",
                "get_data_address_08005a1c": "getDataAddress"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_parameters_08005a68",
            "code": "\n\n\nvoid initializeParameters_08005a68(undefined4 *outputValues,uint *result)\n\n{\n  *outputValues = 0xf;\n  outputValues[1] = _DAT_40021004 & 3;\n  outputValues[2] = _DAT_40021004 & 0xf0;\n  outputValues[3] = _DAT_40021004 & 0x700;\n  outputValues[4] = _DAT_40021004 >> 3 & 0x700;\n  *result = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_parameters_08005a68",
                "param_1": "outputValues",
                "param_2": "result"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_flags_and_registers_08005aa4",
            "code": "\n\n\nundefined4 updateFlagsAndRegisters_08005aa4(uint *flags)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  int iVar3;\n  int iVar4;\n  bool bVar5;\n  \n  if ((*flags & 1) != 0) {\n    bVar5 = (_DAT_4002101c & 0x10000000) == 0;\n    if (bVar5) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      iVar3 = getGlobalVariableValue();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        iVar4 = getGlobalVariableValue();\n        if (100 < (uint)(iVar4 - iVar3)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (flags[1] & 0x300))) {\n      tempVar2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempVar1 = _DAT_40021020 & 1;\n      _DAT_40021020 = tempVar2;\n      if (tempVar1 != 0) {\n        iVar3 = getGlobalVariableValue();\n        while ((_DAT_40021020 & 2) == 0) {\n          iVar4 = getGlobalVariableValue();\n          if (5000 < (uint)(iVar4 - iVar3)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | flags[1];\n    if (bVar5) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | flags[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_flags_and_registers_08005aa4",
                "param_1": "flags",
                "get_global_variable_value_08003760": "getGlobalVariableValue",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_parameter_08005bb8",
            "code": "\n\n\nuint calculateParameter_08005bb8(int inputValue)\n\n{\n  uint result;\n  undefined2 shiftValue;\n  undefined4 multiplier;\n  undefined4 divider;\n  undefined4 value1;\n  undefined4 value2;\n  \n  value2 = 0x10100f0e;\n  value1 = 0xd0c0b0a;\n  divider = 0x9080706;\n  multiplier = 0x5040302;\n  shiftValue = 0x201;\n  if (inputValue == 2) {\n    result = shifted_data_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (inputValue == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&shiftValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (inputValue == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_parameter_08005bb8",
                "param_1": "inputValue",
                "uVar1": "result",
                "local_24": "shiftValue",
                "uStack_20": "multiplier",
                "uStack_1c": "divider",
                "uStack_18": "value1",
                "uStack_14": "value2"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "check_and_execute_callback_08005cb4",
            "code": "\n\n\nvoid checkAndExecuteCallback_08005cb4(uint **param)\n\n{\n  if (((**param & 2) != 0) && (((*param)[1] & 2) != 0)) {\n    execute_callback_080073c0();\n    (*param)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)param + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "check_and_execute_callback_08005cb4",
                "param_1": "param"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_flags_and_values_08005cec",
            "code": "\nvoid updateFlagsAndValues_08005cec(int baseAddress,uint *paramArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(baseAddress + 4);\n  updatedValue3 = *paramArray;\n  updatedValue1 = *(uint *)(baseAddress + 0x20) & 0xfffffffd | paramArray[2];\n  if (baseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | paramArray[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | paramArray[5] | paramArray[6];\n  }\n  *(uint *)(baseAddress + 4) = updatedValue2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(baseAddress + 0x34) = paramArray[1];\n  *(uint *)(baseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_flags_and_values_08005cec",
                "param_1": "baseAddress",
                "param_2": "paramArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_params_08005d48",
            "code": "\nvoid updateParams_08005d48(int address,uint *values)\n\n{\n  uint updatedParam1;\n  uint updatedParam2;\n  uint originalParam1;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  updatedParam2 = *(uint *)(address + 4);\n  originalParam1 = *values;\n  updatedParam1 = *(uint *)(address + 0x20) & 0xfffffdff | values[2] << 8;\n  if (address == 0x40012c00) {\n    updatedParam1 = (updatedParam1 & 0xfffff7ff | values[3] << 8) & 0xfffffbff;\n    updatedParam2 = updatedParam2 & 0xffffcfff | values[5] << 4 | values[6] << 4;\n  }\n  *(uint *)(address + 4) = updatedParam2;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffffff8c | originalParam1;\n  *(uint *)(address + 0x3c) = values[1];\n  *(uint *)(address + 0x20) = updatedParam1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_params_08005d48",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updatedParam1",
                "uVar2": "updatedParam2",
                "uVar3": "originalParam1"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "set_flags_and_update_values_08005dac",
            "code": "\nvoid setFlagsAndUpdateValues_08005dac(int address,int *values)\n\n{\n  uint flag1;\n  int value1;\n  int value2;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffefff;\n  flag1 = *(uint *)(address + 4);\n  value1 = *values;\n  value2 = values[2];\n  if (address == 0x40012c00) {\n    flag1 = flag1 & 0xffffbfff | values[5] << 6;\n  }\n  *(uint *)(address + 4) = flag1;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(address + 0x40) = values[1];\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "set_flags_and_update_values_08005dac",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "flag1",
                "iVar2": "value1",
                "iVar3": "value2"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "initialize_memory_08005df4",
            "code": "\nvoid initialize_memory_08005df4(uint **memory_ptr)\n\n{\n  uint *pointer_to_memory_ptr;\n  \n  *(undefined *)((int)memory_ptr + 0x3d) = 2;\n  pointer_to_memory_ptr = *memory_ptr;\n  if ((pointer_to_memory_ptr[8] & 0x1111) == 0) {\n    if ((pointer_to_memory_ptr[8] & 0x444) == 0) {\n      *pointer_to_memory_ptr = *pointer_to_memory_ptr & 0xfffffffe;\n    }\n  }\n  initialize_memory_08005df4_permissions(memory_ptr);\n  *(undefined *)((int)memory_ptr + 0x3d) = 0;\n  *(undefined *)(memory_ptr + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "initialize_memory_08005df4",
                "param_1": "memory_ptr",
                "puVar1": "pointer_to_memory_ptr",
                "initialize_memory_permissions_08007710": "initialize_memory_permissions"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "initialize_and_check_permissions_08005e2e",
            "code": "\nvoid initializeAndCheckPermissions_08005e2e(uint **parameter)\n\n{\n  uint *pointerToParameter;\n  \n  *(undefined *)((int)parameter + 0x3d) = 2;\n  pointerToParameter = *parameter;\n  if ((pointerToParameter[8] & 0x1111) == 0) {\n    if ((pointerToParameter[8] & 0x444) == 0) {\n      *pointerToParameter = *pointerToParameter & 0xfffffffe;\n    }\n  }\n  initializeMemoryPermissions(parameter);\n  *(undefined *)((int)parameter + 0x3d) = 0;\n  *(undefined *)(parameter + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "initialize_and_check_permissions_08005e2e",
                "param_1": "parameter",
                "puVar1": "pointerToParameter",
                "initialize_memory_permissions_08007110": "initializeMemoryPermissions"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "execute_callbacks_08005e6e",
            "code": "\nvoid executeCallbacks_08005e6e(int *ptrParam)\n\n{\n  int ptrVar1;\n  \n  ptrVar1 = *ptrParam;\n  if (((*(uint *)(ptrVar1 + 0x10) & 2) != 0) && ((*(uint *)(ptrVar1 + 0xc) & 2) != 0)) {\n    *(undefined4 *)(ptrVar1 + 0x10) = 0xfffffffd;\n    *(undefined *)(ptrParam + 7) = 1;\n    if ((*(uint *)(*ptrParam + 0x18) & 3) == 0) {\n      execute_callback_if_condition_met_0800771c();\n      FUNC_08005e6a(ptrParam);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(ptrParam + 7) = 0;\n  }\n  ptrVar1 = *ptrParam;\n  if (((*(uint *)(ptrVar1 + 0x10) & 4) != 0) && ((*(uint *)(ptrVar1 + 0xc) & 4) != 0)) {\n    *(undefined4 *)(ptrVar1 + 0x10) = 0xfffffffb;\n    *(undefined *)(ptrParam + 7) = 2;\n    if ((*(uint *)(*ptrParam + 0x18) & 0x300) == 0) {\n      execute_callback_if_condition_met_0800771c(ptrParam);\n      FUNC_08005e6a(ptrParam);\n    }\n    else {\n      FUNC_08005e68(ptrParam);\n    }\n    *(undefined *)(ptrParam + 7) = 0;\n  }\n  ptrVar1 = *ptrParam;\n  if (((*(uint *)(ptrVar1 + 0x10) & 8) != 0) && ((*(uint *)(ptrVar1 + 0xc) & 8) != 0)) {\n    *(undefined4 *)(ptrVar1 + 0x10) = 0xfffffff7;\n    *(undefined *)(ptrParam + 7) = 4;\n    if ((*(uint *)(*ptrParam + 0x1c) & 3) == 0) {\n      execute_callback_if_condition_met_0800771c(ptrParam);\n      FUNC_08005e6a(ptrParam);\n    }\n    else {\n      FUNC_08005e68(ptrParam);\n    }\n    *(undefined *)(ptrParam + 7) = 0;\n  }\n  ptrVar1 = *ptrParam;\n  if (((*(uint *)(ptrVar1 + 0x10) & 0x10) != 0) && ((*(uint *)(ptrVar1 + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(ptrVar1 + 0x10) = 0xffffffef;\n    *(undefined *)(ptrParam + 7) = 8;\n    if ((*(uint *)(*ptrParam + 0x1c) & 0x300) == 0) {\n      execute_callback_if_condition_met_0800771c(ptrParam);\n      FUNC_08005e6a(ptrParam);\n    }\n    else {\n      FUNC_08005e68(ptrParam);\n    }\n    *(undefined *)(ptrParam + 7) = 0;\n  }\n  ptrVar1 = *ptrParam;\n  if (((*(uint *)(ptrVar1 + 0x10) & 1) != 0) && ((*(uint *)(ptrVar1 + 0xc) & 1) != 0)) {\n    *(undefined4 *)(ptrVar1 + 0x10) = 0xfffffffe;\n    execute_subroutine_08007736(ptrParam);\n  }\n  ptrVar1 = *ptrParam;\n  if (((*(uint *)(ptrVar1 + 0x10) & 0x80) != 0) && ((*(uint *)(ptrVar1 + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(ptrVar1 + 0x10) = 0xffffff7f;\n    FUNC_080064ae(ptrParam);\n  }\n  ptrVar1 = *ptrParam;\n  if (((*(uint *)(ptrVar1 + 0x10) & 0x40) != 0) && ((*(uint *)(ptrVar1 + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(ptrVar1 + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(ptrParam);\n  }\n  ptrVar1 = *ptrParam;\n  if (((*(uint *)(ptrVar1 + 0x10) & 0x20) != 0) && ((*(uint *)(ptrVar1 + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(ptrVar1 + 0x10) = 0xffffffdf;\n    FUNC_080064ac(ptrParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "execute_callbacks_08005e6e",
                "param_1": "ptrParam",
                "iVar1": "ptrVar1"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_parameter_08005fe8",
            "code": "\nvoid updateParameter_08005fe8(uint *inputParam,uint *updateParam)\n\n{\n  uint tempVar1;\n  \n  tempVar1 = *inputParam;\n  if ((((inputParam == (uint *)0x40012c00) || (inputParam == (uint *)0x40000000)) ||\n      (inputParam == (uint *)0x40000400)) || (inputParam == (uint *)0x40000800)) {\n    tempVar1 = tempVar1 & 0xffffff8f | updateParam[1];\n  }\n  if (((inputParam == (uint *)0x40012c00) || (inputParam == (uint *)0x40000000)) ||\n     ((inputParam == (uint *)0x40000400 || (inputParam == (uint *)0x40000800)))) {\n    tempVar1 = tempVar1 & 0xfffffcff | updateParam[3];\n  }\n  *inputParam = tempVar1 & 0xffffff7f | updateParam[5];\n  inputParam[0xb] = updateParam[2];\n  inputParam[10] = *updateParam;\n  if (inputParam == (uint *)0x40012c00) {\n    uRam40012c30 = updateParam[4];\n  }\n  inputParam[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_parameter_08005fe8",
                "param_1": "inputParam",
                "param_2": "updateParam",
                "uVar1": "tempVar1"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "update_parameter_status_08006060",
            "code": "\nundefined4 update_parameter_status_08006060(undefined4 *parameters)\n\n{\n  if (parameters != (undefined4 *)0x0) {\n    if (*(char *)((int)parameters + 0x3d) == '\\0') {\n      *(undefined *)(parameters + 0xf) = 0;\n      update_flags_and_data_ptr_08007708();\n    }\n    *(undefined *)((int)parameters + 0x3d) = 2;\n    update_parameter_08005fe8(*parameters,parameters + 1);\n    *(undefined *)((int)parameters + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "update_parameter_status_08006060",
                "param_1": "parameters"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_device_settings_08006092",
            "code": "\nundefined4 initialize_device_settings_08006092(undefined4 *device_settings)\n\n{\n  if (device_settings != (undefined4 *)0x0) {\n    if (*(char *)((int)device_settings + 0x3d) == '\\0') {\n      *(undefined *)(device_settings + 0xf) = 0;\n      configure_device();\n    }\n    *(undefined *)((int)device_settings + 0x3d) = 2;\n    update_parameter(*device_settings,device_settings + 1);\n    *(undefined *)((int)device_settings + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_device_settings_08006092",
                "param_1": "device_settings",
                "configure_device_08006e68": "configure_device",
                "update_parameter_08005fe8": "update_parameter"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_data_080060c4",
            "code": "\nvoid updateData_080060c4(int dataAddress,int *inputParams)\n\n{\n  uint modifiedBits;\n  uint modifiedValue;\n  int inputValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffffef;\n  modifiedValue = *(uint *)(dataAddress + 4);\n  inputValue = *inputParams;\n  modifiedBits = *(uint *)(dataAddress + 0x20) & 0xffffffdf | inputParams[2] << 4;\n  if (dataAddress == 0x40012c00) {\n    modifiedBits = (modifiedBits & 0xffffff7f | inputParams[3] << 4) & 0xffffffbf;\n    modifiedValue = modifiedValue & 0xfffff3ff | inputParams[5] << 2 | inputParams[6] << 2;\n  }\n  *(uint *)(dataAddress + 4) = modifiedValue;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(dataAddress + 0x38) = inputParams[1];\n  *(uint *)(dataAddress + 0x20) = modifiedBits;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_data_080060c4",
                "param_1": "dataAddress",
                "param_2": "inputParams",
                "uVar1": "modifiedBits",
                "uVar2": "modifiedValue",
                "iVar3": "inputValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "update_function_08006128",
            "code": "\nundefined4 update_function_08006128(undefined4 *function_data,undefined4 data_flag,undefined4 update_code)\n\n{\n  if (*(char *)(function_data + 0xf) != '\\x01') {\n    *(undefined *)(function_data + 0xf) = 1;\n    *(undefined *)((int)function_data + 0x3d) = 2;\n    switch(update_code) {\n    case 0:\n      update_flags_and_values_08005cec(*function_data);\n      break;\n    case 4:\n      update_data_080060c4(*function_data);\n      break;\n    case 8:\n      update_params_08005d48(*function_data);\n      break;\n    case 0xc:\n      set_flags_and_update_values_08005dac(*function_data);\n    }\n    *(undefined *)((int)function_data + 0x3d) = 1;\n    *(undefined *)(function_data + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "update_function_08006128",
                "param_1": "function_data",
                "param_2": "data_flag",
                "param_3": "update_code",
                "switch(param_3)": "switch(update_code)"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "update_function_status_08006186",
            "code": "\nundefined4 updateFunctionStatus_08006186(int *functionData,int binaryData,undefined4 caseValue)\n\n{\n  if (*(char *)(functionData + 0xf) != '\\x01') {\n    *(undefined *)(functionData + 0xf) = 1;\n    *(undefined *)((int)functionData + 0x3d) = 2;\n    switch(caseValue) {\n    case 0:\n      updateFlagsAndValues(*functionData);\n      *(uint *)(*functionData + 0x18) = *(uint *)(*functionData + 0x18) | 8;\n      *(uint *)(*functionData + 0x18) = *(uint *)(*functionData + 0x18) & 0xfffffffb;\n      *(uint *)(*functionData + 0x18) = *(uint *)(*functionData + 0x18) | *(uint *)(binaryData + 0x10);\n      break;\n    case 4:\n      updateData(*functionData);\n      *(uint *)(*functionData + 0x18) = *(uint *)(*functionData + 0x18) | 0x800;\n      *(uint *)(*functionData + 0x18) = *(uint *)(*functionData + 0x18) & 0xfffffbff;\n      *(uint *)(*functionData + 0x18) = *(uint *)(*functionData + 0x18) | *(int *)(binaryData + 0x10) << 8;\n      break;\n    case 8:\n      updateParams(*functionData);\n      *(uint *)(*functionData + 0x1c) = *(uint *)(*functionData + 0x1c) | 8;\n      *(uint *)(*functionData + 0x1c) = *(uint *)(*functionData + 0x1c) & 0xfffffffb;\n      *(uint *)(*functionData + 0x1c) = *(uint *)(*functionData + 0x1c) | *(uint *)(binaryData + 0x10);\n      break;\n    case 0xc:\n      setFlagsAndUpdateValues(*functionData);\n      *(uint *)(*functionData + 0x1c) = *(uint *)(*functionData + 0x1c) | 0x800;\n      *(uint *)(*functionData + 0x1c) = *(uint *)(*functionData + 0x1c) & 0xfffffbff;\n      *(uint *)(*functionData + 0x1c) = *(uint *)(*functionData + 0x1c) | *(int *)(binaryData + 0x10) << 8;\n    }\n    *(undefined *)((int)functionData + 0x3d) = 1;\n    *(undefined *)(functionData + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "update_function_status_08006186",
                "param_1": "functionData",
                "param_2": "binaryData",
                "param_3": "caseValue",
                "update_flags_and_values_08005cec": "updateFlagsAndValues",
                "update_data_080060c4": "updateData",
                "update_params_08005d48": "updateParams",
                "set_flags_and_update_values_08005dac": "setFlagsAndUpdateValues"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bitwise_value_08006262",
            "code": "\nvoid updateBitwiseValue_08006262(int ptrInput,uint bitPosition,int value)\n\n{\n  *(uint *)(ptrInput + 0x20) = *(uint *)(ptrInput + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(ptrInput + 0x20) = *(uint *)(ptrInput + 0x20) | value << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bitwise_value_08006262",
                "param_1": "ptrInput",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "set_bitwise_value_08006280",
            "code": "\nundefined4 setBitwiseValue_08006280(uint **data,undefined4 value)\n\n{\n  switch(value) {\n  case 0:\n    (*data)[3] = (*data)[3] | 2;\n    break;\n  case 4:\n    (*data)[3] = (*data)[3] | 4;\n    break;\n  case 8:\n    (*data)[3] = (*data)[3] | 8;\n    break;\n  case 0xc:\n    (*data)[3] = (*data)[3] | 0x10;\n  }\n  update_bitwise_value_08006262(*data,value,1);\n  if (*data == (uint *)0x40012c00) {\n    ram_40012c44 = ram_40012c44 | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "set_bitwise_value_08006280",
                "param_1": "data",
                "param_2": "value",
                "uRam40012c44": "ram_40012c44"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_bitwise_value_080062f4",
            "code": "\nundefined4 updateBitwiseValue_080062f4(uint **bitwiseValue,undefined4 bitPosition)\n\n{\n  uint *bitwiseValuePtr;\n  \n  switch(bitPosition) {\n  case 0:\n    (*bitwiseValue)[3] = (*bitwiseValue)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*bitwiseValue)[3] = (*bitwiseValue)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*bitwiseValue)[3] = (*bitwiseValue)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*bitwiseValue)[3] = (*bitwiseValue)[3] & 0xffffffef;\n  }\n  update_bitwise_value_08006262(*bitwiseValue,bitPosition,0);\n  if (((*bitwiseValue == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  bitwiseValuePtr = *bitwiseValue;\n  if (((bitwiseValuePtr[8] & 0x1111) == 0) && ((bitwiseValuePtr[8] & 0x444) == 0)) {\n    *bitwiseValuePtr = *bitwiseValuePtr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_bitwise_value_080062f4",
                "param_1": "bitwiseValue",
                "param_2": "bitPosition",
                "puVar1": "bitwiseValuePtr"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "update_bitwise_value_08006390",
            "code": "\nundefined4 update_bitwise_value_08006390(uint **pointer_to_uint,undefined4 value)\n\n{\n  update_bitwise_value_08006390_08006262(*pointer_to_uint,value,1);\n  if (*pointer_to_uint == (uint *)0x40012c00) {\n    memory_location = memory_location | 0x8000;\n  }\n  **pointer_to_uint = **pointer_to_uint | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "update_bitwise_value_08006390",
                "param_1": "pointer_to_uint",
                "param_2": "value",
                "uRam40012c44": "memory_location"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_bitwise_values_080063c0",
            "code": "\nundefined4 update_bitwise_values_080063c0(uint **ptr_array,undefined4 value)\n\n{\n  uint *ptr_value;\n  \n  update_bitwise_value_08006262(*ptr_array,value,0);\n  if (((*ptr_array == (uint *)0x40012c00) && ((bitwise_value_1 & 0x1111) == 0)) &&\n     ((bitwise_value_1 & 0x444) == 0)) {\n    bitwise_value_2 = bitwise_value_2 & 0xffff7fff;\n  }\n  ptr_value = *ptr_array;\n  if (((ptr_value[8] & 0x1111) == 0) && ((ptr_value[8] & 0x444) == 0)) {\n    *ptr_value = *ptr_value & 0xfffffffe;\n  }\n  *(undefined *)((int)ptr_array + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_bitwise_values_080063c0",
                "param_1": "ptr_array",
                "param_2": "value",
                "puVar1": "ptr_value",
                "uRam40012c20": "bitwise_value_1",
                "uRam40012c44": "bitwise_value_2"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_value_08006420",
            "code": "\nvoid updateValue_08006420(int baseAddress,uint bitOffset,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_value_08006420",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "update_and_set_flags_0800643c",
            "code": "\nundefined4 updateAndSetFlags_0800643c(uint **ptr2DArray,undefined4 value)\n\n{\n  updateValue(*ptr2DArray,value,4);\n  (*ptr2DArray)[0x11] = (*ptr2DArray)[0x11] | 0x8000;\n  **ptr2DArray = **ptr2DArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "update_and_set_flags_0800643c",
                "param_1": "ptr2DArray",
                "param_2": "value",
                "update_value_08006420": "updateValue"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "update_values_08006460",
            "code": "\nundefined4 updateValues_08006460(uint **param_1,undefined4 value)\n\n{\n  uint *ptr;\n  \n  update_value_08006420(*param_1,value,0);\n  ptr = *param_1;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    ptr[17] = ptr[17] & 0xffff7fff;\n  }\n  ptr = *param_1;\n  if (((ptr[8] & 0x1111) == 0) && ((ptr[8] & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "update_values_08006460",
                "param_2": "value",
                "puVar1": "ptr",
                "puVar1[8]": "ptr[8]",
                "puVar1[0x11]": "ptr[17]"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "clear_flags_080064b0",
            "code": "\nvoid clearFlags_080064b0(int *pointer)\n\n{\n  *(uint *)(*pointer + 0xc) = *(uint *)(*pointer + 0xc) & 0xfffffedf;\n  *(uint *)(*pointer + 0x14) = *(uint *)(*pointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)pointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "clear_flags_080064b0",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "decode_data_080064cc",
            "code": "\nundefined4 decode_data_080064cc(int *data)\n\n{\n  short remaining_iterations;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (flag == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)ptr_offset & 0x1ff;\n    if (condition == 0) {\n      ptr_offset = ptr_offset + 2;\n    }\n    else {\n      ptr_offset = ptr_offset + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)ptr_offset;\n    ptr_offset = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  remaining_iterations = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remaining_iterations;\n  if (remaining_iterations == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "decode_data_080064cc",
                "param_1": "data",
                "sVar1": "remaining_iterations",
                "pbVar2": "byte_ptr",
                "param_1[2]": "flag",
                "param_1[4]": "condition",
                "param_1[8]": "ptr_offset"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_shifted_data_08006538",
            "code": "\nvoid calculateShiftedData_08006538(int *data)\n\n{\n  int shiftedData1;\n  int shiftedData2;\n  int shiftedData3;\n  int shiftedData4;\n  int shiftedData5;\n  int shiftedData6;\n  int shiftedData7;\n  int shiftedData8;\n  int shiftedData9;\n  int shiftedData10;\n  \n  *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffcfff | data[3];\n  *(uint *)(*data + 0xc) =\n       data[2] | data[4] | data[5] | *(uint *)(*data + 0xc) & 0xffffe9f3;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffcff | data[6];\n  shiftedData10 = *data;\n  if (shiftedData10 != 0x40013800) {\n    shiftedData1 = get_shifted_data_08005a28();\n    shiftedData6 = data[1];\n    shiftedData2 = get_shifted_data_08005a28();\n    shiftedData7 = data[1];\n    shiftedData3 = get_shifted_data_08005a28();\n    shiftedData8 = data[1];\n    shiftedData4 = get_shifted_data_08005a28();\n    shiftedData9 = data[1];\n    shiftedData5 = get_shifted_data_08005a28();\n    *(uint *)(shiftedData10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedData4 * 0x19) / (uint)(shiftedData9 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedData5 * 0x19) / (ulonglong)(uint)(data[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedData2 * 0x19) / (uint)(shiftedData7 << 2) +\n           (int)(((ulonglong)(uint)(shiftedData3 * 0x19) / (ulonglong)(uint)(shiftedData8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedData1 * 0x19) / (ulonglong)(uint)(shiftedData6 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedData10 = shifted_data_08005a48();\n  shiftedData5 = data[1];\n  shiftedData1 = shifted_data_08005a48();\n  shiftedData6 = data[1];\n  shiftedData2 = shifted_data_08005a48();\n  shiftedData7 = data[1];\n  shiftedData3 = shifted_data_08005a48();\n  shiftedData8 = data[1];\n  shiftedData4 = shifted_data_08005a48();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedData3 * 0x19) / (uint)(shiftedData8 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedData4 * 0x19) /\n                                      (ulonglong)(uint)(data[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedData1 * 0x19) / (uint)(shiftedData6 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedData2 * 0x19) / (ulonglong)(uint)(shiftedData7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(shiftedData10 * 0x19) / (ulonglong)(uint)(shiftedData5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_shifted_data_08006538",
                "param_1": "data",
                "iVar1": "shiftedData1",
                "iVar2": "shiftedData2",
                "iVar3": "shiftedData3",
                "iVar4": "shiftedData4",
                "iVar5": "shiftedData5",
                "iVar6": "shiftedData6",
                "iVar7": "shiftedData7",
                "iVar8": "shiftedData8",
                "iVar9": "shiftedData9",
                "iVar10": "shiftedData10"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "validate_parameters_080066e8",
            "code": "\nundefined4 validate_parameters_080066e8(uint **parameters,uint flag,uint condition,int value,uint threshold)\n\n{\n  int global_value;\n  \n  do {\n    if (((flag & ~**parameters) == 0) != condition) {\n      return 0;\n    }\n  } while ((threshold == 0xffffffff) ||\n          ((threshold != 0 && (global_value = get_global_value(), (uint)(global_value - value) <= threshold))));\n  (*parameters)[3] = (*parameters)[3] & 0xfffffe5f;\n  (*parameters)[5] = (*parameters)[5] & 0xfffffffe;\n  *(undefined *)((int)parameters + 0x39) = 0x20;\n  *(undefined *)((int)parameters + 0x3a) = 0x20;\n  *(undefined *)(parameters + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "validate_parameters_080066e8",
                "param_1": "parameters",
                "param_2": "flag",
                "param_3": "condition",
                "param_4": "value",
                "param_5": "threshold",
                "iVar1": "global_value",
                "get_global_variable_value_08003760": "get_global_value"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_data_structure_0800674e",
            "code": "\nundefined4 initializeDataStructure_0800674e(int *dataStructure)\n\n{\n  if (dataStructure != (int *)0x0) {\n    if (*(char *)((int)dataStructure + 0x39) == '\\0') {\n      *(undefined *)(dataStructure + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)dataStructure + 0x39) = 0x24;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) & 0xffffdfff;\n    calculateShiftedData(dataStructure);\n    *(uint *)(*dataStructure + 0x10) = *(uint *)(*dataStructure + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataStructure + 0x14) = *(uint *)(*dataStructure + 0x14) & 0xffffffd5;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) | 0x2000;\n    flag2 = 0;\n    *(undefined *)((int)dataStructure + 0x39) = 0x20;\n    *(undefined *)((int)dataStructure + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_data_structure_0800674e",
                "param_1": "dataStructure",
                "calculate_shifted_data_08006538": "calculateShiftedData",
                "param_1[0xf]": "flag2"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_input_080067ac",
            "code": "\nundefined4 process_input_080067ac(int *input_array,ushort *input_data,int input_length,undefined4 global_variable)\n\n{\n  int validation_result;\n  undefined4 return_value;\n  \n  if (*(char *)((int)input_array + 0x39) == ' ') {\n    if (input_data == (ushort *)0x0) {\n      return_value = 1;\n    }\n    else if (input_length == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(input_array + 0xe) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(input_array + 0xe) = 1;\n      input_array[0xf] = 0;\n      *(undefined *)((int)input_array + 0x39) = 0x21;\n      return_value = get_global_variable_value_08003760();\n      *(short *)(input_array + 9) = (short)input_length;\n      *(short *)((int)input_array + 0x26) = (short)input_length;\n      while (*(short *)((int)input_array + 0x26) != 0) {\n        *(short *)((int)input_array + 0x26) = *(short *)((int)input_array + 0x26) + -1;\n        if (input_array[2] == 0x1000) {\n          validation_result = validate_parameters_080066e8(input_array,0x80,0,return_value,global_variable);\n          if (validation_result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_array + 4) = *input_data & 0x1ff;\n          if (input_array[4] == 0) {\n            input_data = input_data + 1;\n          }\n          else {\n            input_data = (ushort *)((int)input_data + 1);\n          }\n        }\n        else {\n          validation_result = validate_parameters_080066e8(input_array,0x80,0,return_value,global_variable);\n          if (validation_result != 0) {\n            return 3;\n          }\n          *(uint *)(*input_array + 4) = (uint)*(byte *)input_data;\n          input_data = (ushort *)((int)input_data + 1);\n        }\n      }\n      validation_result = validate_parameters_080066e8(input_array,0x40,0,return_value,global_variable);\n      if (validation_result == 0) {\n        *(undefined *)((int)input_array + 0x39) = 0x20;\n        *(undefined *)(input_array + 0xe) = 0;\n        return_value = 0;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_input_080067ac",
                "param_1": "input_array",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "global_variable",
                "iVar1": "validation_result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "validate_and_update_params_0800688e",
            "code": "\nundefined4 validateAndUpdateParams_0800688e(int *data,int value1,int value2)\n\n{\n  if (*(char *)((int)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    dataElement8 = value1;\n    *(short *)(data + 9) = (short)value2;\n    *(short *)((int)data + 0x26) = (short)value2;\n    dataElementF = 0;\n    *(undefined *)((int)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "validate_and_update_params_0800688e",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "dataElement8",
                "param_1[0xf]": "dataElementF"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_input_080068d6",
            "code": "\nundefined4 validate_input_080068d6(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "update_flags_08006932",
            "code": "\nundefined4 updateFlags_08006932(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)ptr + 0x39) = 0x20;\n  updateParameters();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "update_flags_08006932",
                "param_1": "ptr",
                "update_params_08008730": "updateParameters"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *data)\n\n{\n  byte *bytePtr;\n  short counter;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPtr = (undefined *)data[10];\n    data[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePtr = (byte *)data[10];\n    data[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_selected_function_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "sVar2": "counter",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_data_080069ec",
            "code": "\nvoid process_data_080069ec(uint **data)\n\n{\n  int result;\n  uint value1;\n  uint *ptr;\n  uint value2;\n  uint value3;\n  \n  ptr = *data;\n  value3 = *ptr;\n  value1 = ptr[3];\n  if ((((value3 & 0xf) == 0) && ((value3 & 0x20) != 0)) && ((value1 & 0x20) != 0)) {\n    process_data_080069ec_0800694c(data);\n    return;\n  }\n  if (((value3 & 0xf) == 0) || ((value2 = ptr[5] & 1, value2 == 0 && ((value1 & 0x120) == 0)))) {\n    if (((value3 & 0x80) != 0) && ((value1 & 0x80) != 0)) {\n      decode_data_080064cc(data);\n      return;\n    }\n    if (((value3 & 0x40) != 0) && ((value1 & 0x40) != 0)) {\n      update_flags_08006932(data);\n    }\n  }\n  else {\n    if (((value3 & 1) != 0) && ((value1 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((value3 & 4) != 0) && (value2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((value3 & 2) != 0) && (value2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((value3 & 8) != 0) && (value2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((value3 & 0x20) != 0) && ((value1 & 0x20) != 0)) {\n        process_data_080069ec_0800694c(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_0800877c(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_flags_080064b0(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      result = update_config_08004050(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "value1",
                "puVar3": "ptr",
                "uVar4": "value2",
                "uVar5": "value3"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "get_bit_value_08006b28",
            "code": "\nuint getBitValue_08006b28(uint value,int address)\n\n{\n  return *(uint *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "get_bit_value_08006b28",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "update_bit_08006b3e",
            "code": "\nvoid updateBit_08006b3e(uint input,int array)\n\n{\n  uint index;\n  \n  index = (input << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "update_bit_08006b3e",
                "param_1": "input",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_bit_08006b5c",
            "code": "\nvoid updateBit_08006b5c(uint bitPosition,int arrayAddress)\n\n{\n  uint shiftedValue;\n  \n  shiftedValue = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedValue * 4) = *(uint *)(arrayAddress + shiftedValue * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_bit_08006b5c",
                "param_1": "bitPosition",
                "param_2": "arrayAddress",
                "uVar1": "shiftedValue"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_address_from_param_08006b7c",
            "code": "\nundefined4 getAddressFromParam_08006b7c(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_address_from_param_08006b7c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_memory_and_return_value_08006bb8",
            "code": "\n\n\nundefined4 setMemoryAndReturnValue_08006bb8(undefined4 inputValue)\n\n{\n  undefined4 returnValue;\n  \n  switch(inputValue) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnValue = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnValue = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnValue = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnValue = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnValue = 0x40011800;\n    break;\n  default:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_memory_and_return_value_08006bb8",
                "param_1": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "get_shifted_value_08006c60",
            "code": "\nuint get_shifted_value_08006c60(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int index;\n  uint shifted_value;\n  \n  index = get_index_or_negative_one_08007376(input_1,&DAT_0800a5b8,input_3,input_4,input_4);\n  shifted_value = (uint)(index << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "get_shifted_value_08006c60",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "get_shifted_value_08006c7c",
            "code": "\nundefined4 get_shifted_value_08006c7c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int index;\n  uint shifted_value;\n  \n  index = get_index_or_negative_one_08007376(input_1,&DAT_0800a6cc,input_3,input_4,input_4);\n  shifted_value = (uint)(index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "get_shifted_value_08006c7c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "update_memory_and_parameter_values_08006ca8",
            "code": "\n\n\nvoid updateMemoryAndParameterValues_08006ca8(int *input,undefined4 value)\n\n{\n  undefined4 returnValue;\n  uint updatedData;\n  int currentValue;\n  uint bitmask;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  \n  currentValue = *input;\n  if (currentValue == 0x40012400) {\n    updatedData = _DAT_40021018 | 0x200;\n    currentValue = 0x200;\n    _DAT_40021018 = updatedData;\n  }\n  else {\n    updatedData = 0x40012800;\n    if (currentValue == 0x40012800) {\n      updatedData = _DAT_40021018 | 0x400;\n      currentValue = 0x400;\n      _DAT_40021018 = updatedData;\n    }\n  }\n  returnValue = set_memory_and_return_value_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,value,updatedData,currentValue);\n  bitmask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  parameter1 = 3;\n  parameter2 = 0;\n  update_parameter_values_080040e8(returnValue,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "update_memory_and_parameter_values_08006ca8",
                "param_1": "input",
                "param_2": "value",
                "uVar1": "returnValue",
                "uVar2": "updatedData",
                "iVar3": "currentValue",
                "local_18": "bitmask",
                "local_14": "parameter1",
                "local_10": "parameter2"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_permissions_08006d24",
            "code": "\n\n\nvoid updatePermissions_08006d24(int *permissions)\n\n{\n  if (*permissions != 0x40012400) {\n    if (*permissions == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_permissions_08006d24",
                "param_1": "permissions"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "process_parameter_08006d80",
            "code": "\nundefined2 processParameter_08006d80(undefined4 inputParam)\n\n{\n  int returnValueCheck;\n  uint offsetValue;\n  undefined2 returnValue;\n  uint shiftedValue;\n  undefined4 configurationFlag;\n  undefined4 configurationValue;\n  int isValidParameter;\n  undefined4 tempVariable1;\n  undefined4 tempVariable2;\n  undefined4 tempVariable3;\n  undefined4 tempVariable4;\n  undefined4 tempVariable5;\n  undefined4 tempVariable6;\n  undefined4 constantValue1;\n  undefined4 constantValue2;\n  \n  fillMemory(&isValidParameter,0,0x30);\n  shiftedValue = 0;\n  configurationFlag = 0;\n  configurationValue = 0;\n  returnValue = 0;\n  isValidParameter = checkParameterValidity(inputParam,&DAT_0800a5b8);\n  if (isValidParameter == 0) {\n    returnValue = 0;\n  }\n  else {\n    tempVariable1 = 0;\n    tempVariable2 = 0;\n    tempVariable3 = 0;\n    tempVariable5 = 0;\n    constantValue1 = 0xe0000;\n    constantValue2 = 0;\n    tempVariable4 = 1;\n    tempVariable6 = 0;\n    DAT_20000014 = (undefined)inputParam;\n    returnValueCheck = updateMemoryAndStatus(&isValidParameter);\n    if (returnValueCheck == 0) {\n      shiftedValue = getShiftedValue(inputParam);\n      if (shiftedValue < 0x12) {\n        configurationFlag = 1;\n        configurationValue = 2;\n        returnValueCheck = setConfiguration(&isValidParameter,&shiftedValue);\n        if (returnValueCheck == 0) {\n          returnValueCheck = checkAndUpdateStatus(&isValidParameter);\n          if (returnValueCheck == 0) {\n            returnValueCheck = updateFlagAndCheck(&isValidParameter);\n            if (returnValueCheck == 0) {\n              returnValueCheck = calculateReturnValue(&isValidParameter,10);\n              if (returnValueCheck == 0) {\n                offsetValue = getOffsetValue(&isValidParameter);\n                if ((offsetValue & 0x200) != 0) {\n                  returnValue = extractOffsetValue(&isValidParameter);\n                }\n                returnValueCheck = updateStatus(&isValidParameter);\n                if (returnValueCheck == 0) {\n                  returnValueCheck = clearPermissions(&isValidParameter);\n                  if (returnValueCheck != 0) {\n                    returnValue = 0;\n                  }\n                }\n                else {\n                  returnValue = 0;\n                }\n              }\n              else {\n                returnValue = 0;\n              }\n            }\n            else {\n              returnValue = 0;\n            }\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        returnValue = 0;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "process_parameter_08006d80",
                "param_1": "inputParam",
                "local_46": "returnValue",
                "local_44": "shiftedValue",
                "local_40": "configurationFlag",
                "local_3c": "configurationValue",
                "local_38": "isValidParameter",
                "local_34": "tempVariable1",
                "local_30": "tempVariable2",
                "local_2c": "tempVariable3",
                "local_28": "tempVariable4",
                "local_24": "tempVariable5",
                "local_20": "tempVariable6",
                "local_1c": "constantValue1",
                "local_10": "constantValue2",
                "iVar1": "returnValueCheck",
                "uVar2": "offsetValue",
                "fill_memory_080091c6": "fillMemory",
                "check_for_valid_parameter_08007320": "checkParameterValidity",
                "update_memory_and_status_08003bd8": "updateMemoryAndStatus",
                "get_shifted_value_08006c60": "getShiftedValue",
                "set_configuration_080038e4": "setConfiguration",
                "check_and_update_status_08003e20": "checkAndUpdateStatus",
                "update_flag_and_check_08003aa0": "updateFlagAndCheck",
                "calculate_return_value_0800376c": "calculateReturnValue",
                "get_offset_value_08003a1c": "getOffsetValue",
                "extract_offset_value_080038dc": "extractOffsetValue",
                "update_status_08003de4": "updateStatus",
                "clear_permissions_08003ce8": "clearPermissions"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "configure_device_08006e68",
            "code": "\n\n\nvoid configureDevice_08006e68(undefined4 config)\n\n{\n  int index;\n  undefined4 memoryValue;\n  uint bitMask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  index = get_index_or_negative_one_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  update_flags_and_data_ptr_08007438(config);\n  memoryValue = set_memory_and_return_value_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  value1 = 2;\n  value2 = 0;\n  value3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(index << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  bitMask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_parameter_values_080040e8(memoryValue,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "configure_device_08006e68",
                "param_1": "config",
                "iVar1": "index",
                "uVar2": "memoryValue",
                "local_20": "bitMask",
                "local_1c": "value1",
                "local_18": "value2",
                "local_14": "value3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "initialize_memory_permissions_08007110",
            "code": "\nvoid initializeMemoryPermissions_08007110(void)\n\n{\n  updateMemoryPermissions();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "initialize_memory_permissions_08007110",
                "update_memory_permissions_080074e0": "updateMemoryPermissions"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "process_data_08007118",
            "code": "\nvoid processData_08007118(undefined4 input,uint divider,int threshold,undefined4 settings,char flag)\n\n{\n  uint timerValue;\n  int shiftedValue;\n  int status;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  int isValid;\n  int calculatedValue;\n  undefined4 value8;\n  int updatedThreshold;\n  undefined4 value9;\n  undefined4 value10;\n  undefined temp;\n  \n  fillMemory(&isValid,0,0x40);\n  value1 = 0;\n  value2 = 0;\n  value3 = 0;\n  value4 = 0;\n  value5 = 0;\n  value6 = 0;\n  value7 = 0;\n  isValid = checkParameterValidity(input,&DAT_0800a6cc);\n  if (isValid != 0) {\n    timerValue = processTimer();\n    calculatedValue = timerValue / divider - 1;\n    updatedThreshold = threshold + -1;\n    value9 = 0;\n    value8 = 0;\n    value10 = 0;\n    temp = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)input;\n      shiftedValue = initializeDeviceSettings(&isValid);\n      if (shiftedValue != 0) {\n        return;\n      }\n    }\n    shiftedValue = getShiftedValue(input);\n    if ((((shiftedValue == 0) || (shiftedValue == 4)) || (shiftedValue == 8)) || ((shiftedValue == 0xc || (shiftedValue == 0x18)))) {\n      value1 = 0x60;\n      value3 = 0;\n      value5 = 0;\n      value4 = 0;\n      value7 = 0;\n      value6 = 0;\n      value2 = settings;\n      status = updateFunctionStatus(&isValid,&value1,shiftedValue);\n      if (status == 0) {\n        timerValue = getIndexOrNegativeOne(input,&DAT_0800a6cc);\n        if ((timerValue & 0x100000) == 0) {\n          updateBitwiseValue(&isValid,shiftedValue);\n        }\n        else {\n          updateAndSetFlags(&isValid,shiftedValue);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "process_data_08007118",
                "param_1": "input",
                "param_2": "divider",
                "param_3": "threshold",
                "param_4": "settings",
                "param_5": "flag",
                "uVar1": "timerValue",
                "iVar2": "shiftedValue",
                "iVar3": "status",
                "local_74": "value1",
                "local_70": "value2",
                "local_6c": "value3",
                "local_68": "value4",
                "local_64": "value5",
                "local_60": "value6",
                "local_5c": "value7",
                "local_58": "isValid",
                "local_54": "calculatedValue",
                "local_50": "value8",
                "local_4c": "updatedThreshold",
                "local_48": "value9",
                "local_44": "value10",
                "local_1b": "temp",
                "fill_memory_080091c6": "fillMemory",
                "check_for_valid_parameter_08007320": "checkParameterValidity",
                "process_timer_080075dc": "processTimer",
                "initialize_device_settings_08006092": "initializeDeviceSettings",
                "get_shifted_value_08006c7c": "getShiftedValue",
                "update_function_status_08006186": "updateFunctionStatus",
                "get_index_or_negative_one_08007376": "getIndexOrNegativeOne",
                "update_bitwise_value_08006390": "updateBitwiseValue",
                "update_and_set_flags_0800643c": "updateAndSetFlags"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "process_parameter_080071e4",
            "code": "\nvoid processParameter_080071e4(undefined4 inputParam)\n\n{\n  int shiftedValue;\n  uint indexOrNegativeOne;\n  int resultsArray [17];\n  \n  resultsArray[0] = checkValidity(inputParam,&DAT_0800a6cc);\n  if ((resultsArray[0] != 0) &&\n     ((((shiftedValue = getShiftedValue(inputParam), shiftedValue == 0 || (shiftedValue == 4)) || (shiftedValue == 8)) ||\n      ((shiftedValue == 0xc || (shiftedValue == 0x18)))))) {\n    indexOrNegativeOne = getIndexOrNegativeOne(inputParam,&DAT_0800a6cc);\n    if ((indexOrNegativeOne & 0x100000) == 0) {\n      updateBitwiseValues(resultsArray,shiftedValue);\n    }\n    else {\n      updateValues(resultsArray,shiftedValue);\n    }\n    initializeAndCheckPermissions(resultsArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "process_parameter_080071e4",
                "param_1": "inputParam",
                "local_50": "resultsArray",
                "iVar1": "shiftedValue",
                "uVar2": "indexOrNegativeOne",
                "check_for_valid_parameter_08007320": "checkValidity",
                "get_shifted_value_08006c7c": "getShiftedValue",
                "get_index_or_negative_one_08007376": "getIndexOrNegativeOne",
                "update_bitwise_values_080063c0": "updateBitwiseValues",
                "update_values_08006460": "updateValues",
                "initialize_and_check_permissions_08005e2e": "initializeAndCheckPermissions"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_global_variable_0800723c",
            "code": "\nvoid initialize_global_variable_0800723c(void)\n\n{\n  fetch_global_variables();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_global_variable_0800723c",
                "get_global_variable_value_08003760": "fetch_global_variables"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "initialize_system_08007246",
            "code": "\nvoid initialize_system_08007246(void)\n\n{\n  accumulate_data();\n  execute_initialization();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "initialize_system_08007246",
                "accumulate_data_08003748": "accumulate_data",
                "execute_initialization_08004046": "execute_initialization"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_memory_08007258",
            "code": "\n\n\nvoid initializeMemory_08007258(uint flag,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 returnValue;\n  uint bitMask;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  \n  returnValue = set_memory_and_return_value_08006bb8((flag << 0x18) >> 0x1c);\n  bitMask = 1 << (flag & 0xf) & 0xffff;\n  param3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((flag - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((flag == 0xf) || (flag == 0x13)) || (flag == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param1 = value1;\n  param2 = value2;\n  update_parameter_values_080040e8(returnValue,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_memory_08007258",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "returnValue",
                "local_20": "bitMask",
                "local_1c": "param1",
                "local_18": "param2",
                "local_14": "param3"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "set_param_value_based_on_condition_080072d8",
            "code": "\nvoid setParamValueBasedOnCondition_080072d8(undefined4 param1,undefined2 param2,int condition,undefined4 param4)\n\n{\n  if (condition == 0) {\n    set_param_value_080042e2(param1,param2,0,param4,param4);\n    return;\n  }\n  set_param_value_080042e2(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "set_param_value_based_on_condition_080072d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "condition",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "check_bits_080072f0",
            "code": "\nvoid check_bits_080072f0(undefined4 input_1,undefined2 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  check_bits_080072f0_080042d4(input_1,input_2,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "check_bits_080072f0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_and_initialize_device_080072fa",
            "code": "\nvoid initialize_and_initialize_device_080072fa(void)\n\n{\n  initialize_memory_and_params();\n  initialize_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_and_initialize_device_080072fa",
                "initialize_memory_and_params_08003724": "initialize_memory_and_params",
                "initialize_device_080035b8": "initialize_device"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_index_08007306",
            "code": "\nundefined4 find_index_08007306(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target_value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_index_08007306",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "check_for_valid_parameter_08007320",
            "code": "\nundefined4 check_for_valid_parameter_08007320(int input_parameter)\n\n{\n  undefined4 index;\n  \n  if (input_parameter != -1) {\n    index = find_index_08007306();\n    return index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "check_for_valid_parameter_08007320",
                "param_1": "input_parameter",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_element_index_08007332",
            "code": "\nint find_element_index_08007332(int target_value,char *data_array)\n\n{\n  while( true ) {\n    if (*(int *)(data_array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(data_array + 4) == target_value) break;\n    data_array = data_array + 0xc;\n  }\n  return (int)*data_array;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_element_index_08007332",
                "param_1": "target_value",
                "param_2": "data_array"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_element_or_fail_0800734a",
            "code": "\nundefined4 find_element_or_fail_0800734a(int input_value)\n\n{\n  undefined4 element_index;\n  \n  if (input_value != 0) {\n    element_index = find_element_index_08007332();\n    return element_index;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_element_or_fail_0800734a",
                "param_1": "input_value",
                "uVar1": "element_index"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_index_0800735a",
            "code": "\nundefined4 find_index_0800735a(int target,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == target) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_index_0800735a",
                "param_1": "target",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "get_index_or_negative_one_08007376",
            "code": "\nundefined4 get_index_or_negative_one_08007376(int input)\n\n{\n  undefined4 index;\n  \n  if (input == -1) {\n    return 0xffffffff;\n  }\n  index = find_index_0800735a();\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08007376": "get_index_or_negative_one_08007376",
                "param_1": "input",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "find_match_0800738a",
            "code": "\nundefined4 find_match_0800738a(int search_value,char *array_ptr)\n\n{\n  if (search_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (search_value == *array_ptr) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "find_match_0800738a",
                "param_1": "search_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_zero_080073ae",
            "code": "\nint compareAndReturnZero_080073ae(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_zero_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_080073c0",
            "code": "\nvoid execute_callback_080073c0(void)\n\n{\n  if (DAT_200005f4 != (callback_function *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_080073c0",
                "code": "callback_function"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_memory_080073ec",
            "code": "\n\n\nvoid initializeMemory_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_memory_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_flags_and_data_ptr_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateFlagsAndDataPtr_08007438(int *inputPtr)\n\n{\n  if (*inputPtr == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = inputPtr;\n  }\n  if (*inputPtr == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = inputPtr;\n  }\n  if (*inputPtr == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = inputPtr;\n  }\n  if (*inputPtr == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = inputPtr;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_flags_and_data_ptr_08007438",
                "param_1": "inputPtr"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_memory_permissions_080074e0",
            "code": "\n\n\nvoid updateMemoryPermissions_080074e0(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_memory_permissions_080074e0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_irq_number_08007544",
            "code": "\nundefined4 getTimerIRQNumber_08007544(uint timerValue)\n\n{\n  if (timerValue == 0xffffffff) {\n    return 0;\n  }\n  if (timerValue == 0x40000400) {\n    return 0x1d;\n  }\n  if (timerValue < 0x40000401) {\n    if (timerValue == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timerValue == 0x40000800) {\n      return 0x1e;\n    }\n    if (timerValue == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  initializeAndProcessData(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_irq_number_08007544",
                "param_1": "timerValue",
                "initialize_and_process_data_080098d8": "initializeAndProcessData"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  initializeAndProcessData(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timerInstance",
                "initialize_and_process_data_080098d8": "initializeAndProcessData"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "process_timer_080075dc",
            "code": "\nint processTimer_080075dc(undefined4 instanceId)\n\n{\n  uint local_c;\n  int result;\n  uint clockSource;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  uint localVar1;\n  uint localVar2;\n  \n  param2 = 0;\n  param3 = 0;\n  param4 = 0;\n  localVar1 = 0;\n  localVar2 = 0;\n  param1 = 0;\n  initialize_parameters_08005a68(&param2,&param1);\n  result = check_timer_instance_08007594(instanceId);\n  local_c = localVar2;\n  clockSource = localVar1;\n  if (result == 1) {\n    result = get_shifted_data_08005a28();\n  }\n  else if (result == 2) {\n    result = shifted_data_08005a48();\n    clockSource = local_c;\n  }\n  else {\n    initialize_and_process_data_080098d8(\"TIM: Unknown clock source\");\n    result = 0;\n    clockSource = 0;\n  }\n  if (clockSource != 0x500) {\n    if (clockSource < 0x501) {\n      if (clockSource != 0x400) {\n        return result;\n      }\n    }\n    else if ((clockSource != 0x600) && (clockSource != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "process_timer_080075dc",
                "param_1": "instanceId",
                "uVar3": "clockSource",
                "iVar2": "result",
                "uVar1": "local_c",
                "local_20": "param1",
                "local_1c": "param2",
                "local_18": "param3",
                "local_14": "param4",
                "local_10": "localVar1",
                "local_c": "localVar2"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_parameters_08007648",
            "code": "\nvoid initializeParameters_08007648(undefined4 *parameters,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  char character;\n  uint timerValue;\n  int status;\n  undefined4 *nextParameter;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  \n  localVar1 = 0;\n  localVar2 = 0;\n  localVar3 = 0;\n  localVar4 = 0;\n  localVar5 = 0;\n  localVar6 = 0;\n  localVar7 = 0;\n  nextParameter = parameters + 1;\n  *parameters = 0x40000000;\n  parameters[1] = 0x40000000;\n  parameters[4] = value1;\n  timerValue = process_timer_080075dc();\n  parameters[2] = timerValue / 1000000 - 1;\n  parameters[5] = 0;\n  parameters[3] = 0;\n  parameters[6] = 0;\n  parameters[0x13] = value3;\n  localVar1 = 0;\n  localVar3 = 0;\n  localVar5 = 0;\n  localVar4 = 0;\n  localVar6 = 0;\n  localVar7 = 0;\n  localVar2 = value2;\n  character = get_timer_irq_number_08007544(*parameters);\n  update_character_08003f30((int)character,0xe,0);\n  character = get_timer_irq_number_08007544(*parameters);\n  set_bit_08003f94((int)character);\n  status = update_parameter_status_08006060(nextParameter);\n  if ((status == 0) && (status = update_function_08006128(nextParameter,&localVar1,0), status == 0)) {\n    set_bitwise_value_08006280(nextParameter,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_parameters_08007648",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "cVar1": "character",
                "uVar2": "timerValue",
                "iVar3": "status",
                "puVar4": "nextParameter",
                "local_34": "localVar1",
                "local_30": "localVar2",
                "local_2c": "localVar3",
                "local_28": "localVar4",
                "local_24": "localVar5",
                "local_20": "localVar6",
                "local_1c": "localVar7"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "initialize_memory_and_set_timer_irq_080076e0",
            "code": "\nvoid initializeMemoryAndSetTimerIRQ_080076e0(undefined4 *memoryPtr)\n\n{\n  char timerIRQ;\n  int errorCode;\n  \n  memoryPtr[0x13] = 0;\n  timerIRQ = get_timer_irq_number_08007544(*memoryPtr);\n  set_bit_in_memory_08003fb0((int)timerIRQ);\n  errorCode = initialize_memory_08005df4(memoryPtr + 1);\n  if (errorCode == 0) {\n    update_bitwise_value_080062f4(memoryPtr + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "initialize_memory_and_set_timer_irq_080076e0",
                "param_1": "memoryPtr",
                "cVar1": "timerIRQ",
                "iVar2": "errorCode"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "update_flags_and_data_ptr_08007708",
            "code": "\nvoid update_flags_and_data_ptr_08007708(void)\n\n{\n  update_flags_and_data_ptr_08007708();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "update_flags_and_data_ptr_08007708",
                "update_flags_and_data_ptr_08007438": "update_flags_and_data_ptr"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "initialize_memory_permissions_08007710",
            "code": "\nvoid initializeMemoryPermissions_08007710(void)\n\n{\n  updateMemoryPermissions();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "initialize_memory_permissions_08007710",
                "update_memory_permissions_080074e0": "updateMemoryPermissions"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtractFour_08007718(int num)\n\n{\n  return num + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "num"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_callback_if_condition_met_0800771c",
            "code": "\nvoid executeCallbackIfConditionMet_0800771c(int inputParam)\n\n{\n  int result;\n  \n  result = getCallbackAddress();\n  if ((*(callbackFunction **)(result + 0x4c) != (callbackFunction *)0x0) && (*(char *)(inputParam + 0x1c) == '\\x01')) {\n    (**(callbackFunction **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_callback_if_condition_met_0800771c",
                "param_1": "inputParam",
                "iVar1": "result",
                "subtract_four_08007718": "getCallbackAddress",
                "code": "callbackFunction"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_subroutine_08007736",
            "code": "\nvoid executeSubroutine_08007736(void)\n\n{\n  int subtractionResult;\n  \n  subtractionResult = subtract_four_08007718();\n  if (*(code **)(subtractionResult + 0x48) != (code *)0x0) {\n    (**(code **)(subtractionResult + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_subroutine_08007736",
                "iVar1": "subtractionResult"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_value_from_pointer_08007744",
            "code": "\nundefined4 get_value_from_pointer_08007744(int input)\n\n{\n  return *(undefined4 *)(*(int *)(input + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_value_from_pointer_08007744",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "update_parameter_value_0800774a",
            "code": "\nvoid updateParameterValue_0800774a(int inputPointer,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(inputPointer + 4) + 0x24) = newValue;\n  void;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "update_parameter_value_0800774a",
                "param_1": "inputPointer",
                "param_2": "newValue",
                "return": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "write_to_memory_08007750",
            "code": "\nvoid writeToMemory_08007750(int baseAddress,int offset,undefined4 value)\n\n{\n  *(undefined4 *)(*(int *)(baseAddress + 4) + 0x34 + offset * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "write_to_memory_08007750",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_module_080077b0",
            "code": "\n\n\nvoid initializeI2CModule_080077b0(int *i2cConfigParams,int param2,int param3,int param4,undefined param5)\n\n{\n  int pin1Result;\n  int pin2Result;\n  undefined4 memoryReturnValue;\n  uint value1;\n  uint value2;\n  int *piVar6;\n  uint bitMask1;\n  uint bitMask2;\n  uint shiftValue;\n  undefined4 localVar;\n  \n  if (i2cConfigParams != (int *)0x0) {\n    piVar6 = i2cConfigParams + 1;\n    pin1Result = check_for_valid_parameter_08007320((int)*(char *)(i2cConfigParams + 0x16),&DAT_0800a69c);\n    pin2Result = check_for_valid_parameter_08007320((int)*(char *)((int)i2cConfigParams + 0x59),&DAT_0800a66c);\n    if ((pin1Result == 0) || (pin2Result == 0)) {\n      initialize_and_process_data_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      pin1Result = compare_and_return_zero_080073ae(pin1Result,pin2Result);\n      *i2cConfigParams = pin1Result;\n      if (pin1Result == 0) {\n        initialize_and_process_data_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (pin1Result == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)i2cConfigParams + 0x5a) = 0x1f;\n          *(undefined *)((int)i2cConfigParams + 0x5b) = 0x20;\n          DAT_20000668 = piVar6;\n        }\n        if (*i2cConfigParams == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)i2cConfigParams + 0x5a) = 0x21;\n          *(undefined *)((int)i2cConfigParams + 0x5b) = 0x22;\n          DAT_2000066c = piVar6;\n        }\n        memoryReturnValue = set_memory_and_return_value_08006bb8((uint)((int)*(char *)((int)i2cConfigParams + 0x59) << 0x18) >> 0x1c);\n        bitMask1 = 1 << ((int)*(char *)((int)i2cConfigParams + 0x59) & 0xfU) & 0xffff;\n        value1 = get_index_or_negative_one_08007376((int)*(char *)((int)i2cConfigParams + 0x59),&DAT_0800a66c);\n        value2 = get_index_or_negative_one_08007376((int)*(char *)((int)i2cConfigParams + 0x59),&DAT_0800a66c);\n        bitMask2 = (value1 >> 3 & 1) << 4 | value2 & 7;\n        localVar = 3;\n        pin1Result = get_index_or_negative_one_08007376((int)*(char *)((int)i2cConfigParams + 0x59),&DAT_0800a66c);\n        shiftValue = (uint)(pin1Result << 0x1a) >> 0x1e;\n        pin1Result = get_index_or_negative_one_08007376((int)*(char *)((int)i2cConfigParams + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value2 = 1;\n        value1 = _DAT_40021018;\n        switch((uint)(pin1Result << 0x11) >> 0x19) {\n        case 1:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value2;\n          break;\n        case 2:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 3:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value2;\n          break;\n        case 4:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 5:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value2;\n          break;\n        case 6:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 7:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value2;\n          break;\n        case 8:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 9:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value2;\n          break;\n        case 10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value2;\n          break;\n        case 0xb:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xc:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value2;\n          break;\n        case 0xd:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value2;\n          break;\n        case 0xe:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xf:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value2;\n          break;\n        case 0x10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value2;\n          break;\n        case 0x11:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value2;\n          break;\n        case 0x12:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x13:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value2;\n          break;\n        case 0x14:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value2;\n          break;\n        case 0x15:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x16:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x17:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1b:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1c:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x21:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value2;\n          break;\n        case 0x22:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x23:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x24:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value2;\n        }\n        update_parameter_values_080040e8(memoryReturnValue,&bitMask1,value1,value2);\n        memoryReturnValue = set_memory_and_return_value_08006bb8((uint)((int)*(char *)(i2cConfigParams + 0x16) << 0x18) >> 0x1c);\n        bitMask1 = 1 << ((int)*(char *)(i2cConfigParams + 0x16) & 0xfU) & 0xffff;\n        value1 = get_index_or_negative_one_08007376((int)*(char *)(i2cConfigParams + 0x16),&DAT_0800a69c);\n        value2 = get_index_or_negative_one_08007376((int)*(char *)(i2cConfigParams + 0x16),&DAT_0800a69c);\n        bitMask2 = (value1 >> 3 & 1) << 4 | value2 & 7;\n        localVar = 3;\n        pin1Result = get_index_or_negative_one_08007376((int)*(char *)(i2cConfigParams + 0x16),&DAT_0800a69c);\n        shiftValue = (uint)(pin1Result << 0x1a) >> 0x1e;\n        pin1Result = get_index_or_negative_one_08007376((int)*(char *)(i2cConfigParams + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value2 = 1;\n        value1 = _DAT_40021018;\n        switch((uint)(pin1Result << 0x11) >> 0x19) {\n        case 1:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value2;\n          break;\n        case 2:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 3:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value2;\n          break;\n        case 4:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 5:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value2;\n          break;\n        case 6:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 7:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value2;\n          break;\n        case 8:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 9:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value2;\n          break;\n        case 10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value2;\n          break;\n        case 0xb:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xc:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value2;\n          break;\n        case 0xd:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value2;\n          break;\n        case 0xe:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0xf:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value2;\n          break;\n        case 0x10:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value2;\n          break;\n        case 0x11:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value2;\n          break;\n        case 0x12:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x13:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value2;\n          break;\n        case 0x14:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value2;\n          break;\n        case 0x15:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x16:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x17:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1b:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x1c:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x21:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value2;\n          break;\n        case 0x22:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x23:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value2;\n          break;\n        case 0x24:\n          value1 = 0x40010000;\n          value2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value2;\n        }\n        update_parameter_values_080040e8(memoryReturnValue,&bitMask1,value1,value2);\n        i2cConfigParams[1] = *i2cConfigParams;\n        i2cConfigParams[2] = param2;\n        i2cConfigParams[3] = 0;\n        i2cConfigParams[4] = param4;\n        i2cConfigParams[7] = 0xff;\n        i2cConfigParams[5] = param3;\n        i2cConfigParams[6] = 0;\n        i2cConfigParams[8] = 0;\n        i2cConfigParams[9] = 0;\n        *(undefined *)((int)i2cConfigParams + 0x41) = 0;\n        update_character_08003f30((int)*(char *)((int)i2cConfigParams + 0x5a),0,1);\n        set_bit_08003f94((int)*(char *)((int)i2cConfigParams + 0x5a));\n        update_character_08003f30((int)*(char *)((int)i2cConfigParams + 0x5b),0,1);\n        set_bit_08003f94((int)*(char *)((int)i2cConfigParams + 0x5b));\n        initialize_parameters_080045c0(piVar6);\n        *(undefined *)((int)i2cConfigParams + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_module_080077b0",
                "param_1": "i2cConfigParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "pin1Result",
                "iVar2": "pin2Result",
                "uVar3": "memoryReturnValue",
                "uVar4": "value1",
                "uVar5": "value2",
                "local_38": "bitMask1",
                "local_34": "bitMask2",
                "local_30": "shiftValue",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "process_and_check_data_08007e74",
            "code": "\nint processAndCheckData_08007e74(int dataPointer,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int globalVariableValue;\n  int result;\n  uint differenceValue;\n  int status;\n  int tempVar;\n  undefined4 tempParam;\n  \n  tempParam = inputParam3;\n  globalVariableValue = get_global_variable_value_08003760();\n  differenceValue = 0;\n  status = 2;\n  do {\n    tempVar = dataPointer + 4;\n    result = process_data_08004728(tempVar,inputParam1,inputParam2,inputParam3,tempParam);\n    if (result == 0) {\n      status = 0;\n      while ((result = get_byte_from_address_0800542a(tempVar), result != 0x20 && (status == 0))) {\n        result = get_global_variable_value_08003760();\n        differenceValue = result - globalVariableValue;\n        if (differenceValue < 0x65) {\n          result = get_value_from_offset_08005430(tempVar);\n          if (result != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    result = get_value_from_offset_08005430(tempVar);\n  } while ((result == 4) && (differenceValue < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "process_and_check_data_08007e74",
                "param_1": "dataPointer",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "globalVariableValue",
                "iVar2": "result",
                "uVar3": "differenceValue",
                "iVar4": "status",
                "iVar5": "tempVar",
                "uVar6": "tempParam"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copy_data_08007ede(int destination,int source,uint length)\n\n{\n  uint i;\n  \n  if (0x20 < length) {\n    return 2;\n  }\n  for (i = 0; i < length; i = i + 1 & 0xff) {\n    *(undefined *)(destination + i + 0x68) = *(undefined *)(source + i);\n    *(char *)(destination + 0x88) = *(char *)(destination + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "uVar1": "i"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "check_and_update_data_08007f0e",
            "code": "\nint checkAndUpdateData_08007f0e(int inputAddress,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int initialValue;\n  int updateResult;\n  uint difference;\n  int condition;\n  int offset;\n  undefined4 param_4_copy;\n  \n  param_4_copy = value3;\n  initialValue = get_global_variable_value_08003760();\n  difference = 0;\n  condition = 2;\n  do {\n    offset = inputAddress + 4;\n    updateResult = update_data_080047f4(offset,value1,value2,value3,param_4_copy);\n    if (updateResult == 0) {\n      condition = 0;\n      while ((updateResult = get_byte_from_address_0800542a(offset), updateResult != 0x20 && (condition == 0))) {\n        updateResult = get_global_variable_value_08003760();\n        difference = updateResult - initialValue;\n        if (difference < 0x65) {\n          updateResult = get_value_from_offset_08005430(offset);\n          if (updateResult != 0) {\n            condition = 2;\n          }\n        }\n        else {\n          condition = 1;\n        }\n      }\n    }\n    updateResult = get_value_from_offset_08005430(offset);\n  } while ((updateResult == 4) && (difference < 100));\n  return condition;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "check_and_update_data_08007f0e",
                "param_1": "inputAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "initialValue",
                "iVar2": "updateResult",
                "uVar3": "difference",
                "iVar4": "condition",
                "iVar5": "offset",
                "uVar6": "param_4_copy"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_4_08007f78",
            "code": "\nint subtract_4_08007f78(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_4_08007f78",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_data_08007f7c",
            "code": "\nvoid updateData_08007f7c(int dataPtr,int newValue)\n\n{\n  if (dataPtr != 0) {\n    if (newValue != 0) {\n      *(int *)(dataPtr + 0x60) = newValue;\n      initialize_parameters_080049e0(dataPtr + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_data_08007f7c",
                "param_1": "dataPtr",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "set_and_initialize_parameters_08007f8e",
            "code": "\nvoid setAndInitializeParameters_08007f8e(int parameter1,int parameter2)\n\n{\n  if (parameter1 != 0) {\n    if (parameter2 != 0) {\n      *(int *)(parameter1 + 100) = parameter2;\n      initialize_parameters_080049e0(parameter1 + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "set_and_initialize_parameters_08007f8e",
                "param_1": "parameter1",
                "param_2": "parameter2"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "process_params_08007fa0",
            "code": "\nvoid processParams_08007fa0(int inputPtr,int flag,int condition,undefined4 unknownParam)\n\n{\n  int result;\n  \n  result = subtract();\n  if (condition == *(int *)(inputPtr + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      processParams_08007fa0Helper(inputPtr,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    validateInput(inputPtr,result + 0x68,0x20,8,unknownParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "process_params_08007fa0",
                "param_1": "inputPtr",
                "param_2": "flag",
                "param_3": "condition",
                "param_4": "unknownParam",
                "iVar1": "result",
                "subtract_4_08007f78": "subtract",
                "process_params_080048c8": "processParamsHelper",
                "validate_input_08004954": "validateInput"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "initialize_and_execute_08007ff0",
            "code": "\nvoid initialize_and_execute_08007ff0(undefined4 input_param)\n\n{\n  int result;\n  \n  result = get_subtraction_result();\n  if (((*(function_ptr **)(result + 0x60) != (function_ptr *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(function_ptr **)(result + 0x60))(result + 0x68);\n  }\n  initialize_parameters(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "initialize_and_execute_08007ff0",
                "param_1": "input_param",
                "iVar1": "result",
                "subtract_4_08007f78": "get_subtraction_result",
                "code": "function_ptr",
                "initialize_parameters_080049e0": "initialize_parameters"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "check_and_initialize_parameters_08008020",
            "code": "\nvoid checkAndInitializeParameters_08008020(undefined4 inputParameter)\n\n{\n  int result;\n  \n  result = subtractValueFunction();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initializeParametersFunction(inputParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "check_and_initialize_parameters_08008020",
                "param_1": "inputParameter",
                "iVar1": "result",
                "subtract_4_08007f78": "subtractValueFunction",
                "initialize_parameters_080049e0": "initializeParametersFunction"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_uart_pins_08008078",
            "code": "\n\n\nvoid initializeUARTPins_08008078(int *uartPins)\n\n{\n  int uartPin1;\n  int uartPin2;\n  undefined4 uartPin1Value;\n  uint uartPin2Value;\n  uint uartPin1Mask;\n  uint uartPin2Mask;\n  uint uartPin2Shift;\n  undefined4 uartPin1Size;\n  \n  if (uartPins != (int *)0x0) {\n    uartPin1 = check_for_valid_parameter_08007320((int)*(char *)(uartPins + 0x16),&DAT_0800a864);\n    uartPin2 = check_for_valid_parameter_08007320((int)*(char *)((int)uartPins + 0x59),&DAT_0800a81c);\n    if ((uartPin2 == 0) || (uartPin1 == 0)) {\n      printErrorMessage(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2);\n    }\n    else {\n      uartPin1 = compareUARTPins(uartPin1);\n      *uartPins = uartPin1;\n      if (uartPin1 == 0) {\n        printErrorMessage(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uartPins + 0x11) = 0;\n          *(undefined *)((int)uartPins + 0x5a) = 0x25;\n        }\n        else if (uartPin1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uartPins + 0x11) = 1;\n          *(undefined *)((int)uartPins + 0x5a) = 0x26;\n        }\n        else if (uartPin1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uartPins + 0x11) = 2;\n          *(undefined *)((int)uartPins + 0x5a) = 0x27;\n        }\n        uartPin1Value = setMemoryAndReturnValue((uint)((int)*(char *)((int)uartPins + 0x59) << 0x18) >> 0x1c);\n        uartPin2Value = getPinIndexOrNegativeOne((int)*(char *)((int)uartPins + 0x59),&DAT_0800a81c);\n        uartPin1Mask = 1 << (*(byte *)((int)uartPins + 0x59) & 0xf) & 0xffff;\n        uartPin2Mask = (uartPin2Value >> 3 & 1) << 4 | uartPin2Value & 7;\n        uartPin2Shift = (uartPin2Value << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((uartPin2Value << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        uartPin1Size = 3;\n        updateParameterValues(uartPin1Value,&uartPin1Mask);\n        uartPin1Value = setMemoryAndReturnValue((uint)((int)*(char *)(uartPins + 0x16) << 0x18) >> 0x1c);\n        uartPin2Value = getPinIndexOrNegativeOne((int)*(char *)(uartPins + 0x16),&DAT_0800a864);\n        uartPin1Mask = 1 << (*(byte *)(uartPins + 0x16) & 0xf) & 0xffff;\n        uartPin2Mask = (uartPin2Value >> 3 & 1) << 4 | uartPin2Value & 7;\n        uartPin2Shift = (uartPin2Value << 0x1a) >> 0x1e;\n        updateParameterValues(uartPin1Value,&uartPin1Mask);\n        (&DAT_200006c0)[*(byte *)(uartPins + 0x11)] = uartPins + 1;\n        uartPins[1] = *uartPins;\n        uartPins[2] = uartPins[0x12];\n        uartPins[3] = uartPins[0x13];\n        uartPins[4] = uartPins[0x14];\n        uartPins[5] = uartPins[0x15];\n        uartPins[6] = 0xc;\n        uartPins[7] = 0;\n        uartPins[8] = 0;\n        initializeDataStructure(uartPins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_uart_pins_08008078",
                "param_1": "uartPins",
                "iVar1": "uartPin1",
                "iVar2": "uartPin2",
                "uVar3": "uartPin1Value",
                "uVar4": "uartPin2Value",
                "local_20": "uartPin1Mask",
                "local_1c": "uartPin2Mask",
                "local_18": "uartPin2Shift",
                "local_14": "uartPin1Size",
                "initialize_and_process_data_080098d8": "printErrorMessage",
                "compare_and_return_zero_080073ae": "compareUARTPins",
                "set_memory_and_return_value_08006bb8": "setMemoryAndReturnValue",
                "get_index_or_negative_one_08007376": "getPinIndexOrNegativeOne",
                "update_parameter_values_080040e8": "updateParameterValues",
                "initialize_data_structure_0800674e": "initializeDataStructure"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initialize_uart_080084b0(void)\n\n{\n  int result;\n  undefined4 param;\n  \n  result = check_parameter(2,&DAT_0800a864);\n  if (result != 0) {\n    param = check_parameter(2,&DAT_0800a864);\n    DAT_20000075 = find_element(param,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initialize_pins(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "result",
                "uVar2": "param",
                "initialize_uart_pins_08008078": "initialize_pins",
                "check_for_valid_parameter_08007320": "check_parameter",
                "find_element_or_fail_0800734a": "find_element"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_input_and_verify_08008500",
            "code": "\nuint process_input_and_verify_08008500(undefined4 input_address,uint input_value)\n\n{\n  int global_variable_value;\n  int valid_param_result;\n  uint counter;\n  \n  global_variable_value = get_global_variable_value_08003760();\n  valid_param_result = check_for_valid_parameter_08007320(2,&DAT_0800a864);\n  if (valid_param_result == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 5 &&\n      (((&DAT_200006c0)[counter] == 0 ||\n       (valid_param_result = check_for_valid_parameter_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[counter] != valid_param_result))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (4 < counter) {\n    if ((4 < DAT_20000060) && (initialize_uart_080084b0(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    counter = (uint)DAT_20000060;\n  }\n  do {\n    valid_param_result = process_input_080067ac((&DAT_200006c0)[counter],input_address,input_value & 0xffff,1000);\n    if (valid_param_result == 0) {\n      return input_value;\n    }\n    valid_param_result = get_global_variable_value_08003760();\n  } while ((uint)(valid_param_result - global_variable_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_input_and_verify_08008500",
                "param_1": "input_address",
                "param_2": "input_value",
                "iVar1": "global_variable_value",
                "iVar2": "valid_param_result",
                "uVar3": "counter"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_if_combined_bytes_match_080085b8",
            "code": "\nbool checkIfCombinedBytesMatch_080085b8(int input)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(input + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_if_combined_bytes_match_080085b8",
                "param_1": "input",
                "uVar1": "combinedBytes"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "check_combination_flag_080085dc",
            "code": "\nbool checkCombinationFlag_080085dc(int flagValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_200006c0)[*(byte *)(flagValue + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "check_combination_flag_080085dc",
                "param_1": "flagValue",
                "uVar1": "combinedBytes",
                "combine_bytes_08006b1c": "combineBytes"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "copy_byte_and_validate_input_08008600",
            "code": "\nundefined4 copyByteAndValidateInput_08008600(int inputPtr,undefined *outputPtr,undefined4 size,undefined4 param_4)\n\n{\n  int matchResult;\n  \n  if (inputPtr == 0) {\n    return 0xffffffff;\n  }\n  matchResult = check_if_combined_bytes_match_080085b8();\n  if (matchResult == 0) {\n    *outputPtr = *(undefined *)(inputPtr + 0x45);\n    validate_input_080068d6((&DAT_200006c0)[*(byte *)(inputPtr + 0x44)],inputPtr + 0x45,1,&DAT_200006c0,param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "copy_byte_and_validate_input_08008600",
                "param_1": "inputPtr",
                "param_2": "outputPtr",
                "param_3": "size",
                "iVar1": "matchResult"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "process_input_0800863c",
            "code": "\nvoid processInput_0800863c(int inputAddress,undefined4 newValue,undefined4 unused1,undefined4 unused2)\n\n{\n  int checkResult;\n  uint byteValue;\n  \n  if (inputAddress != 0) {\n    checkResult = check_if_combined_bytes_match_080085b8();\n    if (checkResult == 0) {\n      byteValue = (uint)*(byte *)(inputAddress + 0x44);\n      *(undefined4 *)(&DAT_20000670 + byteValue * 4) = newValue;\n      *(int *)(&DAT_20000684 + byteValue * 4) = inputAddress;\n      updateCharacter((int)*(char *)(inputAddress + 0x5a),0,1,byteValue,unused2);\n      setBit((int)*(char *)(inputAddress + 0x5a));\n      validateInput((&DAT_200006c0)[*(byte *)(inputAddress + 0x44)],inputAddress + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "process_input_0800863c",
                "param_1": "inputAddress",
                "param_2": "newValue",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "checkResult",
                "uVar2": "byteValue",
                "update_character_08003f30": "updateCharacter",
                "set_bit_08003f94": "setBit",
                "validate_input_080068d6": "validateInput"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_character_info_08008694",
            "code": "\nvoid updateCharacterInfo_08008694(int characterData,undefined4 newParameter)\n\n{\n  byte byteValue;\n  \n  if (characterData != 0) {\n    byteValue = *(byte *)(characterData + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = newParameter;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = characterData;\n    updateCharacterState((int)*(char *)(characterData + 0x5a),0,2);\n    setCharacterBit((int)*(char *)(characterData + 0x5a));\n    validateAndUpdateParams((&DAT_200006c0)[*(byte *)(characterData + 0x44)],\n                 *(int *)(characterData + 100) + (uint)*(ushort *)(characterData + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_character_info_08008694",
                "param_1": "characterData",
                "param_2": "newParameter",
                "bVar1": "byteValue",
                "update_character_08003f30": "updateCharacterState",
                "set_bit_08003f94": "setCharacterBit",
                "validate_and_update_params_0800688e": "validateAndUpdateParams"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_value_index_080086e8",
            "code": "\nuint find_value_index_080086e8(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_value_index_080086e8",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_selected_function_0800870c",
            "code": "\nvoid execute_selected_function_0800870c(void)\n\n{\n  uint index;\n  \n  index = find_index_of_value();\n  if (index < 5) {\n    (**(code **)(&DAT_20000670 + index * 4))(*(undefined4 *)(&DAT_20000684 + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_selected_function_0800870c",
                "uVar1": "index",
                "find_value_index_080086e8": "find_index_of_value"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "update_params_08008730",
            "code": "\nvoid updateParams_08008730(void)\n\n{\n  uint valueIndex;\n  int result;\n  int paramIndex;\n  \n  valueIndex = find_value_index_080086e8();\n  paramIndex = *(int *)(&DAT_200006ac + valueIndex * 4);\n  if ((valueIndex < 5) && (result = (**(code **)(&DAT_20000698 + valueIndex * 4))(paramIndex), result != -1)) {\n    validate_and_update_params_0800688e((&DAT_200006c0)[*(byte *)(paramIndex + 0x44)],\n                 *(int *)(paramIndex + 100) + (uint)*(ushort *)(paramIndex + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "update_params_08008730",
                "uVar1": "valueIndex",
                "iVar2": "result",
                "iVar3": "paramIndex"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocateMemory_08008804(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocatedMemory = DAT_200006d4;\n  if (DAT_200006d4 + size <= &stackMemoryLocation) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocatedMemory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "stack0x00000000": "stackMemoryLocation"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_negative_one_08008840",
            "code": "\nundefined4 get_negative_one_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_negative_one_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_memory_limit_08008846",
            "code": "\nundefined4 setMemoryLimit_08008846(undefined4 baseAddress,int memoryPointer)\n\n{\n  *(undefined4 *)(memoryPointer + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_memory_limit_08008846",
                "param_1": "baseAddress",
                "param_2": "memoryPointer"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "initialize_08008850",
            "code": "\nundefined4 initialize_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "initialize_08008850"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "initialize_08008854",
            "code": "\nundefined4 initialize_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "initialize_08008854"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_program_08008858",
            "code": "\nvoid initializeProgram_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_program_08008858",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_and_verify_input_0800885c",
            "code": "\nvoid process_and_verify_input_0800885c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  process_input_and_verify_08008500(arg2,arg3,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_and_verify_input_0800885c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "run_infinite_loop_08008868",
            "code": "\nvoid runInfiniteLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "run_infinite_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "initialize_application_0800887c",
            "code": "\nundefined4 initializeApplication_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "initialize_application_0800887c"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "process_and_shift_08008880",
            "code": "\nuint process_and_shift_08008880(uint input)\n\n{\n  bool is_less_than_0x3c;\n  char char_value;\n  uint result;\n  \n  if (input < 0xe) {\n    if (input + 0x2e < 0x3c) {\n      is_less_than_0x3c = true;\n    }\n    else {\n      is_less_than_0x3c = false;\n    }\n  }\n  else {\n    is_less_than_0x3c = input < 0x3c;\n  }\n  if (is_less_than_0x3c) {\n    if (input < 0xe) {\n      input = input + 0x2e;\n    }\n    char_value = (&DAT_0800a908)[input];\n  }\n  else {\n    char_value = -1;\n  }\n  if (char_value == -1) {\n    result = 0;\n  }\n  else {\n    result = process_parameter;\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return result >> (0xc - DAT_20000088 & 0xff);\n      }\n      return result << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008880": "process_and_shift_08008880",
                "param_1": "input",
                "bVar1": "is_less_than_0x3c",
                "cVar2": "char_value",
                "uVar3": "result",
                "process_parameter_08006d80()": "process_parameter"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "process_input_data_080088e0",
            "code": "\nvoid process_input_data_080088e0(uint input_index,uint input_value)\n\n{\n  int match_result;\n  int lookup_result;\n  \n  if (input_index < 0x3c) {\n    lookup_result = (int)(char)(&DAT_0800a908)[input_index];\n  }\n  else {\n    lookup_result = -1;\n  }\n  if (lookup_result != -1) {\n    match_result = find_match_0800738a(lookup_result,&DAT_0800a6cc);\n    if (match_result == 0) {\n      process_data_08008990(input_index,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          input_value = input_value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          input_value = input_value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (input_value < 0x80) {\n        process_data_08008a24(input_index,0);\n      }\n      else {\n        process_data_08008a24(input_index,1);\n      }\n    }\n    else {\n      match_result = get_bit_value_08006b28(lookup_result,&DAT_200006d8);\n      if (match_result == 0) {\n        update_bit_08006b3e(lookup_result,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          input_value = input_value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          input_value = input_value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      process_data_08007118(lookup_result,0x3e418,0xff,input_value,match_result == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "process_input_data_080088e0",
                "param_1": "input_index",
                "param_2": "input_value",
                "iVar1": "match_result",
                "iVar2": "lookup_result"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "process_data_08008990",
            "code": "\nvoid processData_08008990(uint index,undefined4 mode,undefined4 param_value,undefined1 *data_array)\n\n{\n  int bit_value;\n  undefined1 *bit_array_ptr;\n  int bit_index;\n  \n  if (index < 0x3c) {\n    bit_index = (int)(char)(&DAT_0800a908)[index];\n    bit_array_ptr = &DAT_0800a908;\n  }\n  else {\n    bit_index = -1;\n    bit_array_ptr = data_array;\n  }\n  if (bit_index != -1) {\n    bit_value = get_bit_value_08006b28(bit_index,&DAT_200006d8,param_value,bit_array_ptr,data_array);\n    if (bit_value != 0) {\n      bit_value = find_match_0800738a(bit_index,&DAT_0800a6cc);\n      if (bit_value != 0) {\n        process_parameter_080071e4(bit_index);\n      }\n      update_bit_08006b5c(bit_index,&DAT_200006d8);\n    }\n    switch(mode) {\n    case 0:\n      initialize_memory_08007258(bit_index,0);\n      break;\n    case 1:\n      initialize_memory_08007258(bit_index,1,0);\n      break;\n    case 2:\n      initialize_memory_08007258(bit_index,0,1);\n      break;\n    case 3:\n      initialize_memory_08007258(bit_index,0,2);\n    }\n    update_bit_08006b3e(bit_index,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "process_data_08008990",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "param_value",
                "param_4": "data_array",
                "iVar1": "bit_value",
                "puVar2": "bit_array_ptr",
                "iVar3": "bit_index"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "process_data_08008a24",
            "code": "\nvoid processData_08008a24(uint index,undefined4 value1,undefined4 value2,undefined1 *data)\n\n{\n  int bitValue;\n  undefined4 address;\n  undefined1 *ptrData;\n  uint lookupValue;\n  \n  if (index < 0x3c) {\n    lookupValue = (uint)(char)(&DAT_0800a908)[index];\n    ptrData = &DAT_0800a908;\n  }\n  else {\n    lookupValue = 0xffffffff;\n    ptrData = data;\n  }\n  if ((lookupValue != 0xffffffff) &&\n     (bitValue = get_bit_value_08006b28(lookupValue,&DAT_200006ec,value2,ptrData,data), bitValue != 0)) {\n    address = get_address_from_param_08006b7c((lookupValue << 0x18) >> 0x1c);\n    set_param_value_based_on_condition_080072d8(address,1 << (lookupValue & 0xf) & 0xffff,value1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "process_data_08008a24",
                "param_1": "index",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "iVar1": "bitValue",
                "uVar2": "address",
                "puVar3": "ptrData",
                "uVar4": "lookupValue"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_bit_value_08008a6c",
            "code": "\nchar check_bit_value_08008a6c(uint input_value)\n\n{\n  char result;\n  int bit_value;\n  undefined4 address;\n  uint array_value;\n  \n  if (input_value < 0x3c) {\n    array_value = (uint)(char)(&DAT_0800a908)[input_value];\n  }\n  else {\n    array_value = 0xffffffff;\n  }\n  if (array_value == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    bit_value = get_bit_value_08006b28(array_value,&DAT_200006ec);\n    if (bit_value == 0) {\n      result = '\\0';\n    }\n    else {\n      address = get_address_from_param_08006b7c((array_value << 0x18) >> 0x1c);\n      result = check_bits_080072f0(address,1 << (array_value & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_bit_value_08008a6c",
                "param_1": "input_value",
                "cVar1": "result",
                "iVar2": "bit_value",
                "uVar3": "address",
                "uVar4": "array_value"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_global_variable_08008abc",
            "code": "\nvoid initializeGlobalVariable_08008abc(void)\n\n{\n  initializeGlobalVariable_08008abcHelper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_global_variable_08008abc",
                "initialize_global_variable_0800723c": "initializeGlobalVariableHelper"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_short_value_08008afa",
            "code": "\nushort calculate_short_value_08008afa(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_short_value_08008afa",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "validate_and_copy_byte_08008b66",
            "code": "\nvoid validateAndCopyByte_08008b66(int input)\n\n{\n  int copyResult;\n  ushort newIndex;\n  undefined validatedByte;\n  \n  copyResult = copy_byte_and_validate_input_08008600(input,&validatedByte);\n  if ((copyResult == 0) &&\n     (newIndex = *(short *)(input + 0x60) + 1U & 0x3f, newIndex != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = validatedByte;\n    *(ushort *)(input + 0x60) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "validate_and_copy_byte_08008b66",
                "param_1": "input",
                "iVar1": "copyResult",
                "uVar2": "newIndex",
                "local_9": "validatedByte"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_parameters_08008c20",
            "code": "\nvoid initializeParameters_08008c20(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_parameters_08008c20",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "configure_serial_port_08008c44",
            "code": "\nvoid configureSerialPort_08008c44(int serialPortAddress,undefined4 baudRate,byte configByte)\n\n{\n  uint serialPortNumber;\n  byte configByteFlag;\n  int flowControlFlag;\n  code *errorHandlingFunction;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x140) = configByte;\n  configByteFlag = configByte & 7;\n  if (configByteFlag == 4) {\n    flowControlFlag = 7;\n  }\n  else if (configByteFlag == 6) {\n    flowControlFlag = 8;\n  }\n  else if (configByteFlag == 2) {\n    flowControlFlag = 6;\n  }\n  else {\n    flowControlFlag = 0;\n  }\n  if ((configByte & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    flowControlFlag = flowControlFlag + 1;\n  }\n  else if ((configByte & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    flowControlFlag = flowControlFlag + 1;\n  }\n  if ((configByte & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (flowControlFlag == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (flowControlFlag == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    flowControlFlag = 0;\n  }\n  if (flowControlFlag != 0) {\n    initialize_uart_pins_08008078(serialPortAddress + 0xd4);\n    process_input_0800863c(serialPortAddress + 0xd4,0x8008b67);\n    return;\n  }\n  errorHandlingFunction = (code *)0x8008cee;\n  process_assert_error_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (serialPortNumber < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[serialPortNumber];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*errorHandlingFunction)(0,serialPortNumber,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "configure_serial_port_08008c44",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "configByte",
                "extraout_r1": "serialPortNumber",
                "bVar1": "configByteFlag",
                "iVar2": "flowControlFlag",
                "UNRECOVERED_JUMPTABLE": "errorHandlingFunction"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_destination_value_08008d00",
            "code": "\nvoid setDestinationValue_08008d00(int destinationAddress,uint inputValue)\n\n{\n  undefined newValue;\n  code *jumpTable;\n  \n  if (inputValue < 0x3c) {\n    newValue = (&DAT_0800a908)[inputValue];\n  }\n  else {\n    newValue = 0xff;\n  }\n  *(undefined *)(destinationAddress + 0x12d) = newValue;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_destination_value_08008d00",
                "param_1": "destinationAddress",
                "param_2": "inputValue",
                "uVar1": "newValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_threshold_value_08008d18",
            "code": "\nvoid setThresholdValue_08008d18(int baseAddress,uint valueIndex)\n\n{\n  undefined thresholdValue;\n  \n  if (valueIndex < 0x3c) {\n    thresholdValue = (&DAT_0800a908)[valueIndex];\n  }\n  else {\n    thresholdValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = thresholdValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_threshold_value_08008d18",
                "param_1": "baseAddress",
                "param_2": "valueIndex",
                "uVar1": "thresholdValue"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_function_08008d30",
            "code": "\nundefined4 *\ninitialize_function_08008d30(undefined4 *output_array,undefined4 input_value,undefined4 threshold,undefined4 destination)\n\n{\n  undefined found_element;\n  \n  output_array[1] = 0;\n  output_array[2] = 1000;\n  *output_array = &PTR_LAB_08008ba4_1_0800aab8;\n  if (output_array == (undefined4 *)&DAT_20000700) {\n    set_destination_value_08008d00(&DAT_20000700,0,threshold,&DAT_20000700,destination);\n    set_threshold_value_08008d18(&DAT_20000700,1);\n  }\n  else {\n    found_element = find_element_or_fail_0800734a(input_value,&DAT_0800a81c);\n    *(undefined *)((int)output_array + 0x12d) = found_element;\n    found_element = find_element_or_fail_0800734a(input_value,&DAT_0800a864);\n    *(undefined *)(output_array + 0x4b) = found_element;\n  }\n  initialize_params(output_array);\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_function_08008d30",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "threshold",
                "param_4": "destination",
                "uVar1": "found_element",
                "initialize_parameters_08008c20": "initialize_params"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_if_param_1_is_one_08008d8c",
            "code": "\nvoid initialize_if_param_1_is_one_08008d8c(int is_param_1_one,int param_2_value,undefined4 param_3_value,undefined4 param_4_value)\n\n{\n  if (is_param_1_one != 1) {\n    return;\n  }\n  if (param_2_value == 0xffff) {\n    initialize_function(&DAT_20000700,0x40004400,param_3_value,0xffff,param_4_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_if_param_1_is_one_08008d8c",
                "param_1": "is_param_1_one",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "initialize_function_08008d30": "initialize_function"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *dataBuffer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataBuffer = &DAT_0800ab0c;\n  *(undefined *)(dataBuffer + 1) = value1;\n  *(undefined *)((int)dataBuffer + 5) = value2;\n  *(undefined *)((int)dataBuffer + 6) = value3;\n  *(undefined *)((int)dataBuffer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "dataBuffer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_data_if_condition_08008e14",
            "code": "\nvoid initialize_data_if_condition_08008e14(int status,int value)\n\n{\n  if ((status == 1) && (value == 0xffff)) {\n    initialize_data_08008df8(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_data_if_condition_08008e14",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_result_08008ef4",
            "code": "\nint calculate_result_08008ef4(int start_value,int mid_value,int end_value,int start_result,int end_result)\n\n{\n  return (uint)((end_result - start_result) * (start_value - mid_value)) / (uint)(end_value - mid_value) + start_result;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_result_08008ef4",
                "param_1": "start_value",
                "param_2": "mid_value",
                "param_3": "end_value",
                "param_4": "start_result",
                "param_5": "end_result"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_device_08008f0e",
            "code": "\nvoid initialize_device_08008f0e(void)\n\n{\n  update_memory_address(3);\n  initialize_device_08008f0e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_device_08008f0e",
                "update_memory_address_08003f0c": "update_memory_address",
                "initialize_device_080036a2": "initialize_device"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "run_continuous_process_08008f1c",
            "code": "\nvoid run_continuous_process_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initialize_gateway();\n  do {\n    process_data();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "run_continuous_process_08008f1c",
                "initialize_gateway_08001b48": "initialize_gateway",
                "process_binary_data_080022f8": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_bits_08008f3c",
            "code": "\nchar countBits_08008f3c(uint num)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; num != 1; num = num >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_bits_08008f3c",
                "param_1": "num",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_configuration_08008f78",
            "code": "\nvoid initializeConfiguration_08008f78(int flag,int value,undefined4 unused_1,undefined4 unused_19)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    processData(0,label_1,&DAT_20000000,&DAT_2000084c,unused_19);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_configuration_08008f78",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "unused_1",
                "param_4": "unused_19",
                "shift_and_return_080090c2": "processData",
                "&LAB_08008f50_1": "label_1"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "process_function_08009084",
            "code": "\nvoid processFunction_08009084(int input)\n\n{\n  int bitsCount;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  process_jumptable_0800a18c();\n  bitsCount = count_bits_08008f3c();\n  if ((&DAT_20000858)[bitsCount * 5] != 0) {\n    processFunction_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "process_function_08009084",
                "param_1": "input",
                "iVar1": "bitsCount"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_process_data_08009094",
            "code": "\nvoid checkAndProcessData_08009094(void)\n\n{\n  int bitCount;\n  \n  bitCount = countBits();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_process_data_08009094",
                "iVar1": "bitCount",
                "count_bits_08008f3c": "countBits",
                "process_function_08009084": "processData"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "shift_and_return_080090c2",
            "code": "\nvoid shift_and_return_080090c2(undefined4 destination,undefined4 source)\n\n{\n  shift_parameter_to_high_08009108(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "shift_and_return_080090c2",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "process_assert_error_080090cc",
            "code": "\nvoid processAssertError_080090cc(undefined4 assertion,undefined4 file,char *line,undefined4 function)\n\n{\n  undefined4 assertionValue;\n  char *message;\n  undefined8 binaryResult;\n  undefined4 additionalInfo;\n  \n  assertionValue = *(undefined4 *)(DAT_20000090 + 0xc);\n  additionalInfo = function;\n  if (line == (char *)0x0) goto LAB_080090f0;\n  message = \", function: \";\n  do {\n    process_and_return_data_08009124(assertionValue,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,assertion,file\n                 ,message,line,additionalInfo);\n    binaryResult = process_binary_08009b5c();\n    file = (undefined4)((ulonglong)binaryResult >> 0x20);\n    assertionValue = (undefined4)binaryResult;\nLAB_080090f0:\n    line = \"\";\n    message = line;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "process_assert_error_080090cc",
                "param_1": "assertion",
                "param_2": "file",
                "param_3": "line",
                "param_4": "function",
                "uVar1": "assertionValue",
                "pcVar2": "message",
                "uVar3": "binaryResult",
                "uVar4": "additionalInfo"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_parameter_to_high_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftParameterToHigh_08009108(undefined4 base,uint value)\n\n{\n  return (unsignedLongLong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_parameter_to_high_08009108",
                "param_1": "base",
                "param_2": "value",
                "ulonglong": "unsignedLongLong"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "process_and_return_data_08009124",
            "code": "\nvoid processAndReturnData_08009124(undefined4 input1,undefined4 input2,undefined4 output1,undefined4 output2)\n\n{\n  undefined4 output1Temp;\n  undefined4 output2Temp;\n  \n  output1Temp = output1;\n  output2Temp = output2;\n  process_and_return_data_0800937c(DAT_20000090,input1,input2,&output1Temp,input1,&output1Temp);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "process_and_return_data_08009124",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "output2",
                "uStack_8": "output1Temp",
                "uStack_4": "output2Temp"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid executeFunctions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_and_init_memory_08009190",
            "code": "\nvoid allocate_and_init_memory_08009190(undefined4 size)\n\n{\n  allocate_memory_08009270(DAT_20000090,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_and_init_memory_08009190",
                "param_1": "size"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "update_data_080091a0",
            "code": "\nvoid updateData_080091a0(undefined4 data)\n\n{\n  updateData_080091a0Helper(DAT_20000090,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "update_data_080091a0",
                "param_1": "data",
                "update_data_080091d8": "updateDataHelper"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copyData_080091b0(int dstStartIndex,undefined *srcData,int dataSize)\n\n{\n  undefined *srcEnd;\n  undefined *dstEnd;\n  \n  dstEnd = (undefined *)(dstStartIndex + -1);\n  srcEnd = srcData + dataSize;\n  for (; srcData != srcEnd; srcData = srcData + 1) {\n    dstEnd = dstEnd + 1;\n    *dstEnd = *srcData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "dstStartIndex",
                "param_2": "srcData",
                "param_3": "dataSize",
                "puVar1": "srcEnd",
                "puVar2": "dstEnd"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *memory,undefined value,int size)\n\n{\n  undefined *endMemory;\n  \n  endMemory = memory + size;\n  for (; memory != endMemory; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endMemory"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "update_data_080091d8",
            "code": "\nvoid updateData_080091d8(undefined4 *output,int size,undefined4 value1,undefined4 value2)\n\n{\n  int **returnValue1;\n  int **tempPointer1;\n  int **tempPointer2;\n  int *tempVar1;\n  int **tempPointer3;\n  int **tempPointer4;\n  \n  if (size == 0) {\n    return;\n  }\n  tempPointer4 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    tempPointer4 = (int **)((int)tempPointer4 + *(int *)(size + -4));\n  }\n  FUNC_08009f48();\n  tempPointer2 = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    tempPointer4[1] = (int *)0x0;\n    tempPointer1 = returnValue1;\n    DAT_2000098c = tempPointer4;\n  }\n  else {\n    tempPointer2 = DAT_2000098c;\n    if (tempPointer4 < DAT_2000098c) {\n      tempPointer1 = (int **)*tempPointer4;\n      tempPointer2 = (int **)((int)tempPointer4 + (int)tempPointer1);\n      if (DAT_2000098c == tempPointer2) {\n        tempVar1 = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        tempPointer2 = (int **)((int)tempVar1 + (int)tempPointer1);\n        *tempPointer4 = (int *)tempPointer2;\n      }\n      tempPointer4[1] = (int *)DAT_2000098c;\n      DAT_2000098c = tempPointer4;\n    }\n    else {\n      do {\n        tempPointer3 = tempPointer2;\n        tempPointer2 = (int **)tempPointer3[1];\n        if (tempPointer2 == (int **)0x0) break;\n      } while (tempPointer2 <= tempPointer4);\n      tempPointer1 = (int **)*tempPointer3;\n      if ((int **)((int)tempPointer3 + (int)tempPointer1) == tempPointer4) {\n        tempPointer1 = (int **)((int)tempPointer1 + (int)*tempPointer4);\n        *tempPointer3 = (int *)tempPointer1;\n        if (tempPointer2 == (int **)((int)tempPointer3 + (int)tempPointer1)) {\n          tempVar1 = *tempPointer2;\n          tempPointer2 = (int **)tempPointer2[1];\n          tempPointer1 = (int **)((int)tempPointer1 + (int)tempVar1);\n          *tempPointer3 = (int *)tempPointer1;\n          tempPointer3[1] = (int *)tempPointer2;\n        }\n      }\n      else if (tempPointer4 < (int **)((int)tempPointer3 + (int)tempPointer1)) {\n        *output = 0xc;\n      }\n      else {\n        tempPointer1 = (int **)((int)tempPointer4 + (int)*tempPointer4);\n        if (tempPointer2 == tempPointer1) {\n          tempVar1 = *tempPointer2;\n          tempPointer2 = (int **)tempPointer2[1];\n          tempPointer1 = (int **)((int)tempVar1 + (int)*tempPointer4);\n          *tempPointer4 = (int *)tempPointer1;\n        }\n        tempPointer4[1] = (int *)tempPointer2;\n        tempPointer3[1] = (int *)tempPointer4;\n      }\n    }\n  }\n  FUNC_08009f4a(output,tempPointer1,tempPointer2,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "update_data_080091d8",
                "param_1": "output",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "extraout_r1": "returnValue1",
                "ppiVar1": "tempPointer1",
                "ppiVar2": "tempPointer2",
                "piVar3": "tempVar1",
                "ppiVar4": "tempPointer3",
                "ppiVar5": "tempPointer4"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *output_ptr,uint input_size)\n\n{\n  uint *curr_block;\n  int block_size;\n  uint *prev_block;\n  uint difference;\n  uint *prev_block_next;\n  uint aligned_size;\n  \n  aligned_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < input_size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    curr_block = DAT_2000098c;\n    prev_block_next = DAT_2000098c;\n    while (prev_block = curr_block, prev_block != (uint *)0x0) {\n      difference = *prev_block - aligned_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (prev_block_next == prev_block) {\n            curr_block = (uint *)prev_block_next[1];\n            DAT_2000098c = curr_block;\n          }\n          else {\n            curr_block = (uint *)prev_block[1];\n          }\n          if (prev_block_next != prev_block) {\n            prev_block_next[1] = (uint)curr_block;\n            prev_block_next = prev_block;\n          }\n        }\n        else {\n          *prev_block = difference;\n          *(uint *)((int)prev_block + difference) = aligned_size;\n          prev_block_next = (uint *)((int)prev_block + difference);\n        }\n        goto LAB_080092d4;\n      }\n      prev_block_next = prev_block;\n      curr_block = (uint *)prev_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = initialize_memory(output_ptr);\n    }\n    curr_block = (uint *)initialize_memory(output_ptr,aligned_size);\n    if ((curr_block != (uint *)0xffffffff) &&\n       ((prev_block_next = (uint *)((int)curr_block + 3U & 0xfffffffc), curr_block == prev_block_next ||\n        (block_size = initialize_memory(output_ptr,(int)prev_block_next - (int)curr_block), block_size != -1)))) {\n      *prev_block_next = aligned_size;\nLAB_080092d4:\n      FUNC_08009f4a(output_ptr);\n      aligned_size = (int)prev_block_next + 0xbU & 0xfffffff8;\n      block_size = aligned_size - (int)(prev_block_next + 1);\n      if (block_size != 0) {\n        *(int *)((int)prev_block_next + block_size) = -block_size;\n        return aligned_size;\n      }\n      return aligned_size;\n    }\n    *output_ptr = 0xc;\n    FUNC_08009f4a(output_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "output_ptr",
                "param_2": "input_size",
                "puVar1": "curr_block",
                "iVar2": "block_size",
                "puVar3": "prev_block",
                "uVar4": "difference",
                "puVar5": "prev_block_next",
                "uVar6": "aligned_size",
                "initialize_memory_allocation_08009918": "initialize_memory"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint process_input_0800932c(int input_data,byte byte_value,byte **args)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = args[2] + -1;\n  args[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)args[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *args;\n    *args = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_memory();\n  }\n  if (args == (byte **)&DAT_0800aba4) {\n    args = *(byte ***)(input_data + 4);\n  }\n  else if (args == (byte **)&DAT_0800abc4) {\n    args = *(byte ***)(input_data + 8);\n  }\n  else if (args == (byte **)&DAT_0800ab84) {\n    args = *(byte ***)(input_data + 0xc);\n  }\n  args[2] = args[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(args + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = args[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = update_and_initialize(input_data,args,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    result = (uint)byte_value;\n    temp_var1 = (int)*args - (int)args[4];\n    if ((temp_var1 < (int)args[5]) || (temp_var1 = process_function(input_data,args), temp_var1 == 0)) {\n      args[2] = args[2] + -1;\n      temp_var2 = *args;\n      *args = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(temp_var1 + 1) != args[5]) {\n        if (-1 < (int)((uint)*(ushort *)(args + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = process_function(input_data,args);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "args",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result",
                "initialize_memory_08009d50": "initialize_memory",
                "param_3[2]": "args[2]",
                "param_3[6]": "args[6]",
                "param_3[4]": "args[4]",
                "param_3[5]": "args[5]",
                "(int)pbVar2": "(int)temp_var2",
                "(int)pbVar3": "(int)temp_var3",
                "update_and_initialize_08009a80": "update_and_initialize",
                "process_function_08009c7c": "process_function"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_and_return_08009358",
            "code": "\nint processAndReturn_08009358(undefined4 input1,undefined4 input2,undefined *data,int length)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentLength;\n  \n  endPtr = data + length;\n  currentLength = length;\n  do {\n    if (data == endPtr) {\n      return 0;\n    }\n    result = process_input_0800932c(input1,*data,input2,length,currentLength);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_and_return_08009358",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentLength"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "process_and_return_data_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint processAndReturnData_0800937c(int input,undefined4 *array,byte *string,int *memory)\n\n{\n  int result;\n  int *pointer;\n  bool isNumeric;\n  byte *currentChar;\n  byte *nextChar;\n  int processResult;\n  int temp;\n  int *pointerList;\n  uint flags;\n  int numericVal1;\n  undefined4 unusedVar;\n  int numericVal2;\n  int totalDataLength;\n  byte formatChar;\n  undefined charSpace;\n  undefined charPlus;\n  undefined charFlag;\n  undefined4 unusedVar2;\n  \n  pointerList = memory;\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_memory_08009d50();\n  }\n  if (array == &DAT_0800aba4) {\n    array = *(undefined4 **)(input + 4);\n  }\n  else if (array == (undefined4 *)&DAT_0800abc4) {\n    array = *(undefined4 **)(input + 8);\n  }\n  else if (array == (undefined4 *)&DAT_0800ab84) {\n    array = *(undefined4 **)(input + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(array + 3) << 0x1c)) || (array[4] == 0)) &&\n     (temp = update_and_initialize_08009a80(input,array), temp != 0)) {\n    return -1;\n  }\n  totalDataLength = 0;\n  charSpace = 0x20;\n  charPlus = 0x30;\n  currentChar = string;\nLAB_080093be:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  temp = (int)nextChar - (int)string;\n  if (temp != 0) {\n    result = process_and_return_08009358(input,array,string,temp);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(array + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalDataLength;\n    }\n    totalDataLength = totalDataLength + temp;\n  }\n  if (*nextChar == 0) goto LAB_08009568;\n  flags = 0;\n  numericVal2 = 0;\n  numericVal1 = -1;\n  unusedVar = 0;\n  charFlag = 0;\n  unusedVar2 = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    temp = find_char_in_string_08009f2c(\"#-0+ \",*currentChar);\n    string = currentChar + 1;\n    if (temp == 0) break;\n    flags = 1 << (temp + 0xf7ff54b0U & 0xff) | flags;\n    currentChar = string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    charFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    charFlag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    pointer = pointerList + 1;\n    temp = *pointerList;\n    pointerList = pointer;\n    if (temp < 0) {\n      numericVal2 = -temp;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    isNumeric = false;\n    temp = numericVal2;\n    string = currentChar;\n    while( true ) {\n      if (9 < *string - 0x30) break;\n      temp = temp * 10 + (*string - 0x30);\n      isNumeric = true;\n      string = string + 1;\n    }\n    if (!isNumeric) goto LAB_080094a6;\n  }\n  numericVal2 = temp;\nLAB_080094a6:\n  if (*string == 0x2e) {\n    if (string[1] == 0x2a) {\n      string = string + 2;\n      pointer = pointerList + 1;\n      numericVal1 = *pointerList;\n      pointerList = pointer;\n      if (numericVal1 < 0) {\n        numericVal1 = -1;\n      }\n    }\n    else {\n      isNumeric = false;\n      temp = 0;\n      numericVal1 = 0;\n      while( true ) {\n        string = string + 1;\n        if (9 < *string - 0x30) break;\n        temp = temp * 10 + (*string - 0x30);\n        isNumeric = true;\n      }\n      if (isNumeric) {\n        numericVal1 = temp;\n      }\n    }\n  }\n  temp = find_char_in_string_08009f2c(&DAT_0800ab56,*string,3);\n  if (temp != 0) {\n    string = string + 1;\n    flags = flags | 0x40 << (temp + 0xf7ff54aaU & 0xff);\n  }\n  formatChar = *string;\n  string = string + 1;\n  temp = find_char_in_string_08009f2c(\"efgEFG\",formatChar,6);\n  if (temp == 0) {\n    processResult = process_and_convert_data_08009698(input,&flags,array,0x8009359,&pointerList);\n    if (processResult == -1) goto LAB_08009568;\n  }\n  else {\n    pointerList = (int *)(((int)pointerList + 7U & 0xfffffff8) + 8);\n  }\n  totalDataLength = totalDataLength + processResult;\n  currentChar = string;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "process_and_return_data_0800937c",
                "param_1": "input",
                "param_2": "array",
                "param_3": "string",
                "param_4": "memory",
                "iVar1": "result",
                "piVar2": "pointer",
                "bVar3": "isNumeric",
                "pbVar4": "currentChar",
                "pbVar5": "nextChar",
                "unaff_r9": "processResult",
                "iVar6": "temp",
                "local_8c": "pointerList",
                "local_88": "flags",
                "local_84": "numericVal1",
                "local_80": "unusedVar",
                "local_7c": "numericVal2",
                "local_74": "totalDataLength",
                "local_70": "formatChar",
                "local_6f": "charSpace",
                "local_6e": "charPlus",
                "local_45": "charFlag",
                "local_30": "unusedVar2"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocess_data_080095a8(undefined4 data,uint *array,uint *result,undefined4 param4,code *callback)\n\n{\n  int index;\n  int returnValue;\n  uint maxValue;\n  uint count;\n  bool isConditionTrue;\n  \n  maxValue = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxValue = array[2];\n  }\n  *result = maxValue;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *result = maxValue + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (index = 0; index < (int)(array[3] - *result); index = index + 1) {\n      returnValue = (*callback)(data,param4,(int)array + 0x19,1);\n      if (returnValue == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)array + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  count = maxValue;\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxValue + 0x43) = 0x30;\n    count = maxValue + 2;\n    *(undefined *)((int)array + maxValue + 0x44) = *(undefined *)((int)array + 0x45);\n  }\n  index = (*callback)(data,param4,(int)array + 0x43,count);\n  if (index != -1) {\n    maxValue = array[3];\n    isConditionTrue = (*array & 6) != 4;\n    if (isConditionTrue) {\n      maxValue = 0;\n    }\n    count = 0;\n    if (!isConditionTrue) {\n      maxValue = maxValue - *result;\n    }\n    if (!isConditionTrue) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxValue = maxValue + (array[2] - array[4]);\n    }\n    while( true ) {\n      if (maxValue == count) {\n        return 0;\n      }\n      index = (*callback)(data,param4,(int)array + 0x1a,1);\n      if (index == -1) break;\n      count = count + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "data",
                "param_2": "array",
                "param_3": "result",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "returnValue",
                "uVar3": "maxValue",
                "uVar4": "count",
                "bVar5": "isConditionTrue"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "process_and_convert_data_08009698",
            "code": "\nuint process_and_convert_data_08009698(undefined4 input_value,uint *input_array,undefined4 input_size,code *conversion_function,uint **output_pointer)\n\n{\n  byte byte_value;\n  int index_1;\n  uint *pointer_1;\n  int index_2;\n  char *char_pointer;\n  uint temp_value_1;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint temp_value_2;\n  uint temp_value_3;\n  char *char_pointer_2;\n  char *char_pointer_3;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(input_array + 6);\n  char_pointer_3 = (char *)((int)input_array + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08009852;\n          if (byte_value != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)input_array + 0x45) = 0x58;\n          char_pointer = \"0123456789ABCDEF\";\nLAB_080097e2:\n          temp_value_1 = *input_array;\n          pointer_1 = *output_pointer;\n          *output_pointer = pointer_1 + 1;\n          if (((temp_value_1 & 0x80) == 0) && ((int)(temp_value_1 << 0x19) < 0)) {\n            temp_value_2 = (uint)*(ushort *)pointer_1;\n          }\n          else {\n            temp_value_2 = *pointer_1;\n          }\n          if ((int)(temp_value_1 << 0x1f) < 0) {\n            *input_array = temp_value_1 | 0x20;\n          }\n          if (temp_value_2 == 0) {\n            *input_array = *input_array & 0xffffffdf;\n          }\n          temp_value_1 = 0x10;\nLAB_08009778:\n          *(undefined *)((int)input_array + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080096c8;\n          temp_value_2 = *input_array;\n          pointer_1 = *output_pointer;\n          if ((temp_value_2 & 0x80) == 0) {\n            *output_pointer = pointer_1 + 1;\n            if ((temp_value_2 & 0x40) == 0) goto LAB_080096e8;\n            temp_value_2 = (uint)(short)*(ushort *)pointer_1;\n          }\n          else {\n            *output_pointer = pointer_1 + 1;\nLAB_080096e8:\n            temp_value_2 = *pointer_1;\n          }\n          if ((int)temp_value_2 < 0) {\n            temp_value_2 = -temp_value_2;\n            *(undefined *)((int)input_array + 0x43) = 0x2d;\n          }\n          char_pointer = \"0123456789ABCDEF\";\n          temp_value_1 = 10;\n        }\n        temp_value_3 = input_array[1];\n        input_array[2] = temp_value_3;\n        char_pointer_2 = char_pointer_3;\n        if ((int)temp_value_3 < 0) {\n          if (temp_value_2 != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)input_array + 0x42) = *char_pointer;\n          char_pointer_2 = (char *)((int)input_array + 0x42);\n        }\n        else {\n          *input_array = *input_array & 0xfffffffb;\n          if (temp_value_2 == 0) {\n            if (temp_value_3 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              temp_value_3 = temp_value_2 / temp_value_1;\n              char_pointer_2 = char_pointer_2 + -1;\n              *char_pointer_2 = char_pointer[temp_value_2 - temp_value_1 * temp_value_3];\n              temp_value_2 = temp_value_3;\n            } while (temp_value_3 != 0);\n          }\n        }\n        if (((temp_value_1 == 8) && ((int)(*input_array << 0x1f) < 0)) && ((int)input_array[1] <= (int)input_array[4]))\n        {\n          char_pointer_2[-1] = '0';\n          char_pointer_2 = char_pointer_2 + -1;\n        }\n        input_array[4] = (int)char_pointer_3 - (int)char_pointer_2;\n        char_pointer_3 = char_pointer_2;\n        goto LAB_080097be;\n      }\n      pointer_1 = *output_pointer;\n      *output_pointer = pointer_1 + 1;\n      *(char *)((int)input_array + 0x42) = (char)*pointer_1;\nLAB_08009728:\n      char_pointer_3 = (char *)((int)input_array + 0x42);\n      temp_value_2 = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_0800974e:\n            temp_value_2 = *input_array;\n            pointer_1 = *output_pointer;\n            if ((temp_value_2 & 0x80) == 0) {\n              *output_pointer = pointer_1 + 1;\n              if ((temp_value_2 & 0x40) == 0) goto LAB_0800975c;\n              temp_value_2 = (uint)*(ushort *)pointer_1;\n            }\n            else {\n              *output_pointer = pointer_1 + 1;\nLAB_0800975c:\n              temp_value_2 = *pointer_1;\n            }\n            if (byte_value == 0x6f) {\n              temp_value_1 = 8;\n            }\n            else {\n              temp_value_1 = 10;\n            }\n            char_pointer = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte_value == 0x70) {\n            *input_array = *input_array | 0x20;\nLAB_0800970e:\n            char_pointer = \"0123456789abcdef\";\n            *(undefined *)((int)input_array + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_0800974e;\n          if (byte_value == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)input_array + 0x42) = byte_value;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*output_pointer;\n      *output_pointer = (uint *)(ppcVar8 + 1);\n      char_pointer_3 = *ppcVar8;\n      index_1 = find_char_in_string_08009f2c(char_pointer_3,0,input_array[1]);\n      if (index_1 != 0) {\n        input_array[1] = index_1 - (int)char_pointer_3;\n      }\n      temp_value_2 = input_array[1];\n    }\n    input_array[4] = temp_value_2;\n    *(undefined *)((int)input_array + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  temp_value_2 = *input_array;\n  ppuVar7 = (uint **)*output_pointer;\n  temp_value_1 = input_array[5];\n  if ((temp_value_2 & 0x80) == 0) {\n    *output_pointer = (uint *)(ppuVar7 + 1);\n    pointer_1 = *ppuVar7;\n    if ((temp_value_2 & 0x40) == 0) goto LAB_0800983e;\n    *(short *)pointer_1 = (short)temp_value_1;\n  }\n  else {\n    *output_pointer = (uint *)(ppuVar7 + 1);\n    pointer_1 = *ppuVar7;\nLAB_0800983e:\n    *pointer_1 = temp_value_1;\n  }\nLAB_08009852:\n  input_array[4] = 0;\nLAB_080097be:\n  index_1 = process_data_080095a8(input_value,input_array,local_array,input_size,conversion_function);\n  if ((index_1 == -1) || (index_1 = (*conversion_function)(input_value,input_size,char_pointer_3,input_array[4]), index_1 == -1)) {\nLAB_080097d2:\n    temp_value_2 = 0xffffffff;\n  }\n  else {\n    if ((int)(*input_array << 0x1e) < 0) {\n      for (index_1 = 0; index_1 < (int)(input_array[3] - local_array[0]); index_1 = index_1 + 1) {\n        index_2 = (*conversion_function)(input_value,input_size,(int)input_array + 0x19,1);\n        if (index_2 == -1) goto LAB_080097d2;\n      }\n    }\n    temp_value_2 = input_array[3];\n    if ((int)input_array[3] < (int)local_array[0]) {\n      temp_value_2 = local_array[0];\n    }\n  }\n  return temp_value_2;\n}\n\n",
            "renaming": {
                "FUN_08009698": "process_and_convert_data_08009698",
                "param_1": "input_value",
                "param_2": "input_array",
                "param_3": "input_size",
                "param_4": "conversion_function",
                "param_5": "output_pointer",
                "bVar1": "byte_value",
                "iVar2": "index_1",
                "puVar3": "pointer_1",
                "iVar4": "index_2",
                "pcVar5": "char_pointer",
                "uVar6": "temp_value_1",
                "uVar9": "temp_value_2",
                "uVar10": "temp_value_3",
                "pcVar11": "char_pointer_2",
                "pcVar12": "char_pointer_3",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "initialize_and_process_data_080098d8",
            "code": "\nvoid initialize_and_process_data_080098d8(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int data_ptr;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  data_ptr = DAT_20000090;\n  param_1_copy = input_param;\n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_memory_08009d50(DAT_20000090);\n  }\n  process_and_return_data_0800937c(data_ptr,*(undefined4 *)(data_ptr + 8),input_param,&param_2_copy,param_1_copy,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "initialize_and_process_data_080098d8",
                "param_1": "input_param",
                "iVar1": "data_ptr",
                "uVar2": "param_1_copy",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_or_copy_data_08009908",
            "code": "\nint allocate_or_copy_data_08009908(int size,uint sum)\n\n{\n  undefined4 data_address;\n  int result;\n  uint calculated_sum;\n  \n  data_address = DAT_20000090;\n  if (size != 0) {\n    if (sum == 0) {\n      update_data_080091d8();\n      result = 0;\n    }\n    else {\n      calculated_sum = calculate_sum_0800a154();\n      result = size;\n      if ((calculated_sum < sum) && (result = allocate_memory_08009270(data_address,sum), result != 0)) {\n        copy_data_080091b0(result,size,sum);\n        update_data_080091d8(data_address,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_08009270(DAT_20000090,sum,sum,&DAT_20000090);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_or_copy_data_08009908",
                "param_1": "size",
                "param_2": "sum",
                "uVar1": "data_address",
                "iVar2": "result",
                "uVar3": "calculated_sum"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "initialize_memory_allocation_08009918",
            "code": "\nvoid initializeMemoryAllocation_08009918(int *outputPointer,undefined4 allocationSize)\n\n{\n  int memoryAllocationResult;\n  \n  DAT_20000a38 = 0;\n  memoryAllocationResult = allocate_memory_08008804(allocationSize);\n  if ((memoryAllocationResult == -1) && (DAT_20000a38 != 0)) {\n    *outputPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "initialize_memory_allocation_08009918",
                "param_1": "outputPointer",
                "param_2": "allocationSize",
                "iVar1": "memoryAllocationResult"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_with_limit_08009954",
            "code": "\nvoid copyStringWithLimit_08009954(char *destination,char *source,int limit)\n\n{\n  char currentChar;\n  int remainingCount;\n  char *destPtr;\n  \n  do {\n    destPtr = destination;\n    remainingCount = limit;\n    if (remainingCount == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = destPtr + 1;\n    *destPtr = currentChar;\n    source = source + 1;\n    limit = remainingCount + -1;\n  } while (currentChar != '\\0');\n  for (; destination != destPtr + remainingCount; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_with_limit_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "limit",
                "cVar1": "currentChar",
                "iVar2": "remainingCount",
                "pcVar3": "destPtr"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_character_index_0800997e",
            "code": "\nint find_last_character_index_0800997e(int string,int length,undefined4 search_character,undefined4 search_index)\n\n{\n  int current_index;\n  int last_index;\n  \n  if (length != 0) {\n    last_index = 0;\n    while (current_index = find_character_08009938(string,length,search_character,string,search_index), current_index != 0) {\n      string = current_index + 1;\n      last_index = current_index;\n    }\n    return last_index;\n  }\n  last_index = find_character_08009938();\n  return last_index;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_character_index_0800997e",
                "param_1": "string",
                "param_2": "length",
                "param_3": "search_character",
                "param_4": "search_index",
                "iVar1": "current_index",
                "iVar2": "last_index"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *string1,char *string2)\n\n{\n  char *current_char1;\n  char *current_char2;\n  char *next_char2;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    current_char1 = string1;\n    if (*current_char1 == '\\0') {\n      return (char *)0x0;\n    }\n    next_char2 = string2 + -1;\n    current_char2 = current_char1 + -1;\n    do {\n      next_char2 = next_char2 + 1;\n      if (*next_char2 == '\\0') {\n        return current_char1;\n      }\n      current_char2 = current_char2 + 1;\n      string1 = current_char1 + 1;\n    } while (*current_char2 == *next_char2);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "current_char1",
                "pcVar2": "current_char2",
                "pcVar3": "next_char2"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "update_and_initialize_08009a80",
            "code": "\nuint update_and_initialize_08009a80(undefined4 *input_data,undefined4 *function_data)\n\n{\n  int data_offset;\n  uint result;\n  ushort flag;\n  \n  data_offset = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_memory_08009d50(DAT_20000090);\n  }\n  if (function_data == &DAT_0800aba4) {\n    function_data = *(undefined4 **)(data_offset + 4);\n  }\n  else if (function_data == (undefined4 *)&DAT_0800abc4) {\n    function_data = *(undefined4 **)(data_offset + 8);\n  }\n  else if (function_data == (undefined4 *)&DAT_0800ab84) {\n    function_data = *(undefined4 **)(data_offset + 0xc);\n  }\n  flag = *(ushort *)(function_data + 3);\n  result = (uint)flag;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *input_data = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)function_data[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)function_data[0xd] != function_data + 0x11) {\n          update_data(input_data);\n        }\n        function_data[0xd] = 0;\n      }\n      *(ushort *)(function_data + 3) = *(ushort *)(function_data + 3) & 0xffdb;\n      function_data[1] = 0;\n      *function_data = function_data[4];\n    }\n    *(ushort *)(function_data + 3) = *(ushort *)(function_data + 3) | 8;\n  }\n  if ((function_data[4] == 0) && ((*(ushort *)(function_data + 3) & 0x280) != 0x200)) {\n    initialize_data(input_data,function_data);\n  }\n  flag = *(ushort *)(function_data + 3);\n  result = flag & 1;\n  if ((flag & 1) == 0) {\n    if (-1 < (int)((uint)flag << 0x1e)) {\n      result = function_data[5];\n    }\n    function_data[2] = result;\n  }\n  else {\n    function_data[2] = 0;\n    function_data[6] = -function_data[5];\n  }\n  if (function_data[4] == 0) {\n    flag = *(ushort *)(function_data + 3);\n    result = (int)(short)flag & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(function_data + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "update_and_initialize_08009a80",
                "param_1": "input_data",
                "param_2": "function_data",
                "iVar1": "data_offset",
                "uVar2": "result",
                "uVar3": "flag",
                "update_data_080091d8": "update_data",
                "initialize_data_08009eac": "initialize_data"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_data_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_data_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_binary_08009b5c",
            "code": "\nvoid processBinary_08009b5c(void)\n\n{\n  uint *pointer1;\n  int variable1;\n  int *pointer2;\n  int *pointer3;\n  uint unsignedVar1;\n  ushort unsignedVar2;\n  int variable2;\n  code *functionPointer;\n  int variable3;\n  uint unsignedVar3;\n  code *jumpTable;\n  bool booleanVar;\n  undefined8 unsignedVar4;\n  \n  initialize_function_08009fe8(6);\n  jumpTable = (code *)0x8009b6b;\n  unsignedVar4 = run_infinite_loop_08008868(1);\n  pointer2 = (int *)((ulonglong)unsignedVar4 >> 0x20);\n  pointer1 = (uint *)unsignedVar4;\n  unsignedVar2 = *(ushort *)(pointer2 + 3);\n  unsignedVar1 = (uint)unsignedVar2;\n  if ((int)(unsignedVar1 << 0x1c) < 0) {\n    variable1 = pointer2[4];\n    if (variable1 != 0) {\n      variable2 = unsignedVar1 << 0x1e;\n      booleanVar = variable2 != 0;\n      if (booleanVar) {\n        variable2 = 0;\n      }\n      variable3 = *pointer2;\n      if (!booleanVar) {\n        variable2 = pointer2[5];\n      }\n      *pointer2 = variable1;\n      pointer2[2] = variable2;\n      for (variable3 = variable3 - variable1; 0 < variable3; variable3 = variable3 - variable2) {\n        variable2 = (*(code *)pointer2[10])(pointer1,pointer2[8],variable1,variable3);\n        if (variable2 < 1) {\n          unsignedVar2 = *(ushort *)(pointer2 + 3);\n          goto LAB_08009c62;\n        }\n        variable1 = variable1 + variable2;\n      }\n    }\n  }\n  else if (((0 < pointer2[1]) || (0 < pointer2[0x10])) &&\n          (functionPointer = (code *)pointer2[0xb], functionPointer != (code *)0x0)) {\n    unsignedVar3 = *pointer1;\n    *pointer1 = 0;\n    if ((unsignedVar2 & 0x1000) == 0) {\n      variable1 = (*functionPointer)(pointer1,pointer2[8],unsignedVar1 & 0x1000,1);\n      if ((variable1 == -1) && (unsignedVar1 = *pointer1, unsignedVar1 != 0)) {\n        if ((unsignedVar1 != 0x1d) && (unsignedVar1 != 0x16)) {\n          *(ushort *)(pointer2 + 3) = *(ushort *)(pointer2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *pointer1 = unsignedVar3;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      variable1 = pointer2[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer2 + 3) << 0x1d) < 0) &&\n       (variable1 = variable1 - pointer2[1], pointer2[0xd] != 0)) {\n      variable1 = variable1 - pointer2[0x10];\n    }\n    variable1 = (*(code *)pointer2[0xb])(pointer1,pointer2[8],variable1,0);\n    unsignedVar2 = *(ushort *)(pointer2 + 3);\n    if ((variable1 == -1) &&\n       ((0x1d < *pointer1 || (-1 < (int)((0x20400001U >> (*pointer1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(pointer2 + 3) = unsignedVar2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    pointer2[1] = 0;\n    *pointer2 = pointer2[4];\n    if (((int)((uint)unsignedVar2 << 0x13) < 0) && ((variable1 != -1 || (*pointer1 == 0)))) {\n      pointer2[0x15] = variable1;\n    }\n    pointer3 = (int *)pointer2[0xd];\n    *pointer1 = unsignedVar3;\n    if (pointer3 != (int *)0x0) {\n      if (pointer3 != pointer2 + 0x11) {\n        update_data_080091d8(pointer1);\n      }\n      pointer2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_binary_08009b5c",
                "puVar1": "pointer1",
                "iVar2": "variable1",
                "piVar3": "pointer2",
                "piVar4": "pointer3",
                "uVar5": "unsignedVar1",
                "uVar6": "unsignedVar2",
                "iVar7": "variable2",
                "pcVar8": "functionPointer",
                "iVar9": "variable3",
                "uVar10": "unsignedVar3",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "booleanVar",
                "uVar12": "unsignedVar4"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_function_08009c7c",
            "code": "\nundefined4 process_function_08009c7c(uint *data_ptr,int *function_params_ptr)\n\n{\n  undefined4 result;\n  int value;\n  int *pointer_var;\n  uint ushort_var;\n  ushort ushort_value;\n  int loop_counter;\n  undefined4 unaffected_register4;\n  undefined4 unaffected_register5;\n  code *function_ptr;\n  int loop_counter2;\n  uint uint_value;\n  code *jmp_table;\n  bool bool_flag;\n  \n  if (function_params_ptr[4] != 0) {\n    if ((data_ptr != (uint *)0x0) && (data_ptr[6] == 0)) {\n      initialize_memory_08009d50();\n    }\n    if (function_params_ptr == &DAT_0800aba4) {\n      function_params_ptr = (int *)data_ptr[1];\n    }\n    else if (function_params_ptr == (int *)&DAT_0800abc4) {\n      function_params_ptr = (int *)data_ptr[2];\n    }\n    else if (function_params_ptr == (int *)&DAT_0800ab84) {\n      function_params_ptr = (int *)data_ptr[3];\n    }\n    if (*(short *)(function_params_ptr + 3) != 0) {\n      ushort_value = *(ushort *)(function_params_ptr + 3);\n      ushort_var = (uint)ushort_value;\n      if ((int)(ushort_var << 0x1c) < 0) {\n        value = function_params_ptr[4];\n        if (value != 0) {\n          loop_counter = ushort_var << 0x1e;\n          bool_flag = loop_counter != 0;\n          if (bool_flag) {\n            loop_counter = 0;\n          }\n          loop_counter2 = *function_params_ptr;\n          if (!bool_flag) {\n            loop_counter = function_params_ptr[5];\n          }\n          *function_params_ptr = value;\n          function_params_ptr[2] = loop_counter;\n          for (loop_counter2 = loop_counter2 - value; 0 < loop_counter2; loop_counter2 = loop_counter2 - loop_counter) {\n            loop_counter = (*(code *)function_params_ptr[10])(data_ptr,function_params_ptr[8],value,loop_counter2,unaffected_register4,unaffected_register5);\n            if (loop_counter < 1) {\n              ushort_value = *(ushort *)(function_params_ptr + 3);\n              goto LAB_08009c62;\n            }\n            value = value + loop_counter;\n          }\n        }\n      }\n      else if (((0 < function_params_ptr[1]) || (0 < function_params_ptr[0x10])) &&\n              (function_ptr = (code *)function_params_ptr[0xb], function_ptr != (code *)0x0)) {\n        uint_value = *data_ptr;\n        *data_ptr = 0;\n        if ((ushort_value & 0x1000) == 0) {\n          value = (*function_ptr)(data_ptr,function_params_ptr[8],ushort_var & 0x1000,1);\n          if ((value == -1) && (ushort_var = *data_ptr, ushort_var != 0)) {\n            if ((ushort_var != 0x1d) && (ushort_var != 0x16)) {\n              *(ushort *)(function_params_ptr + 3) = *(ushort *)(function_params_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jmp_table)();\n              return result;\n            }\n            *data_ptr = uint_value;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          value = function_params_ptr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(function_params_ptr + 3) << 0x1d) < 0) &&\n           (value = value - function_params_ptr[1], function_params_ptr[0xd] != 0)) {\n          value = value - function_params_ptr[0x10];\n        }\n        value = (*(code *)function_params_ptr[0xb])(data_ptr,function_params_ptr[8],value,0);\n        ushort_value = *(ushort *)(function_params_ptr + 3);\n        if ((value == -1) &&\n           ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(function_params_ptr + 3) = ushort_value | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jmp_table)(0xffffffff);\n          return result;\n        }\n        function_params_ptr[1] = 0;\n        *function_params_ptr = function_params_ptr[4];\n        if (((int)((uint)ushort_value << 0x13) < 0) && ((value != -1 || (*data_ptr == 0)))) {\n          function_params_ptr[0x15] = value;\n        }\n        pointer_var = (int *)function_params_ptr[0xd];\n        *data_ptr = uint_value;\n        if (pointer_var != (int *)0x0) {\n          if (pointer_var != function_params_ptr + 0x11) {\n            update_data_080091d8(data_ptr);\n          }\n          function_params_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jmp_table)();\n          return result;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jmp_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_function_08009c7c",
                "param_1": "data_ptr",
                "param_2": "function_params_ptr",
                "uVar1": "result",
                "iVar2": "value",
                "piVar3": "pointer_var",
                "uVar4": "ushort_var",
                "uVar5": "ushort_value",
                "iVar6": "loop_counter",
                "unaff_r4": "unaffected_register4",
                "unaff_r5": "unaffected_register5",
                "pcVar7": "function_ptr",
                "iVar8": "loop_counter2",
                "uVar9": "uint_value",
                "UNRECOVERED_JUMPTABLE_00": "jmp_table",
                "bVar10": "bool_flag"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_data_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_memory_08009cdc",
            "code": "\nvoid initializeMemory_08009cdc(undefined4 *memory,undefined2 value1,undefined2 value2)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value1;\n  memory[0x19] = 0;\n  *(undefined2 *)((int)memory + 0xe) = value2;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[6] = 0;\n  fill_memory_080091c6(memory + 0x17,0,8);\n  memory[8] = memory;\n  memory[9] = 0x800a021;\n  memory[10] = 0x800a043;\n  memory[0xb] = 0x800a07b;\n  memory[0xc] = &LAB_0800a09e_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_memory_08009cdc",
                "param_1": "memory",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "initialize_memory_08009d24",
            "code": "\nundefined4 * initializeMemory_08009d24(undefined4 mem_ptr,int num_elements)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (num_elements + -1) * 0x68;\n  ptr = (undefined4 *)allocate_memory_08009270(mem_ptr,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = num_elements;\n    ptr[2] = ptr + 3;\n    fill_memory_080091c6(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "initialize_memory_08009d24",
                "param_1": "mem_ptr",
                "param_2": "num_elements",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_memory_08009d50",
            "code": "\nvoid initializeMemory_08009d50(undefined4 *memoryArray)\n\n{\n  undefined4 returnValue;\n  undefined4 *pointer;\n  \n  if (memoryArray[6] == 0) {\n    memoryArray[0x12] = 0;\n    memoryArray[0x13] = 0;\n    memoryArray[0x14] = 0;\n    pointer = &DAT_20000094;\n    memoryArray[10] = &defaultFunction;\n    if (memoryArray == &DAT_20000094) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (memoryArray == &DAT_20000094) {\n      memoryArray[6] = pointer;\n    }\n    returnValue = initializeAndFillMemory();\n    memoryArray[1] = returnValue;\n    returnValue = initializeAndFillMemory(memoryArray);\n    memoryArray[2] = returnValue;\n    returnValue = initializeAndFillMemory(memoryArray);\n    memoryArray[3] = returnValue;\n    initializeMemory_08009d50WithData(memoryArray[1],4,0);\n    initializeMemory_08009d50WithData(memoryArray[2],9,1);\n    initializeMemory_08009d50WithData(memoryArray[3],0x12,2);\n    memoryArray[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_memory_08009d50",
                "param_1": "memoryArray",
                "uVar1": "returnValue",
                "puVar2": "pointer",
                "LAB_08009cd0_1": "defaultFunction",
                "initialize_and_fill_memory_08009db0": "initializeAndFillMemory",
                "initialize_memory_08009cdc": "initializeMemoryWithData"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_and_fill_memory_08009db0",
            "code": "\nint * initialize_and_fill_memory_08009db0(undefined4 *output,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int *current_memory;\n  int *current_block;\n  int **memory_list;\n  \n  if (DAT_200000ac == 0) {\n    initialize_memory_08009d50(&DAT_20000094);\n  }\n  memory_list = (int **)&DAT_200000dc;\n  do {\n    current_block = memory_list[2];\n    current_memory = memory_list[1];\n    while (current_memory = (int *)((int)current_memory + -1), -1 < (int)current_memory) {\n      if (*(short *)(current_block + 3) == 0) {\n        *(undefined2 *)((int)current_block + 0xe) = 0xffff;\n        current_block[0x19] = 0;\n        *(undefined2 *)(current_block + 3) = 1;\n        *current_block = 0;\n        current_block[2] = 0;\n        current_block[1] = 0;\n        current_block[4] = 0;\n        current_block[5] = 0;\n        current_block[6] = 0;\n        fill_memory(current_block + 0x17,0,8,1,input4);\n        current_block[0xd] = 0;\n        current_block[0xe] = 0;\n        current_block[0x12] = 0;\n        current_block[0x13] = 0;\n        return current_block;\n      }\n      current_block = current_block + 0x1a;\n    }\n    if (*memory_list == (int *)0x0) {\n      current_memory = (int *)initialize_memory(output,4);\n      *memory_list = current_memory;\n      if (current_memory == (int *)0x0) {\n        *output = 0xc;\n        return (int *)0x0;\n      }\n    }\n    memory_list = (int **)*memory_list;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_and_fill_memory_08009db0",
                "param_1": "output",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "piVar1": "current_memory",
                "piVar2": "current_block",
                "ppiVar3": "memory_list",
                "fill_memory_080091c6": "fill_memory",
                "initialize_memory_08009d24": "initialize_memory"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "set_memory_limit_and_check_08009e64",
            "code": "\nundefined4 set_memory_limit_and_check_08009e64(undefined4 arg1,int arg2,undefined4 *arg3,uint *arg4)\n\n{\n  int result;\n  undefined4 status;\n  undefined stack_memory [4];\n  uint local_var;\n  \n  if ((*(short *)(arg2 + 0xe) < 0) ||\n     (result = set_memory_limit_0800a0ec(arg1,(int)*(short *)(arg2 + 0xe),stack_memory), result < 0)) {\n    *arg4 = 0;\n    if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x18) < 0) {\n      status = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *arg4 = (uint)((local_var & 0xf000) == 0x2000);\n  }\n  status = 0x400;\nLAB_08009ea4:\n  *arg3 = status;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "set_memory_limit_and_check_08009e64",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_4c": "stack_memory",
                "local_48": "local_var"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_data_08009eac",
            "code": "\nvoid initializeData_08009eac(int dataPointer,int *dataArray)\n\n{\n  ushort limitAndCheckResult;\n  int memoryAllocationResult;\n  int size;\n  int *initializedData;\n  \n  if (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x1e)) {\n    size = dataPointer;\n    initializedData = dataArray;\n    limitAndCheckResult = set_memory_limit_and_check_08009e64(dataPointer,dataArray,&size,&initializedData);\n    memoryAllocationResult = allocate_memory_08009270(dataPointer,size);\n    if (memoryAllocationResult != 0) {\n      *(undefined **)(dataPointer + 0x28) = &LAB_08009cd0_1;\n      *dataArray = memoryAllocationResult;\n      *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) | 0x80;\n      dataArray[4] = memoryAllocationResult;\n      dataArray[5] = size;\n      if ((initializedData != (int *)0x0) &&\n         (memoryAllocationResult = initialize_and_check_0800a110(dataPointer,(int)*(short *)((int)dataArray + 0xe)), memoryAllocationResult != 0)) {\n        *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(dataArray + 3) = limitAndCheckResult | *(ushort *)(dataArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(dataArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) & 0xfffc | 2;\n  }\n  *dataArray = (int)dataArray + 0x47;\n  dataArray[4] = (int)dataArray + 0x47;\n  dataArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_data_08009eac",
                "param_1": "dataPointer",
                "param_2": "dataArray",
                "uVar1": "limitAndCheckResult",
                "iVar2": "memoryAllocationResult",
                "local_18": "size",
                "local_14": "initializedData"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_char_in_string_08009f2c",
            "code": "\nchar * find_char_in_string_08009f2c(char *string,char target_char,int string_length)\n\n{\n  char *current_character;\n  char *next_character;\n  \n  current_character = string;\n  do {\n    next_character = current_character;\n    if (next_character == string + string_length) {\n      return (char *)0x0;\n    }\n    current_character = next_character + 1;\n  } while (*next_character != target_char);\n  return next_character;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_char_in_string_08009f2c",
                "param_1": "string",
                "param_2": "target_char",
                "param_3": "string_length",
                "pcVar1": "current_character",
                "pcVar2": "next_character"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "initialize_function_08009fe8",
            "code": "\nint initialize_function_08009fe8(uint input_value)\n\n{\n  int *pointer;\n  undefined4 return_value;\n  int data;\n  code *function_pointer;\n  undefined4 parameter_1;\n  undefined4 parameter_2;\n  undefined4 parameter_3;\n  undefined4 *pointer_array;\n  \n  pointer = DAT_20000090;\n  pointer_array = &DAT_20000090;\n  if (0x1f < input_value) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  data = DAT_20000090[0x11];\n  if ((data != 0) && (function_pointer = *(code **)(data + input_value * 4), function_pointer != (code *)0x0)) {\n    if (function_pointer != (code *)0x1) {\n      if (function_pointer == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(data + input_value * 4) = 0;\n      (*function_pointer)(input_value);\n    }\n    return 0;\n  }\n  return_value = thunk_initialize_application_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  data = initialize_data_0800886c(return_value,input_value,input_value,0,pointer_array,parameter_1,parameter_2,parameter_3);\n  if ((data == -1) && (DAT_20000a38 != 0)) {\n    *pointer = DAT_20000a38;\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "initialize_function_08009fe8",
                "param_1": "input_value",
                "piVar1": "pointer",
                "uVar2": "return_value",
                "iVar3": "data",
                "pcVar4": "function_pointer",
                "unaff_r4": "parameter_1",
                "unaff_r5": "parameter_2",
                "in_lr": "parameter_3",
                "puVar5": "pointer_array"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "get_return_value_thunk_0800887c",
            "code": "\nundefined4 getReturnValue_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "get_return_value_thunk_0800887c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "initialize_and_update_value_0800a020",
            "code": "\nvoid initialize_and_update_value_0800a020(undefined4 program_param,int binary_param)\n\n{\n  int program_result;\n  uint updated_value;\n  bool is_positive;\n  \n  program_result = initialize_and_check_program_0800a168(program_param,(int)*(short *)(binary_param + 0xe));\n  is_positive = -1 < program_result;\n  if (is_positive) {\n    updated_value = *(int *)(binary_param + 0x54) + program_result;\n  }\n  else {\n    updated_value = *(ushort *)(binary_param + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(binary_param + 0x54) = updated_value;\n  }\n  if (!is_positive) {\n    *(short *)(binary_param + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "initialize_and_update_value_0800a020",
                "param_1": "program_param",
                "param_2": "binary_param",
                "iVar1": "program_result",
                "uVar2": "updated_value",
                "bVar3": "is_positive"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "process_input_0800a042",
            "code": "\nvoid processInput_0800a042(int *outputArray,int inputArray,undefined4 paramA,undefined4 paramB)\n\n{\n  int iVar1;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  \n  if ((int)((uint)*(ushort *)(inputArray + 0xc) << 0x17) < 0) {\n    initializeAndCheck(outputArray,(int)*(short *)(inputArray + 0xe),0,2);\n  }\n  *(ushort *)(inputArray + 0xc) = *(ushort *)(inputArray + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  iVar1 = processAndVerifyInput((int)*(short *)(inputArray + 0xe),paramA,paramB,paramB,paramB,tempVar1,\n                       tempVar2,tempVar3);\n  if ((iVar1 == -1) && (DAT_20000a38 != 0)) {\n    *outputArray = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "process_input_0800a042",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "param_3": "paramA",
                "param_4": "paramB",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "in_lr": "tempVar3",
                "initialize_and_check_0800a130": "initializeAndCheck",
                "process_and_verify_input_0800885c": "processAndVerifyInput"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "update_flags_0800a07a",
            "code": "\nvoid updateFlags_0800a07a(undefined4 inputFlag,int data)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isError;\n  \n  result = initialize_and_check_0800a130(inputFlag,(int)*(short *)(data + 0xe));\n  isError = result == -1;\n  if (isError) {\n    updatedValue = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    updatedValue = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(data + 0xc) = updatedValue;\n  }\n  if (!isError) {\n    *(ushort *)(data + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "update_flags_0800a07a",
                "param_1": "inputFlag",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "set_memory_limit_0800a0ec",
            "code": "\nvoid set_memory_limit_0800a0ec(int *output,undefined4 limit_value,undefined4 start_address,undefined4 end_address)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = set_memory_limit_0800a0ec_08008846(limit_value,start_address,start_address,0,end_address);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "set_memory_limit_0800a0ec",
                "param_1": "output",
                "param_2": "limit_value",
                "param_3": "start_address",
                "param_4": "end_address",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "initialize_and_check_0800a110",
            "code": "\nvoid initializeAndCheck_0800a110(int *outputValue,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = initialize_08008850(inputValue);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *outputValue = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "initialize_and_check_0800a110",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "initialize_and_check_0800a130",
            "code": "\nvoid initializeAndCheck_0800a130(int *output,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int iVar1;\n  \n  DAT_20000a38 = 0;\n  iVar1 = initialize(param2,param3,param4,param4,param4);\n  if ((iVar1 == -1) && (DAT_20000a38 != 0)) {\n    *output = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "initialize_and_check_0800a130",
                "param_1": "output",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_08008854": "initialize"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_sum_0800a154",
            "code": "\nint calculateSum_0800a154(undefined4 result,int input)\n\n{\n  int sum;\n  \n  sum = *(int *)(input + -4) + -4;\n  if (*(int *)(input + -4) < 0) {\n    sum = sum + *(int *)(input + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "initialize_and_check_program_0800a168",
            "code": "\nvoid initializeAndCheckProgram_0800a168(int *outputValue,undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  int initResult;\n  \n  DAT_20000a38 = 0;\n  initResult = initialize_program_08008858(inputValue1,inputValue2,inputValue3,inputValue3,inputValue3);\n  if ((initResult == -1) && (DAT_20000a38 != 0)) {\n    *outputValue = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "initialize_and_check_program_0800a168",
                "param_1": "outputValue",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "process_jumptable_0800a18c",
            "code": "\nvoid process_jumptable_0800a18c(void)\n\n{\n  code *jumptable;\n  \n  jumptable = process_jumptable_0800a18c;\n  process_binary_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "process_jumptable_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 209595,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}