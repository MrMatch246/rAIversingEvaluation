{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "get_null_terminated_string_08000178",
            "code": "\nchar * getNullTerminatedString_08000178(char *str)\n\n{\n  char currentChar;\n  char *nextChar;\n  char *currentPosition;\n  \n  currentPosition = str;\n  do {\n    nextChar = currentPosition + 1;\n    currentChar = *currentPosition;\n    currentPosition = nextChar;\n  } while (currentChar != '\\0');\n  return nextChar + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000178": "get_null_terminated_string_08000178",
                "param_1": "str",
                "cVar1": "currentChar",
                "pcVar2": "nextChar",
                "pcVar3": "currentPosition"
            },
            "calling": [
                "printNumber",
                "FUN_08005c96"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_sum_08000190",
            "code": "\nulonglong calculateSum_08000190(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftedBits1;\n  byte carry1;\n  uint sum1;\n  uint shiftedParam4;\n  uint sum2;\n  uint shiftedBits2;\n  uint shiftedParam2;\n  int shiftedBits3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  shiftedBits2 = input4 ^ 0x80000000;\n  temp1 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ shiftedBits2) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (temp1 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shiftedBits3 = (int)temp1 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftedBits3 == -1;\n  }\n  shiftedBits1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftedBits1 == -1;\n  }\n  if (condition2) {\n    if (shiftedBits3 == -1 || shiftedBits1 == -1) {\n      temp1 = shiftedBits2;\n      temp3 = input3;\n      if (shiftedBits3 == -1) {\n        temp1 = input2;\n        temp3 = input1;\n      }\n      if (shiftedBits3 != -1 || shiftedBits1 != -1) {\n        input3 = temp3;\n        shiftedBits2 = temp1;\n      }\n      condition2 = (temp3 | temp1 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | shiftedBits2 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp1 == shiftedBits2;\n      }\n      if (!condition2) {\n        temp1 = temp1 | 0x80000;\n      }\n      return CONCAT44(temp1,temp3);\n    }\n    if (((input2 ^ shiftedBits2) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp1 | input1) == 0) {\n        input1 = input3;\n        input2 = shiftedBits2;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != shiftedBits2) {\n      return 0;\n    }\n    if (temp1 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      shiftedBits2 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        shiftedBits2 = shiftedBits2 | 0x80000000;\n      }\n      return CONCAT44(shiftedBits2,input1 << 1);\n    }\n    if (temp1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp1 = temp1 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp3 = input4 - temp1;\n  condition2 = temp3 != 0;\n  if (input4 < temp1) {\n    temp3 = -temp3;\n  }\n  temp2 = input1;\n  shiftedParam2 = input2;\n  if (condition2 && temp1 <= input4) {\n    temp1 = temp1 + temp3;\n    temp2 = input3;\n    shiftedParam2 = shiftedBits2;\n    input3 = input1;\n    shiftedBits2 = input2;\n  }\n  if (0x36 < temp3) {\n    return CONCAT44(shiftedParam2,temp2);\n  }\n  shiftedParam4 = shiftedParam2 & 0xfffff | 0x100000;\n  if ((shiftedParam2 & 0x80000000) != 0) {\n    condition2 = temp2 != 0;\n    temp2 = -temp2;\n    shiftedParam4 = -shiftedParam4 - (uint)condition2;\n  }\n  shiftedParam2 = shiftedBits2 & 0xfffff | 0x100000;\n  if ((shiftedBits2 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    shiftedParam2 = -shiftedParam2 - (uint)condition2;\n  }\n  if (temp1 == temp3) {\n    shiftedParam2 = shiftedParam2 ^ 0x100000;\n    if (temp1 == 0) {\n      shiftedParam4 = shiftedParam4 ^ 0x100000;\n      temp1 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  shiftedBits2 = -temp3 + 0x20;\n  if ((int)temp3 < 0x21) {\n    temp4 = input3 << (shiftedBits2 & 0xff);\n    input3 = input3 >> (temp3 & 0xff);\n    sum1 = temp2 + input3;\n    sum2 = shiftedParam2 << (shiftedBits2 & 0xff);\n    shiftedBits2 = sum1 + sum2;\n    shiftedParam4 = shiftedParam4 + CARRY4(temp2,input3) + ((int)shiftedParam2 >> (temp3 & 0xff)) +\n            (uint)CARRY4(sum1,sum2);\n  }\n  else {\n    temp4 = shiftedParam2 << (-temp3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    shiftedParam2 = (int)shiftedParam2 >> (temp3 - 0x20 & 0xff);\n    shiftedBits2 = temp2 + shiftedParam2;\n    shiftedParam4 = shiftedParam4 + ((int)shiftedParam2 >> 0x1f) + (uint)CARRY4(temp2,shiftedParam2);\n  }\n  input2 = shiftedParam4 & 0x80000000;\n  temp3 = shiftedParam4;\n  if ((int)shiftedParam4 < 0) {\n    condition2 = temp4 == 0;\n    temp4 = -temp4;\n    temp3 = -shiftedBits2;\n    shiftedBits2 = -(uint)!condition2 - shiftedBits2;\n    temp3 = -(uint)(condition2 <= temp3) - shiftedParam4;\n  }\n  if (0xfffff < temp3) {\n    temp2 = temp1 - 1;\n    if (0x1fffff < temp3) {\n      temp2 = temp3 & 1;\n      temp3 = temp3 >> 1;\n      carry1 = (byte)shiftedBits2;\n      shiftedBits2 = (uint)(temp2 != 0) << 0x1f | shiftedBits2 >> 1;\n      temp4 = (uint)(carry1 & 1) << 0x1f | temp4 >> 1;\n      temp2 = temp1;\n      if (0xffbfffff < temp1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    condition2 = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      condition2 = (shiftedBits2 & 1) != 0;\n    }\n    return CONCAT44(temp3 + temp2 * 0x100000 + (uint)CARRY4(shiftedBits2,(uint)condition2) | input2,\n                    shiftedBits2 + condition2);\n  }\n  condition1 = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  temp2 = shiftedBits2 * 2;\n  condition2 = CARRY4(shiftedBits2,shiftedBits2);\n  shiftedBits2 = shiftedBits2 * 2 + (uint)condition1;\n  temp3 = temp3 * 2 + (uint)(condition2 || CARRY4(temp2,(uint)condition1));\n  temp2 = temp1 - 2;\n  if ((temp3 & 0x100000) != 0) goto LAB_080002a0;\n  shiftedParam2 = shiftedBits2;\n  temp1 = temp3;\n  if (temp3 == 0) {\n    shiftedParam2 = 0;\n    temp1 = shiftedBits2;\n  }\n  shiftedBits3 = LZCOUNT(temp1);\n  if (temp3 == 0) {\n    shiftedBits3 = shiftedBits3 + 0x20;\n  }\n  temp3 = shiftedBits3 - 0xb;\n  condition3 = SBORROW4(temp3,0x20);\n  shiftedBits2 = shiftedBits3 - 0x2b;\n  condition2 = (int)shiftedBits2 < 0;\n  condition1 = shiftedBits2 == 0;\n  if ((int)temp3 < 0x20) {\n    condition3 = SCARRY4(shiftedBits2,0xc);\n    shiftedBits3 = shiftedBits3 + -0x1f;\n    condition2 = shiftedBits3 < 0;\n    condition1 = shiftedBits3 == 0;\n    shiftedBits2 = temp3;\n    if (!condition1 && condition2 == condition3) {\n      shiftedParam2 = temp1 << (temp3 & 0xff);\n      temp1 = temp1 >> (0xcU - shiftedBits3 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp4 = 0x20 - shiftedBits2;\n  }\n  temp1 = temp1 << (shiftedBits2 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp1 = temp1 | shiftedParam2 >> (temp4 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    shiftedParam2 = shiftedParam2 << (shiftedBits2 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp3 <= (int)temp2) {\n    return CONCAT44(temp1 + (temp2 - temp3) * 0x100000 | input2,shiftedParam2);\n  }\n  shiftedBits2 = ~(temp2 - temp3);\n  if ((int)shiftedBits2 < 0x1f) {\n    shiftedBits3 = shiftedBits2 - 0x13;\n    if (shiftedBits3 != 0 && shiftedBits3 < 0 == SCARRY4(shiftedBits2 - 0x1f,0xc)) {\n      return CONCAT44(shiftedParam4,shiftedParam2 >> (0x20 - (0xcU - shiftedBits3) & 0xff) | temp1 << (0xcU - shiftedBits3 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedBits2 = shiftedBits2 + 1;\n    return CONCAT44(input2 | temp1 >> (shiftedBits2 & 0xff),\n                    shiftedParam2 >> (shiftedBits2 & 0xff) | temp1 << (0x20 - shiftedBits2 & 0xff));\n  }\n  return CONCAT44(shiftedParam4,temp1 >> (shiftedBits2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_sum_08000190",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedBits1",
                "bVar2": "carry1",
                "uVar3": "sum1",
                "uVar4": "shiftedParam4",
                "uVar5": "sum2",
                "uVar6": "shiftedBits2",
                "uVar7": "shiftedParam2",
                "iVar8": "shiftedBits3",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "Compute",
                "printFloat",
                "SetControllerDirection",
                "FUN_08001814"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "perform_arithmetic_08000194",
            "code": "\nulonglong performArithmetic_08000194(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int signBit1;\n  byte bit1;\n  uint result1;\n  uint result2;\n  uint operand1;\n  int signBit2;\n  uint operand2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool equal;\n  bool condition;\n  bool borrow;\n  \n  operand2 = param_2 << 1;\n  temp2 = param_4 << 1;\n  equal = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  condition = equal && param_1 == param_3;\n  if (!equal || param_1 != param_3) {\n    condition = (operand2 | param_1) == 0;\n  }\n  if (!condition) {\n    condition = (temp2 | param_3) == 0;\n  }\n  signBit2 = (int)operand2 >> 0x15;\n  if (!condition) {\n    condition = signBit2 == -1;\n  }\n  signBit1 = (int)temp2 >> 0x15;\n  if (!condition) {\n    condition = signBit1 == -1;\n  }\n  if (condition) {\n    if (signBit2 == -1 || signBit1 == -1) {\n      temp2 = param_4;\n      operand2 = param_3;\n      if (signBit2 == -1) {\n        temp2 = param_2;\n        operand2 = param_1;\n      }\n      if (signBit2 != -1 || signBit1 != -1) {\n        param_3 = operand2;\n        param_4 = temp2;\n      }\n      condition = (operand2 | temp2 << 0xc) == 0;\n      if (condition) {\n        condition = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (condition) {\n        condition = temp2 == param_4;\n      }\n      if (!condition) {\n        temp2 = temp2 | 0x80000;\n      }\n      return CONCAT44(temp2,operand2);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((operand2 | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (operand2 >> 0x15 == 0) {\n      condition = (param_1 & 0x80000000) != 0;\n      temp2 = param_2 * 2 + (uint)condition;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)condition)) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return CONCAT44(temp2,param_1 << 1);\n    }\n    if (operand2 < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  operand2 = operand2 >> 0x15;\n  temp2 = temp2 >> 0x15;\n  temp3 = temp2 - operand2;\n  condition = temp3 != 0;\n  if (temp2 < operand2) {\n    temp3 = -temp3;\n  }\n  temp1 = param_1;\n  operand1 = param_2;\n  if (condition && operand2 <= temp2) {\n    operand2 = operand2 + temp3;\n    temp1 = param_3;\n    operand1 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < temp3) {\n    return CONCAT44(operand1,temp1);\n  }\n  temp2 = operand1 & 0xfffff | 0x100000;\n  if ((operand1 & 0x80000000) != 0) {\n    condition = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)condition;\n  }\n  operand1 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    condition = param_3 != 0;\n    param_3 = -param_3;\n    operand1 = -operand1 - (uint)condition;\n  }\n  if (operand2 == temp3) {\n    operand1 = operand1 ^ 0x100000;\n    if (operand2 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      operand2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp5 = -temp3 + 0x20;\n  if ((int)temp3 < 0x21) {\n    temp4 = param_3 << (temp5 & 0xff);\n    param_3 = param_3 >> (temp3 & 0xff);\n    result1 = temp1 + param_3;\n    result2 = operand1 << (temp5 & 0xff);\n    temp5 = result1 + result2;\n    temp2 = temp2 + CARRY4(temp1,param_3) + ((int)operand1 >> (temp3 & 0xff)) +\n            (uint)CARRY4(result1,result2);\n  }\n  else {\n    temp4 = operand1 << (-temp3 + 0x40 & 0xff);\n    if (param_3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    operand1 = (int)operand1 >> (temp3 - 0x20 & 0xff);\n    temp5 = temp1 + operand1;\n    temp2 = temp2 + ((int)operand1 >> 0x1f) + (uint)CARRY4(temp1,operand1);\n  }\n  param_2 = temp2 & 0x80000000;\n  temp3 = temp2;\n  if ((int)temp2 < 0) {\n    condition = temp4 == 0;\n    temp4 = -temp4;\n    temp3 = -temp5;\n    temp5 = -(uint)!condition - temp5;\n    temp3 = -(uint)(condition <= temp3) - temp2;\n  }\n  if (0xfffff < temp3) {\n    temp1 = operand2 - 1;\n    if (0x1fffff < temp3) {\n      temp2 = temp3 & 1;\n      temp3 = temp3 >> 1;\n      bit1 = (byte)temp5;\n      temp5 = (uint)(temp2 != 0) << 0x1f | temp5 >> 1;\n      temp4 = (uint)(bit1 & 1) << 0x1f | temp4 >> 1;\n      temp1 = operand2;\n      if (0xffbfffff < operand2 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    condition = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      condition = (temp5 & 1) != 0;\n    }\n    return CONCAT44(temp3 + temp1 * 0x100000 + (uint)CARRY4(temp5,(uint)condition) | param_2,\n                    temp5 + condition);\n  }\n  equal = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  temp1 = temp5 * 2;\n  condition = CARRY4(temp5,temp5);\n  temp5 = temp5 * 2 + (uint)equal;\n  temp3 = temp3 * 2 + (uint)(condition || CARRY4(temp1,(uint)equal));\n  temp1 = operand2 - 2;\n  if ((temp3 & 0x100000) != 0) goto LAB_080002a0;\n  operand1 = temp5;\n  operand2 = temp3;\n  if (temp3 == 0) {\n    operand1 = 0;\n    operand2 = temp5;\n  }\n  signBit2 = LZCOUNT(operand2);\n  if (temp3 == 0) {\n    signBit2 = signBit2 + 0x20;\n  }\n  temp5 = signBit2 - 0xb;\n  borrow = SBORROW4(temp5,0x20);\n  temp3 = signBit2 - 0x2b;\n  condition = (int)temp3 < 0;\n  equal = temp3 == 0;\n  if ((int)temp5 < 0x20) {\n    borrow = SCARRY4(temp3,0xc);\n    signBit2 = signBit2 + -0x1f;\n    condition = signBit2 < 0;\n    equal = signBit2 == 0;\n    temp3 = temp5;\n    if (!equal && condition == borrow) {\n      operand1 = operand2 << (temp5 & 0xff);\n      operand2 = operand2 >> (0xcU - signBit2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (equal || condition != borrow) {\n    temp4 = 0x20 - temp3;\n  }\n  operand2 = operand2 << (temp3 & 0xff);\n  if (equal || condition != borrow) {\n    operand2 = operand2 | operand1 >> (temp4 & 0xff);\n  }\n  if (equal || condition != borrow) {\n    operand1 = operand1 << (temp3 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp5 <= (int)temp1) {\n    return CONCAT44(operand2 + (temp1 - temp5) * 0x100000 | param_2,operand1);\n  }\n  temp3 = ~(temp1 - temp5);\n  if ((int)temp3 < 0x1f) {\n    signBit2 = temp3 - 0x13;\n    if (signBit2 != 0 && signBit2 < 0 == SCARRY4(temp3 - 0x1f,0xc)) {\n      return CONCAT44(temp2,operand1 >> (0x20 - (0xcU - signBit2) & 0xff) | operand2 << (0xcU - signBit2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp3 = temp3 + 1;\n    return CONCAT44(param_2 | operand2 >> (temp3 & 0xff),\n                    operand1 >> (temp3 & 0xff) | operand2 << (0x20 - temp3 & 0xff));\n  }\n  return CONCAT44(temp2,operand2 >> (temp3 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "perform_arithmetic_08000194",
                "iVar1": "signBit1",
                "bVar2": "bit1",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "operand1",
                "iVar6": "signBit2",
                "uVar7": "operand2",
                "uVar8": "temp1",
                "uVar9": "temp2",
                "uVar10": "temp3",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "equal",
                "bVar14": "condition",
                "bVar15": "borrow"
            },
            "calling": [
                "readThermocouple",
                "Compute",
                "printFloat",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "reversed_binary_operation_0800040c",
            "code": "\nulonglong reversedBinaryOperation_0800040c(uint inputValue)\n\n{\n  uint result;\n  uint shiftValue;\n  int lzCount;\n  uint adjustedShift;\n  uint constant;\n  bool isNegativeShift;\n  bool isZeroShift;\n  bool isBorrow;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  result = 0;\n  lzCount = LZCOUNT(inputValue);\n  adjustedShift = lzCount + 0x15;\n  isBorrow = SBORROW4(adjustedShift,0x20);\n  shiftValue = lzCount - 0xb;\n  isNegativeShift = (int)shiftValue < 0;\n  isZeroShift = shiftValue == 0;\n  if (adjustedShift < 0x20) {\n    isBorrow = SCARRY4(shiftValue,0xc);\n    isNegativeShift = false;\n    isZeroShift = lzCount + 1 == 0;\n    shiftValue = adjustedShift;\n    if (!isZeroShift && isBorrow == false) {\n      result = inputValue << adjustedShift;\n      inputValue = inputValue >> (0xcU - (lzCount + 1) & 0xff);\n      goto shiftRightBlock;\n    }\n  }\n  if (isZeroShift || isNegativeShift != isBorrow) {\n    constant = 0x20 - shiftValue;\n  }\n  inputValue = inputValue << (shiftValue & 0xff);\n  if (isZeroShift || isNegativeShift != isBorrow) {\n    inputValue = inputValue | 0U >> (constant & 0xff);\n  }\n  if (isZeroShift || isNegativeShift != isBorrow) {\n    result = 0 << (shiftValue & 0xff);\n  }\nshiftRightBlock:\n  if (adjustedShift < 0x433) {\n    return CONCAT44(inputValue + (0x432 - adjustedShift) * 0x100000,result);\n  }\n  shiftValue = ~(0x432 - adjustedShift);\n  if (0x1e < (int)shiftValue) {\n    return (ulonglong)(inputValue >> (shiftValue - 0x1f & 0xff));\n  }\n  lzCount = shiftValue - 0x13;\n  if (lzCount == 0 || lzCount < 0 != SCARRY4(shiftValue - 0x1f,0xc)) {\n    shiftValue = shiftValue + 1;\n    return CONCAT44(inputValue >> (shiftValue & 0xff),\n                    result >> (shiftValue & 0xff) | inputValue << (0x20 - shiftValue & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - lzCount) & 0xff) | inputValue << (0xcU - lzCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "reversed_binary_operation_0800040c",
                "param_1": "inputValue",
                "uVar1": "result",
                "uVar2": "shiftValue",
                "iVar3": "lzCount",
                "uVar4": "adjustedShift",
                "in_r12": "constant",
                "bVar5": "isNegativeShift",
                "bVar6": "isZeroShift",
                "bVar7": "isBorrow",
                "LAB_08000318": "shiftRightBlock"
            },
            "calling": [
                "readThermocouple",
                "printFloat",
                "loop",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "calculate_shifted_value_0800042c",
            "code": "\nulonglong calculate_shifted_value_0800042c(uint input_value)\n\n{\n  uint shift_amount;\n  uint absolute_value;\n  uint shifted_value;\n  int leading_zeros;\n  uint shifted_offset;\n  uint sign_bit;\n  uint remainder;\n  bool is_negative;\n  bool is_zero;\n  bool is_borrow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  absolute_value = input_value;\n  if ((int)sign_bit < 0) {\n    absolute_value = -input_value;\n  }\n  shift_amount = 0;\n  leading_zeros = LZCOUNT(absolute_value);\n  shifted_offset = leading_zeros + 0x15;\n  is_borrow = SBORROW4(shifted_offset,0x20);\n  shifted_value = leading_zeros - 0xb;\n  is_negative = (int)shifted_value < 0;\n  is_zero = shifted_value == 0;\n  if (shifted_offset < 0x20) {\n    is_borrow = SCARRY4(shifted_value,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shifted_value = shifted_offset;\n    if (!is_zero && is_borrow == false) {\n      shift_amount = absolute_value << shifted_offset;\n      absolute_value = absolute_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_zero || is_negative != is_borrow) {\n    remainder = 0x20 - shifted_value;\n  }\n  absolute_value = absolute_value << (shifted_value & 0xff);\n  if (is_zero || is_negative != is_borrow) {\n    absolute_value = absolute_value | 0U >> (remainder & 0xff);\n  }\n  if (is_zero || is_negative != is_borrow) {\n    shift_amount = 0 << (shifted_value & 0xff);\n  }\nLAB_08000318:\n  if (shifted_offset < 0x433) {\n    return CONCAT44(absolute_value + (0x432 - shifted_offset) * 0x100000 | sign_bit,shift_amount);\n  }\n  shifted_value = ~(0x432 - shifted_offset);\n  if (0x1e < (int)shifted_value) {\n    return CONCAT44(input_value,absolute_value >> (shifted_value - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shifted_value - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shifted_value - 0x1f,0xc)) {\n    shifted_value = shifted_value + 1;\n    return CONCAT44(sign_bit | absolute_value >> (shifted_value & 0xff),\n                    shift_amount >> (shifted_value & 0xff) | absolute_value << (0x20 - shifted_value & 0xff));\n  }\n  return CONCAT44(input_value,shift_amount >> (0x20 - (0xcU - leading_zeros) & 0xff) | absolute_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "calculate_shifted_value_0800042c",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "uVar2": "absolute_value",
                "uVar3": "shifted_value",
                "iVar4": "leading_zeros",
                "uVar5": "shifted_offset",
                "uVar6": "sign_bit",
                "in_r12": "remainder",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_borrow"
            },
            "calling": [
                "printFloat",
                "loop",
                "SetSampleTime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_combined_params_080004f8",
            "code": "\nulonglong calculateCombinedParams_080004f8(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint var1;\n  uint var2;\n  int var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  uint var7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  var6 = 0x7ff;\n  var2 = param2 >> 0x14 & 0x7ff;\n  flag1 = var2 == 0;\n  if (!flag1) {\n    var5 = param4 >> 0x14 & 0x7ff;\n    flag1 = var5 == 0;\n  }\n  if (!flag1) {\n    flag1 = var2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = var5 == 0x7ff;\n  }\n  if (flag1) {\n    combinedParams = calculate_combined_param_080006d4();\n  }\n  var1 = (uint)(combinedParams >> 0x20);\n  var3 = var2 + var5;\n  var2 = var1 ^ param4;\n  var1 = var1 & ~(var6 << 0x15);\n  param4 = param4 & ~(var6 << 0x15);\n  flag1 = ((uint)combinedParams | var1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (param3 | param4 << 0xc) == 0;\n  }\n  var1 = var1 | 0x100000;\n  param4 = param4 | 0x100000;\n  if (flag1) {\n    param3 = (uint)combinedParams | param3;\n    param4 = (var2 & 0x80000000 | var1) ^ param4;\n    var2 = var6 >> 1;\n    flag3 = SBORROW4(var3,var2);\n    var4 = var3 - var2;\n    flag1 = var4 == 0;\n    var1 = var4;\n    if (!flag1 && (int)var2 <= var3) {\n      flag3 = SBORROW4(var6,var4);\n      var1 = var6 - var4;\n      flag1 = var6 == var4;\n    }\n    if (!flag1 && (int)var1 < 0 == flag3) {\n      param4 = param4 | var4 * 0x100000;\n    }\n    if (!flag1 && (int)var1 < 0 == flag3) {\n      return CONCAT44(param4,param3);\n    }\n    param4 = param4 | 0x100000;\n    var6 = 0;\n    flag3 = SBORROW4(var4,1);\n    var4 = var4 - 1;\n    flag1 = var4 == 0;\n    var2 = var4;\n  }\n  else {\n    result1 = (combinedParams & 0xffffffff) * (ulonglong)param3;\n    combinedParams = (combinedParams & 0xffffffff) * (ulonglong)param4 +\n             (ulonglong)var1 * (ulonglong)param3 + (result1 >> 0x20);\n    var7 = (uint)combinedParams;\n    result2 = (ulonglong)var1 * (ulonglong)param4 + (combinedParams >> 0x20);\n    var6 = (uint)result2;\n    var1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      var7 = var7 | 1;\n    }\n    var4 = (var3 + -0x3ff) - (uint)(var1 < 0x200);\n    if (var1 < 0x200) {\n      flag1 = (var7 & 0x80000000) != 0;\n      var7 = var7 << 1;\n      result2 = CONCAT44(var1 * 2 + (uint)(CARRY4(var6,var6) || CARRY4(var6 * 2,(uint)flag1)),\n                       var6 * 2 + (uint)flag1);\n    }\n    param4 = var2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    param3 = (uint)result2 << 0xb | var7 >> 0x15;\n    var6 = var7 * 0x800;\n    flag2 = 0xfc < var4;\n    flag3 = SBORROW4(var4,0xfd);\n    var1 = var4 - 0xfd;\n    flag1 = var1 == 0;\n    var2 = var1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < var1;\n      flag3 = SBORROW4(var1,0x700);\n      var2 = var4 - 0x7fd;\n      flag1 = var1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < var6;\n      if (var6 == 0x80000000) {\n        flag1 = (var7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param4 + var4 * 0x100000 + (uint)CARRY4(param3,(uint)flag1),param3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)var2 < 0 == flag3) {\n    return (ulonglong)(param4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(var4,0x36);\n  flag1 = (int)(var4 + 0x36) < 0;\n  flag3 = var4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    param3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    param4 = param4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(param4,param3);\n  }\n  var2 = -var4;\n  var1 = var2 - 0x20;\n  if (0x1f < (int)var2) {\n    var4 = param3 >> (var1 & 0xff) | param4 << (0x20 - var1 & 0xff);\n    var2 = (param4 >> (var1 & 0xff) & ~((param4 & 0x80000000) >> (var1 & 0xff))) -\n            ((int)var4 >> 0x1f);\n    if ((var6 | param3 << (0x20 - var1 & 0xff) | var4 << 1) == 0) {\n      var2 = var2 & ~(var4 >> 0x1f);\n    }\n    return CONCAT44(param4,var2) & 0x80000000ffffffff;\n  }\n  var3 = var2 - 0x14;\n  if (var3 == 0 || var3 < 0 != SCARRY4(var1,0xc)) {\n    var7 = param3 << (var4 + 0x20 & 0xff);\n    var1 = param3 >> (var2 & 0xff) | param4 << (var4 + 0x20 & 0xff);\n    var4 = var1 + -((int)var7 >> 0x1f);\n    if ((var6 | var7 << 1) == 0) {\n      var4 = var4 & ~(var7 >> 0x1f);\n    }\n    return CONCAT44((param4 & 0x80000000) +\n                    ((param4 & 0x7fffffff) >> (var2 & 0xff)) +\n                    (uint)CARRY4(var1,-((int)var7 >> 0x1f)),var4);\n  }\n  var2 = 0xc - var3;\n  var4 = param3 << (var2 & 0xff);\n  var2 = param3 >> (0x20 - var2 & 0xff) | param4 << (var2 & 0xff);\n  var1 = var2 + -((int)var4 >> 0x1f);\n  if ((var6 | var4 << 1) == 0) {\n    var1 = var1 & ~(var4 >> 0x1f);\n  }\n  return CONCAT44((param4 & 0x80000000) + (uint)CARRY4(var2,-((int)var4 >> 0x1f)),var1);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_combined_params_080004f8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "var1",
                "uVar4": "var2",
                "iVar5": "var3",
                "uVar6": "var4",
                "unaff_r5": "var5",
                "uVar7": "var6",
                "uVar8": "var7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combinedParams"
            },
            "calling": [
                "readThermocouple",
                "Compute",
                "printFloat",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "calculate_combined_param_080006d4",
            "code": "\nulonglong calculate_combined_param_080006d4(uint input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input_param4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    is_zero = (input_param1 | input_param2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_param3 | input_param4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_param2 ^ input_param4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = input_param2 & 0x80000000;\n      do {\n        bit1 = input_param1 & 0x80000000;\n        input_param1 = input_param1 << 1;\n        input_param2 = input_param2 * 2 + (uint)(bit1 != 0);\n      } while ((input_param2 & 0x100000) == 0);\n      input_param2 = input_param2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input_param2,input_param1);\n      }\n    }\n    do {\n      bit3 = input_param3 & 0x80000000;\n      input_param3 = input_param3 << 1;\n      input_param4 = input_param4 * 2 + (uint)(bit3 != 0);\n    } while ((input_param4 & 0x100000) == 0);\n    return CONCAT44(input_param2,input_param1);\n  }\n  is_zero = (input_param1 | input_param2 << 1) == 0;\n  if (is_zero) {\n    input_param2 = input_param4;\n    input_param1 = input_param3;\n  }\n  if (!is_zero) {\n    is_zero = (input_param3 | input_param4 << 1) == 0;\n  }\n  bit4 = input_param2;\n  if (((!is_zero) && ((bit2 != bit5 || ((input_param1 | input_param2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (input_param1 = input_param3, bit4 = input_param4, (input_param3 | input_param4 << 0xc) == 0)))) {\n    return (ulonglong)((input_param2 ^ input_param4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input_param1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "calculate_combined_param_080006d4",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "is_zero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_floating_point_0800074c",
            "code": "\nulonglong calculateFloatingPoint_0800074c(undefined4 mantissa,uint exponent,uint significand,uint source)\n\n{\n  uint bitwiseData1;\n  uint bitwiseData2;\n  uint bitwiseData3;\n  uint bitwiseData4;\n  uint bitwiseData5;\n  uint bitwiseData6;\n  uint bitwiseData7;\n  int difference;\n  uint normalizedExponent;\n  uint sourceExponent;\n  uint normalizedExponent1;\n  uint mantissa1;\n  uint difference1;\n  uint bitwiseData8;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  undefined8 extractedData;\n  \n  extractedData = CONCAT44(exponent,mantissa);\n  bitwiseData8 = 0x7ff;\n  bitwiseData7 = exponent >> 0x14 & 0x7ff;\n  condition1 = bitwiseData7 == 0;\n  if (!condition1) {\n    sourceExponent = source >> 0x14 & 0x7ff;\n    condition1 = sourceExponent == 0;\n  }\n  if (!condition1) {\n    condition1 = bitwiseData7 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = sourceExponent == 0x7ff;\n  }\n  if (condition1) {\n    extractedData = extract_bitwise_data_080008ba();\n  }\n  normalizedExponent = (uint)((ulonglong)extractedData >> 0x20);\n  mantissa1 = (uint)extractedData;\n  difference = bitwiseData7 - sourceExponent;\n  if ((significand | source << 0xc) == 0) {\n    bitwiseData7 = (normalizedExponent ^ source) & 0x80000000 | normalizedExponent & 0xfffff;\n    condition3 = SCARRY4(difference,bitwiseData8 >> 1);\n    normalizedExponent = difference + (bitwiseData8 >> 1);\n    condition1 = (int)normalizedExponent < 0;\n    condition2 = normalizedExponent == 0;\n    if (!condition2 && condition1 == condition3) {\n      condition3 = SBORROW4(bitwiseData8,normalizedExponent);\n      condition1 = (int)(bitwiseData8 - normalizedExponent) < 0;\n      condition2 = bitwiseData8 == normalizedExponent;\n    }\n    if (!condition2 && condition1 == condition3) {\n      bitwiseData7 = bitwiseData7 | normalizedExponent * 0x100000;\n    }\n    if (!condition2 && condition1 == condition3) {\n      return CONCAT44(bitwiseData7,mantissa1);\n    }\n    bitwiseData7 = bitwiseData7 | 0x100000;\n    bitwiseData8 = 0;\n    condition2 = SBORROW4(normalizedExponent,1);\n    normalizedExponent = normalizedExponent - 1;\n    condition1 = normalizedExponent == 0;\n    bitwiseData3 = normalizedExponent;\n  }\n  else {\n    bitwiseData3 = (source << 0xc) >> 4 | 0x10000000 | significand >> 0x18;\n    bitwiseData8 = significand << 8;\n    normalizedExponent1 = (normalizedExponent << 0xc) >> 4 | 0x10000000 | mantissa1 >> 0x18;\n    mantissa1 = mantissa1 * 0x100;\n    bitwiseData7 = (normalizedExponent ^ source) & 0x80000000;\n    condition1 = bitwiseData3 <= normalizedExponent1;\n    if (normalizedExponent1 == bitwiseData3) {\n      condition1 = bitwiseData8 <= mantissa1;\n    }\n    difference = difference + (uint)condition1;\n    normalizedExponent = difference + 0x3fd;\n    if (condition1 == false) {\n      bitwiseData3 = bitwiseData3 >> 1;\n      bitwiseData8 = (uint)((significand >> 0x18 & 1) != 0) << 0x1f | bitwiseData8 >> 1;\n    }\n    difference1 = mantissa1 - bitwiseData8;\n    normalizedExponent1 = (normalizedExponent1 - bitwiseData3) - (uint)(mantissa1 < bitwiseData8);\n    bitwiseData4 = bitwiseData3 >> 1;\n    bitwiseData1 = (uint)((bitwiseData3 & 1) != 0) << 0x1f | bitwiseData8 >> 1;\n    mantissa1 = 0x100000;\n    bitwiseData3 = 0x80000;\n    while( true ) {\n      condition1 = bitwiseData1 <= difference1;\n      if (bitwiseData4 < normalizedExponent1 || normalizedExponent1 - bitwiseData4 < (uint)condition1) {\n        difference1 = difference1 - bitwiseData1;\n        mantissa1 = mantissa1 | bitwiseData3;\n        normalizedExponent1 = (normalizedExponent1 - bitwiseData4) - (uint)!condition1;\n      }\n      bitwiseData5 = bitwiseData4 >> 1;\n      bitwiseData1 = (uint)((bitwiseData4 & 1) != 0) << 0x1f | bitwiseData1 >> 1;\n      condition2 = bitwiseData1 <= difference1;\n      condition1 = normalizedExponent1 - bitwiseData5 < (uint)condition2;\n      bitwiseData8 = normalizedExponent1;\n      if (bitwiseData5 < normalizedExponent1 || condition1) {\n        difference1 = difference1 - bitwiseData1;\n        bitwiseData8 = (normalizedExponent1 - bitwiseData5) - (uint)!condition2;\n      }\n      if (bitwiseData5 < normalizedExponent1 || condition1) {\n        mantissa1 = mantissa1 | bitwiseData3 >> 1;\n      }\n      normalizedExponent1 = bitwiseData4 >> 2;\n      bitwiseData2 = (uint)((bitwiseData5 & 1) != 0) << 0x1f | bitwiseData1 >> 1;\n      condition2 = bitwiseData2 <= difference1;\n      condition1 = bitwiseData8 - normalizedExponent1 < (uint)condition2;\n      bitwiseData5 = bitwiseData8;\n      if (normalizedExponent1 < bitwiseData8 || condition1) {\n        difference1 = difference1 - bitwiseData2;\n        bitwiseData5 = (bitwiseData8 - normalizedExponent1) - (uint)!condition2;\n      }\n      if (normalizedExponent1 < bitwiseData8 || condition1) {\n        mantissa1 = mantissa1 | bitwiseData3 >> 2;\n      }\n      bitwiseData6 = bitwiseData4 >> 3;\n      bitwiseData1 = (uint)((normalizedExponent1 & 1) != 0) << 0x1f | bitwiseData2 >> 1;\n      condition2 = bitwiseData1 <= difference1;\n      condition1 = bitwiseData5 - bitwiseData6 < (uint)condition2;\n      normalizedExponent1 = bitwiseData5;\n      if (bitwiseData6 < bitwiseData5 || condition1) {\n        difference1 = difference1 - bitwiseData1;\n        normalizedExponent1 = (bitwiseData5 - bitwiseData6) - (uint)!condition2;\n      }\n      if (bitwiseData6 < bitwiseData5 || condition1) {\n        mantissa1 = mantissa1 | bitwiseData3 >> 3;\n      }\n      bitwiseData8 = normalizedExponent1 | difference1;\n      if (bitwiseData8 == 0) break;\n      normalizedExponent1 = normalizedExponent1 << 4 | difference1 >> 0x1c;\n      difference1 = difference1 << 4;\n      bitwiseData4 = bitwiseData4 & 0xfffffff8 | bitwiseData1 >> 0x1d;\n      bitwiseData1 = (bitwiseData2 >> 1) << 3;\n      bitwiseData3 = bitwiseData3 >> 4;\n      if (bitwiseData3 == 0) {\n        bitwiseData6 = bitwiseData4;\n        if ((bitwiseData7 & 0x100000) != 0) goto LAB_0800086a;\n        bitwiseData7 = bitwiseData7 | mantissa1;\n        mantissa1 = 0;\n        bitwiseData3 = 0x80000000;\n      }\n    }\n    if ((bitwiseData7 & 0x100000) == 0) {\n      bitwiseData7 = bitwiseData7 | mantissa1;\n      mantissa1 = 0;\n    }\nLAB_0800086a:\n    condition3 = 0xfc < normalizedExponent;\n    condition2 = SBORROW4(normalizedExponent,0xfd);\n    bitwiseData4 = difference + 0x300;\n    condition1 = bitwiseData4 == 0;\n    bitwiseData3 = bitwiseData4;\n    if (condition3 && !condition1) {\n      condition3 = 0x6ff < bitwiseData4;\n      condition2 = SBORROW4(bitwiseData4,0x700);\n      bitwiseData3 = difference - 0x400;\n      condition1 = bitwiseData4 == 0x700;\n    }\n    if (!condition3 || condition1) {\n      condition1 = bitwiseData6 <= normalizedExponent1;\n      if (normalizedExponent1 == bitwiseData6) {\n        condition1 = bitwiseData1 <= difference1;\n      }\n      if (normalizedExponent1 == bitwiseData6 && difference1 == bitwiseData1) {\n        condition1 = (mantissa1 & 1) != 0;\n      }\n      return CONCAT44(bitwiseData7 + normalizedExponent * 0x100000 + (uint)CARRY4(mantissa1,(uint)condition1),mantissa1 + condition1);\n    }\n  }\n  if (!condition1 && (int)bitwiseData3 < 0 == condition2) {\n    return (ulonglong)(bitwiseData7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition3 = SCARRY4(normalizedExponent,0x36);\n  condition1 = (int)(normalizedExponent + 0x36) < 0;\n  condition2 = normalizedExponent == 0xffffffca;\n  if (condition2 || condition1 != condition3) {\n    mantissa1 = 0;\n  }\n  if (condition2 || condition1 != condition3) {\n    bitwiseData7 = bitwiseData7 & 0x80000000;\n  }\n  if (condition2 || condition1 != condition3) {\n    return CONCAT44(bitwiseData7,mantissa1);\n  }\n  bitwiseData3 = -normalizedExponent;\n  normalizedExponent1 = bitwiseData3 - 0x20;\n  if (0x1f < (int)bitwiseData3) {\n    bitwiseData3 = mantissa1 >> (normalizedExponent1 & 0xff) | bitwiseData7 << (0x20 - normalizedExponent1 & 0xff);\n    normalizedExponent = (bitwiseData7 >> (normalizedExponent1 & 0xff) & ~((bitwiseData7 & 0x80000000) >> (normalizedExponent1 & 0xff))) -\n            ((int)bitwiseData3 >> 0x1f);\n    if ((bitwiseData8 | mantissa1 << (0x20 - normalizedExponent1 & 0xff) | bitwiseData3 << 1) == 0) {\n      normalizedExponent = normalizedExponent & ~(bitwiseData3 >> 0x1f);\n    }\n    return CONCAT44(bitwiseData7,normalizedExponent) & 0x80000000ffffffff;\n  }\n  difference = bitwiseData3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(normalizedExponent1,0xc)) {\n    normalizedExponent = 0xc - difference;\n    bitwiseData3 = mantissa1 << (normalizedExponent & 0xff);\n    mantissa1 = mantissa1 >> (0x20 - normalizedExponent & 0xff) | bitwiseData7 << (normalizedExponent & 0xff);\n    normalizedExponent = mantissa1 + -((int)bitwiseData3 >> 0x1f);\n    if ((bitwiseData8 | bitwiseData3 << 1) == 0) {\n      normalizedExponent = normalizedExponent & ~(bitwiseData3 >> 0x1f);\n    }\n    return CONCAT44((bitwiseData7 & 0x80000000) + (uint)CARRY4(mantissa1,-((int)bitwiseData3 >> 0x1f)),normalizedExponent);\n  }\n  normalizedExponent1 = mantissa1 << (normalizedExponent + 0x20 & 0xff);\n  mantissa1 = mantissa1 >> (bitwiseData3 & 0xff) | bitwiseData7 << (normalizedExponent + 0x20 & 0xff);\n  normalizedExponent = mantissa1 + -((int)normalizedExponent1 >> 0x1f);\n  if ((bitwiseData8 | normalizedExponent1 << 1) == 0) {\n    normalizedExponent = normalizedExponent & ~(normalizedExponent1 >> 0x1f);\n  }\n  return CONCAT44((bitwiseData7 & 0x80000000) +\n                  ((bitwiseData7 & 0x7fffffff) >> (bitwiseData3 & 0xff)) +\n                  (uint)CARRY4(mantissa1,-((int)normalizedExponent1 >> 0x1f)),normalizedExponent);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "param_1": "mantissa",
                "param_2": "exponent",
                "param_3": "significand",
                "param_4": "source",
                "uVar1": "bitwiseData1",
                "uVar2": "bitwiseData2",
                "uVar3": "bitwiseData3",
                "uVar4": "bitwiseData4",
                "uVar5": "bitwiseData5",
                "uVar6": "bitwiseData6",
                "uVar7": "bitwiseData7",
                "iVar8": "difference",
                "uVar9": "normalizedExponent",
                "unaff_r5": "sourceExponent",
                "uVar10": "normalizedExponent1",
                "uVar11": "mantissa1",
                "uVar12": "difference1",
                "uVar13": "bitwiseData8",
                "bVar14": "condition1",
                "bVar15": "condition2",
                "bVar16": "condition3",
                "uVar17": "extractedData"
            },
            "calling": [
                "readThermocouple",
                "printFloat",
                "SetSampleTime",
                "FUN_08001814"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "extract_bitwise_data_080008ba",
            "code": "\nulonglong extract_bitwise_data_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp2;\n  uint temp1;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool temp_boolean;\n  \n  temp3 = temp5 & input4 >> 0x14;\n  temp4 = input2;\n  if (temp1 != temp5 || temp3 != temp5) {\n    if (temp1 == temp5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp4 = input4, temp3 != temp5)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp3 == temp5) {\n      input1 = input3;\n      temp4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      temp_boolean = (input1 | input2 << 1) == 0;\n      if (!temp_boolean) {\n        temp_boolean = (input3 | input4 << 1) == 0;\n      }\n      if (!temp_boolean) {\n        if (temp1 == 0) {\n          temp4 = input2 & 0x80000000;\n          do {\n            temp2 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp2 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp4;\n          if (temp3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "extract_bitwise_data_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "unaff_r4": "temp1",
                "uVar1": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "temp_boolean"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "compare_parameters_0800092c",
            "code": "\nuint compare_parameters_0800092c(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(param_2 << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(param_2 << 1) >> 0x15 == -1 && ((param_1 | param_2 << 0xc) != 0)) ||\n      (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero = (param_1 | param_2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (param_3 | param_4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = param_2 == param_4;\n  }\n  if (is_zero) {\n    is_zero = param_1 == param_3;\n  }\n  if (!is_zero) {\n    result = param_2 ^ param_4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = param_2 == param_4;\n    }\n    is_negative = -1 < (int)result && param_4 <= param_2;\n    if (is_zero) {\n      is_negative = param_3 <= param_1;\n    }\n    param_4 = (int)param_4 >> 0x1f;\n    if (!is_negative) {\n      param_4 = ~param_4;\n    }\n    return param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "compare_parameters_0800092c",
                "uVar1": "result",
                "bVar2": "is_zero",
                "bVar3": "is_negative"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "compare_floats_080009a8",
            "code": "\nvoid compareFloats_080009a8(undefined4 ptr_result,undefined4 ptr_status,undefined4 ptr_float1,undefined4 ptr_float2)\n\n{\n  __aeabi_cdcmpeq(ptr_float1,ptr_float2,ptr_result,ptr_status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "compare_floats_080009a8",
                "param_1": "ptr_result",
                "param_2": "ptr_status",
                "param_3": "ptr_float1",
                "param_4": "ptr_float2"
            },
            "calling": [
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "perform_some_operation_080009b8",
            "code": "\nundefined4 performSomeOperation_080009b8(undefined4 inputValue)\n\n{\n  __eqdf2();\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "perform_some_operation_080009b8",
                "param_1": "inputValue"
            },
            "calling": [
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_cdrcmple"
            ],
            "called": [
                "__eqdf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_not_equal_to_zero_080009c8",
            "code": "\nbool check_not_equal_to_zero_080009c8(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdcmpeq();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_not_equal_to_zero_080009c8",
                "in_ZR": "input_char"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_cy_null_080009dc",
            "code": "\nbool is_CY_null_080009dc(void)\n\n{\n  char CY;\n  \n  compare_doubles();\n  return CY == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_cy_null_080009dc",
                "in_CY": "CY",
                "__aeabi_cdcmpeq": "compare_doubles"
            },
            "calling": [
                "Compute",
                "Initialize",
                "printFloat",
                "SetOutputLimits",
                "loop",
                "FUN_08001814"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_equality_or_zero_080009f0",
            "code": "\nbool check_equality_or_zero_080009f0(void)\n\n{\n  undefined is_zero;\n  undefined is_equal;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)is_equal || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_equality_or_zero_080009f0",
                "in_ZR": "is_zero",
                "in_CY": "is_equal"
            },
            "calling": [
                "printFloat",
                "loop"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_if_infinite_08000a04",
            "code": "\nbool check_if_infinite_08000a04(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_if_infinite_08000a04",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "SetOutputLimits",
                "loop"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "check_if_string_is_empty_08000a18",
            "code": "\nbool check_if_string_is_empty_08000a18(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "check_if_string_is_empty_08000a18",
                "in_CY": "input_character"
            },
            "calling": [
                "Compute",
                "Initialize",
                "printFloat",
                "SetOutputLimits",
                "loop"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "is_valid_parameters_08000a2c",
            "code": "\nundefined4 is_valid_parameters_08000a2c(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "is_valid_parameters_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "apply_transformation_08000a58",
            "code": "\nuint applyTransformation_08000a58(uint inputValue1,uint inputValue2)\n\n{\n  uint result1;\n  int result2;\n  uint result3;\n  \n  result2 = inputValue2 * 2 + 0x200000;\n  if (inputValue2 * 2 < 0xffe00000) {\n    if (-1 < result2) {\n      return 0;\n    }\n    result1 = result2 >> 0x15;\n    result3 = -result1 - 0x3e1;\n    if (result1 < 0xfffffc20 && result3 != 0) {\n      result1 = (inputValue2 << 0xb | 0x80000000 | inputValue1 >> 0x15) >> (result3 & 0xff);\n      if ((inputValue2 & 0x80000000) != 0) {\n        result1 = -result1;\n      }\n      return result1;\n    }\n  }\n  else if ((inputValue1 | inputValue2 << 0xc) != 0) {\n    return 0;\n  }\n  inputValue2 = inputValue2 & 0x80000000;\n  if (inputValue2 == 0) {\n    inputValue2 = 0x7fffffff;\n  }\n  return inputValue2;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "apply_transformation_08000a58",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "validate_input_08000aa8",
            "code": "\nuint validateInput_08000aa8(uint inputData,uint inputFlag)\n\n{\n  int tempValue;\n  uint shiftAmount;\n  \n  if ((inputFlag & 0x80000000) != 0) {\n    return 0;\n  }\n  tempValue = inputFlag * 2 + 0x200000;\n  if (inputFlag * 2 < 0xffe00000) {\n    if (-1 < tempValue) {\n      return 0;\n    }\n    shiftAmount = -(tempValue >> 0x15) - 0x3e1;\n    if (-1 < (int)shiftAmount) {\n      return (inputFlag << 0xb | 0x80000000 | inputData >> 0x15) >> (shiftAmount & 0xff);\n    }\n  }\n  else if ((inputData | inputFlag << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "validate_input_08000aa8",
                "param_1": "inputData",
                "param_2": "inputFlag",
                "iVar1": "tempValue",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_system_call_08000ae8",
            "code": "\nvoid executeSystemCall_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_system_call_08000ae8"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_afl_call_08000aec",
            "code": "\nundefined4 execute_afl_call_08000aec(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = aflCall(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_afl_call_08000aec",
                "param_1": "input_param",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_peripherals_08000b08",
            "code": "\nvoid initializePeripherals_08000b08(int inputParam1,int inputParam2)\n\n{\n  if ((inputParam1 == 1) && (inputParam2 == 0xffff)) {\n    initializePID(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n        DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initializeLCD(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                  DAT_20000034);\n    initializeTemperatureSensor(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_peripherals_08000b08",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "PID": "initializePID",
                "LiquidCrystal": "initializeLCD",
                "MAX31855": "initializeTemperatureSensor"
            },
            "calling": [],
            "called": [
                "PID",
                "MAX31855",
                "LiquidCrystal"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_reflow_oven_08000bcc",
            "code": "\nvoid initializeReflowOven_08000bcc(void)\n\n{\n  digitalWrite(DAT_20000064,0);\n  pinMode(DAT_20000064,1);\n  digitalWrite(DAT_20000004,0);\n  pinMode(DAT_20000004,1);\n  digitalWrite(DAT_20000060,0);\n  pinMode(DAT_20000060,1);\n  digitalWrite(DAT_20000004,1);\n  initializeLCD(&DAT_20000194,8,2,0);\n  createCharacter(&DAT_20000194,0,&DAT_20000008);\n  clearScreen(&DAT_20000194);\n  executeAndReverse(&DAT_20000194,\"Reflow\");\n  setCursorPosition(&DAT_20000194,0,1);\n  executeAndReverse(&DAT_20000194,\"Oven 1.2\");\n  digitalWrite(DAT_20000004,0);\n  delayMilliseconds(0x9c4);\n  clearScreen(&DAT_20000194);\n  beginCommunication(&DAT_2000036c,0xe100,6);\n  digitalWrite(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = millis();\n  DAT_200001b4 = millis();\n  startForkServer(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_reflow_oven_08000bcc",
                "initialize_lcd_080013a4": "initializeLCD",
                "createChar": "createCharacter",
                "clear": "clearScreen",
                "reverse_and_execute_08005c96": "executeAndReverse",
                "setCursor": "setCursorPosition",
                "delay": "delayMilliseconds",
                "begin": "beginCommunication",
                "startForkserver": "startForkServer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "begin",
                "setCursor",
                "createChar",
                "millis",
                "FUN_080013a4",
                "clear",
                "delay",
                "digitalWrite",
                "startForkserver",
                "FUN_08005c96",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "temperature_control_function_08000cd0",
            "code": "\nvoid temperatureControlFunction_08000cd0(void)\n\n{\n  uint currentMillis;\n  undefined4 temperatureVar1;\n  int comparisonResult;\n  undefined4 temperatureVar2;\n  undefined4 extraOutput1;\n  undefined4 extraOutput2;\n  undefined4 extraOutput3;\n  undefined8 thermocoupleData;\n  \n  currentMillis = millis();\n  if (DAT_200001b4 < currentMillis) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    thermocoupleData = readThermocouple(&DAT_2000024c,0);\n    temperatureVar2 = (undefined4)((ulonglong)thermocoupleData >> 0x20);\n    temperatureVar1 = (undefined4)thermocoupleData;\n    DAT_20000188 = temperatureVar1;\n    DAT_2000018c = temperatureVar2;\n    comparisonResult = __aeabi_dcmpeq(temperatureVar1,temperatureVar2,0,0x40c38800);\n    if (((comparisonResult != 0) || (comparisonResult = __aeabi_dcmpeq(temperatureVar1,temperatureVar2,0,0x40c38880), comparisonResult != 0)) ||\n       (comparisonResult = __aeabi_dcmpeq(temperatureVar1,temperatureVar2,0,0x40c38900), comparisonResult != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  currentMillis = millis();\n  temperatureVar1 = DAT_20000060;\n  if (DAT_200001b0 < currentMillis) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      comparisonResult = digitalRead(DAT_20000060);\n      digitalWrite(temperatureVar1,comparisonResult == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      print_number_or_execute_08005d82(&DAT_2000036c,DAT_20000250,10);\n      reverse_and_execute_08005c96(&DAT_2000036c,&DAT_08007368);\n      print(&DAT_2000036c,extraOutput1,DAT_20000240,DAT_20000244,2);\n      reverse_and_execute_08005c96(&DAT_2000036c,&DAT_08007368);\n      print(&DAT_2000036c,extraOutput2,DAT_20000188,DAT_2000018c,2);\n      reverse_and_execute_08005c96(&DAT_2000036c,&DAT_08007368);\n      println(&DAT_2000036c,extraOutput3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      digitalWrite(DAT_20000060,1);\n    }\n    clear(&DAT_20000194);\n    reverse_and_execute_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    setCursor(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      reverse_and_execute_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      print(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      send_data_0800134e(&DAT_20000194,0);\n      reverse_and_execute_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  temperatureVar2 = DAT_2000018c;\n  temperatureVar1 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    comparisonResult = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (comparisonResult == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_total_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = millis();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        thermocoupleData = __floatsidf(DAT_20000258);\n        SetOutputLimits(&DAT_200001c0,(int)((ulonglong)thermocoupleData >> 0x20),0,0,thermocoupleData);\n        SetSampleTime(&DAT_200001c0,1000);\n        SetMode(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    comparisonResult = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (comparisonResult != 0) {\n      thermocoupleData = millis();\n      DAT_20000254 = (int)thermocoupleData + 9000;\n      SetTunings(&DAT_200001c0,(int)((ulonglong)thermocoupleData >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,0,\n                 0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    currentMillis = millis();\n    if (DAT_20000254 < currentMillis) {\n      comparisonResult = millis();\n      DAT_20000254 = comparisonResult + 9000;\n      thermocoupleData = __aeabi_dadd(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)thermocoupleData >> 0x20);\n      DAT_20000240 = (undefined4)thermocoupleData;\n      thermocoupleData = __aeabi_dcmpgt(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)thermocoupleData != 0) {\n        SetTunings(&DAT_200001c0,(int)((ulonglong)thermocoupleData >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    thermocoupleData = __aeabi_dcmpge(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)thermocoupleData != 0) {\n      SetTunings(&DAT_200001c0,(int)((ulonglong)thermocoupleData >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,0,\n                 0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    comparisonResult = __aeabi_dcmple(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (comparisonResult != 0) {\n      comparisonResult = millis();\n      DAT_20000180 = comparisonResult + 1000;\n      digitalWrite(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    currentMillis = millis();\n    if (DAT_20000180 < currentMillis) {\n      digitalWrite(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    comparisonResult = __aeabi_dcmplt(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (comparisonResult != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    comparisonResult = __aeabi_dcmpeq(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((comparisonResult == 0) && (comparisonResult = __aeabi_dcmpeq(temperatureVar1,temperatureVar2,0,0x40c38880), comparisonResult == 0)) &&\n       (comparisonResult = __aeabi_dcmpeq(temperatureVar1,temperatureVar2,0,0x40c38900), comparisonResult == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    comparisonResult = analogRead(DAT_20000068);\n    if (comparisonResult == 0) {\n      comparisonResult = millis();\n      if (0x32 < (uint)(comparisonResult - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    comparisonResult = analogRead(DAT_20000068);\n    if (comparisonResult == 0) {\n      DAT_20000190 = millis();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (comparisonResult = analogRead(DAT_20000068), comparisonResult != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    comparisonResult = millis();\n    Compute(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(comparisonResult - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    thermocoupleData = __floatunsidf(comparisonResult - DAT_2000025c);\n    comparisonResult = __aeabi_dcmplt((int)thermocoupleData,(int)((ulonglong)thermocoupleData >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (comparisonResult == 0) {\n      digitalWrite(DAT_20000064,0);\n    }\n    else {\n      digitalWrite(DAT_20000064,1);\n    }\n  }\n  else {\n    digitalWrite(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "temperature_control_function_08000cd0",
                "uVar1": "currentMillis",
                "uVar2": "temperatureVar1",
                "iVar3": "comparisonResult",
                "uVar4": "temperatureVar2",
                "extraout_r1": "extraOutput1",
                "extraout_r1_00": "extraOutput2",
                "extraout_r1_01": "extraOutput3",
                "uVar5": "thermocoupleData"
            },
            "calling": [
                "main"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__floatsidf",
                "digitalRead",
                "SetMode",
                "__aeabi_dcmpgt",
                "print",
                "FUN_08005d82",
                "Compute",
                "millis",
                "setCursor",
                "digitalWrite",
                "FUN_08005c96",
                "__aeabi_dcmpeq",
                "FUN_0800134e",
                "SetTunings",
                "println",
                "__aeabi_dcmpge",
                "analogRead",
                "readThermocouple",
                "__aeabi_dadd",
                "__aeabi_dcmple",
                "clear",
                "FUN_08005cd4",
                "SetOutputLimits",
                "SetSampleTime",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "initialize_memory_08001294",
            "code": "\nvoid initializeMemory_08001294(int memoryAddress,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(memoryAddress + 0x18) = value1;\n  *(undefined *)(memoryAddress + 0x19) = value2;\n  *(undefined *)(memoryAddress + 0x1a) = value3;\n  *(undefined *)(memoryAddress + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "initialize_memory_08001294",
                "param_1": "memoryAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "pulsate_led_080012a2",
            "code": "\nvoid pulsateLED_080012a2(int deviceAddress)\n\n{\n  digitalWrite(*(undefined *)(deviceAddress + 10),0);\n  digitalWrite(*(undefined *)(deviceAddress + 10),1);\n  digitalWrite(*(undefined *)(deviceAddress + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "pulsate_led_080012a2",
                "param_1": "deviceAddress"
            },
            "calling": [
                "write8bits",
                "write4bits"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "digital_write_pulse_080012c0",
            "code": "\nvoid digitalWritePulse_080012c0(int dataPin,int value)\n\n{\n  uint bitIndex;\n  \n  for (bitIndex = 0; (int)bitIndex < 4; bitIndex = bitIndex + 1) {\n    digitalWrite(*(undefined *)(dataPin + bitIndex + 0xb),value >> (bitIndex & 0xff) & 1);\n  }\n  pulseEnable(dataPin);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "digital_write_pulse_080012c0",
                "param_1": "dataPin",
                "param_2": "value",
                "uVar1": "bitIndex"
            },
            "calling": [
                "FUN_080013a4",
                "send"
            ],
            "called": [
                "pulseEnable",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "write_bits_to_gpio_080012e8",
            "code": "\nvoid writeBitsToGPIO_080012e8(int gpioBaseAddress,int data)\n\n{\n  uint bitIndex;\n  \n  for (bitIndex = 0; (int)bitIndex < 8; bitIndex = bitIndex + 1) {\n    digitalWrite(*(undefined *)(gpioBaseAddress + bitIndex + 0xb),data >> (bitIndex & 0xff) & 1);\n  }\n  pulseEnable(gpioBaseAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "write_bits_to_gpio_080012e8",
                "param_1": "gpioBaseAddress",
                "param_2": "data",
                "uVar1": "bitIndex"
            },
            "calling": [
                "send"
            ],
            "called": [
                "pulseEnable",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "update_digital_output_08001310",
            "code": "\nvoid updateDigitalOutput_08001310(int pinData,uint data,undefined4 valueHigh,undefined4 valueLow)\n\n{\n  setDigitalOutput(*(undefined *)(pinData + 8),valueHigh,valueHigh,valueLow,valueLow);\n  if (*(char *)(pinData + 9) != -1) {\n    setDigitalOutput(*(char *)(pinData + 9),0);\n  }\n  if ((*(byte *)(pinData + 0x13) & 0x10) == 0) {\n    write4bitData(pinData,data >> 4);\n    write4bitData(pinData,data);\n    return;\n  }\n  write8bitData(pinData,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "update_digital_output_08001310",
                "param_1": "pinData",
                "param_2": "data",
                "param_3": "valueHigh",
                "param_4": "valueLow",
                "digitalWrite": "setDigitalOutput",
                "write4bits": "write4bitData",
                "write8bits": "write8bitData"
            },
            "calling": [
                "FUN_0800134e",
                "display",
                "setCursor",
                "createChar",
                "FUN_080013a4",
                "clear"
            ],
            "called": [
                "write8bits",
                "write4bits",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "send_data_0800134e",
            "code": "\nundefined4 send_data_0800134e(undefined4 socket,undefined4 buffer,undefined4 size,undefined4 flags)\n\n{\n  send(socket,buffer,1,flags,flags);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "send_data_0800134e",
                "param_1": "socket",
                "param_2": "buffer",
                "param_3": "size",
                "param_4": "flags"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "send_data_0800135a",
            "code": "\nvoid send_data_0800135a(undefined4 socket,undefined4 option,undefined4 unused1,undefined4 data)\n\n{\n  send(socket,1,0,data,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "send_data_0800135a",
                "param_1": "socket",
                "param_2": "option",
                "param_3": "unused1",
                "param_4": "data"
            },
            "calling": [
                "setup",
                "FUN_080013a4",
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "send_data_08001366",
            "code": "\nvoid send_data_08001366(int data_ptr,char character,uint max_length,undefined4 param_4)\n\n{\n  char selected_character;\n  \n  if (3 < max_length) {\n    max_length = 3;\n  }\n  if ((int)(uint)*(byte *)(data_ptr + 0x17) <= (int)max_length) {\n    max_length = *(byte *)(data_ptr + 0x17) - 1 & 0xff;\n  }\n  selected_character = *(char *)(max_length + data_ptr + 0x18);\n  send(data_ptr,character + selected_character | 0x80,0,selected_character,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "send_data_08001366",
                "param_1": "data_ptr",
                "param_2": "character",
                "param_3": "max_length",
                "cVar1": "selected_character"
            },
            "calling": [
                "setup",
                "loop"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "update_and_send_data_0800138e",
            "code": "\nvoid updateAndSendData_0800138e(int data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteValue;\n  \n  byteValue = *(byte *)(data + 0x14);\n  *(byte *)(data + 0x14) = byteValue | 4;\n  send(data,byteValue | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "update_and_send_data_0800138e",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "initialize_lcd_080013a4",
            "code": "\nvoid initializeLCD_080013a4(int lcdAddress,int rows,int cols,int pinBank)\n\n{\n  int offset;\n  int index;\n  \n  if (1 < cols) {\n    *(byte *)(lcdAddress + 0x13) = *(byte *)(lcdAddress + 0x13) | 8;\n  }\n  *(char *)(lcdAddress + 0x17) = (char)cols;\n  setRowOffsets(lcdAddress,0,0x40,rows,rows + 0x40);\n  if ((pinBank != 0) && (cols == 1)) {\n    *(byte *)(lcdAddress + 0x13) = *(byte *)(lcdAddress + 0x13) | 4;\n  }\n  pinMode(*(undefined *)(lcdAddress + 8),1);\n  if (*(char *)(lcdAddress + 9) != -1) {\n    pinMode(*(char *)(lcdAddress + 9),1);\n  }\n  pinMode(*(undefined *)(lcdAddress + 10),1);\n  index = 0;\n  while( true ) {\n    if ((*(byte *)(lcdAddress + 0x13) & 0x10) == 0) {\n      offset = 4;\n    }\n    else {\n      offset = 8;\n    }\n    if (offset <= index) break;\n    pinMode(*(undefined *)(lcdAddress + index + 0xb),1);\n    index = index + 1;\n  }\n  digitalWrite(*(undefined *)(lcdAddress + 8),0);\n  digitalWrite(*(undefined *)(lcdAddress + 10),0);\n  if (*(char *)(lcdAddress + 9) != -1) {\n    digitalWrite(*(char *)(lcdAddress + 9),0);\n  }\n  if ((*(byte *)(lcdAddress + 0x13) & 0x10) == 0) {\n    write4bits(lcdAddress,3);\n    write4bits(lcdAddress,3);\n    write4bits(lcdAddress,3);\n    write4bits(lcdAddress,2);\n  }\n  else {\n    send(lcdAddress,*(byte *)(lcdAddress + 0x13) | 0x20,0);\n    send(lcdAddress,*(byte *)(lcdAddress + 0x13) | 0x20,0);\n    send(lcdAddress,*(byte *)(lcdAddress + 0x13) | 0x20,0);\n  }\n  send(lcdAddress,*(byte *)(lcdAddress + 0x13) | 0x20,0);\n  *(undefined *)(lcdAddress + 0x14) = 4;\n  display(lcdAddress);\n  clear(lcdAddress);\n  *(undefined *)(lcdAddress + 0x15) = 2;\n  send(lcdAddress,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "initialize_lcd_080013a4",
                "param_1": "lcdAddress",
                "param_2": "rows",
                "param_3": "cols",
                "param_4": "pinBank",
                "iVar1": "offset",
                "iVar2": "index"
            },
            "calling": [
                "setup",
                "FUN_080014ba"
            ],
            "called": [
                "display",
                "clear",
                "write4bits",
                "setRowOffsets",
                "digitalWrite",
                "send",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "initialize_lcd_params_080014ba",
            "code": "\nvoid initialize_lcd_params_080014ba(int lcd_memory_start_address,int param_flag,undefined param_3,undefined4 param_4,undefined param_5,\n                 undefined param_6,undefined param_7,undefined param_8,undefined param_9,\n                 undefined lcd_memory_start_address0,undefined lcd_memory_start_address1,undefined lcd_memory_start_address2,undefined lcd_memory_start_address3)\n\n{\n  *(undefined *)(lcd_memory_start_address + 8) = param_3;\n  *(char *)(lcd_memory_start_address + 9) = (char)param_4;\n  *(undefined *)(lcd_memory_start_address + 10) = param_5;\n  *(undefined *)(lcd_memory_start_address + 0xb) = param_6;\n  *(undefined *)(lcd_memory_start_address + 0xc) = param_7;\n  *(undefined *)(lcd_memory_start_address + 0xd) = param_8;\n  *(undefined *)(lcd_memory_start_address + 0xe) = param_9;\n  *(undefined *)(lcd_memory_start_address + 0xf) = lcd_memory_start_address0;\n  *(undefined *)(lcd_memory_start_address + 0x10) = lcd_memory_start_address1;\n  *(undefined *)(lcd_memory_start_address + 0x11) = lcd_memory_start_address2;\n  *(undefined *)(lcd_memory_start_address + 0x12) = lcd_memory_start_address3;\n  if (param_flag == 0) {\n    *(undefined *)(lcd_memory_start_address + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(lcd_memory_start_address + 0x13) = 0;\n  }\n  initialize_lcd_080013a4(lcd_memory_start_address,0x10,1,0,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "initialize_lcd_params_080014ba",
                "param_1": "lcd_memory_start_address",
                "param_2": "param_flag"
            },
            "calling": [
                "LiquidCrystal"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_and_configure_lcd_08001510",
            "code": "\nundefined4 *\ninitialize_and_configure_lcd_08001510(undefined4 *lcd_handle,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n            undefined param_5,undefined param_6,undefined param_7)\n\n{\n  lcd_handle[1] = 0;\n  *lcd_handle = &PTR_send_data_0800134e_1_080073f8;\n  initialize_lcd_params(lcd_handle,1,param_2,0xff,param_3,param_4,param_5,param_6,param_7,0,0,0,0);\n  return lcd_handle;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_and_configure_lcd_08001510",
                "param_1": "lcd_handle",
                "initialize_lcd_params_080014ba": "initialize_lcd_params"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "send_data_08001550",
            "code": "\nvoid sendData_08001550(undefined4 *data,uint flags,int buffer)\n\n{\n  int counter;\n  \n  send(data,(flags & 7) << 3 | 0x40,0);\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    (**(code **)*data)(data,*(undefined *)(buffer + counter));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "send_data_08001550",
                "param_1": "data",
                "param_2": "flags",
                "param_3": "buffer",
                "iVar1": "counter"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "send"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_pins_0800157c",
            "code": "\nundefined * initializePins_0800157c(undefined *pinArray,undefined4 pin1,undefined pinMode1,undefined pinMode2)\n\n{\n  *pinArray = (char)pin1;\n  pinArray[1] = pinMode1;\n  pinArray[2] = pinMode2;\n  pinMode(pin1,0);\n  pinMode(pinArray[1],1);\n  pinMode(pinArray[2],1);\n  digitalWrite(pinArray[1],1);\n  digitalWrite(pinArray[2],0);\n  return pinArray;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_pins_0800157c",
                "param_1": "pinArray",
                "param_2": "pin1",
                "param_3": "pinMode1",
                "param_4": "pinMode2"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "digitalWrite",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "bitwise_read_and_set_080015b2",
            "code": "\nuint bitwiseReadAndSet_080015b2(undefined *inputBits)\n\n{\n  int readResult;\n  uint bitIndex;\n  uint result;\n  \n  digitalWrite(inputBits[1],0);\n  result = 0;\n  for (bitIndex = 0x1f; -1 < (int)bitIndex; bitIndex = bitIndex - 1) {\n    digitalWrite(inputBits[2],1);\n    readResult = digitalRead(*inputBits);\n    if (readResult != 0) {\n      result = result | 1 << (bitIndex & 0xff);\n    }\n    digitalWrite(inputBits[2],0);\n  }\n  digitalWrite(inputBits[1],1);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "bitwise_read_and_set_080015b2",
                "param_1": "inputBits",
                "iVar1": "readResult",
                "uVar2": "bitIndex",
                "uVar3": "result"
            },
            "calling": [
                "readThermocouple"
            ],
            "called": [
                "digitalRead",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "extract_and_process_data_080015f8",
            "code": "\nundefined8 extractAndProcessData_080015f8(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  uint data;\n  undefined8 result;\n  \n  data = readData();\n  if ((data & 0x10000) == 0) {\n    data = data >> 0x12;\n    result = __floatunsidf(data & 0x1fff);\n    if ((data & 0x2000) != 0) {\n      result = __floatunsidf(~data & 0x1fff);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,param4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (param2 == 1) {\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    data = data & 7;\n    if (data == 2) {\n      return 0x40c3888000000000;\n    }\n    if (data == 4) {\n      return 0x40c3890000000000;\n    }\n    if (data != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "extract_and_process_data_080015f8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "data",
                "uVar2": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__muldf3",
                "__aeabi_dadd",
                "readData",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "calculate_delay_080016b4",
            "code": "\nchar calculateDelay_080016b4(int delay)\n\n{\n  char result;\n  int currentTime;\n  int comparisonResult;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  undefined4 tempVar7;\n  char condition;\n  undefined4 threshold;\n  undefined4 limit;\n  undefined4 tempVar8;\n  undefined8 tempVar9;\n  undefined8 tempVar10;\n  undefined8 finalResult;\n  undefined8 tempVar11;\n  undefined4 tempVar12;\n  undefined4 tempVar13;\n  \n  condition = *(char *)(delay + 0x70);\n  if (condition != '\\0') {\n    currentTime = millis();\n    if ((uint)(currentTime - *(int *)(delay + 0x44)) < *(uint *)(delay + 0x58)) {\n      condition = '\\0';\n    }\n    else {\n      tempVar2 = **(undefined4 **)(delay + 0x38);\n      tempVar5 = (*(undefined4 **)(delay + 0x38))[1];\n      tempVar9 = __subdf3(**(undefined4 **)(delay + 0x40),(*(undefined4 **)(delay + 0x40))[1]);\n      tempVar8 = (undefined4)((ulonglong)tempVar9 >> 0x20);\n      tempVar10 = __subdf3(tempVar2,tempVar5,*(undefined4 *)(delay + 0x50),*(undefined4 *)(delay + 0x54))\n      ;\n      tempVar1 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n      finalResult = __muldf3((int)tempVar9,tempVar8,*(undefined4 *)(delay + 0x20),\n                        *(undefined4 *)(delay + 0x24));\n      finalResult = __aeabi_dadd((int)finalResult,(int)((ulonglong)finalResult >> 0x20),\n                            *(undefined4 *)(delay + 0x48),*(undefined4 *)(delay + 0x4c));\n      *(undefined8 *)(delay + 0x48) = finalResult;\n      result = *(char *)(delay + 0x71);\n      if (result == '\\0') {\n        tempVar11 = __muldf3((int)tempVar10,tempVar1,*(undefined4 *)(delay + 0x18),\n                          *(undefined4 *)(delay + 0x1c));\n        finalResult = __subdf3((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempVar11,\n                          (int)((ulonglong)tempVar11 >> 0x20));\n        *(undefined8 *)(delay + 0x48) = finalResult;\n      }\n      tempVar3 = *(undefined4 *)(delay + 0x48);\n      tempVar6 = *(undefined4 *)(delay + 0x4c);\n      threshold = *(undefined4 *)(undefined8 *)(delay + 0x68);\n      limit = *(undefined4 *)(delay + 0x6c);\n      finalResult = *(undefined8 *)(delay + 0x68);\n      comparisonResult = __aeabi_dcmpgt(tempVar3,tempVar6,threshold,limit);\n      if (comparisonResult == 0) {\n        tempVar4 = *(undefined4 *)(delay + 0x60);\n        tempVar7 = *(undefined4 *)(delay + 100);\n        comparisonResult = __aeabi_dcmplt(tempVar3,tempVar6);\n        if (comparisonResult != 0) {\n          *(undefined4 *)(delay + 0x48) = tempVar4;\n          *(undefined4 *)(delay + 0x4c) = tempVar7;\n        }\n      }\n      else {\n        *(undefined4 *)(delay + 0x48) = threshold;\n        *(undefined4 *)(delay + 0x4c) = limit;\n      }\n      if (result == '\\0') {\n        tempVar9 = 0;\n      }\n      else {\n        tempVar9 = __muldf3((int)tempVar9,tempVar8,*(undefined4 *)(delay + 0x18),\n                          *(undefined4 *)(delay + 0x1c));\n      }\n      tempVar13 = (undefined4)((ulonglong)tempVar9 >> 0x20);\n      tempVar12 = (undefined4)tempVar9;\n      tempVar8 = *(undefined4 *)(delay + 0x48);\n      tempVar3 = *(undefined4 *)(delay + 0x4c);\n      tempVar9 = __muldf3((int)tempVar10,tempVar1,*(undefined4 *)(delay + 0x28),\n                        *(undefined4 *)(delay + 0x2c));\n      tempVar9 = __subdf3(tempVar8,tempVar3,(int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20));\n      tempVar9 = __aeabi_dadd(tempVar12,tempVar13,(int)tempVar9,(int)((ulonglong)tempVar9 >> 0x20));\n      tempVar8 = (undefined4)((ulonglong)tempVar9 >> 0x20);\n      comparisonResult = __aeabi_dcmplt(threshold,limit,(int)tempVar9,tempVar8);\n      if (comparisonResult == 0) {\n        finalResult = *(undefined8 *)(delay + 0x60);\n        comparisonResult = __aeabi_dcmplt((int)tempVar9,tempVar8,*(undefined4 *)(undefined8 *)(delay + 0x60),\n                               *(undefined4 *)(delay + 100));\n        if (comparisonResult == 0) {\n          finalResult = tempVar9;\n        }\n      }\n      **(undefined8 **)(delay + 0x3c) = finalResult;\n      *(undefined4 *)(delay + 0x50) = tempVar2;\n      *(undefined4 *)(delay + 0x54) = tempVar5;\n      *(int *)(delay + 0x44) = currentTime;\n    }\n  }\n  return condition;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "calculate_delay_080016b4",
                "param_1": "delay",
                "cVar1": "result",
                "iVar2": "currentTime",
                "iVar3": "comparisonResult",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "uVar6": "tempVar3",
                "uVar7": "tempVar4",
                "uVar8": "tempVar5",
                "uVar9": "tempVar6",
                "uVar10": "tempVar7",
                "cVar11": "condition",
                "uVar12": "threshold",
                "uVar13": "limit",
                "uVar14": "tempVar8",
                "uVar15": "tempVar9",
                "uVar16": "tempVar10",
                "uVar17": "finalResult",
                "uVar18": "tempVar11",
                "local_38": "tempVar12",
                "uStack_34": "tempVar13"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__muldf3",
                "__aeabi_dadd",
                "__subdf3",
                "millis",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "extract_parameters_08001814",
            "code": "\nvoid extractParameters_08001814(undefined4 *output,undefined4 input1,undefined4 left_bound,undefined4 right_bound,\n                 undefined4 left_value,undefined4 right_value,undefined4 divisor1,undefined4 divisor2,\n                 int is_condition_true)\n\n{\n  int is_less_than;\n  undefined4 quotient_high;\n  undefined quotient_low;\n  bool is_not_one;\n  undefined8 temp_float;\n  undefined8 temp_mul;\n  undefined8 temp_sub;\n  \n  is_less_than = __aeabi_dcmplt(left_bound,right_bound,0,0);\n  if (((is_less_than == 0) && (is_less_than = __aeabi_dcmplt(left_value,right_value,0,0), is_less_than == 0)) &&\n     (is_less_than = __aeabi_dcmplt(divisor1,divisor2,0,0), is_less_than == 0)) {\n    output[0xd] = is_condition_true;\n    is_not_one = is_condition_true != 1;\n    if (is_not_one) {\n      is_condition_true = 0;\n    }\n    quotient_low = (undefined)is_condition_true;\n    if (!is_not_one) {\n      quotient_low = 1;\n    }\n    *(undefined *)((int)output + 0x71) = quotient_low;\n    *output = left_bound;\n    output[1] = right_bound;\n    output[2] = left_value;\n    output[3] = right_value;\n    output[4] = divisor1;\n    output[5] = divisor2;\n    temp_float = __floatunsidf(output[0x16]);\n    temp_float = __divdf3((int)temp_float,(int)((ulonglong)temp_float >> 0x20),0,0x408f4000);\n    quotient_high = (undefined4)((ulonglong)temp_float >> 0x20);\n    output[6] = left_bound;\n    output[7] = right_bound;\n    temp_mul = __muldf3(left_value,right_value,(int)temp_float,quotient_high);\n    *(undefined8 *)(output + 8) = temp_mul;\n    temp_float = __divdf3(divisor1,divisor2,(int)temp_float,quotient_high);\n    *(undefined8 *)(output + 10) = temp_float;\n    if (output[0xc] == 1) {\n      temp_sub = __subdf3(0,0,left_bound,right_bound);\n      *(undefined8 *)(output + 6) = temp_sub;\n      temp_mul = __subdf3(0,0,(int)temp_mul,(int)((ulonglong)temp_mul >> 0x20));\n      *(undefined8 *)(output + 8) = temp_mul;\n      temp_float = __subdf3(0,0,(int)temp_float,(int)((ulonglong)temp_float >> 0x20));\n      *(undefined8 *)(output + 10) = temp_float;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "extract_parameters_08001814",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "left_bound",
                "param_4": "right_bound",
                "param_5": "left_value",
                "param_6": "right_value",
                "param_7": "divisor1",
                "param_8": "divisor2",
                "param_9": "is_condition_true",
                "iVar1": "is_less_than",
                "uVar2": "quotient_high",
                "uVar3": "quotient_low",
                "bVar4": "is_not_one",
                "uVar5": "temp_float",
                "uVar6": "temp_mul",
                "uVar7": "temp_sub"
            },
            "calling": [
                "SetTunings",
                "FUN_08001ab0"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__muldf3",
                "__subdf3",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "initialize_extraction_080018f8",
            "code": "\nvoid initialize_extraction_080018f8(void)\n\n{\n  extract_parameters();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "initialize_extraction_080018f8",
                "extract_parameters_08001814": "extract_parameters"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "update_data_08001918",
            "code": "\nvoid updateData_08001918(int data,int size,undefined4 var1,undefined4 var2)\n\n{\n  undefined4 result1;\n  undefined8 convertedSize;\n  undefined8 convertedData;\n  \n  if (0 < size) {\n    convertedSize = __floatsidf(size);\n    convertedData = __floatunsidf(*(undefined4 *)(data + 0x58));\n    convertedSize = __divdf3((int)convertedSize,(int)((ulonglong)convertedSize >> 0x20),(int)convertedData,\n                     (int)((ulonglong)convertedData >> 0x20),var2);\n    result1 = (undefined4)((ulonglong)convertedSize >> 0x20);\n    convertedData = __muldf3((int)convertedSize,result1,*(undefined4 *)(data + 0x20),\n                     *(undefined4 *)(data + 0x24));\n    *(undefined8 *)(data + 0x20) = convertedData;\n    convertedSize = __divdf3(*(undefined4 *)(data + 0x28),*(undefined4 *)(data + 0x2c),(int)convertedSize,\n                     result1);\n    *(undefined8 *)(data + 0x28) = convertedSize;\n    *(int *)(data + 0x58) = size;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "update_data_08001918",
                "param_1": "data",
                "param_2": "size",
                "param_3": "var1",
                "param_4": "var2",
                "uVar1": "result1",
                "uVar2": "convertedSize",
                "uVar3": "convertedData"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__muldf3",
                "__floatsidf",
                "__divdf3",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_values_08001960",
            "code": "\nvoid updateValues_08001960(int baseAddress,undefined4 unusedParam1,undefined4 newValue1,undefined4 newValue2,\n                 undefined4 currentValue1,undefined4 currentValue2)\n\n{\n  int comparisonResult;\n  undefined4 *pointer;\n  undefined4 loadedValue1;\n  undefined4 loadedValue2;\n  undefined4 pointedValue1;\n  undefined4 pointedValue2;\n  \n  comparisonResult = __aeabi_dcmpge(newValue1,newValue2,currentValue1,currentValue2,newValue2);\n  if (comparisonResult == 0) {\n    *(undefined4 *)(baseAddress + 0x60) = newValue1;\n    *(undefined4 *)(baseAddress + 100) = newValue2;\n    *(undefined4 *)(baseAddress + 0x68) = currentValue1;\n    *(undefined4 *)(baseAddress + 0x6c) = currentValue2;\n    if (*(char *)(baseAddress + 0x70) != '\\0') {\n      pointer = *(undefined4 **)(baseAddress + 0x3c);\n      loadedValue1 = *pointer;\n      pointedValue1 = pointer[1];\n      comparisonResult = __aeabi_dcmplt(currentValue1,currentValue2,loadedValue1,pointedValue1);\n      if (comparisonResult == 0) {\n        comparisonResult = __aeabi_dcmpgt(newValue1,newValue2,loadedValue1,pointedValue1);\n        if (comparisonResult != 0) {\n          *pointer = newValue1;\n          pointer[1] = newValue2;\n        }\n      }\n      else {\n        *pointer = currentValue1;\n        pointer[1] = currentValue2;\n      }\n      loadedValue1 = *(undefined4 *)(baseAddress + 0x48);\n      pointedValue1 = *(undefined4 *)(baseAddress + 0x4c);\n      loadedValue2 = *(undefined4 *)(baseAddress + 0x68);\n      pointedValue2 = *(undefined4 *)(baseAddress + 0x6c);\n      comparisonResult = __aeabi_dcmpgt(loadedValue1,pointedValue1,loadedValue2,pointedValue2);\n      if (comparisonResult != 0) {\n        *(undefined4 *)(baseAddress + 0x48) = loadedValue2;\n        *(undefined4 *)(baseAddress + 0x4c) = pointedValue2;\n        return;\n      }\n      loadedValue2 = *(undefined4 *)(baseAddress + 0x60);\n      pointedValue2 = *(undefined4 *)(baseAddress + 100);\n      comparisonResult = __aeabi_dcmplt(loadedValue1,pointedValue1,loadedValue2,pointedValue2);\n      if (comparisonResult != 0) {\n        *(undefined4 *)(baseAddress + 0x48) = loadedValue2;\n        *(undefined4 *)(baseAddress + 0x4c) = pointedValue2;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_values_08001960",
                "param_1": "baseAddress",
                "param_2": "unusedParam1",
                "param_3": "newValue1",
                "param_4": "newValue2",
                "param_5": "currentValue1",
                "param_6": "currentValue2",
                "iVar1": "comparisonResult",
                "puVar2": "pointer",
                "uVar3": "loadedValue1",
                "uVar4": "loadedValue2",
                "uVar5": "pointedValue1",
                "uVar6": "pointedValue2"
            },
            "calling": [
                "FUN_08001ab0",
                "loop"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpge",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "compare_and_update_080019f6",
            "code": "\nvoid compareAndUpdate_080019f6(int input)\n\n{\n  int comparisonResult;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value2 = **(undefined4 **)(input + 0x3c);\n  value3 = (*(undefined4 **)(input + 0x3c))[1];\n  *(undefined4 *)(input + 0x48) = value2;\n  *(undefined4 *)(input + 0x4c) = value3;\n  value1 = (*(undefined4 **)(input + 0x38))[1];\n  *(undefined4 *)(input + 0x50) = **(undefined4 **)(input + 0x38);\n  *(undefined4 *)(input + 0x54) = value1;\n  value1 = *(undefined4 *)(input + 0x68);\n  value4 = *(undefined4 *)(input + 0x6c);\n  comparisonResult = __aeabi_dcmpgt(value2,value3,value1,value4);\n  if (comparisonResult == 0) {\n    value1 = *(undefined4 *)(input + 0x60);\n    value4 = *(undefined4 *)(input + 100);\n    comparisonResult = __aeabi_dcmplt(value2,value3,value1,value4);\n    if (comparisonResult != 0) {\n      *(undefined4 *)(input + 0x48) = value1;\n      *(undefined4 *)(input + 0x4c) = value4;\n    }\n    return;\n  }\n  *(undefined4 *)(input + 0x48) = value1;\n  *(undefined4 *)(input + 0x4c) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "compare_and_update_080019f6",
                "param_1": "input",
                "iVar1": "comparisonResult",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "uVar5": "value4"
            },
            "calling": [
                "SetMode"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_param_status_08001a44",
            "code": "\nvoid updateParamStatus_08001a44(int paramPtr,int flag)\n\n{\n  undefined status;\n  \n  if (flag == 1) {\n    status = 1;\n    if (*(char *)(paramPtr + 0x70) == '\\0') {\n      initializeFunc();\n    }\n  }\n  else {\n    status = 0;\n  }\n  *(undefined *)(paramPtr + 0x70) = status;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_param_status_08001a44",
                "param_1": "paramPtr",
                "param_2": "flag",
                "uVar1": "status",
                "Initialize": "initializeFunc"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "Initialize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_data_08001a66",
            "code": "\nvoid updateData_08001a66(int data,int newValue,undefined4 param3,undefined4 param4)\n\n{\n  undefined8 updatedValue;\n  \n  if ((*(char *)(data + 0x70) != '\\0') && (*(int *)(data + 0x30) != newValue)) {\n    updatedValue = __subdf3(0,0,*(undefined4 *)(data + 0x18),*(undefined4 *)(data + 0x1c),param4);\n    *(undefined8 *)(data + 0x18) = updatedValue;\n    updatedValue = __subdf3(0,0,*(undefined4 *)(data + 0x20),*(undefined4 *)(data + 0x24));\n    *(undefined8 *)(data + 0x20) = updatedValue;\n    updatedValue = __subdf3(0,0,*(undefined4 *)(data + 0x28),*(undefined4 *)(data + 0x2c));\n    *(undefined8 *)(data + 0x28) = updatedValue;\n  }\n  *(int *)(data + 0x30) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_data_08001a66",
                "param_1": "data",
                "param_2": "newValue",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_controller_08001ab0",
            "code": "\nint initializeController_08001ab0(int controller,undefined4 param2,undefined4 param3,undefined4 param4,\n                undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                undefined4 param9,undefined4 param10,undefined4 param11,undefined4 param12)\n\n{\n  int timeDifference;\n  undefined4 extraOutput;\n  \n  *(undefined4 *)(controller + 0x3c) = param3;\n  *(undefined4 *)(controller + 0x38) = param2;\n  *(undefined4 *)(controller + 0x40) = param4;\n  *(undefined *)(controller + 0x70) = 0;\n  SetOutputLimits(controller,param2,0,0,0,0x406fe000);\n  *(undefined4 *)(controller + 0x58) = 100;\n  SetControllerDirection(controller,param12);\n  extract_parameters_08001814(controller,extraOutput,param5,param6,param7,param8,param9,param10,param11);\n  timeDifference = currentTime;\n  *(int *)(controller + 0x44) = timeDifference - *(int *)(controller + 0x58);\n  return controller;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_controller_08001ab0",
                "param_1": "controller",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "iVar1": "timeDifference",
                "extraout_r1": "extraOutput",
                "millis()": "currentTime"
            },
            "calling": [
                "PID"
            ],
            "called": [
                "millis",
                "SetOutputLimits",
                "SetControllerDirection",
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_controller_08001b18",
            "code": "\nundefined4 initialize_controller_08001b18(undefined4 input_parameter)\n\n{\n  initialize_controller_08001b18_08001ab0();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_controller_08001b18",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_system_08001b48",
            "code": "\nvoid initializeSystem_08001b48(void)\n\n{\n  int result;\n  uint HCLKFrequencyCycles;\n  undefined4 PeriphCLKConfigParams [2];\n  undefined4 PeriphCLKConfigFlag;\n  undefined4 clockConfigParams;\n  undefined4 clockSourceConfigParams;\n  undefined4 NVICPriorityConfigParams;\n  undefined4 HAL_RCC_SetPriorityParams;\n  undefined4 HAL_RCC_SystickConfigParams;\n  undefined4 oscConfig [4];\n  undefined4 clockConfig;\n  undefined4 parameterConfig;\n  undefined4 peripheralCLKConfig;\n  undefined4 HCLKFrequency;\n  undefined4 systickConfig;\n  \n  oscConfig[0] = 2;\n  clockConfig = 1;\n  parameterConfig = 0x10;\n  peripheralCLKConfig = 2;\n  HCLKFrequency = 0;\n  systickConfig = 0x380000;\n  result = HAL_RCC_OscConfig(oscConfig);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  clockConfigParams = 0xf;\n  clockSourceConfigParams = 2;\n  NVICPriorityConfigParams = 0;\n  HAL_RCC_SetPriorityParams = 0x400;\n  HAL_RCC_SystickConfigParams = 0;\n  result = HAL_RCC_ClockConfig(&clockConfigParams);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  PeriphCLKConfigParams[0] = 2;\n  PeriphCLKConfigFlag = 0x8000;\n  result = HAL_RCCEx_PeriphCLKConfig(PeriphCLKConfigParams);\n  if (result != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  HCLKFrequencyCycles = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(HCLKFrequencyCycles / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_system_08001b48",
                "local_30": "oscConfig",
                "local_20": "clockConfig",
                "local_1c": "parameterConfig",
                "local_14": "peripheralCLKConfig",
                "local_10": "HCLKFrequency",
                "local_c": "systickConfig",
                "iVar1": "result",
                "local_44": "clockConfigParams",
                "local_40": "clockSourceConfigParams",
                "local_3c": "NVICPriorityConfigParams",
                "local_38": "HAL_RCC_SetPriorityParams",
                "local_34": "HAL_RCC_SystickConfigParams",
                "local_54": "PeriphCLKConfigParams",
                "local_4c": "PeriphCLKConfigFlag",
                "uVar2": "HCLKFrequencyCycles"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_Config",
                "HAL_SYSTICK_CLKSourceConfig",
                "_Error_Handler",
                "HAL_NVIC_SetPriority",
                "HAL_RCCEx_PeriphCLKConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001be8": {
            "entrypoint": "0x08001be8",
            "current_name": "initialize_system_08001be8",
            "code": "\nvoid initializeSystem_08001be8(void)\n\n{\n  int index;\n  undefined4 *dataPtr;\n  code *jumpTable;\n  \n  for (index = 0; (undefined *)(index + 0x20000000) < &DAT_2000015c; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8007970);\n  }\n  for (dataPtr = &DAT_20000160; dataPtr < &DAT_200006a8; dataPtr = dataPtr + 1) {\n    *dataPtr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x8001c1a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001be8": "initialize_system_08001be8",
                "iVar1": "index",
                "puVar2": "dataPtr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "SystemInit",
                "__libc_init_array",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_hardware_config_08001c32",
            "code": "\nvoid initializeHardwareConfig_08001c32(void)\n\n{\n  initializeHardwareConfig_08001c32uration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_hardware_config_08001c32",
                "hw_config_init": "initializeHardwareConfiguration"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "configure_and_set_systick_08001c3c",
            "code": "\nundefined4 configureAndSetSystick_08001c3c(uint priority)\n\n{\n  int systickConfigStatus;\n  \n  systickConfigStatus = HAL_SYSTICK_Config(DAT_20000084 / (1000 / DAT_20000078));\n  if (systickConfigStatus != 0) {\n    return 1;\n  }\n  if (0xf < priority) {\n    return 1;\n  }\n  HAL_NVIC_SetPriority(0xffffffff,priority,0);\n  DAT_2000007c = priority;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "configure_and_set_systick_08001c3c",
                "param_1": "priority",
                "iVar1": "systickConfigStatus"
            },
            "calling": [
                "HAL_Init",
                "FUN_08003afa"
            ],
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_hardware_08001c88",
            "code": "\n\n\nundefined4 initializeHardware_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setInterruptPriorityGrouping(3);\n  initializeTick(0xf);\n  initializePeripheral();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_hardware_08001c88",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializePeripheral"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_MspInit",
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "calculate_sum_08001cac",
            "code": "\nvoid calculateSum_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "calculate_sum_08001cac"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_08001cc4",
            "code": "\nundefined4 get_data_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_08001cc4"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "ADC_Enable",
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start",
                "GetCurrentMilli",
                "FUN_08003afa",
                "UART_WaitOnFlagUntilTimeout",
                "ADC_ConversionStop_Disable",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_RCCEx_PeriphCLKConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "calculate_delay_08001cd0",
            "code": "\nundefined4 calculateDelay_08001cd0(uint **data,uint timeout)\n\n{\n  int startTime;\n  uint clockFrequency;\n  int elapsedTime;\n  undefined4 returnValue;\n  uint *flags;\n  uint targetDelay;\n  uint currentDelay;\n  \n  currentDelay = 0;\n  startTime = HAL_GetTick();\n  targetDelay = DAT_20000084;\n  flags = *data;\n  if ((flags[2] & 0x100) == 0) {\n    if (((flags[1] & 0x100) == 0) && ((flags[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**data & 2) != 0) goto LAB_08001de2;\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (elapsedTime = HAL_GetTick(), (uint)(elapsedTime - startTime) <= timeout))));\n      data[10] = (uint *)((uint)data[10] | 4);\n      *(undefined *)(data + 9) = 0;\n      returnValue = 3;\n    }\n    else {\n      clockFrequency = HAL_RCCEx_GetPeriphCLKFreq(2);\n      flags = *data;\n      if (((flags[4] & 0x24924924) == 0) && ((flags[3] & 0x924924) == 0)) {\n        if ((flags[4] & 0x12492492) == 0) {\n          if ((flags[3] & 0x492492) == 0) {\n            elapsedTime = 0x14;\n          }\n          else {\n            elapsedTime = 0x29;\n          }\n        }\n        else {\n          elapsedTime = 0x29;\n        }\n      }\n      else if (((flags[4] & 0x12492492) == 0) && ((flags[3] & 0x492492) == 0)) {\n        elapsedTime = 0x54;\n      }\n      else if ((flags[4] & 0x249249) == 0) {\n        if ((flags[3] & 0x249249) == 0) {\n          elapsedTime = 0x54;\n        }\n        else {\n          elapsedTime = 0xfc;\n        }\n      }\n      else {\n        elapsedTime = 0xfc;\n      }\n      targetDelay = (targetDelay / clockFrequency) * elapsedTime;\n      for (; currentDelay <= targetDelay && targetDelay - currentDelay != 0; currentDelay = currentDelay + 1) {\n        if ((timeout != 0xffffffff) &&\n           ((timeout == 0 || (elapsedTime = HAL_GetTick(), timeout < (uint)(elapsedTime - startTime))))) {\n          data[10] = (uint *)((uint)data[10] | 4);\n          *(undefined *)(data + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **data = 0xffffffed;\n      data[10] = (uint *)((uint)data[10] | 0x200);\n      if (((*data)[2] & 0xe0000) == 0xe0000) {\n        if (data[3] == (uint *)0x0) {\n          data[10] = (uint *)((uint)data[10] & 0xfffffeff);\n          if (((uint)data[10] & 0x1000) == 0) {\n            data[10] = (uint *)((uint)data[10] | 1);\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        returnValue = 0;\n      }\n    }\n  }\n  else {\n    data[10] = (uint *)((uint)data[10] | 0x20);\n    *(undefined *)(data + 9) = 0;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "calculate_delay_08001cd0",
                "param_1": "data",
                "param_2": "timeout",
                "iVar1": "startTime",
                "uVar2": "clockFrequency",
                "iVar3": "elapsedTime",
                "uVar4": "returnValue",
                "puVar5": "flags",
                "uVar6": "targetDelay",
                "local_1c": "currentDelay"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_value_08001e40",
            "code": "\nundefined4 getOffsetValue_08001e40(int *offsetPtr)\n\n{\n  return *(undefined4 *)(*offsetPtr + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "offsetPtr"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_config_08001e48",
            "code": "\nundefined4 updateConfig_08001e48(int *configPtr,uint *dataPtr)\n\n{\n  undefined4 returnValue;\n  uint shiftValue;\n  int loopCounter;\n  \n  if (*(char *)(configPtr + 9) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 9) = 1;\n    shiftValue = dataPtr[1];\n    if (shiftValue < 7) {\n      shiftValue = shiftValue * 5 - 5;\n      *(uint *)(*configPtr + 0x34) =\n           *dataPtr << (shiftValue & 0xff) | *(uint *)(*configPtr + 0x34) & ~(0x1f << (shiftValue & 0xff));\n    }\n    else if (shiftValue < 0xd) {\n      shiftValue = shiftValue * 5 - 0x23;\n      *(uint *)(*configPtr + 0x30) =\n           *dataPtr << (shiftValue & 0xff) | *(uint *)(*configPtr + 0x30) & ~(0x1f << (shiftValue & 0xff));\n    }\n    else {\n      shiftValue = shiftValue * 5 - 0x41;\n      *(uint *)(*configPtr + 0x2c) =\n           *dataPtr << (shiftValue & 0xff) | *(uint *)(*configPtr + 0x2c) & ~(0x1f << (shiftValue & 0xff));\n    }\n    shiftValue = *dataPtr;\n    if (shiftValue < 10) {\n      *(uint *)(*configPtr + 0x10) =\n           dataPtr[2] << (shiftValue * 3 & 0xff) |\n           *(uint *)(*configPtr + 0x10) & ~(7 << (shiftValue * 3 & 0xff));\n    }\n    else {\n      shiftValue = shiftValue * 3 - 0x1e;\n      *(uint *)(*configPtr + 0xc) =\n           dataPtr[2] << (shiftValue & 0xff) | *(uint *)(*configPtr + 0xc) & ~(7 << (shiftValue & 0xff));\n    }\n    if (*dataPtr - 0x10 < 2) {\n      if (*configPtr == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*dataPtr == 0x10) {\n            for (loopCounter = (DAT_20000084 / 1000000) * 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n            }\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        configPtr[10] = configPtr[10] | 0x20;\n        returnValue = 1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n    *(undefined *)(configPtr + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_config_08001e48",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "returnValue",
                "uVar2": "shiftValue",
                "local_c": "loopCounter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_offset_value_08001f80",
            "code": "\nundefined4 getOffsetValue_08001f80(int baseAddress)\n\n{\n  return *(undefined4 *)(baseAddress + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_offset_value_08001f80",
                "param_1": "baseAddress"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "initialize_device_08001f84",
            "code": "\nundefined4 initializeDevice_08001f84(int *deviceData,undefined4 param)\n\n{\n  int currentTick;\n  undefined4 result;\n  int ptrToData;\n  uint loopCounter;\n  \n  ptrToData = *deviceData;\n  if ((*(uint *)(ptrToData + 8) & 1) == 0) {\n    *(uint *)(ptrToData + 8) = *(uint *)(ptrToData + 8) | 1;\n    for (loopCounter = DAT_20000084 / 1000000; loopCounter != 0; loopCounter = loopCounter - 1) {\n    }\n    ptrToData = HAL_GetTick(deviceData,param,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*deviceData + 8) & 1) != 0) {\n        return 0;\n      }\n      currentTick = HAL_GetTick();\n    } while ((uint)(currentTick - ptrToData) < 3);\n    deviceData[10] = deviceData[10] | 0x10;\n    deviceData[0xb] = deviceData[0xb] | 1;\n    *(undefined *)(deviceData + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "initialize_device_08001f84",
                "param_1": "deviceData",
                "param_2": "param",
                "iVar1": "currentTick",
                "iVar3": "ptrToData",
                "uVar2": "result",
                "local_14": "loopCounter"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "initialize_adc_08002004",
            "code": "\n\n\nint initializeADC_08002004(int *adcParams)\n\n{\n  int result;\n  undefined4 *ptr;\n  int var;\n  \n  if (*(char *)(adcParams + 9) != '\\x01') {\n    *(undefined *)(adcParams + 9) = 1;\n    result = enableADC();\n    if (result == 0) {\n      adcParams[10] = adcParams[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*adcParams;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        adcParams[10] = adcParams[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          adcParams[10] = adcParams[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        adcParams[10] = adcParams[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          adcParams[10] = adcParams[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((adcParams[10] & 0x1000U) == 0) {\n        adcParams[0xb] = 0;\n      }\n      else {\n        adcParams[0xb] = adcParams[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(adcParams + 9) = 0;\n      *ptr = 0xfffffffd;\n      var = *adcParams;\n      if (((*(uint *)(var + 8) & 0xe0000) == 0xe0000) &&\n         ((var != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(var + 8) = *(uint *)(var + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(var + 8) = *(uint *)(var + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(adcParams + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "initialize_adc_08002004",
                "param_1": "adcParams",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "var",
                "ADC_Enable": "enableADC"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "check_and_set_flags_080020f0",
            "code": "\nundefined4 checkAndSetFlags_080020f0(int *inputArray)\n\n{\n  int currentTime;\n  int value;\n  \n  value = *inputArray;\n  if ((*(uint *)(value + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(value + 8) = *(uint *)(value + 8) & 0xfffffffe;\n  value = getTickCount();\n  do {\n    if ((*(uint *)(*inputArray + 8) & 1) == 0) {\n      return 0;\n    }\n    currentTime = getTickCount();\n  } while ((uint)(currentTime - value) < 3);\n  inputArray[10] = inputArray[10] | 0x10;\n  inputArray[0xb] = inputArray[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "check_and_set_flags_080020f0",
                "param_1": "inputArray",
                "iVar1": "currentTime",
                "iVar2": "value",
                "HAL_GetTick": "getTickCount"
            },
            "calling": [
                "HAL_ADC_Init",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "initialize_adc_0800213c",
            "code": "\nundefined4 initializeADC_0800213c(int *adcParams)\n\n{\n  int result;\n  uint combinedValues;\n  uint flags;\n  \n  if (adcParams == (int *)0x0) {\n    return 1;\n  }\n  if (adcParams[10] == 0) {\n    adcParams[0xb] = 0;\n    *(undefined *)(adcParams + 9) = 0;\n    initializeHAL_ADC();\n  }\n  result = stopDisableConversion(adcParams);\n  if (((adcParams[10] & 0x10U) == 0) && (result == 0)) {\n    adcParams[10] = adcParams[10] & 0xffffeefdU | 2;\n    combinedValues = adcParams[1] | adcParams[7] | adcParams[3] << 1;\n    if (adcParams[2] == 0x100) {\n      flags = 0x100;\n    }\n    else {\n      flags = 0;\n      if (adcParams[2] == 1) {\n        flags = 0x100;\n      }\n    }\n    if (adcParams[5] == 1) {\n      if (adcParams[3] == 0) {\n        flags = flags | (adcParams[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        adcParams[10] = adcParams[10] | 0x20;\n        adcParams[0xb] = adcParams[0xb] | 1;\n      }\n    }\n    *(uint *)(*adcParams + 4) = flags | *(uint *)(*adcParams + 4) & 0xffff16ff;\n    *(uint *)(*adcParams + 8) = *(uint *)(*adcParams + 8) & 0xffe1f7fd | combinedValues;\n    if ((adcParams[2] == 0x100) || (adcParams[2] == 1)) {\n      flags = (adcParams[4] + -1) * 0x100000;\n    }\n    else {\n      flags = 0;\n    }\n    *(uint *)(*adcParams + 0x2c) = flags | *(uint *)(*adcParams + 0x2c) & 0xff0fffff;\n    if (combinedValues != (*(uint *)(*adcParams + 8) & 0xff1f0efe)) {\n      adcParams[10] = adcParams[10] & 0xffffffedU | 0x10;\n      adcParams[0xb] = adcParams[0xb] | 1;\n      return 1;\n    }\n    adcParams[0xb] = 0;\n    adcParams[10] = adcParams[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  adcParams[10] = adcParams[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "initialize_adc_0800213c",
                "param_1": "adcParams",
                "iVar1": "result",
                "uVar2": "combinedValues",
                "uVar3": "flags",
                "HAL_ADC_MspInit": "initializeHAL_ADC",
                "ADC_ConversionStop_Disable": "stopDisableConversion"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "disable_adc_conversion_0800224c",
            "code": "\nint disableADCConversion_0800224c(int *adcParams)\n\n{\n  int result;\n  \n  if (adcParams == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    adcParams[10] = adcParams[10] | 2;\n    result = ADC_ConversionStop_Disable();\n    if (result == 0) {\n      *(undefined4 *)*adcParams = 0xffffffe0;\n      *(uint *)(*adcParams + 4) = *(uint *)(*adcParams + 4) & 0xff3f0000;\n      *(uint *)(*adcParams + 8) = *(uint *)(*adcParams + 8) & 0xff0106f0;\n      *(uint *)(*adcParams + 0xc) = *(uint *)(*adcParams + 0xc) & 0xff000000;\n      *(uint *)(*adcParams + 0x10) = *(uint *)(*adcParams + 0x10) & 0xc0000000;\n      *(uint *)(*adcParams + 0x14) = *(uint *)(*adcParams + 0x14) & 0xfffff000;\n      *(uint *)(*adcParams + 0x18) = *(uint *)(*adcParams + 0x18) & 0xfffff000;\n      *(uint *)(*adcParams + 0x1c) = *(uint *)(*adcParams + 0x1c) & 0xfffff000;\n      *(uint *)(*adcParams + 0x20) = *(uint *)(*adcParams + 0x20) & 0xfffff000;\n      *(uint *)(*adcParams + 0x24) = *(uint *)(*adcParams + 0x24) & 0xfffff000;\n      *(uint *)(*adcParams + 0x28) = *(uint *)(*adcParams + 0x28) & 0xfffff000;\n      *(uint *)(*adcParams + 0x2c) = *(uint *)(*adcParams + 0x2c) & 0xff000000;\n      *(uint *)(*adcParams + 0x2c) = *(uint *)(*adcParams + 0x2c) & 0xff000000;\n      *(uint *)(*adcParams + 0x30) = *(uint *)(*adcParams + 0x30) & 0xc0000000;\n      *(uint *)(*adcParams + 0x34) = *(uint *)(*adcParams + 0x34) & 0xc0000000;\n      *(uint *)(*adcParams + 0x38) = *(uint *)(*adcParams + 0x38) & 0xffc00000;\n      *(uint *)(*adcParams + 0x38) = *(uint *)(*adcParams + 0x38) & 0xffc00000;\n      deinitializeADC(adcParams);\n      adcParams[0xb] = 0;\n      adcParams[10] = 0;\n    }\n    *(undefined *)(adcParams + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "disable_adc_conversion_0800224c",
                "param_1": "adcParams",
                "iVar1": "result",
                "HAL_ADC_MspDeInit": "deinitializeADC"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspDeInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "check_and_stop_adc_conversion_08002348",
            "code": "\nint checkAndStopADCConversion_08002348(int inputParam)\n\n{\n  int result;\n  \n  if (*(char *)(inputParam + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(inputParam + 0x24) = 1;\n  result = ADC_ConversionStop_Disable();\n  if (result == 0) {\n    *(uint *)(inputParam + 0x28) = *(uint *)(inputParam + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(inputParam + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "check_and_stop_adc_conversion_08002348",
                "param_1": "inputParam",
                "iVar1": "result"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "initialize_adc_08002384",
            "code": "\nint initializeADC_08002384(int *adcConfig)\n\n{\n  uint freqDivider;\n  int disableResult;\n  uint periphClockFreq;\n  int startTick;\n  int currentTick;\n  int loopCounter;\n  \n  if (*(char *)(adcConfig + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adcConfig + 9) = 1;\n  disableResult = ADC_ConversionStop_Disable();\n  if (disableResult == 0) {\n    adcConfig[10] = adcConfig[10] & 0xffffeefdU | 2;\n    freqDivider = DAT_20000084;\n    periphClockFreq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loopCounter = freqDivider / periphClockFreq << 1; loopCounter != 0; loopCounter = loopCounter + -1) {\n    }\n    ADC_Enable(adcConfig);\n    *(uint *)(*adcConfig + 8) = *(uint *)(*adcConfig + 8) | 8;\n    startTick = HAL_GetTick();\n    while (currentTick = *adcConfig, (*(uint *)(currentTick + 8) & 8) != 0) {\n      currentTick = HAL_GetTick();\n      if (10 < (uint)(currentTick - startTick)) {\n        adcConfig[10] = adcConfig[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adcConfig + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentTick + 8) = *(uint *)(currentTick + 8) | 4;\n    startTick = HAL_GetTick();\n    while ((*(uint *)(*adcConfig + 8) & 4) != 0) {\n      currentTick = HAL_GetTick();\n      if (10 < (uint)(currentTick - startTick)) {\n        adcConfig[10] = adcConfig[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adcConfig + 9) = 0;\n        return 1;\n      }\n    }\n    adcConfig[10] = adcConfig[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(adcConfig + 9) = 0;\n  return disableResult;\n}\n\n",
            "renaming": {
                "FUN_08002384": "initialize_adc_08002384",
                "param_1": "adcConfig",
                "uVar1": "freqDivider",
                "iVar2": "disableResult",
                "uVar3": "periphClockFreq",
                "iVar4": "startTick",
                "iVar5": "currentTick",
                "local_14": "loopCounter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_GetTick",
                "ADC_Enable",
                "HAL_RCCEx_GetPeriphCLKFreq",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_register_value_08002470",
            "code": "\n\n\nvoid updateRegisterValue_08002470(uint newValue)\n\n{\n  _DAT_e000ed0c = (newValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_register_value_08002470",
                "param_1": "newValue"
            },
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "apply_transformation_08002494",
            "code": "\n\n\nvoid applyTransformation_08002494(uint inputValue,uint bitMask,uint bitValue)\n\n{\n  uint shiftAmount;\n  uint shiftedValue;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftedValue = 7 - shiftAmount;\n  if (3 < shiftedValue) {\n    shiftedValue = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitMask & (1 << (shiftedValue & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & bitValue;\n  if ((int)inputValue < 0) {\n    *(char *)((inputValue & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(inputValue + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "apply_transformation_08002494",
                "param_1": "inputValue",
                "param_2": "bitMask",
                "param_3": "bitValue",
                "uVar1": "shiftAmount",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback",
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_in_memory_080024f8",
            "code": "\nvoid setBitInMemory_080024f8(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_in_memory_080024f8",
                "param_1": "bitIndex"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "initialize_value_08002514",
            "code": "\n\n\nundefined4 initializeValue_08002514(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "initialize_value_08002514",
                "param_1": "value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_in_array_08002540",
            "code": "\nvoid setBitInArray_08002540(uint inputIndex)\n\n{\n  if (-1 < (int)inputIndex) {\n    *(int *)(((inputIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_in_array_08002540",
                "param_1": "inputIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "update_data_flag_08002560",
            "code": "\n\n\nvoid updateDataFlag_08002560(int inputValue)\n\n{\n  if (inputValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "update_data_flag_08002560",
                "param_1": "inputValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "handle_sys_tick_interrupt_08002582",
            "code": "\nvoid handleSysTickInterrupt_08002582(void)\n\n{\n  processSysTickEvent();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "handle_sys_tick_interrupt_08002582",
                "HAL_SYSTICK_Callback": "processSysTickEvent"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "set_data_and_execute_0800258c",
            "code": "\n\n\nundefined4 set_data_and_execute_0800258c(uint **data)\n\n{\n  uint *pointer;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    error_code = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  pointer = *data;\n  if (pointer == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (pointer == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (pointer == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (pointer == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (pointer == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (pointer == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (callback_func != (uint *)0x0) {\n    (*(code *)callback_func)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "set_data_and_execute_0800258c",
                "param_1": "data",
                "puVar1": "pointer",
                "param_1[0xe]": "error_code",
                "param_1[0xd]": "callback_func"
            },
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "set_bits_based_on_conditions_08002624",
            "code": "\n\n\nvoid setBitsBasedOnConditions_08002624(uint *outputArray,uint *inputArray)\n\n{\n  uint *outputPointer;\n  uint bitMask;\n  uint maskResult;\n  uint i;\n  uint opcode;\n  uint newValue;\n  int shiftAmount1;\n  int shiftAmount2;\n  \n  newValue = 0;\n  i = 0;\n  do {\n    if (0xf < i) {\n      return;\n    }\n    bitMask = 1 << (i & 0xff);\n    maskResult = *inputArray & bitMask;\n    if (bitMask == maskResult) {\n      opcode = inputArray[1];\n      if (opcode == 0x12) {\n        newValue = inputArray[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          newValue = inputArray[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08002776;\n          if (opcode == 1) {\n            newValue = inputArray[3];\n          }\n        }\n        else if (opcode == 3) {\n          newValue = 0;\n        }\n        else if (opcode == 0x11) {\n          newValue = inputArray[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08002776:\n        if (inputArray[2] == 0) {\n          newValue = 4;\n        }\n        else if (inputArray[2] == 1) {\n          outputArray[4] = bitMask;\n          newValue = 8;\n        }\n        else {\n          outputArray[5] = bitMask;\n          newValue = 8;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((opcode == 0x10310000) || ((opcode == 0x10320000 || (opcode == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = i;\n      outputPointer = outputArray;\n      if (0xff < maskResult) {\n        bitMask = i - 8;\n        outputPointer = outputArray + 1;\n      }\n      *outputPointer = *outputPointer & ~(0xf << (bitMask << 2 & 0xff)) | newValue << (bitMask << 2 & 0xff);\n      if ((inputArray[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount1 = (i & 3) << 2;\n        if (outputArray == (uint *)0x40010800) {\n          shiftAmount2 = 0;\n        }\n        else if (outputArray == (uint *)0x40010c00) {\n          shiftAmount2 = 1;\n        }\n        else if (outputArray == (uint *)0x40011000) {\n          shiftAmount2 = 2;\n        }\n        else if (outputArray == (uint *)0x40011400) {\n          shiftAmount2 = 3;\n        }\n        else {\n          shiftAmount2 = 4;\n        }\n        *(uint *)(((i >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((i >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shiftAmount1) | shiftAmount2 << shiftAmount1;\n        if ((inputArray[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~maskResult;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | maskResult;\n        }\n        if ((inputArray[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~maskResult;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | maskResult;\n        }\n        if ((inputArray[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~maskResult;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | maskResult;\n        }\n        if ((inputArray[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~maskResult;\n        }\n        else {\n          _DAT_4001040c = maskResult | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "set_bits_based_on_conditions_08002624",
                "param_1": "outputArray",
                "param_2": "inputArray",
                "puVar1": "outputPointer",
                "uVar2": "bitMask",
                "uVar3": "maskResult",
                "uVar4": "i",
                "uVar5": "opcode",
                "uVar6": "newValue",
                "iVar7": "shiftAmount1",
                "iVar8": "shiftAmount2"
            },
            "calling": [
                "uart_init",
                "digital_io_init",
                "HAL_ADC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bit_08002810",
            "code": "\nundefined4 check_bit_08002810(int data_address,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(data_address + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "data_address",
                "param_2": "bit_mask"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "update_param_0800281e",
            "code": "\nvoid updateParam_0800281e(int baseAddress,int newValue,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(baseAddress + 0x10) = newValue << 0x10;\n    return;\n  }\n  *(int *)(baseAddress + 0x10) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "update_param_0800281e",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "isShifted"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_and_callback_0800282c",
            "code": "\n\n\nvoid updateAndCallback_0800282c(uint newValue)\n\n{\n  if ((_DAT_40010414 & newValue) != 0) {\n    _DAT_40010414 = newValue;\n    handleGpioExtiCallback();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_and_callback_0800282c",
                "param_1": "newValue",
                "HAL_GPIO_EXTI_Callback": "handleGpioExtiCallback"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_flag_value_08002848",
            "code": "\nundefined4 updateFlagValue_08002848(int *flagData)\n\n{\n  if (*(char *)((int)flagData + 0x3e) == '@') {\n    if (flagValue1 == 0) {\n      *(uint *)(*flagData + 0x10) = flagValue2 & 0xfe;\n    }\n    else {\n      *(uint *)(*flagData + 0x10) = flagValue2 & 0xffU | 1;\n    }\n  }\n  else if (flagData[4] == 0x4000) {\n    if (*(char *)((int)flagData + 0x3d) == '!') {\n      *(uint *)(*flagData + 0x10) = flagValue2 & 0xfe;\n    }\n    else {\n      *(uint *)(*flagData + 0x10) = flagValue2 & 0xffU | 1;\n    }\n  }\n  else if (flagValue1 == 0) {\n    *(uint *)(*flagData + 0x10) = (uint)(flagValue2 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flagValue1 == 1) {\n    *(uint *)(*flagData + 0x10) = (uint)(flagValue2 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_flag_value_08002848",
                "param_1": "flagData",
                "param_1[0x14]": "flagValue1",
                "param_1[0x11]": "flagValue2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "store_parameter_byte_080028d2",
            "code": "\nundefined4 storeParameterByte_080028d2(int *pointer)\n\n{\n  *(uint *)(*pointer + 0x10) = value & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "store_parameter_byte_080028d2",
                "param_1": "pointer",
                "param_1[0x11]": "value"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "update_flags_080028de",
            "code": "\nundefined4 updateFlags_080028de(uint **parameters)\n\n{\n  uint *parameter;\n  \n  parameter = variablePtr4;\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((variablePtr != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((variablePtr == (uint *)0x0) && (variablePtr2 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      variablePtr = (uint *)((int)variablePtr + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (parameter == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          parameter = *parameters;\n          if ((pointerValue & 0x800) == 0) {\n            *parameter = *parameter | 0x200;\n          }\n          else {\n            *parameter = *parameter & 0xfffffbff;\n          }\n        }\n        else if (((parameter == (uint *)0x4) || (parameter == (uint *)0x8)) ||\n                (variablePtr3 == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (variablePtr4 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (variablePtr4 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        parameter = *parameters;\n        if ((pointerValue & 0x800) != 0) {\n          pointerValue = pointerValue | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        parameter = *parameters;\n        if ((pointerValue & 0x800) != 0) {\n          pointerValue = pointerValue | 0x1000;\n        }\n      }\n      variablePtr = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "update_flags_080028de",
                "param_1": "parameters",
                "puVar1": "parameter",
                "param_1[0x14]": "variablePtr",
                "param_1[4]": "variablePtr2",
                "param_1[0xc]": "variablePtr3",
                "param_1[0xb]": "variablePtr4",
                "puVar1[1]": "pointerValue"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_data_08002ab8",
            "code": "\nundefined4 updateData_08002ab8(int *data)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtr = (byte *)data[9];\n    data[9] = (int)(bytePtr + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePtr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_data_08002ab8",
                "param_1": "data",
                "pbVar1": "bytePtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_and_decrement_value_08002ad8",
            "code": "\nundefined4 updateAndDecrementValue_08002ad8(int *inputArray)\n\n{\n  undefined *ptrToValue;\n  \n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    ptrToValue = (undefined *)inputArray[9];\n    inputArray[9] = (int)(ptrToValue + 1);\n    *ptrToValue = (char)*(undefined4 *)(*inputArray + 0x10);\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_and_decrement_value_08002ad8",
                "param_1": "inputArray",
                "puVar1": "ptrToValue"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "check_param_validity_08002af8",
            "code": "\nundefined4 check_param_validity_08002af8(uint **param_ptr,uint *param_data,int param_length,uint *param_buffer)\n\n{\n  undefined4 result;\n  uint *ptr_var;\n  \n  if (*(char *)((int)param_ptr + 0x3d) == '(') {\n    if (param_data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (param_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_ptr + 0xf) = 1;\n      ptr_var = *param_ptr;\n      if ((*ptr_var & 1) == 0) {\n        *ptr_var = *ptr_var | 1;\n      }\n      **param_ptr = **param_ptr & 0xfffff7ff;\n      *(undefined *)((int)param_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)param_ptr + 0x3e) = 0x20;\n      result = 0;\n      param_ptr[0x10] = (uint *)0x0;\n      param_ptr[9] = param_data;\n      *(short *)((int)param_ptr + 0x2a) = (short)param_length;\n      param_ptr[0xb] = param_buffer;\n      *(undefined2 *)(param_ptr + 10) = *(undefined2 *)((int)param_ptr + 0x2a);\n      *(undefined *)(param_ptr + 0xf) = 0;\n      (*param_ptr)[1] = (*param_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "check_param_validity_08002af8",
                "param_1": "param_ptr",
                "param_2": "param_data",
                "param_3": "param_length",
                "param_4": "param_buffer",
                "uVar1": "result",
                "puVar2": "ptr_var"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "process_input_08002b84",
            "code": "\nundefined4 processInput_08002b84(uint **inputData,uint *dataPointer,int dataLength,uint *outputPointer)\n\n{\n  undefined4 result;\n  uint *tempPointer;\n  \n  if (*(char *)((int)inputData + 0x3d) == '(') {\n    if (dataPointer == (uint *)0x0) {\n      result = 1;\n    }\n    else if (dataLength == 0) {\n      result = 1;\n    }\n    else if (*(char *)(inputData + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputData + 0xf) = 1;\n      tempPointer = *inputData;\n      if ((*tempPointer & 1) == 0) {\n        *tempPointer = *tempPointer | 1;\n      }\n      **inputData = **inputData & 0xfffff7ff;\n      *(undefined *)((int)inputData + 0x3d) = 0x2a;\n      *(undefined *)((int)inputData + 0x3e) = 0x20;\n      result = 0;\n      inputData[0x10] = (uint *)0x0;\n      inputData[9] = dataPointer;\n      *(short *)((int)inputData + 0x2a) = (short)dataLength;\n      inputData[0xb] = outputPointer;\n      *(undefined2 *)(inputData + 10) = *(undefined2 *)((int)inputData + 0x2a);\n      *(undefined *)(inputData + 0xf) = 0;\n      (*inputData)[1] = (*inputData)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "process_input_08002b84",
                "param_1": "inputData",
                "param_2": "dataPointer",
                "param_3": "dataLength",
                "param_4": "outputPointer",
                "uVar1": "result",
                "puVar2": "tempPointer"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "initialize_data_08002c10",
            "code": "\nundefined4 initializeData_08002c10(uint **dataPtr)\n\n{\n  uint *ptrToData;\n  \n  if (*(char *)((int)dataPtr + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPtr + 0x3d) = 0x28;\n  ptrToData = *dataPtr;\n  if ((*ptrToData & 1) == 0) {\n    *ptrToData = *ptrToData | 1;\n  }\n  **dataPtr = **dataPtr | 0x400;\n  (*dataPtr)[1] = (*dataPtr)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "initialize_data_08002c10",
                "param_1": "dataPtr",
                "puVar1": "ptrToData"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_SlaveTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_data_08002c54",
            "code": "\nundefined4 processData_08002c54(int *data)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      HAL_I2C_SlaveTxCpltCallback();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "data",
                "cVar1": "charValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "I2C_Slave_STOPF",
                "I2C_SlaveReceive_RXNE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "update_and_process_data_08002ca6",
            "code": "\nundefined4 updateAndProcessData_08002ca6(int *data)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      processI2CData();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "update_and_process_data_08002ca6",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr",
                "HAL_I2C_SlaveRxCpltCallback()": "processI2CData()"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "perform_i2_c_transaction_08002cf2",
            "code": "\nundefined4 performI2CTransaction_08002cf2(int *i2cData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 selectedAddr;\n  uint data;\n  \n  data = *(uint *)(*i2cData + 0x18);\n  if ((data & 0x80) == 0) {\n    selectedAddr = *(undefined2 *)(i2cData + 3);\n  }\n  else {\n    selectedAddr = *(undefined2 *)(i2cData + 6);\n  }\n  handleI2CAddressCallback(i2cData,(*(uint *)(*i2cData + 0x18) & 4) == 0,selectedAddr,data,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "perform_i2_c_transaction_08002cf2",
                "param_1": "i2cData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "selectedAddr",
                "uVar2": "data",
                "HAL_I2C_AddrCallback": "handleI2CAddressCallback"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "handle_i2_c_event_08002d1c",
            "code": "\nundefined4 handleI2CEvent_08002d1c(uint **eventPacket)\n\n{\n  if (((eventPacket[11] == (uint *)0x4) || (eventPacket[11] == (uint *)0x8)) &&\n     (*(char *)((int)eventPacket + 0x3d) == '(')) {\n    eventPacket[11] = (uint *)0xffff0000;\n    (*eventPacket)[1] = (*eventPacket)[1] & 0xfffff8ff;\n    (*eventPacket)[5] = 0xfffffbff;\n    **eventPacket = **eventPacket & 0xfffffbff;\n    eventPacket[12] = (uint *)0x0;\n    *(undefined *)((int)eventPacket + 0x3d) = 0x20;\n    *(undefined *)((int)eventPacket + 0x3e) = 0;\n    handleListenCompleteCallback();\n  }\n  else if (*(char *)((int)eventPacket + 0x3d) == 'EXCLAMATION_CONSTANT') {\n    eventPacket[11] = (uint *)0xffff0000;\n    eventPacket[12] = (uint *)0x21;\n    *(undefined *)((int)eventPacket + 0x3d) = 0x20;\n    *(undefined *)((int)eventPacket + 0x3e) = 0;\n    (*eventPacket)[1] = (*eventPacket)[1] & 0xfffff8ff;\n    (*eventPacket)[5] = 0xfffffbff;\n    **eventPacket = **eventPacket & 0xfffffbff;\n    handleSlaveTransmitCompleteCallback();\n  }\n  else {\n    (*eventPacket)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "handle_i2_c_event_08002d1c",
                "param_1": "eventPacket",
                "param_1[0xb]": "eventPacket[11]",
                "param_1[0xc]": "eventPacket[12]",
                "!": "EXCLAMATION_CONSTANT",
                "HAL_I2C_ListenCpltCallback": "handleListenCompleteCallback",
                "HAL_I2C_SlaveTxCpltCallback": "handleSlaveTransmitCompleteCallback"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "execute_i2_c_transaction_08002db2",
            "code": "\nundefined4 executeI2CTransaction_08002db2(uint **transaction)\n\n{\n  char firstChar;\n  uint *valuePtr;\n  \n  firstChar = *(char *)((int)transaction + 0x3d);\n  valuePtr = transaction[0xb];\n  if ((*(short *)(transaction + 10) == 0) && (firstChar == '!')) {\n    if ((valuePtr == (uint *)0x4) || ((valuePtr == (uint *)0x8 || (valuePtr == (uint *)0xffff0000)))) {\n      (*transaction)[1] = (*transaction)[1] & 0xfffff8ff;\n      **transaction = **transaction | 0x200;\n      transaction[0xc] = (uint *)0x0;\n      *(undefined *)((int)transaction + 0x3d) = 0x20;\n      if (*(char *)((int)transaction + 0x3e) == '@') {\n        *(undefined *)((int)transaction + 0x3e) = 0;\n        HAL_I2C_MemTxCpltCallback();\n      }\n      else {\n        *(undefined *)((int)transaction + 0x3e) = 0;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      (*transaction)[1] = (*transaction)[1] & 0xfffff8ff;\n      transaction[0xc] = (uint *)0x11;\n      *(undefined *)((int)transaction + 0x3e) = 0;\n      *(undefined *)((int)transaction + 0x3d) = 0x20;\n      HAL_I2C_MasterTxCpltCallback();\n    }\n  }\n  else if ((firstChar == '!') || ((*(char *)((int)transaction + 0x3e) == '@' && (firstChar == '\\\"')))) {\n    if (*(short *)((int)transaction + 0x2a) == 0) {\n      (*transaction)[1] = (*transaction)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)transaction + 0x3e) == '@') {\n      if (transaction[0x14] == (uint *)0x0) {\n        if (transaction[0x13] == (uint *)0x1) {\n          (*transaction)[4] = (uint)transaction[0x12] & 0xff;\n          transaction[0x14] = (uint *)((int)transaction[0x14] + 2);\n        }\n        else {\n          (*transaction)[4] = (uint)((int)transaction[0x12] << 0x10) >> 0x18;\n          transaction[0x14] = (uint *)((int)transaction[0x14] + 1);\n        }\n      }\n      else if (transaction[0x14] == (uint *)0x1) {\n        (*transaction)[4] = (uint)transaction[0x12] & 0xff;\n        transaction[0x14] = (uint *)((int)transaction[0x14] + 1);\n      }\n      else if (transaction[0x14] == (uint *)0x2) {\n        if (*(char *)((int)transaction + 0x3d) == '\\\"') {\n          **transaction = **transaction | 0x100;\n        }\n        else if (*(char *)((int)transaction + 0x3d) == '!') {\n          valuePtr = transaction[9];\n          transaction[9] = (uint *)((int)valuePtr + 1);\n          (*transaction)[4] = (uint)*(byte *)valuePtr;\n          *(short *)((int)transaction + 0x2a) = *(short *)((int)transaction + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      valuePtr = transaction[9];\n      transaction[9] = (uint *)((int)valuePtr + 1);\n      (*transaction)[4] = (uint)*(byte *)valuePtr;\n      *(short *)((int)transaction + 0x2a) = *(short *)((int)transaction + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "execute_i2_c_transaction_08002db2",
                "param_1": "transaction",
                "cVar1": "firstChar",
                "puVar2": "valuePtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "handle_i2_c_transfer_08002efc",
            "code": "\nundefined4 handleI2CTransfer_08002efc(uint **transferParams)\n\n{\n  uint *ptrToUints;\n  \n  ptrToUints = transferParams[0xb];\n  if (*(char *)((int)transferParams + 0x3d) == '!') {\n    if (*(short *)((int)transferParams + 0x2a) == 0) {\n      if (((ptrToUints == (uint *)0x4) || (ptrToUints == (uint *)0x8)) || (ptrToUints == (uint *)0xffff0000)) {\n        (*transferParams)[1] = (*transferParams)[1] & 0xfffff8ff;\n        **transferParams = **transferParams | 0x200;\n        transferParams[0xc] = (uint *)0x0;\n        *(undefined *)((int)transferParams + 0x3d) = 0x20;\n        if (*(char *)((int)transferParams + 0x3e) == '@') {\n          *(undefined *)((int)transferParams + 0x3e) = 0;\n          handleMemTxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)transferParams + 0x3e) = 0;\n          handleMasterTxCpltCallback();\n        }\n      }\n      else {\n        (*transferParams)[1] = (*transferParams)[1] & 0xfffff8ff;\n        transferParams[0xc] = (uint *)0x11;\n        *(undefined *)((int)transferParams + 0x3e) = 0;\n        *(undefined *)((int)transferParams + 0x3d) = 0x20;\n        handleMasterTxCpltCallback();\n      }\n    }\n    else {\n      ptrToUints = transferParams[9];\n      transferParams[9] = (uint *)((int)ptrToUints + 1);\n      (*transferParams)[4] = (uint)*(byte *)ptrToUints;\n      *(short *)((int)transferParams + 0x2a) = *(short *)((int)transferParams + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "handle_i2_c_transfer_08002efc",
                "param_1": "transferParams",
                "puVar1": "ptrToUints",
                "HAL_I2C_MemTxCpltCallback": "handleMemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback": "handleMasterTxCpltCallback"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterTxCpltCallback",
                "HAL_I2C_MemTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "process_i2_c_data_08002f9c",
            "code": "\nundefined4 processI2CData_08002f9c(uint **data)\n\n{\n  uint *ptr;\n  \n  if (*(char *)((int)data + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)data + 0x2a) < 4) {\n      if (*(ushort *)((int)data + 0x2a) - 2 < 2) {\n        if (data[0xb] == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n          **data = **data | 0x800;\n        }\n        (*data)[1] = (*data)[1] & 0xfffffbff;\n      }\n      else {\n        if (data[0xb] == (uint *)0x2) {\n          **data = **data | 0x400;\n        }\n        else {\n          **data = **data & 0xfffffbff;\n        }\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        ptr = data[9];\n        data[9] = (uint *)((int)ptr + 1);\n        *(char *)ptr = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        data[0xc] = (uint *)0x0;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handleMemRxCplt();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handleMasterRxCplt();\n        }\n      }\n    }\n    else {\n      ptr = data[9];\n      data[9] = (uint *)((int)ptr + 1);\n      *(char *)ptr = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "process_i2_c_data_08002f9c",
                "param_1": "data",
                "puVar1": "ptr",
                "HAL_I2C_MemRxCpltCallback": "handleMemRxCplt",
                "HAL_I2C_MasterRxCpltCallback": "handleMasterRxCplt"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "process_data_0800306c",
            "code": "\nundefined4 processData_0800306c(uint **paramArray)\n\n{\n  uint *tempPtr;\n  \n  tempPtr = paramArray[11];\n  if (*(short *)((int)paramArray + 0x2a) == 3) {\n    if (((tempPtr == (uint *)0x4) || (tempPtr == (uint *)0x8)) || (tempPtr == (uint *)0xffff0000)) {\n      **paramArray = **paramArray & 0xfffffbff;\n    }\n    tempPtr = paramArray[9];\n    paramArray[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramArray)[4];\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n  }\n  else if (*(short *)((int)paramArray + 0x2a) == 2) {\n    if (((tempPtr == (uint *)0x4) || (tempPtr == (uint *)0x8)) || (tempPtr == (uint *)0xffff0000)) {\n      (*paramArray)[1] = (*paramArray)[1] & 0xfffffcff;\n      **paramArray = **paramArray | 0x200;\n    }\n    else {\n      if (tempPtr == (uint *)0x2) {\n        **paramArray = **paramArray | 0x400;\n      }\n      else {\n        **paramArray = **paramArray & 0xfffffbff;\n      }\n      (*paramArray)[1] = (*paramArray)[1] & 0xfffffcff;\n    }\n    tempPtr = paramArray[9];\n    paramArray[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramArray)[4];\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    tempPtr = paramArray[9];\n    paramArray[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramArray)[4];\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    *(undefined *)((int)paramArray + 0x3d) = 0x20;\n    paramArray[0xc] = (uint *)0x0;\n    if (*(char *)((int)paramArray + 0x3e) == '@') {\n      *(undefined *)((int)paramArray + 0x3e) = 0;\n      HAL_I2C_MemRxCpltCallback();\n    }\n    else {\n      *(undefined *)((int)paramArray + 0x3e) = 0;\n      HAL_I2C_MasterRxCpltCallback();\n    }\n  }\n  else {\n    tempPtr = paramArray[9];\n    paramArray[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramArray)[4];\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "paramArray",
                "puVar1": "tempPtr",
                "param_1[0xb]": "paramArray[11]",
                "param_1[9]": "paramArray[9]"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MasterRxCpltCallback",
                "HAL_I2C_MemRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "handle_i2_c_event_0800316c",
            "code": "\nvoid handleI2CEvent_0800316c(uint **eventData)\n\n{\n  int result;\n  uint *charBuffer;\n  uint *event;\n  \n  if (*(byte *)((int)eventData + 0x3d) - 0x29 < 2) {\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)eventData + 0x3d) != '`') && (((*eventData)[1] & 0x800) == 0)) {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n    }\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n  }\n  **eventData = **eventData & 0xfffff7ff;\n  event = *eventData;\n  if ((event[1] & 0x800) == 0) {\n    if (*(char *)((int)eventData + 0x3d) == '`') {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n      eventData[0x10] = (uint *)0x0;\n      if ((event[5] & 0x40) != 0) {\n        charBuffer = eventData[9];\n        eventData[9] = (uint *)((int)charBuffer + 1);\n        *(char *)charBuffer = (char)event[4];\n      }\n      **eventData = **eventData & 0xfffffffe;\n      handleAbortComplete(eventData);\n    }\n    else {\n      if ((event[5] & 0x40) != 0) {\n        charBuffer = eventData[9];\n        eventData[9] = (uint *)((int)charBuffer + 1);\n        *(char *)charBuffer = (char)event[4];\n      }\n      handleError(eventData);\n    }\n  }\n  else {\n    event[1] = event[1] & 0xfffff7ff;\n    if (*(char *)((int)rxDMA + 0x21) == '\\x01') {\n      txDMA[0xd] = (uint)&someFunction;\n      result = abortDMA(txDMA);\n      if (result != 0) {\n        if (((*eventData)[5] & 0x40) != 0) {\n          event = eventData[9];\n          eventData[9] = (uint *)((int)event + 1);\n          *(char *)event = (char)(*eventData)[4];\n        }\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)txDMA[0xd])();\n      }\n    }\n    else {\n      rxDMA[0xd] = (uint)&someFunction;\n      result = abortDMA(rxDMA);\n      if (result != 0) {\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)rxDMA[0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)eventData + 0x3d) == '(') && (((uint)eventData[0x10] & 4) != 0)) {\n    eventData[0xb] = (uint *)0xffff0000;\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    handleListenComplete(eventData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "handle_i2_c_event_0800316c",
                "param_1": "eventData",
                "iVar1": "result",
                "puVar2": "charBuffer",
                "puVar3": "event",
                "HAL_I2C_AbortCpltCallback": "handleAbortComplete",
                "HAL_I2C_ErrorCallback": "handleError",
                "HAL_DMA_Abort_IT": "abortDMA",
                "param_1[0xe]": "txDMA",
                "param_1[0xd]": "rxDMA",
                "LAB_080035fc_1": "someFunction",
                "HAL_I2C_ListenCpltCallback": "handleListenComplete"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_DMA_Abort_IT",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_i2_c_data_080032b4",
            "code": "\nundefined4 processI2CData_080032b4(uint **i2cData)\n\n{\n  char firstChar;\n  uint *currentPtr;\n  uint *finalPtr;\n  \n  firstChar = *(char *)((int)i2cData + 0x3d);\n  (*i2cData)[1] = (*i2cData)[1] & 0xfffff8ff;\n  **i2cData = **i2cData | 1;\n  **i2cData = **i2cData & 0xfffffbff;\n  currentPtr = *i2cData;\n  if ((currentPtr[1] & 0x800) != 0) {\n    if ((*(char *)((int)i2cData + 0x3d) == '\\\"') || (*(char *)((int)i2cData + 0x3d) == '*')) {\n      *(short *)((int)i2cData + 0x2a) = (short)*(undefined4 *)(*i2cData[0xe] + 4);\n    }\n    else {\n      *(short *)((int)i2cData + 0x2a) = (short)*(undefined4 *)(*i2cData[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)i2cData + 0x2a) != 0) {\n    if ((currentPtr[5] & 4) != 0) {\n      finalPtr = i2cData[9];\n      i2cData[9] = (uint *)((int)finalPtr + 1);\n      *(char *)finalPtr = (char)currentPtr[4];\n      *(short *)((int)i2cData + 0x2a) = *(short *)((int)i2cData + 0x2a) + -1;\n    }\n    if (((*i2cData)[5] & 0x40) != 0) {\n      currentPtr = i2cData[9];\n      i2cData[9] = (uint *)((int)currentPtr + 1);\n      *(char *)currentPtr = (char)(*i2cData)[4];\n      *(short *)((int)i2cData + 0x2a) = *(short *)((int)i2cData + 0x2a) + -1;\n    }\n    i2cData[0x10] = (uint *)((uint)i2cData[0x10] | 4);\n  }\n  if (i2cData[0x10] == (uint *)0x0) {\n    if (((firstChar == '(') || (firstChar == '*')) || (firstChar == ')')) {\n      i2cData[0xb] = (uint *)0xffff0000;\n      i2cData[0xc] = (uint *)0x0;\n      *(undefined *)((int)i2cData + 0x3d) = 0x20;\n      *(undefined *)((int)i2cData + 0x3e) = 0;\n      HAL_I2C_ListenCpltCallback();\n    }\n    else if ((i2cData[0xc] == (uint *)0x22) || (firstChar == '\\\"')) {\n      i2cData[0xc] = (uint *)0x0;\n      *(undefined *)((int)i2cData + 0x3d) = 0x20;\n      *(undefined *)((int)i2cData + 0x3e) = 0;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  else {\n    I2C_ITError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_i2_c_data_080032b4",
                "param_1": "i2cData",
                "cVar1": "firstChar",
                "puVar2": "currentPtr",
                "puVar3": "finalPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "I2C_ITError",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_i2_c_operations_080033b8",
            "code": "\nvoid processI2COperations_080033b8(int *i2cData)\n\n{\n  int i2cAddress;\n  uint controlByte;\n  uint statusByte;\n  uint configByte;\n  \n  i2cAddress = *i2cData;\n  configByte = *(uint *)(i2cAddress + 0x18);\n  controlByte = *(uint *)(i2cAddress + 0x14);\n  statusByte = *(uint *)(i2cAddress + 4);\n  if ((*(char *)((int)i2cData + 0x3e) == '\\x10') || (*(char *)((int)i2cData + 0x3e) == '@')) {\n    if (((controlByte & 0x10001) == 0) || ((statusByte & 0x200) == 0)) {\n      if (((controlByte & 0x10008) == 0) || ((statusByte & 0x200) == 0)) {\n        if (((controlByte & 0x10002) != 0) && ((statusByte & 0x200) != 0)) {\n          I2C_Master_ADDR(i2cData);\n        }\n      }\n      else {\n        I2C_Master_ADD10(i2cData);\n      }\n    }\n    else {\n      I2C_Master_SB(i2cData);\n    }\n    if ((configByte & 0x100004) == 0) {\n      if ((((controlByte & 0x10040) != 0) && ((statusByte & 0x400) != 0)) && ((controlByte & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(i2cData);\n        return;\n      }\n      if (((controlByte & 0x10004) != 0) && ((statusByte & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(i2cData);\n        return;\n      }\n    }\n    else {\n      if ((((controlByte & 0x10080) != 0) && ((statusByte & 0x400) != 0)) && ((controlByte & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(i2cData);\n        return;\n      }\n      if (((controlByte & 0x10004) != 0) && ((statusByte & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(i2cData);\n        return;\n      }\n    }\n  }\n  else {\n    if (((controlByte & 0x10002) != 0) && ((statusByte & 0x200) != 0)) {\n      I2C_Slave_ADDR();\n      return;\n    }\n    if (((controlByte & 0x10010) != 0) && ((statusByte & 0x200) != 0)) {\n      I2C_Slave_STOPF(i2cData);\n      return;\n    }\n    if ((configByte & 0x100004) == 0) {\n      if ((((controlByte & 0x10040) != 0) && ((statusByte & 0x400) != 0)) && ((controlByte & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(i2cData);\n        return;\n      }\n      if (((controlByte & 0x10004) != 0) && ((statusByte & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(i2cData);\n      }\n    }\n    else {\n      if ((((controlByte & 0x10080) != 0) && ((statusByte & 0x400) != 0)) && ((controlByte & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(i2cData);\n        return;\n      }\n      if (((controlByte & 0x10004) != 0) && ((statusByte & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(i2cData);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_i2_c_operations_080033b8",
                "param_1": "i2cData",
                "iVar1": "i2cAddress",
                "uVar2": "controlByte",
                "uVar3": "statusByte",
                "uVar4": "configByte"
            },
            "calling": [],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_Master_SB",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_RXNE",
                "I2C_Master_ADDR",
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE",
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_ADDR",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF",
                "I2C_Slave_STOPF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "process_i2_c_data_08003520",
            "code": "\nvoid processI2CData_08003520(uint **data)\n\n{\n  char charValue;\n  uint *ptrData;\n  uint status;\n  uint conditionFlag;\n  \n  ptrData = *data;\n  status = ptrData[5];\n  conditionFlag = ptrData[1];\n  if (((status & 0x10100) != 0) && ((conditionFlag & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 1);\n    ptrData[5] = 0xfffffeff;\n    **data = **data | 0x8000;\n  }\n  if (((status & 0x10200) != 0) && ((conditionFlag & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 2);\n    (*data)[5] = 0xfffffdff;\n  }\n  if (((status & 0x10400) != 0) && ((conditionFlag & 0x100) != 0)) {\n    charValue = *(char *)((int)data + 0x3d);\n    if (((*(char *)((int)data + 0x3e) == ' ') && (*(short *)((int)data + 0x2a) == 0)) &&\n       (((charValue == '!' || (charValue == ')')) || ((charValue == '(' && (data[0xc] == (uint *)0x21)))))) {\n      I2C_Slave_AF(data);\n    }\n    else {\n      data[0x10] = (uint *)((uint)data[0x10] | 4);\n      if (*(char *)((int)data + 0x3e) == '\\x10') {\n        **data = **data | 0x200;\n      }\n      (*data)[5] = 0xfffffbff;\n    }\n  }\n  if (((status & 0x10800) != 0) && ((conditionFlag & 0x100) != 0)) {\n    data[0x10] = (uint *)((uint)data[0x10] | 8);\n    (*data)[5] = 0xfffff7ff;\n  }\n  if (data[0x10] != (uint *)0x0) {\n    I2C_ITError(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "process_i2_c_data_08003520",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptrData",
                "uVar3": "status",
                "uVar4": "conditionFlag"
            },
            "calling": [],
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "count_down_0800365c",
            "code": "\nvoid count_down_0800365c(int input_value)\n\n{\n  bool bVar1;\n  int count;\n  \n  count = input_value * (DAT_20000084 / 8000);\n  do {\n    bVar1 = count != 0;\n    count = count + -1;\n  } while (bVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "count_down_0800365c",
                "param_1": "input_value",
                "local_4": "count"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "handle_param_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 handleParam_08003688(uint *param)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint value;\n  bool flag;\n  \n  if ((*param & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (param[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = param[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (param[1] == 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*param & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (param[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | param[5] << 3;\n    }\n    else if (param[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | param[5] << 3;\n    }\n  }\n  if ((*param & 8) != 0) {\n    if (param[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      RCC_Delay(1);\n    }\n  }\n  if ((*param & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    value = param[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (param[3] == 0) {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (param[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (param[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (param[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | param[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | param[8] | param[9];\n        _DAT_42420060 = 1;\n        startTime = HAL_GetTick();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = HAL_GetTick();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "handle_param_08003688",
                "param_1": "param",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "flag"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "RCC_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_function_duration_08003a68",
            "code": "\n\n\nuint calculateFunctionDuration_08003a68(void)\n\n{\n  uint uVar1;\n  undefined2 constantValue;\n  undefined4 offset;\n  undefined4 multiplier;\n  undefined4 divisor;\n  undefined4 initialValue;\n  \n  initialValue = 0x10100f0e;\n  divisor = 0xd0c0b0a;\n  multiplier = 0x9080706;\n  offset = 0x5040302;\n  constantValue = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&offset + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&constantValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_function_duration_08003a68",
                "local_1c": "constantValue",
                "uStack_18": "offset",
                "uStack_14": "multiplier",
                "uStack_10": "divisor",
                "uStack_c": "initialValue"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "initialize_hardware_08003ad4",
            "code": "\n\n\nundefined4 initializeHardware_08003ad4(uint *hardwareConfig,uint configSize)\n\n{\n  int iVar1;\n  int iVar2;\n  uint tempValue;\n  \n  if ((_DAT_40022000 & 7) < configSize) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | configSize;\n    if (configSize != (configSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*hardwareConfig & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | hardwareConfig[2];\n  }\n  if ((*hardwareConfig & 1) != 0) {\n    tempValue = hardwareConfig[1];\n    if (tempValue == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((tempValue != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = tempValue | _DAT_40021004 & 0xfffffffc;\n    iVar1 = getCurrentTick();\n    if (hardwareConfig[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = getCurrentTick();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (hardwareConfig[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = getCurrentTick();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = getCurrentTick();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (configSize < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | configSize;\n    if (configSize != (configSize & 7)) {\n      return 1;\n    }\n  }\n  if ((*hardwareConfig & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | hardwareConfig[3];\n  }\n  if ((*hardwareConfig & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | hardwareConfig[4] << 3;\n  }\n  tempValue = getSystemClockFrequency();\n  DAT_20000084 = tempValue >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "initialize_hardware_08003ad4",
                "param_1": "hardwareConfig",
                "param_2": "configSize",
                "uVar3": "tempValue",
                "HAL_GetTick": "getCurrentTick",
                "HAL_RCC_GetSysClockFreq": "getSystemClockFrequency"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_system_08003afa",
            "code": "\n\n\nundefined4 initializeSystem_08003afa(uint *configFlags,uint systemMode)\n\n{\n  int startTime;\n  int currentTime;\n  uint systemClockFreq;\n  \n  if ((*configFlags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configFlags[2];\n  }\n  if ((*configFlags & 1) != 0) {\n    systemClockFreq = configFlags[1];\n    if (systemClockFreq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((systemClockFreq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = systemClockFreq | _DAT_40021004 & 0xfffffffc;\n    startTime = HAL_GetTick();\n    if (configFlags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (configFlags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (systemMode < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | systemMode;\n    if (systemMode != (systemMode & 7)) {\n      return 1;\n    }\n  }\n  if ((*configFlags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configFlags[3];\n  }\n  if ((*configFlags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configFlags[4] << 3;\n  }\n  systemClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000084 = systemClockFreq >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_system_08003afa",
                "param_1": "configFlags",
                "param_2": "systemMode",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "systemClockFreq"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_data_value_08003c44",
            "code": "\nundefined4 get_data_value_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_data_value_08003c44"
            },
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "get_hclk_frequency_08003c50",
            "code": "\n\n\nuint getHCLKFrequency_08003c50(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "get_hclk_frequency_08003c50",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "get_adjusted_hclk_freq_08003c70",
            "code": "\n\n\nuint getAdjustedHCLKFreq_08003c70(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "get_adjusted_hclk_freq_08003c70",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "UART_SetConfig",
                "HAL_RCCEx_GetPeriphCLKFreq"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "initialize_flags_08003c90",
            "code": "\n\n\nundefined4 initializeFlags_08003c90(uint *flags)\n\n{\n  uint flag1;\n  uint flag2;\n  int tickStart;\n  int currentTick;\n  bool flag5;\n  \n  if ((*flags & 1) != 0) {\n    flag5 = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag5) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      tickStart = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTick = HAL_GetTick();\n        if (100 < (uint)(currentTick - tickStart)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (flags[1] & 0x300))) {\n      flag2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      flag1 = _DAT_40021020 & 1;\n      _DAT_40021020 = flag2;\n      if (flag1 != 0) {\n        tickStart = HAL_GetTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentTick = HAL_GetTick();\n          if (5000 < (uint)(currentTick - tickStart)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | flags[1];\n    if (flag5) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | flags[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "initialize_flags_08003c90",
                "param_1": "flags",
                "uVar1": "flag1",
                "uVar2": "flag2",
                "iVar3": "tickStart",
                "iVar4": "currentTick",
                "bVar5": "flag5"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_clock_freq_08003da4",
            "code": "\n\n\nuint calculateClockFreq_08003da4(int inputParam)\n\n{\n  uint clockFreq;\n  undefined2 prescaler;\n  undefined4 multiplier;\n  undefined4 divider;\n  undefined4 baseClock;\n  undefined4 defaultClock;\n  \n  defaultClock = 0x10100f0e;\n  baseClock = 0xd0c0b0a;\n  divider = 0x9080706;\n  multiplier = 0x5040302;\n  prescaler = 0x201;\n  if (inputParam == 2) {\n    clockFreq = HAL_RCC_GetPCLK2Freq();\n    clockFreq = clockFreq / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (inputParam == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      clockFreq = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        clockFreq = 4000000;\n      }\n      else {\n        clockFreq = 8000000 / *(byte *)((int)&prescaler - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      clockFreq = clockFreq * *(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        clockFreq = (clockFreq * 2) / 3;\n      }\n    }\n  }\n  else if (inputParam == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      clockFreq = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      clockFreq = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        clockFreq = 0;\n      }\n      else {\n        clockFreq = 0xf424;\n      }\n    }\n    else {\n      clockFreq = 0;\n    }\n  }\n  else {\n    clockFreq = 0;\n  }\n  return clockFreq;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_clock_freq_08003da4",
                "param_1": "inputParam",
                "uVar1": "clockFreq",
                "local_24": "prescaler",
                "uStack_20": "multiplier",
                "uStack_1c": "divider",
                "uStack_18": "baseClock",
                "uStack_14": "defaultClock"
            },
            "calling": [
                "HAL_ADC_PollForConversion",
                "HAL_ADCEx_Calibration_Start"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "check_and_update_alarm_08003ea0",
            "code": "\n\n\nvoid checkAndUpdateAlarm_08003ea0(uint **alarmConfig)\n\n{\n  if (((**alarmConfig & 2) != 0) && (((*alarmConfig)[1] & 2) != 0)) {\n    handleAlarmAEvent();\n    (*alarmConfig)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)alarmConfig + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "check_and_update_alarm_08003ea0",
                "param_1": "alarmConfig",
                "HAL_RTC_AlarmAEventCallback": "handleAlarmAEvent"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "deinit_pwm_timer_08003ed8",
            "code": "\nvoid deinit_pwm_timer_08003ed8(uint **p_timer)\n\n{\n  uint *p_value;\n  \n  *(undefined *)((int)p_timer + 0x3d) = 2;\n  p_value = *p_timer;\n  if ((p_value[8] & 0x1111) == 0) {\n    if ((p_value[8] & 0x444) == 0) {\n      *p_value = *p_value & 0xfffffffe;\n    }\n  }\n  deinit_pwm_peripheral(p_timer);\n  *(undefined *)((int)p_timer + 0x3d) = 0;\n  *(undefined *)(p_timer + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "deinit_pwm_timer_08003ed8",
                "param_1": "p_timer",
                "puVar1": "p_value",
                "HAL_TIM_PWM_MspDeInit": "deinit_pwm_peripheral"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "process_tim_callbacks_08003f18",
            "code": "\nvoid process_TIM_callbacks_08003f18(int *callbacks_data)\n\n{\n  int data;\n  \n  data = *callbacks_data;\n  if (((*(uint *)(data + 0x10) & 2) != 0) && ((*(uint *)(data + 0xc) & 2) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffd;\n    *(undefined *)(callbacks_data + 7) = 1;\n    if ((*(uint *)(*callbacks_data + 0x18) & 3) == 0) {\n      handle_OC_DelayElapsedCallback();\n      handle_PWM_PulseFinishedCallback(callbacks_data);\n    }\n    else {\n      handle_IC_CaptureCallback();\n    }\n    *(undefined *)(callbacks_data + 7) = 0;\n  }\n  data = *callbacks_data;\n  if (((*(uint *)(data + 0x10) & 4) != 0) && ((*(uint *)(data + 0xc) & 4) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffb;\n    *(undefined *)(callbacks_data + 7) = 2;\n    if ((*(uint *)(*callbacks_data + 0x18) & 0x300) == 0) {\n      handle_OC_DelayElapsedCallback(callbacks_data);\n      handle_PWM_PulseFinishedCallback(callbacks_data);\n    }\n    else {\n      handle_IC_CaptureCallback(callbacks_data);\n    }\n    *(undefined *)(callbacks_data + 7) = 0;\n  }\n  data = *callbacks_data;\n  if (((*(uint *)(data + 0x10) & 8) != 0) && ((*(uint *)(data + 0xc) & 8) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffff7;\n    *(undefined *)(callbacks_data + 7) = 4;\n    if ((*(uint *)(*callbacks_data + 0x1c) & 3) == 0) {\n      handle_OC_DelayElapsedCallback(callbacks_data);\n      handle_PWM_PulseFinishedCallback(callbacks_data);\n    }\n    else {\n      handle_IC_CaptureCallback(callbacks_data);\n    }\n    *(undefined *)(callbacks_data + 7) = 0;\n  }\n  data = *callbacks_data;\n  if (((*(uint *)(data + 0x10) & 0x10) != 0) && ((*(uint *)(data + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffef;\n    *(undefined *)(callbacks_data + 7) = 8;\n    if ((*(uint *)(*callbacks_data + 0x1c) & 0x300) == 0) {\n      handle_OC_DelayElapsedCallback(callbacks_data);\n      handle_PWM_PulseFinishedCallback(callbacks_data);\n    }\n    else {\n      handle_IC_CaptureCallback(callbacks_data);\n    }\n    *(undefined *)(callbacks_data + 7) = 0;\n  }\n  data = *callbacks_data;\n  if (((*(uint *)(data + 0x10) & 1) != 0) && ((*(uint *)(data + 0xc) & 1) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffe;\n    handle_PeriodElapsedCallback(callbacks_data);\n  }\n  data = *callbacks_data;\n  if (((*(uint *)(data + 0x10) & 0x80) != 0) && ((*(uint *)(data + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffff7f;\n    handle_BreakCallback(callbacks_data);\n  }\n  data = *callbacks_data;\n  if (((*(uint *)(data + 0x10) & 0x40) != 0) && ((*(uint *)(data + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffbf;\n    handle_TriggerCallback(callbacks_data);\n  }\n  data = *callbacks_data;\n  if (((*(uint *)(data + 0x10) & 0x20) != 0) && ((*(uint *)(data + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffdf;\n    handle_CommutationCallback(callbacks_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "process_tim_callbacks_08003f18",
                "param_1": "callbacks_data",
                "iVar1": "data",
                "HAL_TIM_OC_DelayElapsedCallback": "handle_OC_DelayElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback": "handle_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback": "handle_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback": "handle_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback": "handle_BreakCallback",
                "HAL_TIM_TriggerCallback": "handle_TriggerCallback",
                "HAL_TIMEx_CommutationCallback": "handle_CommutationCallback"
            },
            "calling": [
                "TIM1_UP_IRQHandler"
            ],
            "called": [
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIMEx_BreakCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIMEx_CommutationCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bitwise_operations_08004092",
            "code": "\nvoid updateBitwiseOperations_08004092(int baseAddress,uint bitMask,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitMask & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitMask & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bitwise_operations_08004092",
                "param_1": "baseAddress",
                "param_2": "bitMask",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "configure_and_enable_channel_080040b0",
            "code": "\nundefined4 configureAndEnableChannel_080040b0(uint **channelPointer,undefined4 channelConfiguration)\n\n{\n  uint *currentChannelPointer;\n  \n  TIM_CCxChannelCmd(*channelPointer,channelConfiguration,0);\n  if (((*channelPointer == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  currentChannelPointer = *channelPointer;\n  if (((currentChannelPointer[8] & 0x1111) == 0) && ((currentChannelPointer[8] & 0x444) == 0)) {\n    *currentChannelPointer = *currentChannelPointer & 0xfffffffe;\n  }\n  *(undefined *)((int)channelPointer + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "configure_and_enable_channel_080040b0",
                "param_1": "channelPointer",
                "param_2": "channelConfiguration",
                "puVar1": "currentChannelPointer"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_control_bits_08004110",
            "code": "\nvoid updateControlBits_08004110(int controlPtr,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(controlPtr + 0x20) = *(uint *)(controlPtr + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(controlPtr + 0x20) = *(uint *)(controlPtr + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_control_bits_08004110",
                "param_1": "controlPtr",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "disable_tim_c_cx_n_channel_0800412c",
            "code": "\nundefined4 disable_TIM_CCxNChannel_0800412c(uint **channel_ptr,undefined4 param_value)\n\n{\n  uint *channel_data;\n  \n  TIM_CCxNChannelCmd(*channel_ptr,param_value,0);\n  channel_data = *channel_ptr;\n  if (((channel_data[8] & 0x1111) == 0) && ((channel_data[8] & 0x444) == 0)) {\n    channel_data[0x11] = channel_data[0x11] & 0xffff7fff;\n  }\n  channel_data = *channel_ptr;\n  if (((channel_data[8] & 0x1111) == 0) && ((channel_data[8] & 0x444) == 0)) {\n    *channel_data = *channel_data & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "disable_tim_c_cx_n_channel_0800412c",
                "param_1": "channel_ptr",
                "param_2": "param_value",
                "puVar1": "channel_data"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "clear_flags_0800417c",
            "code": "\nvoid clearFlags_0800417c(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xfffffedf;\n  *(uint *)(*ptr + 0x14) = *(uint *)(*ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "clear_flags_0800417c",
                "param_1": "ptr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "process_data_08004198",
            "code": "\nundefined4 processData_08004198(int *data)\n\n{\n  short count;\n  byte *bytePointer;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)data[8];\n    data[8] = (int)(bytePointer + 1);\n    *(uint *)(*data + 4) = (uint)*bytePointer;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "process_data_08004198",
                "param_1": "data",
                "sVar1": "count",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "update_clock_frequencies_08004204",
            "code": "\nvoid updateClockFrequencies_08004204(int *clockParams)\n\n{\n  int pclk1;\n  int pclk1;\n  int pclk1;\n  int pclk1;\n  int pclk1;\n  int pclk2;\n  int pclk2;\n  int pclk2;\n  int pclk2;\n  int pclk2;\n  \n  *(uint *)(*clockParams + 0x10) = *(uint *)(*clockParams + 0x10) & 0xffffcfff | clockParams[3];\n  *(uint *)(*clockParams + 0xc) =\n       clockParams[2] | clockParams[4] | clockParams[5] | *(uint *)(*clockParams + 0xc) & 0xffffe9f3;\n  *(uint *)(*clockParams + 0x14) = *(uint *)(*clockParams + 0x14) & 0xfffffcff | clockParams[6];\n  pclk2 = *clockParams;\n  if (pclk2 != 0x40013800) {\n    pclk1 = HAL_RCC_GetPCLK1Freq();\n    pclk2 = clockParams[1];\n    pclk1 = HAL_RCC_GetPCLK1Freq();\n    pclk2 = clockParams[1];\n    pclk1 = HAL_RCC_GetPCLK1Freq();\n    pclk2 = clockParams[1];\n    pclk1 = HAL_RCC_GetPCLK1Freq();\n    pclk2 = clockParams[1];\n    pclk1 = HAL_RCC_GetPCLK1Freq();\n    *(uint *)(pclk2 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1 * 0x19) / (uint)(pclk2 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1 * 0x19) / (ulonglong)(uint)(clockParams[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1 * 0x19) / (uint)(pclk2 << 2) +\n           (int)(((ulonglong)(uint)(pclk1 * 0x19) / (ulonglong)(uint)(pclk2 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1 * 0x19) / (ulonglong)(uint)(pclk2 << 2)) / 100) * 0x10;\n    return;\n  }\n  pclk2 = HAL_RCC_GetPCLK2Freq();\n  pclk1 = clockParams[1];\n  pclk1 = HAL_RCC_GetPCLK2Freq();\n  pclk2 = clockParams[1];\n  pclk1 = HAL_RCC_GetPCLK2Freq();\n  pclk2 = clockParams[1];\n  pclk1 = HAL_RCC_GetPCLK2Freq();\n  pclk2 = clockParams[1];\n  pclk1 = HAL_RCC_GetPCLK2Freq();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(pclk1 * 0x19) / (uint)(pclk2 << 2) +\n                                (int)(((ulonglong)(uint)(pclk1 * 0x19) /\n                                      (ulonglong)(uint)(clockParams[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(pclk1 * 0x19) / (uint)(pclk2 << 2) +\n                   (int)(((ulonglong)(uint)(pclk1 * 0x19) / (ulonglong)(uint)(pclk2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(pclk2 * 0x19) / (ulonglong)(uint)(pclk1 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "update_clock_frequencies_08004204",
                "param_1": "clockParams",
                "iVar1": "pclk1",
                "iVar2": "pclk1",
                "iVar3": "pclk1",
                "iVar4": "pclk1",
                "iVar5": "pclk1",
                "iVar6": "pclk2",
                "iVar7": "pclk2",
                "iVar8": "pclk2",
                "iVar9": "pclk2",
                "iVar10": "pclk2"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "verify_param_080043b4",
            "code": "\nundefined4 verifyParam_080043b4(uint **paramArray,uint requiredFlags,uint expectedResult,int startTick,uint timeoutDuration)\n\n{\n  int currentTick;\n  \n  do {\n    if (((requiredFlags & ~**paramArray) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((timeoutDuration == 0xffffffff) ||\n          ((timeoutDuration != 0 && (currentTick = HAL_GetTick(), (uint)(currentTick - startTick) <= timeoutDuration))));\n  (*paramArray)[3] = (*paramArray)[3] & 0xfffffe5f;\n  (*paramArray)[5] = (*paramArray)[5] & 0xfffffffe;\n  *(undefined *)((int)paramArray + 0x39) = 0x20;\n  *(undefined *)((int)paramArray + 0x3a) = 0x20;\n  *(undefined *)(paramArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "verify_param_080043b4",
                "param_1": "paramArray",
                "param_2": "requiredFlags",
                "param_3": "expectedResult",
                "param_4": "startTick",
                "param_5": "timeoutDuration",
                "iVar1": "currentTick"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "initialize_uart_0800441a",
            "code": "\nundefined4 initializeUART_0800441a(int *uartHandle)\n\n{\n  if (uartHandle != (int *)0x0) {\n    if (*(char *)((int)uartHandle + 0x39) == '\\0') {\n      *(undefined *)(uartHandle + 0xe) = 0;\n      initializeUartPeripheral;\n    }\n    *(undefined *)((int)uartHandle + 0x39) = 0x24;\n    *(uint *)(*uartHandle + 0xc) = *(uint *)(*uartHandle + 0xc) & 0xffffdfff;\n    setUartConfiguration;\n    *(uint *)(*uartHandle + 0x10) = *(uint *)(*uartHandle + 0x10) & 0xffffb7ff;\n    *(uint *)(*uartHandle + 0x14) = *(uint *)(*uartHandle + 0x14) & 0xffffffd5;\n    *(uint *)(*uartHandle + 0xc) = *(uint *)(*uartHandle + 0xc) | 0x2000;\n    uartFlag = 0;\n    *(undefined *)((int)uartHandle + 0x39) = 0x20;\n    *(undefined *)((int)uartHandle + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "initialize_uart_0800441a",
                "param_1": "uartHandle",
                "HAL_UART_MspInit()": "initializeUartPeripheral",
                "UART_SetConfig(param_1)": "setUartConfiguration",
                "param_1[0xf]": "uartFlag"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 processData_08004478(int *data,ushort *buffer,int bufferLength,undefined4 timeout)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if (buffer == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (bufferLength == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = 0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      returnValue = HAL_GetTick();\n      *(short *)(data + 9) = (short)bufferLength;\n      *(short *)((int)data + 0x26) = (short)bufferLength;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == 0x1000) {\n          result = UART_WaitOnFlagUntilTimeout(data,0x80,0,returnValue,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = *buffer & 0x1ff;\n          if (data[4] == 0) {\n            buffer = buffer + 1;\n          }\n          else {\n            buffer = (ushort *)((int)buffer + 1);\n          }\n        }\n        else {\n          result = UART_WaitOnFlagUntilTimeout(data,0x80,0,returnValue,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = (uint)*(byte *)buffer;\n          buffer = (ushort *)((int)buffer + 1);\n        }\n      }\n      result = UART_WaitOnFlagUntilTimeout(data,0x40,0,returnValue,timeout);\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data",
                "param_2": "buffer",
                "param_3": "bufferLength",
                "param_4": "timeout",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "validate_input_0800455a",
            "code": "\nundefined4 validate_input_0800455a(int *input_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value_1;\n    *(short *)(input_array + 9) = (short)value_2;\n    *(short *)((int)input_array + 0x26) = (short)value_2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "validate_input_0800455a",
                "param_1": "input_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "input_array[8]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "uart_attach_tx_callback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "check_input_validity_080045a2",
            "code": "\nundefined4 checkInputValidity_080045a2(int *inputData,int value1,int value2)\n\n{\n  if (*(char *)((int)inputData + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(inputData + 0xe) != '\\x01') {\n    inputData[10] = value1;\n    *(short *)(inputData + 0xb) = (short)value2;\n    *(short *)((int)inputData + 0x2e) = (short)value2;\n    inputData[15] = 0;\n    *(undefined *)((int)inputData + 0x3a) = 0x22;\n    *(undefined *)(inputData + 0xe) = 0;\n    *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) | 0x100;\n    *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) | 1;\n    *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "check_input_validity_080045a2",
                "param_1": "inputData",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "inputData[10]",
                "param_1[0xf]": "inputData[15]"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "set_bit_and_callback_080045fe",
            "code": "\nundefined4 setBitAndCallback_080045fe(int *inputPtr)\n\n{\n  *(uint *)(*inputPtr + 0xc) = *(uint *)(*inputPtr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)inputPtr + 0x39) = 0x20;\n  HAL_UART_TxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "set_bit_and_callback_080045fe",
                "param_1": "inputPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "process_data_08004618",
            "code": "\nundefined4 processData_08004618(int *data)\n\n{\n  byte *bytePointer;\n  short counter;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPointer = (undefined *)data[10];\n    data[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePointer = (byte *)data[10];\n    data[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  HAL_UART_RxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "process_data_08004618",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "sVar2": "counter",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "handle_uart_080046b8",
            "code": "\nvoid handleUART_080046b8(uint **uartParams)\n\n{\n  int dmaResult;\n  uint uartValue2;\n  uint *uartPtr;\n  uint uartValue4;\n  uint uartValue5;\n  \n  uartPtr = *uartParams;\n  uartValue5 = *uartPtr;\n  uartValue2 = uartPtr[3];\n  if ((((uartValue5 & 0xf) == 0) && ((uartValue5 & 0x20) != 0)) && ((uartValue2 & 0x20) != 0)) {\n    UART_Receive_IT(uartParams);\n    return;\n  }\n  if (((uartValue5 & 0xf) == 0) || ((uartValue4 = uartPtr[5] & 1, uartValue4 == 0 && ((uartValue2 & 0x120) == 0)))) {\n    if (((uartValue5 & 0x80) != 0) && ((uartValue2 & 0x80) != 0)) {\n      UART_Transmit_IT(uartParams);\n      return;\n    }\n    if (((uartValue5 & 0x40) != 0) && ((uartValue2 & 0x40) != 0)) {\n      UART_EndTransmit_IT(uartParams);\n    }\n  }\n  else {\n    if (((uartValue5 & 1) != 0) && ((uartValue2 & 0x100) != 0)) {\n      uartParams[0xf] = (uint *)((uint)uartParams[0xf] | 1);\n    }\n    if (((uartValue5 & 4) != 0) && (uartValue4 != 0)) {\n      uartParams[0xf] = (uint *)((uint)uartParams[0xf] | 2);\n    }\n    if (((uartValue5 & 2) != 0) && (uartValue4 != 0)) {\n      uartParams[0xf] = (uint *)((uint)uartParams[0xf] | 4);\n    }\n    if (((uartValue5 & 8) != 0) && (uartValue4 != 0)) {\n      uartParams[0xf] = (uint *)((uint)uartParams[0xf] | 8);\n    }\n    if (uartParams[0xf] != (uint *)0x0) {\n      if (((uartValue5 & 0x20) != 0) && ((uartValue2 & 0x20) != 0)) {\n        UART_Receive_IT(uartParams);\n      }\n      if ((((uint)uartParams[0xf] & 8) == 0) && (((*uartParams)[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(uartParams);\n        uartParams[0xf] = (uint *)0x0;\n        return;\n      }\n      UART_EndRxTransfer(uartParams);\n      uartPtr = *uartParams;\n      if ((uartPtr[5] & 0x40) == 0) {\n        HAL_UART_ErrorCallback(uartParams);\n        return;\n      }\n      uartPtr[5] = uartPtr[5] & 0xffffffbf;\n      if (uartParams[0xd] == (uint *)0x0) {\n        HAL_UART_ErrorCallback(uartParams);\n        return;\n      }\n      uartParams[0xd][0xd] = (uint)&LAB_080047d8_1;\n      dmaResult = HAL_DMA_Abort_IT(uartParams[0xd]);\n      if (dmaResult != 0) {\n        (*(code *)uartParams[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "handle_uart_080046b8",
                "param_1": "uartParams",
                "iVar1": "dmaResult",
                "uVar2": "uartValue2",
                "puVar3": "uartPtr",
                "uVar4": "uartValue4",
                "uVar5": "uartValue5"
            },
            "calling": [],
            "called": [
                "UART_EndTransmit_IT",
                "HAL_DMA_Abort_IT",
                "UART_EndRxTransfer",
                "UART_Transmit_IT",
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combine_bytes_080047e8(int offset)\n\n{\n  return *(byte *)(offset + 0x3a) | *(byte *)(offset + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "offset"
            },
            "calling": [
                "serial_rx_active",
                "serial_tx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "extract_bit_from_pointer_array_080047f4",
            "code": "\nuint extractBitFromPointerArray_080047f4(uint inputValue,int pointerBase)\n\n{\n  return *(uint *)(pointerBase + ((inputValue << 0x18) >> 0x1c) * 4) >> (inputValue & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "extract_bit_from_pointer_array_080047f4",
                "param_1": "inputValue",
                "param_2": "pointerBase"
            },
            "calling": [
                "digitalRead",
                "digitalWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "set_bit_in_array_0800480a",
            "code": "\nvoid setBitInArray_0800480a(uint bitIndex,int array)\n\n{\n  uint arrayIndex;\n  \n  arrayIndex = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(array + arrayIndex * 4) = *(uint *)(array + arrayIndex * 4) | 1 << (bitIndex & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "bitIndex",
                "param_2": "array",
                "uVar1": "arrayIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "update_data_08004828",
            "code": "\nvoid updateData_08004828(uint input,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (input << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) & ~(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "update_data_08004828",
                "param_1": "input",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "get_memory_address_08004848",
            "code": "\nundefined4 getMemoryAddress_08004848(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "param_1": "input"
            },
            "calling": [
                "digitalRead",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_flag_and_return_value_08004884",
            "code": "\n\n\nundefined4 setFlagAndReturnValue_08004884(undefined4 flag)\n\n{\n  undefined4 returnValue;\n  \n  switch(flag) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    returnValue = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    returnValue = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    returnValue = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    returnValue = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    returnValue = 0x40011800;\n    break;\n  default:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_flag_and_return_value_08004884",
                "param_1": "flag",
                "uVar1": "returnValue"
            },
            "calling": [
                "uart_init",
                "digital_io_init",
                "HAL_ADC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "map_pin_to_value_0800492c",
            "code": "\nuint map_pin_to_value_0800492c(undefined4 pin,undefined4 ptr1,undefined4 ptr2,undefined4 ptr3)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(pin,&DAT_08007400,ptr2,ptr3,ptr3);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_result - 1) {\n    shifted_result = 0;\n  }\n  return shifted_result;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "map_pin_to_value_0800492c",
                "param_1": "pin",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "param_4": "ptr3",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "pinmap_check_08004948",
            "code": "\nundefined4 pinmap_check_08004948(undefined4 device,undefined4 config_param,undefined4 input_1,undefined4 input_2)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(device,&DAT_080074b4,input_1,input_2,input_2);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "pinmap_check_08004948",
                "param_1": "device",
                "param_2": "config_param",
                "param_3": "input_1",
                "param_4": "input_2",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "initialize_gpio_08004974",
            "code": "\n\n\nvoid initializeGPIO_08004974(int *baseAddress,undefined4 clockConfiguration)\n\n{\n  undefined4 gpioPort;\n  uint gpioConfig;\n  int baseValue;\n  uint pinMask;\n  undefined4 pinMode;\n  undefined4 pullUpDown;\n  \n  baseValue = *baseAddress;\n  if (baseValue == 0x40012400) {\n    gpioConfig = _DAT_40021018 | 0x200;\n    baseValue = 0x200;\n    _DAT_40021018 = gpioConfig;\n  }\n  else {\n    gpioConfig = 0x40012800;\n    if (baseValue == 0x40012800) {\n      gpioConfig = _DAT_40021018 | 0x400;\n      baseValue = 0x400;\n      _DAT_40021018 = gpioConfig;\n    }\n  }\n  gpioPort = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,clockConfiguration,gpioConfig,baseValue);\n  pinMask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  pinMode = 3;\n  pullUpDown = 0;\n  HAL_GPIO_Init(gpioPort,&pinMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "initialize_gpio_08004974",
                "param_1": "baseAddress",
                "param_2": "clockConfiguration",
                "uVar1": "gpioPort",
                "uVar2": "gpioConfig",
                "iVar3": "baseValue",
                "local_18": "pinMask",
                "local_14": "pinMode",
                "local_10": "pullUpDown"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_control_registers_080049f0",
            "code": "\n\n\nvoid updateControlRegisters_080049f0(int *pData)\n\n{\n  if (*pData != 0x40012400) {\n    if (*pData == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_control_registers_080049f0",
                "param_1": "pData"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "get_adc_value_08004a4c",
            "code": "\nundefined2 get_adc_value_08004a4c(undefined4 pin)\n\n{\n  int result;\n  uint adc_state;\n  undefined2 adc_value;\n  uint adc_channel;\n  undefined4 adc_config1;\n  undefined4 adc_config2;\n  int peripheral;\n  undefined4 adc_config3;\n  undefined4 adc_config4;\n  undefined4 adc_config5;\n  undefined4 adc_config11;\n  undefined4 adc_config12;\n  undefined4 adc_config13;\n  undefined4 adc_config14;\n  undefined4 adc_config15;\n  \n  memset(&peripheral,0,0x30);\n  adc_channel = 0;\n  adc_config1 = 0;\n  adc_config2 = 0;\n  adc_value = 0;\n  peripheral = pinmap_peripheral(pin,&DAT_08007400);\n  if (peripheral == 0) {\n    adc_value = 0;\n  }\n  else {\n    adc_config3 = 0;\n    adc_config4 = 0;\n    adc_config5 = 0;\n    adc_config12 = 0;\n    adc_config14 = 0xe0000;\n    adc_config15 = 0;\n    adc_config11 = 1;\n    adc_config13 = 0;\n    DAT_20000080 = (undefined)pin;\n    result = HAL_ADC_Init(&peripheral);\n    if (result == 0) {\n      adc_channel = get_adc_channel(pin);\n      if (adc_channel < 0x12) {\n        adc_config1 = 1;\n        adc_config2 = 2;\n        result = HAL_ADC_ConfigChannel(&peripheral,&adc_channel);\n        if (result == 0) {\n          result = HAL_ADCEx_Calibration_Start(&peripheral);\n          if (result == 0) {\n            result = HAL_ADC_Start(&peripheral);\n            if (result == 0) {\n              result = HAL_ADC_PollForConversion(&peripheral,10);\n              if (result == 0) {\n                adc_state = HAL_ADC_GetState(&peripheral);\n                if ((adc_state & 0x200) != 0) {\n                  adc_value = HAL_ADC_GetValue(&peripheral);\n                }\n                result = HAL_ADC_Stop(&peripheral);\n                if (result == 0) {\n                  result = HAL_ADC_DeInit(&peripheral);\n                  if (result != 0) {\n                    adc_value = 0;\n                  }\n                }\n                else {\n                  adc_value = 0;\n                }\n              }\n              else {\n                adc_value = 0;\n              }\n            }\n            else {\n              adc_value = 0;\n            }\n          }\n          else {\n            adc_value = 0;\n          }\n        }\n        else {\n          adc_value = 0;\n        }\n      }\n      else {\n        adc_value = 0;\n      }\n    }\n    else {\n      adc_value = 0;\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "get_adc_value_08004a4c",
                "param_1": "pin",
                "local_46": "adc_value",
                "local_44": "adc_channel",
                "local_40": "adc_config1",
                "local_3c": "adc_config2",
                "local_38": "peripheral",
                "local_34": "adc_config3",
                "local_30": "adc_config4",
                "local_2c": "adc_config5",
                "local_28": "adc_config11",
                "local_24": "adc_config12",
                "local_20": "adc_config13",
                "local_1c": "adc_config14",
                "local_10": "adc_config15",
                "iVar1": "result",
                "uVar2": "adc_state"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "HAL_ADC_Init",
                "memset",
                "HAL_ADC_GetValue",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_DeInit",
                "HAL_ADC_ConfigChannel",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_Stop",
                "HAL_ADC_Start",
                "HAL_ADC_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "disable_timer_clock_08004b34",
            "code": "\nvoid disable_timer_clock_08004b34(void)\n\n{\n  disable_timer_clock_08004b34();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "disable_timer_clock_08004b34",
                "timer_disable_clock": "disable_timer_clock"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "stop_pwm_peripheral_08004b3c",
            "code": "\nvoid stopPwmPeripheral_08004b3c(undefined4 peripheral)\n\n{\n  int pwmChannel;\n  uint pinFunction;\n  int pwmHandle [17];\n  \n  pwmHandle[0] = pinmap_peripheral(peripheral,&DAT_080074b4);\n  if ((pwmHandle[0] != 0) &&\n     ((((pwmChannel = get_pwm_channel(peripheral), pwmChannel == 0 || (pwmChannel == 4)) || (pwmChannel == 8)) ||\n      ((pwmChannel == 0xc || (pwmChannel == 0x18)))))) {\n    pinFunction = pinmap_function(peripheral,&DAT_080074b4);\n    if ((pinFunction & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(pwmHandle,pwmChannel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(pwmHandle,pwmChannel);\n    }\n    HAL_TIM_PWM_DeInit(pwmHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "stop_pwm_peripheral_08004b3c",
                "param_1": "peripheral",
                "iVar1": "pwmChannel",
                "uVar2": "pinFunction",
                "local_50": "pwmHandle"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_TIMEx_PWMN_Stop",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop",
                "pinmap_function",
                "pinmap_peripheral",
                "HAL_TIM_PWM_DeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "get_current_time_08004b94",
            "code": "\nvoid get_current_time_08004b94(void)\n\n{\n  current_time();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "get_current_time_08004b94",
                "HAL_GetTick": "current_time"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "handle_system_tick_08004b9e",
            "code": "\nvoid handleSystemTick_08004b9e(void)\n\n{\n  incrementSystemTick();\n  handleSysTickInterrupt();\n  handleNoOsSysTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "handle_system_tick_08004b9e",
                "HAL_IncTick": "incrementSystemTick",
                "HAL_SYSTICK_IRQHandler": "handleSysTickInterrupt",
                "noOsSystickHandler": "handleNoOsSysTick"
            },
            "calling": [],
            "called": [
                "HAL_SYSTICK_IRQHandler",
                "noOsSystickHandler",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_gpio_port_08004bb0",
            "code": "\n\n\nvoid initialize_GPIO_Port_08004bb0(uint gpio_pin,undefined4 config_setting_1,undefined4 config_setting_2)\n\n{\n  undefined4 gpio_port;\n  uint gpio_pin_mask;\n  undefined4 config_setting_1_copy;\n  undefined4 config_setting_2_copy;\n  undefined4 some_constant;\n  \n  gpio_port = set_GPIO_Port_Clock((gpio_pin << 0x18) >> 0x1c);\n  gpio_pin_mask = 1 << (gpio_pin & 0xf) & 0xffff;\n  some_constant = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((gpio_pin - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((gpio_pin == 0xf) || (gpio_pin == 0x13)) || (gpio_pin == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  config_setting_1_copy = config_setting_1;\n  config_setting_2_copy = config_setting_2;\n  HAL_GPIO_Init(gpio_port,&gpio_pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_gpio_port_08004bb0",
                "param_1": "gpio_pin",
                "param_2": "config_setting_1",
                "param_3": "config_setting_2",
                "uVar1": "gpio_port",
                "local_20": "gpio_pin_mask",
                "local_1c": "config_setting_1_copy",
                "local_18": "config_setting_2_copy",
                "local_14": "some_constant"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "write_pin_based_on_param_08004c30",
            "code": "\nvoid writePinBasedOnParam_08004c30(undefined4 pin,undefined2 pinMode,int paramValue,undefined4 param4)\n\n{\n  if (paramValue == 0) {\n    HAL_GPIO_WritePin(pin,pinMode,0,param4,param4);\n    return;\n  }\n  HAL_GPIO_WritePin(pin,pinMode,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "write_pin_based_on_param_08004c30",
                "param_1": "pin",
                "param_2": "pinMode",
                "param_3": "paramValue",
                "param_4": "param4"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "read_pin_from_gpio_08004c48",
            "code": "\nvoid readPinFromGPIO_08004c48(undefined4 gpioPortPins,undefined2 gpioPortConfig,undefined4 gpioPortMode1,undefined4 gpioPortMode2)\n\n{\n  HAL_GPIO_ReadPin(gpioPortPins,gpioPortConfig,gpioPortMode1,gpioPortMode2,gpioPortMode2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "read_pin_from_gpio_08004c48",
                "param_1": "gpioPortPins",
                "param_2": "gpioPortConfig",
                "param_3": "gpioPortMode1",
                "param_4": "gpioPortMode2"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_system_08004c52",
            "code": "\nvoid initializeSystem_08004c52(void)\n\n{\n  initializeHAL();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_system_08004c52",
                "HAL_Init": "initializeHAL",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "HAL_Init",
                "SystemClock_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_index_08004c5e",
            "code": "\nundefined4 find_value_index_08004c5e(int value_to_find,char *data_array)\n\n{\n  while( true ) {\n    if (*data_array == -1) {\n      return 0;\n    }\n    if (*data_array == value_to_find) break;\n    data_array = data_array + 0xc;\n  }\n  return *(undefined4 *)(data_array + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_index_08004c5e",
                "param_1": "value_to_find",
                "param_2": "data_array"
            },
            "calling": [
                "pinmap_find_peripheral",
                "pinmap_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "find_peripheral_08004c78",
            "code": "\nundefined4 find_peripheral_08004c78(int input_value)\n\n{\n  undefined4 peripheral_found;\n  \n  if (input_value != -1) {\n    peripheral_found = pinmap_find_peripheral_08004c78();\n    return peripheral_found;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "find_peripheral_08004c78",
                "param_1": "input_value",
                "uVar1": "peripheral_found"
            },
            "calling": [
                "uart_init",
                "adc_read_value",
                "pwm_stop",
                "uart_debug_write",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_index_08004c8a",
            "code": "\nint find_index_08004c8a(int target_value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == target_value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_index_08004c8a",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_find_pin",
                "pinmap_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "find_pin_or_error_08004ca2",
            "code": "\nundefined4 findPinOrError_08004ca2(int inputParameter)\n\n{\n  undefined4 pinResult;\n  \n  if (inputParameter != 0) {\n    pinResult = pinmap_find_pin();\n    return pinResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "find_pin_or_error_08004ca2",
                "param_1": "inputParameter",
                "uVar1": "pinResult"
            },
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_index_08004cb2",
            "code": "\nundefined4 find_value_index_08004cb2(int target_value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0xffffffff;\n    }\n    if (*array_ptr == target_value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return *(undefined4 *)(array_ptr + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_index_08004cb2",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "find_mapped_function_08004cce",
            "code": "\nundefined4 findMappedFunction_08004cce(int input)\n\n{\n  undefined4 foundFunction;\n  \n  if (input == -1) {\n    return 0xffffffff;\n  }\n  foundFunction = pinmap_find_function();\n  return foundFunction;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "find_mapped_function_08004cce",
                "param_1": "input",
                "uVar1": "foundFunction"
            },
            "calling": [
                "uart_init",
                "get_adc_channel",
                "get_pwm_channel",
                "pwm_stop"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "compare_values_08004ce2",
            "code": "\nint compareValues_08004ce2(int value_1,char *values_array)\n\n{\n  if (value_1 == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*values_array == -1) {\n      return 0;\n    }\n    if (value_1 == *values_array) break;\n    values_array = values_array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "compare_values_08004ce2",
                "param_1": "value_1",
                "param_2": "values_array",
                "undefined4": "int"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "check_and_return_nonzero_08004d06",
            "code": "\nint check_and_return_nonzero_08004d06(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    if (input_1 == 0) {\n      return input_2;\n    }\n    if (input_2 == 0) {\n      return input_1;\n    }\n    input_1 = 0;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "check_and_return_nonzero_08004d06",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_function_08004d18",
            "code": "\nvoid executeCallbackFunction_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_function_08004d18"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "infinite_loop_08004d40",
            "code": "\nvoid infiniteLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40"
            },
            "calling": [
                "_Error_Handler",
                "SystemClock_Config"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_memory_08004d44",
            "code": "\n\n\nvoid initializeMemory_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_memory_08004d44"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_data_08004d90",
            "code": "\n\n\nvoid updateData_08004d90(int *dataPointer)\n\n{\n  if (*dataPointer == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*dataPointer == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*dataPointer == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*dataPointer == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_data_08004d90",
                "param_1": "dataPointer"
            },
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_four_08004df4",
            "code": "\nint subtractFour_08004df4(int inputNumber)\n\n{\n  return inputNumber + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "inputNumber"
            },
            "calling": [
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_OC_DelayElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_timer_action_08004df8",
            "code": "\nvoid executeTimerAction_08004df8(int timerId)\n\n{\n  int timerObject;\n  \n  timerObject = getTimerObject();\n  if ((*(code **)(timerObject + 0x4c) != (code *)0x0) && (*(char *)(timerId + 0x1c) == '\\x01')) {\n    (**(code **)(timerObject + 0x4c))(timerObject,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_timer_action_08004df8",
                "param_1": "timerId",
                "iVar1": "timerObject",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_timer_function_08004e12",
            "code": "\nvoid executeTimerFunction_08004e12(void)\n\n{\n  int timerObject;\n  \n  timerObject = getTimerObject();\n  if (*(code **)(timerObject + 0x48) != (code *)0x0) {\n    (**(code **)(timerObject + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_timer_function_08004e12",
                "iVar1": "timerObject",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "handle_timer_interrupt_08004e20",
            "code": "\nvoid handleTimerInterrupt_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    HAL_TIM_IRQHandler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "handle_timer_interrupt_08004e20"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtractFour_08004e70(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "input"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback",
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "transmit_data_or_receive_08004e74",
            "code": "\nvoid transmitDataOrReceive_08004e74(int dataPtr,int isTransmit,int size,undefined4 callback)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (size == *(int *)(dataPtr + 0xc)) {\n    if (isTransmit == 0) {\n      *(undefined *)(i2cObj + 0x88) = 0;\n      *(undefined *)(i2cObj + 0x5c) = 0;\n      if (*(code **)(i2cObj + 100) != (code *)0x0) {\n        (**(code **)(i2cObj + 100))();\n      }\n      transmitSequentiallyWithIT(dataPtr,i2cObj + 0x68,*(undefined *)(i2cObj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2cObj + 0x5c) = 1;\n    receiveSequentiallyWithIT(dataPtr,i2cObj + 0x68,0x20,8,callback);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "transmit_data_or_receive_08004e74",
                "param_1": "dataPtr",
                "param_2": "isTransmit",
                "param_3": "size",
                "param_4": "callback",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmitSequentiallyWithIT",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receiveSequentiallyWithIT"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "enable_i2_c_listen_08004ec4",
            "code": "\nvoid enableI2CListen_08004ec4(undefined4 objectHandle)\n\n{\n  int i2cObject;\n  \n  i2cObject = getI2CObject();\n  if (((*(code **)(i2cObject + 0x60) != (code *)0x0) && (*(char *)(i2cObject + 0x5c) == '\\x01')) &&\n     (*(char *)(i2cObject + 0x2c) != ' ')) {\n    (**(code **)(i2cObject + 0x60))(i2cObject + 0x68);\n  }\n  enableI2CListen_08004ec4Interrupt(objectHandle);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "enable_i2_c_listen_08004ec4",
                "param_1": "objectHandle",
                "iVar1": "i2cObject",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_ITError",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "enable_i2_c_listen_08004ef4",
            "code": "\nvoid enableI2CListen_08004ef4(undefined4 deviceAddress)\n\n{\n  int i2cObject;\n  \n  i2cObject = get_i2c_obj();\n  if (*(char *)(i2cObject + 0x5d) == '\\0') {\n    enableI2CListen_08004ef4Interrupt(deviceAddress);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "enable_i2_c_listen_08004ef4",
                "param_1": "deviceAddress",
                "iVar1": "i2cObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "initialize_serial_communication_08004f4c",
            "code": "\n\n\nvoid initializeSerialCommunication_08004f4c(int *serialSettings)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 gpioPortClock1;\n  uint gpioFunction;\n  uint gpioPinMask1;\n  uint gpioPinConfig;\n  uint gpioPinSpeed;\n  undefined4 gpioInitMode;\n  \n  if (serialSettings != (int *)0x0) {\n    peripheral1 = pinmap_peripheral((int)*(char *)(serialSettings + 0x16),&DAT_0800764c);\n    peripheral2 = pinmap_peripheral((int)*(char *)((int)serialSettings + 0x59),&DAT_08007604);\n    if ((peripheral2 == 0) || (peripheral1 == 0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\",peripheral2);\n    }\n    else {\n      peripheral1 = pinmap_merge_peripheral(peripheral1);\n      *serialSettings = peripheral1;\n      if (peripheral1 == 0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(serialSettings + 0x11) = 0;\n          *(undefined *)((int)serialSettings + 0x5a) = 0x25;\n        }\n        else if (peripheral1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(serialSettings + 0x11) = 1;\n          *(undefined *)((int)serialSettings + 0x5a) = 0x26;\n        }\n        else if (peripheral1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(serialSettings + 0x11) = 2;\n          *(undefined *)((int)serialSettings + 0x5a) = 0x27;\n        }\n        gpioPortClock1 = set_GPIO_Port_Clock((uint)((int)*(char *)((int)serialSettings + 0x59) << 0x18) >> 0x1c);\n        gpioFunction = pinmap_function((int)*(char *)((int)serialSettings + 0x59),&DAT_08007604);\n        gpioPinMask1 = 1 << (*(byte *)((int)serialSettings + 0x59) & 0xf) & 0xffff;\n        gpioPinConfig = (gpioFunction >> 3 & 1) << 4 | gpioFunction & 7;\n        gpioPinSpeed = (gpioFunction << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((gpioFunction << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        gpioInitMode = 3;\n        initializeGPIO(gpioPortClock1,&gpioPinMask1);\n        gpioPortClock1 = set_GPIO_Port_Clock((uint)((int)*(char *)(serialSettings + 0x16) << 0x18) >> 0x1c);\n        gpioFunction = pinmap_function((int)*(char *)(serialSettings + 0x16),&DAT_0800764c);\n        gpioPinMask1 = 1 << (*(byte *)(serialSettings + 0x16) & 0xf) & 0xffff;\n        gpioPinConfig = (gpioFunction >> 3 & 1) << 4 | gpioFunction & 7;\n        gpioPinSpeed = (gpioFunction << 0x1a) >> 0x1e;\n        initializeGPIO(gpioPortClock1,&gpioPinMask1);\n        (&DAT_2000032c)[*(byte *)(serialSettings + 0x11)] = serialSettings + 1;\n        serialSettings[1] = *serialSettings;\n        serialSettings[2] = serialSettings[0x12];\n        serialSettings[3] = serialSettings[0x13];\n        serialSettings[4] = serialSettings[0x14];\n        serialSettings[5] = serialSettings[0x15];\n        serialSettings[6] = 0xc;\n        serialSettings[7] = 0;\n        serialSettings[8] = 0;\n        initializeUART(serialSettings + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "initialize_serial_communication_08004f4c",
                "param_1": "serialSettings",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "uVar3": "gpioPortClock1",
                "uVar4": "gpioFunction",
                "local_20": "gpioPinMask1",
                "local_1c": "gpioPinConfig",
                "local_18": "gpioPinSpeed",
                "local_14": "gpioInitMode",
                "HAL_GPIO_Init": "initializeGPIO",
                "HAL_UART_Init": "initializeUART"
            },
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_UART_Init",
                "iprintf",
                "pinmap_merge_peripheral",
                "HAL_GPIO_Init",
                "pinmap_function",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initialize_uart_08005384(void)\n\n{\n  int peripheral_result;\n  undefined4 pin_result;\n  \n  peripheral_result = pinmap_peripheral(2,&DAT_0800764c);\n  if (peripheral_result != 0) {\n    pin_result = pinmap_peripheral(2,&DAT_0800764c);\n    DAT_200000e1 = pinmap_pin(pin_result,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    uart_init(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "peripheral_result",
                "uVar2": "pin_result"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_peripheral",
                "pinmap_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "transmit_data_080053d4",
            "code": "\nuint transmitData_080053d4(undefined4 dataBuffer,uint dataLength)\n\n{\n  int startTick;\n  int peripheralInfo;\n  uint index;\n  \n  startTick = HAL_GetTick();\n  peripheralInfo = pinmap_peripheral(2,&DAT_0800764c);\n  if (peripheralInfo == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_2000032c)[index] == 0 ||\n       (peripheralInfo = pinmap_peripheral(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[index] != peripheralInfo))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_200000cc) && (uart_debug_init(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    index = (uint)DAT_200000cc;\n  }\n  do {\n    peripheralInfo = HAL_UART_Transmit((&DAT_2000032c)[index],dataBuffer,dataLength & 0xffff,1000);\n    if (peripheralInfo == 0) {\n      return dataLength;\n    }\n    peripheralInfo = HAL_GetTick();\n  } while ((uint)(peripheralInfo - startTick) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "transmit_data_080053d4",
                "param_1": "dataBuffer",
                "param_2": "dataLength",
                "iVar1": "startTick",
                "iVar2": "peripheralInfo",
                "uVar3": "index"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "HAL_GetTick",
                "pinmap_peripheral",
                "uart_debug_init",
                "HAL_UART_Transmit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "check_uart_state_0800548c",
            "code": "\nbool check_UART_state_0800548c(int input_value)\n\n{\n  uint uart_state;\n  \n  uart_state = get_UART_state((&DAT_2000032c)[*(byte *)(input_value + 0x44)]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "check_uart_state_0800548c",
                "param_1": "input_value",
                "uVar1": "uart_state",
                "HAL_UART_GetState": "get_UART_state"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "is_uart_state_error_080054b0",
            "code": "\nbool is_uart_state_error_080054b0(int data_offset)\n\n{\n  uint uart_state;\n  \n  uart_state = HAL_UART_GetState((&DAT_2000032c)[*(byte *)(data_offset + 0x44)]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "is_uart_state_error_080054b0",
                "param_1": "data_offset",
                "uVar1": "uart_state"
            },
            "calling": [],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "receive_serial_data_080054d4",
            "code": "\nundefined4 receiveSerialData_080054d4(int serialData,undefined *receivedByte,undefined4 param3,undefined4 param4)\n\n{\n  int isRxActive;\n  \n  if (serialData == 0) {\n    return 0xffffffff;\n  }\n  isRxActive = serial_rx_active();\n  if (isRxActive == 0) {\n    *receivedByte = *(undefined *)(serialData + 0x45);\n    HAL_UART_Receive_IT((&DAT_2000032c)[*(byte *)(serialData + 0x44)],serialData + 0x45,1,&DAT_2000032c,\n                        param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "receive_serial_data_080054d4",
                "param_1": "serialData",
                "param_2": "receivedByte",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "isRxActive"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "configure_serial_port_08005510",
            "code": "\nvoid configureSerialPort_08005510(int serialPort,undefined4 data,undefined4 unused,undefined4 priority)\n\n{\n  int isSerialActive;\n  uint portIndex;\n  \n  if (serialPort != 0) {\n    isSerialActive = serial_rx_active();\n    if (isSerialActive == 0) {\n      portIndex = (uint)*(byte *)(serialPort + 0x44);\n      *(undefined4 *)(&DAT_200002dc + portIndex * 4) = data;\n      *(int *)(&DAT_200002f0 + portIndex * 4) = serialPort;\n      HAL_NVIC_SetPriority((int)*(char *)(serialPort + 0x5a),0,1,portIndex,priority);\n      HAL_NVIC_EnableIRQ((int)*(char *)(serialPort + 0x5a));\n      HAL_UART_Receive_IT((&DAT_2000032c)[*(byte *)(serialPort + 0x44)],serialPort + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "configure_serial_port_08005510",
                "param_1": "serialPort",
                "param_2": "data",
                "param_3": "unused",
                "param_4": "priority",
                "iVar1": "isSerialActive",
                "uVar2": "portIndex"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Receive_IT",
                "serial_rx_active",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "initialize_peripheral_08005568",
            "code": "\nvoid initializePeripheral_08005568(int peripheral,undefined4 priority)\n\n{\n  byte index;\n  \n  if (peripheral != 0) {\n    index = *(byte *)(peripheral + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)index * 4) = priority;\n    *(int *)(&DAT_20000318 + (uint)index * 4) = peripheral;\n    HAL_NVIC_SetPriority((int)*(char *)(peripheral + 0x5a),0,2);\n    HAL_NVIC_EnableIRQ((int)*(char *)(peripheral + 0x5a));\n    HAL_UART_Transmit_IT\n              ((&DAT_2000032c)[*(byte *)(peripheral + 0x44)],\n               *(int *)(peripheral + 100) + (uint)*(ushort *)(peripheral + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "initialize_peripheral_08005568",
                "param_1": "peripheral",
                "param_2": "priority",
                "bVar1": "index"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "HAL_UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_param_index_080055bc",
            "code": "\nuint findParamIndex_080055bc(int param)\n\n{\n  uint index;\n  \n  if (param == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (param == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_param_index_080055bc",
                "param_1": "param",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_RxCpltCallback",
                "HAL_UART_TxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_uart_function_080055e0",
            "code": "\nvoid execute_uart_function_080055e0(void)\n\n{\n  uint uart_index_result;\n  \n  uart_index_result = uart_index();\n  if (uart_index_result < 5) {\n    (**(code **)(&DAT_200002dc + uart_index_result * 4))(*(undefined4 *)(&DAT_200002f0 + uart_index_result * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_uart_function_080055e0",
                "uVar1": "uart_index_result"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "transmit_data_08005604",
            "code": "\nvoid transmitData_08005604(void)\n\n{\n  uint uartIndex;\n  int transmitResult;\n  int uartConfigPtr;\n  \n  uartIndex = uart_index();\n  uartConfigPtr = *(int *)(&DAT_20000318 + uartIndex * 4);\n  if ((uartIndex < 5) && (transmitResult = (**(code **)(&DAT_20000304 + uartIndex * 4))(uartConfigPtr), transmitResult != -1)) {\n    HAL_UART_Transmit_IT\n              ((&DAT_2000032c)[*(byte *)(uartConfigPtr + 0x44)],\n               *(int *)(uartConfigPtr + 100) + (uint)*(ushort *)(uartConfigPtr + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "transmit_data_08005604",
                "uVar1": "uartIndex",
                "iVar2": "transmitResult",
                "iVar3": "uartConfigPtr"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "uart_index",
                "HAL_UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocate_memory_080056d8(int num_bytes)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocated_memory = DAT_20000340;\n  if (DAT_20000340 + num_bytes <= end_of_stack) {\n    DAT_20000340 = DAT_20000340 + num_bytes;\n    return allocated_memory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "num_bytes",
                "puVar1": "allocated_memory",
                "&stack0x00000000": "end_of_stack"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_return_value_08005714",
            "code": "\nundefined4 initializeReturnValue_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_return_value_08005714"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "set_memory_flag_0800571a",
            "code": "\nundefined4 setMemoryFlag_0800571a(undefined4 arg1,int arg2)\n\n{\n  *(undefined4 *)(arg2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "set_memory_flag_0800571a",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "initialize_flag_08005724",
            "code": "\nbool initializeFlag_08005724(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "initialize_flag_08005724",
                "undefined4": "bool",
                "return": "result"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_data_08005728",
            "code": "\nundefined4 initializeData_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_data_08005728"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_application_0800572c",
            "code": "\nundefined4 initialize_application_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_application_0800572c"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "write_debug_message_08005730",
            "code": "\nvoid write_debug_message_08005730(undefined4 unused_param,undefined4 data_1,undefined4 data_2,undefined4 data_3)\n\n{\n  uart_debug_write(data_1,data_2,data_2,data_3,data_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "write_debug_message_08005730",
                "param_1": "unused_param",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infiniteLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "calling": [
                "_exit",
                "abort"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_value_08005740",
            "code": "\nundefined4 initializeValue_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_value_08005740"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "check_if_binary_exists_08005750",
            "code": "\nundefined4 check_if_binary_exists_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "check_if_binary_exists_08005750"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "translate_value_08005754",
            "code": "\nuint translate_value_08005754(uint input_value)\n\n{\n  bool is_valid_input;\n  char translated_char;\n  uint translated_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_valid_input = true;\n    }\n    else {\n      is_valid_input = false;\n    }\n  }\n  else {\n    is_valid_input = input_value < 0x3c;\n  }\n  if (is_valid_input) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    translated_char = (&DAT_080076f0)[input_value];\n  }\n  else {\n    translated_char = -1;\n  }\n  if (translated_char == -1) {\n    translated_value = 0;\n  }\n  else {\n    translated_value = adc_read_value();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return translated_value >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return translated_value << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return translated_value;\n}\n\n",
            "renaming": {
                "FUN_08005754": "translate_value_08005754",
                "param_1": "input_value",
                "bVar1": "is_valid_input",
                "cVar2": "translated_char",
                "uVar3": "translated_value"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "configure_pin_080057b4",
            "code": "\nvoid configurePin_080057b4(uint pinNumber,undefined4 digitalMode,undefined4 val1,undefined *pinData)\n\n{\n  int pinStatus;\n  undefined *pinArray;\n  int pinIndex;\n  \n  if (pinNumber < 0x3c) {\n    pinIndex = (int)(char)(&DAT_080076f0)[pinNumber];\n    pinArray = &DAT_080076f0;\n  }\n  else {\n    pinIndex = -1;\n    pinArray = pinData;\n  }\n  if (pinIndex != -1) {\n    pinStatus = is_pin_configured(pinIndex,&DAT_20000344,val1,pinArray,pinData);\n    if (pinStatus != 0) {\n      pinStatus = pin_in_pinmap(pinIndex,&DAT_080074b4);\n      if (pinStatus != 0) {\n        pwm_stop(pinIndex);\n      }\n      reset_pin_configured(pinIndex,&DAT_20000344);\n    }\n    switch(digitalMode) {\n    case 0:\n      digital_io_init(pinIndex,0);\n      break;\n    case 1:\n      digital_io_init(pinIndex,1,0);\n      break;\n    case 2:\n      digital_io_init(pinIndex,0,1);\n      break;\n    case 3:\n      digital_io_init(pinIndex,0,2);\n    }\n    set_pin_configured(pinIndex,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "configure_pin_080057b4",
                "param_1": "pinNumber",
                "param_2": "digitalMode",
                "param_3": "val1",
                "param_4": "pinData",
                "iVar1": "pinStatus",
                "puVar2": "pinArray",
                "iVar3": "pinIndex"
            },
            "calling": [
                "setup",
                "MAX31855",
                "FUN_080013a4"
            ],
            "called": [
                "reset_pin_configured",
                "pin_in_pinmap",
                "digital_io_init",
                "pwm_stop",
                "set_pin_configured",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "configure_and_write_pin_08005848",
            "code": "\nvoid configureAndWritePin_08005848(uint pinIndex,undefined4 data,undefined4 configParam,undefined *pinData)\n\n{\n  int pinConfigured;\n  undefined4 gpioPort;\n  undefined *pinConfigData;\n  uint pinValue;\n  \n  if (pinIndex < 0x3c) {\n    pinValue = (uint)(char)(&DAT_080076f0)[pinIndex];\n    pinConfigData = &DAT_080076f0;\n  }\n  else {\n    pinValue = 0xffffffff;\n    pinConfigData = pinData;\n  }\n  if ((pinValue != 0xffffffff) &&\n     (pinConfigured = is_pin_configured(pinValue,&DAT_20000358,configParam,pinConfigData,pinData), pinConfigured != 0)) {\n    gpioPort = get_GPIO_Port((pinValue << 0x18) >> 0x1c);\n    digital_io_write(gpioPort,1 << (pinValue & 0xf) & 0xffff,data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "configure_and_write_pin_08005848",
                "param_1": "pinIndex",
                "param_2": "data",
                "param_3": "configParam",
                "param_4": "pinData",
                "iVar1": "pinConfigured",
                "uVar2": "gpioPort",
                "puVar3": "pinConfigData",
                "uVar4": "pinValue"
            },
            "calling": [
                "setup",
                "readData",
                "MAX31855",
                "pulseEnable",
                "FUN_080013a4",
                "write8bits",
                "write4bits",
                "loop",
                "send"
            ],
            "called": [
                "get_GPIO_Port",
                "digital_io_write",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_pin_configuration_08005890",
            "code": "\nchar checkPinConfiguration_08005890(uint pinNumber)\n\n{\n  char isPinConfigured;\n  int pinConfigStatus;\n  undefined4 GPIO_Port;\n  uint pinMapping;\n  \n  if (pinNumber < 0x3c) {\n    pinMapping = (uint)(char)(&DAT_080076f0)[pinNumber];\n  }\n  else {\n    pinMapping = 0xffffffff;\n  }\n  if (pinMapping == 0xffffffff) {\n    isPinConfigured = '\\0';\n  }\n  else {\n    pinConfigStatus = is_pin_configured(pinMapping,&DAT_20000358);\n    if (pinConfigStatus == 0) {\n      isPinConfigured = '\\0';\n    }\n    else {\n      GPIO_Port = get_GPIO_Port((pinMapping << 0x18) >> 0x1c);\n      isPinConfigured = digital_io_read(GPIO_Port,1 << (pinMapping & 0xf) & 0xffff);\n    }\n  }\n  if (isPinConfigured != '\\0') {\n    isPinConfigured = '\\x01';\n  }\n  return isPinConfigured;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_pin_configuration_08005890",
                "param_1": "pinNumber",
                "cVar1": "isPinConfigured",
                "iVar2": "pinConfigStatus",
                "uVar3": "GPIO_Port",
                "uVar4": "pinMapping"
            },
            "calling": [
                "readData",
                "loop"
            ],
            "called": [
                "digital_io_read",
                "get_GPIO_Port",
                "is_pin_configured"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "get_current_milliseconds_080058e0",
            "code": "\nvoid get_current_milliseconds_080058e0(void)\n\n{\n  current_time();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "get_current_milliseconds_080058e0",
                "GetCurrentMilli": "current_time"
            },
            "calling": [
                "setup",
                "Compute",
                "FUN_08001ab0",
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_hash_0800591e",
            "code": "\nushort calculateHash_0800591e(int inputValue)\n\n{\n  return (*(short *)(inputValue + 0x134) + 0x40) - *(short *)(inputValue + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_hash_0800591e",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "process_uart_input_0800598a",
            "code": "\nvoid process_uart_input_0800598a(int uart_device)\n\n{\n  int result;\n  ushort current_index;\n  undefined received_byte;\n  \n  result = uart_getc(uart_device,&received_byte);\n  if ((result == 0) &&\n     (current_index = *(short *)(uart_device + 0x60) + 1U & 0x3f, current_index != *(ushort *)(uart_device + 0x62))) {\n    *(undefined *)(*(int *)(uart_device + 0x5c) + (uint)*(ushort *)(uart_device + 0x60)) = received_byte;\n    *(ushort *)(uart_device + 0x60) = current_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "process_uart_input_0800598a",
                "param_1": "uart_device",
                "iVar1": "result",
                "uVar2": "current_index",
                "local_9": "received_byte"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_data_08005a44",
            "code": "\nvoid initializeData_08005a44(int dataAddress)\n\n{\n  *(int *)(dataAddress + 0x130) = dataAddress + 0x11;\n  *(undefined2 *)(dataAddress + 0x134) = 0;\n  *(undefined2 *)(dataAddress + 0x136) = 0;\n  *(int *)(dataAddress + 0x138) = dataAddress + 0x51;\n  *(undefined2 *)(dataAddress + 0x13c) = 0;\n  *(undefined2 *)(dataAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_data_08005a44",
                "param_1": "dataAddress"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "configure_serial_port_08005a68",
            "code": "\nvoid configureSerialPort_08005a68(int serialPortAddress,undefined4 baudRate,byte configurationByte)\n\n{\n  uint temp;\n  char *errorMessage;\n  byte configBits;\n  int parityStopBits;\n  byte *tempPointer;\n  char unaffConfig;\n  int offset;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x140) = configurationByte;\n  configBits = configurationByte & 7;\n  if (configBits == 4) {\n    parityStopBits = 7;\n  }\n  else if (configBits == 6) {\n    parityStopBits = 8;\n  }\n  else if (configBits == 2) {\n    parityStopBits = 6;\n  }\n  else {\n    parityStopBits = 0;\n  }\n  if ((configurationByte & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    parityStopBits = parityStopBits + 1;\n  }\n  else if ((configurationByte & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    parityStopBits = parityStopBits + 1;\n  }\n  if ((configurationByte & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (parityStopBits == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (parityStopBits == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    parityStopBits = 0;\n  }\n  if (parityStopBits != 0) {\n    uart_init(serialPortAddress + 0xd4);\n    uart_attach_rx_callback(serialPortAddress + 0xd4,0x800598b);\n    return;\n  }\n  errorMessage = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTable = (code *)0x8005b12;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  tempPointer = *(byte **)(temp + offset);\n  errorMessage[0x1e] = unaffConfig;\n  *(undefined *)(*tempPointer + 0x1e) = 0;\n  if (temp < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[temp];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "configure_serial_port_08005a68",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "configurationByte",
                "extraout_r1": "temp",
                "pcVar1": "errorMessage",
                "bVar2": "configBits",
                "iVar3": "parityStopBits",
                "pbVar4": "tempPointer",
                "unaff_r4": "unaffConfig",
                "unaff_r6": "offset",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "uart_attach_rx_callback",
                "uart_init",
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "find_threshold_and_call_function_08005b24",
            "code": "\nvoid findThresholdAndCallFunction_08005b24(int baseAddress,uint index)\n\n{\n  undefined threshold;\n  code *functionTable;\n  \n  if (index < 0x3c) {\n    threshold = (&DAT_080076f0)[index];\n  }\n  else {\n    threshold = 0xff;\n  }\n  *(undefined *)(baseAddress + 0x12d) = threshold;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*functionTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "find_threshold_and_call_function_08005b24",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "threshold",
                "UNRECOVERED_JUMPTABLE": "functionTable"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_byte_value_08005b3c",
            "code": "\nvoid setByteValue_08005b3c(int targetAddress,uint offset)\n\n{\n  undefined byteValue;\n  \n  if (offset < 0x3c) {\n    byteValue = (&DAT_080076f0)[offset];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(targetAddress + 300) = byteValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_byte_value_08005b3c",
                "param_1": "targetAddress",
                "param_2": "offset",
                "uVar1": "byteValue"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_communication_08005b54",
            "code": "\nundefined4 *\ninitializeCommunication_08005b54(undefined4 *communicationData,undefined4 pinNumber,undefined4 parameter3,undefined4 parameter4)\n\n{\n  undefined pinValue;\n  \n  communicationData[1] = 0;\n  communicationData[2] = 1000;\n  *communicationData = &PTR_LAB_080059c8_1_08007804;\n  if (communicationData == (undefined4 *)&DAT_2000036c) {\n    setReceive(&DAT_2000036c,0,parameter3,&DAT_2000036c,parameter4);\n    setTransmit(&DAT_2000036c,1);\n  }\n  else {\n    pinValue = pinmap_pin(pinNumber,&DAT_08007604);\n    *(undefined *)((int)communicationData + 0x12d) = pinValue;\n    pinValue = pinmap_pin(pinNumber,&DAT_0800764c);\n    *(undefined *)(communicationData + 0x4b) = pinValue;\n  }\n  initialize(communicationData);\n  return communicationData;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_communication_08005b54",
                "param_1": "communicationData",
                "param_2": "pinNumber",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "pinValue",
                "setRx": "setReceive",
                "setTx": "setTransmit",
                "init": "initialize"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "init",
                "pinmap_pin",
                "setRx",
                "setTx"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_serial_communication_08005bb0",
            "code": "\nvoid initializeSerialCommunication_08005bb0(int flag,int value,undefined4 arg1,undefined4 arg2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    configureHardwareSerial(&DAT_2000036c,0x40004400,arg1,0xffff,arg2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_serial_communication_08005bb0",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "HardwareSerial": "configureHardwareSerial"
            },
            "calling": [],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_data_08005c1c",
            "code": "\nvoid initializeData_08005c1c(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_08007858;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_data_08005c1c",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_ip_address_08005c38",
            "code": "\nvoid initializeIPAddress_08005c38(int isFirstParameterOne,int isSecondParameterMaxValue)\n\n{\n  if ((isFirstParameterOne == 1) && (isSecondParameterMaxValue == 0xffff)) {\n    IPAddress(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_ip_address_08005c38",
                "param_1": "isFirstParameterOne",
                "param_2": "isSecondParameterMaxValue"
            },
            "calling": [],
            "called": [
                "IPAddress"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "reverse_and_execute_08005c96",
            "code": "\nundefined4 reverseAndExecute_08005c96(int *ptr_input,int input_length,undefined4 var1,undefined4 var2)\n\n{\n  undefined4 str_length;\n  \n  if (input_length != 0) {\n    str_length = strlen(input_length);\n    str_length = (**(code **)(*ptr_input + 4))(ptr_input,input_length,str_length,*(code **)(*ptr_input + 4),var2);\n    return str_length;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "reverse_and_execute_08005c96",
                "param_1": "ptr_input",
                "param_2": "input_length",
                "param_3": "var1",
                "param_4": "var2",
                "uVar1": "str_length"
            },
            "calling": [
                "setup",
                "printFloat",
                "FUN_08005cd4",
                "loop"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_08005cb6",
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_pointer"
            },
            "calling": [
                "printFloat",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_callback_08005cc0",
            "code": "\nvoid executeCallback_08005cc0(int *callbackPtr,undefined4 arg1,undefined4 arg2,undefined4 callbackArgument)\n\n{\n  (**(code **)(*callbackPtr + 4))(callbackPtr,&DAT_0800786c,2,*(code **)(*callbackPtr + 4),callbackArgument);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_callback_08005cc0",
                "param_1": "callbackPtr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "callbackArgument"
            },
            "calling": [
                "println",
                "FUN_08005cd4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_total_08005cd4",
            "code": "\nint calculate_total_08005cd4(undefined4 input_param)\n\n{\n  int reversed_var;\n  int callback_result;\n  \n  reversed_var = reverse_and_execute_08005c96();\n  callback_result = execute_callback_08005cc0(input_param);\n  return callback_result + reversed_var;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_total_08005cd4",
                "param_1": "input_param",
                "iVar1": "reversed_var",
                "iVar2": "callback_result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_base_08005ce8",
            "code": "\nundefined4 convertBase_08005ce8(int *numberPtr,uint number,uint base)\n\n{\n  char digit;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *buffer;\n  char digits [9];\n  \n  digits[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  buffer = digits + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    buffer = buffer + -1;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *buffer = digit;\n    number = quotient;\n  } while (quotient != 0);\n  if (buffer == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = strlen(buffer);\n    result = (**(code **)(*numberPtr + 4))(numberPtr,buffer,result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "numberPtr",
                "param_2": "number",
                "param_3": "base",
                "cVar1": "digit",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "buffer",
                "local_15": "digits"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "print_number_or_execute_08005d42",
            "code": "\nint printNumberOrExecute_08005d42(undefined4 *argPointer,uint number,uint base)\n\n{\n  int returnVal;\n  int returnValue;\n  \n  if (base == 0) {\n    returnVal = (**(code **)*argPointer)(argPointer,number & 0xff);\n    return returnVal;\n  }\n  if (base != 10) {\n    returnVal = printNumber(argPointer,number,base & 0xff);\n    return returnVal;\n  }\n  if (-1 < (int)number) {\n    returnVal = printNumber(argPointer,number,10);\n    return returnVal;\n  }\n  returnVal = execute_function_08005cb6(argPointer,0x2d);\n  returnValue = printNumber(argPointer,-number,10);\n  return returnValue + returnVal;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "print_number_or_execute_08005d42",
                "param_1": "argPointer",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "returnVal",
                "iVar2": "returnValue"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "print_number_or_execute_08005d82",
            "code": "\nvoid print_number_or_execute_08005d82(void)\n\n{\n  print_number_or_execute_08005d82_08005d42();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "print_number_or_execute_08005d82"
            },
            "calling": [
                "printFloat",
                "loop"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "print_or_call_08005d8a",
            "code": "\nvoid printOrCall_08005d8a(undefined4 *array,uint index,uint value,undefined4 callback)\n\n{\n  if (value != 0) {\n    printNumber(array,index,value & 0xff);\n    return;\n  }\n  (**(code **)*array)(array,index & 0xff,0,*(code **)*array,callback);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "print_or_call_08005d8a",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value",
                "param_4": "callback"
            },
            "calling": [
                "printFloat"
            ],
            "called": [
                "printNumber"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "calculate_and_print_result_08005da8",
            "code": "\nint calculateAndPrintResult_08005da8(undefined4 ptr,undefined4 param1,undefined4 param2,uint param3,byte param4)\n\n{\n  int result;\n  undefined4 tempVar1;\n  int tempVar2;\n  byte loopVar;\n  undefined8 calcVar1;\n  undefined8 calcVar2;\n  \n  result = __unorddf2(param2,param3,param2,param3);\n  if (result == 0) {\n    result = __unorddf2(param2,param3 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = __aeabi_dcmple(param2,param3 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = reverse_and_execute_08005c96(ptr,&DAT_08007860);\n    }\n    else {\n      result = __aeabi_dcmpgt(param2,param3,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = __aeabi_dcmplt(param2,param3,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = __aeabi_dcmplt(param2,param3,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function_08005cb6(ptr,0x2d);\n            param3 = param3 + 0x80000000;\n          }\n          calcVar1 = 0x3fe0000000000000;\n          for (loopVar = 0; tempVar1 = (undefined4)((ulonglong)calcVar1 >> 0x20), loopVar < param4;\n              loopVar = loopVar + 1) {\n            calcVar1 = __divdf3((int)calcVar1,tempVar1,0,0x40240000);\n          }\n          calcVar1 = __aeabi_dadd(param2,param3,(int)calcVar1,tempVar1);\n          tempVar1 = __fixunsdfsi();\n          calcVar2 = __floatunsidf();\n          calcVar1 = __subdf3((int)calcVar1,(int)((ulonglong)calcVar1 >> 0x20),(int)calcVar2,\n                           (int)((ulonglong)calcVar2 >> 0x20));\n          tempVar2 = print_or_call_08005d8a(ptr,tempVar1,10);\n          result = result + tempVar2;\n          if (param4 != 0) {\n            tempVar2 = reverse_and_execute_08005c96(ptr,&DAT_08007868);\n            result = result + tempVar2;\n          }\n          while (param4 != 0) {\n            calcVar1 = __muldf3((int)calcVar1,(int)((ulonglong)calcVar1 >> 0x20),0,0x40240000);\n            tempVar1 = __fixdfsi();\n            tempVar2 = print_number_or_execute_08005d82(ptr,tempVar1,10);\n            result = result + tempVar2;\n            calcVar2 = __floatsidf(tempVar1);\n            calcVar1 = __subdf3((int)calcVar1,(int)((ulonglong)calcVar1 >> 0x20),(int)calcVar2,\n                             (int)((ulonglong)calcVar2 >> 0x20));\n            param4 = param4 - 1;\n          }\n        }\n        else {\n          result = reverse_and_execute_08005c96(ptr,&DAT_08007864);\n        }\n      }\n      else {\n        result = reverse_and_execute_08005c96(ptr,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = reverse_and_execute_08005c96(ptr,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "calculate_and_print_result_08005da8",
                "param_1": "ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "iVar3": "tempVar2",
                "bVar4": "loopVar",
                "uVar5": "calcVar1",
                "uVar6": "calcVar2"
            },
            "calling": [
                "print"
            ],
            "called": [
                "__aeabi_dcmplt",
                "__fixdfsi",
                "__floatsidf",
                "FUN_08005d8a",
                "__aeabi_dcmpgt",
                "FUN_08005d82",
                "__muldf3",
                "__aeabi_dadd",
                "FUN_08005cb6",
                "__subdf3",
                "__aeabi_dcmple",
                "__divdf3",
                "__fixunsdfsi",
                "__unorddf2",
                "FUN_08005c96",
                "__floatunsidf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "print_float_wrapper_08005f2c",
            "code": "\nvoid printFloatWrapper_08005f2c(void)\n\n{\n  printFloat();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "print_float_wrapper_08005f2c"
            },
            "calling": [
                "println",
                "loop"
            ],
            "called": [
                "printFloat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_sum_08005f40",
            "code": "\nint calculate_sum_08005f40(undefined4 input_value)\n\n{\n  int print_result;\n  int callback_result;\n  \n  print_result = print();\n  callback_result = execute_callback_08005cc0(input_value);\n  return callback_result + print_result;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_sum_08005f40",
                "param_1": "input_value",
                "iVar1": "print_result",
                "iVar2": "callback_result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_08005cc0",
                "print"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_system_08005f5e",
            "code": "\nvoid initialize_system_08005f5e(void)\n\n{\n  set_priority_group(3);\n  configure_hardware();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_system_08005f5e",
                "initialize_hardware_config_08001c32": "configure_hardware",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_group"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "FUN_08001c32",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "main_loop_08005f6c",
            "code": "\nvoid mainLoop_08005f6c(void)\n\n{\n  initializeVariant();\n  setUpConfiguration();\n  do {\n    executeLoop();\n    processSerialEvents();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "main_loop_08005f6c",
                "initVariant": "initializeVariant",
                "setup": "setUpConfiguration",
                "loop": "executeLoop",
                "serialEventRun": "processSerialEvents"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "initVariant",
                "setup",
                "serialEventRun",
                "loop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar countSetBits_08005f8c(uint number)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "number",
                "cVar1": "bitCount"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_config_08005fc8",
            "code": "\nvoid initializeConfig_08005fc8(int configValid,int configFlag,undefined4 param3,undefined4 param4)\n\n{\n  if (configValid != 1) {\n    return;\n  }\n  if (configFlag == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    registerExitHandler(0,&exitHandler,&DAT_20000000,&DAT_200004b8,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_config_08005fc8",
                "param_1": "configValid",
                "param_2": "configFlag",
                "param_3": "param3",
                "param_4": "param4",
                "__aeabi_atexit": "registerExitHandler",
                "LAB_08005fa0_1": "exitHandler"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "handle_function_080060d4",
            "code": "\nvoid handleFunction_080060d4(int input)\n\n{\n  int pinId;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  pinId = get_pin_id();\n  if ((&DAT_200004c4)[pinId * 5] != 0) {\n    handleFunction_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "handle_function_080060d4",
                "param_1": "input",
                "iVar1": "pinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "execute_if_valid_pin_id_080060e4",
            "code": "\nvoid executeIfValidPinId_080060e4(void)\n\n{\n  int pinId;\n  \n  pinId = retrievePinId();\n  if ((&DAT_200004c4)[pinId * 5] != 0) {\n    operator()();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "execute_if_valid_pin_id_080060e4",
                "iVar1": "pinId",
                "get_pin_id": "retrievePinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "get_pin_id",
                "operator()"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "register_exit_handler_08006112",
            "code": "\nvoid register_exit_handler_08006112(undefined4 exit_handler_function,undefined4 exit_handler_arg)\n\n{\n  __cxa_atexit(exit_handler_arg,exit_handler_function);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "register_exit_handler_08006112",
                "param_1": "exit_handler_function",
                "param_2": "exit_handler_arg"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "print_assert_message_0800611c",
            "code": "\nvoid printAssertMessage_0800611c(undefined4 filename,undefined4 line_number,char *function_name,undefined4 assertion_message)\n\n{\n  undefined4 stream;\n  char *delimiter;\n  undefined8 result;\n  undefined4 additional_info;\n  \n  stream = *(undefined4 *)(DAT_200000f8 + 0xc);\n  additional_info = assertion_message;\n  if (function_name == (char *)0x0) goto LAB_08006140;\n  delimiter = \", function: \";\n  do {\n    fiprintf(stream,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",assertion_message,filename,line_number,\n             delimiter,function_name,additional_info);\n    result = abort();\n    line_number = (undefined4)((ulonglong)result >> 0x20);\n    stream = (undefined4)result;\nLAB_08006140:\n    function_name = \"\";\n    delimiter = function_name;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "print_assert_message_0800611c",
                "param_1": "filename",
                "param_2": "line_number",
                "param_3": "function_name",
                "param_4": "assertion_message",
                "uVar1": "stream",
                "pcVar2": "delimiter",
                "uVar3": "result",
                "uVar4": "additional_info"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift_left_by32_bits_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shiftLeftBy32Bits_08006158(undefined4 inputUint,uint shiftValue)\n\n{\n  return (result)shiftValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift_left_by32_bits_08006158",
                "param_1": "inputUint",
                "param_2": "shiftValue",
                "ulonglong": "result"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "print_data_08006174",
            "code": "\nvoid printData_08006174(undefined4 data1,undefined4 data2,undefined4 stackVar1,undefined4 stackVar2)\n\n{\n  undefined4 stackVar3;\n  undefined4 stackVar4;\n  \n  stackVar3 = stackVar1;\n  stackVar4 = stackVar2;\n  _vfiprintf_r(DAT_200000f8,data1,data2,&stackVar3,data1,&stackVar3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "print_data_08006174",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "stackVar1",
                "param_4": "stackVar2",
                "uStack_8": "stackVar3",
                "uStack_4": "stackVar4"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "initialize_and_execute_functions_08006198",
            "code": "\nvoid initialize_and_execute_functions_08006198(void)\n\n{\n  int function_index;\n  \n  for (function_index = 0; function_index != 0; function_index = function_index + 1) {\n    (*(code *)(&DAT_08007944)[function_index])();\n  }\n  _init();\n  for (function_index = 0; function_index != 10; function_index = function_index + 1) {\n    (*(code *)(&DAT_08007944)[function_index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "initialize_and_execute_functions_08006198",
                "iVar1": "function_index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "premain",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_with_080061e0",
            "code": "\nvoid fillMemoryWith_080061e0(undefined *destination,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + size;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_with_080061e0",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "std.isra.0",
                "adc_read_value",
                "__sfp",
                "__sfmoreglue"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "allocate_memory_080061f0",
            "code": "\nvoid allocateMemory_080061f0(undefined4 *result,int size,undefined4 unused_arg1,undefined4 unused_arg2)\n\n{\n  int **temp_ptr1;\n  int **temp_ptr2;\n  int **temp_ptr3;\n  int *temp_ptr;\n  int **temp_ptr4;\n  int **allocated_memory;\n  \n  if (size == 0) {\n    return;\n  }\n  allocated_memory = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    allocated_memory = (int **)((int)allocated_memory + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  temp_ptr3 = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    allocated_memory[1] = (int *)0x0;\n    temp_ptr2 = temp_ptr1;\n    DAT_200005f8 = allocated_memory;\n  }\n  else {\n    temp_ptr3 = DAT_200005f8;\n    if (allocated_memory < DAT_200005f8) {\n      temp_ptr2 = (int **)*allocated_memory;\n      temp_ptr3 = (int **)((int)allocated_memory + (int)temp_ptr2);\n      if (DAT_200005f8 == temp_ptr3) {\n        temp_ptr = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        temp_ptr3 = (int **)((int)temp_ptr + (int)temp_ptr2);\n        *allocated_memory = (int *)temp_ptr3;\n      }\n      allocated_memory[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = allocated_memory;\n    }\n    else {\n      do {\n        temp_ptr4 = temp_ptr3;\n        temp_ptr3 = (int **)temp_ptr4[1];\n        if (temp_ptr3 == (int **)0x0) break;\n      } while (temp_ptr3 <= allocated_memory);\n      temp_ptr2 = (int **)*temp_ptr4;\n      if ((int **)((int)temp_ptr4 + (int)temp_ptr2) == allocated_memory) {\n        temp_ptr2 = (int **)((int)temp_ptr2 + (int)*allocated_memory);\n        *temp_ptr4 = (int *)temp_ptr2;\n        if (temp_ptr3 == (int **)((int)temp_ptr4 + (int)temp_ptr2)) {\n          temp_ptr = *temp_ptr3;\n          temp_ptr3 = (int **)temp_ptr3[1];\n          temp_ptr2 = (int **)((int)temp_ptr2 + (int)temp_ptr);\n          *temp_ptr4 = (int *)temp_ptr2;\n          temp_ptr4[1] = (int *)temp_ptr3;\n        }\n      }\n      else if (allocated_memory < (int **)((int)temp_ptr4 + (int)temp_ptr2)) {\n        *result = 0xc;\n      }\n      else {\n        temp_ptr2 = (int **)((int)allocated_memory + (int)*allocated_memory);\n        if (temp_ptr3 == temp_ptr2) {\n          temp_ptr = *temp_ptr3;\n          temp_ptr3 = (int **)temp_ptr3[1];\n          temp_ptr2 = (int **)((int)temp_ptr + (int)*allocated_memory);\n          *allocated_memory = (int *)temp_ptr2;\n        }\n        allocated_memory[1] = (int *)temp_ptr3;\n        temp_ptr4[1] = (int *)allocated_memory;\n      }\n    }\n  }\n  __malloc_unlock(result,temp_ptr2,temp_ptr3,unused_arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "allocate_memory_080061f0",
                "param_1": "result",
                "param_2": "size",
                "param_3": "unused_arg1",
                "param_4": "unused_arg2",
                "extraout_r1": "temp_ptr1",
                "ppiVar1": "temp_ptr2",
                "ppiVar2": "temp_ptr3",
                "piVar3": "temp_ptr",
                "ppiVar4": "temp_ptr4",
                "ppiVar5": "allocated_memory"
            },
            "calling": [
                "__swsetup_r",
                "abort"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_memory_08006288",
            "code": "\nuint allocate_memory_08006288(undefined4 *error_code,uint bytes_to_allocate)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint block_size_diff;\n  uint *previous_block_next;\n  uint allocated_block_size;\n  \n  allocated_block_size = (bytes_to_allocate + 3 & 0xfffffffc) + 8;\n  if (allocated_block_size < 0xc) {\n    allocated_block_size = 0xc;\n  }\n  if (((int)allocated_block_size < 0) || (allocated_block_size < bytes_to_allocate)) {\n    *error_code = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_block = DAT_200005f8;\n    previous_block_next = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_size_diff = *previous_block - allocated_block_size;\n      if (-1 < (int)block_size_diff) {\n        if (block_size_diff < 0xc) {\n          if (previous_block_next == previous_block) {\n            current_block = (uint *)previous_block_next[1];\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block_next != previous_block) {\n            previous_block_next[1] = (uint)current_block;\n            previous_block_next = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_size_diff;\n          *(uint *)((int)previous_block + block_size_diff) = allocated_block_size;\n          previous_block_next = (uint *)((int)previous_block + block_size_diff);\n        }\n        goto LAB_080062ec;\n      }\n      previous_block_next = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = _sbrk_r(error_code);\n    }\n    current_block = (uint *)_sbrk_r(error_code,allocated_block_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block_next = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block_next ||\n        (remaining_space = _sbrk_r(error_code,(int)previous_block_next - (int)current_block), remaining_space != -1)))) {\n      *previous_block_next = allocated_block_size;\nLAB_080062ec:\n      __malloc_unlock(error_code);\n      allocated_block_size = (int)previous_block_next + 0xbU & 0xfffffff8;\n      remaining_space = allocated_block_size - (int)(previous_block_next + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)previous_block_next + remaining_space) = -remaining_space;\n        return allocated_block_size;\n      }\n      return allocated_block_size;\n    }\n    *error_code = 0xc;\n    __malloc_unlock(error_code);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_memory_08006288",
                "param_1": "error_code",
                "param_2": "bytes_to_allocate",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "block_size_diff",
                "puVar5": "previous_block_next",
                "uVar6": "allocated_block_size"
            },
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock",
                "_sbrk_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_byte_08006344",
            "code": "\nuint processByte_08006344(int input,byte byteValue,byte **data)\n\n{\n  int length;\n  byte *lastIndex;\n  byte *byteArray;\n  uint result;\n  \n  lastIndex = data[2] + -1;\n  data[2] = lastIndex;\n  if ((-1 < (int)lastIndex) ||\n     (((int)data[6] <= (int)lastIndex && (lastIndex = (byte *)(uint)byteValue, lastIndex != (byte *)0xa))))\n  {\n    lastIndex = *data;\n    *data = lastIndex + 1;\n    *lastIndex = byteValue;\n    return (uint)byteValue;\n  }\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    __sinit();\n  }\n  if (data == (byte **)&DAT_08007904) {\n    data = *(byte ***)(input + 4);\n  }\n  else if (data == (byte **)&DAT_08007924) {\n    data = *(byte ***)(input + 8);\n  }\n  else if (data == (byte **)&DAT_080078e4) {\n    data = *(byte ***)(input + 0xc);\n  }\n  data[2] = data[6];\n  byteArray = (byte *)(uint)*(ushort *)(data + 3);\n  length = (int)byteArray << 0x1c;\n  if (((length < 0) && (byteArray = data[4], byteArray != (byte *)0x0)) ||\n     (length = __swsetup_r(input,data,length,byteArray,lastIndex), length == 0)) {\n    result = (uint)byteValue;\n    length = (int)*data - (int)data[4];\n    if ((length < (int)data[5]) || (length = _fflush_r(input,data), length == 0)) {\n      data[2] = data[2] + -1;\n      lastIndex = *data;\n      *data = lastIndex + 1;\n      *lastIndex = byteValue;\n      if ((byte *)(length + 1) != data[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      length = _fflush_r(input,data);\n      if (length == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_byte_08006344",
                "param_1": "input",
                "param_2": "byteValue",
                "param_3": "data",
                "iVar1": "length",
                "pbVar2": "lastIndex",
                "pbVar3": "byteArray",
                "uVar4": "result"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "write_data_08006370",
            "code": "\nint write_data_08006370(undefined4 file_descriptor,undefined4 buffer,undefined *data_pointer,int data_length)\n\n{\n  int bytes_written;\n  undefined *end_of_data;\n  int bytes_remaining;\n  \n  end_of_data = data_pointer + data_length;\n  bytes_remaining = data_length;\n  do {\n    if (data_pointer == end_of_data) {\n      return 0;\n    }\n    bytes_written = __sfputc_r(file_descriptor,*data_pointer,buffer,data_length,bytes_remaining);\n    data_length = bytes_written + 1;\n    data_pointer = data_pointer + 1;\n  } while (data_length != 0);\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_08006370": "write_data_08006370",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "param_3": "data_pointer",
                "param_4": "data_length",
                "iVar1": "bytes_written",
                "puVar2": "end_of_data",
                "iVar3": "bytes_remaining"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "printf_formatted_output_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint printf_formatted_output_08006394(int stream,undefined4 *format,byte *str,int *width_ptr)\n\n{\n  int write_result;\n  int *ptr;\n  bool is_number;\n  byte *ptr_temp;\n  byte *ptr_str;\n  int placeholder;\n  int result;\n  int *saved_width;\n  uint flags;\n  int precision;\n  undefined4 ctx;\n  int width;\n  int total_written;\n  byte specifier;\n  undefined flag_space;\n  undefined flag_plus;\n  undefined width_asterisk;\n  undefined4 saved_ctx;\n  \n  saved_width = width_ptr;\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format == &DAT_08007904) {\n    format = *(undefined4 **)(stream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_08007924) {\n    format = *(undefined4 **)(stream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_080078e4) {\n    format = *(undefined4 **)(stream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (result = __swsetup_r(stream,format), result != 0)) {\n    return -1;\n  }\n  total_written = 0;\n  flag_space = 0x20;\n  flag_plus = 0x30;\n  ptr_temp = str;\nLAB_080063d6:\n  ptr_str = ptr_temp;\n  if (*ptr_str != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  ptr_temp = ptr_str + 1;\n  if (*ptr_str != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  result = (int)ptr_str - (int)str;\n  if (result != 0) {\n    write_result = __sfputs_r(stream,format,str,result);\n    if (write_result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_written;\n    }\n    total_written = total_written + result;\n  }\n  if (*ptr_str == 0) goto LAB_08006580;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  ctx = 0;\n  width_asterisk = 0;\n  saved_ctx = 0;\n  ptr_temp = ptr_str + 1;\n  while( true ) {\n    result = memchr(\"#-0+ \",*ptr_temp);\n    str = ptr_temp + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8750U & 0xff) | flags;\n    ptr_temp = str;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    width_asterisk = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    width_asterisk = 0x2b;\n  }\n  if (*ptr_temp == 0x2a) {\n    ptr = saved_width + 1;\n    result = *saved_width;\n    saved_width = ptr;\n    if (result < 0) {\n      width = -result;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    is_number = false;\n    result = width;\n    str = ptr_temp;\n    while( true ) {\n      if (9 < *str - 0x30) break;\n      result = result * 10 + (*str - 0x30);\n      is_number = true;\n      str = str + 1;\n    }\n    if (!is_number) goto LAB_080064be;\n  }\n  width = result;\nLAB_080064be:\n  if (*str == 0x2e) {\n    if (str[1] == 0x2a) {\n      str = str + 2;\n      ptr = saved_width + 1;\n      precision = *saved_width;\n      saved_width = ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_number = false;\n      result = 0;\n      precision = 0;\n      while( true ) {\n        str = str + 1;\n        if (9 < *str - 0x30) break;\n        result = result * 10 + (*str - 0x30);\n        is_number = true;\n      }\n      if (is_number) {\n        precision = result;\n      }\n    }\n  }\n  result = memchr(&DAT_080078b6,*str,3);\n  if (result != 0) {\n    str = str + 1;\n    flags = flags | 0x40 << (result + 0xf7ff874aU & 0xff);\n  }\n  specifier = *str;\n  str = str + 1;\n  result = memchr(\"efgEFG\",specifier,6);\n  if (result == 0) {\n    placeholder = _printf_i(stream,&flags,format,0x8006371,&saved_width);\n    if (placeholder == -1) goto LAB_08006580;\n  }\n  else {\n    saved_width = (int *)(((int)saved_width + 7U & 0xfffffff8) + 8);\n  }\n  total_written = total_written + placeholder;\n  ptr_temp = str;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "printf_formatted_output_08006394",
                "param_1": "stream",
                "param_2": "format",
                "param_3": "str",
                "param_4": "width_ptr",
                "iVar1": "write_result",
                "piVar2": "ptr",
                "bVar3": "is_number",
                "pbVar4": "ptr_temp",
                "pbVar5": "ptr_str",
                "unaff_r9": "placeholder",
                "iVar6": "result",
                "local_8c": "saved_width",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "ctx",
                "local_7c": "width",
                "local_74": "total_written",
                "local_70": "specifier",
                "local_6f": "flag_space",
                "local_6e": "flag_plus",
                "local_45": "width_asterisk",
                "local_30": "saved_ctx"
            },
            "calling": [
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "memchr",
                "_printf_i",
                "__swsetup_r",
                "__sfputs_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "process_data_080065c0",
            "code": "\nundefined4\nprocessData_080065c0(undefined4 input,uint *data,uint *outputSize,undefined4 param4,code *callback)\n\n{\n  int index;\n  int result;\n  uint maxSize;\n  uint offset;\n  bool flag;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *outputSize); index = index + 1) {\n      result = (*callback)(input,param4,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  offset = maxSize;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    offset = maxSize + 2;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param4,(int)data + 0x43,offset);\n  if (index != -1) {\n    maxSize = data[3];\n    flag = (*data & 6) != 4;\n    if (flag) {\n      maxSize = 0;\n    }\n    offset = 0;\n    if (!flag) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (!flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxSize == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param4,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "outputSize",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "maxSize",
                "uVar4": "offset",
                "bVar5": "flag"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "print_formatted_string_080066b0",
            "code": "\nuint print_formatted_string_080066b0(undefined4 format_string,uint *arguments,undefined4 width,code *print_function,uint **increased_arguments)\n\n{\n  byte byte_value;\n  int iterator;\n  uint *pointer_to_arguments;\n  int inner_iterator;\n  char *hex_string;\n  uint format_width;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint result;\n  uint temp_variable;\n  char *formatted_string;\n  char *temp_string;\n  uint local_variables [2];\n  \n  byte_value = *(byte *)(arguments + 6);\n  temp_string = (char *)((int)arguments + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800686a;\n          if (byte_value != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)arguments + 0x45) = 0x58;\n          hex_string = \"0123456789ABCDEF\";\nLAB_080067fa:\n          format_width = *arguments;\n          pointer_to_arguments = *increased_arguments;\n          *increased_arguments = pointer_to_arguments + 1;\n          if (((format_width & 0x80) == 0) && ((int)(format_width << 0x19) < 0)) {\n            result = (uint)*(ushort *)pointer_to_arguments;\n          }\n          else {\n            result = *pointer_to_arguments;\n          }\n          if ((int)(format_width << 0x1f) < 0) {\n            *arguments = format_width | 0x20;\n          }\n          if (result == 0) {\n            *arguments = *arguments & 0xffffffdf;\n          }\n          format_width = 0x10;\nLAB_08006790:\n          *(undefined *)((int)arguments + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080066e0;\n          result = *arguments;\n          pointer_to_arguments = *increased_arguments;\n          if ((result & 0x80) == 0) {\n            *increased_arguments = pointer_to_arguments + 1;\n            if ((result & 0x40) == 0) goto LAB_08006700;\n            result = (uint)(short)*(ushort *)pointer_to_arguments;\n          }\n          else {\n            *increased_arguments = pointer_to_arguments + 1;\nLAB_08006700:\n            result = *pointer_to_arguments;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)arguments + 0x43) = 0x2d;\n          }\n          hex_string = \"0123456789ABCDEF\";\n          format_width = 10;\n        }\n        temp_variable = arguments[1];\n        arguments[2] = temp_variable;\n        formatted_string = temp_string;\n        if ((int)temp_variable < 0) {\n          if (result != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)arguments + 0x42) = *hex_string;\n          formatted_string = (char *)((int)arguments + 0x42);\n        }\n        else {\n          *arguments = *arguments & 0xfffffffb;\n          if (result == 0) {\n            if (temp_variable != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              temp_variable = result / format_width;\n              formatted_string = formatted_string + -1;\n              *formatted_string = hex_string[result - format_width * temp_variable];\n              result = temp_variable;\n            } while (temp_variable != 0);\n          }\n        }\n        if (((format_width == 8) && ((int)(*arguments << 0x1f) < 0)) && ((int)arguments[1] <= (int)arguments[4]))\n        {\n          formatted_string[-1] = '0';\n          formatted_string = formatted_string + -1;\n        }\n        arguments[4] = (int)temp_string - (int)formatted_string;\n        temp_string = formatted_string;\n        goto LAB_080067d6;\n      }\n      pointer_to_arguments = *increased_arguments;\n      *increased_arguments = pointer_to_arguments + 1;\n      *(char *)((int)arguments + 0x42) = (char)*pointer_to_arguments;\nLAB_08006740:\n      temp_string = (char *)((int)arguments + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08006766:\n            result = *arguments;\n            pointer_to_arguments = *increased_arguments;\n            if ((result & 0x80) == 0) {\n              *increased_arguments = pointer_to_arguments + 1;\n              if ((result & 0x40) == 0) goto LAB_08006774;\n              result = (uint)*(ushort *)pointer_to_arguments;\n            }\n            else {\n              *increased_arguments = pointer_to_arguments + 1;\nLAB_08006774:\n              result = *pointer_to_arguments;\n            }\n            if (byte_value == 0x6f) {\n              format_width = 8;\n            }\n            else {\n              format_width = 10;\n            }\n            hex_string = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byte_value == 0x70) {\n            *arguments = *arguments | 0x20;\nLAB_08006726:\n            hex_string = \"0123456789abcdef\";\n            *(undefined *)((int)arguments + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08006766;\n          if (byte_value == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)arguments + 0x42) = byte_value;\n        goto LAB_08006740;\n      }\n      ppcVar8 = (char **)*increased_arguments;\n      *increased_arguments = (uint *)(ppcVar8 + 1);\n      temp_string = *ppcVar8;\n      iterator = memchr(temp_string,0,arguments[1]);\n      if (iterator != 0) {\n        arguments[1] = iterator - (int)temp_string;\n      }\n      result = arguments[1];\n    }\n    arguments[4] = result;\n    *(undefined *)((int)arguments + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  result = *arguments;\n  ppuVar7 = (uint **)*increased_arguments;\n  format_width = arguments[5];\n  if ((result & 0x80) == 0) {\n    *increased_arguments = (uint *)(ppuVar7 + 1);\n    pointer_to_arguments = *ppuVar7;\n    if ((result & 0x40) == 0) goto LAB_08006856;\n    *(short *)pointer_to_arguments = (short)format_width;\n  }\n  else {\n    *increased_arguments = (uint *)(ppuVar7 + 1);\n    pointer_to_arguments = *ppuVar7;\nLAB_08006856:\n    *pointer_to_arguments = format_width;\n  }\nLAB_0800686a:\n  arguments[4] = 0;\nLAB_080067d6:\n  iterator = _printf_common(format_string,arguments,local_variables,width,print_function);\n  if ((iterator == -1) || (iterator = (*print_function)(format_string,width,temp_string,arguments[4]), iterator == -1)) {\nLAB_080067ea:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*arguments << 0x1e) < 0) {\n      for (iterator = 0; iterator < (int)(arguments[3] - local_variables[0]); iterator = iterator + 1) {\n        inner_iterator = (*print_function)(format_string,width,(int)arguments + 0x19,1);\n        if (inner_iterator == -1) goto LAB_080067ea;\n      }\n    }\n    result = arguments[3];\n    if ((int)arguments[3] < (int)local_variables[0]) {\n      result = local_variables[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "print_formatted_string_080066b0",
                "param_1": "format_string",
                "param_2": "arguments",
                "param_3": "width",
                "param_4": "print_function",
                "param_5": "increased_arguments",
                "bVar1": "byte_value",
                "iVar2": "iterator",
                "puVar3": "pointer_to_arguments",
                "iVar4": "inner_iterator",
                "pcVar5": "hex_string",
                "uVar6": "format_width",
                "uVar9": "result",
                "uVar10": "temp_variable",
                "pcVar11": "formatted_string",
                "pcVar12": "temp_string",
                "local_24": "local_variables"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "memchr",
                "_printf_common"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "print_formatted_string_080068f0",
            "code": "\nvoid printFormattedString_080068f0(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int dataAddress;\n  undefined4 formatCopy;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  dataAddress = DAT_200000f8;\n  formatCopy = formatString;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    __sinit(DAT_200000f8);\n  }\n  _vfiprintf_r(dataAddress,*(undefined4 *)(dataAddress + 8),formatString,&arg1Copy,formatCopy,&arg1Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "print_formatted_string_080068f0",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "dataAddress",
                "uVar2": "formatCopy",
                "uStack_c": "arg1Copy",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "initialize_memory_allocation_08006920",
            "code": "\nvoid initializeMemoryAllocation_08006920(int *outputPointer,undefined4 allocationSize)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = _sbrk(allocationSize);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *outputPointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "initialize_memory_allocation_08006920",
                "param_1": "outputPointer",
                "param_2": "allocationSize",
                "iVar1": "result"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint processData_080069e4(undefined4 *outputData,undefined4 *inputData)\n\n{\n  int dataPtr;\n  uint result;\n  ushort flags;\n  \n  dataPtr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    __sinit(DAT_200000f8);\n  }\n  if (inputData == &DAT_08007904) {\n    inputData = *(undefined4 **)(dataPtr + 4);\n  }\n  else if (inputData == (undefined4 *)&DAT_08007924) {\n    inputData = *(undefined4 **)(dataPtr + 8);\n  }\n  else if (inputData == (undefined4 *)&DAT_080078e4) {\n    inputData = *(undefined4 **)(dataPtr + 0xc);\n  }\n  flags = *(ushort *)(inputData + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *outputData = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)inputData[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputData[0xd] != inputData + 0x11) {\n          _free_r(outputData);\n        }\n        inputData[0xd] = 0;\n      }\n      *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xffdb;\n      inputData[1] = 0;\n      *inputData = inputData[4];\n    }\n    *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) | 8;\n  }\n  if ((inputData[4] == 0) && ((*(ushort *)(inputData + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputData,inputData);\n  }\n  flags = *(ushort *)(inputData + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = inputData[5];\n    }\n    inputData[2] = result;\n  }\n  else {\n    inputData[2] = 0;\n    inputData[6] = -inputData[5];\n  }\n  if (inputData[4] == 0) {\n    flags = *(ushort *)(inputData + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(inputData + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "outputData",
                "param_2": "inputData",
                "iVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "__sfputc_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "handle_error_08006ac0",
            "code": "\nvoid handle_error_08006ac0(void)\n\n{\n  uint *arg_ptr;\n  int temp_var;\n  int *error_data;\n  int *temp_ptr;\n  uint arg_value;\n  ushort arg_flags;\n  int temp_var_2;\n  code *function_ptr;\n  int temp_var_3;\n  uint temp_value;\n  code *unrecovered_jump_table;\n  bool is_zero;\n  undefined8 exit_value;\n  \n  raise(6);\n  unrecovered_jump_table = (code *)0x8006acf;\n  exit_value = _exit(1);\n  error_data = (int *)((ulonglong)exit_value >> 0x20);\n  arg_ptr = (uint *)exit_value;\n  arg_flags = *(ushort *)(error_data + 3);\n  arg_value = (uint)arg_flags;\n  if ((int)(arg_value << 0x1c) < 0) {\n    temp_var = error_data[4];\n    if (temp_var != 0) {\n      temp_var_2 = arg_value << 0x1e;\n      is_zero = temp_var_2 != 0;\n      if (is_zero) {\n        temp_var_2 = 0;\n      }\n      temp_var_3 = *error_data;\n      if (!is_zero) {\n        temp_var_2 = error_data[5];\n      }\n      *error_data = temp_var;\n      error_data[2] = temp_var_2;\n      for (temp_var_3 = temp_var_3 - temp_var; 0 < temp_var_3; temp_var_3 = temp_var_3 - temp_var_2) {\n        temp_var_2 = (*(code *)error_data[10])(arg_ptr,error_data[8],temp_var,temp_var_3);\n        if (temp_var_2 < 1) {\n          arg_flags = *(ushort *)(error_data + 3);\n          goto LAB_08006bc6;\n        }\n        temp_var = temp_var + temp_var_2;\n      }\n    }\n  }\n  else if (((0 < error_data[1]) || (0 < error_data[0x10])) &&\n          (function_ptr = (code *)error_data[0xb], function_ptr != (code *)0x0)) {\n    temp_value = *arg_ptr;\n    *arg_ptr = 0;\n    if ((arg_flags & 0x1000) == 0) {\n      temp_var = (*function_ptr)(arg_ptr,error_data[8],arg_value & 0x1000,1);\n      if ((temp_var == -1) && (arg_value = *arg_ptr, arg_value != 0)) {\n        if ((arg_value != 0x1d) && (arg_value != 0x16)) {\n          *(ushort *)(error_data + 3) = *(ushort *)(error_data + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecovered_jump_table)();\n          return;\n        }\n        *arg_ptr = temp_value;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      temp_var = error_data[0x15];\n    }\n    if (((int)((uint)*(ushort *)(error_data + 3) << 0x1d) < 0) &&\n       (temp_var = temp_var - error_data[1], error_data[0xd] != 0)) {\n      temp_var = temp_var - error_data[0x10];\n    }\n    temp_var = (*(code *)error_data[0xb])(arg_ptr,error_data[8],temp_var,0);\n    arg_flags = *(ushort *)(error_data + 3);\n    if ((temp_var == -1) &&\n       ((0x1d < *arg_ptr || (-1 < (int)((0x20400001U >> (*arg_ptr & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(error_data + 3) = arg_flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jump_table)(0xffffffff);\n      return;\n    }\n    error_data[1] = 0;\n    *error_data = error_data[4];\n    if (((int)((uint)arg_flags << 0x13) < 0) && ((temp_var != -1 || (*arg_ptr == 0)))) {\n      error_data[0x15] = temp_var;\n    }\n    temp_ptr = (int *)error_data[0xd];\n    *arg_ptr = temp_value;\n    if (temp_ptr != (int *)0x0) {\n      if (temp_ptr != error_data + 0x11) {\n        _free_r(arg_ptr);\n      }\n      error_data[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jump_table)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "handle_error_08006ac0",
                "piVar3": "error_data",
                "puVar1": "arg_ptr",
                "uVar5": "arg_value",
                "uVar6": "arg_flags",
                "iVar2": "temp_var",
                "iVar7": "temp_var_2",
                "piVar4": "temp_ptr",
                "iVar9": "temp_var_3",
                "uVar10": "temp_value",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jump_table",
                "bVar11": "is_zero",
                "uVar12": "exit_value",
                "pcVar8": "function_ptr"
            },
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "called": [
                "_free_r",
                "raise",
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 processData_08006be0(uint *dataPointer,int *infoPointer)\n\n{\n  undefined4 returnValue;\n  int length;\n  int *infoPtr;\n  uint temp1;\n  ushort temp2;\n  int temp3;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  code *funcPointer;\n  int offset;\n  uint temp4;\n  code *unrecoveredTable;\n  bool bVar10;\n  \n  if (infoPointer[4] != 0) {\n    if ((dataPointer != (uint *)0x0) && (dataPointer[6] == 0)) {\n      __sinit();\n    }\n    if (infoPointer == &DAT_08007904) {\n      infoPointer = (int *)dataPointer[1];\n    }\n    else if (infoPointer == (int *)&DAT_08007924) {\n      infoPointer = (int *)dataPointer[2];\n    }\n    else if (infoPointer == (int *)&DAT_080078e4) {\n      infoPointer = (int *)dataPointer[3];\n    }\n    if (*(short *)(infoPointer + 3) != 0) {\n      temp2 = *(ushort *)(infoPointer + 3);\n      temp1 = (uint)temp2;\n      if ((int)(temp1 << 0x1c) < 0) {\n        length = infoPointer[4];\n        if (length != 0) {\n          temp3 = temp1 << 0x1e;\n          bVar10 = temp3 != 0;\n          if (bVar10) {\n            temp3 = 0;\n          }\n          offset = *infoPointer;\n          if (!bVar10) {\n            temp3 = infoPointer[5];\n          }\n          *infoPointer = length;\n          infoPointer[2] = temp3;\n          for (offset = offset - length; 0 < offset; offset = offset - temp3) {\n            temp3 = (*(code *)infoPointer[10])(dataPointer,infoPointer[8],length,offset,unusedVar1,unusedVar2);\n            if (temp3 < 1) {\n              temp2 = *(ushort *)(infoPointer + 3);\n              goto LAB_08006bc6;\n            }\n            length = length + temp3;\n          }\n        }\n      }\n      else if (((0 < infoPointer[1]) || (0 < infoPointer[0x10])) &&\n              (funcPointer = (code *)infoPointer[0xb], funcPointer != (code *)0x0)) {\n        temp4 = *dataPointer;\n        *dataPointer = 0;\n        if ((temp2 & 0x1000) == 0) {\n          length = (*funcPointer)(dataPointer,infoPointer[8],temp1 & 0x1000,1);\n          if ((length == -1) && (temp1 = *dataPointer, temp1 != 0)) {\n            if ((temp1 != 0x1d) && (temp1 != 0x16)) {\n              *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*unrecoveredTable)();\n              return returnValue;\n            }\n            *dataPointer = temp4;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          length = infoPointer[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoPointer + 3) << 0x1d) < 0) &&\n           (length = length - infoPointer[1], infoPointer[0xd] != 0)) {\n          length = length - infoPointer[0x10];\n        }\n        length = (*(code *)infoPointer[0xb])(dataPointer,infoPointer[8],length,0);\n        temp2 = *(ushort *)(infoPointer + 3);\n        if ((length == -1) &&\n           ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(infoPointer + 3) = temp2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*unrecoveredTable)(0xffffffff);\n          return returnValue;\n        }\n        infoPointer[1] = 0;\n        *infoPointer = infoPointer[4];\n        if (((int)((uint)temp2 << 0x13) < 0) && ((length != -1 || (*dataPointer == 0)))) {\n          infoPointer[0x15] = length;\n        }\n        infoPtr = (int *)infoPointer[0xd];\n        *dataPointer = temp4;\n        if (infoPtr != (int *)0x0) {\n          if (infoPtr != infoPointer + 0x11) {\n            _free_r(dataPointer);\n          }\n          infoPointer[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*unrecoveredTable)();\n          return returnValue;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*unrecoveredTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "dataPointer",
                "param_2": "infoPointer",
                "uVar1": "returnValue",
                "iVar2": "length",
                "piVar3": "infoPtr",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "iVar6": "temp3",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "pcVar7": "funcPointer",
                "iVar8": "offset",
                "uVar9": "temp4",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredTable"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_data_08006c40",
            "code": "\nvoid initializeData_08006c40(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  memset(data + 0x17,0,8);\n  data[8] = data;\n  data[9] = 0x8006f39;\n  data[10] = 0x8006f5b;\n  data[0xb] = 0x8006f93;\n  data[0xc] = &LAB_08006fb6_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_data_08006c40",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_memory_and_initialize_08006c88",
            "code": "\nundefined4 * allocate_memory_and_initialize_08006c88(undefined4 size,int count)\n\n{\n  undefined4 *memory_ptr;\n  int total_size;\n  \n  total_size = (count + -1) * 0x68;\n  memory_ptr = (undefined4 *)_malloc_r(size,total_size + 0x74);\n  if (memory_ptr != (undefined4 *)0x0) {\n    *memory_ptr = 0;\n    memory_ptr[1] = count;\n    memory_ptr[2] = memory_ptr + 3;\n    memset(memory_ptr + 3,0,total_size + 0x68);\n  }\n  return memory_ptr;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_memory_and_initialize_08006c88",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "memory_ptr",
                "iVar2": "total_size"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_data_08006cb4",
            "code": "\nvoid initializeData_08006cb4(undefined4 *data)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (data[6] == 0) {\n    data[0x12] = 0;\n    data[0x13] = 0;\n    data[0x14] = 0;\n    pointer = &DAT_200000fc;\n    data[10] = &LAB_08006c34_1;\n    if (data == &DAT_200000fc) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data == &DAT_200000fc) {\n      data[6] = pointer;\n    }\n    result = getFloatValue();\n    data[1] = result;\n    result = getFloatValue(data);\n    data[2] = result;\n    result = getFloatValue(data);\n    data[3] = result;\n    processData(data[1],4,0);\n    processData(data[2],9,1);\n    processData(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_data_08006cb4",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "pointer",
                "__sfp": "getFloatValue",
                "std_isra_0": "processData"
            },
            "calling": [
                "_fflush_r",
                "iprintf",
                "__sfputc_r",
                "__sfp",
                "_vfiprintf_r",
                "__swsetup_r"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "initialize_data_structure_08006d14",
            "code": "\nint * initializeDataStructure_08006d14(undefined4 *output,undefined4 size1,undefined4 size2,undefined4 param_4)\n\n{\n  int *currentPointer1;\n  int *currentPointer2;\n  int **dataStructure;\n  \n  if (DAT_20000114 == 0) {\n    __sinit(&DAT_200000fc);\n  }\n  dataStructure = (int **)&DAT_20000144;\n  do {\n    currentPointer2 = dataStructure[2];\n    currentPointer1 = dataStructure[1];\n    while (currentPointer1 = (int *)((int)currentPointer1 + -1), -1 < (int)currentPointer1) {\n      if (*(short *)(currentPointer2 + 3) == 0) {\n        *(undefined2 *)((int)currentPointer2 + 0xe) = 0xffff;\n        field2 = 0;\n        *(undefined2 *)(currentPointer2 + 3) = 1;\n        *currentPointer2 = 0;\n        field5 = 0;\n        field6 = 0;\n        field7 = 0;\n        field8 = 0;\n        field9 = 0;\n        memset(currentPointer2 + 0x17,0,8,1,param_4);\n        field10 = 0;\n        field11 = 0;\n        field12 = 0;\n        field13 = 0;\n        return currentPointer2;\n      }\n      currentPointer2 = currentPointer2 + 0x1a;\n    }\n    if (*dataStructure == (int *)0x0) {\n      currentPointer1 = (int *)__sfmoreglue(output,4);\n      *dataStructure = currentPointer1;\n      if (currentPointer1 == (int *)0x0) {\n        *output = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataStructure = (int **)*dataStructure;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "initialize_data_structure_08006d14",
                "param_1": "output",
                "param_2": "size1",
                "param_3": "size2",
                "piVar1": "currentPointer1",
                "piVar2": "currentPointer2",
                "ppiVar3": "dataStructure",
                "piVar2[0x19]": "field2",
                "piVar2[2]": "field5",
                "piVar2[1]": "field6",
                "piVar2[4]": "field7",
                "piVar2[5]": "field8",
                "piVar2[6]": "field9",
                "piVar2[0xd]": "field10",
                "piVar2[0xe]": "field11",
                "piVar2[0x12]": "field12",
                "piVar2[0x13]": "field13"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset",
                "__sfmoreglue",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "check_file_permissions_08006dc8",
            "code": "\nundefined4 check_file_permissions_08006dc8(undefined4 file_descriptor,int file_info,undefined4 *permission_output,uint *is_executable)\n\n{\n  int status;\n  undefined4 permission;\n  undefined stack_buffer [4];\n  uint file_mode;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (status = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),stack_buffer), status < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_mode & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_08006e08:\n  *permission_output = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "check_file_permissions_08006dc8",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "permission_output",
                "param_4": "is_executable",
                "iVar1": "status",
                "uVar2": "permission",
                "auStack_4c": "stack_buffer",
                "local_48": "file_mode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "convert_buffer_format_08006e10",
            "code": "\nvoid convertBufferFormat_08006e10(int bufferSize,int *buffer)\n\n{\n  ushort convertedValue;\n  int allocatedMemory;\n  int tempBufferSize;\n  int *tempBuffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1e)) {\n    tempBufferSize = bufferSize;\n    tempBuffer = buffer;\n    convertedValue = __swhatbuf_r(bufferSize,buffer,&tempBufferSize,&tempBuffer);\n    allocatedMemory = _malloc_r(bufferSize,tempBufferSize);\n    if (allocatedMemory != 0) {\n      *(undefined **)(bufferSize + 0x28) = &LAB_08006c34_1;\n      *buffer = allocatedMemory;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      buffer[4] = allocatedMemory;\n      buffer[5] = tempBufferSize;\n      if ((tempBuffer != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(bufferSize,(int)*(short *)((int)buffer + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = convertedValue | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n  }\n  *buffer = (int)buffer + 0x47;\n  buffer[4] = (int)buffer + 0x47;\n  buffer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "convert_buffer_format_08006e10",
                "param_1": "bufferSize",
                "param_2": "buffer",
                "uVar1": "convertedValue",
                "iVar2": "allocatedMemory",
                "local_18": "tempBufferSize",
                "local_14": "tempBuffer"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_08006e90",
            "code": "\nchar * find_character_08006e90(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "process_signal_08006f00",
            "code": "\nint processSignal_08006f00(uint signalNumber)\n\n{\n  int *signalHandlerPtr;\n  undefined4 processId;\n  int handlerAddress;\n  code *handlerFunction;\n  undefined4 unused_r4;\n  undefined4 unused_r5;\n  undefined4 unused_lr;\n  undefined4 *signalTablePtr;\n  \n  signalHandlerPtr = DAT_200000f8;\n  signalTablePtr = &DAT_200000f8;\n  if (0x1f < signalNumber) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  handlerAddress = DAT_200000f8[0x11];\n  if ((handlerAddress != 0) && (handlerFunction = *(code **)(handlerAddress + signalNumber * 4), handlerFunction != (code *)0x0)) {\n    if (handlerFunction != (code *)0x1) {\n      if (handlerFunction == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(handlerAddress + signalNumber * 4) = 0;\n      (*handlerFunction)(signalNumber);\n    }\n    return 0;\n  }\n  processId = _getpid_r(DAT_200000f8);\n  DAT_200006a4 = 0;\n  handlerAddress = _kill(processId,signalNumber,signalNumber,0,signalTablePtr,unused_r4,unused_r5,unused_lr);\n  if ((handlerAddress == -1) && (DAT_200006a4 != 0)) {\n    *signalHandlerPtr = DAT_200006a4;\n  }\n  return handlerAddress;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "process_signal_08006f00",
                "param_1": "signalNumber",
                "piVar1": "signalHandlerPtr",
                "uVar2": "processId",
                "iVar3": "handlerAddress",
                "pcVar4": "handlerFunction",
                "unaff_r4": "unused_r4",
                "unaff_r5": "unused_r5",
                "in_lr": "unused_lr",
                "puVar5": "signalTablePtr"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f34": {
            "entrypoint": "0x08006f34",
            "current_name": "FUN_08006f34",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_variable_08006f38",
            "code": "\nvoid updateVariable_08006f38(undefined4 parameter1,int parameter2)\n\n{\n  int returnValue;\n  uint updatedValue;\n  bool isSuccessful;\n  \n  returnValue = _read_r(parameter1,(int)*(short *)(parameter2 + 0xe));\n  isSuccessful = -1 < returnValue;\n  if (isSuccessful) {\n    updatedValue = *(int *)(parameter2 + 0x54) + returnValue;\n  }\n  else {\n    updatedValue = *(ushort *)(parameter2 + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(parameter2 + 0x54) = updatedValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(parameter2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_variable_08006f38",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "iVar1": "returnValue",
                "uVar2": "updatedValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "write_file_08006f5a",
            "code": "\nvoid writeFile_08006f5a(int *fileDescriptor,int bufferPtr,undefined4 dataPtr,undefined4 dataSize)\n\n{\n  int writeResult;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(bufferPtr + 0xc) << 0x17) < 0) {\n    seekFile(fileDescriptor,(int)*(short *)(bufferPtr + 0xe),0,2);\n  }\n  *(ushort *)(bufferPtr + 0xc) = *(ushort *)(bufferPtr + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  writeResult = writeData((int)*(short *)(bufferPtr + 0xe),dataPtr,dataSize,dataSize,dataSize,unused1,unused2,\n                 unused3);\n  if ((writeResult == -1) && (DAT_200006a4 != 0)) {\n    *fileDescriptor = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "write_file_08006f5a",
                "param_1": "fileDescriptor",
                "param_2": "bufferPtr",
                "param_3": "dataPtr",
                "param_4": "dataSize",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3",
                "_lseek_r": "seekFile",
                "_write": "writeData",
                "iVar1": "writeResult"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "file_seek_and_update_flag_08006f92",
            "code": "\nvoid file_seek_and_update_flag_08006f92(undefined4 file_descriptor,int file_info)\n\n{\n  int seek_result;\n  ushort updated_flag;\n  bool seek_failed;\n  \n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(file_info + 0xe));\n  seek_failed = seek_result == -1;\n  if (seek_failed) {\n    updated_flag = *(ushort *)(file_info + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(file_info + 0x54) = seek_result;\n    updated_flag = *(ushort *)(file_info + 0xc) | 0x1000;\n  }\n  if (seek_failed) {\n    *(ushort *)(file_info + 0xc) = updated_flag;\n  }\n  if (!seek_failed) {\n    *(ushort *)(file_info + 0xc) = updated_flag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "file_seek_and_update_flag_08006f92",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "iVar1": "seek_result",
                "uVar2": "updated_flag",
                "bVar3": "seek_failed"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "get_file_size_08007004",
            "code": "\nvoid getFileSize_08007004(int *fileSize,undefined4 fileDescriptor,undefined4 statStructure,undefined4 statBufferSize)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = _fstat(fileDescriptor,statStructure,statStructure,0,statBufferSize);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *fileSize = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "get_file_size_08007004",
                "param_1": "fileSize",
                "param_2": "fileDescriptor",
                "param_3": "statStructure",
                "param_4": "statBufferSize",
                "iVar1": "result"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "check_terminal_status_08007028",
            "code": "\nvoid checkTerminalStatus_08007028(int *output,undefined4 fileDescriptor)\n\n{\n  int terminalStatus;\n  \n  DAT_200006a4 = 0;\n  terminalStatus = _isatty(fileDescriptor);\n  if ((terminalStatus == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "check_terminal_status_08007028",
                "param_1": "output",
                "param_2": "fileDescriptor",
                "iVar1": "terminalStatus"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "set_file_pointer_to_08007048",
            "code": "\nvoid setFilePointerTo_08007048(int *fileSize,undefined4 fileDescriptor,undefined4 distanceToMove,undefined4 moveMethod)\n\n{\n  int seekResult;\n  \n  DAT_200006a4 = 0;\n  seekResult = _lseek(fileDescriptor,distanceToMove,moveMethod,moveMethod,moveMethod);\n  if ((seekResult == -1) && (DAT_200006a4 != 0)) {\n    *fileSize = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "set_file_pointer_to_08007048",
                "param_1": "fileSize",
                "param_2": "fileDescriptor",
                "param_3": "distanceToMove",
                "param_4": "moveMethod",
                "iVar1": "seekResult"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "read_and_check_error_0800706c",
            "code": "\nvoid read_and_check_error_0800706c(int *result,undefined4 file_descriptor,undefined4 buffer,undefined4 size)\n\n{\n  int read_result;\n  \n  DAT_200006a4 = 0;\n  read_result = _read(file_descriptor,buffer,size,size,size);\n  if ((read_result == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "read_and_check_error_0800706c",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "read_result"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "initialize_data_08007090",
            "code": "\nvoid initializeData_08007090(void)\n\n{\n  code *jumpTableFunction;\n  \n  jumpTableFunction = initializeData_08007090;\n  abort();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunction)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "initialize_data_08007090",
                "UNRECOVERED_JUMPTABLE": "jumpTableFunction"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 177100,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_080009a8",
            "FUN_080009b8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08000aec",
            "FUN_08000b08",
            "FUN_08001294",
            "FUN_080012a2",
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_08001310",
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_080013a4",
            "FUN_08001550",
            "FUN_0800157c",
            "FUN_080015b2",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_08001814",
            "FUN_08001918",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_08001a44",
            "FUN_08001a66",
            "FUN_08001b48",
            "FUN_08001be8",
            "FUN_08001c32",
            "FUN_08001c3c",
            "FUN_08001c88",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001cd0",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08001f84",
            "FUN_08002004",
            "FUN_080020f0",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002384",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_0800282c",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800316c",
            "FUN_080032b4",
            "FUN_080033b8",
            "FUN_08003520",
            "FUN_0800365c",
            "FUN_08003688",
            "FUN_08003a68",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003c44",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003da4",
            "FUN_08003ea0",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004092",
            "FUN_080040b0",
            "FUN_08004110",
            "FUN_0800412c",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_08004204",
            "FUN_080043b4",
            "FUN_0800441a",
            "FUN_08004478",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_080046b8",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_08004974",
            "FUN_080049f0",
            "FUN_08004a4c",
            "FUN_08004b34",
            "FUN_08004b3c",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c52",
            "FUN_08004c5e",
            "FUN_08004c78",
            "FUN_08004c8a",
            "FUN_08004ca2",
            "FUN_08004cb2",
            "FUN_08004cce",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e20",
            "FUN_08004e70",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_08004f4c",
            "FUN_08005384",
            "FUN_080053d4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005568",
            "FUN_080055bc",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_08005730",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_08005754",
            "FUN_080057b4",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_0800591e",
            "FUN_0800598a",
            "FUN_08005a44",
            "FUN_08005a68",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005b54",
            "FUN_08005bb0",
            "FUN_08005c1c",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005ce8",
            "FUN_08005d8a",
            "FUN_08005f2c",
            "FUN_08005f6c",
            "FUN_08005f8c",
            "FUN_08005fc8",
            "FUN_080060e4",
            "FUN_08006112",
            "FUN_0800611c",
            "FUN_08006158",
            "FUN_08006174",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_08006288",
            "FUN_08006344",
            "FUN_08006370",
            "FUN_08006394",
            "FUN_080065c0",
            "FUN_080066b0",
            "FUN_080068f0",
            "FUN_08006920",
            "FUN_080069e4",
            "FUN_08006ac0",
            "FUN_08006be0",
            "FUN_08006c40",
            "FUN_08006c88",
            "FUN_08006cb4",
            "FUN_08006d14",
            "FUN_08006dc8",
            "FUN_08006e10",
            "FUN_08006e90",
            "FUN_08006f00",
            "FUN_08006f38",
            "FUN_08006f5a",
            "FUN_08006f92",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_08000bcc",
            "FUN_080014ba",
            "FUN_080018f8",
            "FUN_08001ab0",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08001510",
            "FUN_08001b18",
            "FUN_08005d82"
        ],
        [
            "FUN_08000cd0",
            "FUN_08005da8"
        ],
        [
            "FUN_080060d4",
            "FUN_08007090"
        ]
    ],
    "locked_functions": []
}