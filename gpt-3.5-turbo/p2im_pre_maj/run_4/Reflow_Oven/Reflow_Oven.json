{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "calculate_string_length_08000178",
            "code": "\nchar * calculate_string_length_08000178(char *string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_pointer;\n  \n  current_pointer = string;\n  do {\n    next_character = current_pointer + 1;\n    current_character = *current_pointer;\n    current_pointer = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "calculate_string_length_08000178",
                "param_1": "string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_pointer"
            },
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_bitwise_operations_08000190",
            "code": "\nulonglong calculate_bitwise_operations_08000190(uint input_var1,uint input_var2,uint input_var3,uint input_var4)\n\n{\n  int shift_bits1;\n  byte carry_bit;\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  int shift_bits2;\n  uint output_var1;\n  uint output_var2;\n  uint output_var3;\n  uint output_var4;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  \n  temp_var4 = input_var4 ^ 0x80000000;\n  output_var1 = input_var2 << 1;\n  input_var4 = input_var4 << 1;\n  bool_var1 = ((input_var2 ^ temp_var4) & 0x7fffffff) == 0;\n  bool_var2 = bool_var1 && input_var1 == input_var3;\n  if (!bool_var1 || input_var1 != input_var3) {\n    bool_var2 = (output_var1 | input_var1) == 0;\n  }\n  if (!bool_var2) {\n    bool_var2 = (input_var4 | input_var3) == 0;\n  }\n  shift_bits2 = (int)output_var1 >> 0x15;\n  if (!bool_var2) {\n    bool_var2 = shift_bits2 == -1;\n  }\n  shift_bits1 = (int)input_var4 >> 0x15;\n  if (!bool_var2) {\n    bool_var2 = shift_bits1 == -1;\n  }\n  if (bool_var2) {\n    if (shift_bits2 == -1 || shift_bits1 == -1) {\n      output_var1 = temp_var4;\n      output_var3 = input_var3;\n      if (shift_bits2 == -1) {\n        output_var1 = input_var2;\n        output_var3 = input_var1;\n      }\n      if (shift_bits2 != -1 || shift_bits1 != -1) {\n        input_var3 = output_var3;\n        temp_var4 = output_var1;\n      }\n      bool_var2 = (output_var3 | output_var1 << 0xc) == 0;\n      if (bool_var2) {\n        bool_var2 = (input_var3 | temp_var4 << 0xc) == 0;\n      }\n      if (bool_var2) {\n        bool_var2 = output_var1 == temp_var4;\n      }\n      if (!bool_var2) {\n        output_var1 = output_var1 | 0x80000;\n      }\n      return CONCAT44(output_var1,output_var3);\n    }\n    if (((input_var2 ^ temp_var4) & 0x7fffffff) != 0 || input_var1 != input_var3) {\n      if ((output_var1 | input_var1) == 0) {\n        input_var1 = input_var3;\n        input_var2 = temp_var4;\n      }\n      return CONCAT44(input_var2,input_var1);\n    }\n    if (input_var2 != temp_var4) {\n      return 0;\n    }\n    if (output_var1 >> 0x15 == 0) {\n      bool_var2 = (input_var1 & 0x80000000) != 0;\n      temp_var4 = input_var2 * 2 + (uint)bool_var2;\n      if (CARRY4(input_var2,input_var2) || CARRY4(input_var2 * 2,(uint)bool_var2)) {\n        temp_var4 = temp_var4 | 0x80000000;\n      }\n      return CONCAT44(temp_var4,input_var1 << 1);\n    }\n    if (output_var1 < 0xffc00000) {\n      return CONCAT44(input_var2 + 0x100000,input_var1);\n    }\n    input_var2 = input_var2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input_var2 | 0x7ff00000) << 0x20;\n  }\n  output_var1 = output_var1 >> 0x15;\n  input_var4 = input_var4 >> 0x15;\n  output_var3 = input_var4 - output_var1;\n  bool_var2 = output_var3 != 0;\n  if (input_var4 < output_var1) {\n    output_var3 = -output_var3;\n  }\n  output_var2 = input_var1;\n  temp_var5 = input_var2;\n  if (bool_var2 && output_var1 <= input_var4) {\n    output_var1 = output_var1 + output_var3;\n    output_var2 = input_var3;\n    temp_var5 = temp_var4;\n    input_var3 = input_var1;\n    temp_var4 = input_var2;\n  }\n  if (0x36 < output_var3) {\n    return CONCAT44(temp_var5,output_var2);\n  }\n  temp_var2 = temp_var5 & 0xfffff | 0x100000;\n  if ((temp_var5 & 0x80000000) != 0) {\n    bool_var2 = output_var2 != 0;\n    output_var2 = -output_var2;\n    temp_var2 = -temp_var2 - (uint)bool_var2;\n  }\n  temp_var5 = temp_var4 & 0xfffff | 0x100000;\n  if ((temp_var4 & 0x80000000) != 0) {\n    bool_var2 = input_var3 != 0;\n    input_var3 = -input_var3;\n    temp_var5 = -temp_var5 - (uint)bool_var2;\n  }\n  if (output_var1 == output_var3) {\n    temp_var5 = temp_var5 ^ 0x100000;\n    if (output_var1 == 0) {\n      temp_var2 = temp_var2 ^ 0x100000;\n      output_var1 = 1;\n    }\n    else {\n      output_var3 = output_var3 - 1;\n    }\n  }\n  temp_var4 = -output_var3 + 0x20;\n  if ((int)output_var3 < 0x21) {\n    output_var4 = input_var3 << (temp_var4 & 0xff);\n    input_var3 = input_var3 >> (output_var3 & 0xff);\n    temp_var1 = output_var2 + input_var3;\n    temp_var3 = temp_var5 << (temp_var4 & 0xff);\n    temp_var4 = temp_var1 + temp_var3;\n    temp_var2 = temp_var2 + CARRY4(output_var2,input_var3) + ((int)temp_var5 >> (output_var3 & 0xff)) +\n            (uint)CARRY4(temp_var1,temp_var3);\n  }\n  else {\n    output_var4 = temp_var5 << (-output_var3 + 0x40 & 0xff);\n    if (input_var3 != 0) {\n      output_var4 = output_var4 | 2;\n    }\n    temp_var5 = (int)temp_var5 >> (output_var3 - 0x20 & 0xff);\n    temp_var4 = output_var2 + temp_var5;\n    temp_var2 = temp_var2 + ((int)temp_var5 >> 0x1f) + (uint)CARRY4(output_var2,temp_var5);\n  }\n  input_var2 = temp_var2 & 0x80000000;\n  output_var3 = temp_var2;\n  if ((int)temp_var2 < 0) {\n    bool_var2 = output_var4 == 0;\n    output_var4 = -output_var4;\n    output_var3 = -temp_var4;\n    temp_var4 = -(uint)!bool_var2 - temp_var4;\n    output_var3 = -(uint)(bool_var2 <= output_var3) - temp_var2;\n  }\n  if (0xfffff < output_var3) {\n    output_var2 = output_var1 - 1;\n    if (0x1fffff < output_var3) {\n      output_var2 = output_var3 & 1;\n      output_var3 = output_var3 >> 1;\n      carry_bit = (byte)temp_var4;\n      temp_var4 = (uint)(output_var2 != 0) << 0x1f | temp_var4 >> 1;\n      output_var4 = (uint)(carry_bit & 1) << 0x1f | output_var4 >> 1;\n      output_var2 = output_var1;\n      if (0xffbfffff < output_var1 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    bool_var2 = 0x7fffffff < output_var4;\n    if (output_var4 == 0x80000000) {\n      bool_var2 = (temp_var4 & 1) != 0;\n    }\n    return CONCAT44(output_var3 + output_var2 * 0x100000 + (uint)CARRY4(temp_var4,(uint)bool_var2) | input_var2,\n                    temp_var4 + bool_var2);\n  }\n  bool_var1 = (output_var4 & 0x80000000) != 0;\n  output_var4 = output_var4 << 1;\n  output_var2 = temp_var4 * 2;\n  bool_var2 = CARRY4(temp_var4,temp_var4);\n  temp_var4 = temp_var4 * 2 + (uint)bool_var1;\n  output_var3 = output_var3 * 2 + (uint)(bool_var2 || CARRY4(output_var2,(uint)bool_var1));\n  output_var2 = output_var1 - 2;\n  if ((output_var3 & 0x100000) != 0) goto LAB_080002a0;\n  temp_var5 = temp_var4;\n  output_var1 = output_var3;\n  if (output_var3 == 0) {\n    temp_var5 = 0;\n    output_var1 = temp_var4;\n  }\n  shift_bits2 = LZCOUNT(output_var1);\n  if (output_var3 == 0) {\n    shift_bits2 = shift_bits2 + 0x20;\n  }\n  output_var3 = shift_bits2 - 0xb;\n  bool_var3 = SBORROW4(output_var3,0x20);\n  temp_var4 = shift_bits2 - 0x2b;\n  bool_var2 = (int)temp_var4 < 0;\n  bool_var1 = temp_var4 == 0;\n  if ((int)output_var3 < 0x20) {\n    bool_var3 = SCARRY4(temp_var4,0xc);\n    shift_bits2 = shift_bits2 + -0x1f;\n    bool_var2 = shift_bits2 < 0;\n    bool_var1 = shift_bits2 == 0;\n    temp_var4 = output_var3;\n    if (!bool_var1 && bool_var2 == bool_var3) {\n      temp_var5 = output_var1 << (output_var3 & 0xff);\n      output_var1 = output_var1 >> (0xcU - shift_bits2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    output_var4 = 0x20 - temp_var4;\n  }\n  output_var1 = output_var1 << (temp_var4 & 0xff);\n  if (bool_var1 || bool_var2 != bool_var3) {\n    output_var1 = output_var1 | temp_var5 >> (output_var4 & 0xff);\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    temp_var5 = temp_var5 << (temp_var4 & 0xff);\n  }\nLAB_08000318:\n  if ((int)output_var3 <= (int)output_var2) {\n    return CONCAT44(output_var1 + (output_var2 - output_var3) * 0x100000 | input_var2,temp_var5);\n  }\n  temp_var4 = ~(output_var2 - output_var3);\n  if ((int)temp_var4 < 0x1f) {\n    shift_bits2 = temp_var4 - 0x13;\n    if (shift_bits2 != 0 && shift_bits2 < 0 == SCARRY4(temp_var4 - 0x1f,0xc)) {\n      return CONCAT44(temp_var2,temp_var5 >> (0x20 - (0xcU - shift_bits2) & 0xff) | output_var1 << (0xcU - shift_bits2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_var4 = temp_var4 + 1;\n    return CONCAT44(input_var2 | output_var1 >> (temp_var4 & 0xff),\n                    temp_var5 >> (temp_var4 & 0xff) | output_var1 << (0x20 - temp_var4 & 0xff));\n  }\n  return CONCAT44(temp_var2,output_var1 >> (temp_var4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_bitwise_operations_08000190",
                "param_1": "input_var1",
                "param_2": "input_var2",
                "param_3": "input_var3",
                "param_4": "input_var4",
                "iVar1": "shift_bits1",
                "bVar2": "carry_bit",
                "uVar3": "temp_var1",
                "uVar4": "temp_var2",
                "uVar5": "temp_var3",
                "uVar6": "temp_var4",
                "uVar7": "temp_var5",
                "iVar8": "shift_bits2",
                "uVar9": "output_var1",
                "uVar10": "output_var2",
                "uVar11": "output_var3",
                "uVar12": "output_var4",
                "bVar13": "bool_var1",
                "bVar14": "bool_var2",
                "bVar15": "bool_var3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "calculate_double_precision_08000194",
            "code": "\nulonglong calculate_double_precision_08000194(uint operand_1,uint operand_2,uint operand_3,uint operand_4)\n\n{\n  int bit_shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int bit_shift2;\n  uint temp4;\n  uint temp5;\n  uint result1;\n  uint result2;\n  uint carry_result;\n  uint temp6;\n  bool is_negative1;\n  bool is_negative2;\n  bool overflow;\n  \n  temp4 = operand_2 << 1;\n  result1 = operand_4 << 1;\n  is_negative1 = ((operand_2 ^ operand_4) & 0x7fffffff) == 0;\n  is_negative2 = is_negative1 && operand_1 == operand_3;\n  if (!is_negative1 || operand_1 != operand_3) {\n    is_negative2 = (temp4 | operand_1) == 0;\n  }\n  if (!is_negative2) {\n    is_negative2 = (result1 | operand_3) == 0;\n  }\n  bit_shift2 = (int)temp4 >> 0x15;\n  if (!is_negative2) {\n    is_negative2 = bit_shift2 == -1;\n  }\n  bit_shift1 = (int)result1 >> 0x15;\n  if (!is_negative2) {\n    is_negative2 = bit_shift1 == -1;\n  }\n  if (is_negative2) {\n    if (bit_shift2 == -1 || bit_shift1 == -1) {\n      result1 = operand_4;\n      temp4 = operand_3;\n      if (bit_shift2 == -1) {\n        result1 = operand_2;\n        temp4 = operand_1;\n      }\n      if (bit_shift2 != -1 || bit_shift1 != -1) {\n        operand_3 = temp4;\n        operand_4 = result1;\n      }\n      is_negative2 = (temp4 | result1 << 0xc) == 0;\n      if (is_negative2) {\n        is_negative2 = (operand_3 | operand_4 << 0xc) == 0;\n      }\n      if (is_negative2) {\n        is_negative2 = result1 == operand_4;\n      }\n      if (!is_negative2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,temp4);\n    }\n    if (((operand_2 ^ operand_4) & 0x7fffffff) != 0 || operand_1 != operand_3) {\n      if ((temp4 | operand_1) == 0) {\n        operand_1 = operand_3;\n        operand_2 = operand_4;\n      }\n      return CONCAT44(operand_2,operand_1);\n    }\n    if (operand_2 != operand_4) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      is_negative2 = (operand_1 & 0x80000000) != 0;\n      result1 = operand_2 * 2 + (uint)is_negative2;\n      if (CARRY4(operand_2,operand_2) || CARRY4(operand_2 * 2,(uint)is_negative2)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,operand_1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(operand_2 + 0x100000,operand_1);\n    }\n    operand_2 = operand_2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(operand_2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  result1 = result1 >> 0x15;\n  result2 = result1 - temp4;\n  is_negative2 = result2 != 0;\n  if (result1 < temp4) {\n    result2 = -result2;\n  }\n  temp5 = operand_1;\n  temp3 = operand_2;\n  if (is_negative2 && temp4 <= result1) {\n    temp4 = temp4 + result2;\n    temp5 = operand_3;\n    temp3 = operand_4;\n    operand_3 = operand_1;\n    operand_4 = operand_2;\n  }\n  if (0x36 < result2) {\n    return CONCAT44(temp3,temp5);\n  }\n  result1 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_negative2 = temp5 != 0;\n    temp5 = -temp5;\n    result1 = -result1 - (uint)is_negative2;\n  }\n  temp3 = operand_4 & 0xfffff | 0x100000;\n  if ((operand_4 & 0x80000000) != 0) {\n    is_negative2 = operand_3 != 0;\n    operand_3 = -operand_3;\n    temp3 = -temp3 - (uint)is_negative2;\n  }\n  if (temp4 == result2) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      result1 = result1 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      result2 = result2 - 1;\n    }\n  }\n  temp6 = -result2 + 0x20;\n  if ((int)result2 < 0x21) {\n    carry_result = operand_3 << (temp6 & 0xff);\n    operand_3 = operand_3 >> (result2 & 0xff);\n    temp1 = temp5 + operand_3;\n    temp2 = temp3 << (temp6 & 0xff);\n    temp6 = temp1 + temp2;\n    result1 = result1 + CARRY4(temp5,operand_3) + ((int)temp3 >> (result2 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    carry_result = temp3 << (-result2 + 0x40 & 0xff);\n    if (operand_3 != 0) {\n      carry_result = carry_result | 2;\n    }\n    temp3 = (int)temp3 >> (result2 - 0x20 & 0xff);\n    temp6 = temp5 + temp3;\n    result1 = result1 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  operand_2 = result1 & 0x80000000;\n  result2 = result1;\n  if ((int)result1 < 0) {\n    is_negative2 = carry_result == 0;\n    carry_result = -carry_result;\n    result2 = -temp6;\n    temp6 = -(uint)!is_negative2 - temp6;\n    result2 = -(uint)(is_negative2 <= result2) - result1;\n  }\n  if (0xfffff < result2) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < result2) {\n      result1 = result2 & 1;\n      result2 = result2 >> 1;\n      carry = (byte)temp6;\n      temp6 = (uint)(result1 != 0) << 0x1f | temp6 >> 1;\n      carry_result = (uint)(carry & 1) << 0x1f | carry_result >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    is_negative2 = 0x7fffffff < carry_result;\n    if (carry_result == 0x80000000) {\n      is_negative2 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(result2 + temp5 * 0x100000 + (uint)CARRY4(temp6,(uint)is_negative2) | operand_2,\n                    temp6 + is_negative2);\n  }\n  is_negative1 = (carry_result & 0x80000000) != 0;\n  carry_result = carry_result << 1;\n  temp5 = temp6 * 2;\n  is_negative2 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)is_negative1;\n  result2 = result2 * 2 + (uint)(is_negative2 || CARRY4(temp5,(uint)is_negative1));\n  temp5 = temp4 - 2;\n  if ((result2 & 0x100000) != 0) goto LAB_080002a0;\n  temp3 = temp6;\n  temp4 = result2;\n  if (result2 == 0) {\n    temp3 = 0;\n    temp4 = temp6;\n  }\n  bit_shift2 = LZCOUNT(temp4);\n  if (result2 == 0) {\n    bit_shift2 = bit_shift2 + 0x20;\n  }\n  temp6 = bit_shift2 - 0xb;\n  overflow = SBORROW4(temp6,0x20);\n  result2 = bit_shift2 - 0x2b;\n  is_negative2 = (int)result2 < 0;\n  is_negative1 = result2 == 0;\n  if ((int)temp6 < 0x20) {\n    overflow = SCARRY4(result2,0xc);\n    bit_shift2 = bit_shift2 + -0x1f;\n    is_negative2 = bit_shift2 < 0;\n    is_negative1 = bit_shift2 == 0;\n    result2 = temp6;\n    if (!is_negative1 && is_negative2 == overflow) {\n      temp3 = temp4 << (temp6 & 0xff);\n      temp4 = temp4 >> (0xcU - bit_shift2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_negative1 || is_negative2 != overflow) {\n    carry_result = 0x20 - result2;\n  }\n  temp4 = temp4 << (result2 & 0xff);\n  if (is_negative1 || is_negative2 != overflow) {\n    temp4 = temp4 | temp3 >> (carry_result & 0xff);\n  }\n  if (is_negative1 || is_negative2 != overflow) {\n    temp3 = temp3 << (result2 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp6 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - temp6) * 0x100000 | operand_2,temp3);\n  }\n  result2 = ~(temp5 - temp6);\n  if ((int)result2 < 0x1f) {\n    bit_shift2 = result2 - 0x13;\n    if (bit_shift2 != 0 && bit_shift2 < 0 == SCARRY4(result2 - 0x1f,0xc)) {\n      return CONCAT44(result1,temp3 >> (0x20 - (0xcU - bit_shift2) & 0xff) | temp4 << (0xcU - bit_shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(operand_2 | temp4 >> (result2 & 0xff),\n                    temp3 >> (result2 & 0xff) | temp4 << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(result1,temp4 >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "calculate_double_precision_08000194",
                "param_1": "operand_1",
                "param_2": "operand_2",
                "param_3": "operand_3",
                "param_4": "operand_4",
                "iVar1": "bit_shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "bit_shift2",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "carry_result",
                "uVar12": "temp6",
                "bVar13": "is_negative1",
                "bVar14": "is_negative2",
                "bVar15": "overflow"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "calculate_result_0800040c",
            "code": "\nulonglong calculateResult_0800040c(uint input)\n\n{\n  uint result;\n  uint shiftAmount;\n  int bitCount;\n  uint adjustedBitCount;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isBorrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  bitCount = LZCOUNT(input);\n  adjustedBitCount = bitCount + 0x15;\n  isBorrow = SBORROW4(adjustedBitCount,0x20);\n  shiftAmount = bitCount - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (adjustedBitCount < 0x20) {\n    isBorrow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = bitCount + 1 == 0;\n    shiftAmount = adjustedBitCount;\n    if (!isZero && isBorrow == false) {\n      result = input << adjustedBitCount;\n      input = input >> (0xcU - (bitCount + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZero || isNegative != isBorrow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  input = input << (shiftAmount & 0xff);\n  if (isZero || isNegative != isBorrow) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isBorrow) {\n    result = 0 << (shiftAmount & 0xff);\n  }\nLAB_08000318:\n  if (adjustedBitCount < 0x433) {\n    return CONCAT44(input + (0x432 - adjustedBitCount) * 0x100000,result);\n  }\n  shiftAmount = ~(0x432 - adjustedBitCount);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(input >> (shiftAmount - 0x1f & 0xff));\n  }\n  bitCount = shiftAmount - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(input >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | input << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - bitCount) & 0xff) | input << (0xcU - bitCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "calculate_result_0800040c",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "iVar3": "bitCount",
                "uVar4": "adjustedBitCount",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isBorrow"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "bitwise_shift_0800042c",
            "code": "\nulonglong bitwiseShift_0800042c(uint input)\n\n{\n  uint shiftedBits;\n  uint absInput;\n  uint shiftAmount;\n  int numberOfLeadingZeros;\n  uint adjustedShiftAmount;\n  uint sign;\n  uint maxShiftAmount;\n  bool needsAdditionalShift;\n  bool isZeroShift;\n  bool isNegativeShift;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign = input & 0x80000000;\n  absInput = input;\n  if ((int)sign < 0) {\n    absInput = -input;\n  }\n  shiftedBits = 0;\n  numberOfLeadingZeros = LZCOUNT(absInput);\n  adjustedShiftAmount = numberOfLeadingZeros + 0x15;\n  isNegativeShift = SBORROW4(adjustedShiftAmount,0x20);\n  shiftAmount = numberOfLeadingZeros - 0xb;\n  needsAdditionalShift = (int)shiftAmount < 0;\n  isZeroShift = shiftAmount == 0;\n  if (adjustedShiftAmount < 0x20) {\n    isNegativeShift = SCARRY4(shiftAmount,0xc);\n    needsAdditionalShift = false;\n    isZeroShift = numberOfLeadingZeros + 1 == 0;\n    shiftAmount = adjustedShiftAmount;\n    if (!isZeroShift && isNegativeShift == false) {\n      shiftedBits = absInput << adjustedShiftAmount;\n      absInput = absInput >> (0xcU - (numberOfLeadingZeros + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZeroShift || needsAdditionalShift != isNegativeShift) {\n    maxShiftAmount = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZeroShift || needsAdditionalShift != isNegativeShift) {\n    absInput = absInput | 0U >> (maxShiftAmount & 0xff);\n  }\n  if (isZeroShift || needsAdditionalShift != isNegativeShift) {\n    shiftedBits = 0 << (shiftAmount & 0xff);\n  }\nLAB_08000318:\n  if (adjustedShiftAmount < 0x433) {\n    return CONCAT44(absInput + (0x432 - adjustedShiftAmount) * 0x100000 | sign,shiftedBits);\n  }\n  shiftAmount = ~(0x432 - adjustedShiftAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  numberOfLeadingZeros = shiftAmount - 0x13;\n  if (numberOfLeadingZeros == 0 || numberOfLeadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(sign | absInput >> (shiftAmount & 0xff),\n                    shiftedBits >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,shiftedBits >> (0x20 - (0xcU - numberOfLeadingZeros) & 0xff) | absInput << (0xcU - numberOfLeadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "bitwise_shift_0800042c",
                "param_1": "input",
                "uVar1": "shiftedBits",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "numberOfLeadingZeros",
                "uVar5": "adjustedShiftAmount",
                "uVar6": "sign",
                "in_r12": "maxShiftAmount",
                "bVar7": "needsAdditionalShift",
                "bVar8": "isZeroShift",
                "bVar9": "isNegativeShift"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_xor_and_multiply_080004f8",
            "code": "\nulonglong calculate_xor_and_multiply_080004f8(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  ulonglong result_temp_1;\n  longlong result_temp_2;\n  uint temp_1;\n  uint temp_2;\n  int temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong concat_param12_result;\n  \n  concat_param12_result = CONCAT44(input_param_2,input_param_1);\n  temp_6 = 0x7ff;\n  temp_2 = input_param_2 >> 0x14 & 0x7ff;\n  flag_1 = temp_2 == 0;\n  if (!flag_1) {\n    temp_5 = input_param_4 >> 0x14 & 0x7ff;\n    flag_1 = temp_5 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_2 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_5 == 0x7ff;\n  }\n  if (flag_1) {\n    concat_param12_result = calculate_bitwise_xor_080006d4();\n  }\n  temp_1 = (uint)(concat_param12_result >> 0x20);\n  temp_3 = temp_2 + temp_5;\n  temp_2 = temp_1 ^ input_param_4;\n  temp_1 = temp_1 & ~(temp_6 << 0x15);\n  input_param_4 = input_param_4 & ~(temp_6 << 0x15);\n  flag_1 = ((uint)concat_param12_result | temp_1 << 0xc) == 0;\n  if (!flag_1) {\n    flag_1 = (input_param_3 | input_param_4 << 0xc) == 0;\n  }\n  temp_1 = temp_1 | 0x100000;\n  input_param_4 = input_param_4 | 0x100000;\n  if (flag_1) {\n    input_param_3 = (uint)concat_param12_result | input_param_3;\n    input_param_4 = (temp_2 & 0x80000000 | temp_1) ^ input_param_4;\n    temp_2 = temp_6 >> 1;\n    flag_3 = SBORROW4(temp_3,temp_2);\n    temp_4 = temp_3 - temp_2;\n    flag_1 = temp_4 == 0;\n    temp_1 = temp_4;\n    if (!flag_1 && (int)temp_2 <= temp_3) {\n      flag_3 = SBORROW4(temp_6,temp_4);\n      temp_1 = temp_6 - temp_4;\n      flag_1 = temp_6 == temp_4;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      input_param_4 = input_param_4 | temp_4 * 0x100000;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      return CONCAT44(input_param_4,input_param_3);\n    }\n    input_param_4 = input_param_4 | 0x100000;\n    temp_6 = 0;\n    flag_3 = SBORROW4(temp_4,1);\n    temp_4 = temp_4 - 1;\n    flag_1 = temp_4 == 0;\n    temp_2 = temp_4;\n  }\n  else {\n    result_temp_1 = (concat_param12_result & 0xffffffff) * (ulonglong)input_param_3;\n    concat_param12_result = (concat_param12_result & 0xffffffff) * (ulonglong)input_param_4 +\n             (ulonglong)temp_1 * (ulonglong)input_param_3 + (result_temp_1 >> 0x20);\n    temp_7 = (uint)concat_param12_result;\n    result_temp_2 = (ulonglong)temp_1 * (ulonglong)input_param_4 + (concat_param12_result >> 0x20);\n    temp_6 = (uint)result_temp_2;\n    temp_1 = (uint)((ulonglong)result_temp_2 >> 0x20);\n    if ((int)result_temp_1 != 0) {\n      temp_7 = temp_7 | 1;\n    }\n    temp_4 = (temp_3 + -0x3ff) - (uint)(temp_1 < 0x200);\n    if (temp_1 < 0x200) {\n      flag_1 = (temp_7 & 0x80000000) != 0;\n      temp_7 = temp_7 << 1;\n      result_temp_2 = CONCAT44(temp_1 * 2 + (uint)(CARRY4(temp_6,temp_6) || CARRY4(temp_6 * 2,(uint)flag_1)),\n                       temp_6 * 2 + (uint)flag_1);\n    }\n    input_param_4 = temp_2 & 0x80000000 | (int)((ulonglong)result_temp_2 >> 0x20) << 0xb | (uint)result_temp_2 >> 0x15;\n    input_param_3 = (uint)result_temp_2 << 0xb | temp_7 >> 0x15;\n    temp_6 = temp_7 * 0x800;\n    flag_2 = 0xfc < temp_4;\n    flag_3 = SBORROW4(temp_4,0xfd);\n    temp_1 = temp_4 - 0xfd;\n    flag_1 = temp_1 == 0;\n    temp_2 = temp_1;\n    if (flag_2 && !flag_1) {\n      flag_2 = 0x6ff < temp_1;\n      flag_3 = SBORROW4(temp_1,0x700);\n      temp_2 = temp_4 - 0x7fd;\n      flag_1 = temp_1 == 0x700;\n    }\n    if (!flag_2 || flag_1) {\n      flag_1 = 0x7fffffff < temp_6;\n      if (temp_6 == 0x80000000) {\n        flag_1 = (temp_7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param_4 + temp_4 * 0x100000 + (uint)CARRY4(input_param_3,(uint)flag_1),input_param_3 + flag_1\n                     );\n    }\n  }\n  if (!flag_1 && (int)temp_2 < 0 == flag_3) {\n    return (ulonglong)(input_param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_2 = SCARRY4(temp_4,0x36);\n  flag_1 = (int)(temp_4 + 0x36) < 0;\n  flag_3 = temp_4 == 0xffffffca;\n  if (flag_3 || flag_1 != flag_2) {\n    input_param_3 = 0;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    input_param_4 = input_param_4 & 0x80000000;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    return CONCAT44(input_param_4,input_param_3);\n  }\n  temp_2 = -temp_4;\n  temp_1 = temp_2 - 0x20;\n  if (0x1f < (int)temp_2) {\n    temp_4 = input_param_3 >> (temp_1 & 0xff) | input_param_4 << (0x20 - temp_1 & 0xff);\n    temp_2 = (input_param_4 >> (temp_1 & 0xff) & ~((input_param_4 & 0x80000000) >> (temp_1 & 0xff))) -\n            ((int)temp_4 >> 0x1f);\n    if ((temp_6 | input_param_3 << (0x20 - temp_1 & 0xff) | temp_4 << 1) == 0) {\n      temp_2 = temp_2 & ~(temp_4 >> 0x1f);\n    }\n    return CONCAT44(input_param_4,temp_2) & 0x80000000ffffffff;\n  }\n  temp_3 = temp_2 - 0x14;\n  if (temp_3 == 0 || temp_3 < 0 != SCARRY4(temp_1,0xc)) {\n    temp_7 = input_param_3 << (temp_4 + 0x20 & 0xff);\n    temp_1 = input_param_3 >> (temp_2 & 0xff) | input_param_4 << (temp_4 + 0x20 & 0xff);\n    temp_4 = temp_1 + -((int)temp_7 >> 0x1f);\n    if ((temp_6 | temp_7 << 1) == 0) {\n      temp_4 = temp_4 & ~(temp_7 >> 0x1f);\n    }\n    return CONCAT44((input_param_4 & 0x80000000) +\n                    ((input_param_4 & 0x7fffffff) >> (temp_2 & 0xff)) +\n                    (uint)CARRY4(temp_1,-((int)temp_7 >> 0x1f)),temp_4);\n  }\n  temp_2 = 0xc - temp_3;\n  temp_4 = input_param_3 << (temp_2 & 0xff);\n  temp_2 = input_param_3 >> (0x20 - temp_2 & 0xff) | input_param_4 << (temp_2 & 0xff);\n  temp_1 = temp_2 + -((int)temp_4 >> 0x1f);\n  if ((temp_6 | temp_4 << 1) == 0) {\n    temp_1 = temp_1 & ~(temp_4 >> 0x1f);\n  }\n  return CONCAT44((input_param_4 & 0x80000000) + (uint)CARRY4(temp_2,-((int)temp_4 >> 0x1f)),temp_1);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_xor_and_multiply_080004f8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result_temp_1",
                "lVar2": "result_temp_2",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "iVar5": "temp_3",
                "uVar6": "temp_4",
                "unaff_r5": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "temp_7",
                "bVar9": "flag_1",
                "bVar10": "flag_2",
                "bVar11": "flag_3",
                "uVar12": "concat_param12_result"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "calculate_bitwise_xor_080006d4",
            "code": "\nulonglong calculate_bitwise_xor_080006d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint msb_input_1;\n  uint mask_1;\n  uint msb_masked;\n  uint result;\n  uint mask_2;\n  bool is_zero;\n  \n  msb_masked = mask_2 & input_4 >> 0x14;\n  if (mask_1 != mask_2 && msb_masked != mask_2) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (mask_1 == 0) {\n      result = input_2 & 0x80000000;\n      do {\n        msb_input_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(msb_input_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | result;\n      if (msb_masked != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      msb_masked = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(msb_masked != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  result = input_2;\n  if (((!is_zero) && ((mask_1 != mask_2 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((msb_masked != mask_2 || (input_1 = input_3, result = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(result,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "calculate_bitwise_xor_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "msb_input_1",
                "unaff_r4": "mask_1",
                "uVar2": "msb_masked",
                "uVar3": "result",
                "in_r12": "mask_2",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_modified_floating_point_number_0800074c",
            "code": "\nulonglong calculate_modified_floating_point_number_0800074c(undefined4 input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint unaff_r5;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(input_param2,input_param1);\n  temp13 = 0x7ff;\n  temp7 = input_param2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    unaff_r5 = input_param4 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_params = calculate_floating_point_number_080008ba();\n  }\n  temp9 = (uint)((ulonglong)combined_params >> 0x20);\n  temp11 = (uint)combined_params;\n  temp8 = temp7 - unaff_r5;\n  if ((input_param3 | input_param4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input_param4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp13 >> 1);\n    temp9 = temp8 + (temp13 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp13,temp9);\n      flag1 = (int)(temp13 - temp9) < 0;\n      flag2 = temp13 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp11);\n    }\n    temp7 = temp7 | 0x100000;\n    temp13 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input_param4 << 0xc) >> 4 | 0x10000000 | input_param3 >> 0x18;\n    temp13 = input_param3 << 8;\n    temp10 = (temp9 << 0xc) >> 4 | 0x10000000 | temp11 >> 0x18;\n    temp11 = temp11 * 0x100;\n    temp7 = (temp9 ^ input_param4) & 0x80000000;\n    flag1 = temp3 <= temp10;\n    if (temp10 == temp3) {\n      flag1 = temp13 <= temp11;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp13 = (uint)((input_param3 >> 0x18 & 1) != 0) << 0x1f | temp13 >> 1;\n    }\n    temp12 = temp11 - temp13;\n    temp10 = (temp10 - temp3) - (uint)(temp11 < temp13);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp13 >> 1;\n    temp11 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp12;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)flag1) {\n        temp12 = temp12 - temp1;\n        temp11 = temp11 | temp3;\n        temp10 = (temp10 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp10 - temp5 < (uint)flag2;\n      temp13 = temp10;\n      if (temp5 < temp10 || flag1) {\n        temp12 = temp12 - temp1;\n        temp13 = (temp10 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp10 || flag1) {\n        temp11 = temp11 | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp12;\n      flag1 = temp13 - temp10 < (uint)flag2;\n      temp5 = temp13;\n      if (temp10 < temp13 || flag1) {\n        temp12 = temp12 - temp2;\n        temp5 = (temp13 - temp10) - (uint)!flag2;\n      }\n      if (temp10 < temp13 || flag1) {\n        temp11 = temp11 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp10 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 - temp1;\n        temp10 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp11 = temp11 | temp3 >> 3;\n      }\n      temp13 = temp10 | temp12;\n      if (temp13 == 0) break;\n      temp10 = temp10 << 4 | temp12 >> 0x1c;\n      temp12 = temp12 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | temp11;\n        temp11 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp11;\n      temp11 = 0;\n    }\nLAB_0800086a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp10;\n      if (temp10 == temp6) {\n        flag1 = temp1 <= temp12;\n      }\n      if (temp10 == temp6 && temp12 == temp1) {\n        flag1 = (temp11 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp11,(uint)flag1),temp11 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp11 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp11);\n  }\n  temp3 = -temp9;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp11 >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    temp9 = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp13 | temp11 << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp10,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp11 << (temp9 & 0xff);\n    temp11 = temp11 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp11 + -((int)temp3 >> 0x1f);\n    if ((temp13 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp11,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp10 = temp11 << (temp9 + 0x20 & 0xff);\n  temp11 = temp11 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp11 + -((int)temp10 >> 0x1f);\n  if ((temp13 | temp10 << 1) == 0) {\n    temp9 = temp9 & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp11,-((int)temp10 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_modified_floating_point_number_0800074c",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar13": "temp13",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "combined_params"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "calculate_floating_point_number_080008ba",
            "code": "\nulonglong calculateFloatingPointNumber_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint constantValue;\n  uint maskedValue;\n  uint result;\n  uint constantMask;\n  bool isZero;\n  \n  maskedValue = constantMask & input4 >> 0x14;\n  result = input2;\n  if (constantValue != constantMask || maskedValue != constantMask) {\n    if (constantValue == constantMask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, result = input4, maskedValue != constantMask)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (maskedValue == constantMask) {\n      input1 = input3;\n      result = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (constantValue == 0) {\n          result = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | result;\n          if (maskedValue != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          result = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(result != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(result,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "calculate_floating_point_number_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "constantValue",
                "uVar2": "maskedValue",
                "uVar3": "result",
                "in_r12": "constantMask",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800074c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "compare_values_0800092c",
            "code": "\nuint compare_values_0800092c(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "compare_values_0800092c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_080009b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "compare_and_return_wrapper_080009a8",
            "code": "\nvoid compare_and_return_wrapper_080009a8(undefined4 wrapper_param_1,undefined4 wrapper_param_2,undefined4 wrapper_param_3,undefined4 wrapper_param_4)\n\n{\n  compare_and_return_080009b8(wrapper_param_3,wrapper_param_4,wrapper_param_1,wrapper_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "compare_and_return_wrapper_080009a8",
                "param_1": "wrapper_param_1",
                "param_2": "wrapper_param_2",
                "param_3": "wrapper_param_3",
                "param_4": "wrapper_param_4"
            },
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "compare_and_return_080009b8",
            "code": "\nundefined4 compare_and_return_080009b8(undefined4 input_value)\n\n{\n  compare_values_0800092c();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "compare_and_return_080009b8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080009dc",
                "FUN_080009c8",
                "FUN_080009a8",
                "FUN_080009f0"
            ],
            "called": [
                "FUN_0800092c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "is_comparison_true_080009c8",
            "code": "\nbool is_comparison_true_080009c8(void)\n\n{\n  char comparison_result;\n  \n  compare_and_return_080009b8();\n  return comparison_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "is_comparison_true_080009c8",
                "in_ZR": "comparison_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "is_null_terminator_080009dc",
            "code": "\nbool is_null_terminator_080009dc(void)\n\n{\n  char input_character;\n  \n  compare_and_return_080009b8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "is_null_terminator_080009dc",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_and_return_080009f0",
            "code": "\nbool check_and_return_080009f0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  compare_and_return_080009b8();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_and_return_080009f0",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_if_flags_are_zero_08000a04",
            "code": "\nbool checkIfFlagsAreZero_08000a04(void)\n\n{\n  undefined isZeroFlagSet;\n  undefined isCarryFlagSet;\n  \n  compare_and_return_wrapper_080009a8();\n  return !(bool)isCarryFlagSet || (bool)isZeroFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_if_flags_are_zero_08000a04",
                "in_ZR": "isZeroFlagSet",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "check_if_cy_is_null_08000a18",
            "code": "\nbool check_if_cy_is_null_08000a18(void)\n\n{\n  char input_character;\n  \n  compare_and_return_wrapper_080009a8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "check_if_cy_is_null_08000a18",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "check_conditions_08000a2c",
            "code": "\nundefined4 check_conditions_08000a2c(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "check_conditions_08000a2c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "calculate_value_08000a58",
            "code": "\nuint calculateValue_08000a58(uint input1,uint maskedInput)\n\n{\n  uint finalValue;\n  int adjustedInput;\n  uint result;\n  \n  adjustedInput = maskedInput * 2 + 0x200000;\n  if (maskedInput * 2 < 0xffe00000) {\n    if (-1 < adjustedInput) {\n      return 0;\n    }\n    finalValue = adjustedInput >> 0x15;\n    result = -finalValue - 0x3e1;\n    if (finalValue < 0xfffffc20 && result != 0) {\n      finalValue = (maskedInput << 0xb | 0x80000000 | input1 >> 0x15) >> (result & 0xff);\n      if ((maskedInput & 0x80000000) != 0) {\n        finalValue = -finalValue;\n      }\n      return finalValue;\n    }\n  }\n  else if ((input1 | maskedInput << 0xc) != 0) {\n    return 0;\n  }\n  maskedInput = maskedInput & 0x80000000;\n  if (maskedInput == 0) {\n    maskedInput = 0x7fffffff;\n  }\n  return maskedInput;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "calculate_value_08000a58",
                "param_1": "input1",
                "param_2": "maskedInput",
                "uVar1": "finalValue",
                "iVar2": "adjustedInput",
                "uVar3": "result"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "validate_params_08000aa8",
            "code": "\nuint validate_params_08000aa8(uint input1,uint input2)\n\n{\n  int temp1;\n  uint temp2;\n  \n  if ((input2 & 0x80000000) != 0) {\n    return 0;\n  }\n  temp1 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < temp1) {\n      return 0;\n    }\n    temp2 = -(temp1 >> 0x15) - 0x3e1;\n    if (-1 < (int)temp2) {\n      return (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (temp2 & 0xff);\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "validate_params_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "temp1",
                "uVar2": "temp2"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_software_interrupt_08000ae8",
            "code": "\nvoid executeSoftwareInterrupt_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_software_interrupt_08000ae8"
            },
            "calling": [
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_interrupt_handler_08000aec",
            "code": "\nundefined4 execute_interrupt_handler_08000aec(undefined4 input_param,undefined4 unused_param,undefined4 unused_param2,undefined4 interrupt_type)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = execute_software_interrupt_08000ae8(1,input_param,0,0,interrupt_type);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_interrupt_handler_08000aec",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param2",
                "param_4": "interrupt_type",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000ae8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_and_process_parameters_08000b08",
            "code": "\nvoid initialize_and_process_parameters_08000b08(int flag,int value)\n\n{\n  if ((flag == 1) && (value == 0xffff)) {\n    initialize_data_and_return(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initialize_parameters(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    process_and_extract_parameters(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_and_process_parameters_08000b08",
                "param_1": "flag",
                "param_2": "value",
                "initialize_and_return_08001b18": "initialize_data_and_return",
                "initialize_parameters_08001510": "initialize_parameters",
                "process_and_extract_parameters_0800157c": "process_and_extract_parameters"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_and_execute_oven_controller_08000bcc",
            "code": "\nvoid initialize_and_execute_oven_controller_08000bcc(void)\n\n{\n  set_parameter_value(DAT_20000064,0);\n  process_oven_data(DAT_20000064,1);\n  set_parameter_value(DAT_20000004,0);\n  process_oven_data(DAT_20000004,1);\n  set_parameter_value(DAT_20000060,0);\n  process_oven_data(DAT_20000060,1);\n  set_parameter_value(DAT_20000004,1);\n  process_data(&DAT_20000194,8,2,0);\n  set_data_parameters(&DAT_20000194,0,&DAT_20000008);\n  set_parameters(&DAT_20000194);\n  calculate_and_execute(&DAT_20000194,\"Reflow\");\n  set_parameters_08001366(&DAT_20000194,0,1);\n  calculate_and_execute(&DAT_20000194,\"Oven 1.2\");\n  set_parameter_value(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  set_parameters(&DAT_20000194);\n  configure_serial(&DAT_2000036c,0xe100,6);\n  set_parameter_value(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = initialize();\n  DAT_200001b4 = initialize();\n  execute_interrupt_handler(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_and_execute_oven_controller_08000bcc",
                "extract_and_set_param_value_08005848": "set_parameter_value",
                "process_data_080057b4": "process_oven_data",
                "process_data_080013a4": "process_data",
                "extract_and_set_parameters_08001550": "set_data_parameters",
                "set_parameters_0800135a": "set_parameters",
                "calculate_and_execute_08005c96": "calculate_and_execute",
                "configure_serial_08005a68": "configure_serial",
                "initialize_080058e0": "initialize",
                "execute_interrupt_handler_08000aec": "execute_interrupt_handler"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "process_data_08000cd0",
            "code": "\nvoid processData_08000cd0(void)\n\n{\n  uint initialValue;\n  undefined4 value1;\n  int returnValue;\n  undefined4 value2;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 calculatedValue;\n  \n  initialValue = initialize_080058e0();\n  if (DAT_200001b4 < initialValue) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    calculatedValue = calculate_result_080015f8(&DAT_2000024c,0);\n    value2 = (undefined4)((ulonglong)calculatedValue >> 0x20);\n    value1 = (undefined4)calculatedValue;\n    DAT_20000188 = value1;\n    DAT_2000018c = value2;\n    returnValue = is_comparison_true_080009c8(value1,value2,0,0x40c38800);\n    if (((returnValue != 0) || (returnValue = is_comparison_true_080009c8(value1,value2,0,0x40c38880), returnValue != 0)) ||\n       (returnValue = is_comparison_true_080009c8(value1,value2,0,0x40c38900), returnValue != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  initialValue = initialize_080058e0();\n  value1 = DAT_20000060;\n  if (DAT_200001b0 < initialValue) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      returnValue = check_value_08005890(DAT_20000060);\n      extract_and_set_param_value_08005848(value1,returnValue == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      convert_and_return_number_08005d82(&DAT_2000036c,DAT_20000250,10);\n      calculate_and_execute_08005c96(&DAT_2000036c,&DAT_08007368);\n      calculate_and_return_result_08005f2c(&DAT_2000036c,result1,DAT_20000240,DAT_20000244,2);\n      calculate_and_execute_08005c96(&DAT_2000036c,&DAT_08007368);\n      calculate_and_return_result_08005f2c(&DAT_2000036c,result2,DAT_20000188,DAT_2000018c,2);\n      calculate_and_execute_08005c96(&DAT_2000036c,&DAT_08007368);\n      sum_result_and_value_08005f40(&DAT_2000036c,result3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      extract_and_set_param_value_08005848(DAT_20000060,1);\n    }\n    set_parameters_0800135a(&DAT_20000194);\n    calculate_and_execute_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    set_parameters_08001366(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      calculate_and_execute_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      calculate_and_return_result_08005f2c(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      initialize_parameters_0800134e(&DAT_20000194,0);\n      calculate_and_execute_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  value2 = DAT_2000018c;\n  value1 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    returnValue = check_if_flags_are_zero_08000a04(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (returnValue == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_and_execute_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = initialize_080058e0();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        calculatedValue = bitwise_shift_0800042c(DAT_20000258);\n        update_flag_values_08001960(&DAT_200001c0,(int)((ulonglong)calculatedValue >> 0x20),0,0,calculatedValue);\n        calculate_and_modify_result_08001918(&DAT_200001c0,1000);\n        update_status_08001a44(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    returnValue = check_if_flags_are_zero_08000a04(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (returnValue != 0) {\n      calculatedValue = initialize_080058e0();\n      DAT_20000254 = (int)calculatedValue + 9000;\n      initialize_080018f8(&DAT_200001c0,(int)((ulonglong)calculatedValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    initialValue = initialize_080058e0();\n    if (DAT_20000254 < initialValue) {\n      returnValue = initialize_080058e0();\n      DAT_20000254 = returnValue + 9000;\n      calculatedValue = calculate_double_precision_08000194(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)calculatedValue >> 0x20);\n      DAT_20000240 = (undefined4)calculatedValue;\n      calculatedValue = check_if_cy_is_null_08000a18(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)calculatedValue != 0) {\n        initialize_080018f8(&DAT_200001c0,(int)((ulonglong)calculatedValue >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    calculatedValue = check_if_flags_are_zero_08000a04(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)calculatedValue != 0) {\n      initialize_080018f8(&DAT_200001c0,(int)((ulonglong)calculatedValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    returnValue = check_and_return_080009f0(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (returnValue != 0) {\n      returnValue = initialize_080058e0();\n      DAT_20000180 = returnValue + 1000;\n      extract_and_set_param_value_08005848(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    initialValue = initialize_080058e0();\n    if (DAT_20000180 < initialValue) {\n      extract_and_set_param_value_08005848(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    returnValue = is_null_terminator_080009dc(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (returnValue != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    returnValue = is_comparison_true_080009c8(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((returnValue == 0) && (returnValue = is_comparison_true_080009c8(value1,value2,0,0x40c38880), returnValue == 0)) &&\n       (returnValue = is_comparison_true_080009c8(value1,value2,0,0x40c38900), returnValue == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    returnValue = get_processed_data_08005754(DAT_20000068);\n    if (returnValue == 0) {\n      returnValue = initialize_080058e0();\n      if (0x32 < (uint)(returnValue - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    returnValue = get_processed_data_08005754(DAT_20000068);\n    if (returnValue == 0) {\n      DAT_20000190 = initialize_080058e0();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (returnValue = get_processed_data_08005754(DAT_20000068), returnValue != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    returnValue = initialize_080058e0();\n    process_data_080016b4(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(returnValue - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    calculatedValue = calculate_result_0800040c(returnValue - DAT_2000025c);\n    returnValue = is_null_terminator_080009dc((int)calculatedValue,(int)((ulonglong)calculatedValue >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (returnValue == 0) {\n      extract_and_set_param_value_08005848(DAT_20000064,0);\n    }\n    else {\n      extract_and_set_param_value_08005848(DAT_20000064,1);\n    }\n  }\n  else {\n    extract_and_set_param_value_08005848(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "process_data_08000cd0",
                "uVar1": "initialValue",
                "uVar2": "value1",
                "iVar3": "returnValue",
                "uVar4": "value2",
                "extraout_r1": "result1",
                "extraout_r1_00": "result2",
                "extraout_r1_01": "result3",
                "uVar5": "calculatedValue"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800134e",
                "FUN_08005f2c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_080009c8",
                "FUN_08000a04",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_080016b4",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005754",
                "FUN_080058e0",
                "FUN_0800042c",
                "FUN_08005f40",
                "FUN_08000194",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08001366",
                "FUN_08001a44",
                "FUN_08001960",
                "FUN_080018f8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_0800040c",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "set_parameters_08001294",
            "code": "\nvoid setParameters_08001294(int arg1,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(arg1 + 0x18) = value1;\n  *(undefined *)(arg1 + 0x19) = value2;\n  *(undefined *)(arg1 + 0x1a) = value3;\n  *(undefined *)(arg1 + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "set_parameters_08001294",
                "param_1": "arg1",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "set_param_values_080012a2",
            "code": "\nvoid set_param_values_080012a2(int param)\n\n{\n  set_param_value(*(undefined *)(param + 10),0);\n  set_param_value(*(undefined *)(param + 10),1);\n  set_param_value(*(undefined *)(param + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "set_param_values_080012a2",
                "param_1": "param",
                "extract_and_set_param_value_08005848": "set_param_value"
            },
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "called": [
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "extract_and_set_param_values_080012c0",
            "code": "\nvoid extractAndSetParamValues_080012c0(int ptrData,int paramValue)\n\n{\n  uint counter;\n  \n  for (counter = 0; (int)counter < 4; counter = counter + 1) {\n    extract_and_set_param_value_08005848(*(undefined *)(ptrData + counter + 0xb),paramValue >> (counter & 0xff) & 1);\n  }\n  set_param_values_080012a2(ptrData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "extract_and_set_param_values_080012c0",
                "param_1": "ptrData",
                "param_2": "paramValue",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "extract_and_set_param_values_080012e8",
            "code": "\nvoid extractAndSetParamValues_080012e8(int dataPointer,int value)\n\n{\n  uint index;\n  \n  for (index = 0; (int)index < 8; index = index + 1) {\n    extract_and_set_param_value_08005848(*(undefined *)(dataPointer + index + 0xb),value >> (index & 0xff) & 1);\n  }\n  set_param_values_080012a2(dataPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "extract_and_set_param_values_080012e8",
                "param_1": "dataPointer",
                "param_2": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001310"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "extract_and_set_parameters_08001310",
            "code": "\nvoid extractAndSetParameters_08001310(int param1,uint param2,undefined4 param3,undefined4 param4)\n\n{\n  extractAndSetValue(*(undefined *)(param1 + 8),param3,param3,param4,param4);\n  if (*(char *)(param1 + 9) != -1) {\n    extractAndSetValue(*(char *)(param1 + 9),0);\n  }\n  if ((*(byte *)(param1 + 0x13) & 0x10) == 0) {\n    extractAndSetValues(param1,param2 >> 4);\n    extractAndSetValues(param1,param2);\n    return;\n  }\n  extractAndSetValues(param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "extract_and_set_parameters_08001310",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extract_and_set_param_value_08005848": "extractAndSetValue",
                "extract_and_set_param_values_080012c0": "extractAndSetValues",
                "extract_and_set_param_values_080012e8": "extractAndSetValues"
            },
            "calling": [
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800138e",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "initialize_parameters_0800134e",
            "code": "\nundefined4 initialize_parameters_0800134e(undefined4 input_1,undefined4 input_2,undefined4 param_3,undefined4 param_4)\n\n{\n  extract_and_set_parameters(input_1,input_2,1,param_4,param_4);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "initialize_parameters_0800134e",
                "param_1": "input_1",
                "param_2": "input_2",
                "extract_and_set_parameters_08001310": "extract_and_set_parameters"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "set_parameters_0800135a",
            "code": "\nvoid setParameters_0800135a(undefined4 data,undefined4 value1,undefined4 value2,undefined4 parameter)\n\n{\n  extractAndSetParameters(data,1,0,parameter,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "set_parameters_0800135a",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "parameter",
                "extract_and_set_parameters_08001310": "extractAndSetParameters"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "set_parameters_08001366",
            "code": "\nvoid setParameters_08001366(int input,char character,uint limit,undefined4 param)\n\n{\n  char extractedChar;\n  \n  if (3 < limit) {\n    limit = 3;\n  }\n  if ((int)(uint)*(byte *)(input + 0x17) <= (int)limit) {\n    limit = *(byte *)(input + 0x17) - 1 & 0xff;\n  }\n  extractedChar = *(char *)(limit + input + 0x18);\n  extract_and_set_parameters_08001310(input,character + extractedChar | 0x80,0,extractedChar,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "set_parameters_08001366",
                "param_1": "input",
                "param_2": "character",
                "param_3": "limit",
                "param_4": "param",
                "cVar1": "extractedChar"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "set_flag_and_extract_params_0800138e",
            "code": "\nvoid setFlagAndExtractParams_0800138e(int inputPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteValue;\n  \n  byteValue = *(byte *)(inputPtr + 0x14);\n  *(byte *)(inputPtr + 0x14) = byteValue | 4;\n  extract_and_set_parameters_08001310(inputPtr,byteValue | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "set_flag_and_extract_params_0800138e",
                "param_1": "inputPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "process_data_080013a4",
            "code": "\nvoid process_data_080013a4(int data_ptr,int value1,int value2,int flag)\n\n{\n  int loop_counter;\n  int loop_index;\n  \n  if (1 < value2) {\n    *(byte *)(data_ptr + 0x13) = *(byte *)(data_ptr + 0x13) | 8;\n  }\n  *(char *)(data_ptr + 0x17) = (char)value2;\n  set_parameters_08001294(data_ptr,0,0x40,value1,value1 + 0x40);\n  if ((flag != 0) && (value2 == 1)) {\n    *(byte *)(data_ptr + 0x13) = *(byte *)(data_ptr + 0x13) | 4;\n  }\n  process_data_080013a4_080057b4(*(undefined *)(data_ptr + 8),1);\n  if (*(char *)(data_ptr + 9) != -1) {\n    process_data_080013a4_080057b4(*(char *)(data_ptr + 9),1);\n  }\n  process_data_080013a4_080057b4(*(undefined *)(data_ptr + 10),1);\n  loop_index = 0;\n  while( true ) {\n    if ((*(byte *)(data_ptr + 0x13) & 0x10) == 0) {\n      loop_counter = 4;\n    }\n    else {\n      loop_counter = 8;\n    }\n    if (loop_counter <= loop_index) break;\n    process_data_080013a4_080057b4(*(undefined *)(data_ptr + loop_index + 0xb),1);\n    loop_index = loop_index + 1;\n  }\n  extract_and_set_param_value_08005848(*(undefined *)(data_ptr + 8),0);\n  extract_and_set_param_value_08005848(*(undefined *)(data_ptr + 10),0);\n  if (*(char *)(data_ptr + 9) != -1) {\n    extract_and_set_param_value_08005848(*(char *)(data_ptr + 9),0);\n  }\n  if ((*(byte *)(data_ptr + 0x13) & 0x10) == 0) {\n    extract_and_set_param_values_080012c0(data_ptr,3);\n    extract_and_set_param_values_080012c0(data_ptr,3);\n    extract_and_set_param_values_080012c0(data_ptr,3);\n    extract_and_set_param_values_080012c0(data_ptr,2);\n  }\n  else {\n    extract_and_set_parameters_08001310(data_ptr,*(byte *)(data_ptr + 0x13) | 0x20,0);\n    extract_and_set_parameters_08001310(data_ptr,*(byte *)(data_ptr + 0x13) | 0x20,0);\n    extract_and_set_parameters_08001310(data_ptr,*(byte *)(data_ptr + 0x13) | 0x20,0);\n  }\n  extract_and_set_parameters_08001310(data_ptr,*(byte *)(data_ptr + 0x13) | 0x20,0);\n  *(undefined *)(data_ptr + 0x14) = 4;\n  set_flag_and_extract_params_0800138e(data_ptr);\n  set_parameters_0800135a(data_ptr);\n  *(undefined *)(data_ptr + 0x15) = 2;\n  extract_and_set_parameters_08001310(data_ptr,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "process_data_080013a4",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "iVar1": "loop_counter",
                "iVar2": "loop_index"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "called": [
                "FUN_08001310",
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08001294",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "initialize_data_080014ba",
            "code": "\nvoid initializeData_080014ba(int dataAddress,int condition,undefined value1,undefined4 value2,undefined value3,\n                 undefined value4,undefined value5,undefined value6,undefined value7,\n                 undefined value8,undefined value9,undefined value10,undefined value11)\n\n{\n  *(undefined *)(dataAddress + 8) = value1;\n  *(char *)(dataAddress + 9) = (char)value2;\n  *(undefined *)(dataAddress + 10) = value3;\n  *(undefined *)(dataAddress + 0xb) = value4;\n  *(undefined *)(dataAddress + 0xc) = value5;\n  *(undefined *)(dataAddress + 0xd) = value6;\n  *(undefined *)(dataAddress + 0xe) = value7;\n  *(undefined *)(dataAddress + 0xf) = value8;\n  *(undefined *)(dataAddress + 0x10) = value9;\n  *(undefined *)(dataAddress + 0x11) = value10;\n  *(undefined *)(dataAddress + 0x12) = value11;\n  if (condition == 0) {\n    *(undefined *)(dataAddress + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(dataAddress + 0x13) = 0;\n  }\n  process_data_080013a4(dataAddress,0x10,1,0,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "initialize_data_080014ba",
                "param_1": "dataAddress",
                "param_2": "condition",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "param_7": "value5",
                "param_8": "value6",
                "param_9": "value7",
                "param_10": "value8",
                "param_11": "value9",
                "param_12": "value10",
                "param_13": "value11"
            },
            "calling": [
                "FUN_08001510"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_parameters_08001510",
            "code": "\nundefined4 *\ninitialize_parameters_08001510(undefined4 *parameters,undefined4 value_1,undefined4 value_2,undefined4 value_3,\n            undefined param_5,undefined param_6,undefined param_7)\n\n{\n  parameters[1] = 0;\n  *parameters = &PTR_initialize_parameters_08001510_0800134e_1_080073f8;\n  initialize_data_080014ba(parameters,1,value_1,0xff,value_2,value_3,param_5,param_6,param_7,0,0,0,0);\n  return parameters;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_parameters_08001510",
                "param_1": "parameters",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "extract_and_set_parameters_08001550",
            "code": "\nvoid extractAndSetParameters_08001550(undefined4 *outputArray,uint bitMask,int inputArray)\n\n{\n  int counter;\n  \n  extract_and_set_parameters_08001310(outputArray,(bitMask & 7) << 3 | 0x40,0);\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    (**(code **)*outputArray)(outputArray,*(undefined *)(inputArray + counter));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "extract_and_set_parameters_08001550",
                "param_1": "outputArray",
                "param_2": "bitMask",
                "param_3": "inputArray",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "process_and_extract_parameters_0800157c",
            "code": "\nundefined * process_and_extract_parameters_0800157c(undefined *output_buffer,undefined4 input_byte,undefined second_byte,undefined third_byte)\n\n{\n  *output_buffer = (char)input_byte;\n  output_buffer[1] = second_byte;\n  output_buffer[2] = third_byte;\n  process_data(input_byte,0);\n  process_data(output_buffer[1],1);\n  process_data(output_buffer[2],1);\n  extract_and_set_param_value(output_buffer[1],1);\n  extract_and_set_param_value(output_buffer[2],0);\n  return output_buffer;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "process_and_extract_parameters_0800157c",
                "param_1": "output_buffer",
                "param_2": "input_byte",
                "param_3": "second_byte",
                "param_4": "third_byte",
                "process_data_080057b4": "process_data",
                "extract_and_set_param_value_08005848": "extract_and_set_param_value"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "extract_and_set_param_bits_080015b2",
            "code": "\nuint extract_and_set_param_bits_080015b2(undefined *params)\n\n{\n  int check_result;\n  uint bit_index;\n  uint result;\n  \n  extract_and_set_param_value_08005848(params[1],0);\n  result = 0;\n  for (bit_index = 0x1f; -1 < (int)bit_index; bit_index = bit_index - 1) {\n    extract_and_set_param_value_08005848(params[2],1);\n    check_result = check_value_08005890(*params);\n    if (check_result != 0) {\n      result = result | 1 << (bit_index & 0xff);\n    }\n    extract_and_set_param_value_08005848(params[2],0);\n  }\n  extract_and_set_param_value_08005848(params[1],1);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "extract_and_set_param_bits_080015b2",
                "param_1": "params",
                "iVar1": "check_result",
                "uVar2": "bit_index",
                "uVar3": "result"
            },
            "calling": [
                "FUN_080015f8"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "calculate_result_080015f8",
            "code": "\nundefined8 calculate_result_080015f8(undefined4 arg1,int arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  uint extracted_bits;\n  undefined8 result;\n  \n  extracted_bits = extract_and_set_param_bits_080015b2();\n  if ((extracted_bits & 0x10000) == 0) {\n    extracted_bits = extracted_bits >> 0x12;\n    result = calculate_result_080015f8_0800040c(extracted_bits & 0x1fff);\n    if ((extracted_bits & 0x2000) != 0) {\n      result = calculate_result_080015f8_0800040c(~extracted_bits & 0x1fff);\n      result = calculate_double_precision_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,arg4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = calculate_xor_and_multiply_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (arg2 == 1) {\n      result = calculate_xor_and_multiply_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = calculate_modified_floating_point_number_0800074c((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = calculate_double_precision_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    extracted_bits = extracted_bits & 7;\n    if (extracted_bits == 2) {\n      return 0x40c3888000000000;\n    }\n    if (extracted_bits == 4) {\n      return 0x40c3890000000000;\n    }\n    if (extracted_bits != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "calculate_result_080015f8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "extracted_bits",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_080004f8",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "process_data_080016b4",
            "code": "\nchar processData_080016b4(int data)\n\n{\n  char result;\n  int initializedValue;\n  int comparisonResult;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  char isNotNull;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined8 result1;\n  undefined8 result2;\n  undefined8 result3;\n  undefined8 result4;\n  undefined4 temp11;\n  undefined4 temp12;\n  \n  isNotNull = *(char *)(data + 0x70);\n  if (isNotNull != '\\0') {\n    initializedValue = initialize_080058e0();\n    if ((uint)(initializedValue - *(int *)(data + 0x44)) < *(uint *)(data + 0x58)) {\n      isNotNull = '\\0';\n    }\n    else {\n      temp2 = **(undefined4 **)(data + 0x38);\n      temp5 = (*(undefined4 **)(data + 0x38))[1];\n      result1 = calculate_bitwise_operations_08000190(**(undefined4 **)(data + 0x40),(*(undefined4 **)(data + 0x40))[1])\n      ;\n      temp10 = (undefined4)((ulonglong)result1 >> 0x20);\n      result2 = calculate_bitwise_operations_08000190(temp2,temp5,*(undefined4 *)(data + 0x50),\n                            *(undefined4 *)(data + 0x54));\n      temp1 = (undefined4)((ulonglong)result2 >> 0x20);\n      result3 = calculate_xor_and_multiply_080004f8((int)result1,temp10,*(undefined4 *)(data + 0x20),\n                            *(undefined4 *)(data + 0x24));\n      result3 = calculate_double_precision_08000194((int)result3,(int)((ulonglong)result3 >> 0x20),\n                            *(undefined4 *)(data + 0x48),*(undefined4 *)(data + 0x4c));\n      *(undefined8 *)(data + 0x48) = result3;\n      result = *(char *)(data + 0x71);\n      if (result == '\\0') {\n        result4 = calculate_xor_and_multiply_080004f8((int)result2,temp1,*(undefined4 *)(data + 0x18),\n                              *(undefined4 *)(data + 0x1c));\n        result3 = calculate_bitwise_operations_08000190((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                              (int)((ulonglong)result4 >> 0x20));\n        *(undefined8 *)(data + 0x48) = result3;\n      }\n      temp3 = *(undefined4 *)(data + 0x48);\n      temp6 = *(undefined4 *)(data + 0x4c);\n      temp8 = *(undefined4 *)(undefined8 *)(data + 0x68);\n      temp9 = *(undefined4 *)(data + 0x6c);\n      result3 = *(undefined8 *)(data + 0x68);\n      comparisonResult = check_if_cy_is_null_08000a18(temp3,temp6,temp8,temp9);\n      if (comparisonResult == 0) {\n        temp4 = *(undefined4 *)(data + 0x60);\n        temp7 = *(undefined4 *)(data + 100);\n        comparisonResult = is_null_terminator_080009dc(temp3,temp6);\n        if (comparisonResult != 0) {\n          *(undefined4 *)(data + 0x48) = temp4;\n          *(undefined4 *)(data + 0x4c) = temp7;\n        }\n      }\n      else {\n        *(undefined4 *)(data + 0x48) = temp8;\n        *(undefined4 *)(data + 0x4c) = temp9;\n      }\n      if (result == '\\0') {\n        result1 = 0;\n      }\n      else {\n        result1 = calculate_xor_and_multiply_080004f8((int)result1,temp10,*(undefined4 *)(data + 0x18),\n                              *(undefined4 *)(data + 0x1c));\n      }\n      temp12 = (undefined4)((ulonglong)result1 >> 0x20);\n      temp11 = (undefined4)result1;\n      temp10 = *(undefined4 *)(data + 0x48);\n      temp3 = *(undefined4 *)(data + 0x4c);\n      result1 = calculate_xor_and_multiply_080004f8((int)result2,temp1,*(undefined4 *)(data + 0x28),\n                            *(undefined4 *)(data + 0x2c));\n      result1 = calculate_bitwise_operations_08000190(temp10,temp3,(int)result1,(int)((ulonglong)result1 >> 0x20));\n      result1 = calculate_double_precision_08000194(temp11,temp12,(int)result1,(int)((ulonglong)result1 >> 0x20));\n      temp10 = (undefined4)((ulonglong)result1 >> 0x20);\n      comparisonResult = is_null_terminator_080009dc(temp8,temp9,(int)result1,temp10);\n      if (comparisonResult == 0) {\n        result3 = *(undefined8 *)(data + 0x60);\n        comparisonResult = is_null_terminator_080009dc((int)result1,temp10,*(undefined4 *)(undefined8 *)(data + 0x60),\n                             *(undefined4 *)(data + 100));\n        if (comparisonResult == 0) {\n          result3 = result1;\n        }\n      }\n      **(undefined8 **)(data + 0x3c) = result3;\n      *(undefined4 *)(data + 0x50) = temp2;\n      *(undefined4 *)(data + 0x54) = temp5;\n      *(int *)(data + 0x44) = initializedValue;\n    }\n  }\n  return isNotNull;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "process_data_080016b4",
                "param_1": "data",
                "cVar1": "result",
                "iVar2": "initializedValue",
                "iVar3": "comparisonResult",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "cVar11": "isNotNull",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "result1",
                "uVar16": "result2",
                "uVar17": "result3",
                "uVar18": "result4",
                "local_38": "temp11",
                "uStack_34": "temp12"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_080058e0",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "initialize_parameters_08001814",
            "code": "\nvoid initializeParameters_08001814(undefined4 *parameterArray,undefined4 param2,undefined4 input1,undefined4 input2,\n                 undefined4 input3,undefined4 input4,undefined4 input5,undefined4 input6,\n                 int flag)\n\n{\n  int isTerminator1;\n  undefined4 result;\n  undefined terminatorFlag;\n  bool isFlag1;\n  undefined8 calculationResult;\n  undefined8 xorAndMultiplyResult;\n  undefined8 bitwiseOperationsResult;\n  \n  isTerminator1 = is_null_terminator_080009dc(input1,input2,0,0);\n  if (((isTerminator1 == 0) && (isTerminator1 = is_null_terminator_080009dc(input3,input4,0,0), isTerminator1 == 0)) &&\n     (isTerminator1 = is_null_terminator_080009dc(input5,input6,0,0), isTerminator1 == 0)) {\n    parameterArray[0xd] = flag;\n    isFlag1 = flag != 1;\n    if (isFlag1) {\n      flag = 0;\n    }\n    terminatorFlag = (undefined)flag;\n    if (!isFlag1) {\n      terminatorFlag = 1;\n    }\n    *(undefined *)((int)parameterArray + 0x71) = terminatorFlag;\n    *parameterArray = input1;\n    parameterArray[1] = input2;\n    parameterArray[2] = input3;\n    parameterArray[3] = input4;\n    parameterArray[4] = input5;\n    parameterArray[5] = input6;\n    calculationResult = calculate_result_0800040c(parameterArray[0x16]);\n    calculationResult = calculate_modified_floating_point_number_0800074c((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0,0x408f4000);\n    result = (undefined4)((ulonglong)calculationResult >> 0x20);\n    parameterArray[6] = input1;\n    parameterArray[7] = input2;\n    xorAndMultiplyResult = calculate_xor_and_multiply_080004f8(input3,input4,(int)calculationResult,result);\n    *(undefined8 *)(parameterArray + 8) = xorAndMultiplyResult;\n    calculationResult = calculate_modified_floating_point_number_0800074c(input5,input6,(int)calculationResult,result);\n    *(undefined8 *)(parameterArray + 10) = calculationResult;\n    if (parameterArray[0xc] == 1) {\n      bitwiseOperationsResult = calculate_bitwise_operations_08000190(0,0,input1,input2);\n      *(undefined8 *)(parameterArray + 6) = bitwiseOperationsResult;\n      xorAndMultiplyResult = calculate_bitwise_operations_08000190(0,0,(int)xorAndMultiplyResult,(int)((ulonglong)xorAndMultiplyResult >> 0x20));\n      *(undefined8 *)(parameterArray + 8) = xorAndMultiplyResult;\n      calculationResult = calculate_bitwise_operations_08000190(0,0,(int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n      *(undefined8 *)(parameterArray + 10) = calculationResult;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "initialize_parameters_08001814",
                "param_1": "parameterArray",
                "param_2": "param2",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "input3",
                "param_6": "input4",
                "param_7": "input5",
                "param_8": "input6",
                "param_9": "flag",
                "iVar1": "isTerminator1",
                "uVar2": "result",
                "uVar3": "terminatorFlag",
                "bVar4": "isFlag1",
                "uVar5": "calculationResult",
                "uVar6": "xorAndMultiplyResult",
                "uVar7": "bitwiseOperationsResult"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "initialize_080018f8",
            "code": "\nvoid initialize_080018f8(void)\n\n{\n  initialize_080018f8_parameters();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "initialize_080018f8",
                "initialize_parameters_08001814": "initialize_parameters"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "calculate_and_modify_result_08001918",
            "code": "\nvoid calculateAndModifyResult_08001918(int ptrArray,int count,undefined4 var1,undefined4 var2)\n\n{\n  undefined4 shiftedResult;\n  undefined8 modFloatNum1;\n  undefined8 calcResult1;\n  \n  if (0 < count) {\n    modFloatNum1 = bitwiseShift(count);\n    calcResult1 = calculateResult(*(undefined4 *)(ptrArray + 0x58));\n    modFloatNum1 = calcModifiedFloatNum((int)modFloatNum1,(int)((ulonglong)modFloatNum1 >> 0x20),(int)calcResult1,\n                         (int)((ulonglong)calcResult1 >> 0x20),var2);\n    shiftedResult = (undefined4)((ulonglong)modFloatNum1 >> 0x20);\n    calcResult1 = calcXorAndMultiply((int)modFloatNum1,shiftedResult,*(undefined4 *)(ptrArray + 0x20),\n                         *(undefined4 *)(ptrArray + 0x24));\n    *(undefined8 *)(ptrArray + 0x20) = calcResult1;\n    modFloatNum1 = calcModifiedFloatNum(*(undefined4 *)(ptrArray + 0x28),*(undefined4 *)(ptrArray + 0x2c),(int)modFloatNum1,\n                         shiftedResult);\n    *(undefined8 *)(ptrArray + 0x28) = modFloatNum1;\n    *(int *)(ptrArray + 0x58) = count;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "calculate_and_modify_result_08001918",
                "param_1": "ptrArray",
                "param_2": "count",
                "param_3": "var1",
                "param_4": "var2",
                "uVar1": "shiftedResult",
                "uVar2": "modFloatNum1",
                "uVar3": "calcResult1",
                "calculate_result_0800040c": "calculateResult",
                "bitwise_shift_0800042c": "bitwiseShift",
                "calculate_modified_floating_point_number_0800074c": "calcModifiedFloatNum",
                "calculate_xor_and_multiply_080004f8": "calcXorAndMultiply"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_flag_values_08001960",
            "code": "\nvoid update_flag_values_08001960(int structure_ptr,undefined4 param_2,undefined4 flag1_value,undefined4 flag2_value,\n                 undefined4 flag3_value,undefined4 flag4_value)\n\n{\n  int flags_are_zero;\n  undefined4 *pointer_to_flags;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  \n  flags_are_zero = check_if_flags_are_zero_08000a04(flag1_value,flag2_value,flag3_value,flag4_value,flag2_value);\n  if (flags_are_zero == 0) {\n    *(undefined4 *)(structure_ptr + 0x60) = flag1_value;\n    *(undefined4 *)(structure_ptr + 100) = flag2_value;\n    *(undefined4 *)(structure_ptr + 0x68) = flag3_value;\n    *(undefined4 *)(structure_ptr + 0x6c) = flag4_value;\n    if (*(char *)(structure_ptr + 0x70) != '\\0') {\n      pointer_to_flags = *(undefined4 **)(structure_ptr + 0x3c);\n      var1 = *pointer_to_flags;\n      var3 = pointer_to_flags[1];\n      flags_are_zero = is_null_terminator_080009dc(flag3_value,flag4_value,var1,var3);\n      if (flags_are_zero == 0) {\n        flags_are_zero = check_if_cy_is_null_08000a18(flag1_value,flag2_value,var1,var3);\n        if (flags_are_zero != 0) {\n          *pointer_to_flags = flag1_value;\n          pointer_to_flags[1] = flag2_value;\n        }\n      }\n      else {\n        *pointer_to_flags = flag3_value;\n        pointer_to_flags[1] = flag4_value;\n      }\n      var1 = *(undefined4 *)(structure_ptr + 0x48);\n      var3 = *(undefined4 *)(structure_ptr + 0x4c);\n      var2 = *(undefined4 *)(structure_ptr + 0x68);\n      var4 = *(undefined4 *)(structure_ptr + 0x6c);\n      flags_are_zero = check_if_cy_is_null_08000a18(var1,var3,var2,var4);\n      if (flags_are_zero != 0) {\n        *(undefined4 *)(structure_ptr + 0x48) = var2;\n        *(undefined4 *)(structure_ptr + 0x4c) = var4;\n        return;\n      }\n      var2 = *(undefined4 *)(structure_ptr + 0x60);\n      var4 = *(undefined4 *)(structure_ptr + 100);\n      flags_are_zero = is_null_terminator_080009dc(var1,var3,var2,var4);\n      if (flags_are_zero != 0) {\n        *(undefined4 *)(structure_ptr + 0x48) = var2;\n        *(undefined4 *)(structure_ptr + 0x4c) = var4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_flag_values_08001960",
                "param_1": "structure_ptr",
                "param_3": "flag1_value",
                "param_4": "flag2_value",
                "param_5": "flag3_value",
                "param_6": "flag4_value",
                "iVar1": "flags_are_zero",
                "puVar2": "pointer_to_flags",
                "uVar3": "var1",
                "uVar4": "var2",
                "uVar5": "var3",
                "uVar6": "var4"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "update_variables_080019f6",
            "code": "\nvoid updateVariables_080019f6(int baseAddress)\n\n{\n  int isCyNull;\n  undefined4 cyValue1;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 ptr3;\n  \n  ptr1 = **(undefined4 **)(baseAddress + 0x3c);\n  ptr2 = (*(undefined4 **)(baseAddress + 0x3c))[1];\n  *(undefined4 *)(baseAddress + 0x48) = ptr1;\n  *(undefined4 *)(baseAddress + 0x4c) = ptr2;\n  cyValue1 = (*(undefined4 **)(baseAddress + 0x38))[1];\n  *(undefined4 *)(baseAddress + 0x50) = **(undefined4 **)(baseAddress + 0x38);\n  *(undefined4 *)(baseAddress + 0x54) = cyValue1;\n  cyValue1 = *(undefined4 *)(baseAddress + 0x68);\n  ptr3 = *(undefined4 *)(baseAddress + 0x6c);\n  isCyNull = check_if_cy_is_null_08000a18(ptr1,ptr2,cyValue1,ptr3);\n  if (isCyNull == 0) {\n    cyValue1 = *(undefined4 *)(baseAddress + 0x60);\n    ptr3 = *(undefined4 *)(baseAddress + 100);\n    isCyNull = is_null_terminator_080009dc(ptr1,ptr2,cyValue1,ptr3);\n    if (isCyNull != 0) {\n      *(undefined4 *)(baseAddress + 0x48) = cyValue1;\n      *(undefined4 *)(baseAddress + 0x4c) = ptr3;\n    }\n    return;\n  }\n  *(undefined4 *)(baseAddress + 0x48) = cyValue1;\n  *(undefined4 *)(baseAddress + 0x4c) = ptr3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "update_variables_080019f6",
                "param_1": "baseAddress",
                "iVar1": "isCyNull",
                "uVar2": "cyValue1",
                "uVar3": "ptr1",
                "uVar4": "ptr2",
                "uVar5": "ptr3"
            },
            "calling": [
                "FUN_08001a44"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_status_08001a44",
            "code": "\nvoid updateStatus_08001a44(int status,int flag)\n\n{\n  undefined newFlag;\n  \n  if (flag == 1) {\n    newFlag = 1;\n    if (*(char *)(status + 0x70) == '\\0') {\n      updateVariables();\n    }\n  }\n  else {\n    newFlag = 0;\n  }\n  *(undefined *)(status + 0x70) = newFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_status_08001a44",
                "param_1": "status",
                "param_2": "flag",
                "uVar1": "newFlag",
                "update_variables_080019f6": "updateVariables"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080019f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_data_08001a66",
            "code": "\nvoid updateData_08001a66(int data_ptr,int new_value,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(data_ptr + 0x70) != '\\0') && (*(int *)(data_ptr + 0x30) != new_value)) {\n    result = performBitwiseOperations(0,0,*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(data_ptr + 0x1c),param_4\n                        );\n    *(undefined8 *)(data_ptr + 0x18) = result;\n    result = performBitwiseOperations(0,0,*(undefined4 *)(data_ptr + 0x20),*(undefined4 *)(data_ptr + 0x24));\n    *(undefined8 *)(data_ptr + 0x20) = result;\n    result = performBitwiseOperations(0,0,*(undefined4 *)(data_ptr + 0x28),*(undefined4 *)(data_ptr + 0x2c));\n    *(undefined8 *)(data_ptr + 0x28) = result;\n  }\n  *(int *)(data_ptr + 0x30) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_data_08001a66",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "uVar1": "result",
                "calculate_bitwise_operations_08000190": "performBitwiseOperations"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_and_update_data_08001ab0",
            "code": "\nint initialize_and_update_data_08001ab0(int data,undefined4 value1,undefined4 value2,undefined4 value3,\n                undefined4 value4,undefined4 value5,undefined4 value6,undefined4 value7,\n                undefined4 value8,undefined4 value9,undefined4 value10,undefined4 value11)\n\n{\n  int result;\n  undefined4 additional_result;\n  \n  *(undefined4 *)(data + 0x3c) = value2;\n  *(undefined4 *)(data + 0x38) = value1;\n  *(undefined4 *)(data + 0x40) = value3;\n  *(undefined *)(data + 0x70) = 0;\n  update_flag_values_08001960(data,value1,0,0,0,0x406fe000);\n  *(undefined4 *)(data + 0x58) = 100;\n  update_data_08001a66(data,value11);\n  initialize_parameters_08001814(data,additional_result,value4,value5,value6,value7,value8,value9,value10);\n  result = initialize_080058e0();\n  *(int *)(data + 0x44) = result - *(int *)(data + 0x58);\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_and_update_data_08001ab0",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5",
                "param_7": "value6",
                "param_8": "value7",
                "param_9": "value8",
                "param_10": "value9",
                "param_11": "value10",
                "param_12": "value11",
                "iVar1": "result",
                "extraout_r1": "additional_result"
            },
            "calling": [
                "FUN_08001b18"
            ],
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_080058e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_return_08001b18",
            "code": "\nundefined4 initialize_and_return_08001b18(undefined4 input_param)\n\n{\n  initialization_function();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_return_08001b18",
                "param_1": "input_param",
                "initialize_and_update_data_08001ab0": "initialization_function"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_device_08001b48",
            "code": "\nvoid initializeDevice_08001b48(void)\n\n{\n  int status;\n  uint dataValue;\n  undefined4 registerParams [2];\n  undefined4 registerParam1;\n  undefined4 memoryParam1;\n  undefined4 memoryParam2;\n  undefined4 memoryParam3;\n  undefined4 memoryParam4;\n  undefined4 memoryParam5;\n  undefined4 configParams [4];\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  \n  configParams[0] = 2;\n  param1 = 1;\n  param2 = 0x10;\n  param3 = 2;\n  param4 = 0;\n  param5 = 0x380000;\n  status = check_status_and_delay_08003688(configParams);\n  if (status != 0) {\n    infinite_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  memoryParam1 = 0xf;\n  memoryParam2 = 2;\n  memoryParam3 = 0;\n  memoryParam4 = 0x400;\n  memoryParam5 = 0;\n  status = validate_and_update_memory_08003ad4(&memoryParam1);\n  if (status != 0) {\n    infinite_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  registerParams[0] = 2;\n  registerParam1 = 0x8000;\n  status = configure_hardware_registers_08003c90(registerParams);\n  if (status != 0) {\n    infinite_loop_08004d40(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  dataValue = get_data_value_08003c44();\n  validate_input_08002514(dataValue / 1000);\n  update_flag_08002560(4);\n  update_memory_08002494(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_device_08001b48",
                "local_30": "configParams",
                "local_20": "param1",
                "local_1c": "param2",
                "local_14": "param3",
                "local_10": "param4",
                "local_c": "param5",
                "iVar1": "status",
                "local_44": "memoryParam1",
                "local_40": "memoryParam2",
                "local_3c": "memoryParam3",
                "local_38": "memoryParam4",
                "local_34": "memoryParam5",
                "local_54": "registerParams",
                "local_4c": "registerParam1",
                "uVar2": "dataValue"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08001be8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_08004d44();\n  execute_function_array_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  run_oven_controller_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005f6c",
                "FUN_08004d44",
                "FUN_08006198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_and_update_device_08001c32",
            "code": "\nvoid initialize_and_update_device_08001c32(void)\n\n{\n  initialize_device_and_update_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_and_update_device_08001c32",
                "initialize_device_and_update_flags_08004c52": "initialize_device_and_update_flags"
            },
            "calling": [
                "FUN_08005f5e"
            ],
            "called": [
                "FUN_08004c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "FUN_08001c88"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "validate_and_update_memory_08001c3c",
            "code": "\nundefined4 validateAndUpdateMemory_08001c3c(uint input)\n\n{\n  int validInput;\n  \n  validInput = validate_input_08002514(DAT_20000084 / (1000 / DAT_20000078));\n  if (validInput != 0) {\n    return 1;\n  }\n  if (0xf < input) {\n    return 1;\n  }\n  updateMemory(0xffffffff,input,0);\n  DAT_2000007c = input;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "validate_and_update_memory_08001c3c",
                "param_1": "input",
                "iVar1": "validInput",
                "update_memory_08002494": "updateMemory"
            },
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "set_and_update_flags_08001c88",
            "code": "\n\n\nundefined4 setAndUpdateFlags_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  updateVariable(3);\n  validateAndSetMemory(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "set_and_update_flags_08001c88",
                "update_variable_08002470": "updateVariable",
                "validate_and_update_memory_08001c3c": "validateAndSetMemory"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08001c3a",
                "FUN_08002470",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "addition_and_update_08001cac",
            "code": "\nvoid additionAndUpdate_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "addition_and_update_08001cac"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_08001cc4",
            "code": "\nundefined4 get_data_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_08001cc4"
            },
            "calling": [
                "FUN_080020f0",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "check_data_validity_08001cd0",
            "code": "\nundefined4 checkDataValidity_08001cd0(uint **dataPtr,uint paramValue)\n\n{\n  int initialDataValue;\n  uint shiftedValue;\n  int valueComparison;\n  undefined4 result;\n  uint *currentDataPointer;\n  uint calculationResult;\n  uint counter;\n  \n  counter = 0;\n  initialDataValue = get_data_08001cc4();\n  calculationResult = DAT_20000084;\n  currentDataPointer = *dataPtr;\n  if ((currentDataPointer[2] & 0x100) == 0) {\n    if (((currentDataPointer[1] & 0x100) == 0) && ((currentDataPointer[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**dataPtr & 2) != 0) goto LAB_08001de2;\n      } while ((paramValue == 0xffffffff) ||\n              ((paramValue != 0 && (valueComparison = get_data_08001cc4(), (uint)(valueComparison - initialDataValue) <= paramValue))));\n      dataPtr[10] = (uint *)((uint)dataPtr[10] | 4);\n      *(undefined *)(dataPtr + 9) = 0;\n      result = 3;\n    }\n    else {\n      shiftedValue = calculate_shifted_value_08003da4(2);\n      currentDataPointer = *dataPtr;\n      if (((currentDataPointer[4] & 0x24924924) == 0) && ((currentDataPointer[3] & 0x924924) == 0)) {\n        if ((currentDataPointer[4] & 0x12492492) == 0) {\n          if ((currentDataPointer[3] & 0x492492) == 0) {\n            valueComparison = 0x14;\n          }\n          else {\n            valueComparison = 0x29;\n          }\n        }\n        else {\n          valueComparison = 0x29;\n        }\n      }\n      else if (((currentDataPointer[4] & 0x12492492) == 0) && ((currentDataPointer[3] & 0x492492) == 0)) {\n        valueComparison = 0x54;\n      }\n      else if ((currentDataPointer[4] & 0x249249) == 0) {\n        if ((currentDataPointer[3] & 0x249249) == 0) {\n          valueComparison = 0x54;\n        }\n        else {\n          valueComparison = 0xfc;\n        }\n      }\n      else {\n        valueComparison = 0xfc;\n      }\n      calculationResult = (calculationResult / shiftedValue) * valueComparison;\n      for (; counter <= calculationResult && calculationResult - counter != 0; counter = counter + 1) {\n        if ((paramValue != 0xffffffff) &&\n           ((paramValue == 0 || (valueComparison = get_data_08001cc4(), paramValue < (uint)(valueComparison - initialDataValue))))) {\n          dataPtr[10] = (uint *)((uint)dataPtr[10] | 4);\n          *(undefined *)(dataPtr + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **dataPtr = 0xffffffed;\n      dataPtr[10] = (uint *)((uint)dataPtr[10] | 0x200);\n      if (((*dataPtr)[2] & 0xe0000) == 0xe0000) {\n        if (dataPtr[3] == (uint *)0x0) {\n          dataPtr[10] = (uint *)((uint)dataPtr[10] & 0xfffffeff);\n          if (((uint)dataPtr[10] & 0x1000) == 0) {\n            dataPtr[10] = (uint *)((uint)dataPtr[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    dataPtr[10] = (uint *)((uint)dataPtr[10] | 0x20);\n    *(undefined *)(dataPtr + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "check_data_validity_08001cd0",
                "param_1": "dataPtr",
                "param_2": "paramValue",
                "iVar1": "initialDataValue",
                "uVar2": "shiftedValue",
                "iVar3": "valueComparison",
                "uVar4": "result",
                "puVar5": "currentDataPointer",
                "uVar6": "calculationResult",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_value_08001e40",
            "code": "\nundefined4 get_offset_value_08001e40(int *offset_pointer)\n\n{\n  return *(undefined4 *)(*offset_pointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "offset_pointer"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "process_data_08001e48",
            "code": "\nundefined4 processData_08001e48(int *dataPointer,uint *valuePointer)\n\n{\n  undefined4 result;\n  uint value;\n  int counter;\n  \n  if (*(char *)(dataPointer + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(dataPointer + 9) = 1;\n    value = valuePointer[1];\n    if (value < 7) {\n      value = value * 5 - 5;\n      *(uint *)(*dataPointer + 0x34) =\n           *valuePointer << (value & 0xff) | *(uint *)(*dataPointer + 0x34) & ~(0x1f << (value & 0xff));\n    }\n    else if (value < 0xd) {\n      value = value * 5 - 0x23;\n      *(uint *)(*dataPointer + 0x30) =\n           *valuePointer << (value & 0xff) | *(uint *)(*dataPointer + 0x30) & ~(0x1f << (value & 0xff));\n    }\n    else {\n      value = value * 5 - 0x41;\n      *(uint *)(*dataPointer + 0x2c) =\n           *valuePointer << (value & 0xff) | *(uint *)(*dataPointer + 0x2c) & ~(0x1f << (value & 0xff));\n    }\n    value = *valuePointer;\n    if (value < 10) {\n      *(uint *)(*dataPointer + 0x10) =\n           valuePointer[2] << (value * 3 & 0xff) |\n           *(uint *)(*dataPointer + 0x10) & ~(7 << (value * 3 & 0xff));\n    }\n    else {\n      value = value * 3 - 0x1e;\n      *(uint *)(*dataPointer + 0xc) =\n           valuePointer[2] << (value & 0xff) | *(uint *)(*dataPointer + 0xc) & ~(7 << (value & 0xff));\n    }\n    if (*valuePointer - 0x10 < 2) {\n      if (*dataPointer == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*valuePointer == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        dataPointer[10] = dataPointer[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(dataPointer + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "process_data_08001e48",
                "param_1": "dataPointer",
                "param_2": "valuePointer",
                "uVar1": "result",
                "uVar2": "value",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_pointer_value_08001f80",
            "code": "\nundefined4 getPointerValue_08001f80(int pointer)\n\n{\n  return *(undefined4 *)(pointer + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_pointer_value_08001f80",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "mark_data_as_processed_08001f84",
            "code": "\nundefined4 markDataAsProcessed_08001f84(int *dataPointer,undefined4 paramValue)\n\n{\n  int get_data_result;\n  undefined4 returnStatus;\n  int data;\n  uint loopCounter;\n  \n  data = *dataPointer;\n  if ((*(uint *)(data + 8) & 1) == 0) {\n    *(uint *)(data + 8) = *(uint *)(data + 8) | 1;\n    for (loopCounter = DAT_20000084 / 1000000; loopCounter != 0; loopCounter = loopCounter - 1) {\n    }\n    data = get_data_08001cc4(dataPointer,paramValue,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*dataPointer + 8) & 1) != 0) {\n        return 0;\n      }\n      get_data_result = get_data_08001cc4();\n    } while ((uint)(get_data_result - data) < 3);\n    dataPointer[10] = dataPointer[10] | 0x10;\n    dataPointer[0xb] = dataPointer[0xb] | 1;\n    *(undefined *)(dataPointer + 9) = 0;\n    returnStatus = 1;\n  }\n  else {\n    returnStatus = 0;\n  }\n  return returnStatus;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "mark_data_as_processed_08001f84",
                "param_1": "dataPointer",
                "param_2": "paramValue",
                "iVar1": "get_data_result",
                "iVar3": "data",
                "uVar2": "returnStatus",
                "local_14": "loopCounter"
            },
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "process_data_08002004",
            "code": "\n\n\nint process_data_08002004(int *input_data)\n\n{\n  int result;\n  undefined4 *data_ptr;\n  int data;\n  \n  if (*(char *)(input_data + 9) != '\\x01') {\n    *(undefined *)(input_data + 9) = 1;\n    result = mark_data_as_processed_08001f84();\n    if (result == 0) {\n      input_data[10] = input_data[10] & 0xfffffcfeU | 0x100;\n      data_ptr = (undefined4 *)*input_data;\n      if ((data_ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        input_data[10] = input_data[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          input_data[10] = input_data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        input_data[10] = input_data[10] & 0xffefffff;\n        if ((data_ptr[1] & 0x400) != 0) {\n          input_data[10] = input_data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((input_data[10] & 0x1000U) == 0) {\n        input_data[0xb] = 0;\n      }\n      else {\n        input_data[0xb] = input_data[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(input_data + 9) = 0;\n      *data_ptr = 0xfffffffd;\n      data = *input_data;\n      if (((*(uint *)(data + 8) & 0xe0000) == 0xe0000) &&\n         ((data != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(data + 8) = *(uint *)(data + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(data + 8) = *(uint *)(data + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(input_data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "process_data_08002004",
                "param_1": "input_data",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "iVar3": "data"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "update_flag_and_status_080020f0",
            "code": "\nundefined4 updateFlagAndStatus_080020f0(int *data)\n\n{\n  int previousData;\n  int currentData;\n  \n  currentData = *data;\n  if ((*(uint *)(currentData + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(currentData + 8) = *(uint *)(currentData + 8) & 0xfffffffe;\n  currentData = get_data_08001cc4();\n  do {\n    if ((*(uint *)(*data + 8) & 1) == 0) {\n      return 0;\n    }\n    previousData = get_data_08001cc4();\n  } while ((uint)(previousData - currentData) < 3);\n  data[10] = data[10] | 0x10;\n  data[0xb] = data[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "update_flag_and_status_080020f0",
                "param_1": "data",
                "iVar1": "previousData",
                "iVar2": "currentData"
            },
            "calling": [
                "FUN_0800213c",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "update_memory_status_0800213c",
            "code": "\nundefined4 update_memory_status_0800213c(int *memory_status)\n\n{\n  int flag_and_status;\n  uint combined_flags;\n  uint modified_flags;\n  \n  if (memory_status == (int *)0x0) {\n    return 1;\n  }\n  if (memory_status[10] == 0) {\n    memory_status[0xb] = 0;\n    *(undefined *)(memory_status + 9) = 0;\n    update_memory_address_08004974();\n  }\n  flag_and_status = update_flag_and_status_080020f0(memory_status);\n  if (((memory_status[10] & 0x10U) == 0) && (flag_and_status == 0)) {\n    memory_status[10] = memory_status[10] & 0xffffeefdU | 2;\n    combined_flags = memory_status[1] | memory_status[7] | memory_status[3] << 1;\n    if (memory_status[2] == 0x100) {\n      modified_flags = 0x100;\n    }\n    else {\n      modified_flags = 0;\n      if (memory_status[2] == 1) {\n        modified_flags = 0x100;\n      }\n    }\n    if (memory_status[5] == 1) {\n      if (memory_status[3] == 0) {\n        modified_flags = modified_flags | (memory_status[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        memory_status[10] = memory_status[10] | 0x20;\n        memory_status[0xb] = memory_status[0xb] | 1;\n      }\n    }\n    *(uint *)(*memory_status + 4) = modified_flags | *(uint *)(*memory_status + 4) & 0xffff16ff;\n    *(uint *)(*memory_status + 8) = *(uint *)(*memory_status + 8) & 0xffe1f7fd | combined_flags;\n    if ((memory_status[2] == 0x100) || (memory_status[2] == 1)) {\n      modified_flags = (memory_status[4] + -1) * 0x100000;\n    }\n    else {\n      modified_flags = 0;\n    }\n    *(uint *)(*memory_status + 0x2c) = modified_flags | *(uint *)(*memory_status + 0x2c) & 0xff0fffff;\n    if (combined_flags != (*(uint *)(*memory_status + 8) & 0xff1f0efe)) {\n      memory_status[10] = memory_status[10] & 0xffffffedU | 0x10;\n      memory_status[0xb] = memory_status[0xb] | 1;\n      return 1;\n    }\n    memory_status[0xb] = 0;\n    memory_status[10] = memory_status[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  memory_status[10] = memory_status[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "update_memory_status_0800213c",
                "param_1": "memory_status",
                "iVar1": "flag_and_status",
                "uVar2": "combined_flags",
                "uVar3": "modified_flags"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "initialize_configuration_0800224c",
            "code": "\nint initializeConfiguration_0800224c(int *configArray)\n\n{\n  int status;\n  \n  if (configArray == (int *)0x0) {\n    status = 1;\n  }\n  else {\n    configArray[10] = configArray[10] | 2;\n    status = updateFlagAndStatus();\n    if (status == 0) {\n      *(undefined4 *)*configArray = 0xffffffe0;\n      *(uint *)(*configArray + 4) = *(uint *)(*configArray + 4) & 0xff3f0000;\n      *(uint *)(*configArray + 8) = *(uint *)(*configArray + 8) & 0xff0106f0;\n      *(uint *)(*configArray + 0xc) = *(uint *)(*configArray + 0xc) & 0xff000000;\n      *(uint *)(*configArray + 0x10) = *(uint *)(*configArray + 0x10) & 0xc0000000;\n      *(uint *)(*configArray + 0x14) = *(uint *)(*configArray + 0x14) & 0xfffff000;\n      *(uint *)(*configArray + 0x18) = *(uint *)(*configArray + 0x18) & 0xfffff000;\n      *(uint *)(*configArray + 0x1c) = *(uint *)(*configArray + 0x1c) & 0xfffff000;\n      *(uint *)(*configArray + 0x20) = *(uint *)(*configArray + 0x20) & 0xfffff000;\n      *(uint *)(*configArray + 0x24) = *(uint *)(*configArray + 0x24) & 0xfffff000;\n      *(uint *)(*configArray + 0x28) = *(uint *)(*configArray + 0x28) & 0xfffff000;\n      *(uint *)(*configArray + 0x2c) = *(uint *)(*configArray + 0x2c) & 0xff000000;\n      *(uint *)(*configArray + 0x2c) = *(uint *)(*configArray + 0x2c) & 0xff000000;\n      *(uint *)(*configArray + 0x30) = *(uint *)(*configArray + 0x30) & 0xc0000000;\n      *(uint *)(*configArray + 0x34) = *(uint *)(*configArray + 0x34) & 0xc0000000;\n      *(uint *)(*configArray + 0x38) = *(uint *)(*configArray + 0x38) & 0xffc00000;\n      *(uint *)(*configArray + 0x38) = *(uint *)(*configArray + 0x38) & 0xffc00000;\n      update_protection_settings_080049f0(configArray);\n      configArray[0xb] = 0;\n      configArray[10] = 0;\n    }\n    *(undefined *)(configArray + 9) = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "initialize_configuration_0800224c",
                "param_1": "configArray",
                "iVar1": "status",
                "update_flag_and_status_080020f0": "updateFlagAndStatus"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "update_flag_status_08002348",
            "code": "\nint updateFlagStatus_08002348(int param)\n\n{\n  int result;\n  \n  if (*(char *)(param + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(param + 0x24) = 1;\n  result = updateFlagAndStatus;\n  if (result == 0) {\n    *(uint *)(param + 0x28) = *(uint *)(param + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(param + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002348": "update_flag_status_08002348",
                "param_1": "param",
                "iVar1": "result",
                "update_flag_and_status_080020f0()": "updateFlagAndStatus"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "process_data_08002384",
            "code": "\nint processData_08002384(int *data)\n\n{\n  uint shiftedValue;\n  int flagStatus;\n  uint divisor;\n  int startValue;\n  int endValue;\n  int loopCount;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  flagStatus = update_flag_and_status_080020f0();\n  if (flagStatus == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    shiftedValue = DAT_20000084;\n    divisor = calculate_shifted_value_08003da4(2);\n    for (loopCount = shiftedValue / divisor << 1; loopCount != 0; loopCount = loopCount + -1) {\n    }\n    mark_data_as_processed_08001f84(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    startValue = get_data_08001cc4();\n    while (endValue = *data, (*(uint *)(endValue + 8) & 8) != 0) {\n      endValue = get_data_08001cc4();\n      if (10 < (uint)(endValue - startValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(endValue + 8) = *(uint *)(endValue + 8) | 4;\n    startValue = get_data_08001cc4();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      endValue = get_data_08001cc4();\n      if (10 < (uint)(endValue - startValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return flagStatus;\n}\n\n",
            "renaming": {
                "FUN_08002384": "process_data_08002384",
                "param_1": "data",
                "uVar1": "shiftedValue",
                "iVar2": "flagStatus",
                "uVar3": "divisor",
                "iVar4": "startValue",
                "iVar5": "endValue",
                "local_14": "loopCount"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_variable_08002470",
            "code": "\n\n\nvoid updateVariable_08002470(uint input)\n\n{\n  _DAT_e000ed0c = (input & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_variable_08002470",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "update_memory_08002494",
            "code": "\n\n\nvoid updateMemory_08002494(uint address,uint value,uint mask)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (value & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & mask;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "update_memory_08002494",
                "param_1": "address",
                "param_2": "value",
                "param_3": "mask",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_080024f8",
            "code": "\nvoid setBit_080024f8(uint input)\n\n{\n  if (-1 < (int)input) {\n    *(int *)((input >> 5) * 4 + -0x1fff1f00) = 1 << (input & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_080024f8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "validate_input_08002514",
            "code": "\n\n\nundefined4 validate_input_08002514(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "validate_input_08002514",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_at_index_08002540",
            "code": "\nvoid setBitAtIndex_08002540(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)(((index >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_at_index_08002540",
                "param_1": "index"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "update_flag_08002560",
            "code": "\n\n\nvoid updateFlag_08002560(int flag)\n\n{\n  if (flag != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "update_flag_08002560",
                "param_1": "flag"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "FUN_08002582"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "execute_startup_routine_08002582",
            "code": "\nvoid execute_startup_routine_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "execute_startup_routine_08002582"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "set_configuration_0800258c",
            "code": "\n\n\nundefined4 set_configuration_0800258c(uint **config_ptr)\n\n{\n  uint *value_ptr;\n  \n  if (*(char *)((int)config_ptr + 0x21) != '\\x02') {\n    config_ptr[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **config_ptr = **config_ptr & 0xfffffff1;\n  **config_ptr = **config_ptr & 0xfffffffe;\n  value_ptr = *config_ptr;\n  if (value_ptr == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (value_ptr == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (value_ptr == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (value_ptr == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (value_ptr == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (value_ptr == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)config_ptr + 0x21) = 1;\n  *(undefined *)(config_ptr + 8) = 0;\n  if (config_ptr[0xd] != (uint *)0x0) {\n    (*(code *)config_ptr[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "set_configuration_0800258c",
                "param_1": "config_ptr",
                "puVar1": "value_ptr"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "update_register_08002624",
            "code": "\n\n\nvoid updateRegister_08002624(uint *registerValues,uint *controlValues)\n\n{\n  uint *targetRegisterValues;\n  uint bitMask;\n  uint controlValueMask;\n  uint bitIndex;\n  uint controlValue;\n  uint newRegisterValue;\n  int bitOffset;\n  int registerIndex;\n  \n  newRegisterValue = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    controlValueMask = *controlValues & bitMask;\n    if (bitMask == controlValueMask) {\n      controlValue = controlValues[1];\n      if (controlValue == 0x12) {\n        newRegisterValue = controlValues[3] + 0xc;\n      }\n      else if (controlValue < 0x13) {\n        if (controlValue == 2) {\n          newRegisterValue = controlValues[3] + 8;\n        }\n        else if (controlValue < 3) {\n          if (controlValue == 0) goto LAB_08002776;\n          if (controlValue == 1) {\n            newRegisterValue = controlValues[3];\n          }\n        }\n        else if (controlValue == 3) {\n          newRegisterValue = 0;\n        }\n        else if (controlValue == 0x11) {\n          newRegisterValue = controlValues[3] + 4;\n        }\n      }\n      else if (controlValue == 0x10210000) {\nLAB_08002776:\n        if (controlValues[2] == 0) {\n          newRegisterValue = 4;\n        }\n        else if (controlValues[2] == 1) {\n          registerValues[4] = bitMask;\n          newRegisterValue = 8;\n        }\n        else {\n          registerValues[5] = bitMask;\n          newRegisterValue = 8;\n        }\n      }\n      else if (controlValue < 0x10210001) {\n        if ((controlValue == 0x10110000) || (controlValue == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((controlValue == 0x10310000) || ((controlValue == 0x10320000 || (controlValue == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = bitIndex;\n      targetRegisterValues = registerValues;\n      if (0xff < controlValueMask) {\n        bitMask = bitIndex - 8;\n        targetRegisterValues = registerValues + 1;\n      }\n      *targetRegisterValues = *targetRegisterValues & ~(0xf << (bitMask << 2 & 0xff)) | newRegisterValue << (bitMask << 2 & 0xff);\n      if ((controlValues[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        bitOffset = (bitIndex & 3) << 2;\n        if (registerValues == (uint *)0x40010800) {\n          registerIndex = 0;\n        }\n        else if (registerValues == (uint *)0x40010c00) {\n          registerIndex = 1;\n        }\n        else if (registerValues == (uint *)0x40011000) {\n          registerIndex = 2;\n        }\n        else if (registerValues == (uint *)0x40011400) {\n          registerIndex = 3;\n        }\n        else {\n          registerIndex = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << bitOffset) | registerIndex << bitOffset;\n        if ((controlValues[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~controlValueMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | controlValueMask;\n        }\n        if ((controlValues[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~controlValueMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | controlValueMask;\n        }\n        if ((controlValues[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~controlValueMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | controlValueMask;\n        }\n        if ((controlValues[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~controlValueMask;\n        }\n        else {\n          _DAT_4001040c = controlValueMask | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "update_register_08002624",
                "param_1": "registerValues",
                "param_2": "controlValues",
                "puVar1": "targetRegisterValues",
                "uVar2": "bitMask",
                "uVar3": "controlValueMask",
                "uVar4": "bitIndex",
                "uVar5": "controlValue",
                "uVar6": "newRegisterValue",
                "iVar7": "bitOffset",
                "iVar8": "registerIndex"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bit_08002810",
            "code": "\nundefined4 check_bit_08002810(int data_pointer,uint bitmask)\n\n{\n  if ((bitmask & *(uint *)(data_pointer + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "data_pointer",
                "param_2": "bitmask"
            },
            "calling": [
                "FUN_08004c48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_param_value_0800281e",
            "code": "\nvoid setParamValue_0800281e(int objAddress,int value,int shiftValue)\n\n{\n  if (shiftValue == 0) {\n    *(int *)(objAddress + 0x10) = value << 0x10;\n    return;\n  }\n  *(int *)(objAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_param_value_0800281e",
                "param_1": "objAddress",
                "param_2": "value",
                "param_3": "shiftValue"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_and_execute_0800282c",
            "code": "\n\n\nvoid updateAndExecute_0800282c(uint newValue)\n\n{\n  if ((_DAT_40010414 & newValue) != 0) {\n    _DAT_40010414 = newValue;\n    checkAndExecute();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_and_execute_0800282c",
                "param_1": "newValue",
                "check_and_execute_080060e4": "checkAndExecute"
            },
            "calling": [],
            "called": [
                "FUN_080060e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_flags_08002848",
            "code": "\nundefined4 updateFlags_08002848(int *ptr)\n\n{\n  if (*(char *)((int)ptr + 0x3e) == '@') {\n    if (ptr[20] == 0) {\n      *(uint *)(*ptr + 0x10) = ptr[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*ptr + 0x10) = ptr[17] & 0xffU | 1;\n    }\n  }\n  else if (ptr[4] == 0x4000) {\n    if (*(char *)((int)ptr + 0x3d) == '!') {\n      *(uint *)(*ptr + 0x10) = ptr[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*ptr + 0x10) = ptr[17] & 0xffU | 1;\n    }\n  }\n  else if (ptr[20] == 0) {\n    *(uint *)(*ptr + 0x10) = (uint)(ptr[17] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (ptr[20] == 1) {\n    *(uint *)(*ptr + 0x10) = (uint)(ptr[17] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_flags_08002848",
                "param_1": "ptr",
                "param_1[0x14]": "ptr[20]",
                "param_1[0x11]": "ptr[17]",
                "param_1[4]": "ptr[4]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "store_byte_from_offset_080028d2",
            "code": "\nundefined4 storeByteFromOffset_080028d2(int *ptr)\n\n{\n  *(uint *)(*ptr + 0x10) = ptr[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "store_byte_from_offset_080028d2",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "check_and_update_flags_080028de",
            "code": "\nundefined4 checkAndUpdateFlags_080028de(uint **param)\n\n{\n  uint *flagPtr;\n  \n  flagPtr = param[0xb];\n  if ((*(char *)((int)param + 0x3d) == '\\\"') &&\n     ((param14Ptr != (uint *)0x0 || (*(char *)((int)param + 0x3e) != '@')))) {\n    if ((param14Ptr == (uint *)0x0) && (param4Ptr == (uint *)0xc000)) {\n      **param = **param | 0x100;\n      param14Ptr = (uint *)((int)param14Ptr + 1);\n    }\n    else {\n      if (*(short *)((int)param + 0x2a) == 0) {\n        **param = **param | 0x200;\n      }\n      else if (*(short *)((int)param + 0x2a) == 1) {\n        if (flagPtr == (uint *)0xffff0000) {\n          **param = **param & 0xfffffbff;\n          flagPtr = *param;\n          if ((flagPtr[1] & 0x800) == 0) {\n            *flagPtr = *flagPtr | 0x200;\n          }\n          else {\n            *flagPtr = *flagPtr & 0xfffffbff;\n          }\n        }\n        else if (((flagPtr == (uint *)0x4) || (flagPtr == (uint *)0x8)) ||\n                (param[0xc] == (uint *)0x12)) {\n          **param = **param & 0xfffffbff;\n          **param = **param | 0x200;\n        }\n        else if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)param + 0x2a) == 2) {\n        if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param | 0x800;\n          **param = **param & 0xfffffbff;\n        }\n        flagPtr = *param;\n        if ((flagPtr[1] & 0x800) != 0) {\n          flagPtr[1] = flagPtr[1] | 0x1000;\n        }\n      }\n      else {\n        **param = **param | 0x400;\n        flagPtr = *param;\n        if ((flagPtr[1] & 0x800) != 0) {\n          flagPtr[1] = flagPtr[1] | 0x1000;\n        }\n      }\n      param14Ptr = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "check_and_update_flags_080028de",
                "param_1": "param",
                "puVar1": "flagPtr",
                "param_1[0x14]": "param14Ptr",
                "param_1[4]": "param4Ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_byte_array_08002ab8",
            "code": "\nundefined4 updateByteArray_08002ab8(int *array)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    bytePointer = (byte *)array[9];\n    array[9] = (int)(bytePointer + 1);\n    *(uint *)(*array + 0x10) = (uint)*bytePointer;\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_byte_array_08002ab8",
                "param_1": "array",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_array_element_08002ad8",
            "code": "\nundefined4 updateArrayElement_08002ad8(int *array)\n\n{\n  undefined *targetElement;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    targetElement = (undefined *)nextElementIndex;\n    nextElementIndex = (int)(targetElement + 1);\n    *targetElement = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_array_element_08002ad8",
                "param_1": "array",
                "puVar1": "targetElement",
                "param_1[9]": "nextElementIndex"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "validate_parameters_08002af8",
            "code": "\nundefined4 validate_parameters_08002af8(uint **parameter_list,uint *input_data,int data_length,uint *output_data)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)parameter_list + 0x3d) == '(') {\n    if (input_data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (data_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(parameter_list + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(parameter_list + 0xf) = 1;\n      ptr = *parameter_list;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **parameter_list = **parameter_list & 0xfffff7ff;\n      *(undefined *)((int)parameter_list + 0x3d) = 0x29;\n      *(undefined *)((int)parameter_list + 0x3e) = 0x20;\n      result = 0;\n      parameter_list[0x10] = (uint *)0x0;\n      parameter_list[9] = input_data;\n      *(short *)((int)parameter_list + 0x2a) = (short)data_length;\n      parameter_list[0xb] = output_data;\n      *(undefined2 *)(parameter_list + 10) = *(undefined2 *)((int)parameter_list + 0x2a);\n      *(undefined *)(parameter_list + 0xf) = 0;\n      (*parameter_list)[1] = (*parameter_list)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "validate_parameters_08002af8",
                "param_1": "parameter_list",
                "param_2": "input_data",
                "param_3": "data_length",
                "param_4": "output_data",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "process_parameters_08002b84",
            "code": "\nundefined4 processParameters_08002b84(uint **parameters,uint *valuePtr,int count,uint *dataPtr)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)parameters + 0x3d) == '(') {\n    if (valuePtr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(parameters + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(parameters + 0xf) = 1;\n      ptr = *parameters;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **parameters = **parameters & 0xfffff7ff;\n      *(undefined *)((int)parameters + 0x3d) = 0x2a;\n      *(undefined *)((int)parameters + 0x3e) = 0x20;\n      result = 0;\n      parameters[0x10] = (uint *)0x0;\n      parameters[9] = valuePtr;\n      *(short *)((int)parameters + 0x2a) = (short)count;\n      parameters[0xb] = dataPtr;\n      *(undefined2 *)(parameters + 10) = *(undefined2 *)((int)parameters + 0x2a);\n      *(undefined *)(parameters + 0xf) = 0;\n      (*parameters)[1] = (*parameters)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "process_parameters_08002b84",
                "param_1": "parameters",
                "param_2": "valuePtr",
                "param_3": "count",
                "param_4": "dataPtr",
                "uVar1": "result",
                "puVar2": "ptr",
                "param_1[0x10]": "parameters[0x10]",
                "param_1[9]": "parameters[9]",
                "param_1[0xb]": "parameters[0xb]"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "initiate_process_08002c10",
            "code": "\nundefined4 initiateProcess_08002c10(uint **processData)\n\n{\n  uint *dataPointer;\n  \n  if (*(char *)((int)processData + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)processData + 0x3d) = 0x28;\n  dataPointer = *processData;\n  if ((*dataPointer & 1) == 0) {\n    *dataPointer = *dataPointer | 1;\n  }\n  **processData = **processData | 0x400;\n  (*processData)[1] = (*processData)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "initiate_process_08002c10",
                "param_1": "processData",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_input_08002c54",
            "code": "\nundefined4 process_input_08002c54(int *input_data)\n\n{\n  char char_value;\n  byte *byte_ptr;\n  \n  char_value = *(char *)((int)input_data + 0x3d);\n  if (*(short *)((int)input_data + 0x2a) != 0) {\n    byte_ptr = (byte *)input_data[9];\n    input_data[9] = (int)(byte_ptr + 1);\n    *(uint *)(*input_data + 0x10) = (uint)*byte_ptr;\n    *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    if ((*(short *)((int)input_data + 0x2a) == 0) && (char_value == ')')) {\n      *(uint *)(*input_data + 4) = *(uint *)(*input_data + 4) & 0xfffffbff;\n      input_data[0xc] = 0x21;\n      *(undefined *)((int)input_data + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_input_08002c54",
                "param_1": "input_data",
                "cVar1": "char_value",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "update_data_08002ca6",
            "code": "\nundefined4 updateData_08002ca6(int *data)\n\n{\n  char flag;\n  undefined *ptr;\n  \n  flag = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (flag == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "update_data_08002ca6",
                "param_1": "data",
                "cVar1": "flag",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "process_parameters_08002cf2",
            "code": "\nundefined4 process_parameters_08002cf2(int *input_data,undefined4 flag_1,undefined4 flag_2,undefined4 param_4)\n\n{\n  undefined2 value;\n  uint flags;\n  \n  flags = *(uint *)(*input_data + 0x18);\n  if ((flags & 0x80) == 0) {\n    value = *(undefined2 *)(input_data + 3);\n  }\n  else {\n    value = *(undefined2 *)(input_data + 6);\n  }\n  process_parameters_08002cf2_08004e74(input_data,(*(uint *)(*input_data + 0x18) & 4) == 0,value,flags,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "process_parameters_08002cf2",
                "param_1": "input_data",
                "param_2": "flag_1",
                "param_3": "flag_2",
                "uVar1": "value",
                "uVar2": "flags"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "process_param_08002d1c",
            "code": "\nundefined4 processParam_08002d1c(uint **param)\n\n{\n  if (((param[11] == (uint *)0x4) || (param[11] == (uint *)0x8)) &&\n     (*(char *)((int)param + 0x3d) == '(')) {\n    param[11] = (uint *)0xffff0000;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    param[12] = (uint *)0x0;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    executeAndInitiate();\n  }\n  else if (*(char *)((int)param + 0x3d) == '!') {\n    param[11] = (uint *)0xffff0000;\n    param[12] = (uint *)0x21;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    (*param)[1] = (*param)[1] & 0xfffff8ff;\n    (*param)[5] = 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*param)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "process_param_08002d1c",
                "param_1": "param",
                "param_1[0xb]": "param[11]",
                "param_1[0xc]": "param[12]",
                "execute_and_initiate_08004ec4()": "executeAndInitiate()"
            },
            "calling": [
                "FUN_08003520"
            ],
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "FUNC_08002db2",
            "code": "\nundefined4 FUNC_08002db2(uint **param_1)\n\n{\n  char cVar1;\n  uint *puVar2;\n  \n  cVar1 = *(char *)((int)param_1 + 0x3d);\n  puVar2 = param_1[0xb];\n  if ((*(short *)(param_1 + 10) == 0) && (cVar1 == '!')) {\n    if ((puVar2 == (uint *)0x4) || ((puVar2 == (uint *)0x8 || (puVar2 == (uint *)0xffff0000)))) {\n      (*param_1)[1] = (*param_1)[1] & 0xfffff8ff;\n      **param_1 = **param_1 | 0x200;\n      param_1[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_1 + 0x3d) = 0x20;\n      if (*(char *)((int)param_1 + 0x3e) == '@') {\n        *(undefined *)((int)param_1 + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)param_1 + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*param_1)[1] = (*param_1)[1] & 0xfffff8ff;\n      param_1[0xc] = (uint *)0x11;\n      *(undefined *)((int)param_1 + 0x3e) = 0;\n      *(undefined *)((int)param_1 + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((cVar1 == '!') || ((*(char *)((int)param_1 + 0x3e) == '@' && (cVar1 == '\\\"')))) {\n    if (*(short *)((int)param_1 + 0x2a) == 0) {\n      (*param_1)[1] = (*param_1)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)param_1 + 0x3e) == '@') {\n      if (param_1[0x14] == (uint *)0x0) {\n        if (param_1[0x13] == (uint *)0x1) {\n          (*param_1)[4] = (uint)param_1[0x12] & 0xff;\n          param_1[0x14] = (uint *)((int)param_1[0x14] + 2);\n        }\n        else {\n          (*param_1)[4] = (uint)((int)param_1[0x12] << 0x10) >> 0x18;\n          param_1[0x14] = (uint *)((int)param_1[0x14] + 1);\n        }\n      }\n      else if (param_1[0x14] == (uint *)0x1) {\n        (*param_1)[4] = (uint)param_1[0x12] & 0xff;\n        param_1[0x14] = (uint *)((int)param_1[0x14] + 1);\n      }\n      else if (param_1[0x14] == (uint *)0x2) {\n        if (*(char *)((int)param_1 + 0x3d) == '\\\"') {\n          **param_1 = **param_1 | 0x100;\n        }\n        else if (*(char *)((int)param_1 + 0x3d) == '!') {\n          puVar2 = param_1[9];\n          param_1[9] = (uint *)((int)puVar2 + 1);\n          (*param_1)[4] = (uint)*(byte *)puVar2;\n          *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      puVar2 = param_1[9];\n      param_1[9] = (uint *)((int)puVar2 + 1);\n      (*param_1)[4] = (uint)*(byte *)puVar2;\n      *(short *)((int)param_1 + 0x2a) = *(short *)((int)param_1 + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "FUNC_08002db2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "process_param1_08002efc",
            "code": "\nundefined4 processParam1_08002efc(uint **paramArray)\n\n{\n  uint *pointerToValue;\n  \n  pointerToValue = paramArray[0xb];\n  if (*(char *)((int)paramArray + 0x3d) == '!') {\n    if (*(short *)((int)paramArray + 0x2a) == 0) {\n      if (((pointerToValue == (uint *)0x4) || (pointerToValue == (uint *)0x8)) || (pointerToValue == (uint *)0xffff0000)) {\n        (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n        **paramArray = **paramArray | 0x200;\n        paramArray[0xc] = (uint *)0x0;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        if (*(char *)((int)paramArray + 0x3e) == '@') {\n          *(undefined *)((int)paramArray + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)((int)paramArray + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n        paramArray[0xc] = (uint *)0x11;\n        *(undefined *)((int)paramArray + 0x3e) = 0;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      pointerToValue = paramArray[9];\n      paramArray[9] = (uint *)((int)pointerToValue + 1);\n      (*paramArray)[4] = (uint)*(byte *)pointerToValue;\n      *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "process_param1_08002efc",
                "param_1": "paramArray",
                "puVar1": "pointerToValue"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "process_param_08002f9c",
            "code": "\nundefined4 processParam_08002f9c(uint **param)\n\n{\n  uint *pointerVar1;\n  \n  if (*(char *)((int)param + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)param + 0x2a) < 4) {\n      if (*(ushort *)((int)param + 0x2a) - 2 < 2) {\n        if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n          **param = **param | 0x800;\n        }\n        (*param)[1] = (*param)[1] & 0xfffffbff;\n      }\n      else {\n        if (param[0xb] == (uint *)0x2) {\n          **param = **param | 0x400;\n        }\n        else {\n          **param = **param & 0xfffffbff;\n        }\n        (*param)[1] = (*param)[1] & 0xfffff8ff;\n        pointerVar1 = param[9];\n        param[9] = (uint *)((int)pointerVar1 + 1);\n        *(char *)pointerVar1 = (char)(*param)[4];\n        *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        param[0xc] = (uint *)0x0;\n        if (*(char *)((int)param + 0x3e) == '@') {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)param + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      pointerVar1 = param[9];\n      param[9] = (uint *)((int)pointerVar1 + 1);\n      *(char *)pointerVar1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "process_param_08002f9c",
                "param_1": "param",
                "puVar1": "pointerVar1"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "process_parameter_0800306c",
            "code": "\nundefined4 processParameter_0800306c(uint **parameters)\n\n{\n  uint *pointerValue;\n  \n  pointerValue = parameterB;\n  if (*(short *)((int)parameters + 0x2a) == 3) {\n    if (((pointerValue == (uint *)0x4) || (pointerValue == (uint *)0x8)) || (pointerValue == (uint *)0xffff0000)) {\n      **parameters = **parameters & 0xfffffbff;\n    }\n    pointerValue = parameter9;\n    parameter9 = (uint *)((int)pointerValue + 1);\n    *(char *)pointerValue = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n  }\n  else if (*(short *)((int)parameters + 0x2a) == 2) {\n    if (((pointerValue == (uint *)0x4) || (pointerValue == (uint *)0x8)) || (pointerValue == (uint *)0xffff0000)) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffffcff;\n      **parameters = **parameters | 0x200;\n    }\n    else {\n      if (pointerValue == (uint *)0x2) {\n        **parameters = **parameters | 0x400;\n      }\n      else {\n        **parameters = **parameters & 0xfffffbff;\n      }\n      (*parameters)[1] = (*parameters)[1] & 0xfffffcff;\n    }\n    pointerValue = parameter9;\n    parameter9 = (uint *)((int)pointerValue + 1);\n    *(char *)pointerValue = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    pointerValue = parameter9;\n    parameter9 = (uint *)((int)pointerValue + 1);\n    *(char *)pointerValue = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    parameters[0xc] = (uint *)0x0;\n    if (*(char *)((int)parameters + 0x3e) == '@') {\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    pointerValue = parameter9;\n    parameter9 = (uint *)((int)pointerValue + 1);\n    *(char *)pointerValue = (char)(*parameters)[4];\n    *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "process_parameter_0800306c",
                "param_1": "parameters",
                "puVar1": "pointerValue",
                "param_1[0xb]": "parameterB",
                "param_1[9]": "parameter9"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "process_configuration_0800316c",
            "code": "\nvoid processConfiguration_0800316c(uint **configParams)\n\n{\n  int result;\n  uint *counter;\n  uint *paramPtr;\n  \n  if (*(byte *)((int)configParams + 0x3d) - 0x29 < 2) {\n    configParams[0xc] = (uint *)0x0;\n    *(undefined *)((int)configParams + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)configParams + 0x3d) != '`') && (((*configParams)[1] & 0x800) == 0)) {\n      *(undefined *)((int)configParams + 0x3d) = 0x20;\n    }\n    configParams[0xc] = (uint *)0x0;\n    *(undefined *)((int)configParams + 0x3e) = 0;\n  }\n  **configParams = **configParams & 0xfffff7ff;\n  paramPtr = *configParams;\n  if ((paramPtr[1] & 0x800) == 0) {\n    if (*(char *)((int)configParams + 0x3d) == '`') {\n      *(undefined *)((int)configParams + 0x3d) = 0x20;\n      configParams[0x10] = (uint *)0x0;\n      if ((paramPtr[5] & 0x40) != 0) {\n        counter = configParams[9];\n        configParams[9] = (uint *)((int)counter + 1);\n        *(char *)counter = (char)paramPtr[4];\n      }\n      **configParams = **configParams & 0xfffffffe;\n      FUNC_0800316a(configParams);\n    }\n    else {\n      if ((paramPtr[5] & 0x40) != 0) {\n        counter = configParams[9];\n        configParams[9] = (uint *)((int)counter + 1);\n        *(char *)counter = (char)paramPtr[4];\n      }\n      checkAndInitiateProcess(configParams);\n    }\n  }\n  else {\n    paramPtr[1] = paramPtr[1] & 0xfffff7ff;\n    if (*(char *)((int)configParams[0xd] + 0x21) == '\\x01') {\n      configParams[0xe][0xd] = (uint)&label1;\n      result = setConfiguration(configParams[0xe]);\n      if (result != 0) {\n        if (((*configParams)[5] & 0x40) != 0) {\n          paramPtr = configParams[9];\n          configParams[9] = (uint *)((int)paramPtr + 1);\n          *(char *)paramPtr = (char)(*configParams)[4];\n        }\n        **configParams = **configParams & 0xfffffffe;\n        *(undefined *)((int)configParams + 0x3d) = 0x20;\n        (*(code *)configParams[0xe][0xd])();\n      }\n    }\n    else {\n      configParams[0xd][0xd] = (uint)&label1;\n      result = setConfiguration(configParams[0xd]);\n      if (result != 0) {\n        **configParams = **configParams & 0xfffffffe;\n        *(undefined *)((int)configParams + 0x3d) = 0x20;\n        (*(code *)configParams[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)configParams + 0x3d) == '(') && (((uint)configParams[0x10] & 4) != 0)) {\n    configParams[0xb] = (uint *)0xffff0000;\n    configParams[0xc] = (uint *)0x0;\n    *(undefined *)((int)configParams + 0x3d) = 0x20;\n    *(undefined *)((int)configParams + 0x3e) = 0;\n    executeAndInitiateFunc(configParams);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "process_configuration_0800316c",
                "param_1": "configParams",
                "iVar1": "result",
                "puVar2": "counter",
                "puVar3": "paramPtr",
                "check_and_initiate_process_08004ef4": "checkAndInitiateProcess",
                "set_configuration_0800258c": "setConfiguration",
                "LAB_080035fc_1": "label1",
                "execute_and_initiate_08004ec4": "executeAndInitiateFunc"
            },
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_configuration_080032b4",
            "code": "\nundefined4 process_configuration_080032b4(uint **config_params)\n\n{\n  char config_char;\n  uint *param_ptr;\n  uint *tmp_ptr;\n  \n  config_char = *(char *)((int)config_params + 0x3d);\n  (*config_params)[1] = (*config_params)[1] & 0xfffff8ff;\n  **config_params = **config_params | 1;\n  **config_params = **config_params & 0xfffffbff;\n  param_ptr = *config_params;\n  if ((param_ptr[1] & 0x800) != 0) {\n    if ((*(char *)((int)config_params + 0x3d) == '\\\"') || (*(char *)((int)config_params + 0x3d) == '*')) {\n      *(short *)((int)config_params + 0x2a) = (short)*(undefined4 *)(*config_params[0xe] + 4);\n    }\n    else {\n      *(short *)((int)config_params + 0x2a) = (short)*(undefined4 *)(*config_params[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)config_params + 0x2a) != 0) {\n    if ((param_ptr[5] & 4) != 0) {\n      tmp_ptr = config_params[9];\n      config_params[9] = (uint *)((int)tmp_ptr + 1);\n      *(char *)tmp_ptr = (char)param_ptr[4];\n      *(short *)((int)config_params + 0x2a) = *(short *)((int)config_params + 0x2a) + -1;\n    }\n    if (((*config_params)[5] & 0x40) != 0) {\n      param_ptr = config_params[9];\n      config_params[9] = (uint *)((int)param_ptr + 1);\n      *(char *)param_ptr = (char)(*config_params)[4];\n      *(short *)((int)config_params + 0x2a) = *(short *)((int)config_params + 0x2a) + -1;\n    }\n    config_params[0x10] = (uint *)((uint)config_params[0x10] | 4);\n  }\n  if (config_params[0x10] == (uint *)0x0) {\n    if (((config_char == '(') || (config_char == '*')) || (config_char == ')')) {\n      config_params[0xb] = (uint *)0xffff0000;\n      config_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)config_params + 0x3d) = 0x20;\n      *(undefined *)((int)config_params + 0x3e) = 0;\n      execute_and_initiate_08004ec4();\n    }\n    else if ((config_params[0xc] == (uint *)0x22) || (config_char == '\\\"')) {\n      config_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)config_params + 0x3d) = 0x20;\n      *(undefined *)((int)config_params + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    process_configuration_080032b4_0800316c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_configuration_080032b4",
                "param_1": "config_params",
                "cVar1": "config_char",
                "puVar2": "param_ptr",
                "puVar3": "tmp_ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_function_080033b8",
            "code": "\nvoid process_function_080033b8(int *input_param)\n\n{\n  int param_value;\n  uint flag_value;\n  uint flag_mask;\n  uint byte_value;\n  \n  param_value = *input_param;\n  byte_value = *(uint *)(param_value + 0x18);\n  flag_value = *(uint *)(param_value + 0x14);\n  flag_mask = *(uint *)(param_value + 4);\n  if ((*(char *)((int)input_param + 0x3e) == '\\x10') || (*(char *)((int)input_param + 0x3e) == '@')) {\n    if (((flag_value & 0x10001) == 0) || ((flag_mask & 0x200) == 0)) {\n      if (((flag_value & 0x10008) == 0) || ((flag_mask & 0x200) == 0)) {\n        if (((flag_value & 0x10002) != 0) && ((flag_mask & 0x200) != 0)) {\n          check_and_update_flags_080028de(input_param);\n        }\n      }\n      else {\n        store_byte_from_offset_080028d2(input_param);\n      }\n    }\n    else {\n      update_flags_08002848(input_param);\n    }\n    if ((byte_value & 0x100004) == 0) {\n      if ((((flag_value & 0x10040) != 0) && ((flag_mask & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_param_08002f9c(input_param);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((flag_mask & 0x200) != 0)) {\n        process_parameter_0800306c(input_param);\n        return;\n      }\n    }\n    else {\n      if ((((flag_value & 0x10080) != 0) && ((flag_mask & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        FUNC_08002db2(input_param);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((flag_mask & 0x200) != 0)) {\n        process_param1_08002efc(input_param);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag_value & 0x10002) != 0) && ((flag_mask & 0x200) != 0)) {\n      process_parameters_08002cf2();\n      return;\n    }\n    if (((flag_value & 0x10010) != 0) && ((flag_mask & 0x200) != 0)) {\n      process_configuration_080032b4(input_param);\n      return;\n    }\n    if ((byte_value & 0x100004) == 0) {\n      if ((((flag_value & 0x10040) != 0) && ((flag_mask & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        update_data_08002ca6(input_param);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((flag_mask & 0x200) != 0)) {\n        update_array_element_08002ad8(input_param);\n      }\n    }\n    else {\n      if ((((flag_value & 0x10080) != 0) && ((flag_mask & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_input_08002c54(input_param);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((flag_mask & 0x200) != 0)) {\n        update_byte_array_08002ab8(input_param);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_function_080033b8",
                "param_1": "input_param",
                "iVar1": "param_value",
                "uVar2": "flag_value",
                "uVar3": "flag_mask",
                "uVar4": "byte_value"
            },
            "calling": [],
            "called": [
                "FUN_08002db2",
                "FUN_080028de",
                "FUN_08002f9c",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_08002ca6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "process_flags_08003520",
            "code": "\nvoid processFlags_08003520(uint **parameters)\n\n{\n  char charValue;\n  uint *pointerValue;\n  uint value1;\n  uint value2;\n  \n  pointerValue = *parameters;\n  value1 = pointerValue[5];\n  value2 = pointerValue[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 1);\n    pointerValue[5] = 0xfffffeff;\n    **parameters = **parameters | 0x8000;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 2);\n    (*parameters)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    charValue = *(char *)((int)parameters + 0x3d);\n    if (((*(char *)((int)parameters + 0x3e) == ' ') && (*(short *)((int)parameters + 0x2a) == 0)) &&\n       (((charValue == '!' || (charValue == ')')) || ((charValue == '(' && (parameters[0xc] == (uint *)0x21)))))) {\n      process_param_08002d1c(parameters);\n    }\n    else {\n      parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n      if (*(char *)((int)parameters + 0x3e) == '\\x10') {\n        **parameters = **parameters | 0x200;\n      }\n      (*parameters)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 8);\n    (*parameters)[5] = 0xfffff7ff;\n  }\n  if (parameters[0x10] != (uint *)0x0) {\n    process_configuration_0800316c(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "process_flags_08003520",
                "param_1": "parameters",
                "cVar1": "charValue",
                "puVar2": "pointerValue",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "delay_function_0800365c",
            "code": "\nvoid delayFunction_0800365c(int inputValue)\n\n{\n  bool isNotZero;\n  int counter;\n  \n  counter = inputValue * (DAT_20000084 / 8000);\n  do {\n    isNotZero = counter != 0;\n    counter = counter + -1;\n  } while (isNotZero);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "delay_function_0800365c",
                "param_1": "inputValue",
                "local_4": "counter",
                "bVar1": "isNotZero"
            },
            "calling": [
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "check_status_and_delay_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 check_status_and_delay_08003688(uint *status_parameters)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint status;\n  bool flag;\n  \n  if ((*status_parameters & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (status_parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      status = status_parameters[1];\n      if (status == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (status == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (status == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (status_parameters[1] == 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*status_parameters & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (status_parameters[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | status_parameters[5] << 3;\n    }\n    else if (status_parameters[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | status_parameters[5] << 3;\n    }\n  }\n  if ((*status_parameters & 8) != 0) {\n    if (status_parameters[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      custom_delay_function(1);\n    }\n  }\n  if ((*status_parameters & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    status = status_parameters[3];\n    if (status == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (status == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (status == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (status_parameters[3] == 0) {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (status_parameters[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (status_parameters[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (status_parameters[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | status_parameters[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | status_parameters[8] | status_parameters[9];\n        _DAT_42420060 = 1;\n        start_time = get_current_time();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_time = get_current_time();\n        } while ((uint)(current_time - start_time) < 3);\n        return 3;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "check_status_and_delay_08003688",
                "param_1": "status_parameters",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "result",
                "uVar4": "status",
                "bVar5": "flag",
                "get_data_08001cc4": "get_current_time",
                "delay_function_0800365c": "custom_delay_function"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_delay_08003a68",
            "code": "\n\n\nuint calculateDelay_08003a68(void)\n\n{\n  uint uVar1;\n  undefined2 result;\n  undefined4 mask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  value3 = 0x10100f0e;\n  value2 = 0xd0c0b0a;\n  value1 = 0x9080706;\n  mask = 0x5040302;\n  result = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&mask + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&result - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "local_1c": "result",
                "uStack_18": "mask",
                "uStack_14": "value1",
                "uStack_10": "value2",
                "uStack_c": "value3"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "validate_and_update_memory_08003ad4",
            "code": "\n\n\nundefined4 validate_and_update_memory_08003ad4(uint *param_array,uint array_length)\n\n{\n  int iVar1;\n  int iVar2;\n  uint temp_var;\n  \n  if ((_DAT_40022000 & 7) < array_length) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | array_length;\n    if (array_length != (array_length & 7)) {\n      return 1;\n    }\n  }\n  if ((*param_array & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | param_array[2];\n  }\n  if ((*param_array & 1) != 0) {\n    temp_var = param_array[1];\n    if (temp_var == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((temp_var != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = temp_var | _DAT_40021004 & 0xfffffffc;\n    iVar1 = get_data();\n    if (param_array[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = get_data();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (param_array[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = get_data();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = get_data();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (array_length < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | array_length;\n    if (array_length != (array_length & 7)) {\n      return 1;\n    }\n  }\n  if ((*param_array & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | param_array[3];\n  }\n  if ((*param_array & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | param_array[4] << 3;\n  }\n  temp_var = calculate_delay();\n  DAT_20000084 = temp_var >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validate_and_update_memory_08003ad4_08001c3c(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "validate_and_update_memory_08003ad4",
                "param_1": "param_array",
                "param_2": "array_length",
                "uVar3": "temp_var",
                "get_data_08001cc4": "get_data",
                "calculate_delay_08003a68": "calculate_delay"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "initialize_device_08003afa",
            "code": "\n\n\nundefined4 initialize_device_08003afa(uint *device_flags,uint input_param)\n\n{\n  int start_time;\n  int current_time;\n  uint delay;\n  \n  if ((*device_flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | device_flags[2];\n  }\n  if ((*device_flags & 1) != 0) {\n    delay = device_flags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_time();\n    if (device_flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (device_flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (input_param < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | input_param;\n    if (input_param != (input_param & 7)) {\n      return 1;\n    }\n  }\n  if ((*device_flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | device_flags[3];\n  }\n  if ((*device_flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | device_flags[4] << 3;\n  }\n  delay = calculate_delay();\n  DAT_20000084 = delay >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validate_and_update_memory(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "initialize_device_08003afa",
                "param_1": "device_flags",
                "param_2": "input_param",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "delay",
                "get_data_08001cc4": "get_current_time",
                "calculate_delay_08003a68": "calculate_delay",
                "validate_and_update_memory_08001c3c": "validate_and_update_memory"
            },
            "calling": [
                "FUN_08003ad4"
            ],
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_data_value_08003c44",
            "code": "\nundefined4 get_data_value_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_data_value_08003c44"
            },
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "extracted_data_shifted_08003c50",
            "code": "\n\n\nuint extracted_data_shifted_08003c50(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "extracted_data_shifted_08003c50",
                "uVar1": "data_value",
                "get_data_value_08003c44": "get_data_value"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "calculate_shifted_value_08003c70",
            "code": "\n\n\nuint calculateShiftedValue_08003c70(void)\n\n{\n  uint dataValue;\n  \n  dataValue = getDataValue();\n  return dataValue >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "calculate_shifted_value_08003c70",
                "uVar1": "dataValue",
                "get_data_value_08003c44": "getDataValue"
            },
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "configure_hardware_registers_08003c90",
            "code": "\n\n\nundefined4 configureHardwareRegisters_08003c90(uint *configuration)\n\n{\n  uint registerValue1;\n  uint registerValue2;\n  int initialValue;\n  int currentValue;\n  bool isFlagSet;\n  \n  if ((*configuration & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = get_data_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_08001cc4();\n        if (100 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (configuration[1] & 0x300))) {\n      registerValue2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      registerValue1 = _DAT_40021020 & 1;\n      _DAT_40021020 = registerValue2;\n      if (registerValue1 != 0) {\n        initialValue = get_data_08001cc4();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_data_08001cc4();\n          if (5000 < (uint)(currentValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | configuration[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*configuration & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | configuration[2];\n  }\n  if ((*configuration & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | configuration[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "configure_hardware_registers_08003c90",
                "param_1": "configuration",
                "uVar1": "registerValue1",
                "uVar2": "registerValue2",
                "iVar3": "initialValue",
                "iVar4": "currentValue",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_shifted_value_08003da4",
            "code": "\n\n\nuint calculate_shifted_value_08003da4(int input_value)\n\n{\n  uint result;\n  undefined2 some_value;\n  undefined4 multiplier_1;\n  undefined4 multiplier_2;\n  undefined4 multiplier_3;\n  undefined4 multiplier_4;\n  \n  multiplier_4 = 0x10100f0e;\n  multiplier_3 = 0xd0c0b0a;\n  multiplier_2 = 0x9080706;\n  multiplier_1 = 0x5040302;\n  some_value = 0x201;\n  if (input_value == 2) {\n    result = calculate_shifted_value_08003da4_08003c70();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&some_value - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&multiplier_1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_shifted_value_08003da4",
                "param_1": "input_value",
                "uVar1": "result",
                "local_24": "some_value",
                "uStack_20": "multiplier_1",
                "uStack_1c": "multiplier_2",
                "uStack_18": "multiplier_3",
                "uStack_14": "multiplier_4"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "initialize_flags_08003ea0",
            "code": "\n\n\nvoid initializeFlags_08003ea0(uint **flags)\n\n{\n  if (((**flags & 2) != 0) && (((*flags)[1] & 2) != 0)) {\n    executeCallback();\n    (*flags)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)flags + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "initialize_flags_08003ea0",
                "param_1": "flags",
                "execute_callback_08004d18": "executeCallback"
            },
            "calling": [],
            "called": [
                "FUN_08004d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "initialize_and_set_registers_08003ed8",
            "code": "\nvoid initialize_and_set_registers_08003ed8(uint **register_array)\n\n{\n  uint *register_ptr;\n  \n  *(undefined *)((int)register_array + 0x3d) = 2;\n  register_ptr = *register_array;\n  if ((register_ptr[8] & 0x1111) == 0) {\n    if ((register_ptr[8] & 0x444) == 0) {\n      *register_ptr = *register_ptr & 0xfffffffe;\n    }\n  }\n  initialize_registers(register_array);\n  *(undefined *)((int)register_array + 0x3d) = 0;\n  *(undefined *)(register_array + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "initialize_and_set_registers_08003ed8",
                "param_1": "register_array",
                "puVar1": "register_ptr",
                "initialize_registers_08004b34": "initialize_registers"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "process_parameters_08003f18",
            "code": "\nvoid processParameters_08003f18(int *parameters)\n\n{\n  int value;\n  \n  value = *parameters;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(parameters + 7) = 1;\n    if ((*(uint *)(*parameters + 0x18) & 3) == 0) {\n      executeIfParamSet();\n      FUNC_08003f14(parameters);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(parameters + 7) = 0;\n  }\n  value = *parameters;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(parameters + 7) = 2;\n    if ((*(uint *)(*parameters + 0x18) & 0x300) == 0) {\n      executeIfParamSet(parameters);\n      FUNC_08003f14(parameters);\n    }\n    else {\n      FUNC_08003f12(parameters);\n    }\n    *(undefined *)(parameters + 7) = 0;\n  }\n  value = *parameters;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(parameters + 7) = 4;\n    if ((*(uint *)(*parameters + 0x1c) & 3) == 0) {\n      executeIfParamSet(parameters);\n      FUNC_08003f14(parameters);\n    }\n    else {\n      FUNC_08003f12(parameters);\n    }\n    *(undefined *)(parameters + 7) = 0;\n  }\n  value = *parameters;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(parameters + 7) = 8;\n    if ((*(uint *)(*parameters + 0x1c) & 0x300) == 0) {\n      executeIfParamSet(parameters);\n      FUNC_08003f14(parameters);\n    }\n    else {\n      FUNC_08003f12(parameters);\n    }\n    *(undefined *)(parameters + 7) = 0;\n  }\n  value = *parameters;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    executeValidCallback(parameters);\n  }\n  value = *parameters;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800417a(parameters);\n  }\n  value = *parameters;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08003f16(parameters);\n  }\n  value = *parameters;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_08004178(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "process_parameters_08003f18",
                "param_1": "parameters",
                "iVar1": "value",
                "execute_if_valid_callback_08004e12": "executeValidCallback",
                "execute_function_if_param_set_08004df8": "executeIfParamSet"
            },
            "calling": [
                "FUN_08004e20"
            ],
            "called": [
                "FUN_0800417a",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bits_08004092",
            "code": "\nvoid updateBits_08004092(int dataPtr,uint bitIndex,int newBits)\n\n{\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(dataPtr + 0x20) = *(uint *)(dataPtr + 0x20) | newBits << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bits_08004092",
                "param_1": "dataPtr",
                "param_2": "bitIndex",
                "param_3": "newBits"
            },
            "calling": [
                "FUN_080040b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "update_and_reset_080040b0",
            "code": "\nundefined4 updateAndReset_080040b0(uint **inputArray,undefined4 value)\n\n{\n  uint *tempPtr;\n  \n  update_bits_08004092(*inputArray,value,0);\n  if (((*inputArray == (uint *)0x40012c00) && ((CONSTANT_2 & 0x1111) == 0)) &&\n     ((CONSTANT_2 & 0x444) == 0)) {\n    CONSTANT_3 = CONSTANT_3 & 0xffff7fff;\n  }\n  tempPtr = *inputArray;\n  if (((tempPtr[8] & 0x1111) == 0) && ((tempPtr[8] & 0x444) == 0)) {\n    *tempPtr = *tempPtr & 0xfffffffe;\n  }\n  *(undefined *)((int)inputArray + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "update_and_reset_080040b0",
                "param_1": "inputArray",
                "param_2": "value",
                "puVar1": "tempPtr",
                "uRam40012c20": "CONSTANT_2",
                "uRam40012c44": "CONSTANT_3"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004092"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_data_with_flag_08004110",
            "code": "\nvoid updateDataWithFlag_08004110(int dataAddress,uint flagPosition,int newFlagValue)\n\n{\n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & ~(4 << (flagPosition & 0xff));\n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) | newFlagValue << (flagPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_data_with_flag_08004110",
                "param_1": "dataAddress",
                "param_2": "flagPosition",
                "param_3": "newFlagValue"
            },
            "calling": [
                "FUN_0800412c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "update_flags_and_data_0800412c",
            "code": "\nundefined4 update_flags_and_data_0800412c(uint **data_ptr,undefined4 flag)\n\n{\n  uint *ptr;\n  \n  update_data_with_flag_08004110(*data_ptr,flag,0);\n  ptr = *data_ptr;\n  if (((flags & 0x1111) == 0) && ((flags & 0x444) == 0)) {\n    data_flag = data_flag & 0xffff7fff;\n  }\n  ptr = *data_ptr;\n  if (((flags & 0x1111) == 0) && ((flags & 0x444) == 0)) {\n    *ptr = *ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "update_flags_and_data_0800412c",
                "param_1": "data_ptr",
                "param_2": "flag",
                "puVar1": "ptr",
                "puVar1[8]": "flags",
                "puVar1[0x11]": "data_flag"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "clear_flags_0800417c",
            "code": "\nvoid clearFlags_0800417c(int *flags)\n\n{\n  *(uint *)(*flags + 0xc) = *(uint *)(*flags + 0xc) & 0xfffffedf;\n  *(uint *)(*flags + 0x14) = *(uint *)(*flags + 0x14) & 0xfffffffe;\n  *(undefined *)((int)flags + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "clear_flags_0800417c",
                "param_1": "flags"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "parse_data_08004198",
            "code": "\nundefined4 parse_data_08004198(int *data)\n\n{\n  short remaining_iterations;\n  byte *current_byte;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (value_at_index_2 == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data_ptr & 0x1ff;\n    if (value_at_index_4 == 0) {\n      data_ptr = data_ptr + 2;\n    }\n    else {\n      data_ptr = data_ptr + 1;\n    }\n  }\n  else {\n    current_byte = (byte *)data_ptr;\n    data_ptr = (int)(current_byte + 1);\n    *(uint *)(*data + 4) = (uint)*current_byte;\n  }\n  remaining_iterations = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = remaining_iterations;\n  if (remaining_iterations == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "parse_data_08004198",
                "param_1": "data",
                "sVar1": "remaining_iterations",
                "pbVar2": "current_byte",
                "param_1[2]": "value_at_index_2",
                "param_1[4]": "value_at_index_4",
                "param_1[8]": "data_ptr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_shifted_value_and_update_08004204",
            "code": "\nvoid calculateShiftedValueAndUpdate_08004204(int *inputArray)\n\n{\n  int result1;\n  int result2;\n  int result3;\n  int result4;\n  int result5;\n  int result6;\n  int result7;\n  int result8;\n  int result9;\n  int shiftedValue;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       inputArray[2] | inputArray[4] | inputArray[5] | *(uint *)(*inputArray + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  shiftedValue = *inputArray;\n  if (shiftedValue != 0x40013800) {\n    result1 = extracted_data_shifted_08003c50();\n    result6 = inputArray[1];\n    result2 = extracted_data_shifted_08003c50();\n    result7 = inputArray[1];\n    result3 = extracted_data_shifted_08003c50();\n    result8 = inputArray[1];\n    result4 = extracted_data_shifted_08003c50();\n    result9 = inputArray[1];\n    result5 = extracted_data_shifted_08003c50();\n    *(uint *)(shiftedValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedValue = calculate_shifted_value_08003c70();\n  result5 = inputArray[1];\n  result1 = calculate_shifted_value_08003c70();\n  result6 = inputArray[1];\n  result2 = calculate_shifted_value_08003c70();\n  result7 = inputArray[1];\n  result3 = calculate_shifted_value_08003c70();\n  result8 = inputArray[1];\n  result4 = calculate_shifted_value_08003c70();\n  updatedValue = ((uint)((int)((ulonglong)\n                               (((uint)(result3 * 0x19) / (uint)(result8 << 2) +\n                                (int)(((ulonglong)(uint)(result4 * 0x19) /\n                                      (ulonglong)(uint)(inputArray[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(result1 * 0x19) / (uint)(result6 << 2) +\n                   (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(result7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(shiftedValue * 0x19) / (ulonglong)(uint)(result5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_shifted_value_and_update_08004204",
                "param_1": "inputArray",
                "iVar1": "result1",
                "iVar2": "result2",
                "iVar3": "result3",
                "iVar4": "result4",
                "iVar5": "result5",
                "iVar6": "result6",
                "iVar7": "result7",
                "iVar8": "result8",
                "iVar9": "result9",
                "iVar10": "shiftedValue",
                "iRam40013808": "updatedValue"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "check_params_validity_080043b4",
            "code": "\nundefined4 checkParamsValidity_080043b4(uint **data,uint mask,uint isTrue,int value,uint threshold)\n\n{\n  int temp;\n  \n  do {\n    if (((mask & ~**data) == 0) != isTrue) {\n      return 0;\n    }\n  } while ((threshold == 0xffffffff) ||\n          ((threshold != 0 && (temp = getData(), (uint)(temp - value) <= threshold))));\n  (*data)[3] = (*data)[3] & 0xfffffe5f;\n  (*data)[5] = (*data)[5] & 0xfffffffe;\n  *(undefined *)((int)data + 0x39) = 0x20;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  *(undefined *)(data + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "check_params_validity_080043b4",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "isTrue",
                "param_4": "value",
                "param_5": "threshold",
                "iVar1": "temp",
                "get_data_08001cc4": "getData"
            },
            "calling": [
                "FUN_08004478"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "initialize_and_calculate_0800441a",
            "code": "\nundefined4 initializeAndCalculate_0800441a(int *array)\n\n{\n  if (array != (int *)0x0) {\n    if (*(char *)((int)array + 0x39) == '\\0') {\n      *(undefined *)(array + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(undefined *)((int)array + 0x39) = 0x24;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) & 0xffffdfff;\n    calculateShiftedValueAndUpdate(array);\n    *(uint *)(*array + 0x10) = *(uint *)(*array + 0x10) & 0xffffb7ff;\n    *(uint *)(*array + 0x14) = *(uint *)(*array + 0x14) & 0xffffffd5;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x2000;\n    value4 = 0;\n    *(undefined *)((int)array + 0x39) = 0x20;\n    *(undefined *)((int)array + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "initialize_and_calculate_0800441a",
                "param_1": "array",
                "calculate_shifted_value_and_update_08004204": "calculateShiftedValueAndUpdate",
                "param_1[0xf]": "value4"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 processData_08004478(int *data,ushort *input,int inputSize,undefined4 param)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if (input == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (inputSize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = 0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      returnValue = get_data_08001cc4();\n      *(short *)(data + 9) = (short)inputSize;\n      *(short *)((int)data + 0x26) = (short)inputSize;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == 0x1000) {\n          result = check_params_validity_080043b4(data,0x80,0,returnValue,param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = *input & 0x1ff;\n          if (data[4] == 0) {\n            input = input + 1;\n          }\n          else {\n            input = (ushort *)((int)input + 1);\n          }\n        }\n        else {\n          result = check_params_validity_080043b4(data,0x80,0,returnValue,param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = (uint)*(byte *)input;\n          input = (ushort *)((int)input + 1);\n        }\n      }\n      result = check_params_validity_080043b4(data,0x40,0,returnValue,param);\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "data",
                "param_2": "input",
                "param_3": "inputSize",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "validate_input_0800455a",
            "code": "\nundefined4 validate_input_0800455a(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    result1 = value1;\n    *(short *)(input_array + 9) = (short)value2;\n    *(short *)((int)input_array + 0x26) = (short)value2;\n    result4 = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "validate_input_0800455a",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "result1",
                "param_1[0xf]": "result4"
            },
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "check_and_update_data_080045a2",
            "code": "\nundefined4 check_and_update_data_080045a2(int *data_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)data_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data_array + 0xe) != '\\x01') {\n    data_array[10] = value_1;\n    *(short *)(data_array + 0xb) = (short)value_2;\n    *(short *)((int)data_array + 0x2e) = (short)value_2;\n    data_array[15] = 0;\n    *(undefined *)((int)data_array + 0x3a) = 0x22;\n    *(undefined *)(data_array + 0xe) = 0;\n    *(uint *)(*data_array + 0xc) = *(uint *)(*data_array + 0xc) | 0x100;\n    *(uint *)(*data_array + 0x14) = *(uint *)(*data_array + 0x14) | 1;\n    *(uint *)(*data_array + 0xc) = *(uint *)(*data_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "check_and_update_data_080045a2",
                "param_1": "data_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[10]": "data_array[10]",
                "param_1[0xf]": "data_array[15]"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "update_flags_and_process_data_080045fe",
            "code": "\nundefined4 updateFlagsAndProcessData_080045fe(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)ptr + 0x39) = 0x20;\n  processData();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "update_flags_and_process_data_080045fe",
                "param_1": "ptr",
                "process_data_08005604": "processData"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "parse_string_08004618",
            "code": "\nundefined4 parse_string_08004618(int *input)\n\n{\n  byte *output_byte;\n  short remaining_iterations;\n  undefined *output_undefined;\n  \n  if (*(char *)((int)input + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (input[2] == 0x1000) {\n    if (input[4] == 0) {\n      *(ushort *)input[10] = (ushort)((uint)(*(int *)(*input + 4) << 0x17) >> 0x17);\n      input[10] = input[10] + 2;\n    }\n    else {\n      *(ushort *)input[10] = (ushort)*(undefined4 *)(*input + 4) & 0xff;\n      input[10] = input[10] + 1;\n    }\n  }\n  else if (input[4] == 0) {\n    output_undefined = (undefined *)input[10];\n    input[10] = (int)(output_undefined + 1);\n    *output_undefined = (char)*(undefined4 *)(*input + 4);\n  }\n  else {\n    output_byte = (byte *)input[10];\n    input[10] = (int)(output_byte + 1);\n    *output_byte = (byte)*(undefined4 *)(*input + 4) & 0x7f;\n  }\n  remaining_iterations = *(short *)((int)input + 0x2e) + -1;\n  *(short *)((int)input + 0x2e) = remaining_iterations;\n  if (remaining_iterations != 0) {\n    return 0;\n  }\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xffffffdf;\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xfffffeff;\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffffe;\n  *(undefined *)((int)input + 0x3a) = 0x20;\n  execute_data_operation();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "parse_string_08004618",
                "param_1": "input",
                "pbVar1": "output_byte",
                "sVar2": "remaining_iterations",
                "puVar3": "output_undefined",
                "execute_data_operation_080055e0": "execute_data_operation"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_080055e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "process_data_080046b8",
            "code": "\nvoid process_data_080046b8(uint **params)\n\n{\n  int result;\n  uint value2;\n  uint *pointer;\n  uint value;\n  uint value1;\n  \n  pointer = *params;\n  value1 = *pointer;\n  value2 = pointer[3];\n  if ((((value1 & 0xf) == 0) && ((value1 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    parse_string(params);\n    return;\n  }\n  if (((value1 & 0xf) == 0) || ((value = pointer[5] & 1, value == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value1 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      parse_data(params);\n      return;\n    }\n    if (((value1 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      update_flags_and_process_data_080046b8(params);\n    }\n  }\n  else {\n    if (((value1 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      flags = (uint *)((uint)flags | 1);\n    }\n    if (((value1 & 4) != 0) && (value != 0)) {\n      flags = (uint *)((uint)flags | 2);\n    }\n    if (((value1 & 2) != 0) && (value != 0)) {\n      flags = (uint *)((uint)flags | 4);\n    }\n    if (((value1 & 8) != 0) && (value != 0)) {\n      flags = (uint *)((uint)flags | 8);\n    }\n    if (flags != (uint *)0x0) {\n      if (((value1 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        parse_string(params);\n      }\n      if ((((uint)flags & 8) == 0) && (((*params)[5] & 0x40) == 0)) {\n        FUNC_08005650(params);\n        flags = (uint *)0x0;\n        return;\n      }\n      clear_flags(params);\n      pointer = *params;\n      if ((pointer[5] & 0x40) == 0) {\n        FUNC_08005650(params);\n        return;\n      }\n      pointer[5] = pointer[5] & 0xffffffbf;\n      if (params[0xd] == (uint *)0x0) {\n        FUNC_08005650(params);\n        return;\n      }\n      params[0xd][0xd] = (uint)&label;\n      result = set_configuration(params[0xd]);\n      if (result != 0) {\n        (*(code *)params[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "params",
                "iVar1": "result",
                "uVar2": "value2",
                "puVar3": "pointer",
                "uVar4": "value",
                "uVar5": "value1",
                "parse_string_08004618": "parse_string",
                "parse_data_08004198": "parse_data",
                "update_flags_and_process_data_080045fe": "update_flags_and_process_data",
                "param_1[0xf]": "flags",
                "clear_flags_0800417c": "clear_flags",
                "LAB_080047d8_1": "label",
                "set_configuration_0800258c": "set_configuration"
            },
            "calling": [],
            "called": [
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combineBytes_080047e8(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "input"
            },
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "bitwise_extraction_080047f4",
            "code": "\nuint bitwise_extraction_080047f4(uint input_value,int base_address)\n\n{\n  return *(uint *)(base_address + ((input_value << 0x18) >> 0x1c) * 4) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "bitwise_extraction_080047f4",
                "param_1": "input_value",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "set_bit_at_position_0800480a",
            "code": "\nvoid setBitAtPosition_0800480a(uint bitPosition,int data)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(data + shiftedIndex * 4) = *(uint *)(data + shiftedIndex * 4) | 1 << (bitPosition & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "set_bit_at_position_0800480a",
                "param_1": "bitPosition",
                "param_2": "data",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "update_value_at_index_08004828",
            "code": "\nvoid updateValueAtIndex_08004828(uint value,int array)\n\n{\n  uint bitIndex;\n  \n  bitIndex = (value << 0x18) >> 0x1c;\n  *(uint *)(array + bitIndex * 4) = *(uint *)(array + bitIndex * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "update_value_at_index_08004828",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "bitIndex"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "map_param_to_address_08004848",
            "code": "\nundefined4 mapParamToAddress_08004848(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "map_param_to_address_08004848",
                "param_1": "param"
            },
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_memory_address_08004884",
            "code": "\n\n\nundefined4 set_memory_address_08004884(undefined4 address_index)\n\n{\n  undefined4 new_address;\n  \n  switch(address_index) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    new_address = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    new_address = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    new_address = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    new_address = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    new_address = 0x40011800;\n    break;\n  default:\n    new_address = 0;\n  }\n  return new_address;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_memory_address_08004884",
                "param_1": "address_index",
                "uVar1": "new_address"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "find_value_and_shift_bits_0800492c",
            "code": "\nuint find_value_and_shift_bits_0800492c(undefined4 input_value,undefined4 unused_param,undefined4 data_array,undefined4 param_4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = find_value_or_negative_08004cce(input_value,&DAT_08007400,data_array,param_4,param_4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "find_value_and_shift_bits_0800492c",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "data_array",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "find_value_and_return_offset_08004948",
            "code": "\nundefined4 find_value_and_return_offset_08004948(undefined4 value,undefined4 ptr_data,undefined4 param_3,undefined4 param_4)\n\n{\n  int offset_val;\n  uint shifted_val;\n  \n  offset_val = find_value_or_negative_08004cce(value,&DAT_080074b4,param_3,param_4,param_4);\n  shifted_val = (uint)(offset_val << 0xc) >> 0x1b;\n  if (shifted_val == 3) {\n    return 8;\n  }\n  if (shifted_val != 4) {\n    if (shifted_val != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "find_value_and_return_offset_08004948",
                "param_1": "value",
                "param_2": "ptr_data",
                "iVar1": "offset_val",
                "uVar2": "shifted_val"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "update_memory_address_08004974",
            "code": "\n\n\nvoid updateMemoryAddress_08004974(int *memoryAddress,undefined4 data)\n\n{\n  undefined4 result;\n  uint flag;\n  int value;\n  uint bitMask;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  value = *memoryAddress;\n  if (value == 0x40012400) {\n    flag = _DAT_40021018 | 0x200;\n    value = 0x200;\n    _DAT_40021018 = flag;\n  }\n  else {\n    flag = 0x40012800;\n    if (value == 0x40012800) {\n      flag = _DAT_40021018 | 0x400;\n      value = 0x400;\n      _DAT_40021018 = flag;\n    }\n  }\n  result = set_memory_address_08004884((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,data,flag,value);\n  bitMask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  constant1 = 3;\n  constant2 = 0;\n  update_register_08002624(result,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "update_memory_address_08004974",
                "param_1": "memoryAddress",
                "param_2": "data",
                "uVar1": "result",
                "uVar2": "flag",
                "iVar3": "value",
                "local_18": "bitMask",
                "local_14": "constant1",
                "local_10": "constant2"
            },
            "calling": [
                "FUN_0800213c"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_protection_settings_080049f0",
            "code": "\n\n\nvoid updateProtectionSettings_080049f0(int *inputData)\n\n{\n  if (*inputData != 0x40012400) {\n    if (*inputData == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_protection_settings_080049f0",
                "param_1": "inputData"
            },
            "calling": [
                "FUN_0800224c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "process_data_08004a4c",
            "code": "\nundefined2 process_data_08004a4c(undefined4 input_data)\n\n{\n  int status_value;\n  uint pointer_value;\n  undefined2 result_value;\n  uint value_index;\n  undefined4 process_flag_1;\n  undefined4 process_flag_2;\n  int memory_data;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 flag_value;\n  undefined4 temp4;\n  undefined4 config_value;\n  undefined4 base_value;\n  undefined4 offset_value;\n  \n  fill_memory_with_byte_080061e0(&memory_data,0,0x30);\n  value_index = 0;\n  process_flag_1 = 0;\n  process_flag_2 = 0;\n  result_value = 0;\n  memory_data = find_value_index_or_zero_08004c78(input_data,&DAT_08007400);\n  if (memory_data == 0) {\n    result_value = 0;\n  }\n  else {\n    temp1 = 0;\n    temp2 = 0;\n    temp3 = 0;\n    temp4 = 0;\n    base_value = 0xe0000;\n    offset_value = 0;\n    flag_value = 1;\n    config_value = 0;\n    DAT_20000080 = (undefined)input_data;\n    status_value = update_memory_status_0800213c(&memory_data);\n    if (status_value == 0) {\n      value_index = find_value_and_shift_bits_0800492c(input_data);\n      if (value_index < 0x12) {\n        process_flag_1 = 1;\n        process_flag_2 = 2;\n        status_value = process_data_08004a4c_08001e48(&memory_data,&value_index);\n        if (status_value == 0) {\n          status_value = process_data_08004a4c_08002384(&memory_data);\n          if (status_value == 0) {\n            status_value = process_data_08004a4c_08002004(&memory_data);\n            if (status_value == 0) {\n              status_value = check_data_validity_08001cd0(&memory_data,10);\n              if (status_value == 0) {\n                pointer_value = get_pointer_value_08001f80(&memory_data);\n                if ((pointer_value & 0x200) != 0) {\n                  result_value = get_offset_value_08001e40(&memory_data);\n                }\n                status_value = update_flag_status_08002348(&memory_data);\n                if (status_value == 0) {\n                  status_value = initialize_configuration_0800224c(&memory_data);\n                  if (status_value != 0) {\n                    result_value = 0;\n                  }\n                }\n                else {\n                  result_value = 0;\n                }\n              }\n              else {\n                result_value = 0;\n              }\n            }\n            else {\n              result_value = 0;\n            }\n          }\n          else {\n            result_value = 0;\n          }\n        }\n        else {\n          result_value = 0;\n        }\n      }\n      else {\n        result_value = 0;\n      }\n    }\n    else {\n      result_value = 0;\n    }\n  }\n  return result_value;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "process_data_08004a4c",
                "param_1": "input_data",
                "local_46": "result_value",
                "local_44": "value_index",
                "local_40": "process_flag_1",
                "local_3c": "process_flag_2",
                "local_38": "memory_data",
                "local_34": "temp1",
                "local_30": "temp2",
                "local_2c": "temp3",
                "local_24": "temp4",
                "local_1c": "base_value",
                "local_10": "offset_value",
                "local_28": "flag_value",
                "local_20": "config_value",
                "iVar1": "status_value",
                "uVar2": "pointer_value"
            },
            "calling": [
                "FUN_08005754"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08002004",
                "FUN_08002348",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_0800492c",
                "FUN_08002384",
                "FUN_08001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "initialize_registers_08004b34",
            "code": "\nvoid initialize_registers_08004b34(void)\n\n{\n  update_registers();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "initialize_registers_08004b34",
                "update_registers_08004d90": "update_registers"
            },
            "calling": [
                "FUN_08003ed8"
            ],
            "called": [
                "FUN_08004d90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "update_registers_08004b3c",
            "code": "\nvoid update_registers_08004b3c(undefined4 input_value)\n\n{\n  int offset;\n  uint flags;\n  int value_indices [17];\n  \n  value_indices[0] = find_value_index_or_zero_08004c78(input_value,&DAT_080074b4);\n  if ((value_indices[0] != 0) &&\n     ((((offset = find_value_and_return_offset_08004948(input_value), offset == 0 || (offset == 4)) || (offset == 8)) ||\n      ((offset == 0xc || (offset == 0x18)))))) {\n    flags = find_value_or_negative_08004cce(input_value,&DAT_080074b4);\n    if ((flags & 0x100000) == 0) {\n      update_and_reset_080040b0(value_indices,offset);\n    }\n    else {\n      update_flags_and_data_0800412c(value_indices,offset);\n    }\n    initialize_and_set_registers_08003ed8(value_indices);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "update_registers_08004b3c",
                "param_1": "input_value",
                "iVar1": "offset",
                "uVar2": "flags",
                "local_50": "value_indices"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "initialize_data_08004b94",
            "code": "\nvoid initializeData_08004b94(void)\n\n{\n  fetchData();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "initialize_data_08004b94",
                "get_data_08001cc4": "fetchData"
            },
            "calling": [
                "FUN_080058e0"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "execute_startup_routine_with_update_08004b9e",
            "code": "\nvoid execute_startup_routine_with_update_08004b9e(void)\n\n{\n  perform_addition_and_update();\n  execute_startup_routine();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "execute_startup_routine_with_update_08004b9e",
                "addition_and_update_08001cac": "perform_addition_and_update",
                "execute_startup_routine_08002582": "execute_startup_routine"
            },
            "calling": [],
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_memory_08004bb0",
            "code": "\n\n\nvoid initializeMemory_08004bb0(uint address,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 memoryAddress;\n  uint bitmask;\n  undefined4 param2_new;\n  undefined4 param3_new;\n  undefined4 constant;\n  \n  memoryAddress = set_memory_address_08004884((address << 0x18) >> 0x1c);\n  bitmask = 1 << (address & 0xf) & 0xffff;\n  constant = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((address - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((address == 0xf) || (address == 0x13)) || (address == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param2_new = value1;\n  param3_new = value2;\n  update_register_08002624(memoryAddress,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_memory_08004bb0",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "memoryAddress",
                "local_20": "bitmask",
                "local_1c": "param2_new",
                "local_18": "param3_new",
                "local_14": "constant"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_param_value_based_on_condition_08004c30",
            "code": "\nvoid setParamValueBasedOnCondition_08004c30(undefined4 value,undefined2 code,int condition,undefined4 config)\n\n{\n  if (condition == 0) {\n    setParamValue(value,code,0,config,config);\n    return;\n  }\n  setParamValue(value,code,1,config,config);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_param_value_based_on_condition_08004c30",
                "param_1": "value",
                "param_2": "code",
                "param_3": "condition",
                "param_4": "config",
                "set_param_value_0800281e": "setParamValue"
            },
            "calling": [
                "FUN_08005848"
            ],
            "called": [
                "FUN_0800281e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "check_bit_wrapper_08004c48",
            "code": "\nvoid check_bit_wrapper_08004c48(undefined4 input_1,undefined2 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  check_bit_08002810(input_1,input_2,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "check_bit_wrapper_08004c48",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005890"
            ],
            "called": [
                "FUN_08002810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_device_and_update_flags_08004c52",
            "code": "\nvoid initialize_device_and_update_flags_08004c52(void)\n\n{\n  set_and_update_flags();\n  initialize_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_device_and_update_flags_08004c52",
                "set_and_update_flags_08001c88": "set_and_update_flags",
                "initialize_device_08001b48": "initialize_device"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_index_08004c5e",
            "code": "\nundefined4 find_value_index_08004c5e(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_index_08004c5e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "find_value_index_or_zero_08004c78",
            "code": "\nundefined4 find_value_index_or_zero_08004c78(int value)\n\n{\n  undefined4 index;\n  \n  if (value != -1) {\n    index = find_value_index_08004c5e();\n    return index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "find_value_index_or_zero_08004c78",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08004f4c",
                "FUN_080053d4",
                "FUN_08004a4c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_value_in_array_08004c8a",
            "code": "\nint find_value_in_array_08004c8a(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_value_in_array_08004c8a",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "find_value_or_return_error_08004ca2",
            "code": "\nundefined4 find_value_or_return_error_08004ca2(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != 0) {\n    found_value = find_value_in_array_08004c8a();\n    return found_value;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "find_value_or_return_error_08004ca2",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_in_array_08004cb2",
            "code": "\nundefined4 find_value_in_array_08004cb2(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_in_array_08004cb2",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "find_value_or_negative_08004cce",
            "code": "\nundefined4 find_value_or_negative_08004cce(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  result = find_value_in_array_08004cb2();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "find_value_or_negative_08004cce",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "find_element_08004ce2",
            "code": "\nundefined4 find_element_08004ce2(int input_val,char *data_array)\n\n{\n  if (input_val == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*data_array == -1) {\n      return 0;\n    }\n    if (input_val == *data_array) break;\n    data_array = data_array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "find_element_08004ce2",
                "param_1": "input_val",
                "param_2": "data_array"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_return_smaller_08004d06",
            "code": "\nint compareAndReturnSmaller_08004d06(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_return_smaller_08004d06",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_08004d18",
            "code": "\nvoid executeCallback_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_08004d18"
            },
            "calling": [
                "FUN_08003ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "infinite_loop_08004d40",
            "code": "\nvoid infiniteLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "infinite_loop_08004d40"
            },
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08004d40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_system_08004d44",
            "code": "\n\n\nvoid initializeSystem_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_system_08004d44"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_registers_08004d90",
            "code": "\n\n\nvoid update_registers_08004d90(int *register_value)\n\n{\n  if (*register_value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*register_value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*register_value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*register_value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_registers_08004d90",
                "param_1": "register_value"
            },
            "calling": [
                "FUN_08004b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "subtract_four_08004df4",
            "code": "\nint subtract_four_08004df4(int input_num)\n\n{\n  return input_num + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "subtract_four_08004df4",
                "param_1": "input_num"
            },
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_function_if_param_set_08004df8",
            "code": "\nvoid executeFunctionIfParamSet_08004df8(int inputParam)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if ((*(functionPointer **)(result + 0x4c) != (functionPointer *)0x0) && (*(char *)(inputParam + 0x1c) == '\\x01')) {\n    (**(functionPointer **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_function_if_param_set_08004df8",
                "param_1": "inputParam",
                "iVar1": "result",
                "subtract_four_08004df4": "subtractFour",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_if_valid_callback_08004e12",
            "code": "\nvoid executeIfValidCallback_08004e12(void)\n\n{\n  int returnValue;\n  \n  returnValue = getCallbackAddress();\n  if (*(code **)(returnValue + 0x48) != (code *)0x0) {\n    (**(code **)(returnValue + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_if_valid_callback_08004e12",
                "iVar1": "returnValue",
                "subtract_four_08004df4": "getCallbackAddress"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "check_and_process_parameters_08004e20",
            "code": "\nvoid checkAndProcessParameters_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    processParameters();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "check_and_process_parameters_08004e20",
                "process_parameters_08003f18": "processParameters"
            },
            "calling": [],
            "called": [
                "FUN_08003f18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_4_08004e70",
            "code": "\nint subtract_4_08004e70(int result)\n\n{\n  return result + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_4_08004e70",
                "param_1": "result"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004e74",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "process_parameters_08004e74",
            "code": "\nvoid process_parameters_08004e74(int input_value_1,int input_value_2,int input_value_3,undefined4 input_value_4)\n\n{\n  int result;\n  \n  result = calculate_result();\n  if (input_value_3 == *(int *)(input_value_1 + 0xc)) {\n    if (input_value_2 == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      validate_parameters(input_value_1,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    process_parameters_08004e74(input_value_1,result + 0x68,0x20,8,input_value_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "process_parameters_08004e74",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "iVar1": "result",
                "subtract_4_08004e70": "calculate_result",
                "validate_parameters_08002af8": "validate_parameters",
                "process_parameters_08002b84": "process_parameters"
            },
            "calling": [
                "FUN_08002cf2"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "execute_and_initiate_08004ec4",
            "code": "\nvoid execute_and_initiate_08004ec4(undefined4 input)\n\n{\n  int result;\n  \n  result = get_function_address();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initiate_process(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "execute_and_initiate_08004ec4",
                "param_1": "input",
                "iVar1": "result",
                "subtract_4_08004e70": "get_function_address",
                "initiate_process_08002c10": "initiate_process"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "check_and_initiate_process_08004ef4",
            "code": "\nvoid checkAndInitiateProcess_08004ef4(undefined4 inputParam)\n\n{\n  int result;\n  \n  result = performSubtraction();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initiate_process_08002c10(inputParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "check_and_initiate_process_08004ef4",
                "param_1": "inputParam",
                "iVar1": "result",
                "subtract_4_08004e70": "performSubtraction"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "configure_uart_pins_08004f4c",
            "code": "\n\n\nvoid configure_uart_pins_08004f4c(int *uart_pins)\n\n{\n  int pin1_index;\n  int pin2_index;\n  undefined4 address1;\n  uint value;\n  uint pin_bit;\n  uint pin_mode;\n  uint pin_speed;\n  undefined4 uart_mode;\n  \n  if (uart_pins != (int *)0x0) {\n    pin1_index = find_value_index_or_zero_08004c78((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n    pin2_index = find_value_index_or_zero_08004c78((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n    if ((pin2_index == 0) || (pin1_index == 0)) {\n      initialize_error_check(\"ERROR: at least one UART pin has no peripheral\\n\",pin2_index);\n    }\n    else {\n      pin1_index = compare_uart_pins(pin1_index);\n      *uart_pins = pin1_index;\n      if (pin1_index == 0) {\n        initialize_error_check(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (pin1_index == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uart_pins + 0x11) = 0;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x25;\n        }\n        else if (pin1_index == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uart_pins + 0x11) = 1;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x26;\n        }\n        else if (pin1_index == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uart_pins + 0x11) = 2;\n          *(undefined *)((int)uart_pins + 0x5a) = 0x27;\n        }\n        address1 = set_memory_address((uint)((int)*(char *)((int)uart_pins + 0x59) << 0x18) >> 0x1c);\n        value = find_value((int)*(char *)((int)uart_pins + 0x59),&DAT_08007604);\n        pin_bit = 1 << (*(byte *)((int)uart_pins + 0x59) & 0xf) & 0xffff;\n        pin_mode = (value >> 3 & 1) << 4 | value & 7;\n        pin_speed = (value << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((value << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        uart_mode = 3;\n        update_register(address1,&pin_bit);\n        address1 = set_memory_address((uint)((int)*(char *)(uart_pins + 0x16) << 0x18) >> 0x1c);\n        value = find_value((int)*(char *)(uart_pins + 0x16),&DAT_0800764c);\n        pin_bit = 1 << (*(byte *)(uart_pins + 0x16) & 0xf) & 0xffff;\n        pin_mode = (value >> 3 & 1) << 4 | value & 7;\n        pin_speed = (value << 0x1a) >> 0x1e;\n        update_register(address1,&pin_bit);\n        (&DAT_2000032c)[*(byte *)(uart_pins + 0x11)] = uart_pins + 1;\n        uart_pins[1] = *uart_pins;\n        uart_pins[2] = uart_pins[0x12];\n        uart_pins[3] = uart_pins[0x13];\n        uart_pins[4] = uart_pins[0x14];\n        uart_pins[5] = uart_pins[0x15];\n        uart_pins[6] = 0xc;\n        uart_pins[7] = 0;\n        uart_pins[8] = 0;\n        initialize_and_calculate(uart_pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "configure_uart_pins_08004f4c",
                "param_1": "uart_pins",
                "iVar1": "pin1_index",
                "iVar2": "pin2_index",
                "uVar3": "address1",
                "uVar4": "value",
                "local_20": "pin_bit",
                "local_1c": "pin_mode",
                "local_18": "pin_speed",
                "local_14": "uart_mode",
                "initialize_if_not_initialized_080068f0": "initialize_error_check",
                "compare_and_return_smaller_08004d06": "compare_uart_pins",
                "set_memory_address_08004884": "set_memory_address",
                "find_value_or_negative_08004cce": "find_value",
                "update_register_08002624": "update_register",
                "initialize_and_calculate_0800441a": "initialize_and_calculate"
            },
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "called": [
                "FUN_080068f0",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "initialize_uart_08005384",
            "code": "\nvoid initializeUART_08005384(void)\n\n{\n  int index;\n  undefined4 index2;\n  \n  index = find_value_index_or_zero_08004c78(2,&DAT_0800764c);\n  if (index != 0) {\n    index2 = find_value_index_or_zero_08004c78(2,&DAT_0800764c);\n    DAT_200000e1 = find_value_or_return_error_08004ca2(index2,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    configure_uart_pins_08004f4c(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "initialize_uart_08005384",
                "iVar1": "index",
                "uVar2": "index2"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_and_check_data_080053d4",
            "code": "\nuint process_and_check_data_080053d4(undefined4 input_param,uint flag)\n\n{\n  int data1;\n  int index;\n  uint counter;\n  \n  data1 = get_data_08001cc4();\n  index = find_value_index_or_zero_08004c78(2,&DAT_0800764c);\n  if (index == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 5 &&\n      (((&DAT_2000032c)[counter] == 0 ||\n       (index = find_value_index_or_zero_08004c78(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[counter] != index))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (4 < counter) {\n    if ((4 < DAT_200000cc) && (initialize_uart_08005384(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    counter = (uint)DAT_200000cc;\n  }\n  do {\n    index = process_data_08004478((&DAT_2000032c)[counter],input_param,flag & 0xffff,1000);\n    if (index == 0) {\n      return flag;\n    }\n    index = get_data_08001cc4();\n  } while ((uint)(index - data1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_and_check_data_080053d4",
                "param_1": "input_param",
                "param_2": "flag",
                "iVar1": "data1",
                "iVar2": "index",
                "uVar3": "counter"
            },
            "calling": [
                "FUN_08005730"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "is_combined_bytes_equal_twenty_two_0800548c",
            "code": "\nbool isCombinedBytesEqualTwentyTwo_0800548c(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_2000032c)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "is_combined_bytes_equal_twenty_two_0800548c",
                "param_1": "inputValue",
                "uVar1": "combinedBytes",
                "combine_bytes_080047e8": "combineBytes"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "check_flag_080054b0",
            "code": "\nbool check_flag_080054b0(int address)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(address + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "check_flag_080054b0",
                "param_1": "address",
                "uVar1": "combined_bytes"
            },
            "calling": [],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "copy_and_update_data_080054d4",
            "code": "\nundefined4 copyAndUpdateData_080054d4(int inputValue,undefined *outputValue,undefined4 param3,undefined4 param4)\n\n{\n  int isEqual;\n  \n  if (inputValue == 0) {\n    return 0xffffffff;\n  }\n  isEqual = checkIfCombinedBytesEqual();\n  if (isEqual == 0) {\n    *outputValue = *(undefined *)(inputValue + 0x45);\n    checkAndUpdateData((&DAT_2000032c)[*(byte *)(inputValue + 0x44)],inputValue + 0x45,1,&DAT_2000032c,param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "copy_and_update_data_080054d4",
                "param_1": "inputValue",
                "param_2": "outputValue",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "isEqual",
                "is_combined_bytes_equal_twenty_two_0800548c": "checkIfCombinedBytesEqual",
                "check_and_update_data_080045a2": "checkAndUpdateData"
            },
            "calling": [
                "FUN_0800598a"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "update_data_08005510",
            "code": "\nvoid updateData_08005510(int inputData,undefined4 newValue,undefined4 unused,undefined4 additionalData)\n\n{\n  int isEqual;\n  uint byteIndex;\n  \n  if (inputData != 0) {\n    isEqual = is_combined_bytes_equal_twenty_two_0800548c();\n    if (isEqual == 0) {\n      byteIndex = (uint)*(byte *)(inputData + 0x44);\n      *(undefined4 *)(&DAT_200002dc + byteIndex * 4) = newValue;\n      *(int *)(&DAT_200002f0 + byteIndex * 4) = inputData;\n      update_memory_08002494((int)*(char *)(inputData + 0x5a),0,1,byteIndex,additionalData);\n      set_bit_080024f8((int)*(char *)(inputData + 0x5a));\n      check_and_update_data_080045a2((&DAT_2000032c)[*(byte *)(inputData + 0x44)],inputData + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "update_data_08005510",
                "param_1": "inputData",
                "param_2": "newValue",
                "param_3": "unused",
                "param_4": "additionalData",
                "iVar1": "isEqual",
                "uVar2": "byteIndex"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "update_and_validate_input_08005568",
            "code": "\nvoid updateAndValidateInput_08005568(int inputPointer,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (inputPointer != 0) {\n    byteValue = *(byte *)(inputPointer + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_20000318 + (uint)byteValue * 4) = inputPointer;\n    update_memory_08002494((int)*(char *)(inputPointer + 0x5a),0,2);\n    set_bit_080024f8((int)*(char *)(inputPointer + 0x5a));\n    validate_input_0800455a((&DAT_2000032c)[*(byte *)(inputPointer + 0x44)],\n                 *(int *)(inputPointer + 100) + (uint)*(ushort *)(inputPointer + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "update_and_validate_input_08005568",
                "param_1": "inputPointer",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_index_in_data_080055bc",
            "code": "\nuint find_index_in_data_080055bc(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_2000032c)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_index_in_data_080055bc",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_data_operation_080055e0",
            "code": "\nvoid executeDataOperation_080055e0(void)\n\n{\n  uint index;\n  \n  index = findIndexOfData();\n  if (index < 5) {\n    (**(code **)(&DAT_200002dc + index * 4))(*(undefined4 *)(&DAT_200002f0 + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_data_operation_080055e0",
                "uVar1": "index",
                "find_index_in_data_080055bc": "findIndexOfData"
            },
            "calling": [
                "FUN_08004618"
            ],
            "called": [
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "process_data_08005604",
            "code": "\nvoid processData_08005604(void)\n\n{\n  uint index;\n  int result;\n  int data;\n  \n  index = findIndexOfData();\n  data = *(int *)(&DAT_20000318 + index * 4);\n  if ((index < 5) && (result = (**(code **)(&DAT_20000304 + index * 4))(data), result != -1)) {\n    validateInput((&DAT_2000032c)[*(byte *)(data + 0x44)],\n                 *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "process_data_08005604",
                "uVar1": "index",
                "iVar2": "result",
                "iVar3": "data",
                "find_index_in_data_080055bc": "findIndexOfData",
                "validate_input_0800455a": "validateInput"
            },
            "calling": [
                "FUN_080045fe"
            ],
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocateMemory_080056d8(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocatedMemory = DAT_20000340;\n  if (DAT_20000340 + size <= &stackBase) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocatedMemory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "stack0x00000000": "stackBase"
            },
            "calling": [
                "FUN_08006920"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "return_negative_one_08005714",
            "code": "\nundefined4 returnNegativeOne_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "return_negative_one_08005714"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "set_permission_flag_0800571a",
            "code": "\nundefined4 setPermissionFlag_0800571a(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "set_permission_flag_0800571a",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_08007004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "initialize_function_08005724",
            "code": "\nundefined4 initializeFunction_08005724(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "initialize_function_08005724"
            },
            "calling": [
                "FUN_08007028"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_zero_08005728",
            "code": "\nundefined4 initializeZero_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_zero_08005728"
            },
            "calling": [
                "FUN_08007048"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "get_return_value_0800572c",
            "code": "\nint getReturnValue_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "get_return_value_0800572c",
                "undefined4": "int"
            },
            "calling": [
                "FUN_0800706c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "process_and_check_data_08005730",
            "code": "\nvoid process_and_check_data_08005730(undefined4 unused_param,undefined4 data_param,undefined4 flag_param,undefined4 length_param)\n\n{\n  process_and_check_data_08005730_080053d4(data_param,flag_param,flag_param,length_param,length_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "process_and_check_data_08005730",
                "param_1": "unused_param",
                "param_2": "data_param",
                "param_3": "flag_param",
                "param_4": "length_param"
            },
            "calling": [
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_080053d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "endless_loop_0800573c",
            "code": "\nvoid endlessLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "endless_loop_0800573c"
            },
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_value_08005740",
            "code": "\nundefined4 initializeValue_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_value_08005740"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "get_return_value_08005750",
            "code": "\nundefined4 get_return_value_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "get_return_value_08005750"
            },
            "calling": [
                "thunk_FUN_08005750"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "get_processed_data_08005754",
            "code": "\nuint getProcessedData_08005754(uint inputValue)\n\n{\n  bool isLessThanThreshold;\n  char resultChar;\n  uint processedData;\n  \n  if (inputValue < 0xe) {\n    if (inputValue + 0x2e < 0x3c) {\n      isLessThanThreshold = true;\n    }\n    else {\n      isLessThanThreshold = false;\n    }\n  }\n  else {\n    isLessThanThreshold = inputValue < 0x3c;\n  }\n  if (isLessThanThreshold) {\n    if (inputValue < 0xe) {\n      inputValue = inputValue + 0x2e;\n    }\n    resultChar = (&DAT_080076f0)[inputValue];\n  }\n  else {\n    resultChar = -1;\n  }\n  if (resultChar == -1) {\n    processedData = 0;\n  }\n  else {\n    processedData = process_data_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return processedData >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return processedData << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return processedData;\n}\n\n",
            "renaming": {
                "FUN_08005754": "get_processed_data_08005754",
                "param_1": "inputValue",
                "bVar1": "isLessThanThreshold",
                "cVar2": "resultChar",
                "uVar3": "processedData"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004a4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "process_data_080057b4",
            "code": "\nvoid processData_080057b4(uint dataIndex,undefined4 mode,undefined4 arg1,undefined *buffer)\n\n{\n  int result;\n  undefined *dataPtr;\n  int value;\n  \n  if (dataIndex < 0x3c) {\n    value = (int)(char)(&DAT_080076f0)[dataIndex];\n    dataPtr = &DAT_080076f0;\n  }\n  else {\n    value = -1;\n    dataPtr = buffer;\n  }\n  if (value != -1) {\n    result = bitwiseExtraction(value,&DAT_20000344,arg1,dataPtr,buffer);\n    if (result != 0) {\n      result = findElement(value,&DAT_080074b4);\n      if (result != 0) {\n        updateRegisters(value);\n      }\n      updateValueAtIndex(value,&DAT_20000344);\n    }\n    switch(mode) {\n    case 0:\n      initializeMemory(value,0);\n      break;\n    case 1:\n      initializeMemory(value,1,0);\n      break;\n    case 2:\n      initializeMemory(value,0,1);\n      break;\n    case 3:\n      initializeMemory(value,0,2);\n    }\n    setBitAtPosition(value,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "process_data_080057b4",
                "param_1": "dataIndex",
                "param_2": "mode",
                "param_3": "arg1",
                "param_4": "buffer",
                "iVar1": "result",
                "puVar2": "dataPtr",
                "iVar3": "value",
                "initialize_memory_08004bb0": "initializeMemory",
                "bitwise_extraction_080047f4": "bitwiseExtraction",
                "find_element_08004ce2": "findElement",
                "update_registers_08004b3c": "updateRegisters",
                "update_value_at_index_08004828": "updateValueAtIndex",
                "set_bit_at_position_0800480a": "setBitAtPosition"
            },
            "calling": [
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004828",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_0800480a",
                "FUN_08004b3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "extract_and_set_param_value_08005848",
            "code": "\nvoid extract_and_set_param_value_08005848(uint input_index,undefined4 condition_value,undefined4 extract_bit_position,undefined *target_address)\n\n{\n  int extraction_result;\n  undefined4 mapped_address;\n  undefined *data_pointer;\n  uint extracted_value;\n  \n  if (input_index < 0x3c) {\n    extracted_value = (uint)(char)(&DAT_080076f0)[input_index];\n    data_pointer = &DAT_080076f0;\n  }\n  else {\n    extracted_value = 0xffffffff;\n    data_pointer = target_address;\n  }\n  if ((extracted_value != 0xffffffff) &&\n     (extraction_result = bitwise_extraction_080047f4(extracted_value,&DAT_20000358,extract_bit_position,data_pointer,target_address), extraction_result != 0)) {\n    mapped_address = map_param_to_address_08004848((extracted_value << 0x18) >> 0x1c);\n    set_param_value_based_on_condition_08004c30(mapped_address,1 << (extracted_value & 0xf) & 0xffff,condition_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "extract_and_set_param_value_08005848",
                "param_1": "input_index",
                "param_2": "condition_value",
                "param_3": "extract_bit_position",
                "param_4": "target_address",
                "iVar1": "extraction_result",
                "uVar2": "mapped_address",
                "puVar3": "data_pointer",
                "uVar4": "extracted_value"
            },
            "calling": [
                "FUN_08001310",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_080015b2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_value_08005890",
            "code": "\nchar checkValue_08005890(uint value)\n\n{\n  char result;\n  int extractionResult;\n  undefined4 address;\n  uint extractedData;\n  \n  if (value < 0x3c) {\n    extractedData = (uint)(char)(&DAT_080076f0)[value];\n  }\n  else {\n    extractedData = 0xffffffff;\n  }\n  if (extractedData == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    extractionResult = bitwise_extraction_080047f4(extractedData,&DAT_20000358);\n    if (extractionResult == 0) {\n      result = '\\0';\n    }\n    else {\n      address = map_param_to_address_08004848((extractedData << 0x18) >> 0x1c);\n      result = check_bit_wrapper_08004c48(address,1 << (extractedData & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_value_08005890",
                "param_1": "value",
                "cVar1": "result",
                "iVar2": "extractionResult",
                "uVar3": "address",
                "uVar4": "extractedData"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "called": [
                "FUN_08004c48",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "initialize_080058e0",
            "code": "\nvoid initialize_080058e0(void)\n\n{\n  initialize_080058e0_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "initialize_080058e0",
                "initialize_data_08004b94": "initialize_data"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004b94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_shift_0800591e",
            "code": "\nushort calculate_shift_0800591e(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_shift_0800591e",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08005a18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "update_data_0800598a",
            "code": "\nvoid updateData_0800598a(int data)\n\n{\n  int result;\n  ushort newIndex;\n  undefined newValue;\n  \n  result = copy_and_update_data_080054d4(data,&newValue);\n  if ((result == 0) &&\n     (newIndex = *(short *)(data + 0x60) + 1U & 0x3f, newIndex != *(ushort *)(data + 0x62))) {\n    *(undefined *)(*(int *)(data + 0x5c) + (uint)*(ushort *)(data + 0x60)) = newValue;\n    *(ushort *)(data + 0x60) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "update_data_0800598a",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_080054d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800591e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_data_08005a44",
            "code": "\nvoid initializeData_08005a44(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_data_08005a44",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "configure_serial_08005a68",
            "code": "\nvoid configureSerial_08005a68(int serialPort,undefined4 baudRate,byte configByte)\n\n{\n  uint dataBits;\n  char *errorMessage;\n  byte configBits;\n  int configurationValue;\n  byte *ptr;\n  char configChar;\n  int baseAddress;\n  code *jumpTablePointer;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x140) = configByte;\n  configBits = configByte & 7;\n  if (configBits == 4) {\n    configurationValue = 7;\n  }\n  else if (configBits == 6) {\n    configurationValue = 8;\n  }\n  else if (configBits == 2) {\n    configurationValue = 6;\n  }\n  else {\n    configurationValue = 0;\n  }\n  if ((configByte & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    configurationValue = configurationValue + 1;\n  }\n  else if ((configByte & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    configurationValue = configurationValue + 1;\n  }\n  if ((configByte & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (configurationValue == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (configurationValue == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    configurationValue = 0;\n  }\n  if (configurationValue != 0) {\n    configure_uart_pins_08004f4c(serialPort + 0xd4);\n    update_data_08005510(serialPort + 0xd4,0x800598b);\n    return;\n  }\n  errorMessage = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTablePointer = (code *)0x8005b12;\n  assertion_failed_0800611c(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  ptr = *(byte **)(dataBits + baseAddress);\n  errorMessage[0x1e] = configChar;\n  *(undefined *)(*ptr + 0x1e) = 0;\n  if (dataBits < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[dataBits];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTablePointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "configure_serial_08005a68",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "configByte",
                "extraout_r1": "dataBits",
                "pcVar1": "errorMessage",
                "bVar2": "configBits",
                "iVar3": "configurationValue",
                "pbVar4": "ptr",
                "unaff_r4": "configChar",
                "unaff_r6": "baseAddress",
                "UNRECOVERED_JUMPTABLE": "jumpTablePointer"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "set_return_value_based_on_input_08005b24",
            "code": "\nvoid setReturnValueBasedOnInput_08005b24(int inputAddress,uint inputValue)\n\n{\n  undefined returnValue;\n  code *jumpTable;\n  \n  if (inputValue < 0x3c) {\n    returnValue = (&DAT_080076f0)[inputValue];\n  }\n  else {\n    returnValue = 0xff;\n  }\n  *(undefined *)(inputAddress + 0x12d) = returnValue;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "set_return_value_based_on_input_08005b24",
                "param_1": "inputAddress",
                "param_2": "inputValue",
                "uVar1": "returnValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "set_special_character_08005b3c",
            "code": "\nvoid setSpecialCharacter_08005b3c(int address,uint index)\n\n{\n  undefined specialChar;\n  \n  if (index < 0x3c) {\n    specialChar = (&DAT_080076f0)[index];\n  }\n  else {\n    specialChar = 0xff;\n  }\n  *(undefined *)(address + 300) = specialChar;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "set_special_character_08005b3c",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "specialChar"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_and_set_values_08005b54",
            "code": "\nundefined4 *\ninitializeAndSetValues_08005b54(undefined4 *outputBuffer,undefined4 inputValue,undefined4 param3,undefined4 param4)\n\n{\n  undefined foundValue;\n  \n  outputBuffer[1] = 0;\n  outputBuffer[2] = 1000;\n  *outputBuffer = &PTR_LAB_080059c8_1_08007804;\n  if (outputBuffer == (undefined4 *)&DAT_2000036c) {\n    set_return_value_based_on_input_08005b24(&DAT_2000036c,0,param3,&DAT_2000036c,param4);\n    set_special_character_08005b3c(&DAT_2000036c,1);\n  }\n  else {\n    foundValue = find_value_or_return_error_08004ca2(inputValue,&DAT_08007604);\n    *(undefined *)((int)outputBuffer + 0x12d) = foundValue;\n    foundValue = find_value_or_return_error_08004ca2(inputValue,&DAT_0800764c);\n    *(undefined *)(outputBuffer + 0x4b) = foundValue;\n  }\n  initialize_data_08005a44(outputBuffer);\n  return outputBuffer;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_and_set_values_08005b54",
                "param_1": "outputBuffer",
                "param_2": "inputValue",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "foundValue"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_if_param1_is_1_08005bb0",
            "code": "\nvoid initialize_if_param1_is_1_08005bb0(int param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  if (param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_and_set_values(&DAT_2000036c,0x40004400,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_if_param1_is_1_08005bb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_and_set_values_08005b54": "initialize_and_set_values"
            },
            "calling": [],
            "called": [
                "FUN_08005b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "initialize_memory_08005c1c",
            "code": "\nvoid initializeMemory_08005c1c(undefined4 *memoryPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *memoryPointer = &DAT_08007858;\n  *(undefined *)(memoryPointer + 1) = value1;\n  *(undefined *)((int)memoryPointer + 5) = value2;\n  *(undefined *)((int)memoryPointer + 6) = value3;\n  *(undefined *)((int)memoryPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "initialize_memory_08005c1c",
                "param_1": "memoryPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_memory_if_conditions_met_08005c38",
            "code": "\nvoid initialize_memory_if_conditions_met_08005c38(int condition_1,int condition_2)\n\n{\n  if ((condition_1 == 1) && (condition_2 == 0xffff)) {\n    initialize_memory_08005c1c(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_memory_if_conditions_met_08005c38",
                "param_1": "condition_1",
                "param_2": "condition_2"
            },
            "calling": [],
            "called": [
                "FUN_08005c1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "calculate_and_execute_08005c96",
            "code": "\nundefined4 calculate_and_execute_08005c96(int *array,int size,undefined4 result_1,undefined4 result_2)\n\n{\n  undefined4 string_length;\n  \n  if (size != 0) {\n    string_length = calculate_string_length(size);\n    string_length = (**(code **)(*array + 4))(array,size,string_length,*(code **)(*array + 4),result_2);\n    return string_length;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "calculate_and_execute_08005c96",
                "param_1": "array",
                "param_2": "size",
                "param_3": "result_1",
                "param_4": "result_2",
                "uVar1": "string_length",
                "calculate_string_length_08000178": "calculate_string_length"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_code_function_08005cb6",
            "code": "\nvoid execute_code_function_08005cb6(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_code_function_08005cb6",
                "param_1": "function_pointer"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_function_with_arguments_08005cc0",
            "code": "\nvoid executeFunctionWithArguments_08005cc0(int *functionPointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  (**(code **)(*functionPointer + 4))(functionPointer,&DAT_0800786c,2,*(code **)(*functionPointer + 4),arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_function_with_arguments_08005cc0",
                "param_1": "functionPointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_and_execute_08005cd4",
            "code": "\nint calculate_and_execute_08005cd4(undefined4 input_param)\n\n{\n  int calc_result;\n  int exec_result;\n  \n  calc_result = calculate_and_execute_08005cd4_08005c96();\n  exec_result = execute_function_with_arguments_08005cc0(input_param);\n  return exec_result + calc_result;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_and_execute_08005cd4",
                "param_1": "input_param",
                "iVar1": "calc_result",
                "iVar2": "exec_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_base_08005ce8",
            "code": "\nundefined4 convertBase_08005ce8(int *numberPointer,uint number,uint base)\n\n{\n  char charValue;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *outputPointer;\n  char output [9];\n  \n  output[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  outputPointer = output + 1;\n  do {\n    quotient = number / base;\n    remainder = (number & 0xff) - (quotient * base & 0xff) & 0xff;\n    outputPointer = outputPointer + -1;\n    charValue = (char)remainder;\n    if (remainder < 10) {\n      charValue = charValue + '0';\n    }\n    else {\n      charValue = charValue + '7';\n    }\n    *outputPointer = charValue;\n    number = quotient;\n  } while (quotient != 0);\n  if (outputPointer == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = calculate_string_length_08000178(outputPointer);\n    result = (**(code **)(*numberPointer + 4))(numberPointer,outputPointer,result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_base_08005ce8",
                "param_1": "numberPointer",
                "param_2": "number",
                "param_3": "base",
                "cVar1": "charValue",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "outputPointer",
                "local_15": "output"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "convert_number_08005d42",
            "code": "\nint convert_number_08005d42(undefined4 *input_ptr,uint number,uint base)\n\n{\n  int result;\n  int negative_value;\n  \n  if (base == 0) {\n    result = (**(code **)*input_ptr)(input_ptr,number & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = convert_base_08005ce8(input_ptr,number,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)number) {\n    result = convert_base_08005ce8(input_ptr,number,10);\n    return result;\n  }\n  result = execute_code_function_08005cb6(input_ptr,0x2d);\n  negative_value = convert_base_08005ce8(input_ptr,-number,10);\n  return negative_value + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "convert_number_08005d42",
                "param_1": "input_ptr",
                "param_2": "number",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative_value"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "convert_and_return_number_08005d82",
            "code": "\nvoid convert_and_return_number_08005d82(void)\n\n{\n  convert_number();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "convert_and_return_number_08005d82",
                "convert_number_08005d42": "convert_number"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "convert_or_execute_08005d8a",
            "code": "\nvoid convertOrExecute_08005d8a(undefined4 *inputFunction,uint inputValue1,uint inputValue2,undefined4 inputValue3)\n\n{\n  if (inputValue2 != 0) {\n    convert_base_08005ce8(inputFunction,inputValue1,inputValue2 & 0xff);\n    return;\n  }\n  (**(code **)*inputFunction)(inputFunction,inputValue1 & 0xff,0,*(code **)*inputFunction,inputValue3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "convert_or_execute_08005d8a",
                "param_1": "inputFunction",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "calculate_and_return_result_08005da8",
            "code": "\nint calculate_and_return_result_08005da8(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,uint input_param_4,byte input_param_5)\n\n{\n  int condition_check_result;\n  undefined4 temp_var_1;\n  int temp_var_2;\n  byte temp_var_3;\n  undefined8 floating_point_num;\n  undefined8 result;\n  \n  condition_check_result = check_conditions(input_param_3,input_param_4,input_param_3,input_param_4);\n  if (condition_check_result == 0) {\n    condition_check_result = check_conditions(input_param_3,input_param_4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((condition_check_result == 0) &&\n       (condition_check_result = check_and_return(input_param_3,input_param_4 & 0x7fffffff,0xffffffff,0x7fefffff), condition_check_result == 0)) {\n      condition_check_result = calculate_and_execute(input_param_1,&DAT_08007860);\n    }\n    else {\n      condition_check_result = check_if_cy_is_null(input_param_3,input_param_4,0xe0000000,0x41efffff);\n      if (condition_check_result == 0) {\n        condition_check_result = is_null_terminator(input_param_3,input_param_4,0xe0000000,0xc1efffff);\n        if (condition_check_result == 0) {\n          condition_check_result = is_null_terminator(input_param_3,input_param_4,0,0);\n          if (condition_check_result == 0) {\n            condition_check_result = 0;\n          }\n          else {\n            condition_check_result = execute_code_function(input_param_1,0x2d);\n            input_param_4 = input_param_4 + 0x80000000;\n          }\n          floating_point_num = 0x3fe0000000000000;\n          for (temp_var_3 = 0; temp_var_1 = (undefined4)((ulonglong)floating_point_num >> 0x20), temp_var_3 < input_param_5;\n              temp_var_3 = temp_var_3 + 1) {\n            floating_point_num = calculate_modified_float((int)floating_point_num,temp_var_1,0,0x40240000);\n          }\n          floating_point_num = calculate_double_precision(input_param_3,input_param_4,(int)floating_point_num,temp_var_1);\n          temp_var_1 = validate_parameters();\n          result = calculate_result();\n          floating_point_num = calculate_bitwise_operations((int)floating_point_num,(int)((ulonglong)floating_point_num >> 0x20),(int)result,\n                               (int)((ulonglong)result >> 0x20));\n          temp_var_2 = convert_or_execute(input_param_1,temp_var_1,10);\n          condition_check_result = condition_check_result + temp_var_2;\n          if (input_param_5 != 0) {\n            temp_var_2 = calculate_and_execute(input_param_1,&DAT_08007868);\n            condition_check_result = condition_check_result + temp_var_2;\n          }\n          while (input_param_5 != 0) {\n            floating_point_num = calculate_xor_and_multiply((int)floating_point_num,(int)((ulonglong)floating_point_num >> 0x20),0,0x40240000);\n            temp_var_1 = calculate_value();\n            temp_var_2 = convert_and_return_number(input_param_1,temp_var_1,10);\n            condition_check_result = condition_check_result + temp_var_2;\n            result = bitwise_shift(temp_var_1);\n            floating_point_num = calculate_bitwise_operations((int)floating_point_num,(int)((ulonglong)floating_point_num >> 0x20),(int)result,\n                                 (int)((ulonglong)result >> 0x20));\n            input_param_5 = input_param_5 - 1;\n          }\n        }\n        else {\n          condition_check_result = calculate_and_execute(input_param_1,&DAT_08007864);\n        }\n      }\n      else {\n        condition_check_result = calculate_and_execute(input_param_1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    condition_check_result = calculate_and_execute(input_param_1,&DAT_0800785c);\n  }\n  return condition_check_result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "calculate_and_return_result_08005da8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "iVar1": "condition_check_result",
                "uVar2": "temp_var_1",
                "iVar3": "temp_var_2",
                "bVar4": "temp_var_3",
                "uVar5": "floating_point_num",
                "uVar6": "result",
                "check_conditions_08000a2c": "check_conditions",
                "check_and_return_080009f0": "check_and_return",
                "calculate_and_execute_08005c96": "calculate_and_execute",
                "check_if_cy_is_null_08000a18": "check_if_cy_is_null",
                "is_null_terminator_080009dc": "is_null_terminator",
                "execute_code_function_08005cb6": "execute_code_function",
                "calculate_modified_floating_point_number_0800074c": "calculate_modified_float",
                "calculate_double_precision_08000194": "calculate_double_precision",
                "validate_params_08000aa8": "validate_parameters",
                "calculate_result_0800040c": "calculate_result",
                "calculate_bitwise_operations_08000190": "calculate_bitwise_operations",
                "convert_or_execute_08005d8a": "convert_or_execute",
                "calculate_xor_and_multiply_080004f8": "calculate_xor_and_multiply",
                "calculate_value_08000a58": "calculate_value",
                "convert_and_return_number_08005d82": "convert_and_return_number",
                "bitwise_shift_0800042c": "bitwise_shift"
            },
            "calling": [
                "FUN_08005f2c"
            ],
            "called": [
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005c96",
                "FUN_08000a2c",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_080009f0",
                "FUN_08000aa8",
                "FUN_08000190",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "calculate_and_return_result_08005f2c",
            "code": "\nvoid calculate_and_return_result_08005f2c(void)\n\n{\n  calculate_and_return_result_08005f2c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "calculate_and_return_result_08005f2c",
                "calculate_and_return_result_08005da8": "calculate_and_return_result"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "sum_result_and_value_08005f40",
            "code": "\nint sumResultAndValue_08005f40(undefined4 inputValue)\n\n{\n  int calculatedResult;\n  int executedResult;\n  \n  calculatedResult = calculate_and_return_result_08005f2c();\n  executedResult = execute_function_with_arguments_08005cc0(inputValue);\n  return executedResult + calculatedResult;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "sum_result_and_value_08005f40",
                "param_1": "inputValue",
                "iVar1": "calculatedResult",
                "iVar2": "executedResult"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_device_08005f5e",
            "code": "\nvoid initializeDevice_08005f5e(void)\n\n{\n  updateVariable(3);\n  initializeAndUpdateDevice();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_device_08005f5e",
                "update_variable_08002470": "updateVariable",
                "initialize_and_update_device_08001c32": "initializeAndUpdateDevice"
            },
            "calling": [
                "FUN_08006198"
            ],
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "run_oven_controller_08005f6c",
            "code": "\nvoid runOvenController_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  initializeAndExecuteOvenController();\n  do {\n    processData();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "run_oven_controller_08005f6c",
                "initialize_and_execute_oven_controller_08000bcc": "initializeAndExecuteOvenController",
                "process_data_08000cd0": "processData"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar countSetBits_08005f8c(uint num)\n\n{\n  char count;\n  \n  count = '\\0';\n  for (; num != 1; num = num >> 1) {\n    count = count + '\\x01';\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "num",
                "cVar1": "count"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_data_08005fc8",
            "code": "\nvoid initializeData_08005fc8(int firstParameter,int secondParameter,undefined4 thirdParameter,undefined4 fourthParameter)\n\n{\n  if (firstParameter != 1) {\n    return;\n  }\n  if (secondParameter == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    shiftLeftBy32(0,&LAB_08005fa0_1,&DAT_20000000,&DAT_200004b8,fourthParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_data_08005fc8",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "param_3": "thirdParameter",
                "param_4": "fourthParameter",
                "shift_left_by32_08006112": "shiftLeftBy32"
            },
            "calling": [],
            "called": [
                "FUN_08006112"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "execute_function_080060d4",
            "code": "\nvoid executeFunction_080060d4(int parameter)\n\n{\n  int bitCount;\n  \n  if (*(int *)(parameter + 8) != 0) {\n    (**(code **)(parameter + 0xc))();\n    return;\n  }\n  executeAndProcessFunction();\n  bitCount = countSetBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    executeFunction_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "execute_function_080060d4",
                "param_1": "parameter",
                "iVar1": "bitCount",
                "execute_and_process_function_08007090": "executeAndProcessFunction",
                "count_set_bits_08005f8c": "countSetBits"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [
                "FUN_08007090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "check_and_execute_080060e4",
            "code": "\nvoid checkAndExecute_080060e4(void)\n\n{\n  int bitCount;\n  \n  bitCount = getBitCount();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    execute();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "check_and_execute_080060e4",
                "iVar1": "bitCount",
                "count_set_bits_08005f8c": "getBitCount",
                "execute_function_080060d4": "execute"
            },
            "calling": [
                "FUN_0800282c"
            ],
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "shift_left_by32_08006112",
            "code": "\nvoid shift_left_by32_08006112(undefined4 input1,undefined4 input2)\n\n{\n  shift_left_by32_08006112_08006158(input2,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "shift_left_by32_08006112",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_08005fc8"
            ],
            "called": [
                "FUN_08006158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "assertion_failed_0800611c",
            "code": "\nvoid assertion_failed_0800611c(undefined4 assertion,undefined4 file,char *line,undefined4 function)\n\n{\n  undefined4 data;\n  char *message;\n  undefined8 result;\n  undefined4 extra;\n  \n  data = *(undefined4 *)(DAT_200000f8 + 0xc);\n  extra = function;\n  if (line == (char *)0x0) goto LAB_08006140;\n  message = \", function: \";\n  do {\n    process_and_format_data_08006174(data,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,assertion,file\n                 ,message,line,extra);\n    result = process_and_execute_08006ac0();\n    file = (undefined4)((ulonglong)result >> 0x20);\n    data = (undefined4)result;\nLAB_08006140:\n    line = \"\";\n    message = line;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "assertion_failed_0800611c",
                "param_1": "assertion",
                "param_2": "file",
                "param_3": "line",
                "param_4": "function",
                "uVar1": "data",
                "pcVar2": "message",
                "uVar3": "result",
                "uVar4": "extra"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift_left_by32_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shiftLeftBy32_08006158(undefined4 flags,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift_left_by32_08006158",
                "param_1": "flags",
                "param_2": "value"
            },
            "calling": [
                "FUN_08006112"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "process_and_format_data_08006174",
            "code": "\nvoid processAndFormatData_08006174(undefined4 input1,undefined4 input2,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 modifiedData1;\n  undefined4 modifiedData2;\n  \n  modifiedData1 = data1;\n  modifiedData2 = data2;\n  process_and_format_data_08006394(DAT_200000f8,input1,input2,&modifiedData1,input1,&modifiedData1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "process_and_format_data_08006174",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data1",
                "param_4": "data2",
                "uStack_8": "modifiedData1",
                "uStack_4": "modifiedData2"
            },
            "calling": [
                "FUN_0800611c"
            ],
            "called": [
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_function_array_08006198",
            "code": "\nvoid executeFunctionArray_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(functionPointerArray *)(&DAT_08007944)[index])();\n  }\n  FUNC_08007328();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(functionPointerArray *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_function_array_08006198",
                "iVar1": "index",
                "code": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_with_byte_080061e0",
            "code": "\nvoid fillMemoryWithByte_080061e0(undefined *memoryBuffer,undefined byteValue,int sizeInBytes)\n\n{\n  undefined *targetMemoryAddress;\n  \n  targetMemoryAddress = memoryBuffer + sizeInBytes;\n  for (; memoryBuffer != targetMemoryAddress; memoryBuffer = memoryBuffer + 1) {\n    *memoryBuffer = byteValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_with_byte_080061e0",
                "param_1": "memoryBuffer",
                "param_2": "byteValue",
                "param_3": "sizeInBytes",
                "puVar1": "targetMemoryAddress"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "update_linked_list_080061f0",
            "code": "\nvoid updateLinkedList_080061f0(undefined4 *ptr,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int **extra_out_ptr;\n  int **current_ptr;\n  int **next_ptr;\n  int *temp_ptr;\n  int **prev_ptr;\n  int **new_ptr;\n  \n  if (size == 0) {\n    return;\n  }\n  new_ptr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_ptr = (int **)((int)new_ptr + *(int *)(size + -4));\n  }\n  FUNC_08006eac();\n  next_ptr = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    new_ptr[1] = (int *)0x0;\n    current_ptr = extra_out_ptr;\n    DAT_200005f8 = new_ptr;\n  }\n  else {\n    next_ptr = DAT_200005f8;\n    if (new_ptr < DAT_200005f8) {\n      current_ptr = (int **)*new_ptr;\n      next_ptr = (int **)((int)new_ptr + (int)current_ptr);\n      if (DAT_200005f8 == next_ptr) {\n        temp_ptr = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        next_ptr = (int **)((int)temp_ptr + (int)current_ptr);\n        *new_ptr = (int *)next_ptr;\n      }\n      new_ptr[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = new_ptr;\n    }\n    else {\n      do {\n        prev_ptr = next_ptr;\n        next_ptr = (int **)prev_ptr[1];\n        if (next_ptr == (int **)0x0) break;\n      } while (next_ptr <= new_ptr);\n      current_ptr = (int **)*prev_ptr;\n      if ((int **)((int)prev_ptr + (int)current_ptr) == new_ptr) {\n        current_ptr = (int **)((int)current_ptr + (int)*new_ptr);\n        *prev_ptr = (int *)current_ptr;\n        if (next_ptr == (int **)((int)prev_ptr + (int)current_ptr)) {\n          temp_ptr = *next_ptr;\n          next_ptr = (int **)next_ptr[1];\n          current_ptr = (int **)((int)current_ptr + (int)temp_ptr);\n          *prev_ptr = (int *)current_ptr;\n          prev_ptr[1] = (int *)next_ptr;\n        }\n      }\n      else if (new_ptr < (int **)((int)prev_ptr + (int)current_ptr)) {\n        *ptr = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)new_ptr + (int)*new_ptr);\n        if (next_ptr == current_ptr) {\n          temp_ptr = *next_ptr;\n          next_ptr = (int **)next_ptr[1];\n          current_ptr = (int **)((int)temp_ptr + (int)*new_ptr);\n          *new_ptr = (int *)current_ptr;\n        }\n        new_ptr[1] = (int *)next_ptr;\n        prev_ptr[1] = (int *)new_ptr;\n      }\n    }\n  }\n  FUNC_08006eae(ptr,current_ptr,next_ptr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "update_linked_list_080061f0",
                "param_1": "ptr",
                "param_2": "size",
                "extraout_r1": "extra_out_ptr",
                "ppiVar1": "current_ptr",
                "ppiVar2": "next_ptr",
                "piVar3": "temp_ptr",
                "ppiVar4": "prev_ptr",
                "ppiVar5": "new_ptr"
            },
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_and_assign_memory_08006288",
            "code": "\nuint allocate_and_assign_memory_08006288(undefined4 *out_ptr,uint size)\n\n{\n  uint *current_block;\n  int difference;\n  uint *previous_block;\n  uint block_difference;\n  uint *previous_previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *out_ptr = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    current_block = DAT_200005f8;\n    previous_previous_block = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_difference = *previous_block - allocated_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (previous_previous_block == previous_block) {\n            current_block = (uint *)previous_previous_block[1];\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_previous_block != previous_block) {\n            previous_previous_block[1] = (uint)current_block;\n            previous_previous_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_difference;\n          *(uint *)((int)previous_block + block_difference) = allocated_size;\n          previous_previous_block = (uint *)((int)previous_block + block_difference);\n        }\n        goto LAB_080062ec;\n      }\n      previous_previous_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = allocate_memory_and_assign_to_param_08006920(out_ptr);\n    }\n    current_block = (uint *)allocate_memory_and_assign_to_param_08006920(out_ptr,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_previous_block ||\n        (difference = allocate_memory_and_assign_to_param_08006920(out_ptr,(int)previous_previous_block - (int)current_block), difference != -1)))) {\n      *previous_previous_block = allocated_size;\nLAB_080062ec:\n      FUNC_08006eae(out_ptr);\n      allocated_size = (int)previous_previous_block + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(previous_previous_block + 1);\n      if (difference != 0) {\n        *(int *)((int)previous_previous_block + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *out_ptr = 0xc;\n    FUNC_08006eae(out_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_and_assign_memory_08006288",
                "param_1": "out_ptr",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "puVar3": "previous_block",
                "uVar4": "block_difference",
                "puVar5": "previous_previous_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_bytes_08006344",
            "code": "\nuint process_bytes_08006344(int input_data,byte byte_value,byte **data_array)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint output_value;\n  \n  temp_var2 = data_array[2] + -1;\n  data_array[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)data_array[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)byte_value, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *data_array;\n    *data_array = temp_var2 + 1;\n    *temp_var2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_function_08006cb4();\n  }\n  if (data_array == (byte **)&DAT_08007904) {\n    data_array = *(byte ***)(input_data + 4);\n  }\n  else if (data_array == (byte **)&DAT_08007924) {\n    data_array = *(byte ***)(input_data + 8);\n  }\n  else if (data_array == (byte **)&DAT_080078e4) {\n    data_array = *(byte ***)(input_data + 0xc);\n  }\n  data_array[2] = data_array[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(data_array + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = data_array[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = process_data_080069e4(input_data,data_array,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    output_value = (uint)byte_value;\n    temp_var1 = (int)*data_array - (int)data_array[4];\n    if ((temp_var1 < (int)data_array[5]) || (temp_var1 = process_data_08006be0(input_data,data_array), temp_var1 == 0)) {\n      data_array[2] = data_array[2] + -1;\n      temp_var2 = *data_array;\n      *data_array = temp_var2 + 1;\n      *temp_var2 = byte_value;\n      if ((byte *)(temp_var1 + 1) != data_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1f)) {\n          return output_value;\n        }\n        if (output_value != 10) {\n          return output_value;\n        }\n      }\n      temp_var1 = process_data_08006be0(input_data,data_array);\n      if (temp_var1 == 0) {\n        return output_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_bytes_08006344",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "data_array",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "output_value"
            },
            "calling": [
                "FUN_08006370"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "process_data_08006370",
            "code": "\nint processData_08006370(undefined4 param1,undefined4 param2,undefined *data,int dataLength)\n\n{\n  int result;\n  undefined *lastElement;\n  int currentElementIndex;\n  \n  lastElement = data + dataLength;\n  currentElementIndex = dataLength;\n  do {\n    if (data == lastElement) {\n      return 0;\n    }\n    result = process_bytes_08006344(param1,*data,param2,dataLength,currentElementIndex);\n    dataLength = result + 1;\n    data = data + 1;\n  } while (dataLength != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "process_data_08006370",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "dataLength",
                "iVar1": "result",
                "puVar2": "lastElement",
                "iVar3": "currentElementIndex"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006344"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "process_and_format_data_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint process_and_format_data_08006394(int input_data,undefined4 *format_specifier,byte *string,int *output_length)\n\n{\n  int result;\n  int *output_length_ptr;\n  bool found_digit;\n  byte *current_char_ptr;\n  byte *next_char_ptr;\n  int temp_variable;\n  int temp_variable_2;\n  int *output_length_ptr;\n  uint flags;\n  int width;\n  undefined4 precision;\n  int star_width;\n  int total_written;\n  byte current_char;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined hash_flag;\n  undefined4 zero_flag;\n  \n  output_length_ptr = output_length;\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_function_08006cb4();\n  }\n  if (format_specifier == &DAT_08007904) {\n    format_specifier = *(undefined4 **)(input_data + 4);\n  }\n  else if (format_specifier == (undefined4 *)&DAT_08007924) {\n    format_specifier = *(undefined4 **)(input_data + 8);\n  }\n  else if (format_specifier == (undefined4 *)&DAT_080078e4) {\n    format_specifier = *(undefined4 **)(input_data + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format_specifier + 3) << 0x1c)) || (format_specifier[4] == 0)) &&\n     (temp_variable_2 = process_data_080069e4(input_data,format_specifier), temp_variable_2 != 0)) {\n    return -1;\n  }\n  total_written = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char_ptr = string;\nLAB_080063d6:\n  next_char_ptr = current_char_ptr;\n  if (*next_char_ptr != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  current_char_ptr = next_char_ptr + 1;\n  if (*next_char_ptr != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  temp_variable_2 = (int)next_char_ptr - (int)string;\n  if (temp_variable_2 != 0) {\n    result = process_data_08006370(input_data,format_specifier,string,temp_variable_2);\n    if (result == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(format_specifier + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_written;\n    }\n    total_written = total_written + temp_variable_2;\n  }\n  if (*next_char_ptr == 0) goto LAB_08006580;\n  flags = 0;\n  star_width = 0;\n  width = -1;\n  precision = 0;\n  hash_flag = 0;\n  zero_flag = 0;\n  current_char_ptr = next_char_ptr + 1;\n  while( true ) {\n    temp_variable_2 = find_character_08006e90(\"#-0+ \",*current_char_ptr);\n    string = current_char_ptr + 1;\n    if (temp_variable_2 == 0) break;\n    flags = 1 << (temp_variable_2 + 0xf7ff8750U & 0xff) | flags;\n    current_char_ptr = string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hash_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hash_flag = 0x2b;\n  }\n  if (*current_char_ptr == 0x2a) {\n    output_length_ptr = output_length_ptr + 1;\n    temp_variable_2 = *output_length_ptr;\n    output_length_ptr = output_length_ptr;\n    if (temp_variable_2 < 0) {\n      star_width = -temp_variable_2;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    found_digit = false;\n    temp_variable_2 = star_width;\n    string = current_char_ptr;\n    while( true ) {\n      if (9 < *string - 0x30) break;\n      temp_variable_2 = temp_variable_2 * 10 + (*string - 0x30);\n      found_digit = true;\n      string = string + 1;\n    }\n    if (!found_digit) goto LAB_080064be;\n  }\n  star_width = temp_variable_2;\nLAB_080064be:\n  if (*string == 0x2e) {\n    if (string[1] == 0x2a) {\n      string = string + 2;\n      output_length_ptr = output_length_ptr + 1;\n      width = *output_length_ptr;\n      output_length_ptr = output_length_ptr;\n      if (width < 0) {\n        width = -1;\n      }\n    }\n    else {\n      found_digit = false;\n      temp_variable_2 = 0;\n      width = 0;\n      while( true ) {\n        string = string + 1;\n        if (9 < *string - 0x30) break;\n        temp_variable_2 = temp_variable_2 * 10 + (*string - 0x30);\n        found_digit = true;\n      }\n      if (found_digit) {\n        width = temp_variable_2;\n      }\n    }\n  }\n  temp_variable_2 = find_character_08006e90(&DAT_080078b6,*string,3);\n  if (temp_variable_2 != 0) {\n    string = string + 1;\n    flags = flags | 0x40 << (temp_variable_2 + 0xf7ff874aU & 0xff);\n  }\n  current_char = *string;\n  string = string + 1;\n  temp_variable_2 = find_character_08006e90(\"efgEFG\",current_char,6);\n  if (temp_variable_2 == 0) {\n    temp_variable = reformat_and_calculate_080066b0(input_data,&flags,format_specifier,0x8006371,&output_length_ptr);\n    if (temp_variable == -1) goto LAB_08006580;\n  }\n  else {\n    output_length_ptr = (int *)(((int)output_length_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_written = total_written + temp_variable;\n  current_char_ptr = string;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "process_and_format_data_08006394",
                "param_1": "input_data",
                "param_2": "format_specifier",
                "param_3": "string",
                "param_4": "output_length",
                "iVar1": "result",
                "piVar2": "output_length_ptr",
                "bVar3": "found_digit",
                "pbVar4": "current_char_ptr",
                "pbVar5": "next_char_ptr",
                "unaff_r9": "temp_variable",
                "iVar6": "temp_variable_2",
                "local_8c": "output_length_ptr",
                "local_88": "flags",
                "local_84": "width",
                "local_80": "precision",
                "local_7c": "star_width",
                "local_74": "total_written",
                "local_70": "current_char",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "hash_flag",
                "local_30": "zero_flag"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "calculate_new_size_080065c0",
            "code": "\nundefined4\ncalculateNewSize_080065c0(undefined4 data,uint *inputArray,uint *outputSize,undefined4 param4,code *callback)\n\n{\n  int loopVariable1;\n  int loopVariable2;\n  uint maxSize;\n  uint tempSize;\n  bool flag;\n  \n  maxSize = inputArray[4];\n  if ((int)inputArray[4] < (int)inputArray[2]) {\n    maxSize = inputArray[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)inputArray + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*inputArray << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*inputArray & 6) == 0) {\n    for (loopVariable1 = 0; loopVariable1 < (int)(inputArray[3] - *outputSize); loopVariable1 = loopVariable1 + 1) {\n      loopVariable2 = (*callback)(data,param4,(int)inputArray + 0x19,1);\n      if (loopVariable2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)inputArray + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  tempSize = maxSize;\n  if ((int)(*inputArray << 0x1a) < 0) {\n    *(undefined *)((int)inputArray + maxSize + 0x43) = 0x30;\n    tempSize = maxSize + 2;\n    *(undefined *)((int)inputArray + maxSize + 0x44) = *(undefined *)((int)inputArray + 0x45);\n  }\n  loopVariable1 = (*callback)(data,param4,(int)inputArray + 0x43,tempSize);\n  if (loopVariable1 != -1) {\n    maxSize = inputArray[3];\n    flag = (*inputArray & 6) != 4;\n    if (flag) {\n      maxSize = 0;\n    }\n    tempSize = 0;\n    if (!flag) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (!flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    if ((int)inputArray[4] < (int)inputArray[2]) {\n      maxSize = maxSize + (inputArray[2] - inputArray[4]);\n    }\n    while( true ) {\n      if (maxSize == tempSize) {\n        return 0;\n      }\n      loopVariable1 = (*callback)(data,param4,(int)inputArray + 0x1a,1);\n      if (loopVariable1 == -1) break;\n      tempSize = tempSize + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "calculate_new_size_080065c0",
                "param_1": "data",
                "param_2": "inputArray",
                "param_3": "outputSize",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "loopVariable1",
                "iVar2": "loopVariable2",
                "uVar3": "maxSize",
                "uVar4": "tempSize",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_080066b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "reformat_and_calculate_080066b0",
            "code": "\nuint reformat_and_calculate_080066b0(undefined4 result,uint *input_data,undefined4 param_3,code *callback_func,uint **param_5)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr_data;\n  int loop_index;\n  char *char_set;\n  uint temp_var;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint temp_var_2;\n  uint temp_var_3;\n  char *ptr_char;\n  char *ptr_char_2;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(input_data + 6);\n  ptr_char_2 = (char *)((int)input_data + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800686a;\n          if (byte_value != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)input_data + 0x45) = 0x58;\n          char_set = \"0123456789ABCDEF\";\nLAB_080067fa:\n          temp_var = *input_data;\n          ptr_data = *param_5;\n          *param_5 = ptr_data + 1;\n          if (((temp_var & 0x80) == 0) && ((int)(temp_var << 0x19) < 0)) {\n            temp_var_2 = (uint)*(ushort *)ptr_data;\n          }\n          else {\n            temp_var_2 = *ptr_data;\n          }\n          if ((int)(temp_var << 0x1f) < 0) {\n            *input_data = temp_var | 0x20;\n          }\n          if (temp_var_2 == 0) {\n            *input_data = *input_data & 0xffffffdf;\n          }\n          temp_var = 0x10;\nLAB_08006790:\n          *(undefined *)((int)input_data + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080066e0;\n          temp_var_2 = *input_data;\n          ptr_data = *param_5;\n          if ((temp_var_2 & 0x80) == 0) {\n            *param_5 = ptr_data + 1;\n            if ((temp_var_2 & 0x40) == 0) goto LAB_08006700;\n            temp_var_2 = (uint)(short)*(ushort *)ptr_data;\n          }\n          else {\n            *param_5 = ptr_data + 1;\nLAB_08006700:\n            temp_var_2 = *ptr_data;\n          }\n          if ((int)temp_var_2 < 0) {\n            temp_var_2 = -temp_var_2;\n            *(undefined *)((int)input_data + 0x43) = 0x2d;\n          }\n          char_set = \"0123456789ABCDEF\";\n          temp_var = 10;\n        }\n        temp_var_3 = input_data[1];\n        input_data[2] = temp_var_3;\n        ptr_char = ptr_char_2;\n        if ((int)temp_var_3 < 0) {\n          if (temp_var_2 != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)input_data + 0x42) = *char_set;\n          ptr_char = (char *)((int)input_data + 0x42);\n        }\n        else {\n          *input_data = *input_data & 0xfffffffb;\n          if (temp_var_2 == 0) {\n            if (temp_var_3 != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              temp_var_3 = temp_var_2 / temp_var;\n              ptr_char = ptr_char + -1;\n              *ptr_char = char_set[temp_var_2 - temp_var * temp_var_3];\n              temp_var_2 = temp_var_3;\n            } while (temp_var_3 != 0);\n          }\n        }\n        if (((temp_var == 8) && ((int)(*input_data << 0x1f) < 0)) && ((int)input_data[1] <= (int)input_data[4]))\n        {\n          ptr_char[-1] = '0';\n          ptr_char = ptr_char + -1;\n        }\n        input_data[4] = (int)ptr_char_2 - (int)ptr_char;\n        ptr_char_2 = ptr_char;\n        goto LAB_080067d6;\n      }\n      ptr_data = *param_5;\n      *param_5 = ptr_data + 1;\n      *(char *)((int)input_data + 0x42) = (char)*ptr_data;\nLAB_08006740:\n      ptr_char_2 = (char *)((int)input_data + 0x42);\n      temp_var_2 = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08006766:\n            temp_var_2 = *input_data;\n            ptr_data = *param_5;\n            if ((temp_var_2 & 0x80) == 0) {\n              *param_5 = ptr_data + 1;\n              if ((temp_var_2 & 0x40) == 0) goto LAB_08006774;\n              temp_var_2 = (uint)*(ushort *)ptr_data;\n            }\n            else {\n              *param_5 = ptr_data + 1;\nLAB_08006774:\n              temp_var_2 = *ptr_data;\n            }\n            if (byte_value == 0x6f) {\n              temp_var = 8;\n            }\n            else {\n              temp_var = 10;\n            }\n            char_set = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byte_value == 0x70) {\n            *input_data = *input_data | 0x20;\nLAB_08006726:\n            char_set = \"0123456789abcdef\";\n            *(undefined *)((int)input_data + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08006766;\n          if (byte_value == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)input_data + 0x42) = byte_value;\n        goto LAB_08006740;\n      }\n      ppcVar8 = (char **)*param_5;\n      *param_5 = (uint *)(ppcVar8 + 1);\n      ptr_char_2 = *ppcVar8;\n      index = find_character_08006e90(ptr_char_2,0,input_data[1]);\n      if (index != 0) {\n        input_data[1] = index - (int)ptr_char_2;\n      }\n      temp_var_2 = input_data[1];\n    }\n    input_data[4] = temp_var_2;\n    *(undefined *)((int)input_data + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  temp_var_2 = *input_data;\n  ppuVar7 = (uint **)*param_5;\n  temp_var = input_data[5];\n  if ((temp_var_2 & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    ptr_data = *ppuVar7;\n    if ((temp_var_2 & 0x40) == 0) goto LAB_08006856;\n    *(short *)ptr_data = (short)temp_var;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    ptr_data = *ppuVar7;\nLAB_08006856:\n    *ptr_data = temp_var;\n  }\nLAB_0800686a:\n  input_data[4] = 0;\nLAB_080067d6:\n  index = calculate_new_size_080065c0(result,input_data,local_array,param_3,callback_func);\n  if ((index == -1) || (index = (*callback_func)(result,param_3,ptr_char_2,input_data[4]), index == -1)) {\nLAB_080067ea:\n    temp_var_2 = 0xffffffff;\n  }\n  else {\n    if ((int)(*input_data << 0x1e) < 0) {\n      for (index = 0; index < (int)(input_data[3] - local_array[0]); index = index + 1) {\n        loop_index = (*callback_func)(result,param_3,(int)input_data + 0x19,1);\n        if (loop_index == -1) goto LAB_080067ea;\n      }\n    }\n    temp_var_2 = input_data[3];\n    if ((int)input_data[3] < (int)local_array[0]) {\n      temp_var_2 = local_array[0];\n    }\n  }\n  return temp_var_2;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "reformat_and_calculate_080066b0",
                "param_1": "result",
                "param_2": "input_data",
                "param_4": "callback_func",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "ptr_data",
                "iVar4": "loop_index",
                "pcVar5": "char_set",
                "uVar6": "temp_var",
                "uVar9": "temp_var_2",
                "uVar10": "temp_var_3",
                "pcVar11": "ptr_char",
                "pcVar12": "ptr_char_2",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "initialize_if_not_initialized_080068f0",
            "code": "\nvoid initializeIfNotInitialized_080068f0(undefined4 dataPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int dataVar1;\n  undefined4 dataVar2;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  \n  dataVar1 = DAT_200000f8;\n  dataVar2 = dataPtr;\n  tempVar1 = param2;\n  tempVar2 = param3;\n  tempVar3 = param4;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_function_08006cb4(DAT_200000f8);\n  }\n  process_and_format_data_08006394(dataVar1,*(undefined4 *)(dataVar1 + 8),dataPtr,&tempVar1,dataVar2,&tempVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "initialize_if_not_initialized_080068f0",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "dataVar1",
                "uVar2": "dataVar2",
                "uStack_c": "tempVar1",
                "uStack_8": "tempVar2",
                "uStack_4": "tempVar3"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "allocate_memory_and_assign_to_param_08006920",
            "code": "\nvoid allocate_memory_and_assign_to_param_08006920(int *output_param,undefined4 memory_size)\n\n{\n  int allocation_result;\n  \n  DAT_200006a4 = 0;\n  allocation_result = allocate_memory_080056d8(memory_size);\n  if ((allocation_result == -1) && (DAT_200006a4 != 0)) {\n    *output_param = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "allocate_memory_and_assign_to_param_08006920",
                "param_1": "output_param",
                "param_2": "memory_size",
                "iVar1": "allocation_result"
            },
            "calling": [
                "FUN_08006288"
            ],
            "called": [
                "FUN_080056d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "process_data_080069e4",
            "code": "\nuint processData_080069e4(undefined4 *outputPtr,undefined4 *inputPtr)\n\n{\n  int dataPtr;\n  uint result;\n  ushort inputValue;\n  \n  dataPtr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_function_08006cb4(DAT_200000f8);\n  }\n  if (inputPtr == &DAT_08007904) {\n    inputPtr = *(undefined4 **)(dataPtr + 4);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_08007924) {\n    inputPtr = *(undefined4 **)(dataPtr + 8);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_080078e4) {\n    inputPtr = *(undefined4 **)(dataPtr + 0xc);\n  }\n  inputValue = *(ushort *)(inputPtr + 3);\n  result = (uint)inputValue;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *outputPtr = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)inputPtr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputPtr[0xd] != inputPtr + 0x11) {\n          updateLinkedList(outputPtr);\n        }\n        inputPtr[0xd] = 0;\n      }\n      *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) & 0xffdb;\n      inputPtr[1] = 0;\n      *inputPtr = inputPtr[4];\n    }\n    *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) | 8;\n  }\n  if ((inputPtr[4] == 0) && ((*(ushort *)(inputPtr + 3) & 0x280) != 0x200)) {\n    initializeMemory(outputPtr,inputPtr);\n  }\n  inputValue = *(ushort *)(inputPtr + 3);\n  result = inputValue & 1;\n  if ((inputValue & 1) == 0) {\n    if (-1 < (int)((uint)inputValue << 0x1e)) {\n      result = inputPtr[5];\n    }\n    inputPtr[2] = result;\n  }\n  else {\n    inputPtr[2] = 0;\n    inputPtr[6] = -inputPtr[5];\n  }\n  if (inputPtr[4] == 0) {\n    inputValue = *(ushort *)(inputPtr + 3);\n    result = (int)(short)inputValue & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(inputPtr + 3) = inputValue | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "process_data_080069e4",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "iVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "inputValue",
                "update_linked_list_080061f0": "updateLinkedList",
                "initialize_and_assign_memory_08006e10": "initializeMemory"
            },
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUNC_08006cb4(DAT_200000f8);\n  }\n  if (param_2 == &DAT_08007904) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08007924) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_080078e4) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_linked_list_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_and_assign_memory_08006e10(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "process_and_execute_08006ac0",
            "code": "\nvoid processAndExecute_08006ac0(void)\n\n{\n  uint *data;\n  int tempVar;\n  int *parameters;\n  int *linkedList;\n  uint dataValue;\n  ushort flags;\n  int loopCount;\n  code *pcVar8;\n  int startValue;\n  uint previousValue;\n  code *jumpTable;\n  bool isZero;\n  undefined8 loopResult;\n  \n  process_parameter_08006f00(6);\n  jumpTable = (code *)0x8006acf;\n  loopResult = endless_loop_0800573c(1);\n  parameters = (int *)((ulonglong)loopResult >> 0x20);\n  data = (uint *)loopResult;\n  flags = *(ushort *)(parameters + 3);\n  dataValue = (uint)flags;\n  if ((int)(dataValue << 0x1c) < 0) {\n    tempVar = parameters[4];\n    if (tempVar != 0) {\n      loopCount = dataValue << 0x1e;\n      isZero = loopCount != 0;\n      if (isZero) {\n        loopCount = 0;\n      }\n      startValue = *parameters;\n      if (!isZero) {\n        loopCount = parameters[5];\n      }\n      *parameters = tempVar;\n      parameters[2] = loopCount;\n      for (startValue = startValue - tempVar; 0 < startValue; startValue = startValue - loopCount) {\n        loopCount = (*(code *)parameters[10])(data,parameters[8],tempVar,startValue);\n        if (loopCount < 1) {\n          flags = *(ushort *)(parameters + 3);\n          goto LAB_08006bc6;\n        }\n        tempVar = tempVar + loopCount;\n      }\n    }\n  }\n  else if (((0 < parameters[1]) || (0 < parameters[0x10])) &&\n          (pcVar8 = (code *)parameters[0xb], pcVar8 != (code *)0x0)) {\n    previousValue = *data;\n    *data = 0;\n    if ((flags & 0x1000) == 0) {\n      tempVar = (*pcVar8)(data,parameters[8],dataValue & 0x1000,1);\n      if ((tempVar == -1) && (dataValue = *data, dataValue != 0)) {\n        if ((dataValue != 0x1d) && (dataValue != 0x16)) {\n          *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *data = previousValue;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      tempVar = parameters[0x15];\n    }\n    if (((int)((uint)*(ushort *)(parameters + 3) << 0x1d) < 0) &&\n       (tempVar = tempVar - parameters[1], parameters[0xd] != 0)) {\n      tempVar = tempVar - parameters[0x10];\n    }\n    tempVar = (*(code *)parameters[0xb])(data,parameters[8],tempVar,0);\n    flags = *(ushort *)(parameters + 3);\n    if ((tempVar == -1) &&\n       ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(parameters + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    parameters[1] = 0;\n    *parameters = parameters[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((tempVar != -1 || (*data == 0)))) {\n      parameters[0x15] = tempVar;\n    }\n    linkedList = (int *)parameters[0xd];\n    *data = previousValue;\n    if (linkedList != (int *)0x0) {\n      if (linkedList != parameters + 0x11) {\n        update_linked_list_080061f0(data);\n      }\n      parameters[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "process_and_execute_08006ac0",
                "piVar3": "parameters",
                "puVar1": "data",
                "uVar5": "dataValue",
                "uVar6": "flags",
                "iVar2": "tempVar",
                "iVar7": "loopCount",
                "piVar4": "linkedList",
                "uVar10": "previousValue",
                "bVar11": "isZero",
                "uVar12": "loopResult",
                "iVar9": "startValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 processData_08006be0(uint *data,int *options)\n\n{\n  undefined4 result;\n  int offset;\n  int *linkedData;\n  uint temp1;\n  ushort temp2;\n  int iteration;\n  undefined4 unused_1;\n  undefined4 unused_2;\n  code *callback;\n  int remaining;\n  uint temp3;\n  code *unrecoveredTable;\n  bool condition;\n  \n  if (options[4] != 0) {\n    if ((data != (uint *)0x0) && (data[6] == 0)) {\n      initialize_function_08006cb4();\n    }\n    if (options == &DAT_08007904) {\n      options = (int *)data[1];\n    }\n    else if (options == (int *)&DAT_08007924) {\n      options = (int *)data[2];\n    }\n    else if (options == (int *)&DAT_080078e4) {\n      options = (int *)data[3];\n    }\n    if (*(short *)(options + 3) != 0) {\n      temp2 = *(ushort *)(options + 3);\n      temp1 = (uint)temp2;\n      if ((int)(temp1 << 0x1c) < 0) {\n        offset = options[4];\n        if (offset != 0) {\n          iteration = temp1 << 0x1e;\n          condition = iteration != 0;\n          if (condition) {\n            iteration = 0;\n          }\n          remaining = *options;\n          if (!condition) {\n            iteration = options[5];\n          }\n          *options = offset;\n          options[2] = iteration;\n          for (remaining = remaining - offset; 0 < remaining; remaining = remaining - iteration) {\n            iteration = (*(code *)options[10])(data,options[8],offset,remaining,unused_1,unused_2);\n            if (iteration < 1) {\n              temp2 = *(ushort *)(options + 3);\n              goto LAB_08006bc6;\n            }\n            offset = offset + iteration;\n          }\n        }\n      }\n      else if (((0 < options[1]) || (0 < options[0x10])) &&\n              (callback = (code *)options[0xb], callback != (code *)0x0)) {\n        temp3 = *data;\n        *data = 0;\n        if ((temp2 & 0x1000) == 0) {\n          offset = (*callback)(data,options[8],temp1 & 0x1000,1);\n          if ((offset == -1) && (temp1 = *data, temp1 != 0)) {\n            if ((temp1 != 0x1d) && (temp1 != 0x16)) {\n              *(ushort *)(options + 3) = *(ushort *)(options + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*unrecoveredTable)();\n              return result;\n            }\n            *data = temp3;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          offset = options[0x15];\n        }\n        if (((int)((uint)*(ushort *)(options + 3) << 0x1d) < 0) &&\n           (offset = offset - options[1], options[0xd] != 0)) {\n          offset = offset - options[0x10];\n        }\n        offset = (*(code *)options[0xb])(data,options[8],offset,0);\n        temp2 = *(ushort *)(options + 3);\n        if ((offset == -1) &&\n           ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(options + 3) = temp2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*unrecoveredTable)(0xffffffff);\n          return result;\n        }\n        options[1] = 0;\n        *options = options[4];\n        if (((int)((uint)temp2 << 0x13) < 0) && ((offset != -1 || (*data == 0)))) {\n          options[0x15] = offset;\n        }\n        linkedData = (int *)options[0xd];\n        *data = temp3;\n        if (linkedData != (int *)0x0) {\n          if (linkedData != options + 0x11) {\n            update_linked_list_080061f0(data);\n          }\n          options[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*unrecoveredTable)();\n          return result;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*unrecoveredTable)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "data",
                "param_2": "options",
                "uVar1": "result",
                "iVar2": "offset",
                "piVar3": "linkedData",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "iVar6": "iteration",
                "unaff_r4": "unused_1",
                "unaff_r5": "unused_2",
                "pcVar7": "callback",
                "iVar8": "remaining",
                "uVar9": "temp3",
                "bVar10": "condition",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredTable"
            },
            "calling": [
                "FUN_08006344"
            ],
            "called": [
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == &DAT_08007904) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08007924) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_080078e4) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_linked_list_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_structure_08006c40",
            "code": "\nvoid initializeStructure_08006c40(undefined4 *structure,undefined2 value1,undefined2 value2)\n\n{\n  *structure = 0;\n  structure[1] = 0;\n  structure[2] = 0;\n  *(undefined2 *)(structure + 3) = value1;\n  structure[0x19] = 0;\n  *(undefined2 *)((int)structure + 0xe) = value2;\n  structure[4] = 0;\n  structure[5] = 0;\n  structure[6] = 0;\n  fillMemory(structure + 0x17,0,8);\n  structure[8] = structure;\n  structure[9] = 0x8006f39;\n  structure[10] = 0x8006f5b;\n  structure[0xb] = 0x8006f93;\n  structure[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_structure_08006c40",
                "param_1": "structure",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_with_byte_080061e0": "fillMemory",
                "LAB_08006fb6_1": "label"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_memory_and_initialize_08006c88",
            "code": "\nundefined4 * allocateMemoryAndInitialize_08006c88(undefined4 param1,int param2)\n\n{\n  undefined4 *allocatedMemory;\n  int offset;\n  \n  offset = (param2 + -1) * 0x68;\n  allocatedMemory = (undefined4 *)allocate_and_assign_memory_08006288(param1,offset + 0x74);\n  if (allocatedMemory != (undefined4 *)0x0) {\n    *allocatedMemory = 0;\n    allocatedMemory[1] = param2;\n    allocatedMemory[2] = allocatedMemory + 3;\n    fill_memory_with_byte_080061e0(allocatedMemory + 3,0,offset + 0x68);\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_memory_and_initialize_08006c88",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "allocatedMemory",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_function_08006cb4",
            "code": "\nvoid initialize_function_08006cb4(undefined4 *parameter_array)\n\n{\n  undefined4 data;\n  undefined4 *data_pointer;\n  \n  if (parameter_array[6] == 0) {\n    parameter_array[0x12] = 0;\n    parameter_array[0x13] = 0;\n    parameter_array[0x14] = 0;\n    data_pointer = &DAT_200000fc;\n    parameter_array[10] = &constant_label;\n    if (parameter_array == &DAT_200000fc) {\n      data_pointer = (undefined4 *)0x1;\n    }\n    if (parameter_array == &DAT_200000fc) {\n      parameter_array[6] = data_pointer;\n    }\n    data = initialize_data_08006d14();\n    parameter_array[1] = data;\n    data = initialize_data_08006d14(parameter_array);\n    parameter_array[2] = data;\n    data = initialize_data_08006d14(parameter_array);\n    parameter_array[3] = data;\n    initialize_structure_08006c40(parameter_array[1],4,0);\n    initialize_structure_08006c40(parameter_array[2],9,1);\n    initialize_structure_08006c40(parameter_array[3],0x12,2);\n    parameter_array[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_function_08006cb4",
                "param_1": "parameter_array",
                "uVar1": "data",
                "puVar2": "data_pointer",
                "LAB_08006c34_1": "constant_label"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006344",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "initialize_data_08006d14",
            "code": "\nint * initializeData_08006d14(undefined4 *errorFlag,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currentPtr;\n  int *nestedPtr;\n  int **nestedArrayPtr;\n  \n  if (DAT_20000114 == 0) {\n    initialize_function_08006cb4(&DAT_200000fc);\n  }\n  nestedArrayPtr = (int **)&DAT_20000144;\n  do {\n    nestedPtr = nestedArrayPtr[2];\n    currentPtr = nestedArrayPtr[1];\n    while (currentPtr = (int *)((int)currentPtr + -1), -1 < (int)currentPtr) {\n      if (*(short *)(nestedPtr + 3) == 0) {\n        *(undefined2 *)((int)nestedPtr + 0xe) = 0xffff;\n        nestedPtr[0x19] = 0;\n        *(undefined2 *)(nestedPtr + 3) = 1;\n        *nestedPtr = 0;\n        nestedPtr[2] = 0;\n        nestedPtr[1] = 0;\n        nestedPtr[4] = 0;\n        nestedPtr[5] = 0;\n        nestedPtr[6] = 0;\n        fill_memory_with_byte_080061e0(nestedPtr + 0x17,0,8,1,param4);\n        nestedPtr[0xd] = 0;\n        nestedPtr[0xe] = 0;\n        nestedPtr[0x12] = 0;\n        nestedPtr[0x13] = 0;\n        return nestedPtr;\n      }\n      nestedPtr = nestedPtr + 0x1a;\n    }\n    if (*nestedArrayPtr == (int *)0x0) {\n      currentPtr = (int *)allocate_memory_and_initialize_08006c88(errorFlag,4);\n      *nestedArrayPtr = currentPtr;\n      if (currentPtr == (int *)0x0) {\n        *errorFlag = 0xc;\n        return (int *)0x0;\n      }\n    }\n    nestedArrayPtr = (int **)*nestedArrayPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "initialize_data_08006d14",
                "param_1": "errorFlag",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentPtr",
                "piVar2": "nestedPtr",
                "ppiVar3": "nestedArrayPtr"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_20000114 == 0) {\n    FUNC_08006cb4(&DAT_200000fc);\n  }\n  ppiVar3 = (int **)&DAT_20000144;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_byte_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_memory_and_initialize_08006c88(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "check_and_set_permission_08006dc8",
            "code": "\nundefined4 checkAndSetPermission_08006dc8(undefined4 param1,int param2,undefined4 *result,uint *permissionFlag)\n\n{\n  int permissionResult;\n  undefined4 permissionValue;\n  undefined tempStack [4];\n  uint localFlag;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (permissionResult = set_permission_flag_08007004(param1,(int)*(short *)(param2 + 0xe),tempStack), permissionResult < 0)) {\n    *permissionFlag = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      permissionValue = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *permissionFlag = (uint)((localFlag & 0xf000) == 0x2000);\n  }\n  permissionValue = 0x400;\nLAB_08006e08:\n  *result = permissionValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "check_and_set_permission_08006dc8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "result",
                "param_4": "permissionFlag",
                "iVar1": "permissionResult",
                "uVar2": "permissionValue",
                "auStack_4c": "tempStack",
                "local_48": "localFlag"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08007004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "initialize_and_assign_memory_08006e10",
            "code": "\nvoid initialize_and_assign_memory_08006e10(int function_address,int *function_info)\n\n{\n  ushort permission_flag;\n  int allocated_memory;\n  int parameter_1;\n  int *parameter_2;\n  \n  if (-1 < (int)((uint)*(ushort *)(function_info + 3) << 0x1e)) {\n    parameter_1 = function_address;\n    parameter_2 = function_info;\n    permission_flag = check_and_set_permission_08006dc8(function_address,function_info,&parameter_1,&parameter_2);\n    allocated_memory = allocate_and_assign_memory_08006288(function_address,parameter_1);\n    if (allocated_memory != 0) {\n      *(undefined **)(function_address + 0x28) = &LAB_08006c34_1;\n      *function_info = allocated_memory;\n      *(ushort *)(function_info + 3) = *(ushort *)(function_info + 3) | 0x80;\n      function_info[4] = allocated_memory;\n      function_info[5] = parameter_1;\n      if ((parameter_2 != (int *)0x0) &&\n         (allocated_memory = initialize_and_check_function_08007028(function_address,(int)*(short *)((int)function_info + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(function_info + 3) = *(ushort *)(function_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(function_info + 3) = permission_flag | *(ushort *)(function_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(function_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(function_info + 3) = *(ushort *)(function_info + 3) & 0xfffc | 2;\n  }\n  *function_info = (int)function_info + 0x47;\n  function_info[4] = (int)function_info + 0x47;\n  function_info[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "initialize_and_assign_memory_08006e10",
                "param_1": "function_address",
                "param_2": "function_info",
                "uVar1": "permission_flag",
                "iVar2": "allocated_memory",
                "local_18": "parameter_1",
                "local_14": "parameter_2"
            },
            "calling": [
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_character_08006e90",
            "code": "\nchar * find_character_08006e90(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_character_08006e90",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "process_parameter_08006f00",
            "code": "\nint processParameter_08006f00(uint input)\n\n{\n  int *ptrData;\n  undefined4 returnValue;\n  int value;\n  code *functionPtr;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  undefined4 *ptrDataCopy;\n  \n  ptrData = DAT_200000f8;\n  ptrDataCopy = &DAT_200000f8;\n  if (0x1f < input) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  value = DAT_200000f8[0x11];\n  if ((value != 0) && (functionPtr = *(code **)(value + input * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(value + input * 4) = 0;\n      (*functionPtr)(input);\n    }\n    return 0;\n  }\n  returnValue = thunk_get_return_value_08005750(DAT_200000f8);\n  DAT_200006a4 = 0;\n  value = initialize_value_08005740(returnValue,input,input,0,ptrDataCopy,unusedVar1,unusedVar2,unusedVar3);\n  if ((value == -1) && (DAT_200006a4 != 0)) {\n    *ptrData = DAT_200006a4;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "process_parameter_08006f00",
                "param_1": "input",
                "piVar1": "ptrData",
                "uVar2": "returnValue",
                "iVar3": "value",
                "pcVar4": "functionPtr",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "in_lr": "unusedVar3",
                "puVar5": "ptrDataCopy"
            },
            "calling": [
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "entrypoint": "0x08006f34",
            "current_name": "get_one_thunk_08005750",
            "code": "\nint getOne_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005750": "get_one_thunk_08005750",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [
                "FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_data_08006f38",
            "code": "\nvoid updateData_08006f38(undefined4 param1,int param2)\n\n{\n  int returnValue;\n  uint updatedValue;\n  bool isPositive;\n  \n  returnValue = process_return_value_0800706c(param1,(int)*(short *)(param2 + 0xe));\n  isPositive = -1 < returnValue;\n  if (isPositive) {\n    updatedValue = *(int *)(param2 + 0x54) + returnValue;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(param2 + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(param2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_data_08006f38",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "returnValue",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800706c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "initialize_and_process_data_08006f5a",
            "code": "\nvoid initialize_and_process_data_08006f5a(int *result_arr,int data_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  \n  if ((int)((uint)*(ushort *)(data_ptr + 0xc) << 0x17) < 0) {\n    initialize_zero_and_assign_08007048(result_arr,(int)*(short *)(data_ptr + 0xe),0,2);\n  }\n  *(ushort *)(data_ptr + 0xc) = *(ushort *)(data_ptr + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  result = process_and_check_data_08005730((int)*(short *)(data_ptr + 0xe),param_3,param_4,param_4,param_4,unused_var1,\n                       unused_var2,unused_var3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *result_arr = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "initialize_and_process_data_08006f5a",
                "param_1": "result_arr",
                "param_2": "data_ptr",
                "iVar1": "result",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "in_lr": "unused_var3"
            },
            "calling": [],
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "initialize_and_assign_value_08006f92",
            "code": "\nvoid initializeAndAssignValue_08006f92(undefined4 param1,int param2)\n\n{\n  int initializedValue;\n  ushort updatedValue;\n  bool isError;\n  \n  initializedValue = initialize_zero_and_assign_08007048(param1,(int)*(short *)(param2 + 0xe));\n  isError = initializedValue == -1;\n  if (isError) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = initializedValue;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "initialize_and_assign_value_08006f92",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initializedValue",
                "uVar2": "updatedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08007048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "set_permission_flag_08007004",
            "code": "\nvoid setPermissionFlag_08007004(int *output,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = set_permission_flag_0800571a(param1,param2,param2,0,param3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "set_permission_flag_08007004",
                "param_1": "output",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006dc8"
            ],
            "called": [
                "FUN_0800571a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "initialize_and_check_function_08007028",
            "code": "\nvoid initialize_and_check_function_08007028(int *output_value,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = initialize_function_08005724(input_value);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output_value = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "initialize_and_check_function_08007028",
                "param_1": "output_value",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08005724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "initialize_zero_and_assign_08007048",
            "code": "\nvoid initializeZeroAndAssign_08007048(int *resultPointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_200006a4 = 0;\n  returnValue = initialize_zero_08005728(arg1,arg2,arg3,arg3,arg3);\n  if ((returnValue == -1) && (DAT_200006a4 != 0)) {\n    *resultPointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "initialize_zero_and_assign_08007048",
                "param_1": "resultPointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "process_return_value_0800706c",
            "code": "\nvoid processReturnValue_0800706c(int *result,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int returnValue;\n  \n  DAT_200006a4 = 0;\n  returnValue = get_return_value_0800572c(param_2,param_3,param_4,param_4,param_4);\n  if ((returnValue == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "process_return_value_0800706c",
                "param_1": "result",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08006f38"
            ],
            "called": [
                "FUN_0800572c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "execute_and_process_function_08007090",
            "code": "\nvoid execute_and_process_function_08007090(void)\n\n{\n  code *jump_table;\n  \n  jump_table = execute_and_process_function_08007090;\n  process_and_execute_08006ac0();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "execute_and_process_function_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080060d4"
            ],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08006198"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 174868,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08001294",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800365c",
            "FUN_08003a68",
            "FUN_08003c44",
            "FUN_08004092",
            "FUN_08004110",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_080049f0",
            "FUN_08004c5e",
            "FUN_08004c8a",
            "FUN_08004cb2",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004e70",
            "FUN_080055bc",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_0800591e",
            "FUN_08005a44",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005c1c",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005f8c",
            "FUN_08006158",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_080065c0",
            "FUN_08006e90",
            "thunk_FUN_08005750"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_080009b8",
            "FUN_08000aec",
            "FUN_08001a66",
            "FUN_08001c3c",
            "FUN_08001f84",
            "FUN_080020f0",
            "FUN_08003688",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003ea0",
            "FUN_080040b0",
            "FUN_0800412c",
            "FUN_080043b4",
            "FUN_08004974",
            "FUN_08004b34",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c78",
            "FUN_08004ca2",
            "FUN_08004cce",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_08005568",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005ce8",
            "FUN_08006112",
            "FUN_080066b0",
            "FUN_08006920",
            "FUN_08006c40",
            "FUN_08006f00",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080009a8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08001918",
            "FUN_08001c88",
            "FUN_08002004",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_0800316c",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003da4",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004204",
            "FUN_08004478",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_08005b54",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005d8a",
            "FUN_08005fc8",
            "FUN_08006288",
            "FUN_08006ac0",
            "FUN_08006dc8",
            "FUN_08006f38",
            "FUN_08006f92"
        ],
        [
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_080012a2",
            "FUN_080015b2",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08001cd0",
            "FUN_08002384",
            "FUN_080032b4",
            "FUN_08003520",
            "FUN_0800441a",
            "FUN_080046b8",
            "FUN_08004b3c",
            "FUN_08004e20",
            "FUN_0800598a",
            "FUN_08005bb0",
            "FUN_08005d82",
            "FUN_08006c88",
            "FUN_08006e10"
        ],
        [
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_080033b8",
            "FUN_08004a4c",
            "FUN_08004c52",
            "FUN_080057b4",
            "FUN_08005da8"
        ],
        [
            "FUN_08001310",
            "FUN_0800157c",
            "FUN_08001a44",
            "FUN_08001ab0",
            "FUN_08001c32",
            "FUN_08005754",
            "FUN_08005f2c"
        ],
        [
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_08001550",
            "FUN_08001b18",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08000cd0",
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba"
        ],
        [
            "FUN_08001510"
        ],
        [
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080069e4",
            "FUN_08006be0",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08006394"
        ],
        [
            "FUN_08006174",
            "FUN_080068f0"
        ],
        [
            "FUN_08004f4c",
            "FUN_0800611c"
        ],
        [
            "FUN_08005384",
            "FUN_08005a68"
        ],
        [
            "FUN_08000bcc",
            "FUN_080053d4"
        ],
        [
            "FUN_08005730",
            "FUN_08005f6c"
        ],
        [
            "FUN_08006f5a"
        ]
    ],
    "locked_functions": []
}