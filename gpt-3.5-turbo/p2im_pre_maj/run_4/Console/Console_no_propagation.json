{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_00000410",
            "code": "\nvoid initialize_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_parameter_and_update_offset_00000428",
            "code": "\ndword validateParameterAndUpdateOffset_00000428(undefined4 *resultPointer,int inputValue)\n\n{\n  undefined4 returnValue;\n  dword updatedOffset;\n  \n  returnValue = FUN_00000cd0();\n  updatedOffset = arrayOfOffsets[0].r_offset;\n  if ((inputValue + arrayOfOffsets[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputValue + arrayOfOffsets[0].r_offset)) {\n    arrayOfOffsets[0].r_offset = inputValue + arrayOfOffsets[0].r_offset;\n  }\n  else {\n    *resultPointer = 0xc;\n    updatedOffset = 0xffffffff;\n  }\n  FUN_00000d0c(returnValue);\n  return updatedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_parameter_and_update_offset_00000428",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "uVar1": "returnValue",
                "local_c": "updatedOffset",
                "Elf32_Rel_ARRAY_1fff0200": "arrayOfOffsets"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "execute_function_00000490",
            "code": "\nundefined4 executeFunction_00000490(undefined4 input_1,undefined4 input_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 functionResult;\n  \n  functionResult = FUN_00000e14(param_3,param_4);\n  return functionResult;\n}\n\n",
            "renaming": {
                "FUN_00000490": "execute_function_00000490",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "functionResult"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_error_000004f2",
            "code": "\nundefined4 initializeValueAndReturnError_000004f2(undefined4 *valuePointer)\n\n{\n  *valuePointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_error_000004f2",
                "param_1": "valuePointer"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_memory_00000514",
            "code": "\nundefined4 initializeMemory_00000514(undefined4 *memoryPointer)\n\n{\n  *memoryPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_memory_00000514",
                "param_1": "memoryPointer"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_valid_param_00000534",
            "code": "\nundefined4 checkValidParam_00000534(undefined4 *result,int input)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_valid_param_00000534",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "extract_bits_00000566",
            "code": "\nint extractBits_00000566(int input)\n\n{\n  byte firstByte;\n  byte secondByte;\n  byte thirdByte;\n  byte fourthByte;\n  int result;\n  \n  secondByte = (byte)input;\n  thirdByte = (byte)((uint)input >> 8);\n  fourthByte = (byte)((uint)input >> 0x10);\n  firstByte = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((secondByte & 1) << 1 | secondByte >> 1 & 1) << 1 | secondByte >> 2 & 1) << 1\n                                  | secondByte >> 3 & 1) << 1 | secondByte >> 4 & 1) << 1 | secondByte >> 5 & 1) <<\n                                1 | secondByte >> 6 & 1) << 1 | secondByte >> 7) << 0x18 |\n                  (uint)(byte)((((((((thirdByte & 1) << 1 | thirdByte >> 1 & 1) << 1 | thirdByte >> 2 & 1) << 1\n                                  | thirdByte >> 3 & 1) << 1 | thirdByte >> 4 & 1) << 1 | thirdByte >> 5 & 1) <<\n                                1 | thirdByte >> 6 & 1) << 1 | thirdByte >> 7) << 0x10 |\n                  (uint)(byte)((((((((fourthByte & 1) << 1 | fourthByte >> 1 & 1) << 1 | fourthByte >> 2 & 1) << 1\n                                  | fourthByte >> 3 & 1) << 1 | fourthByte >> 4 & 1) << 1 | fourthByte >> 5 & 1) <<\n                                1 | fourthByte >> 6 & 1) << 1 | fourthByte >> 7) << 8 |\n                  (uint)(byte)((((((((firstByte & 1) << 1 | firstByte >> 1 & 1) << 1 | firstByte >> 2 & 1) << 1\n                                  | firstByte >> 3 & 1) << 1 | firstByte >> 4 & 1) << 1 | firstByte >> 5 & 1) <<\n                                1 | firstByte >> 6 & 1) << 1 | firstByte >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "extract_bits_00000566",
                "param_1": "input",
                "bVar1": "firstByte",
                "bVar2": "secondByte",
                "bVar3": "thirdByte",
                "bVar4": "fourthByte",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_value_0000058e",
            "code": "\nvoid updatePointerValue_0000058e(int *inputPointer,undefined4 *outputPointer)\n\n{\n  if (*inputPointer == 0) {\n    *outputPointer = outputPointer;\n  }\n  else {\n    *outputPointer = *(undefined4 *)*inputPointer;\n    *(undefined4 **)*inputPointer = outputPointer;\n  }\n  *inputPointer = outputPointerValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_value_0000058e",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "(int)param_2": "outputPointerValue"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_pointer_from_address_000005ca",
            "code": "\nundefined4 * extractPointerFromAddress_000005ca(int *addressPointer)\n\n{\n  undefined4 *extractedPointer;\n  \n  if (*addressPointer == 0) {\n    extractedPointer = (undefined4 *)0x0;\n  }\n  else {\n    extractedPointer = *(undefined4 **)*addressPointer;\n    if (extractedPointer == (undefined4 *)*addressPointer) {\n      *addressPointer = 0;\n    }\n    else {\n      *(undefined4 *)*addressPointer = *extractedPointer;\n    }\n  }\n  return extractedPointer;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_pointer_from_address_000005ca",
                "param_1": "addressPointer",
                "puVar1": "extractedPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "update_data_00000610",
            "code": "\nundefined4 updateData_00000610(void)\n\n{\n  int dataPointer;\n  int index;\n  undefined4 result;\n  \n  dataPointer = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (dataPointer == index + -8) {\n    result = 0;\n  }\n  else {\n    if ((dataPointer != 0) && (*(char *)(dataPointer + 4) == '\\t')) {\n      *(undefined *)(dataPointer + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    result = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "update_data_00000610",
                "iVar1": "dataPointer",
                "iVar2": "index",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_and_validate_data_00000698",
            "code": "\nvoid updateAndValidateData_00000698(int dataOffset,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(unsignedByte *)(dataOffset + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(unsignedByte *)(dataOffset + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(unsignedByte *)(dataOffset + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signedByte *)(dataOffset + 5));\n    }\n  }\n  else if (*(unsignedByte *)(dataOffset + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(unsignedByte *)(dataOffset + 5) * 4,dataOffset + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signedByte *)(dataOffset + 5);\n  }\n  *(char *)(dataOffset + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_and_validate_data_00000698",
                "param_1": "dataOffset",
                "param_2": "newValue",
                "sbyte": "signedByte",
                "byte": "unsignedByte"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_param_validity_00000738",
            "code": "\nvoid checkParamValidity_00000738(ushort inputParam)\n\n{\n  int returnValue;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputParam < *(byte *)(DAT_1fff03dc + 5))) {\n    returnValue = FUN_00000d2a();\n    if (returnValue == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_param_validity_00000738",
                "param_1": "inputParam",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_data_00000794",
            "code": "\nint * initializeData_00000794(void)\n\n{\n  int extraout_r1;\n  int counter;\n  undefined4 *pointer;\n  uint alignedAddress;\n  int outerLoopCounter;\n  int innerLoopCounter;\n  int *stackPointer;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  alignedAddress = (int)pointer + counter & 0xfffffffc;\n  stackPointer = (int *)(alignedAddress - 4);\n  *stackPointer = 0x77777777;\n  if (((uint)stackPointer & 7) != 0) {\n    stackPointer = (int *)(alignedAddress - 8);\n    *stackPointer = 0x88888888;\n  }\n  stackPointer[-1] = 0x1000000;\n  stackPointer[-2] = counter << 0xd;\n  stackPointer[-3] = 0x795;\n  stackPointer = stackPointer + -4;\n  *stackPointer = 0;\n  for (innerLoopCounter = 3; 0 < innerLoopCounter; innerLoopCounter = innerLoopCounter + -1) {\n    stackPointer = stackPointer + -1;\n    *stackPointer = innerLoopCounter;\n  }\n  stackPointer = stackPointer + -1;\n  *stackPointer = extraout_r1;\n  for (outerLoopCounter = 0xb; 3 < outerLoopCounter; outerLoopCounter = outerLoopCounter + -1) {\n    stackPointer = stackPointer + -1;\n    *stackPointer = outerLoopCounter;\n  }\n  stackPointer[-1] = -3;\n  return stackPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_data_00000794",
                "iVar1": "counter",
                "puVar2": "pointer",
                "uVar3": "alignedAddress",
                "iStack_1c": "outerLoopCounter",
                "iStack_18": "innerLoopCounter",
                "piStack_14": "stackPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_array_000007dc",
            "code": "\nint * initializeArray_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint adjustedSize;\n  int outerLoopCounter;\n  int innerLoopCounter;\n  int *arrayPointer;\n  \n  adjustedSize = param4 + param3 & 0xfffffffc;\n  arrayPointer = (int *)(adjustedSize - 4);\n  *arrayPointer = 0x77777777;\n  if (((uint)arrayPointer & 7) != 0) {\n    arrayPointer = (int *)(adjustedSize - 8);\n    *arrayPointer = 0x88888888;\n  }\n  arrayPointer[-1] = 0x1000000;\n  arrayPointer[-2] = param1;\n  arrayPointer[-3] = 0x795;\n  arrayPointer = arrayPointer + -4;\n  *arrayPointer = 0;\n  for (innerLoopCounter = 3; 0 < innerLoopCounter; innerLoopCounter = innerLoopCounter + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = innerLoopCounter;\n  }\n  arrayPointer = arrayPointer + -1;\n  *arrayPointer = param2;\n  for (outerLoopCounter = 0xb; 3 < outerLoopCounter; outerLoopCounter = outerLoopCounter + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = outerLoopCounter;\n  }\n  arrayPointer[-1] = -3;\n  return arrayPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_array_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "adjustedSize",
                "local_14": "outerLoopCounter",
                "local_10": "innerLoopCounter",
                "local_c": "arrayPointer"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "get_num_relocations_000008b8",
            "code": "\nint get_num_relocations_000008b8(void)\n\n{\n  Elf32_Rel *current_relocation;\n  \n  for (current_relocation = (Elf32_Rel *)&DAT_1fff0000;\n      (current_relocation->r_offset == 0xe7fee7fe && (current_relocation < relocation_array));\n      current_relocation = (Elf32_Rel *)&current_relocation->r_info) {\n  }\n  return ((int)relocation_array - (int)current_relocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "get_num_relocations_000008b8",
                "local_c": "current_relocation",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_stack_pointer_00000900",
            "code": "\nundefined4 get_stack_pointer_00000900(void)\n\n{\n  undefined4 stack_pointer;\n  \n  stack_pointer = getMainStackPointer();\n  return stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_stack_pointer_00000900",
                "uVar1": "stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_infinite_loop_00000930",
            "code": "\nvoid run_infinite_loop_00000930(void)\n\n{\n  FUN_00000cf0();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_infinite_loop_00000930",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_bit_in_register_0000093c",
            "code": "\n\n\nvoid setBitInRegister_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_bit_in_register_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_address_00000a30",
            "code": "\nundefined * getNmiHandlerAddress_00000a30(void)\n\n{\n  int input_r3;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return &stack0xe000ffe0 + -*(int *)(input_r3 + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "input_r3"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_irq_and_return_flag_00000cc0",
            "code": "\nundefined4 disableIRQAndReturnFlag_00000cc0(void)\n\n{\n  bool isPrivileged;\n  undefined4 irqEnabled;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  irqEnabled = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    irqEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return irqEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_irq_and_return_flag_00000cc0",
                "bVar1": "isPrivileged",
                "uVar2": "irqEnabled"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_ir_qinterrupt_status_00000cd0",
            "code": "\nundefined4 checkIRQinterruptStatus_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 isInterruptsEnabled;\n  \n  isInterruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    isInterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return isInterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_ir_qinterrupt_status_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "isInterruptsEnabled"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_00000cf0",
            "code": "\nundefined4 checkIRQInterrupts_00000cf0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_00000cf0",
                "bVar1": "isPrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIRQinterruptsIfPrivileged_00000d0c(uint input)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)checkPrivilegedMode();\n  if (isPrivileged) {\n    enableInterrupts((input & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_privileged_00000d0c",
                "param_1": "input",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivileged;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivileged",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_result_00000d44",
            "code": "\nint calculateResult_00000d44(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_result_00000d44",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_pointer_to_zero_00000d76",
            "code": "\nvoid initializePointerToZero_00000d76(undefined4 inputParam1,undefined inputParam2)\n\n{\n  undefined4 *pointerToValue;\n  \n  pointerToValue = (undefined4 *)FUN_00000d44(inputParam1,inputParam2);\n  *pointerToValue = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_pointer_to_zero_00000d76",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "puVar1": "pointerToValue"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_device_00000d9c",
            "code": "\nvoid initializeDevice_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_device_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_system_00000db0",
            "code": "\nvoid initialize_system_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_00000dc0",
            "code": "\nvoid initialize_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initializeData_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_hardware_00000df4",
            "code": "\nvoid initializeHardware_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_hardware_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "execute_function_00000e14",
            "code": "\nundefined4 executeFunction_00000e14(undefined4 inputParam,undefined4 outputParam)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,inputParam,outputParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "execute_function_00000e14",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "process_data_00000e38",
            "code": "\nundefined4 processData_00000e38(undefined4 source,undefined4 destination)\n\n{\n  FUN_000015d0(0,source,destination);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "process_data_00000e38",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "infinite_loop_00000e58",
            "code": "\nvoid infiniteLoop_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "infinite_loop_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_system_00000e64",
            "code": "\n\n\nvoid initializeSystem_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_system_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 savedReturnAddress;\n  \n  FUN_00004c84(&DAT_00006f58,savedReturnAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "savedReturnAddress"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicType,undefined4 panicMessage)\n\n{\n  undefined4 tempStack;\n  code *jumpTable;\n  undefined4 panicMessage;\n  char panicType;\n  \n  panicMessage = panicMessage;\n  panicType = panicType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicType == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",panicMessage);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  FUN_00000e58();\n  tempStack = (int)&tempStack + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicType",
                "param_2": "panicMessage",
                "uStack_18": "tempStack",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "panicMessage",
                "local_9": "panicType"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_00000f8c",
            "code": "\nvoid initializeMemory_00000f8c(void)\n\n{\n  uint shiftedValue;\n  undefined4 *pointer;\n  uint counter;\n  int shiftedIndex;\n  int *pointerToIndex;\n  undefined4 constantValue;\n  undefined4 dummyValue2;\n  undefined4 dummyValue1;\n  dword offset;\n  \n  FUN_00000cd0();\n  offset = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  dummyValue1 = 0;\n  dummyValue2 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  offset = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  dummyValue1 = 0;\n  dummyValue2 = 0xf5d;\n  counter = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  constantValue = 0xfd3;\n  shiftedValue = FUN_00000930();\n  shiftedValue = shiftedValue >> 0x1e;\n  pointer = (undefined4 *)(counter * 0x100);\n  shiftedIndex = (counter >> 0x1d) << 0x11;\n  pointerToIndex = &shiftedIndex;\n  if ((shiftedValue & shiftedValue - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *pointer = 0;\n  pointer[1] = 0;\n  pointer[2] = shiftedValue - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_00000f8c",
                "uVar1": "shiftedValue",
                "puVar2": "pointer",
                "uVar3": "counter",
                "iStack_24": "shiftedIndex",
                "piStack_20": "pointerToIndex",
                "uStack_1c": "constantValue",
                "local_10": "offset",
                "local_14": "dummyValue1",
                "local_18": "dummyValue2"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_param_array_00000fec",
            "code": "\nvoid initializeParamArray_00000fec(undefined4 *paramArray,uint arraySize)\n\n{\n  if ((arraySize & arraySize - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = arraySize - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_param_array_00000fec",
                "param_1": "paramArray",
                "param_2": "arraySize",
                "param_1[1]": "paramArray[1]",
                "param_1[2]": "paramArray[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_and_assign_pointer_00001034",
            "code": "\nvoid findAndAssignPointer_00001034(int **pointerList,int byteArray)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(byteArray + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerList;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(byteArray + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(byteArray + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(byteArray + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_and_assign_pointer_00001034",
                "param_1": "pointerList",
                "param_2": "byteArray",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "get_length_of_valid_pointers_000010a0",
            "code": "\nint get_length_of_valid_pointers_000010a0(int *pointers)\n\n{\n  int *current_ptr;\n  \n  for (current_ptr = pointers; (int *)*current_ptr == current_ptr; current_ptr = current_ptr + 1) {\n  }\n  return (int)current_ptr - (int)pointers;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "get_length_of_valid_pointers_000010a0",
                "param_1": "pointers",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_buffer_000010d4",
            "code": "\nint initializeBuffer_000010d4(uint baseAddress,int length,byte byteCount,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result;\n  undefined4 result2;\n  int returnValue;\n  uint alignmentOffset;\n  undefined4 *bufferPointer;\n  int adjustedLength;\n  uint adjustedBaseAddress;\n  uint loopCounter;\n  short loopVariable1;\n  short loopVariable2;\n  \n  if (byteCount < 0x10) {\n    adjustedLength = length;\n    adjustedBaseAddress = baseAddress;\n    if ((baseAddress & 3) != 0) {\n      adjustedLength = 4 - (baseAddress & 3);\n      adjustedBaseAddress = adjustedLength + baseAddress;\n      adjustedLength = length - adjustedLength;\n    }\n    alignmentOffset = adjustedLength - 0x30U & 0xfffffffc;\n    bufferPointer = (undefined4 *)(alignmentOffset + adjustedBaseAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)adjustedBaseAddress = adjustedBaseAddress;\n    }\n    else {\n      for (loopCounter = adjustedBaseAddress; loopCounter < alignmentOffset + adjustedBaseAddress; loopCounter = loopCounter + 4) {\n        *(uint *)loopCounter = loopCounter;\n      }\n    }\n    result = FUN_00000cd0();\n    loopVariable2 = 0;\n    for (loopVariable1 = 1; loopVariable1 < 0x21; loopVariable1 = loopVariable1 + 1) {\n      if (*(int *)(&DAT_1fff0358 + loopVariable1 * 4) == 0) {\n        loopVariable2 = loopVariable1;\n        break;\n      }\n    }\n    if (loopVariable2 == 0) {\n      FUN_00000d0c(result);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + loopVariable2 * 4) = bufferPointer;\n      *(short *)((int)bufferPointer + 6) = loopVariable2;\n      result2 = FUN_000007dc(param5,param6,adjustedBaseAddress,alignmentOffset);\n      *bufferPointer = result2;\n      bufferPointer[9] = adjustedBaseAddress;\n      bufferPointer[0xb] = length;\n      bufferPointer[10] = param7;\n      *(byte *)((int)bufferPointer + 5) = byteCount;\n      *(undefined *)(bufferPointer + 1) = 0;\n      bufferPointer[2] = 0;\n      bufferPointer[3] = 0;\n      bufferPointer[4] = 0;\n      FUN_00000fec(bufferPointer + 5,0);\n      bufferPointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        FUN_00000698(bufferPointer,10);\n        if ((flags & 4) == 0) {\n          FUN_00000d0c(result);\n          FUN_00000738(byteCount);\n          return (int)loopVariable2;\n        }\n      }\n      else {\n        FUN_00000698(bufferPointer,1);\n      }\n      FUN_00000d0c(result);\n      returnValue = (int)loopVariable2;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_buffer_000010d4",
                "param_1": "baseAddress",
                "param_2": "length",
                "param_3": "byteCount",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "uVar2": "result2",
                "iVar3": "returnValue",
                "uVar4": "alignmentOffset",
                "puVar5": "bufferPointer",
                "local_30": "adjustedLength",
                "local_2c": "adjustedBaseAddress",
                "local_10": "loopCounter",
                "local_c": "loopVariable1",
                "local_a": "loopVariable2"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_hardware_00001274",
            "code": "\nvoid initializeHardware_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_hardware_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_component_0000129c",
            "code": "\nvoid initializeComponent_0000129c(undefined4 component)\n\n{\n  FUN_00002434(component,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_component_0000129c",
                "param_1": "component"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "perform_operation_000012b4",
            "code": "\nundefined4 performOperation_000012b4(int inputParam,undefined undefinedParam)\n\n{\n  undefined4 resultVar;\n  \n  resultVar = FUN_00002364(inputParam + 4,undefinedParam);\n  FUN_000024bc(inputParam);\n  return resultVar;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "perform_operation_000012b4",
                "param_1": "inputParam",
                "param_2": "undefinedParam",
                "uVar1": "resultVar"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "check_for_nonzero_return_code_000012e2",
            "code": "\nint checkForNonzeroReturnCode_000012e2(int inputParam,undefined4 param2,undefined4 param3)\n\n{\n  int returnValue;\n  \n  while( true ) {\n    returnValue = FUN_0000231c(inputParam + 4,param2,param3);\n    if (returnValue != 0) break;\n    FUN_0000129c(inputParam);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "check_for_nonzero_return_code_000012e2",
                "param_1": "inputParam",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte byteToSet)\n\n{\n  *(int *)(((uint)(int)(char)byteToSet >> 5) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "byteToSet"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_execute_function_00001348",
            "code": "\nvoid checkAndExecuteFunction_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_execute_function_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_new_value_00001360",
            "code": "\nint calculate_new_value_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_new_value_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_flag_00001392",
            "code": "\nvoid setFlag_00001392(undefined4 value,undefined flag)\n\n{\n  undefined4 *flagAddress;\n  \n  flagAddress = (undefined4 *)FUN_00001360(value,flag);\n  *flagAddress = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_flag_00001392",
                "param_1": "value",
                "param_2": "flag",
                "puVar1": "flagAddress"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "process_and_store_data_000013b8",
            "code": "\nundefined4 processAndStoreData_000013b8(int dataIndex,undefined4 errorCode,undefined4 dataValue1,undefined4 dataValue2)\n\n{\n  undefined4 result;\n  \n  if (dataIndex != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + dataIndex * 8) = dataValue1;\n  *(undefined4 *)(&DAT_1fff0b70 + dataIndex * 8) = dataValue2;\n  FUN_00001448(dataIndex);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + dataIndex * 0x20),\n               *(undefined *)(dataIndex * 0x20 + 0x7000));\n  if ((&DAT_00007002)[dataIndex * 0x20] == '\\0') {\n    FUN_000014c4(dataIndex,errorCode);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "process_and_store_data_000013b8",
                "param_1": "dataIndex",
                "param_2": "errorCode",
                "param_3": "dataValue1",
                "param_4": "dataValue2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_data_00001448",
            "code": "\nvoid processData_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_settings_000014c4",
            "code": "\nvoid updateSettings_000014c4(int index,uint value)\n\n{\n  byte *dataPtr;\n  uint dataValue;\n  uint calculatedValue;\n  \n  dataPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  dataValue = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPtr[3] = dataPtr[3] & 0xf3;\n  dataPtr[2] = (&DAT_00007001)[index * 0x20];\n  calculatedValue = dataValue / (value << 4);\n  *dataPtr = (byte)(calculatedValue >> 8) & 0x1f;\n  dataPtr[1] = (byte)calculatedValue;\n  dataPtr[10] = (byte)((dataValue << 2) / value + 1 >> 1) & 0x1f;\n  dataPtr[0x10] = dataPtr[0x10] | 0x88;\n  if ((dataPtr[0x10] & 0x70) == 0) {\n    dataPtr[0x13] = 0;\n  }\n  else {\n    dataPtr[0x13] = (char)(2 << (dataPtr[0x10] >> 4 & 7)) - 1;\n  }\n  dataPtr[0x15] = 1;\n  dataPtr[0x11] = 0xc0;\n  dataPtr[3] = dataPtr[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_settings_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "dataPtr",
                "uVar2": "dataValue",
                "uVar3": "calculatedValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int sourceIndex,uint count)\n\n{\n  int dataPointer;\n  uint loopIndex;\n  \n  dataPointer = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (loopIndex = 0; loopIndex < count; loopIndex = loopIndex + 1) {\n    do {\n    } while (-1 < *(char *)(dataPointer + 4));\n    *(undefined *)(dataPointer + 7) = *(undefined *)(loopIndex + sourceIndex);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "sourceIndex",
                "param_3": "count",
                "iVar1": "dataPointer",
                "local_c": "loopIndex"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_if_enabled_00001628",
            "code": "\nvoid executeFunctionIfEnabled_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_if_enabled_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_function_00001688",
            "code": "\nvoid initialize_function_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_function_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculate_offset_00001696(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "initialize_flag_000016c8",
            "code": "\nvoid initializeFlag_000016c8(undefined4 flagAddress,undefined initialValue)\n\n{\n  undefined4 *flagPointer;\n  \n  flagPointer = (undefined4 *)FUN_00001696(flagAddress,initialValue);\n  *flagPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "initialize_flag_000016c8",
                "param_1": "flagAddress",
                "param_2": "initialValue",
                "puVar1": "flagPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_to_true_000016ec",
            "code": "\nvoid setFlagToTrue_000016ec(undefined4 status,undefined input)\n\n{\n  undefined *flagPtr;\n  \n  flagPtr = (undefined *)FUN_00001696(status,input);\n  *flagPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_to_true_000016ec",
                "param_1": "status",
                "param_2": "input",
                "puVar1": "flagPtr"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_pointer_00001710",
            "code": "\nvoid clearPointer_00001710(undefined4 inputParam,undefined unusedParam)\n\n{\n  undefined *pointer;\n  \n  pointer = (undefined *)FUN_00001696(inputParam,unusedParam);\n  *pointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_pointer_00001710",
                "param_1": "inputParam",
                "param_2": "unusedParam",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_data_00001734",
            "code": "\nvoid initializeData_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid updateFlags_00001748(byte data)\n\n{\n  DAT_40064003 = data | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "data"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_flags_and_call_function_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateFlagsAndCallFunction_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_flags_and_call_function_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_hardware_000017dc",
            "code": "\n\n\nvoid initializeHardware_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_hardware_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_application_0000191c",
            "code": "\nvoid initializeApplication_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_application_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_device_000019c0",
            "code": "\nvoid initializeDevice_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_device_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_hardware_00001a18",
            "code": "\nvoid initializeHardware_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_hardware_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initializeData_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_device_00001a60",
            "code": "\nvoid initializeDevice_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "process_input_00001b10",
            "code": "\nundefined4 processInput_00001b10(byte input)\n\n{\n  undefined4 returnValue;\n  \n  if (input < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)input + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (input != DAT_1fff0b74);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "process_input_00001b10",
                "param_1": "input",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_device_00001bb8",
            "code": "\nvoid initializeDevice_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_device_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(returnValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_execute_function_00001cf0",
            "code": "\nvoid checkAndExecuteFunction_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_execute_function_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_variable_to_true_00001d3a",
            "code": "\nvoid setVariableToTrue_00001d3a(undefined4 input1,undefined input2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001d08(input1,input2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_variable_to_true_00001d3a",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_and_set_default_00001d5e",
            "code": "\nuint applyMaskAndSetDefault_00001d5e(unsignedShort value)\n\n{\n  return value & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_and_set_default_00001d5e",
                "param_1": "value",
                "ushort": "unsignedShort"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_00001d80",
            "code": "\nuint applyMask_00001d80(ushort input)\n\n{\n  return input & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_00001d80",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort extractedBits)\n\n{\n  return extractedBits >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_last6_bits_00001dc0",
            "code": "\nushort extractLast6Bits_00001dc0(ushort input)\n\n{\n  return input & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_last6_bits_00001dc0",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_data_00001ddc",
            "code": "\nvoid updateData_00001ddc(undefined2 inputParam)\n\n{\n  char result;\n  \n  result = FUN_00001da2(inputParam);\n  FUN_00001d3a(&DAT_40048038,result + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_data_00001ddc",
                "param_1": "inputParam",
                "cVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_from_data_00001e0c",
            "code": "\nuint extractBitsFromData_00001e0c(int offset,uint inputData)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)inputData >> 3) + offset * 4) * 4) >> ((inputData & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_from_data_00001e0c",
                "param_1": "offset",
                "param_2": "inputData"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "modify_bit_pattern_00001e44",
            "code": "\nvoid modifyBitPattern_00001e44(int offset,uint bitPosition,int newValue)\n\n{\n  int byteOffset;\n  \n  byteOffset = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (byteOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (byteOffset + offset * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (byteOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (byteOffset + offset * 4) * 4) | newValue << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "modify_bit_pattern_00001e44",
                "param_1": "offset",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "iVar1": "byteOffset"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_data_00001ec4",
            "code": "\nvoid updateData_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00001e0c(input1,input2);\n  FUN_00001e44(input1,input2,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_data_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_flag_and_set_data_00001eea",
            "code": "\nundefined4 updateFlagAndSetData_00001eea(undefined2 param1,byte param2)\n\n{\n  uint bitPosition;\n  int functionPtr;\n  int dataIndex;\n  \n  FUN_00001f80(param1,0);\n  if ((char)param2 < '\\0') {\n    bitPosition = FUN_00001dc0(param1);\n    functionPtr = FUN_00001d80(param1);\n    *(uint *)(functionPtr + 0x14) = *(uint *)(functionPtr + 0x14) | 1 << (bitPosition & 0xff);\n  }\n  else {\n    bitPosition = FUN_00001dc0(param1);\n    functionPtr = FUN_00001d80(param1);\n    *(uint *)(functionPtr + 0x14) = *(uint *)(functionPtr + 0x14) & ~(1 << (bitPosition & 0xff));\n  }\n  functionPtr = FUN_00001d5e(param1);\n  dataIndex = FUN_00001dc0(param1);\n  *(uint *)(functionPtr + dataIndex * 4) = param2 & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_flag_and_set_data_00001eea",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "bitPosition",
                "iVar2": "functionPtr",
                "iVar3": "dataIndex"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_value_in_array_00001f80",
            "code": "\nvoid updateValueInArray_00001f80(undefined2 array,undefined4 newValue)\n\n{\n  int index1;\n  int index2;\n  undefined4 value1;\n  undefined4 value2;\n  uint currentValue;\n  \n  FUN_00001ddc(array);\n  index1 = FUN_00001d5e(array);\n  index2 = FUN_00001dc0(array);\n  currentValue = *(uint *)(index1 + index2 * 4);\n  index1 = FUN_00001d5e(array);\n  index2 = FUN_00001dc0(array);\n  *(undefined4 *)(index1 + index2 * 4) = newValue;\n  if ((currentValue & 0xf0000) != 0) {\n    value1 = FUN_00001da2(array);\n    value2 = FUN_00001dc0(array);\n    FUN_00001ec4(value1,value2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_value_in_array_00001f80",
                "param_1": "array",
                "param_2": "newValue",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "currentValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_position_00001ff6",
            "code": "\nvoid setBitPosition_00001ff6(undefined2 input)\n\n{\n  uint result1;\n  int result2;\n  \n  result1 = FUN_00001dc0(input);\n  result2 = FUN_00001d80(input);\n  *(int *)(result2 + 4) = 1 << (result1 & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_position_00001ff6",
                "param_1": "input",
                "uVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_flagged_items_00002028",
            "code": "\nvoid processFlaggedItems_00002028(int baseAddress,undefined4 context)\n\n{\n  int currentIndex;\n  uint flagBits;\n  uint index;\n  \n  flagBits = *(uint *)(baseAddress + 0xa0);\n  for (index = 0; (int)index < 0x20; index = index + 1) {\n    if (((flagBits & 1 << (index & 0xff)) != 0) &&\n       ((*(uint *)(baseAddress + index * 4) & 0xf0000) != 0)) {\n      *(int *)(baseAddress + 0xa0) = 1 << (index & 0xff);\n      currentIndex = FUN_00001e0c(context,index);\n      (**(code **)(&DAT_1fff0b78 + currentIndex * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + currentIndex * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_flagged_items_00002028",
                "param_1": "baseAddress",
                "param_2": "context",
                "iVar1": "currentIndex",
                "uVar2": "flagBits",
                "local_c": "index"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_memory_pool_000020cc",
            "code": "\nvoid initializeMemoryPool_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_memory_pool_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_device_000020f4",
            "code": "\nvoid initializeDevice_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_device_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_memory_00002108",
            "code": "\nvoid initializeMemory_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 lineFormat;\n  int stackSize;\n  int stackUsed;\n  dword baseAddr;\n  uint priority;\n  undefined4 *currentAddr;\n  undefined4 current;\n  undefined4 base;\n  int processCount;\n  short processIndex;\n  int totalStackUsed;\n  int totalStackSize;\n  \n  lineFormat = 0x515f;\n  totalStackSize = 0;\n  totalStackUsed = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  processCount = FUN_000008b8();\n  base = FUN_0000091c();\n  current = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               processCount,base,current);\n  totalStackSize = totalStackSize + 0x200;\n  if (0 < processCount) {\n    totalStackUsed = processCount + totalStackUsed;\n  }\n  for (processIndex = 1; processIndex < 0x21; processIndex = processIndex + 1) {\n    currentAddr = *(undefined4 **)(&DAT_1fff0358 + processIndex * 4);\n    if (currentAddr != (undefined4 *)0x0) {\n      priority = (uint)*(byte *)(currentAddr + 1);\n      baseAddr = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[priority];\n      stackUsed = (int)&lineFormat + (uint)(8 < priority);\n      stackSize = currentAddr[0xb];\n      totalStackSize = stackSize + totalStackSize;\n      iVar1 = FUN_000010a0(currentAddr[9]);\n      stackSize = stackSize - iVar1;\n      totalStackUsed = stackSize + totalStackUsed;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)currentAddr + 6),currentAddr[10],baseAddr,stackUsed,\n                   *(undefined *)((int)currentAddr + 5),currentAddr[0xb],stackSize,currentAddr[9],*currentAddr);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalStackSize,totalStackUsed);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "lineFormat",
                "local_3c": "stackSize",
                "local_38": "stackUsed",
                "local_34": "baseAddr",
                "local_30": "priority",
                "local_2c": "currentAddr",
                "local_28": "current",
                "local_24": "base",
                "local_20": "processCount",
                "local_1a": "processIndex",
                "local_18": "totalStackUsed",
                "local_14": "totalStackSize"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int valueC;\n  bool isMatch;\n  \n  valueC = *(int *)(input + 0xc);\n  isMatch = *(int *)(input + 8) == valueC;\n  if (isMatch) {\n    valueC = 1;\n  }\n  result = (undefined)valueC;\n  if (!isMatch) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "valueC",
                "bVar3": "isMatch",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_data_equality_00002294",
            "code": "\nundefined checkDataEquality_00002294(int inputData)\n\n{\n  undefined uVar1;\n  int result;\n  bool isEqual;\n  \n  result = *(int *)(inputData + 4);\n  isEqual = *(int *)(inputData + 0xc) - *(int *)(inputData + 8) == result;\n  if (isEqual) {\n    result = 1;\n  }\n  uVar1 = (undefined)result;\n  if (!isEqual) {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_data_equality_00002294",
                "param_1": "inputData",
                "iVar2": "result",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increase_and_store_value_000022be",
            "code": "\nvoid increaseAndStoreValue_000022be(int *array,undefined value)\n\n{\n  uint originalValue;\n  \n  originalValue = array[3];\n  array[3] = originalValue + 1;\n  *(undefined *)((originalValue & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increase_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "originalValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_access_element_000022f0",
            "code": "\nundefined incrementAndAccessElement_000022f0(int *array)\n\n{\n  uint currentElement;\n  \n  currentElement = array[2];\n  array[2] = currentElement + 1;\n  return *(undefined *)((currentElement & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_access_element_000022f0",
                "param_1": "array",
                "uVar1": "currentElement"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_bytes_0000231c",
            "code": "\nint copyBytes_0000231c(undefined4 param1,undefined *destination,int length)\n\n{\n  undefined byteValue;\n  int status;\n  undefined *destPtr;\n  int remainingLength;\n  \n  destPtr = destination;\n  remainingLength = length;\n  while ((remainingLength != 0 && (status = FUN_00002270(param1), status == 0))) {\n    byteValue = FUN_000022f0(param1);\n    *destPtr = byteValue;\n    remainingLength = remainingLength + -1;\n    destPtr = destPtr + 1;\n  }\n  return length - remainingLength;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_bytes_0000231c",
                "param_1": "param1",
                "param_2": "destination",
                "param_3": "length",
                "uVar1": "byteValue",
                "iVar2": "status",
                "local_20": "destPtr",
                "local_14": "remainingLength"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_and_process_00002364",
            "code": "\nundefined4 checkAndProcess_00002364(undefined4 input,undefined data)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  result = FUN_00002294(input);\n  if (result == 0) {\n    FUN_000022be(input,data);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_and_process_00002364",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initializeSystem_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 uVar1;\n  undefined buffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  uVar1 = FUN_00002e6c(0,buffer,0x80);\n  sendInterrupt(0x3f);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "software_interrupt": "sendInterrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "FUNC_000023c8",
            "code": "\nvoid FUNC_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "FUNC_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_if_flag_not_set_000023d0",
            "code": "\nundefined4 executeIfFlagNotSet_000023d0(undefined4 arg)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = FUN_000023c8(1,arg,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_if_flag_not_set_000023d0",
                "param_1": "arg",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "copy_linked_list_pointer_0000240c",
            "code": "\nundefined4 * copy_linked_list_pointer_0000240c(undefined4 *linked_list)\n\n{\n  undefined4 *current_node;\n  \n  current_node = (undefined4 *)*linked_list;\n  if (current_node != (undefined4 *)0x0) {\n    *linked_list = *current_node;\n  }\n  return current_node;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "copy_linked_list_pointer_0000240c",
                "param_1": "linked_list",
                "puVar1": "current_node"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_parameter_00002434",
            "code": "\nundefined4 updateParameter_00002434(int *value,int flag)\n\n{\n  int temp;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  temp = DAT_1fff03dc;\n  if (*value == 0) {\n    *value = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*value == -1) {\n      *value = temp + 8;\n      *(undefined4 *)*value = 0;\n    }\n    else {\n      FUN_00001034(value,temp);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_parameter_00002434",
                "param_1": "value",
                "param_2": "flag",
                "iVar1": "temp",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_param_000024bc",
            "code": "\nvoid processParam_000024bc(int *param)\n\n{\n  undefined result;\n  undefined4 returnValue;\n  int tempVar;\n  \n  returnValue = FUN_00000cd0();\n  if (*param == 0) {\n    FUN_00000d0c(returnValue);\n  }\n  else if (*param == -1) {\n    *param = 0;\n    FUN_00000d0c(returnValue);\n  }\n  else {\n    tempVar = FUN_0000240c(param);\n    FUN_00000698(tempVar + -8,10);\n    if (*param == 0) {\n      *param = -1;\n    }\n    result = *(undefined *)(tempVar + -3);\n    FUN_00000d0c(returnValue);\n    FUN_00000738(result);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_param_000024bc",
                "param_1": "param",
                "uVar1": "result",
                "uVar2": "returnValue",
                "iVar3": "tempVar"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_byte_00002538",
            "code": "\nvoid updateByte_00002538(byte byteIndex,uint newValue)\n\n{\n  if (signedByteIndex < '\\0') {\n    (&DAT_e000ed14)[byteIndex & 0xf] = (char)((newValue & 0xff) << 4);\n  }\n  else {\n    *(char *)(signedByteIndex + -0x1fff1c00) = (char)((newValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_byte_00002538",
                "param_1": "byteIndex",
                "param_2": "newValue",
                "(char)param_1": "signedByteIndex"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_system_0000258c",
            "code": "\n\n\nvoid initializeSystem_0000258c(void)\n\n{\n  uint index;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (index = 0; index < 0x66; index = index + 1) {\n    FUN_00002538((int)(char)index,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_system_0000258c",
                "local_c": "index"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_system_00002600",
            "code": "\nundefined4 initializeSystem_00002600(undefined4 inputData)\n\n{\n  undefined4 processedData;\n  \n  processedData = FUN_000047e4(inputData);\n  FUN_0000285c(processedData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_system_00002600",
                "param_1": "inputData",
                "uVar1": "processedData"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "extracted_function_00002624",
            "code": "\nundefined4 extractedFunction_00002624(undefined4 inputValue)\n\n{\n  undefined4 result;\n  undefined4 tempVar;\n  \n  result = FUN_0000281c();\n  tempVar = 0;\n  FUN_0000443c(&result,inputValue);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "extracted_function_00002624",
                "param_1": "inputValue",
                "local_10": "result",
                "uStack_c": "tempVar"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_function_00002654",
            "code": "\nundefined4 initializeFunction_00002654(undefined4 inputValue,undefined4 dataValue,undefined4 configValue)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputValue);\n  DAT_1fff0d9c = dataValue;\n  FUN_00002894(result,0x26f1,configValue);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_function_00002654",
                "param_1": "inputValue",
                "param_2": "dataValue",
                "param_3": "configValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "extract_binary_data_00002690",
            "code": "\nundefined4 extractBinaryData_00002690(undefined4 inputData)\n\n{\n  undefined4 outputData;\n  undefined4 tempVariable;\n  \n  outputData = FUN_000028f0();\n  tempVariable = 0;\n  FUN_0000443c(&outputData,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "extract_binary_data_00002690",
                "param_1": "inputData",
                "local_10": "outputData",
                "uStack_c": "tempVariable"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_000026c0",
            "code": "\nvoid initializeData_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_application_000026d8",
            "code": "\nvoid initialize_application_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_application_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_000026e4",
            "code": "\nvoid initialize_system_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_function_000026f0",
            "code": "\nvoid executeCallbackFunction_000026f0(undefined4 inputParameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(inputParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_function_000026f0",
                "param_1": "inputParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "store_bit_value_00002714",
            "code": "\nvoid storeBitValue_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "store_bit_value_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_byte_value_00002744",
            "code": "\nvoid updateByteValue_00002744(byte index,uint value)\n\n{\n  if ((char)index < '\\0') {\n    (&DAT_e000ed14)[index & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)index + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_byte_value_00002744",
                "param_1": "index",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_call_function_00002798",
            "code": "\nvoid checkAndCallFunction_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_call_function_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getBaseAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_param_and_flag_0000285c",
            "code": "\n\n\nvoid setParamAndFlag_0000285c(undefined4 param)\n\n{\n  _DAT_4003d000 = param;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_param_and_flag_0000285c",
                "param_1": "param"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int initialValue,undefined4 value1,undefined4 value2)\n\n{\n  _DAT_4003d008 = initialValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value1;\n  DAT_1fff0da4 = value2;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "initialValue",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_value_000028f0",
            "code": "\n\n\nint incrementValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "disable_interrupts_00002910",
            "code": "\n\n\nvoid disableInterrupts_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "disable_interrupts_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_triggered_functions_00002994",
            "code": "\n\n\nvoid executeTriggeredFunctions_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_triggered_functions_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_components_00002a00",
            "code": "\nvoid initializeComponents_00002a00(undefined4 input)\n\n{\n  FUN_00004cb4(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_components_00002a00",
                "param_1": "input"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_in_array_00002a18",
            "code": "\nint find_value_in_array_00002a18(int *array,undefined4 value_to_find)\n\n{\n  int result;\n  int *array_pointer;\n  undefined **reboot_string;\n  uint index;\n  int *current_value;\n  \n  array_pointer = array;\n  reboot_string = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_value = (&array_pointer)[index];\n    if (current_value != (int *)0x0) {\n      for (; *current_value != 0; current_value = current_value + 3) {\n        result = FUN_00004e52(*current_value,value_to_find);\n        if (result == 0) {\n          return current_value[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_in_array_00002a18",
                "param_1": "array",
                "param_2": "value_to_find",
                "iVar1": "result",
                "local_18": "array_pointer",
                "local_14": "reboot_string",
                "local_10": "index",
                "local_c": "current_value"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commands)\n\n{\n  int *currentCommand;\n  undefined **commandList;\n  uint index;\n  int *currentParameter;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commands;\n  commandList = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentParameter = (&currentCommand)[index];\n    if (currentParameter != (int *)0x0) {\n      for (; *currentParameter != 0; currentParameter = currentParameter + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentParameter,currentParameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "currentCommand",
                "local_14": "commandList",
                "local_10": "index",
                "local_c": "currentParameter"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_string_00002b10",
            "code": "\nvoid processString_00002b10(undefined4 param_1,byte *inputString)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *stringArray [3];\n  code *commandFunction;\n  char **commandArray;\n  uint numCommands;\n  byte escapeCharacter;\n  char *currentChar;\n  char *currentCommand;\n  char **commandPointerArray;\n  uint commandIndex;\n  int numEscapes;\n  uint numQuotes;\n  byte *currentCharPointer;\n  \n  numQuotes = 0;\n  numEscapes = 0;\n  currentCharPointer = inputString;\n  while( true ) {\n    stringArray[0] = inputString;\n    stringArray[1] = (byte *)param_1;\n    if (0x20 < *currentCharPointer) {\n      if ((*currentCharPointer == 0x22) || (*currentCharPointer == 0x27)) {\n        escapeCharacter = *currentCharPointer;\n        do {\n          pbVar2 = currentCharPointer + 1;\n          if (*pbVar2 == 0) {\n            currentCharPointer = pbVar2;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            numEscapes = numEscapes + 1;\n            currentCharPointer = currentCharPointer + 2;\n            pbVar2 = currentCharPointer;\n            if (*currentCharPointer == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPointer = pbVar2;\n        } while (escapeCharacter != *currentCharPointer);\n        if (0x20 < currentCharPointer[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharPointer == 0x5c) {\n            numEscapes = numEscapes + 1;\n            currentCharPointer = currentCharPointer + 1;\n            if (*currentCharPointer == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPointer = currentCharPointer + 1;\n          if (*currentCharPointer == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharPointer);\n      }\n      numQuotes = numQuotes + 1;\n    }\n    if (*currentCharPointer == 0) break;\n    *currentCharPointer = 0;\n    currentCharPointer = currentCharPointer + 1;\n  }\n  if (numQuotes != 0) {\n    numCommands = numQuotes;\n    commandArray = (char **)((int)stringArray - ((numQuotes + 1) * 4 + 7 & 0xfffffff8));\n    commandArray[numQuotes] = (char *)0x0;\n    currentCharPointer = inputString;\n    for (commandIndex = 0; commandPointerArray = commandArray, commandIndex < numQuotes; commandIndex = commandIndex + 1) {\n      for (; *currentCharPointer == 0; currentCharPointer = currentCharPointer + 1) {\n      }\n      if ((*currentCharPointer == 0x22) || (*currentCharPointer == 0x27)) {\n        currentCharPointer = currentCharPointer + 1;\n      }\n      commandArray[commandIndex] = (char *)currentCharPointer;\n      for (; *currentCharPointer != 0; currentCharPointer = currentCharPointer + 1) {\n      }\n    }\n    for (; (numEscapes != 0 && (*commandPointerArray != (char *)0x0)); commandPointerArray = commandPointerArray + 1) {\n      for (currentCommand = *commandPointerArray; *currentCommand != '\\0'; currentCommand = currentCommand + 1) {\n        if (*currentCommand == '\\') {\n          for (currentChar = currentCommand; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          numEscapes = numEscapes + -1;\n          if (numEscapes == 0) break;\n        }\n      }\n    }\n    commandFunction = (code *)FUN_00002a18(param_1,*commandArray);\n    if (commandFunction == (code *)0x0) {\n      iVar1 = FUN_00004e52(&DAT_00007214,*commandArray);\n      if (iVar1 == 0) {\n        FUN_00002a88(stringArray[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*commandArray);\n      }\n    }\n    else {\n      (*commandFunction)(numQuotes,commandArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_string_00002b10",
                "param_2": "inputString",
                "local_48": "stringArray",
                "local_3c": "commandFunction",
                "local_38": "commandArray",
                "local_34": "numCommands",
                "local_2d": "escapeCharacter",
                "local_2c": "currentChar",
                "local_28": "currentCommand",
                "local_24": "commandPointerArray",
                "local_20": "commandIndex",
                "local_1c": "numEscapes",
                "local_18": "numQuotes",
                "local_14": "currentCharPointer"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "extract_and_process_input_00002d94",
            "code": "\nuint extractAndProcessInput_00002d94(undefined *inputBuffer,int bufferSize)\n\n{\n  int inputChar;\n  byte inputByte;\n  bool isFirstChar;\n  undefined *currentChar;\n  \n  currentChar = inputBuffer;\n  while( true ) {\n    if (bufferSize + -1 <= (int)currentChar - (int)inputBuffer) {\n      return 0xffffffff;\n    }\n    inputChar = FUN_00004418();\n    if (inputChar < 0) break;\n    if ((inputChar == 0xd) || (inputChar == 10)) {\n      *currentChar = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      isFirstChar = currentChar == inputBuffer;\n      if (isFirstChar) {\n        inputBuffer = (undefined *)0x1;\n      }\n      inputByte = (byte)inputBuffer;\n      if (!isFirstChar) {\n        inputByte = 0;\n      }\n      return (uint)inputByte;\n    }\n    if ((inputChar == 8) || (inputChar == 0x7f)) {\n      if (currentChar != inputBuffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputChar;\n      FUN_00002a00(inputChar);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "extract_and_process_input_00002d94",
                "param_1": "inputBuffer",
                "param_2": "bufferSize",
                "iVar1": "inputChar",
                "bVar2": "inputByte",
                "bVar3": "isFirstChar",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_components_00002e48",
            "code": "\nvoid initializeComponents_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relocationTable[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_components_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "check_and_execute_operation_00002e6c",
            "code": "\nvoid checkAndExecuteOperation_00002e6c(undefined4 operationType,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(param1,param2);\n    if (result == 0) {\n      FUN_00002b10(operationType,param1);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "check_and_execute_operation_00002e6c",
                "param_1": "operationType",
                "param_2": "param1",
                "param_3": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "initialize_application_00002e9c",
            "code": "\nundefined4 initialize_application_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "initialize_application_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "execute_initialization_00002eb4",
            "code": "\nundefined4 executeInitialization_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "execute_initialization_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 deviceType;\n  undefined4 deviceName;\n  undefined buffer [8];\n  uint readSize;\n  \n  readSize = FUN_00003d64(deviceInfo,buffer);\n  if ((int)readSize < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceName = *(undefined4 *)(deviceInfo + 8);\n    deviceType = FUN_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceName,deviceType);\n    FUN_00003694(buffer,readSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "deviceType",
                "uVar2": "deviceName",
                "auStack_1c": "buffer",
                "local_14": "readSize"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_over_pointers_00002f30",
            "code": "\nvoid iterateOverPointers_00002f30(void)\n\n{\n  int iterationCounter;\n  undefined4 *currentPointer;\n  \n  iterationCounter = 0;\n  for (currentPointer = DAT_1fff0db0; currentPointer != (undefined4 *)0x0; currentPointer = (undefined4 *)*currentPointer) {\n    FUN_00002ecc(iterationCounter,currentPointer);\n    FUN_00004db8(&DAT_00007380);\n    iterationCounter = iterationCounter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_over_pointers_00002f30",
                "local_10": "iterationCounter",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_information_00002f74",
            "code": "\nvoid printDeviceInformation_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceClass = FUN_000039e8(*(undefined *)(deviceList[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceClass,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_information_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "check_and_process_device_00002fe0",
            "code": "\nvoid checkAndProcessDevice_00002fe0(int argCount,undefined4 *argv)\n\n{\n  int result;\n  undefined4 deviceID;\n  \n  if (argCount < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*argv,argv[1]);\n  }\n  else {\n    result = FUN_00004e52(argv[2],&DAT_000073d4);\n    if (result == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceID = FUN_00004042(argv[2]);\n      result = FUN_00003d24(deviceID);\n      if (result == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceID,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "check_and_process_device_00002fe0",
                "param_1": "argCount",
                "param_2": "argv",
                "iVar1": "result",
                "uVar2": "deviceID"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_device_data_0000305c",
            "code": "\nvoid writeDeviceData_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 deviceID;\n  undefined2 values [4];\n  uint numValues;\n  int device;\n  undefined4 deviceID2;\n  int index;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceID2 = FUN_00004042(argv[2]);\n    device = FUN_00003d24(deviceID2);\n    if (device == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (index = 0; index < (int)numValues; index = index + 1) {\n        deviceID = FUN_00004042(argv[index + 3]);\n        values[index] = deviceID;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceID2,*(undefined4 *)(device + 8));\n      FUN_00003694(values,numValues & 0xff);\n      numValues = FUN_00003d94(device,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceID2);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceID2);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceID2);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_device_data_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "deviceID",
                "auStack_20": "values",
                "local_18": "numValues",
                "local_14": "device",
                "local_10": "deviceID2",
                "local_c": "index"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "validate_command_0000316c",
            "code": "\nundefined4 validate_command_0000316c(int command_count,undefined4 *command_args)\n\n{\n  int result;\n  \n  if (command_count < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(command_args[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(command_count,command_args);\n    }\n    else {\n      result = FUN_00004e52(command_args[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(command_count,command_args);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*command_args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "validate_command_0000316c",
                "param_1": "command_count",
                "param_2": "command_args",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "FUNC_000031e0",
            "code": "\nvoid FUNC_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "FUNC_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekdayTable + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "weekdayTable"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_parameters_0000328c",
            "code": "\nundefined4 extractParameters_0000328c(undefined4 *inputArray,int *outputArray)\n\n{\n  int result;\n  int index;\n  short value;\n  \n  value = FUN_00004f84(*inputArray,&index,10);\n  outputArray[5] = value + -0x76c;\n  value = FUN_00004f84(index + 1,&index,10);\n  outputArray[4] = value + -1;\n  value = FUN_00004f84(index + 1,&index,10);\n  outputArray[3] = (int)value;\n  value = FUN_00004f84(inputArray[1],&index,10);\n  outputArray[2] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  outputArray[1] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  *outputArray = (int)value;\n  result = FUN_000031fc(outputArray[5] + 0x76c,outputArray[4] + 1,outputArray[3]);\n  outputArray[6] = result;\n  outputArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_parameters_0000328c",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "iVar1": "result",
                "local_10": "index",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_status_000033c0",
            "code": "\nbool checkAlarmStatus_000033c0(void)\n\n{\n  int result;\n  undefined alarmStatusArray [36];\n  \n  result = FUN_00002690(alarmStatusArray);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(alarmStatusArray);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_status_000033c0",
                "iVar1": "result",
                "auStack_2c": "alarmStatusArray"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 input)\n\n{\n  int returnValue;\n  undefined4 success;\n  undefined buffer [36];\n  \n  returnValue = FUN_0000328c(input,buffer);\n  if (returnValue == 0) {\n    returnValue = FUN_00002654(buffer,0x31e1,0);\n    if (returnValue == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      success = 1;\n    }\n    else {\n      success = 0;\n    }\n  }\n  else {\n    success = 1;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "returnValue",
                "uVar2": "success",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_and_print_time_00003444",
            "code": "\nbool getAndPrintTime_00003444(void)\n\n{\n  int errorStatus;\n  undefined buffer [36];\n  \n  errorStatus = FUN_00002624(buffer);\n  if (errorStatus != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(buffer);\n  }\n  return errorStatus != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_and_print_time_00003444",
                "iVar1": "errorStatus",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_system_time_00003478",
            "code": "\nundefined4 setSystemTime_00003478(undefined4 timeToSet)\n\n{\n  int result;\n  undefined4 status;\n  undefined timeBuffer [36];\n  \n  result = FUN_0000328c(timeToSet,timeBuffer);\n  if (result == 0) {\n    result = FUN_00002600(timeBuffer);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_system_time_00003478",
                "param_1": "timeToSet",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_2c": "timeBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_rtc_usage_000034c0",
            "code": "\nundefined4 printRtcUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_rtc_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int commandCode,int commandData)\n\n{\n  int result;\n  undefined4 returnCode;\n  \n  if (commandCode < 2) {\n    FUN_000034c0();\n    returnCode = 1;\n  }\n  else {\n    result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"poweron\",7);\n    if (result == 0) {\n      FUN_000026d8();\n    }\n    else {\n      result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"poweroff\",8);\n      if (result == 0) {\n        FUN_000026e4();\n      }\n      else {\n        result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"clearalarm\",8);\n        if (result == 0) {\n          FUN_000026c0();\n        }\n        else {\n          result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"getalarm\",8);\n          if (result == 0) {\n            FUN_000033c0();\n          }\n          else {\n            result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"setalarm\",8);\n            if ((result == 0) && (commandCode == 4)) {\n              FUN_000033f4(commandData + 8);\n            }\n            else {\n              result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"gettime\",7);\n              if (result == 0) {\n                FUN_00003444();\n              }\n              else {\n                result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"settime\",7);\n                if ((result != 0) || (commandCode != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandData + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(commandData + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnCode = 0;\n  }\n  return returnCode;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "commandCode",
                "param_2": "commandData",
                "iVar1": "result",
                "uVar2": "returnCode"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "initialize_application_00003688",
            "code": "\nvoid initialize_application_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "initialize_application_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataAddress,byte dataSize)\n\n{\n  undefined4 dataFormat;\n  char isValid;\n  uint bitMask;\n  bool isSet;\n  undefined tempStack [8];\n  int bufferSize;\n  char character;\n  byte index;\n  \n  if ((dataAddress == 0) || (3 < dataSize)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (index = 0; index < dataSize; index = index + 1) {\n      if (*(byte *)(dataAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataAddress + 6) & 0x8018f;\n        isSet = bitMask != 0;\n        if (isSet) {\n          bitMask = 1;\n        }\n        isValid = (char)bitMask;\n        if (!isSet) {\n          isValid = '\\0';\n        }\n        if (isValid == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = FUN_00003918((int)*(char *)(dataAddress + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (dataSize < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",index);\n      }\n      if (character == '\\0') {\n        if (*(char *)(dataAddress + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddress + 7),4)) &&\n                (*(char *)(dataAddress + 7) < '\\0')) {\n          bufferSize = FUN_00003e9e(tempStack,(int)*(short *)(dataAddress + (uint)index * 2),\n                                  (int)*(char *)(dataAddress + 7));\n          tempStack[bufferSize] = 0;\n          FUN_00004c84(&DAT_000077dc,tempStack);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataAddress + (uint)index * 2),\n                       (int)*(char *)(dataAddress + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataAddress + (uint)index * 2),character);\n      }\n      dataFormat = FUN_00003810(*(undefined *)(dataAddress + 6));\n      FUN_00004c84(&DAT_000077e8,dataFormat);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "uVar1": "dataFormat",
                "cVar2": "isValid",
                "uVar3": "bitMask",
                "bVar4": "isSet",
                "auStack_18": "tempStack",
                "local_10": "bufferSize",
                "local_a": "character",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined value)\n\n{\n  undefined *result;\n  \n  switch(value) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "value",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_parameter_value_00003918",
            "code": "\nundefined4 mapParameterValue_00003918(undefined parameter)\n\n{\n  undefined4 mappedValue;\n  \n  switch(parameter) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_parameter_value_00003918",
                "param_1": "parameter",
                "uVar1": "mappedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "classify_value_000039e8",
            "code": "\nchar * classifyValue_000039e8(char value)\n\n{\n  char *classification;\n  \n  switch(value) {\n  case '\\0':\n    classification = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    classification = \"ACT_ANY\";\n    break;\n  case 'B':\n    classification = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    classification = \"ACT_SERVO\";\n    break;\n  case 'D':\n    classification = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    classification = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    classification = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    classification = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    classification = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    classification = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    classification = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    classification = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    classification = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    classification = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    classification = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    classification = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    classification = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    classification = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    classification = \"SENSE_UV\";\n    break;\n  case -0x74:\n    classification = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    classification = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    classification = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    classification = \"SENSE_CO2\";\n    break;\n  default:\n    if (value == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    classification = \"CLASS_UNKNOWN\";\n  }\n  return classification;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "classify_value_000039e8",
                "param_1": "value",
                "pcVar1": "classification"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_item_in_list_00003d24",
            "code": "\nundefined4 * findItemInList_00003d24(int targetItemIndex)\n\n{\n  int currentItemIndex;\n  undefined4 *currentItemPtr;\n  \n  currentItemIndex = 0;\n  for (currentItemPtr = DAT_1fff0db0; (currentItemIndex < targetItemIndex && (currentItemPtr != (undefined4 *)0x0));\n      currentItemPtr = (undefined4 *)*currentItemPtr) {\n    currentItemIndex = currentItemIndex + 1;\n  }\n  return currentItemPtr;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_item_in_list_00003d24",
                "param_1": "targetItemIndex",
                "local_10": "currentItemIndex",
                "local_c": "currentItemPtr"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int inputData,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (inputData == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(inputData + 0xc))(*(undefined4 *)(inputData + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "inputData",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "process_function_00003d94",
            "code": "\nundefined4 processFunction_00003d94(int inputParam,undefined4 outputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (inputParam == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(inputParam + 0xc) + 4))(*(undefined4 *)(inputParam + 4),outputParam);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "process_function_00003d94",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "get_num_digits_00003dc4",
            "code": "\nint get_num_digits_00003dc4(int start_index,uint number)\n\n{\n  uint remaining_number;\n  char *result;\n  uint multiplier;\n  int num_digits;\n  \n  num_digits = 1;\n  if (number < 1000000000) {\n    for (multiplier = 10; multiplier <= number; multiplier = multiplier * 10) {\n      num_digits = num_digits + 1;\n    }\n  }\n  else {\n    num_digits = 10;\n  }\n  if (start_index != 0) {\n    result = (char *)(num_digits + start_index);\n    remaining_number = number;\n    do {\n      result = result + -1;\n      *result = (char)(remaining_number % 10) + '0';\n      remaining_number = remaining_number / 10;\n    } while (remaining_number != 0);\n  }\n  return num_digits;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "get_num_digits_00003dc4",
                "param_1": "start_index",
                "param_2": "number",
                "local_20": "remaining_number",
                "local_14": "result",
                "local_10": "multiplier",
                "local_c": "num_digits"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "positive_to_negative_00003e58",
            "code": "\nint positiveToNegative_00003e58(undefined *inputPtr,int inputValue)\n\n{\n  int result;\n  int absoluteValue;\n  undefined *newPtr;\n  \n  absoluteValue = inputValue;\n  newPtr = inputPtr;\n  if (-(inputValue >> 0x1f) != 0) {\n    if (inputPtr != (undefined *)0x0) {\n      newPtr = inputPtr + 1;\n      *inputPtr = 0x2d;\n    }\n    absoluteValue = -inputValue;\n  }\n  result = FUN_00003dc4(newPtr,absoluteValue);\n  return -(inputValue >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "positive_to_negative_00003e58",
                "param_1": "inputPtr",
                "param_2": "inputValue",
                "local_18": "absoluteValue",
                "local_14": "newPtr",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "perform_operation_00003e9e",
            "code": "\nundefined4 performOperation_00003e9e(undefined4 arg1,short arg2,undefined4 arg3)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(arg1,(int)arg2,arg3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "perform_operation_00003e9e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "decode_and_format_number_00003ec4",
            "code": "\nint decode_and_format_number_00003ec4(undefined *output_buffer,uint input_number,int number_of_decimals)\n\n{\n  int result;\n  undefined4 decimal_result;\n  uint divisor;\n  int remainder;\n  int characters_written;\n  \n  if (number_of_decimals + 7 < 0 != SCARRY4(number_of_decimals,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  characters_written = 0;\n  if (number_of_decimals == 0) {\n    characters_written = FUN_00003e58(output_buffer,input_number);\n  }\n  else if (number_of_decimals < 1) {\n    divisor = input_number / *(uint *)(&DAT_00007978 + number_of_decimals * -4);\n    remainder = input_number - *(uint *)(&DAT_00007978 + number_of_decimals * -4) * divisor;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((divisor == 0) && ((int)input_number < 0)) {\n      if (output_buffer != (undefined *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      characters_written = 1;\n    }\n    if (output_buffer == (undefined *)0x0) {\n      result = FUN_00003e58(0,divisor);\n      characters_written = result + 1 + characters_written;\n    }\n    else {\n      result = FUN_00003e58(output_buffer + characters_written,divisor);\n      result = characters_written + result;\n      characters_written = result + 1;\n      output_buffer[result] = 0x2e;\n      decimal_result = FUN_00003e58(output_buffer + characters_written,remainder);\n      FUN_00003ff4(output_buffer + characters_written,decimal_result,-number_of_decimals,0x30);\n    }\n    characters_written = -number_of_decimals + characters_written;\n  }\n  else {\n    characters_written = FUN_00003e58(output_buffer,input_number);\n    if (output_buffer != (undefined *)0x0) {\n      FUN_00004622(output_buffer + characters_written,0x30,number_of_decimals);\n    }\n    characters_written = number_of_decimals + characters_written;\n  }\n  return characters_written;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "decode_and_format_number_00003ec4",
                "param_1": "output_buffer",
                "param_2": "input_number",
                "param_3": "number_of_decimals",
                "iVar1": "result",
                "uVar2": "decimal_result",
                "uVar3": "divisor",
                "local_10": "remainder",
                "local_c": "characters_written"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_difference_00003ff4",
            "code": "\nuint calculateDifference_00003ff4(int inputValue,uint startValue,uint endValue,undefined undefinedParam)\n\n{\n  uint updatedValue;\n  \n  updatedValue = startValue;\n  if ((startValue < endValue) && (updatedValue = endValue, inputValue != 0)) {\n    FUN_000045ee((endValue - startValue) + inputValue,inputValue,startValue);\n    FUN_00004622(inputValue,undefinedParam,endValue - startValue);\n  }\n  return updatedValue;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_difference_00003ff4",
                "param_1": "inputValue",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "undefinedParam",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "initialize_data_00004042",
            "code": "\nvoid initializeData_00004042(undefined4 dataPointer)\n\n{\n  FUN_00004f84(dataPointer,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "initialize_data_00004042",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *dataPtr,int *infoPtr)\n\n{\n  int result;\n  int *infoPtr2;\n  uint tempVar;\n  ushort flag;\n  int offset;\n  code *funcPtr;\n  int count;\n  uint tempData;\n  bool isZero;\n  \n  flag = *(ushort *)(infoPtr + 3);\n  tempVar = (uint)flag;\n  if ((int)(tempVar << 0x1c) < 0) {\n    result = infoPtr[4];\n    if (result != 0) {\n      offset = tempVar << 0x1e;\n      isZero = offset == 0;\n      count = *infoPtr;\n      if (isZero) {\n        offset = infoPtr[5];\n      }\n      *infoPtr = result;\n      if (!isZero) {\n        offset = 0;\n      }\n      infoPtr[2] = offset;\n      for (count = count - result; 0 < count; count = count - offset) {\n        offset = (*(code *)infoPtr[10])(dataPtr,infoPtr[8],result,count);\n        if (offset < 1) {\n          *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        result = result + offset;\n      }\n    }\n  }\n  else {\n    if ((infoPtr[1] < 1) && (infoPtr[0x10] < 1)) {\n      return 0;\n    }\n    funcPtr = (code *)infoPtr[0xb];\n    if (funcPtr == (code *)0x0) {\n      return 0;\n    }\n    tempData = *dataPtr;\n    *dataPtr = 0;\n    if ((flag & 0x1000) == 0) {\n      result = (*funcPtr)(dataPtr,infoPtr[8],tempVar & 0x1000,1);\n      if ((result == -1) && (tempVar = *dataPtr, tempVar != 0)) {\n        if ((tempVar == 0x1d) || (tempVar == 0x16)) {\n          *dataPtr = tempData;\n          return 0;\n        }\n        flag = *(ushort *)(infoPtr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      result = infoPtr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(infoPtr + 3) << 0x1d) < 0) &&\n       (result = result - infoPtr[1], infoPtr[0xd] != 0)) {\n      result = result - infoPtr[0x10];\n    }\n    result = (*(code *)infoPtr[0xb])(dataPtr,infoPtr[8],result,0);\n    flag = *(ushort *)(infoPtr + 3);\n    if ((result == -1) &&\n       ((0x1d < *dataPtr || (-1 < (int)((0x20400001U >> (*dataPtr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(infoPtr + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n    infoPtr[1] = 0;\n    *infoPtr = infoPtr[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((result != -1 || (*dataPtr == 0)))) {\n      infoPtr[0x15] = result;\n    }\n    infoPtr2 = (int *)infoPtr[0xd];\n    *dataPtr = tempData;\n    if (infoPtr2 != (int *)0x0) {\n      if (infoPtr2 != infoPtr + 0x11) {\n        FUN_00004b34(dataPtr);\n      }\n      infoPtr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "dataPtr",
                "param_2": "infoPtr",
                "iVar1": "result",
                "piVar2": "infoPtr2",
                "uVar3": "tempVar",
                "uVar4": "flag",
                "iVar5": "offset",
                "pcVar6": "funcPtr",
                "iVar7": "count",
                "uVar8": "tempData",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int inputDataPtr,undefined4 *outputDataPtr)\n\n{\n  undefined4 result;\n  \n  if (outputDataPtr[4] != 0) {\n    if ((inputDataPtr != 0) && (*(int *)(inputDataPtr + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (outputDataPtr == &DAT_000079b8) {\n      outputDataPtr = *(undefined4 **)(inputDataPtr + 4);\n    }\n    else if (outputDataPtr == (undefined4 *)&DAT_000079d8) {\n      outputDataPtr = *(undefined4 **)(inputDataPtr + 8);\n    }\n    else if (outputDataPtr == (undefined4 *)&DAT_00007998) {\n      outputDataPtr = *(undefined4 **)(inputDataPtr + 0xc);\n    }\n    if (*(short *)(outputDataPtr + 3) != 0) {\n      if ((-1 < (int)(outputDataPtr[0x19] << 0x1f)) && (-1 < (int)*(short *)(outputDataPtr + 3) << 0x16)) {\n        FUNC_000045e8(outputDataPtr[0x16]);\n      }\n      result = FUN_0000404c(inputDataPtr,outputDataPtr);\n      if ((int)(outputDataPtr[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(outputDataPtr + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(outputDataPtr[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "inputDataPtr",
                "param_2": "outputDataPtr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocations_000041d0",
            "code": "\nuint processRelocations_000041d0(int inputValue,undefined4 param2,undefined4 param3)\n\n{\n  uint result;\n  int loopCounter;\n  dword *relocationPtr;\n  int offset;\n  uint totalResult;\n  int innerLoopCounter;\n  undefined4 *dataPtr;\n  \n  if (inputValue == 0) {\n    dataPtr = &DAT_000079f8;\n    relocationPtr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    totalResult = 0;\n    do {\n      innerLoopCounter = relocationPtr[1];\n      offset = relocationPtr[2];\n      while (innerLoopCounter = innerLoopCounter + -1, -1 < innerLoopCounter) {\n        if ((1 < *(ushort *)(offset + 0xc)) && (loopCounter = *(short *)(offset + 0xe) + 1, loopCounter != 0)) {\n          result = FUN_00004158(0x1fff0284,offset,param3,loopCounter,dataPtr);\n          totalResult = totalResult | result;\n        }\n        offset = offset + 0x68;\n      }\n      relocationPtr = (dword *)*relocationPtr;\n    } while (relocationPtr != (dword *)0x0);\n    return totalResult;\n  }\n  totalResult = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,inputValue);\n  return totalResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocations_000041d0",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "iVar2": "loopCounter",
                "pdVar3": "relocationPtr",
                "iVar4": "offset",
                "uVar5": "totalResult",
                "iVar6": "innerLoopCounter",
                "puVar7": "dataPtr"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_param_000041f4",
            "code": "\nvoid initializeParam_000041f4(undefined4 *paramArray,undefined2 value1,undefined2 value2)\n\n{\n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[4] = 0;\n  paramArray[5] = 0;\n  paramArray[2] = 0;\n  *(undefined2 *)(paramArray + 3) = value1;\n  paramArray[0x19] = 0;\n  *(undefined2 *)((int)paramArray + 0xe) = value2;\n  paramArray[6] = 0;\n  FUN_00004622(paramArray + 0x17,0,8);\n  paramArray[9] = 0x4dc9;\n  paramArray[10] = 0x4def;\n  paramArray[0xb] = 0x4e27;\n  paramArray[8] = paramArray;\n  paramArray[0xc] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_param_000041f4",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "paramArray[1]",
                "param_1[4]": "paramArray[4]",
                "param_1[5]": "paramArray[5]",
                "param_1[2]": "paramArray[2]",
                "param_1[6]": "paramArray[6]",
                "param_1[9]": "paramArray[9]",
                "param_1[10]": "paramArray[10]",
                "param_1[0xb]": "paramArray[0xb]",
                "param_1[8]": "paramArray[8]",
                "param_1[0xc]": "paramArray[0xc]"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_structure_00004248",
            "code": "\nundefined4 * initializeDataStructure_00004248(undefined4 param1,int param2)\n\n{\n  undefined4 *dataPtr;\n  int offset;\n  \n  offset = (param2 + -1) * 0x68;\n  dataPtr = (undefined4 *)FUN_00004bd0(param1,offset + 0x74);\n  if (dataPtr != (undefined4 *)0x0) {\n    *dataPtr = 0;\n    dataPtr[1] = param2;\n    dataPtr[2] = dataPtr + 3;\n    FUN_00004622(dataPtr + 3,0,offset + 0x68);\n  }\n  return dataPtr;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_structure_00004248",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "dataPtr",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_000042a4",
            "code": "\nvoid initializeData_000042a4(int dataAddress)\n\n{\n  undefined4 status;\n  \n  FUN_0000428c();\n  if (*(int *)(dataAddress + 0x18) == 0) {\n    *(undefined4 *)(dataAddress + 0x48) = 0;\n    *(undefined4 *)(dataAddress + 0x4c) = 0;\n    *(undefined4 *)(dataAddress + 0x50) = 0;\n    status = 0x1fff0284;\n    *(undefined **)(dataAddress + 0x28) = &DAT_0000423d;\n    if (dataAddress == 0x1fff0284) {\n      status = 1;\n    }\n    if (dataAddress == 0x1fff0284) {\n      *(undefined4 *)(dataAddress + 0x18) = status;\n    }\n    status = FUN_00004314(dataAddress);\n    *(undefined4 *)(dataAddress + 4) = status;\n    status = FUN_00004314(dataAddress);\n    *(undefined4 *)(dataAddress + 8) = status;\n    status = FUN_00004314(dataAddress);\n    *(undefined4 *)(dataAddress + 0xc) = status;\n    FUN_000041f4(*(undefined4 *)(dataAddress + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(dataAddress + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(dataAddress + 0xc),0x12,2);\n    *(undefined4 *)(dataAddress + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "param_1": "dataAddress",
                "uVar1": "status"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "decode_elf_relocations_00004314",
            "code": "\nundefined4 * decode_elf_relocations_00004314(undefined4 *relocations)\n\n{\n  dword result;\n  int num_relocations;\n  undefined4 *current_relocation;\n  dword *relocation_list;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  relocation_list = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    num_relocations = relocation_list[1];\n    current_relocation = (undefined4 *)relocation_list[2];\n    while (num_relocations = num_relocations + -1, -1 < num_relocations) {\n      if (*(short *)(current_relocation + 3) == 0) {\n        current_relocation[3] = 0xffff0001;\n        current_relocation[0x19] = 0;\n        FUNC_000045e4(current_relocation + 0x16);\n        FUN_00004280();\n        current_relocation[1] = 0;\n        current_relocation[2] = 0;\n        current_relocation[4] = 0;\n        current_relocation[5] = 0;\n        *current_relocation = 0;\n        current_relocation[6] = 0;\n        FUN_00004622(current_relocation + 0x17,0,8);\n        current_relocation[0xd] = 0;\n        current_relocation[0xe] = 0;\n        current_relocation[0x12] = 0;\n        current_relocation[0x13] = 0;\n        return current_relocation;\n      }\n      current_relocation = current_relocation + 0x1a;\n    }\n    if (*relocation_list == 0) {\n      result = FUN_00004248(relocations,4);\n      *relocation_list = result;\n      if (result == 0) {\n        FUN_00004280();\n        *relocations = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    relocation_list = (dword *)*relocation_list;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "decode_elf_relocations_00004314",
                "param_1": "relocations",
                "dVar1": "result",
                "iVar2": "num_relocations",
                "puVar3": "current_relocation",
                "pdVar4": "relocation_list"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int baseAddress,code *callbackFunction)\n\n{\n  uint result;\n  int *dataPointer;\n  int structAddress;\n  uint combinedResult;\n  int counter;\n  \n  dataPointer = (int *)(baseAddress + 0x48);\n  combinedResult = 0;\n  do {\n    counter = dataPointer[1];\n    structAddress = dataPointer[2];\n    while (counter = counter + -1, -1 < counter) {\n      if ((1 < *(ushort *)(structAddress + 0xc)) && (*(short *)(structAddress + 0xe) != -1)) {\n        result = (*callbackFunction)(structAddress);\n        combinedResult = combinedResult | result;\n      }\n      structAddress = structAddress + 0x68;\n    }\n    dataPointer = (int *)*dataPointer;\n  } while (dataPointer != (int *)0x0);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "baseAddress",
                "param_2": "callbackFunction",
                "piVar2": "dataPointer",
                "iVar3": "structAddress",
                "uVar1": "result",
                "iVar5": "counter",
                "uVar4": "combinedResult"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "retrieve_data_00004418",
            "code": "\nuint retrieveData_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **dataPointer;\n  byte *dataValue;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataPointer = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPointer == (byte **)&DAT_000079b8) {\n    dataPointer = *(byte ***)(offset + 4);\n  }\n  else if (dataPointer == (byte **)&DAT_000079d8) {\n    dataPointer = *(byte ***)(offset + 8);\n  }\n  else if (dataPointer == (byte **)&DAT_00007998) {\n    dataPointer = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045e8(dataPointer[0x16]);\n  }\n  dataValue = dataPointer[1];\n  dataPointer[1] = dataValue + -1;\n  if ((int)(dataValue + -1) < 0) {\n    result = FUN_00005e10(offset,dataPointer);\n  }\n  else {\n    dataValue = *dataPointer;\n    *dataPointer = dataValue + 1;\n    result = (uint)*dataValue;\n  }\n  if ((-1 < (int)dataPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045ec(dataPointer[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "retrieve_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "dataPointer",
                "pbVar4": "dataValue"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *dateTimeParams,uint *resultDateTime)\n\n{\n  int adjustedValue;\n  uint month;\n  uint totalMinutes;\n  uint day;\n  uint year;\n  undefined4 param1;\n  undefined4 param2;\n  uint adjustedDayOfWeek;\n  bool isNegative;\n  \n  param1 = *dateTimeParams;\n  param2 = dateTimeParams[1];\n  adjustedValue = FUN_00006974(param1,param2,0x15180,0);\n  totalMinutes = 0x15180;\n  FUN_00006974(param1,param2,0x15180,0);\n  isNegative = (int)totalMinutes < 0;\n  if (isNegative) {\n    totalMinutes = totalMinutes + 0x15180;\n  }\n  if (isNegative) {\n    month = adjustedValue + 0xafa6b;\n  }\n  else {\n    month = adjustedValue + 0xafa6c;\n  }\n  resultDateTime[2] = totalMinutes / 0xe10;\n  resultDateTime[1] = (totalMinutes % 0xe10) / 0x3c;\n  *resultDateTime = (totalMinutes % 0xe10) % 0x3c;\n  resultDateTime[6] = (month + 3) % 7;\n  totalMinutes = month;\n  if ((int)month < 0) {\n    totalMinutes = month - 0x23ab0;\n  }\n  month = (totalMinutes / 0x23ab1) * -0x23ab1 + month;\n  day = ((month / 0x8eac + month) - month / 0x5b4) - month / 0x23ab0;\n  year = day / 0x16d;\n  month = (year / 100 - day / 0x5b4) + month + year * -0x16d;\n  adjustedDayOfWeek = month * 5 + 2;\n  day = adjustedDayOfWeek / 0x99;\n  if (adjustedDayOfWeek < 0x5fa) {\n    adjustedValue = 2;\n  }\n  else {\n    adjustedValue = -10;\n  }\n  adjustedDayOfWeek = day + adjustedValue;\n  adjustedValue = (totalMinutes / 0x23ab1) * 400 + year;\n  if (adjustedDayOfWeek < 2) {\n    adjustedValue = adjustedValue + 1;\n  }\n  if (month < 0x132) {\n    if (((year & 3) == 0) && (year != (year / 100) * 100)) {\n      totalMinutes = 1;\n    }\n    else {\n      totalMinutes = (uint)(year % 400 == 0);\n    }\n    totalMinutes = month + 0x3b + totalMinutes;\n  }\n  else {\n    totalMinutes = month - 0x132;\n  }\n  resultDateTime[7] = totalMinutes;\n  resultDateTime[3] = (month + 1) - (day * 0x99 + 2) / 5;\n  resultDateTime[4] = adjustedDayOfWeek;\n  resultDateTime[5] = adjustedValue - 0x76c;\n  resultDateTime[8] = 0;\n  return resultDateTime;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "dateTimeParams",
                "param_2": "resultDateTime",
                "iVar1": "adjustedValue",
                "uVar2": "month",
                "uVar3": "totalMinutes",
                "uVar4": "day",
                "uVar5": "year",
                "uVar6": "param1",
                "uVar7": "param2",
                "uVar8": "adjustedDayOfWeek",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_functions_twice_0000459c",
            "code": "\nvoid executeFunctionsTwice_0000459c(void)\n\n{\n  code **functionPointers;\n  int index;\n  \n  functionPointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointers)();\n    functionPointers = functionPointers + 1;\n  }\n  FUN_00000410();\n  functionPointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointers)();\n    functionPointers = functionPointers + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_functions_twice_0000459c",
                "ppcVar1": "functionPointers",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_range_to_destination_000045ee",
            "code": "\nvoid copyRangeToDestination_000045ee(undefined *destination,undefined *source,int count)\n\n{\n  undefined *destPtr;\n  undefined *srcPtr;\n  \n  srcPtr = source + count;\n  if ((source < destination) && (destination < srcPtr)) {\n    destPtr = destination + count;\n    while (destPtr != destination) {\n      srcPtr = srcPtr + -1;\n      destPtr = destPtr + -1;\n      *destPtr = *srcPtr;\n    }\n  }\n  else {\n    destination = destination + -1;\n    for (; source != srcPtr; source = source + 1) {\n      destination = destination + 1;\n      *destination = *source;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_range_to_destination_000045ee",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "count",
                "puVar1": "destPtr",
                "puVar2": "srcPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fillMemory_00004622(undefined *memoryStart,undefined value,int count)\n\n{\n  undefined *memoryEnd;\n  \n  memoryEnd = memoryStart + count;\n  for (; memoryStart != memoryEnd; memoryStart = memoryStart + 1) {\n    *memoryStart = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "memoryStart",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "memoryEnd"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid updateDate_00004634(uint *date,uint numDays,undefined4 unknown)\n\n{\n  int daysInMonth;\n  uint dayOfMonth;\n  uint leapDays;\n  int daysToAdd;\n  bool isNegative;\n  uint *temp;\n  uint currentDay;\n  undefined4 unknown;\n  \n  temp = date;\n  currentDay = numDays;\n  unknown = unknown;\n  if (0x3b < *date) {\n    FUN_00005584(&temp,*date,0x3c);\n    dayOfMonth = date[1] + (int)temp;\n    date[1] = dayOfMonth;\n    if ((int)currentDay < 0) {\n      dayOfMonth = dayOfMonth - 1;\n      *date = currentDay + 0x3c;\n    }\n    else {\n      *date = currentDay;\n    }\n    if ((int)currentDay < 0) {\n      date[1] = dayOfMonth;\n    }\n  }\n  if (0x3b < date[1]) {\n    FUN_00005584(&temp,date[1],0x3c);\n    isNegative = (int)currentDay < 0;\n    leapDays = date[2] + (int)temp;\n    date[2] = leapDays;\n    dayOfMonth = currentDay;\n    if (isNegative) {\n      dayOfMonth = currentDay + 0x3c;\n      leapDays = leapDays - 1;\n    }\n    if (!isNegative) {\n      date[1] = dayOfMonth;\n    }\n    if (isNegative) {\n      date[1] = dayOfMonth;\n    }\n    if (isNegative) {\n      date[2] = leapDays;\n    }\n  }\n  if (0x17 < date[2]) {\n    FUN_00005584(&temp,date[2],0x18);\n    isNegative = (int)currentDay < 0;\n    leapDays = date[3] + (int)temp;\n    date[3] = leapDays;\n    dayOfMonth = currentDay;\n    if (isNegative) {\n      dayOfMonth = currentDay + 0x18;\n      leapDays = leapDays - 1;\n    }\n    if (!isNegative) {\n      date[2] = dayOfMonth;\n    }\n    if (isNegative) {\n      date[2] = dayOfMonth;\n    }\n    if (isNegative) {\n      date[3] = leapDays;\n    }\n  }\n  if (0xb < date[4]) {\n    FUN_00005584(&temp,date[4],0xc);\n    isNegative = (int)currentDay < 0;\n    dayOfMonth = date[5] + (int)temp;\n    date[5] = dayOfMonth;\n    if (isNegative) {\n      currentDay = currentDay + 0xc;\n      dayOfMonth = dayOfMonth - 1;\n    }\n    if (!isNegative) {\n      date[4] = currentDay;\n    }\n    if (isNegative) {\n      date[4] = currentDay;\n    }\n    if (isNegative) {\n      date[5] = dayOfMonth;\n    }\n  }\n  dayOfMonth = date[5];\n  if ((dayOfMonth & 3) == 0) {\n    if (dayOfMonth == (dayOfMonth / 100) * 100) {\n      if ((dayOfMonth + 0x76c) % 400 == 0) {\n        daysToAdd = 0x1d;\n      }\n      else {\n        daysToAdd = 0x1c;\n      }\n    }\n    else {\n      daysToAdd = 0x1d;\n    }\n  }\n  else {\n    daysToAdd = 0x1c;\n  }\n  if ((int)date[3] < 1) {\n    while ((int)date[3] < 1) {\n      dayOfMonth = date[4];\n      date[4] = dayOfMonth - 1;\n      if (dayOfMonth - 1 == 0xffffffff) {\n        leapDays = date[5];\n        dayOfMonth = leapDays - 1;\n        date[4] = 0xb;\n        date[5] = dayOfMonth;\n        if ((dayOfMonth & 3) == 0) {\n          if (dayOfMonth == (dayOfMonth / 100) * 100) {\n            if ((leapDays + 0x76b) % 400 == 0) {\n              daysToAdd = 0x1d;\n            }\n            else {\n              daysToAdd = 0x1c;\n            }\n          }\n          else {\n            daysToAdd = 0x1d;\n          }\n        }\n        else {\n          daysToAdd = 0x1c;\n        }\n      }\n      daysInMonth = daysToAdd;\n      if (date[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[date[4]];\n      }\n      date[3] = daysInMonth + date[3];\n    }\n  }\n  else {\n    while( true ) {\n      dayOfMonth = date[4];\n      daysInMonth = daysToAdd;\n      if (dayOfMonth != 1) {\n        daysInMonth = (&DAT_000079fc)[dayOfMonth];\n      }\n      if ((int)date[3] <= daysInMonth) break;\n      date[3] = date[3] - daysInMonth;\n      date[4] = dayOfMonth + 1;\n      if (dayOfMonth + 1 == 0xc) {\n        leapDays = date[5];\n        dayOfMonth = leapDays + 1;\n        date[4] = 0;\n        date[5] = dayOfMonth;\n        if ((dayOfMonth & 3) == 0) {\n          if (dayOfMonth % 100 == 0) {\n            if ((leapDays + 0x76d) % 400 == 0) {\n              daysToAdd = 0x1d;\n            }\n            else {\n              daysToAdd = 0x1c;\n            }\n          }\n          else {\n            daysToAdd = 0x1d;\n          }\n        }\n        else {\n          daysToAdd = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "date",
                "param_2": "numDays",
                "param_3": "unknown",
                "iVar1": "daysInMonth",
                "uVar2": "dayOfMonth",
                "uVar3": "leapDays",
                "iVar4": "daysToAdd",
                "bVar5": "isNegative",
                "local_20": "temp",
                "local_1c": "currentDay",
                "uStack_18": "unknown"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_weekday_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateWeekday_000047e4(int *dateArray)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *functionPtrArray;\n  uint tempVar1;\n  int tempVar2;\n  int tempVar3;\n  int updatedVar1;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  int numOfDays;\n  uint tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  uint result;\n  bool condition;\n  \n  functionPtrArray = (int *)FUN_000056b0();\n  FUN_00004634(dateArray);\n  tempVar7 = dateArray[5];\n  numOfDays = dateArray[3] + -1 + *(int *)(&DAT_00007a2c + dateArray[4] * 4);\n  if (((1 < dateArray[4]) && ((tempVar7 & 3) == 0)) &&\n     ((tempVar7 != (tempVar7 / 100) * 100 || (tempVar7 + 0x76c == ((tempVar7 + 0x76c) / 400) * 400)))) {\n    numOfDays = numOfDays + 1;\n  }\n  dateArray[7] = numOfDays;\n  if (20000 < (int)&DAT_00002710 + tempVar7) {\n    updatedVar1 = -1;\n    tempVar2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)tempVar7 < 0x47) {\n    if (tempVar7 != 0x46) {\n      for (tempVar5 = 0x45; (int)tempVar7 < (int)tempVar5; tempVar5 = tempVar5 - 1) {\n        if ((tempVar5 & 3) == 0) {\n          if (tempVar5 == (tempVar5 / 100) * 100) {\n            if ((tempVar5 + 0x76c) % 400 == 0) {\n              updatedVar1 = 0x16e;\n            }\n            else {\n              updatedVar1 = 0x16d;\n            }\n          }\n          else {\n            updatedVar1 = 0x16e;\n          }\n        }\n        else {\n          updatedVar1 = 0x16d;\n        }\n        numOfDays = numOfDays - updatedVar1;\n      }\n      if ((tempVar5 & 3) == 0) {\n        if (tempVar7 == (tempVar7 / 100) * 100) {\n          updatedVar1 = 0x16d;\n          if ((tempVar7 + 0x76c) % 400 == 0) {\n            updatedVar1 = 0x16e;\n          }\n        }\n        else {\n          updatedVar1 = 0x16e;\n        }\n      }\n      else {\n        updatedVar1 = 0x16d;\n      }\n      numOfDays = numOfDays - updatedVar1;\n    }\n  }\n  else {\n    tempVar5 = 0x46;\n    do {\n      if ((tempVar5 & 3) == 0) {\n        if (tempVar5 % 100 == 0) {\n          if ((tempVar5 + 0x76c) % 400 == 0) {\n            updatedVar1 = 0x16e;\n          }\n          else {\n            updatedVar1 = 0x16d;\n          }\n        }\n        else {\n          updatedVar1 = 0x16e;\n        }\n      }\n      else {\n        updatedVar1 = 0x16d;\n      }\n      tempVar5 = tempVar5 + 1;\n      numOfDays = numOfDays + updatedVar1;\n    } while (tempVar7 != tempVar5);\n  }\n  totalDays = (longlong)numOfDays * 0x15180 + (longlong)(dateArray[2] * 0xe10 + dateArray[1] * 0x3c + *dateArray)\n  ;\n  result = (uint)totalDays;\n  updatedVar1 = (int)((ulonglong)totalDays >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  tempVar5 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    tempVar7 = functionPtrArray[10];\n    updatedVar1 = (uint)totalDays + tempVar7;\n    tempVar2 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)tempVar7 >> 0x1f) + (uint)CARRY4((uint)totalDays,tempVar7);\n  }\n  else {\n    tempVar9 = dateArray[8];\n    tempVar8 = tempVar9;\n    if (0 < (int)tempVar9) {\n      tempVar8 = 1;\n    }\n    if ((functionPtrArray[1] == dateArray[5] + 0x76c) || (tempVar2 = FUN_00004f98(), tempVar2 != 0)) {\n      tempVar6 = functionPtrArray[0x14];\n      tempVar1 = functionPtrArray[0x12];\n      tempVar4 = functionPtrArray[10];\n      tempVar5 = tempVar1 - tempVar4;\n      tempVar2 = (functionPtrArray[0x13] - ((int)tempVar4 >> 0x1f)) - (uint)(tempVar1 < tempVar4);\n      if (((int)((updatedVar1 - tempVar2) - (uint)(result < tempVar5)) < 0 ==\n           (SBORROW4(updatedVar1,tempVar2) != SBORROW4(updatedVar1 - tempVar2,(uint)(result < tempVar5)))) &&\n         (tempVar3 = (functionPtrArray[0x13] - ((int)tempVar6 >> 0x1f)) - (uint)(tempVar1 < tempVar6),\n         condition = result < tempVar1 - tempVar6,\n         (int)((updatedVar1 - tempVar3) - (uint)condition) < 0 !=\n         (SBORROW4(updatedVar1,tempVar3) != SBORROW4(updatedVar1 - tempVar3,(uint)condition)))) goto LAB_00004a88;\n      tempVar1 = functionPtrArray[8] - tempVar6;\n      tempVar3 = (functionPtrArray[9] - ((int)tempVar6 >> 0x1f)) - (uint)((uint)functionPtrArray[8] < tempVar6);\n      if (*functionPtrArray != 0) {\n        if ((int)((updatedVar1 - tempVar3) - (uint)(result < tempVar1)) < 0 ==\n            (SBORROW4(updatedVar1,tempVar3) != SBORROW4(updatedVar1 - tempVar3,(uint)(result < tempVar1))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempVar5 = 0;\n        if ((int)tempVar9 < 0) goto LAB_00004934;\nLAB_00004a14:\n        result = tempVar8 ^ tempVar5;\n        tempVar8 = tempVar5;\n        if (result == 1) {\n          if (tempVar5 == 0) {\n            updatedVar1 = tempVar6 - tempVar4;\n          }\n          else {\n            updatedVar1 = tempVar4 - tempVar6;\n          }\n          tempVar2 = dateArray[3];\n          *dateArray = *dateArray + updatedVar1;\n          updatedTotalDays = totalDays + updatedVar1;\n          FUN_00004634(dateArray);\n          tempVar2 = dateArray[3] - tempVar2;\n          totalDays = totalDays + updatedVar1;\n          if (tempVar2 != 0) {\n            if (tempVar2 < 2) {\n              if (tempVar2 == -2 || tempVar2 + 2 < 0 != SCARRY4(tempVar2,2)) {\n                tempVar2 = 1;\n              }\n            }\n            else {\n              tempVar2 = -1;\n            }\n            updatedVar1 = tempVar2 + dateArray[7];\n            numOfDays = numOfDays + tempVar2;\n            if (updatedVar1 < 0) {\n              tempVar5 = tempVar7 - 1;\n              if ((tempVar5 & 3) == 0) {\n                if (tempVar5 == (tempVar5 / 100) * 100) {\n                  updatedVar1 = 0x16d;\n                  if ((tempVar7 + 0x76b) % 400 != 0) {\n                    updatedVar1 = 0x16c;\n                  }\n                }\n                else {\n                  updatedVar1 = 0x16d;\n                }\n              }\n              else {\n                updatedVar1 = 0x16c;\n              }\n            }\n            else {\n              if ((tempVar7 & 3) == 0) {\n                if (tempVar7 == (tempVar7 / 100) * 100) {\n                  tempVar2 = 0x16d;\n                  if ((tempVar7 + 0x76c) % 400 == 0) {\n                    tempVar2 = 0x16e;\n                  }\n                }\n                else {\n                  tempVar2 = 0x16e;\n                }\n              }\n              else {\n                tempVar2 = 0x16d;\n              }\n              if (tempVar2 <= updatedVar1) {\n                updatedVar1 = updatedVar1 - tempVar2;\n              }\n            }\n            dateArray[7] = updatedVar1;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((updatedVar1 - tempVar3) - (uint)(result < tempVar1)) < 0 !=\n          (SBORROW4(updatedVar1,tempVar3) != SBORROW4(updatedVar1 - tempVar3,(uint)(result < tempVar1)))) {\nLAB_0000491e:\n        if ((int)((updatedVar1 - tempVar2) - (uint)(result < tempVar5)) < 0 ==\n            (SBORROW4(updatedVar1,tempVar2) != SBORROW4(updatedVar1 - tempVar2,(uint)(result < tempVar5))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)tempVar9) {\n        tempVar5 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempVar5 = tempVar8;\n      if (tempVar8 != 1) goto LAB_00004934;\n    }\n    tempVar7 = functionPtrArray[0x14];\n    updatedVar1 = (uint)totalDays + tempVar7;\n    tempVar2 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)tempVar7 >> 0x1f) + (uint)CARRY4((uint)totalDays,tempVar7);\n    tempVar5 = 1;\n  }\n  FUN_000050f4();\n  dateArray[8] = tempVar5;\n  dateArray[6] = (numOfDays + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempVar2,updatedVar1);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_weekday_000047e4",
                "param_1": "dateArray",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "functionPtrArray",
                "uVar4": "tempVar1",
                "iVar5": "tempVar2",
                "iVar6": "tempVar3",
                "iVar7": "updatedVar1",
                "uVar8": "tempVar4",
                "uVar9": "tempVar5",
                "uVar10": "tempVar6",
                "iVar11": "numOfDays",
                "uVar12": "tempVar7",
                "uVar13": "tempVar8",
                "uVar14": "tempVar9",
                "uVar15": "result",
                "bVar16": "condition"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "update_data_list_00004b34",
            "code": "\nvoid updateDataList_00004b34(undefined4 *result,int dataSize,undefined4 param3,undefined4 param4)\n\n{\n  int *temp;\n  int **foundPosition;\n  int **newPrevPosition;\n  int **currentPosition;\n  int **nextPosition;\n  int **newPosition;\n  bool isLastNode;\n  \n  if (dataSize == 0) {\n    return;\n  }\n  newPosition = (int **)(dataSize + -4);\n  if (*(int *)(dataSize + -4) < 0) {\n    newPosition = (int **)((int)newPosition + *(int *)(dataSize + -4));\n  }\n  FUN_00005790();\n  currentPosition = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newPosition[1] = (int *)0x0;\n    newPrevPosition = foundPosition;\n    DAT_1fff0db4 = newPosition;\n  }\n  else {\n    nextPosition = DAT_1fff0db4;\n    if (newPosition < DAT_1fff0db4) {\n      newPrevPosition = (int **)*newPosition;\n      currentPosition = (int **)((int)newPosition + (int)newPrevPosition);\n      isLastNode = DAT_1fff0db4 == currentPosition;\n      if (isLastNode) {\n        currentPosition = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newPosition[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newPosition;\n      if (isLastNode) {\n        currentPosition = (int **)((int)currentPosition + (int)newPrevPosition);\n        *newPosition = (int *)currentPosition;\n      }\n    }\n    else {\n      do {\n        currentPosition = nextPosition;\n        nextPosition = (int **)currentPosition[1];\n        if (nextPosition == (int **)0x0) break;\n      } while (nextPosition <= newPosition);\n      newPrevPosition = (int **)*currentPosition;\n      if ((int **)((int)currentPosition + (int)newPrevPosition) == newPosition) {\n        newPrevPosition = (int **)((int)newPrevPosition + (int)*newPosition);\n        *currentPosition = (int *)newPrevPosition;\n        if (nextPosition == (int **)((int)currentPosition + (int)newPrevPosition)) {\n          temp = *nextPosition;\n          currentPosition[1] = nextPosition[1];\n          newPrevPosition = (int **)((int)newPrevPosition + (int)temp);\n          *currentPosition = (int *)newPrevPosition;\n        }\n      }\n      else if (newPosition < (int **)((int)currentPosition + (int)newPrevPosition)) {\n        *result = 0xc;\n      }\n      else {\n        newPrevPosition = (int **)((int)newPosition + (int)*newPosition);\n        isLastNode = nextPosition == newPrevPosition;\n        if (isLastNode) {\n          newPrevPosition = (int **)*nextPosition;\n          nextPosition = (int **)nextPosition[1];\n        }\n        newPosition[1] = (int *)nextPosition;\n        if (isLastNode) {\n          newPrevPosition = (int **)((int)newPrevPosition + (int)*newPosition);\n          *newPosition = (int *)newPrevPosition;\n        }\n        currentPosition[1] = (int *)newPosition;\n      }\n    }\n  }\n  FUN_0000579c(result,newPrevPosition,currentPosition,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "update_data_list_00004b34",
                "param_1": "result",
                "param_2": "dataSize",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "temp",
                "extraout_r1": "foundPosition",
                "ppiVar2": "newPrevPosition",
                "ppiVar3": "currentPosition",
                "ppiVar4": "nextPosition",
                "ppiVar5": "newPosition",
                "bVar6": "isLastNode"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *error_code,uint requested_size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *previous_block;\n  int block_difference;\n  uint block_difference_abs;\n  uint *current_block;\n  uint adjusted_size;\n  \n  adjusted_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < requested_size)) {\n    *error_code = 0xc;\n  }\n  else {\n    FUN_00005790();\n    previous_block = DAT_1fff0db4;\n    for (current_block = DAT_1fff0db4; current_block != (uint *)0x0; current_block = (uint *)current_block[1]) {\n      block_difference_abs = *current_block - adjusted_size;\n      if (-1 < (int)block_difference_abs) {\n        if (0xb < block_difference_abs) {\n          *current_block = block_difference_abs;\n          current_block = (uint *)((int)current_block + block_difference_abs);\n          goto LAB_00004c34;\n        }\n        if (previous_block == current_block) {\n          DAT_1fff0db4 = (uint *)current_block[1];\n        }\n        if (previous_block != current_block) {\n          previous_block[1] = (uint)(uint *)current_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      previous_block = current_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(error_code,0,previous_block,0,param_4);\n    }\n    previous_block = (uint *)FUN_00000428(error_code,adjusted_size);\n    if ((previous_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)previous_block + 3U & 0xfffffffc), previous_block == current_block ||\n        (block_difference = FUN_00000428(error_code,(int)current_block - (int)previous_block), block_difference != -1)))) {\nLAB_00004c34:\n      *current_block = adjusted_size;\nLAB_00004c42:\n      FUN_0000579c(error_code);\n      adjusted_size = (int)current_block + 0xbU & 0xfffffff8;\n      block_difference = adjusted_size - (int)(current_block + 1);\n      if (block_difference == 0) {\n        return adjusted_size;\n      }\n      *(uint *)((int)current_block + block_difference) = (int)(current_block + 1) - adjusted_size;\n      return adjusted_size;\n    }\n    *error_code = 0xc;\n    FUN_0000579c(error_code);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "error_code",
                "param_2": "requested_size",
                "puVar1": "previous_block",
                "iVar2": "block_difference",
                "uVar3": "block_difference_abs",
                "puVar4": "current_block",
                "uVar5": "adjusted_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_elf32_rel_array_00004c84",
            "code": "\nvoid process_elf32_rel_array_00004c84(undefined4 input_param,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  dword rel_offset;\n  undefined4 param_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  undefined4 arg4_copy;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  param_copy = input_param;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  arg4_copy = arg4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(rel_offset,*(undefined4 *)(rel_offset + 8),input_param,&arg2_copy,param_copy,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_elf32_rel_array_00004c84",
                "param_1": "input_param",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "dVar1": "rel_offset",
                "uVar2": "param_copy",
                "uStack_c": "arg2_copy",
                "uStack_8": "arg3_copy",
                "uStack_4": "arg4_copy"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "decrement_and_return_param_00004cb4",
            "code": "\nuint decrementAndReturnParam_00004cb4(uint input)\n\n{\n  dword relOffset;\n  undefined4 *dataPtr;\n  uint decrementedValue;\n  undefined *charPtr;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataPtr = *(undefined4 **)(relOffset + 8);\n  if ((relOffset != 0) && (*(int *)(relOffset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPtr == &DAT_000079b8) {\n    dataPtr = *(undefined4 **)(relOffset + 4);\n  }\n  else if (dataPtr == (undefined4 *)&DAT_000079d8) {\n    dataPtr = *(undefined4 **)(relOffset + 8);\n  }\n  else if (dataPtr == (undefined4 *)&DAT_00007998) {\n    dataPtr = *(undefined4 **)(relOffset + 0xc);\n  }\n  if ((-1 < (int)(dataPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  decrementedValue = dataPtr[2] - 1;\n  dataPtr[2] = decrementedValue;\n  if (((int)decrementedValue < 0) && (((int)decrementedValue < (int)dataPtr[6] || (decrementedValue = input & 0xff, decrementedValue == 10))))\n  {\n    input = FUN_00005404(relOffset,input,dataPtr,decrementedValue,unusedVar1,unusedVar2);\n  }\n  else {\n    charPtr = (undefined *)*dataPtr;\n    *dataPtr = charPtr + 1;\n    *charPtr = (char)input;\n    input = input & 0xff;\n  }\n  if ((-1 < (int)(dataPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "decrement_and_return_param_00004cb4",
                "param_1": "input",
                "dVar1": "relOffset",
                "puVar2": "dataPtr",
                "uVar3": "decrementedValue",
                "puVar4": "charPtr",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "parse_input_00004db8",
            "code": "\nundefined4 parseInput_00004db8(int input)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *stringPtr;\n  char **arrayPointer;\n  undefined4 returnVal;\n  char *currentPtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  arrayPointer = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (arrayPointer == (char **)&DAT_000079b8) {\n    arrayPointer = *(char ***)(offset + 4);\n  }\n  else if (arrayPointer == (char **)&DAT_000079d8) {\n    arrayPointer = *(char ***)(offset + 8);\n  }\n  else if (arrayPointer == (char **)&DAT_00007998) {\n    arrayPointer = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)arrayPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(arrayPointer + 3) << 0x16))) {\n    FUNC_000045e8(arrayPointer[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(arrayPointer + 3) << 0x1c) < 0) && (arrayPointer[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,arrayPointer), result == 0)) {\n    currentPtr = (char *)(input + -1);\n    do {\n      while( true ) {\n        currentPtr = currentPtr + 1;\n        currentChar = *currentPtr;\n        stringPtr = arrayPointer[2] + -1;\n        arrayPointer[2] = stringPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)stringPtr) {\n            currentPtr = *arrayPointer;\n            returnVal = 10;\n            *arrayPointer = currentPtr + 1;\n            *currentPtr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,arrayPointer);\n          if (result != -1) {\n            returnVal = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)stringPtr < 0) && (((int)stringPtr < (int)arrayPointer[6] || (currentChar == '\\n')))) break;\n        stringPtr = *arrayPointer;\n        *arrayPointer = stringPtr + 1;\n        *stringPtr = currentChar;\n      }\n      result = FUN_00005404(offset,currentChar,arrayPointer);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnVal = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)arrayPointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(arrayPointer + 3) << 0x16))) {\n    FUNC_000045ec(arrayPointer[0x16]);\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "parse_input_00004db8",
                "param_1": "input",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "stringPtr",
                "ppcVar5": "arrayPointer",
                "uVar6": "returnVal",
                "pcVar7": "currentPtr"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_data_00004dc8",
            "code": "\nvoid updateData_00004dc8(undefined4 data,int buffer)\n\n{\n  int result;\n  uint updatedValue;\n  bool isPositive;\n  \n  result = FUN_00000490(data,(int)*(short *)(buffer + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    updatedValue = *(int *)(buffer + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(buffer + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(buffer + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(buffer + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_data_00004dc8",
                "param_1": "data",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_function_00004dee",
            "code": "\nundefined4 processFunction_00004dee(undefined4 input,int data,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    FUN_000004f2(input,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  result = FUN_00000e38(param3,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_function_00004dee",
                "param_1": "input",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_status_00004e26",
            "code": "\nvoid updateStatus_00004e26(undefined4 data,int buffer)\n\n{\n  int result;\n  ushort updatedFlags;\n  bool isFailed;\n  \n  result = FUN_000004f2(data,(int)*(short *)(buffer + 0xe));\n  isFailed = result == -1;\n  if (isFailed) {\n    updatedFlags = *(ushort *)(buffer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(buffer + 0x54) = result;\n    updatedFlags = *(ushort *)(buffer + 0xc) | 0x1000;\n  }\n  if (isFailed) {\n    *(ushort *)(buffer + 0xc) = updatedFlags;\n  }\n  if (!isFailed) {\n    *(ushort *)(buffer + 0xc) = updatedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_status_00004e26",
                "param_1": "data",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "updatedFlags",
                "bVar3": "isFailed"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compareByteArrays_00004e52(byte *byteArray1,byte *byteArray2)\n\n{\n  byte byteValue2;\n  uint byteValue1;\n  bool isEqual;\n  \n  do {\n    byteValue1 = (uint)*byteArray1;\n    byteValue2 = *byteArray2;\n    isEqual = byteValue1 == 1;\n    if (byteValue1 != 0) {\n      isEqual = byteValue1 == byteValue2;\n    }\n    byteArray1 = byteArray1 + 1;\n    byteArray2 = byteArray2 + 1;\n  } while (isEqual);\n  return byteValue1 - byteValue2;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "byteArray1",
                "param_2": "byteArray2",
                "uVar2": "byteValue1",
                "bVar1": "byteValue2",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_bytes_00004e66",
            "code": "\nint compareBytes_00004e66(byte *byteArray,int startIndex,int length)\n\n{\n  byte *currentByte;\n  int difference;\n  byte *nextByte;\n  uint currentByteValue;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    nextByte = (byte *)(startIndex + -1);\n    currentByte = byteArray;\n    do {\n      currentByteValue = (uint)*currentByte;\n      nextByte = nextByte + 1;\n      if ((currentByteValue != *nextByte) || (currentByte + 1 == byteArray + length)) break;\n      currentByte = currentByte + 1;\n    } while (currentByteValue != 0);\n    difference = currentByteValue - *nextByte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "param_1": "byteArray",
                "param_2": "startIndex",
                "param_3": "length",
                "pbVar1": "currentByte",
                "iVar2": "difference",
                "pbVar3": "nextByte",
                "uVar4": "currentByteValue"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parseInteger_00004f84(byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint ch;\n  uint isNegative;\n  uint digitValue;\n  int compareResult;\n  uint maxUInt;\n  uint maxDiv;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    ch = (uint)*currentChar;\n    isNegative = (byte)(&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00004ed6;\n  if ((*nextChar & 0xdf) == 0x58) {\n    ch = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxUInt = isNegative + 0x7fffffff;\n  compareResult = 0;\n  maxDiv = maxUInt / base;\n  result = 0;\n  do {\n    digitValue = ch - 0x30;\n    if (9 < digitValue) {\n      if (ch - 0x41 < 0x1a) {\n        digitValue = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digitValue = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (compareResult != -1) {\n      if ((maxDiv < result) || ((maxDiv == result && ((int)(maxUInt - base * maxDiv) < (int)digitValue)))) {\n        compareResult = -1;\n      }\n      else {\n        result = result * base + digitValue;\n        compareResult = 1;\n      }\n    }\n    ch = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (compareResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxUInt;\n    if (output == (byte **)0x0) {\n      return maxUInt;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (compareResult == 0) goto LAB_00004f64;\n  }\n  input = nextChar + -1;\nLAB_00004f64:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "input",
                "param_2": "output",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "ch",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "iVar5": "compareResult",
                "uVar6": "maxUInt",
                "uVar7": "maxDiv",
                "pbVar8": "currentChar",
                "pbVar9": "nextChar"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *result;\n  undefined4 isLeapYear;\n  uint day;\n  int numDays;\n  uint *monthData;\n  int numLeapYears;\n  uint isLeap;\n  int monthIndex;\n  int offset;\n  uint isDivisible;\n  \n  result = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    numLeapYears = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    result[1] = year;\n    isDivisible = (uint)(year % 400 == 0);\n    monthData = result;\n    do {\n      day = monthData[5];\n      if (*(char *)(monthData + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)day < 0x3c) {\n            numDays = 0;\n          }\n          else {\n            numDays = 1;\n          }\n        }\n        else {\n          numDays = 0;\n        }\n        numDays = numDays + numLeapYears + day + -1;\n      }\n      else if (*(char *)(monthData + 2) == 'D') {\n        numDays = numLeapYears + day;\n      }\n      else {\n        isLeap = isDivisible;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeap = 1;\n        }\n        monthIndex = 0;\n        numDays = numLeapYears;\n        while( true ) {\n          monthIndex = monthIndex + 1;\n          if ((int)monthData[3] <= monthIndex) break;\n          numDays = numDays + *(int *)(&UNK_00007b98 + monthIndex * 4 + isLeap * 0x30);\n        }\n        offset = day - (numDays + 4U) % 7;\n        if (offset < 0) {\n          offset = offset + 7;\n        }\n        for (offset = (monthData[4] - 1) * 7 + offset;\n            *(int *)(&UNK_00007b98 + monthIndex * 4 + isLeap * 0x30) <= offset; offset = offset + -7) {\n        }\n        numDays = numDays + offset;\n      }\n      day = monthData[10] + numDays * 0x15180 + monthData[6];\n      monthData[8] = day;\n      monthData[9] = (int)day >> 0x1f;\n      monthData = monthData + 10;\n    } while (result + 0x14 != monthData);\n    day = result[9];\n    isDivisible = result[0x13];\n    *result = (uint)((int)((day - isDivisible) - (uint)(result[8] < result[0x12])) < 0 !=\n                    (SBORROW4(day,isDivisible) !=\n                    SBORROW4(day - isDivisible,(uint)(result[8] < result[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "result",
                "uVar2": "isLeapYear",
                "uVar3": "day",
                "iVar4": "numDays",
                "puVar5": "monthData",
                "iVar6": "numLeapYears",
                "uVar7": "isLeap",
                "iVar8": "monthIndex",
                "iVar9": "offset",
                "uVar10": "isDivisible"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * getMemoryAddress_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_pointer_000050f4",
            "code": "\nundefined * get_data_pointer_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_pointer_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_data_and_update_values_00005100",
            "code": "\nvoid parseDataAndUpdateValues_00005100(void)\n\n{\n  dword offset;\n  int result;\n  char *dataPtr;\n  int checkResult;\n  int parseResult;\n  undefined dataType;\n  char *tempPtr;\n  bool firstIteration;\n  ushort *ptr1;\n  int *ptr1Int;\n  ushort *ptr2;\n  int *ptr2Int;\n  ushort value1;\n  ushort value2;\n  ushort value3;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int tempValue;\n  char *tempPtrArray [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  result = FUN_000056b0();\n  dataPtr = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (dataPtr == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = dataPtr;\n    DAT_1fff0ddc = dataPtr;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (checkResult = FUN_00004e52(), checkResult != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    checkResult = FUN_00005ecc(dataPtr);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,checkResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,dataPtr);\n    }\n    if (*dataPtr == ':') {\n      dataPtr = dataPtr + 1;\n    }\n    checkResult = FUN_00005e68(dataPtr,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&tempValue);\n    if (0 < checkResult) {\n      tempPtr = dataPtr + tempValue;\n      if (dataPtr[tempValue] == '-') {\n        tempPtr = tempPtr + 1;\n        checkResult = -1;\n      }\n      else {\n        if (dataPtr[tempValue] == '+') {\n          tempPtr = tempPtr + 1;\n        }\n        checkResult = 1;\n      }\n      value2 = 0;\n      value3 = 0;\n      ptr1 = &value2;\n      ptr1Int = &tempValue;\n      ptr2 = &value3;\n      ptr2Int = &tempValue;\n      parseResult = FUN_00005e68(tempPtr,\"%hu%n:%hu%n:%hu%n\",&value1,&tempValue,&value2,&tempValue,\n                           &value3,&tempValue);\n      if (0 < parseResult) {\n        *(uint *)(result + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * checkResult;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        tempPtr = tempPtr + tempValue;\n        checkResult = FUN_00005e68(tempPtr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&tempValue,ptr1,ptr1Int,ptr2,\n                             ptr2Int);\n        if (checkResult < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          dataPtr = tempPtr + tempValue;\n          if (tempPtr[tempValue] == '-') {\n            dataPtr = dataPtr + 1;\n            checkResult = -1;\n          }\n          else {\n            if (tempPtr[tempValue] == '+') {\n              dataPtr = dataPtr + 1;\n            }\n            checkResult = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          value3 = 0;\n          tempValue = 0;\n          parseResult = FUN_00005e68(dataPtr,\"%hu%n:%hu%n:%hu%n\",&value1,&tempValue,&value2,&tempValue,\n                               &value3,&tempValue);\n          if (parseResult < 1) {\n            checkResult = *(int *)(result + 0x28) + -0xe10;\n          }\n          else {\n            checkResult = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * checkResult;\n          }\n          *(int *)(result + 0x50) = checkResult;\n          dataPtr = dataPtr + tempValue;\n          firstIteration = false;\n          checkResult = result;\n          while( true ) {\n            if (*dataPtr == ',') {\n              dataPtr = dataPtr + 1;\n            }\n            if (*dataPtr == 'M') {\n              parseResult = FUN_00005e68(dataPtr,\"M%hu%n.%hu%n.%hu%n\",&value4,&tempValue,&value5,\n                                   &tempValue,&value6,&tempValue);\n              if (parseResult != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(checkResult + 0xc) = (uint)value4;\n              *(uint *)(checkResult + 0x10) = (uint)value5;\n              *(undefined *)(checkResult + 8) = 0x4d;\n              *(uint *)(checkResult + 0x14) = (uint)value6;\n              tempPtr = dataPtr + tempValue;\n            }\n            else {\n              if (*dataPtr == 'J') {\n                dataPtr = dataPtr + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              value6 = FUN_00005fd8(dataPtr,tempPtrArray,10);\n              tempPtr = tempPtrArray[0];\n              if (tempPtrArray[0] == dataPtr) {\n                if (firstIteration) {\n                  *(undefined *)(result + 0x30) = 0x4d;\n                  *(undefined4 *)(result + 0x34) = 0xb;\n                  *(undefined4 *)(result + 0x38) = 1;\n                  *(undefined4 *)(result + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(result + 8) = 0x4d;\n                  *(undefined4 *)(result + 0xc) = 3;\n                  *(undefined4 *)(result + 0x10) = 2;\n                  *(undefined4 *)(result + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(checkResult + 8) = dataType;\n                *(uint *)(checkResult + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            value3 = 0;\n            tempValue = 0;\n            if (*tempPtr == '/') {\n              FUN_00005e68(tempPtr,&DAT_00007a85,&value1,&tempValue,&value2,&tempValue,&value3,\n                           &tempValue);\n            }\n            *(uint *)(checkResult + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3;\n            checkResult = checkResult + 0x28;\n            dataPtr = tempPtr + tempValue;\n            if (firstIteration) break;\n            firstIteration = true;\n          }\n          FUN_00004f98(*(undefined4 *)(result + 4));\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(result + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_data_and_update_values_00005100",
                "dVar1": "offset",
                "iVar2": "result",
                "pcVar3": "dataPtr",
                "iVar4": "checkResult",
                "iVar5": "parseResult",
                "uVar6": "dataType",
                "pcVar7": "tempPtr",
                "bVar8": "firstIteration",
                "puVar9": "ptr1",
                "piVar10": "ptr1Int",
                "puVar11": "ptr2",
                "piVar12": "ptr2Int",
                "local_3c": "value1",
                "local_3a": "value2",
                "local_38": "value3",
                "local_36": "value4",
                "local_34": "value5",
                "local_32": "value6",
                "local_30": "tempValue",
                "local_2c": "tempPtrArray"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int inputData,uint length,int *buffer,undefined4 paramValue)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  undefined *tempVar3;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(inputData + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(inputData + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(inputData + 0xc);\n  }\n  buffer[2] = buffer[6];\n  tempVar2 = (uint)*(ushort *)(buffer + 3);\n  tempVar1 = tempVar2 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar2 = buffer[4], tempVar2 != 0)) ||\n     (tempVar1 = FUN_000054a8(inputData,buffer,tempVar1,tempVar2,paramValue), tempVar1 == 0)) {\n    tempVar1 = *buffer - buffer[4];\n    length = length & 0xff;\n    if ((tempVar1 < buffer[5]) || (tempVar1 = FUN_00004158(inputData,buffer), tempVar1 == 0)) {\n      buffer[2] = buffer[2] + -1;\n      tempVar3 = (undefined *)*buffer;\n      *buffer = (int)(tempVar3 + 1);\n      *tempVar3 = (char)length;\n      if (buffer[5] != tempVar1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return length;\n        }\n        if (length != 10) {\n          return length;\n        }\n      }\n      tempVar1 = FUN_00004158(inputData,buffer);\n      if (tempVar1 == 0) {\n        return length;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "inputData",
                "param_2": "length",
                "param_3": "buffer",
                "param_4": "paramValue",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "puVar3": "tempVar3"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_relocation_000054a8",
            "code": "\nuint processRelocation_000054a8(undefined4 *outputCode,undefined4 *relocationEntry)\n\n{\n  ushort flags;\n  dword offset;\n  ushort originalFlags;\n  uint temp;\n  uint temp2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (relocationEntry == &DAT_000079b8) {\n    relocationEntry = *(undefined4 **)(offset + 4);\n  }\n  else if (relocationEntry == (undefined4 *)&DAT_000079d8) {\n    relocationEntry = *(undefined4 **)(offset + 8);\n  }\n  else if (relocationEntry == (undefined4 *)&DAT_00007998) {\n    relocationEntry = *(undefined4 **)(offset + 0xc);\n  }\n  temp = (uint)*(ushort *)(relocationEntry + 3);\n  originalFlags = *(ushort *)(relocationEntry + 3);\n  if (-1 < (int)(temp << 0x1c)) {\n    if (-1 < (int)(temp << 0x1b)) {\n      *outputCode = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp << 0x1d) < 0) {\n      if ((undefined4 *)relocationEntry[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)relocationEntry[0xd] != relocationEntry + 0x11) {\n          FUN_00004b34(outputCode);\n        }\n        relocationEntry[0xd] = 0;\n      }\n      *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) & 0xffdb;\n      relocationEntry[1] = 0;\n      *relocationEntry = relocationEntry[4];\n    }\n    *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) | 8;\n  }\n  if ((relocationEntry[4] == 0) && ((*(ushort *)(relocationEntry + 3) & 0x280) != 0x200)) {\n    FUN_00005700(outputCode,relocationEntry);\n  }\n  flags = *(ushort *)(relocationEntry + 3);\n  temp = (uint)flags;\n  originalFlags = *(ushort *)(relocationEntry + 3);\n  temp2 = temp & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)(temp << 0x1e)) {\n      temp2 = relocationEntry[5];\n    }\n    relocationEntry[2] = temp2;\n  }\n  else {\n    relocationEntry[2] = 0;\n    relocationEntry[6] = -relocationEntry[5];\n  }\n  if (relocationEntry[4] != 0) {\n    return 0;\n  }\n  if ((flags & 0x80) == 0) {\n    return temp & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(relocationEntry + 3) = originalFlags | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_relocation_000054a8",
                "param_1": "outputCode",
                "param_2": "relocationEntry",
                "uVar1": "flags",
                "dVar2": "offset",
                "uVar3": "originalFlags",
                "uVar4": "temp",
                "uVar5": "temp2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *quotientAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientAndRemainder = quotient;\n  quotientAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotientAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_equal_character_offset_0000562c",
            "code": "\nint find_equal_character_offset_0000562c(undefined4 param1,char *text,int *match_index)\n\n{\n  char current_char;\n  int *rel_offset_ptr;\n  int result;\n  char *current_text;\n  int *current_offset_ptr;\n  int text_offset;\n  \n  FUN_00005fec();\n  current_text = text;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_text;\n      if (current_char == '\\0') {\n        text_offset = (int)current_text - (int)text;\n        rel_offset_ptr = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          current_offset_ptr = rel_offset_ptr;\n          if (*current_offset_ptr == 0) break;\n          result = FUN_00004e66(*current_offset_ptr,text,text_offset);\n          rel_offset_ptr = current_offset_ptr + 1;\n          if ((result == 0) && (result = *current_offset_ptr, *(char *)(result + text_offset) == '=')) {\n            *match_index = (int)((int)current_offset_ptr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param1);\n            return result + text_offset + 1;\n          }\n        }\n        break;\n      }\n      current_text = current_text + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_equal_character_offset_0000562c",
                "param_1": "param1",
                "param_2": "text",
                "param_3": "match_index",
                "cVar1": "current_char",
                "piVar2": "rel_offset_ptr",
                "iVar3": "result",
                "pcVar4": "current_text",
                "piVar5": "current_offset_ptr",
                "iVar6": "text_offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "process_data_000056a0",
            "code": "\nvoid processData_000056a0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = input2;\n  temp2 = input3;\n  FUN_0000562c(input1,input2,&temp1,input4,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_c": "temp1",
                "uStack_8": "temp2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nuint32_t getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_permission_000056b8",
            "code": "\nundefined4 checkPermission_000056b8(undefined4 permission,int data,undefined4 *result,uint *flags)\n\n{\n  int errorCode;\n  undefined4 permissionValue;\n  undefined buffer [4];\n  uint value;\n  \n  if ((*(short *)(data + 0xe) < 0) ||\n     (errorCode = FUN_00000514(permission,(int)*(short *)(data + 0xe),buffer), errorCode < 0)) {\n    *flags = 0;\n    if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n      permissionValue = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *flags = (uint)((value & 0xf000) == 0x2000);\n  }\n  permissionValue = 0x400;\nLAB_000056f8:\n  *result = permissionValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_permission_000056b8",
                "param_1": "permission",
                "param_2": "data",
                "param_3": "result",
                "param_4": "flags",
                "iVar1": "errorCode",
                "uVar2": "permissionValue",
                "auStack_68": "buffer",
                "local_64": "value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int input,int *output)\n\n{\n  ushort result;\n  int status;\n  int temp1;\n  int *temp2;\n  \n  if (-1 < (int)((uint)*(ushort *)(output + 3) << 0x1e)) {\n    temp1 = input;\n    temp2 = output;\n    result = FUN_000056b8(input,output,&temp1,&temp2);\n    status = FUN_00004bd0(input,temp1);\n    if (status != 0) {\n      *(undefined **)(input + 0x28) = &DAT_0000423d;\n      *output = status;\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x80;\n      output[5] = temp1;\n      output[4] = status;\n      if ((temp2 != (int *)0x0) &&\n         (status = FUN_00000534(input,(int)*(short *)((int)output + 0xe)), status != 0)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output + 3) = result | *(ushort *)(output + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 2;\n  }\n  *output = (int)output + 0x47;\n  output[4] = (int)output + 0x47;\n  output[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result",
                "iVar2": "status",
                "local_18": "temp1",
                "local_14": "temp2"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "apply_relocations_00005780",
            "code": "\nvoid applyRelocations_00005780(undefined4 offset)\n\n{\n  FUN_00004b34(relocationArray[16].r_offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "apply_relocations_00005780",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_memory_0000579c",
            "code": "\nvoid initializeMemory_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_memory_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_array_and_return_element_000057a8",
            "code": "\nint updateArrayAndReturnElement_000057a8(undefined4 param1,int param2,undefined4 *array)\n\n{\n  int size;\n  undefined *currentElement;\n  \n  size = array[2] + -1;\n  array[2] = size;\n  if ((size < 0) && ((size < (int)array[6] || (param2 == 10)))) {\n    size = FUN_00005404();\n    return size;\n  }\n  currentElement = (undefined *)*array;\n  *array = currentElement + 1;\n  *currentElement = (char)param2;\n  return param2;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_array_and_return_element_000057a8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "array",
                "iVar1": "size",
                "puVar2": "currentElement"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint processData_000057d2(undefined4 arg1,undefined4 arg2,undefined *data,int dataLength)\n\n{\n  int result;\n  undefined *endOfData;\n  int currentLength;\n  \n  endOfData = data + dataLength;\n  currentLength = dataLength;\n  do {\n    if (data == endOfData) {\n      return 0;\n    }\n    result = FUN_000057a8(arg1,*data,arg2,dataLength,currentLength);\n    dataLength = result + 1;\n    data = data + 1;\n  } while (dataLength != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "dataLength",
                "iVar1": "result",
                "puVar2": "endOfData",
                "iVar3": "currentLength"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_and_process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parseAndProcessData_000057f8(int dataStruct,undefined4 *paramPtr,byte *dataBuffer,int *resultPtr)\n\n{\n  int index;\n  int returnValue;\n  int *ptrVariable;\n  bool boolVariable;\n  byte *bufferPtr;\n  int unaff_r7;\n  byte *currentPtr;\n  int *localPtr;\n  uint flagVar;\n  int intVariable;\n  undefined4 tempVar;\n  int tempVariable;\n  int lengthVar;\n  byte charVariable;\n  undefined charVar1;\n  undefined charVar2;\n  undefined charVar3;\n  undefined4 tempVariable2;\n  \n  if ((dataStruct != 0) && (*(int *)(dataStruct + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (paramPtr == &DAT_000079b8) {\n    paramPtr = *(undefined4 **)(dataStruct + 4);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_000079d8) {\n    paramPtr = *(undefined4 **)(dataStruct + 8);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_00007998) {\n    paramPtr = *(undefined4 **)(dataStruct + 0xc);\n  }\n  if ((-1 < (int)(paramPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16))) {\n    FUNC_000045e8(paramPtr[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x1c)) || (paramPtr[4] == 0)) &&\n     (index = FUN_000054a8(dataStruct,paramPtr), index != 0)) {\n    if ((-1 < (int)(paramPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16)))\n    {\n      FUNC_000045ec(paramPtr[0x16]);\n    }\n    return -1;\n  }\n  lengthVar = 0;\n  charVar1 = 0x20;\n  charVar2 = 0x30;\n  currentPtr = dataBuffer;\n  localPtr = resultPtr;\nLAB_0000588e:\n  bufferPtr = currentPtr;\n  if (*bufferPtr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentPtr = bufferPtr + 1;\n  if (*bufferPtr == 0x25) {\nLAB_0000589a:\n    index = (int)bufferPtr - (int)dataBuffer;\n    if (index != 0) {\n      returnValue = FUN_000057d2(dataStruct,paramPtr,dataBuffer,index);\n      if (returnValue == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(paramPtr[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16))) {\n          FUNC_000045ec(paramPtr[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(paramPtr + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return lengthVar;\n      }\n      lengthVar = lengthVar + index;\n    }\n    if (*bufferPtr == 0) goto LAB_00005a06;\n    intVariable = -1;\n    tempVar = 0;\n    flagVar = 0;\n    tempVariable = 0;\n    charVar3 = 0;\n    tempVariable2 = 0;\n    currentPtr = bufferPtr + 1;\n    while( true ) {\n      bufferPtr = currentPtr + 1;\n      index = FUN_00006010(\"#-0+ \",*currentPtr,5);\n      if (index == 0) break;\n      flagVar = 1 << (index - 0x7bfcU & 0xff) | flagVar;\n      currentPtr = bufferPtr;\n    }\n    if ((int)(flagVar << 0x1b) < 0) {\n      charVar3 = 0x20;\n    }\n    if ((int)(flagVar << 0x1c) < 0) {\n      charVar3 = 0x2b;\n    }\n    if (*currentPtr == 0x2a) {\n      ptrVariable = localPtr + 1;\n      tempVariable = *localPtr;\n      localPtr = ptrVariable;\n      if (tempVariable < 0) {\n        tempVariable = -tempVariable;\n        flagVar = flagVar | 2;\n      }\n    }\n    else {\n      boolVariable = false;\n      index = tempVariable;\n      bufferPtr = currentPtr;\n      while( true ) {\n        if (9 < *bufferPtr - 0x30) break;\n        index = index * 10 + (*bufferPtr - 0x30);\n        boolVariable = true;\n        bufferPtr = bufferPtr + 1;\n      }\n      if (boolVariable) {\n        tempVariable = index;\n      }\n    }\n    if (*bufferPtr == 0x2e) {\n      if (bufferPtr[1] == 0x2a) {\n        intVariable = *localPtr;\n        if (intVariable < 0) {\n          intVariable = -1;\n        }\n        bufferPtr = bufferPtr + 2;\n        localPtr = localPtr + 1;\n      }\n      else {\n        boolVariable = false;\n        intVariable = 0;\n        index = 0;\n        while( true ) {\n          bufferPtr = bufferPtr + 1;\n          if (9 < *bufferPtr - 0x30) break;\n          index = index * 10 + (*bufferPtr - 0x30);\n          boolVariable = true;\n        }\n        if (boolVariable) {\n          intVariable = index;\n        }\n      }\n    }\n    index = FUN_00006010(&DAT_00007c02,*bufferPtr,3);\n    if (index != 0) {\n      flagVar = flagVar | 0x40 << (index - 0x7c02U & 0xff);\n      bufferPtr = bufferPtr + 1;\n    }\n    dataBuffer = bufferPtr + 1;\n    charVariable = *bufferPtr;\n    index = FUN_00006010(\"efgEFG\",charVariable,6);\n    if (index == 0) {\n      unaff_r7 = FUN_00005b34(dataStruct,&flagVar,paramPtr,0x57d3,&localPtr);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      localPtr = (int *)(((int)localPtr + 7U & 0xfffffff8) + 8);\n    }\n    lengthVar = lengthVar + unaff_r7;\n    currentPtr = dataBuffer;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_and_process_data_000057f8",
                "param_1": "dataStruct",
                "param_2": "paramPtr",
                "param_3": "dataBuffer",
                "param_4": "resultPtr",
                "iVar1": "index",
                "iVar2": "returnValue",
                "piVar3": "ptrVariable",
                "bVar4": "boolVariable",
                "pbVar5": "bufferPtr",
                "pbVar6": "currentPtr",
                "local_8c": "localPtr",
                "local_88": "flagVar",
                "local_84": "intVariable",
                "uStack_80": "tempVar",
                "local_7c": "tempVariable",
                "local_74": "lengthVar",
                "local_70": "charVariable",
                "local_6f": "charVar1",
                "local_6e": "charVar2",
                "local_45": "charVar3",
                "local_30": "tempVariable2"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_string_length_00005a58",
            "code": "\nundefined4\ncalculateStringLength_00005a58(undefined4 input,uint *data,uint *output,undefined4 param_A,code *callback)\n\n{\n  int index;\n  undefined4 result;\n  int tempVar;\n  uint maxStringLength;\n  uint increment;\n  bool isConditionMet;\n  \n  maxStringLength = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxStringLength = data[2];\n  }\n  *output = maxStringLength;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxStringLength + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      tempVar = (*callback)(input,param_A,(int)data + 0x19,1);\n      if (tempVar == -1) goto LAB_00005afc;\n    }\n  }\n  maxStringLength = (uint)*(byte *)((int)data + 0x43);\n  if (maxStringLength != 0) {\n    maxStringLength = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxStringLength + 0x43) = 0x30;\n    *(undefined *)((int)data + maxStringLength + 0x44) = *(undefined *)((int)data + 0x45);\n    maxStringLength = maxStringLength + 2;\n  }\n  index = (*callback)(input,param_A,(int)data + 0x43,maxStringLength);\n  if (index == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    maxStringLength = data[3];\n    isConditionMet = (*data & 6) == 4;\n    if (isConditionMet) {\n      maxStringLength = maxStringLength - *output;\n    }\n    if (isConditionMet) {\n      maxStringLength = maxStringLength & ~((int)maxStringLength >> 0x1f);\n    }\n    else {\n      maxStringLength = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxStringLength = maxStringLength + (data[2] - data[4]);\n    }\n    for (increment = 0; maxStringLength != increment; increment = increment + 1) {\n      index = (*callback)(input,param_A,(int)data + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_string_length_00005a58",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param_A",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "result",
                "iVar3": "tempVar",
                "uVar4": "maxStringLength",
                "uVar5": "increment",
                "bVar6": "isConditionMet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_number_00005b34",
            "code": "\ncode * formatNumber_00005b34(undefined4 value,uint *numberBuffer,undefined4 option,code *printHandler,uint **input\n                   )\n\n{\n  bool isGreater;\n  byte byteValue;\n  int result;\n  code *output;\n  char *digits;\n  int readResult;\n  char *ptr;\n  uint quotient;\n  uint *dataPointer;\n  uint base;\n  uint **doublePointer;\n  char **stringDoublePointer;\n  uint length;\n  char *i;\n  code *endPointer;\n  \n  byteValue = *(byte *)(numberBuffer + 6);\n  ptr = (char *)((int)numberBuffer + 0x43);\n  endPointer = printHandler;\n  if (0x78 < byteValue) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)numberBuffer + 0x42) = byteValue;\nLAB_00005bdc:\n    ptr = (char *)((int)numberBuffer + 0x42);\n    quotient = 1;\nLAB_00005d28:\n    numberBuffer[4] = quotient;\n    *(undefined *)((int)numberBuffer + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteValue < 99) {\n    if (byteValue == 0) goto LAB_00005d06;\n    if (byteValue == 0x58) {\n      digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)numberBuffer + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteValue) {\n  case 99:\n    quotient = **input;\n    *input = *input + 1;\n    *(char *)((int)numberBuffer + 0x42) = (char)quotient;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *numberBuffer;\n    dataPointer = *input;\n    if ((int)(base << 0x18) < 0) {\n      quotient = *dataPointer;\n      *input = dataPointer + 1;\n    }\n    else {\n      quotient = *dataPointer;\n      *input = dataPointer + 1;\n      if ((base & 0x40) != 0) {\n        quotient = (uint)(short)quotient;\n      }\n    }\n    if ((int)quotient < 0) {\n      quotient = -quotient;\n      *(undefined *)((int)numberBuffer + 0x43) = 0x2d;\n    }\n    digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    doublePointer = (uint **)*input;\n    base = *numberBuffer;\n    quotient = numberBuffer[5];\n    *input = (uint *)(doublePointer + 1);\n    dataPointer = *doublePointer;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *dataPointer = quotient;\n    }\n    else {\n      *(short *)dataPointer = (short)quotient;\n    }\nLAB_00005d06:\n    numberBuffer[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    dataPointer = *input;\n    quotient = *numberBuffer;\n    *input = dataPointer + 1;\n    if (((int)(quotient << 0x18) < 0) || (-1 < (int)(quotient << 0x19))) {\n      quotient = *dataPointer;\n    }\n    else {\n      quotient = (uint)*(ushort *)dataPointer;\n    }\n    digits = \"0123456789ABCDEF\";\n    if (byteValue == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *numberBuffer = *numberBuffer | 0x20;\n  case 0x78:\n    digits = \"0123456789abcdef\";\n    *(undefined *)((int)numberBuffer + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *numberBuffer;\n    quotient = **input;\n    *input = *input + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      quotient = quotient & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *numberBuffer = base | 0x20;\n    }\n    if (quotient == 0) {\n      *numberBuffer = *numberBuffer & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    stringDoublePointer = (char **)*input;\n    *input = (uint *)(stringDoublePointer + 1);\n    ptr = *stringDoublePointer;\n    result = FUN_00006010(ptr,0,numberBuffer[1],stringDoublePointer,value,numberBuffer,option);\n    if (result != 0) {\n      numberBuffer[1] = result - (int)ptr;\n    }\n    quotient = numberBuffer[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)numberBuffer + 0x43) = 0;\nLAB_00005c36:\n  length = numberBuffer[1];\n  numberBuffer[2] = length;\n  if (-1 < (int)length) {\n    *numberBuffer = *numberBuffer & 0xfffffffb;\n  }\n  i = ptr;\n  if ((quotient != 0) || (length != 0)) {\n    do {\n      i = i + -1;\n      *i = digits[quotient - base * (quotient / base)];\n      isGreater = base <= quotient;\n      quotient = quotient / base;\n    } while (isGreater);\n  }\n  if (((base == 8) && ((int)(*numberBuffer << 0x1f) < 0)) && ((int)numberBuffer[1] <= (int)numberBuffer[4])) {\n    i[-1] = '0';\n    i = i + -1;\n  }\n  numberBuffer[4] = (int)ptr - (int)i;\n  ptr = i;\nLAB_00005c84:\n  result = FUN_00005a58(value,numberBuffer,&endPointer,option,printHandler);\n  if ((result == -1) || (result = (*printHandler)(value,option,ptr,numberBuffer[4]), result == -1)) {\nLAB_00005c98:\n    output = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*numberBuffer << 0x1e) < 0) {\n      for (result = 0; result < (int)(numberBuffer[3] - (int)endPointer); result = result + 1) {\n        readResult = (*printHandler)(value,option,(int)numberBuffer + 0x19,1);\n        if (readResult == -1) goto LAB_00005c98;\n      }\n    }\n    output = (code *)numberBuffer[3];\n    if ((int)(code *)numberBuffer[3] < (int)endPointer) {\n      output = endPointer;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_number_00005b34",
                "param_1": "value",
                "param_2": "numberBuffer",
                "param_3": "option",
                "param_4": "printHandler",
                "param_5": "input",
                "bVar1": "isGreater",
                "bVar2": "byteValue",
                "iVar3": "result",
                "pcVar4": "output",
                "pcVar5": "digits",
                "iVar6": "readResult",
                "pcVar7": "ptr",
                "uVar8": "quotient",
                "puVar9": "dataPointer",
                "uVar10": "base",
                "uVar13": "length",
                "pcVar14": "i",
                "local_24": "endPointer",
                "ppuVar11": "doublePointer",
                "ppcVar12": "stringDoublePointer"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "decode_and_decrement_byte_00005e10",
            "code": "\nuint decode_and_decrement_byte_00005e10(int input_data,byte **byte_pointer)\n\n{\n  int result;\n  uint decoded_value;\n  byte *current_byte;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (byte_pointer == (byte **)&DAT_000079b8) {\n    byte_pointer = *(byte ***)(input_data + 4);\n  }\n  else if (byte_pointer == (byte **)&DAT_000079d8) {\n    byte_pointer = *(byte ***)(input_data + 8);\n  }\n  else if (byte_pointer == (byte **)&DAT_00007998) {\n    byte_pointer = *(byte ***)(input_data + 0xc);\n  }\n  result = FUN_00006768(input_data,byte_pointer);\n  if (result == 0) {\n    byte_pointer[1] = byte_pointer[1] + -1;\n    current_byte = *byte_pointer;\n    *byte_pointer = current_byte + 1;\n    decoded_value = (uint)*current_byte;\n  }\n  else {\n    decoded_value = 0xffffffff;\n  }\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "decode_and_decrement_byte_00005e10",
                "param_1": "input_data",
                "param_2": "byte_pointer",
                "iVar1": "result",
                "uVar2": "decoded_value",
                "pbVar3": "current_byte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_data_00005e68",
            "code": "\nvoid processData_00005e68(undefined4 data,undefined4 size,undefined4 offset,undefined4 value)\n\n{\n  undefined4 dataPtr;\n  undefined4 result;\n  undefined2 constant;\n  undefined2 flag;\n  undefined4 dataPtrCopy;\n  undefined4 resultCopy;\n  undefined *stringPtr;\n  undefined4 local_4c;\n  undefined4 local_38;\n  undefined4 offsetCopy;\n  undefined4 valueCopy;\n  \n  constant = 0x204;\n  dataPtr = data;\n  dataPtrCopy = data;\n  offsetCopy = offset;\n  valueCopy = value;\n  result = FUN_00005ecc();\n  stringPtr = &LAB_00004dea_1;\n  local_4c = 0;\n  local_38 = 0;\n  flag = 0xffff;\n  resultCopy = result;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&dataPtr,size,&offsetCopy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "data",
                "param_2": "size",
                "param_3": "offset",
                "param_4": "value",
                "local_80": "dataPtr",
                "local_7c": "result",
                "local_74": "constant",
                "local_72": "flag",
                "local_70": "dataPtrCopy",
                "local_6c": "resultCopy",
                "local_5c": "stringPtr",
                "uStack_8": "offsetCopy",
                "uStack_4": "valueCopy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copy_string_00005ebc(char *destination,char *source)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "count_characters_00005ecc",
            "code": "\nchar * countCharacters_00005ecc(char *inputString)\n\n{\n  char currentChar;\n  char *nextCharPtr;\n  char *currentCharPtr;\n  \n  currentCharPtr = inputString;\n  do {\n    nextCharPtr = currentCharPtr + 1;\n    currentChar = *currentCharPtr;\n    currentCharPtr = nextCharPtr;\n  } while (currentChar != '\\0');\n  return nextCharPtr + (-1 - (int)inputString);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "count_characters_00005ecc",
                "param_1": "inputString",
                "cVar1": "currentChar",
                "pcVar2": "nextCharPtr",
                "pcVar3": "currentCharPtr"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *output,byte *input,byte **remaining,uint base)\n\n{\n  uint result;\n  uint currentDigit;\n  byte negative;\n  int status;\n  uint digitValue;\n  uint maxQuotient;\n  byte *p;\n  byte *q;\n  \n  q = input;\n  do {\n    p = q;\n    q = p + 1;\n    currentDigit = (uint)*p;\n    negative = (&DAT_00007a99)[currentDigit] & 8;\n  } while (((&DAT_00007a99)[currentDigit] & 8) != 0);\n  if (currentDigit == 0x2d) {\n    currentDigit = (uint)*q;\n    negative = 1;\n    q = p + 2;\n  }\n  else if (currentDigit == 0x2b) {\n    currentDigit = (uint)*q;\n    q = p + 2;\n  }\n  if (base == 0) {\n    if (currentDigit != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentDigit != 0x30)) goto LAB_00005f26;\n  if ((*q & 0xdf) == 0x58) {\n    currentDigit = (uint)q[1];\n    base = 0x10;\n    q = q + 2;\n  }\n  else {\n    currentDigit = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxQuotient = 0xffffffff / base;\n  result = 0;\n  do {\n    digitValue = currentDigit - 0x30;\n    if (9 < digitValue) {\n      if (currentDigit - 0x41 < 0x1a) {\n        digitValue = currentDigit - 0x37;\n      }\n      else {\n        if (0x19 < currentDigit - 0x61) break;\n        digitValue = currentDigit - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((status < 0) || (maxQuotient < result)) ||\n       ((maxQuotient == result && ((int)~(base * maxQuotient) < (int)digitValue)))) {\n      status = -1;\n    }\n    else {\n      result = result * base + digitValue;\n      status = 1;\n    }\n    currentDigit = (uint)*q;\n    q = q + 1;\n  } while( true );\n  if (status < 0) {\n    *output = 0x22;\n    result = 0xffffffff;\n    if (remaining == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      result = -result;\n    }\n    if (remaining == (byte **)0x0) {\n      return result;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = q + -1;\nLAB_00005fb8:\n  *remaining = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "remaining",
                "param_4": "base",
                "uVar1": "result",
                "uVar2": "currentDigit",
                "bVar3": "negative",
                "iVar4": "status",
                "uVar5": "digitValue",
                "uVar6": "maxQuotient",
                "pbVar7": "p",
                "pbVar8": "q"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "execute_relocation_00005fd8",
            "code": "\nvoid executeRelocation_00005fd8(undefined4 offset,undefined4 param2,undefined4 param3)\n\n{\n  FUN_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset,param2,param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "execute_relocation_00005fd8",
                "param_1": "offset",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_system_00005fec",
            "code": "\nvoid initializeSystem_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_system_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_data_00005ff8",
            "code": "\nvoid initializeData_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_data_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "decompress_data_00006010",
            "code": "\nbyte * decompress_data_00006010(uint *data,uint search_byte,uint data_length)\n\n{\n  byte current_byte;\n  char has_byte1;\n  char has_byte2;\n  char has_byte3;\n  char has_byte4;\n  byte *result;\n  uint *current_data;\n  byte *last_match;\n  uint offset;\n  uint aligned_length;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool has_match_byte1;\n  bool has_match_byte2;\n  bool has_match_byte3;\n  bool has_match_byte4;\n  \n  search_byte = search_byte & 0xff;\n  if ((int)data_length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n      current_data = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      data_length = data_length - 1;\n      data = current_data;\n    } while (current_byte != search_byte);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = search_byte | search_byte << 8;\n        offset = offset | offset << 0x10;\n        aligned_length = data_length & 0xfffffff8;\n        do {\n          current_data = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result_1 = *data ^ offset;\n          xor_result_2 = data[1] ^ offset;\n          has_byte1 = -((char)xor_result_1 == '\\0');\n          has_byte2 = -((char)(xor_result_1 >> 8) == '\\0');\n          has_byte3 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          has_byte4 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(has_byte4,CONCAT12(has_byte3,CONCAT11(has_byte2,has_byte1)));\n          has_match_byte1 = (char)xor_result_2 != '\\0';\n          has_match_byte2 = (char)(xor_result_2 >> 8) != '\\0';\n          has_match_byte3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          has_match_byte4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(has_match_byte4 * has_byte4 - !has_match_byte4,\n                            CONCAT12(has_match_byte3 * has_byte3 - !has_match_byte3,\n                                     CONCAT11(has_match_byte2 * has_byte2 - !has_match_byte2,has_match_byte1 * has_byte1 - !has_match_byte1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              last_match = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              last_match = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              has_match_byte1 = (xor_result_1 & 0x100) == 0;\n              result = last_match + 1;\n              if (has_match_byte1) {\n                has_match_byte1 = (xor_result_1 & 0x18000) == 0;\n                result = last_match + 2;\n              }\n              last_match = result;\n              if (has_match_byte1) {\n                last_match = last_match + 1;\n              }\n            }\n            return last_match + -1;\n          }\n          data = current_data;\n        } while (aligned_length != 0);\n        data_length = data_length & 7;\n        goto joined_r0x00006070;\n      }\n      current_data = (uint *)((int)data + 1);\n      data_length = data_length - 1;\n      if (*(byte *)data == search_byte) break;\n      offset = (uint)current_data & 7;\n      data = current_data;\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_data + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "decompress_data_00006010",
                "param_1": "data",
                "param_2": "search_byte",
                "param_3": "data_length",
                "bVar1": "current_byte",
                "cVar2": "has_byte1",
                "cVar3": "has_byte2",
                "cVar4": "has_byte3",
                "cVar5": "has_byte4",
                "pbVar6": "result",
                "puVar7": "current_data",
                "pbVar8": "last_match",
                "uVar9": "offset",
                "uVar10": "aligned_length",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "has_match_byte1",
                "bVar14": "has_match_byte2",
                "bVar15": "has_match_byte3",
                "bVar16": "has_match_byte4"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_elements_000060b0",
            "code": "\nvoid copyArrayElements_000060b0(int destinationArrayIndex,undefined *sourceArray,int arrayLength)\n\n{\n  undefined *sourceElement;\n  undefined *sourceEnd;\n  undefined *destinationElement;\n  \n  sourceEnd = sourceArray + arrayLength;\n  destinationElement = (undefined *)(destinationArrayIndex + -1);\n  if (sourceArray != sourceEnd) {\n    do {\n      sourceElement = sourceArray + 1;\n      destinationElement = destinationElement + 1;\n      *destinationElement = *sourceArray;\n      sourceArray = sourceElement;\n    } while (sourceElement != sourceEnd);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_elements_000060b0",
                "param_1": "destinationArrayIndex",
                "param_2": "sourceArray",
                "param_3": "arrayLength",
                "puVar1": "sourceElement",
                "puVar2": "sourceEnd",
                "puVar3": "destinationElement"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "verify_and_process_data_000060cc",
            "code": "\nint verifyAndProcessData_000060cc(undefined4 data,int size,uint threshold,undefined4 config)\n\n{\n  int result;\n  uint dataSize;\n  \n  if (size != 0) {\n    if (threshold == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      dataSize = FUN_00006964();\n      result = size;\n      if ((dataSize < threshold) && (result = FUN_00004bd0(data,threshold), result != 0)) {\n        FUN_000060b0(result,size,threshold);\n        FUN_00004b34(data,size);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(data,threshold,threshold,config);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "verify_and_process_data_000060cc",
                "param_1": "data",
                "param_2": "size",
                "param_3": "threshold",
                "param_4": "config",
                "iVar1": "result",
                "uVar2": "dataSize"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "process_data_00006192",
            "code": "\nundefined4 processData_00006192(undefined4 inputFlag,undefined4 *dataPtr)\n\n{\n  if ((undefined4 *)ptrA != (undefined4 *)0x0) {\n    if ((undefined4 *)ptrA != dataPtr + 0x11) {\n      FUN_00004b34();\n    }\n    output1 = output2;\n    ptrA = 0;\n    if (output2 != 0) {\n      *dataPtr = output4;\n      return 0;\n    }\n  }\n  *dataPtr = dataPtr[4];\n  output1 = 0;\n  *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "process_data_00006192",
                "param_1": "inputFlag",
                "param_2": "dataPtr",
                "param_2[0xd]": "ptrA",
                "param_2[1]": "output1",
                "param_2[0x10]": "output2",
                "param_2[0xf]": "output4"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseData_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint temp;\n  byte *nextByte;\n  uint byteValue;\n  int **outputPtr;\n  undefined auStack_2ac [256];\n  uint local_1ac;\n  undefined4 local_1a8;\n  uint local_1a4;\n  int totalCount;\n  int count;\n  undefined *stackArray;\n  int type;\n  undefined *functionPointer;\n  code *callback;\n  \n  totalCount = 0;\n  count = 0;\n  functionPointer = &LAB_00006118_1;\n  callback = FUN_00006192 + 1;\n  outputPtr = param4;\n  stackArray = auStack_2ac;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      byteValue = (uint)*param3;\n      if (byteValue == 0) {\n        return totalCount;\n      }\n      temp = (byte)(&DAT_00007a99)[byteValue] & 8;\n      nextByte = param3 + 1;\n      if (((&DAT_00007a99)[byteValue] & 8) == 0) break;\n      while (((param3 = nextByte, 0 < (int)param2[1] ||\n              (result = (*callback)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        count = count + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (byteValue == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*callback)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != byteValue) {\n      return totalCount;\n    }\n    *param2 = *param2 + 1;\n    count = count + 1;\n    param2[1] = param2[1] + -1;\n    param3 = nextByte;\n  }\n  local_1a4 = temp;\n  local_1ac = temp;\n  if (param3[1] == 0x2a) {\n    nextByte = param3 + 2;\n    local_1ac = 0x10;\n  }\n  while( true ) {\n    temp = (uint)*nextByte;\n    if (9 < temp - 0x30) break;\n    nextByte = nextByte + 1;\n    local_1a4 = (local_1a4 * 10 + temp) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,temp,3);\n  if (result != 0) {\n    local_1ac = 1 << (result - 0x7c02U & 0xff) | local_1ac;\n    nextByte = nextByte + 1;\n  }\n  param3 = nextByte + 1;\n  temp = (uint)*nextByte;\n  if (temp < 0x79) {\n    if (0x57 < temp) {\n      switch(temp) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)FUN_0000687c(auStack_2ac,param3);\n        local_1ac = local_1ac | 0x40;\n        type = 1;\n        break;\n      case 99:\n        local_1ac = local_1ac | 0x40;\n        type = 0;\n        break;\n      case 100:\n      case 0x75:\n        local_1a8 = 10;\nLAB_000063a0:\n        if (temp < 0x6f) {\n          type = 3;\n        }\n        else {\n          type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        type = 5;\n        break;\n      case 0x69:\n        local_1a8 = 0;\n        type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(local_1ac << 0x1b)) {\n          if ((int)(local_1ac << 0x1f) < 0) {\n            *(short *)*outputPtr = (short)count;\n            outputPtr = outputPtr + 1;\n          }\n          else {\n            **outputPtr = count;\n            outputPtr = outputPtr + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        local_1a8 = 8;\n        type = 4;\n        break;\n      case 0x70:\n        local_1ac = local_1ac | 0x20;\n      case 0x58:\n      case 0x78:\n        local_1ac = local_1ac | 0x200;\n        local_1a8 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*callback)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(local_1ac << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          count = count + 1;\n          nextByte = param2[1];\n          param2[1] = nextByte + -1;\n          if ((int)(nextByte + -1) < 1) {\n            result = (*callback)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (type < 3) {\n        result = FUN_000064bc(param1,&local_1ac,param2,&outputPtr);\n      }\n      else {\n        if (4 < type) goto LAB_000061f6;\n        result = FUN_0000656c(param1,&local_1ac,param2,&outputPtr);\n      }\n      if (result == 1) {\n        return totalCount;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (totalCount == 0) {\nLAB_00006388:\n          totalCount = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          totalCount = -1;\n        }\n        return totalCount;\n      }\n      goto LAB_000061f6;\n    }\n    nextByte = param3;\n    if (temp == 0x25) goto LAB_00006352;\n    if (temp < 0x26) {\n      if (temp != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (temp - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  type = 3;\n  local_1a8 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "temp",
                "pbVar3": "nextByte",
                "uVar4": "byteValue",
                "local_1a0": "totalCount",
                "local_19c": "count",
                "local_30": "functionPointer",
                "local_2c": "callback",
                "local_2b0": "outputPtr",
                "local_198": "stackArray",
                "local_194": "type"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 status,uint *params,byte **data,undefined4 *result)\n\n{\n  int returnValue;\n  uint value;\n  byte **ptrToData;\n  byte *ptr1;\n  byte *ptr2;\n  byte *ptr3;\n  int counter;\n  \n  if (params[2] == 0) {\n    if (params[6] == 0) {\n      value = 1;\n    }\n    else {\n      value = 0xffffffff;\n    }\n    params[2] = value;\n  }\n  if (-1 < (int)(*params << 0x1b)) {\n    ptrToData = (byte **)*result;\n    *result = ptrToData + 1;\n    ptr2 = *ptrToData;\n  }\n  counter = 0;\n  do {\n    value = params[6];\n    if (value != 0) {\n      if (value == 1) {\n        if (*(char *)(params[5] + (uint)**data) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*params & 0x10) == 0) && (params[3] = params[3] + 1, params[6] != 0)) {\n            *ptr2 = 0;\n          }\n          params[4] = counter + params[4];\n          return 0;\n        }\n      }\n      else if ((value != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    ptr3 = ptr2;\n    if (-1 < (int)(*params << 0x1b)) {\n      ptr3 = ptr2 + 1;\n      *ptr2 = **data;\n    }\n    ptr1 = data[1];\n    *data = *data + 1;\n    value = params[2] - 1;\n    data[1] = ptr1 + -1;\n    counter = counter + 1;\n    params[2] = value;\n    ptr2 = ptr3;\n    if ((value == 0) ||\n       (((int)(ptr1 + -1) < 1 &&\n        (returnValue = (*(code *)params[0x60])(status,data,value,(code *)params[0x60],result),\n        returnValue != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "status",
                "param_2": "params",
                "param_3": "data",
                "param_4": "result",
                "iVar1": "returnValue",
                "iVar6": "counter",
                "uVar2": "value",
                "ppbVar3": "ptrToData",
                "pbVar4": "ptr1",
                "unaff_r6": "ptr2",
                "pbVar5": "ptr3"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "data_transfer_function_0000656c",
            "code": "\nundefined4 dataTransferFunction_0000656c(undefined4 inputParameter,uint *outputParameter,byte **bufferPointer,undefined4 *outputPointer)\n\n{\n  int result;\n  undefined4 returnValue;\n  code *functionPointer;\n  uint tempVariable1;\n  byte *bytePointer;\n  uint tempVariable2;\n  undefined4 *pointerVariable1;\n  uint *pointerVariable2;\n  uint *pointerVariable3;\n  uint *pointerVariable4;\n  int unusedVariable;\n  int loopCounter;\n  undefined *localArray [4];\n  \n  localArray[0] = &DAT_00007c2f;\n  localArray[1] = &DAT_00007c32;\n  localArray[2] = &DAT_00007c35;\n  functionPointer = (code *)&UNK_00004f81;\n  if (outputParameter[6] != 3) {\n    functionPointer = (code *)&UNK_00005fd5;\n  }\n  tempVariable2 = outputParameter[2];\n  tempVariable1 = tempVariable2 - 1;\n  if (0x15c < tempVariable1) {\n    unusedVariable = tempVariable2 - 0x15d;\n    tempVariable2 = 0x15d;\n  }\n  if (0x15c < tempVariable1) {\n    outputParameter[2] = tempVariable2;\n  }\n  pointerVariable4 = outputParameter + 7;\n  if (tempVariable1 < 0x15d) {\n    unusedVariable = 0;\n  }\n  *outputParameter = *outputParameter | 0xd00;\n  loopCounter = 0;\n  pointerVariable3 = pointerVariable4;\n  do {\n    result = FUN_00006010(localArray[loopCounter],**bufferPointer,2);\n    if (result != 0) {\n      if (loopCounter == 1) {\n        if (outputParameter[1] == 0) {\n          outputParameter[1] = 8;\n          *outputParameter = *outputParameter | 0x200;\n        }\n        tempVariable1 = *outputParameter & 0xfffffaff;\nLAB_000065f4:\n        *outputParameter = tempVariable1;\n      }\n      else if (loopCounter == 2) {\n        if ((*outputParameter & 0x600) != 0x200) goto LAB_00006624;\n        outputParameter[1] = 0x10;\n        tempVariable1 = *outputParameter | 0x100;\n        goto LAB_000065f4;\n      }\n      tempVariable1 = outputParameter[2];\n      outputParameter[2] = tempVariable1 - 1;\n      if (tempVariable1 != 0) {\n        bytePointer = *bufferPointer;\n        *bufferPointer = bytePointer + 1;\n        pointerVariable2 = (uint *)((int)pointerVariable3 + 1);\n        *(byte *)pointerVariable3 = *bytePointer;\n        bytePointer = bufferPointer[1];\n        bufferPointer[1] = bytePointer + -1;\n        pointerVariable3 = pointerVariable2;\n        if (((int)(bytePointer + -1) < 1) &&\n           (result = (*(code *)outputParameter[0x60])(inputParameter,bufferPointer), result != 0)) {\n          loopCounter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loopCounter = loopCounter + 1;\n  } while (loopCounter != 3);\n  if (outputParameter[1] == 0) {\n    outputParameter[1] = 10;\n  }\n  FUN_0000687c(outputParameter[5],\"01234567]\" + (8 - outputParameter[1]));\n  loopCounter = 0;\n  while( true ) {\n    pointerVariable2 = pointerVariable3;\n    if (outputParameter[2] == 0) break;\n    bytePointer = *bufferPointer;\n    tempVariable1 = (uint)*bytePointer;\n    if (*(char *)(outputParameter[5] + tempVariable1) == '\\0') break;\n    if ((tempVariable1 == 0x30) && ((int)(*outputParameter << 0x14) < 0)) {\n      loopCounter = loopCounter + 1;\n      if (unusedVariable != 0) {\n        unusedVariable = unusedVariable + -1;\n        outputParameter[2] = outputParameter[2] + 1;\n      }\n    }\n    else {\n      *outputParameter = *outputParameter & 0xfffff6ff;\n      pointerVariable2 = (uint *)((int)pointerVariable3 + 1);\n      *(byte *)pointerVariable3 = *bytePointer;\n    }\n    bytePointer = bufferPointer[1];\n    bufferPointer[1] = bytePointer + -1;\n    if ((int)(bytePointer + -1) < 1) {\n      result = (*(code *)outputParameter[0x60])(inputParameter,bufferPointer);\n      if (result != 0) break;\n    }\n    else {\n      *bufferPointer = *bufferPointer + 1;\n    }\n    outputParameter[2] = outputParameter[2] - 1;\n    pointerVariable3 = pointerVariable2;\n  }\nLAB_000066ca:\n  if ((int)(*outputParameter << 0x17) < 0) {\n    if (pointerVariable4 < pointerVariable2) {\n      (*(code *)outputParameter[0x5f])(inputParameter,*(byte *)((int)pointerVariable2 + -1),bufferPointer);\n      pointerVariable2 = (uint *)((int)pointerVariable2 + -1);\n    }\n    if (pointerVariable2 == pointerVariable4) {\n      return 1;\n    }\n  }\n  if ((*outputParameter & 0x10) == 0) {\n    *(byte *)pointerVariable2 = 0;\n    returnValue = (*functionPointer)(inputParameter,pointerVariable4,0,outputParameter[1]);\n    pointerVariable1 = (undefined4 *)*outputPointer;\n    tempVariable1 = *outputParameter;\n    *outputPointer = pointerVariable1 + 1;\n    pointerVariable1 = (undefined4 *)*pointerVariable1;\n    if ((tempVariable1 & 0x20) == 0) {\n      if ((int)(tempVariable1 << 0x1f) < 0) {\n        *(short *)pointerVariable1 = (short)returnValue;\n      }\n      else {\n        *pointerVariable1 = returnValue;\n      }\n    }\n    else {\n      *pointerVariable1 = returnValue;\n    }\n    outputParameter[3] = outputParameter[3] + 1;\n  }\n  outputParameter[4] = (uint)((int)pointerVariable2 + outputParameter[4] + (loopCounter - (int)pointerVariable4));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "data_transfer_function_0000656c",
                "param_1": "inputParameter",
                "param_2": "outputParameter",
                "param_3": "bufferPointer",
                "param_4": "outputPointer",
                "iVar1": "result",
                "uVar2": "returnValue",
                "pcVar3": "functionPointer",
                "uVar4": "tempVariable1",
                "pbVar5": "bytePointer",
                "uVar6": "tempVariable2",
                "puVar7": "pointerVariable1",
                "puVar8": "pointerVariable2",
                "puVar9": "pointerVariable3",
                "puVar10": "pointerVariable4",
                "unaff_r9": "unusedVariable",
                "iVar11": "loopCounter",
                "local_34": "localArray"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputBuffer,undefined4 *outputBuffer,undefined4 param1,undefined4 param2)\n\n{\n  undefined2 tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  ushort flags;\n  uint shiftedValue;\n  \n  if ((inputBuffer != (undefined4 *)0x0) && (inputBuffer[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (outputBuffer == &DAT_000079b8) {\n    outputBuffer = (undefined4 *)inputBuffer[1];\n  }\n  else if (outputBuffer == (undefined4 *)&DAT_000079d8) {\n    outputBuffer = (undefined4 *)inputBuffer[2];\n  }\n  else if (outputBuffer == (undefined4 *)&DAT_00007998) {\n    outputBuffer = (undefined4 *)inputBuffer[3];\n  }\n  flags = *(ushort *)(outputBuffer + 3);\n  outputBuffer[1] = 0;\n  shiftedValue = (uint)*(ushort *)(outputBuffer + 3);\n  if ((int)(shiftedValue << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(shiftedValue << 0x1d) < 0) {\n    if ((undefined4 *)outputBuffer[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)outputBuffer[0xd] != outputBuffer + 0x11) {\n        FUN_00004b34(inputBuffer);\n      }\n      outputBuffer[1] = outputBuffer[0x10];\n      outputBuffer[0xd] = 0;\n      if (outputBuffer[0x10] != 0) {\n        *outputBuffer = outputBuffer[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(shiftedValue << 0x1b)) {\n      *inputBuffer = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(shiftedValue << 0x1c) < 0) {\n      tempVar2 = FUN_00004158(inputBuffer,outputBuffer,shiftedValue << 0x1c,shiftedValue,param2);\n      if (tempVar2 != 0) {\n        return 0xffffffff;\n      }\n      outputBuffer[2] = 0;\n      *(ushort *)(outputBuffer + 3) = *(ushort *)(outputBuffer + 3) & 0xfff7;\n      outputBuffer[6] = 0;\n    }\n    *(ushort *)(outputBuffer + 3) = *(ushort *)(outputBuffer + 3) | 4;\n  }\n  if (outputBuffer[4] == 0) {\n    FUN_00005700(inputBuffer,outputBuffer);\n  }\n  flags = *(ushort *)(outputBuffer + 3);\n  tempVar1 = *(undefined2 *)(outputBuffer + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(outputBuffer + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(outputBuffer + 3) = tempVar1;\n    if ((flags & 9) == 9) {\n      FUN_0000404c(inputBuffer,outputBuffer);\n    }\n  }\n  tempVar3 = outputBuffer[4];\n  *outputBuffer = tempVar3;\n  tempVar2 = (*(code *)outputBuffer[9])(inputBuffer,outputBuffer[8],tempVar3,outputBuffer[5]);\n  outputBuffer[1] = tempVar2;\n  if (0 < tempVar2) {\n    return 0;\n  }\n  flags = *(ushort *)(outputBuffer + 3);\n  if (tempVar2 != 0) {\n    tempVar3 = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (tempVar2 != 0) {\n    outputBuffer[1] = tempVar3;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(outputBuffer + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputBuffer",
                "param_2": "outputBuffer",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "flags",
                "uVar5": "shiftedValue"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "process_input_0000687c",
            "code": "\nbyte * processInput_0000687c(int inputLength,byte *inputData)\n\n{\n  byte *resultPtr;\n  uint currentValue;\n  int counter;\n  uint currentByte;\n  uint startValue;\n  uint endValue;\n  bool isHatSymbol;\n  \n  currentByte = (uint)*inputData;\n  isHatSymbol = currentByte == 0x5e;\n  if (isHatSymbol) {\n    currentByte = (uint)inputData[1];\n    inputData = inputData + 2;\n  }\n  else {\n    inputData = inputData + 1;\n  }\n  counter = inputLength + -1;\n  do {\n    counter = counter + 1;\n    *(bool *)counter = isHatSymbol;\n  } while (counter != inputLength + 0xff);\n  if (currentByte == 0) {\n    resultPtr = inputData + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      startValue = currentByte;\n      *(bool *)(inputLength + startValue) = !isHatSymbol;\n      inputData = inputData + 1;\n      while( true ) {\n        currentByte = (uint)inputData[-1];\n        if (currentByte != 0x2d) break;\n        endValue = (uint)*inputData;\n        if ((endValue == 0x5d) || (currentValue = startValue, (int)endValue < (int)startValue)) goto LAB_000068aa;\n        do {\n          currentValue = currentValue + 1;\n          *(bool *)(inputLength + currentValue) = !isHatSymbol;\n        } while ((int)currentValue < (int)endValue);\n        counter = ~startValue + endValue;\n        if ((int)endValue <= (int)startValue) {\n          counter = 0;\n        }\n        startValue = startValue + 1 + counter;\n        inputData = inputData + 2;\n      }\n      resultPtr = inputData;\n    } while ((currentByte != 0x5d) && (resultPtr = inputData + -1, currentByte != 0));\n  }\n  return resultPtr;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "process_input_0000687c",
                "param_1": "inputLength",
                "param_2": "inputData",
                "pbVar1": "resultPtr",
                "uVar2": "currentValue",
                "iVar3": "counter",
                "uVar4": "currentByte",
                "uVar5": "startValue",
                "uVar6": "endValue",
                "bVar7": "isHatSymbol"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "update_data_structure_000068f0",
            "code": "\nundefined4 updateDataStructure_000068f0(undefined4 arg1,int *dataStructure)\n\n{\n  int newDataPtr;\n  int prevDataSize;\n  \n  if ((int *)dataStructure[0xd] == dataStructure + 0x11) {\n    newDataPtr = FUN_00004bd0(arg1,0x400);\n    if (newDataPtr != 0) {\n      dataStructure[0xe] = 0x400;\n      dataStructure[0xd] = newDataPtr;\n      *(undefined *)(newDataPtr + 0x3ff) = *(undefined *)((int)dataStructure + 0x46);\n      *(undefined *)(newDataPtr + 0x3fe) = *(undefined *)((int)dataStructure + 0x45);\n      *(undefined *)(newDataPtr + 0x3fd) = *(undefined *)(dataStructure + 0x11);\n      *dataStructure = newDataPtr + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    prevDataSize = dataStructure[0xe];\n    newDataPtr = FUN_000060cc(arg1,(int *)dataStructure[0xd],prevDataSize << 1);\n    if (newDataPtr != 0) {\n      FUN_000060b0(newDataPtr + prevDataSize,newDataPtr,prevDataSize);\n      dataStructure[0xd] = newDataPtr;\n      dataStructure[0xe] = prevDataSize << 1;\n      *dataStructure = newDataPtr + prevDataSize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "update_data_structure_000068f0",
                "param_1": "arg1",
                "param_2": "dataStructure",
                "iVar1": "newDataPtr",
                "iVar2": "prevDataSize"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 value1,int arrayIndex)\n\n{\n  int sumIndex;\n  \n  sumIndex = *(int *)(arrayIndex + -4) + -4;\n  if (*(int *)(arrayIndex + -4) < 0) {\n    sumIndex = sumIndex + *(int *)(arrayIndex + sumIndex);\n  }\n  return sumIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "value1",
                "param_2": "arrayIndex",
                "iVar1": "sumIndex"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "get_bounds_00006974",
            "code": "\nundefined8 getBounds_00006974(int value1,int value2,int lowerBound,int upperBound)\n\n{\n  int negValue2;\n  undefined8 result;\n  undefined temp [8];\n  \n  if ((upperBound == 0) && (lowerBound == 0)) {\n    if (value2 < 0) {\n      value1 = 0;\n      value2 = -0x80000000;\n    }\n    else if (value2 != 0 || value1 != 0) {\n      value2 = 0x7fffffff;\n      value1 = -1;\n    }\n    return CONCAT44(value2,value1);\n  }\n  if (value2 < 0) {\n    negValue2 = -value2 - (uint)(value1 != 0);\n    if (upperBound < 0) {\n      result = FUN_00006a14(-value1,negValue2,-lowerBound,-upperBound - (uint)(lowerBound != 0),temp);\n      return result;\n    }\n    result = FUN_00006a14(-value1,negValue2,lowerBound,upperBound,temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (upperBound < 0) {\n    result = FUN_00006a14(value1,value2,-lowerBound,-upperBound - (uint)(lowerBound != 0),temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "get_bounds_00006974",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "lowerBound",
                "param_4": "upperBound",
                "iVar1": "negValue2",
                "uVar2": "result",
                "local_8": "temp"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_with_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divideWithRemainder_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint quotient;\n  int shift;\n  uint temp1;\n  uint temp2;\n  uint result_low;\n  uint result_high;\n  uint mask;\n  uint quotient_low;\n  uint divisor_low;\n  bool carry;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift = LZCOUNT(divisor);\n      result_low = divisor;\n      if (shift != 0) {\n        result_low = divisor << shift;\n        dividend_high = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        dividend = dividend << shift;\n      }\n      result_high = result_low >> 0x10;\n      quotient_low = dividend_high / result_high;\n      temp1 = dividend >> 0x10 | (dividend_high - result_high * quotient_low) * 0x10000;\n      quotient = quotient_low * (result_low & 0xffff);\n      temp2 = quotient_low;\n      if (temp1 <= quotient && quotient - temp1 != 0) {\n        carry = CARRY4(result_low,temp1);\n        temp1 = result_low + temp1;\n        temp2 = quotient_low - 1;\n        if ((carry == false) && (temp1 <= quotient && quotient - temp1 != 0)) {\n          temp2 = quotient_low - 2;\n          temp1 = temp1 + result_low;\n        }\n      }\n      quotient_low = (temp1 - quotient) / result_high;\n      result_high = dividend & 0xffff | ((temp1 - quotient) - result_high * quotient_low) * 0x10000;\n      temp1 = quotient_low * (result_low & 0xffff);\n      quotient = quotient_low;\n      if (result_high <= temp1 && temp1 - result_high != 0) {\n        carry = CARRY4(result_low,result_high);\n        result_high = result_low + result_high;\n        quotient = quotient_low - 1;\n        if ((carry == false) && (result_high <= temp1 && temp1 - result_high != 0)) {\n          quotient = quotient_low - 2;\n          result_high = result_high + result_low;\n        }\n      }\n      result_high = result_high - temp1;\n      quotient = quotient | temp2 << 0x10;\n      result_low = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        result = (*UNRECOVERED_JUMPTABLE)();\n        return result;\n      }\n      shift = LZCOUNT(divisor);\n      if (shift == 0) {\n        dividend_high = dividend_high - divisor;\n        divisor_low = divisor >> 0x10;\n        mask = divisor & 0xffff;\n        result_low = 1;\n        temp2 = divisor;\n      }\n      else {\n        temp2 = divisor << shift;\n        divisor_low = temp2 >> 0x10;\n        quotient = dividend_high >> (0x20U - shift & 0xff);\n        result_low = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        temp1 = quotient / divisor_low;\n        mask = temp2 & 0xffff;\n        quotient_low = result_low >> 0x10 | (quotient - divisor_low * temp1) * 0x10000;\n        result_high = temp1 * mask;\n        dividend = dividend << shift;\n        quotient = temp1;\n        if (quotient_low <= result_high && result_high - quotient_low != 0) {\n          carry = CARRY4(temp2,quotient_low);\n          quotient_low = temp2 + quotient_low;\n          quotient = temp1 - 1;\n          if ((carry == false) && (quotient_low <= result_high && result_high - quotient_low != 0)) {\n            quotient = temp1 - 2;\n            quotient_low = quotient_low + temp2;\n          }\n        }\n        temp1 = (quotient_low - result_high) / divisor_low;\n        dividend_high = result_low & 0xffff | ((quotient_low - result_high) - divisor_low * temp1) * 0x10000;\n        result_high = temp1 * mask;\n        result_low = temp1;\n        if (dividend_high <= result_high && result_high - dividend_high != 0) {\n          carry = CARRY4(temp2,dividend_high);\n          dividend_high = temp2 + dividend_high;\n          result_low = temp1 - 1;\n          if ((carry == false) && (dividend_high <= result_high && result_high - dividend_high != 0)) {\n            result_low = temp1 - 2;\n            dividend_high = dividend_high + temp2;\n          }\n        }\n        dividend_high = dividend_high - result_high;\n        result_low = result_low | quotient << 0x10;\n      }\n      quotient_low = dividend_high / divisor_low;\n      result_high = dividend >> 0x10 | (dividend_high - divisor_low * quotient_low) * 0x10000;\n      quotient = mask * quotient_low;\n      temp1 = quotient_low;\n      if (result_high <= quotient && quotient - result_high != 0) {\n        carry = CARRY4(temp2,result_high);\n        result_high = temp2 + result_high;\n        temp1 = quotient_low - 1;\n        if ((carry == false) && (result_high <= quotient && quotient - result_high != 0)) {\n          temp1 = quotient_low - 2;\n          result_high = result_high + temp2;\n        }\n      }\n      quotient_low = (result_high - quotient) / divisor_low;\n      result_high = dividend & 0xffff | ((result_high - quotient) - divisor_low * quotient_low) * 0x10000;\n      mask = mask * quotient_low;\n      quotient = quotient_low;\n      if (result_high <= mask && mask - result_high != 0) {\n        carry = CARRY4(temp2,result_high);\n        result_high = temp2 + result_high;\n        quotient = quotient_low - 1;\n        if ((carry == false) && (result_high <= mask && mask - result_high != 0)) {\n          quotient = quotient_low - 2;\n          result_high = result_high + temp2;\n        }\n      }\n      result_high = result_high - mask;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = result_high >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    result_low = 0;\n  }\n  else {\n    shift = LZCOUNT(divisor_high);\n    if (shift != 0) {\n      mask = 0x20 - shift;\n      temp1 = divisor >> (mask & 0xff) | divisor_high << shift;\n      divisor_low = temp1 >> 0x10;\n      quotient = dividend_high >> (mask & 0xff);\n      result_low = dividend >> (mask & 0xff) | dividend_high << shift;\n      result_high = quotient / divisor_low;\n      temp2 = result_low >> 0x10 | (quotient - divisor_low * result_high) * 0x10000;\n      quotient_low = result_high * (temp1 & 0xffff);\n      dividend = dividend << shift;\n      quotient = result_high;\n      if (temp2 <= quotient_low && quotient_low - temp2 != 0) {\n        carry = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = result_high - 1;\n        if ((carry == false) && (temp2 <= quotient_low && quotient_low - temp2 != 0)) {\n          quotient = result_high - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      result_high = (temp2 - quotient_low) / divisor_low;\n      temp2 = result_low & 0xffff | ((temp2 - quotient_low) - divisor_low * result_high) * 0x10000;\n      quotient_low = result_high * (temp1 & 0xffff);\n      result_low = result_high;\n      if (temp2 <= quotient_low && quotient_low - temp2 != 0) {\n        carry = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        result_low = result_high - 1;\n        if ((carry == false) && (temp2 <= quotient_low && quotient_low - temp2 != 0)) {\n          result_low = result_high - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      result_low = result_low | quotient << 0x10;\n      result = (ulonglong)result_low * (ulonglong)(divisor << shift);\n      if (CONCAT44(temp2 - quotient_low,dividend) < result) {\n        result = result - CONCAT44(temp1,divisor << shift);\n        result_low = result_low - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((temp2 - quotient_low) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (mask & 0xff) | dividend - (uint)result >> shift;\n        remainder[1] = quotient >> shift;\n      }\n      return (ulonglong)result_low;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    result_low = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(result_low,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_with_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "uVar1": "quotient",
                "iVar2": "shift",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result_low",
                "uVar6": "result_high",
                "uVar7": "mask",
                "uVar8": "quotient_low",
                "uVar9": "divisor_low",
                "bVar10": "carry",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 138368,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}