{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_data_00000410",
            "code": "\nvoid initializeData_00000410(void)\n\n{\n  initializeData_00000410_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_data_00000410",
                "initialize_data_00000df4": "initializeData_00000df4"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_and_update_relocation_offset_00000428",
            "code": "\ndword validateAndUpdateRelocationOffset_00000428(undefined4 *outputStatus,int inputOffset)\n\n{\n  undefined4 interruptStatus;\n  dword updatedOffset;\n  \n  interruptStatus = get_interrupt_status_00000cd0();\n  updatedOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *outputStatus = 0xc;\n    updatedOffset = 0xffffffff;\n  }\n  enable_ir_qinterrupts_if_privileged_00000d0c(interruptStatus);\n  return updatedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_and_update_relocation_offset_00000428",
                "param_1": "outputStatus",
                "param_2": "inputOffset",
                "uVar1": "interruptStatus",
                "local_c": "updatedOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "copy_and_increment_00000490",
            "code": "\nundefined4 copyAndIncrement_00000490(undefined4 input1,undefined4 input2,undefined4 source,undefined4 destination)\n\n{\n  undefined4 result;\n  \n  result = copy_elements_and_increment_00000e14(source,destination);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "copy_and_increment_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "source",
                "param_4": "destination",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_memory_location_000004f2",
            "code": "\nundefined4 initializeMemoryLocation_000004f2(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_memory_location_000004f2",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_value_00000514",
            "code": "\nundefined4 initialize_value_00000514(undefined4 *value_ptr)\n\n{\n  *value_ptr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_value_00000514",
                "param_1": "value_ptr"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_param_validity_00000534",
            "code": "\nundefined4 checkParamValidity_00000534(undefined4 *outValue,int inputParam)\n\n{\n  undefined4 isValid;\n  \n  *outValue = 0;\n  if (((inputParam == 0) || (inputParam == 1)) || (inputParam == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_param_validity_00000534",
                "param_1": "outValue",
                "param_2": "inputParam",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "decompressed_byte_to_int_00000566",
            "code": "\nint decompressedByteToInt_00000566(int compressedByte)\n\n{\n  byte shiftedByte1;\n  byte shiftedByte2;\n  byte shiftedByte3;\n  byte shiftedByte4;\n  int decompressedInt;\n  \n  shiftedByte2 = (byte)compressedByte;\n  shiftedByte3 = (byte)((uint)compressedByte >> 8);\n  shiftedByte4 = (byte)((uint)compressedByte >> 0x10);\n  shiftedByte1 = (byte)((uint)compressedByte >> 0x18);\n  decompressedInt = LZCOUNT((uint)(byte)((((((((shiftedByte2 & 1) << 1 | shiftedByte2 >> 1 & 1) << 1 | shiftedByte2 >> 2 & 1) << 1\n                                  | shiftedByte2 >> 3 & 1) << 1 | shiftedByte2 >> 4 & 1) << 1 | shiftedByte2 >> 5 & 1) <<\n                                1 | shiftedByte2 >> 6 & 1) << 1 | shiftedByte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((shiftedByte3 & 1) << 1 | shiftedByte3 >> 1 & 1) << 1 | shiftedByte3 >> 2 & 1) << 1\n                                  | shiftedByte3 >> 3 & 1) << 1 | shiftedByte3 >> 4 & 1) << 1 | shiftedByte3 >> 5 & 1) <<\n                                1 | shiftedByte3 >> 6 & 1) << 1 | shiftedByte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((shiftedByte4 & 1) << 1 | shiftedByte4 >> 1 & 1) << 1 | shiftedByte4 >> 2 & 1) << 1\n                                  | shiftedByte4 >> 3 & 1) << 1 | shiftedByte4 >> 4 & 1) << 1 | shiftedByte4 >> 5 & 1) <<\n                                1 | shiftedByte4 >> 6 & 1) << 1 | shiftedByte4 >> 7) << 8 |\n                  (uint)(byte)((((((((shiftedByte1 & 1) << 1 | shiftedByte1 >> 1 & 1) << 1 | shiftedByte1 >> 2 & 1) << 1\n                                  | shiftedByte1 >> 3 & 1) << 1 | shiftedByte1 >> 4 & 1) << 1 | shiftedByte1 >> 5 & 1) <<\n                                1 | shiftedByte1 >> 6 & 1) << 1 | shiftedByte1 >> 7));\n  if (compressedByte == 0) {\n    decompressedInt = -1;\n  }\n  return decompressedInt;\n}\n\n",
            "renaming": {
                "FUN_00000566": "decompressed_byte_to_int_00000566",
                "param_1": "compressedByte",
                "bVar1": "shiftedByte1",
                "bVar2": "shiftedByte2",
                "bVar3": "shiftedByte3",
                "bVar4": "shiftedByte4",
                "iVar5": "decompressedInt"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *sourcePointer,undefined4 *destinationPointer)\n\n{\n  if (*sourcePointer == 0) {\n    *destinationPointer = destinationPointer;\n  }\n  else {\n    *destinationPointer = *(undefined4 *)*sourcePointer;\n    *(undefined4 **)*sourcePointer = destinationPointer;\n  }\n  *sourcePointer = (int)destinationPointer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "sourcePointer",
                "param_2": "destinationPointer",
                "(int)param_2": "(int)destinationPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_pointer_000005ca",
            "code": "\nundefined4 * extractPointer_000005ca(int *input_ptr)\n\n{\n  undefined4 *output_ptr;\n  \n  if (*input_ptr == 0) {\n    output_ptr = (undefined4 *)0x0;\n  }\n  else {\n    output_ptr = *(undefined4 **)*input_ptr;\n    if (output_ptr == (undefined4 *)*input_ptr) {\n      *input_ptr = 0;\n    }\n    else {\n      *(undefined4 *)*input_ptr = *output_ptr;\n    }\n  }\n  return output_ptr;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_pointer_000005ca",
                "param_1": "input_ptr",
                "puVar1": "output_ptr"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "check_and_modify_data_00000610",
            "code": "\nundefined4 checkAndModifyData_00000610(void)\n\n{\n  int originalValue;\n  int decompressedValue;\n  undefined4 result;\n  \n  originalValue = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  decompressedValue = decompressToInt(DAT_1fff0424);\n  decompressedValue = **(int **)(&DAT_1fff03e4 + decompressedValue * 4);\n  if (originalValue == decompressedValue + -8) {\n    result = 0;\n  }\n  else {\n    if ((originalValue != 0) && (*(char *)(originalValue + 4) == '\\t')) {\n      *(undefined *)(originalValue + 4) = 10;\n    }\n    *(undefined *)(decompressedValue + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(decompressedValue + -2);\n    result = 1;\n    DAT_1fff03dc = decompressedValue + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "check_and_modify_data_00000610",
                "iVar1": "originalValue",
                "iVar2": "decompressedValue",
                "uVar3": "result",
                "decompressed_byte_to_int_00000566": "decompressToInt"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid updateData_00000698(int dataIndex,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(dataIndex + 4)) &&\n       (extract_pointer_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(dataIndex + 5));\n    }\n  }\n  else if (*(byte *)(dataIndex + 4) < 9) {\n    update_pointer_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4,dataIndex + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(dataIndex + 5);\n  }\n  *(char *)(dataIndex + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "dataIndex",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_memory_access_00000738",
            "code": "\nvoid checkMemoryAccess_00000738(ushort inputValue)\n\n{\n  int exceptionNumber;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    exceptionNumber = get_exception_number_00000d2a();\n    if (exceptionNumber == 0) {\n      enable_memory_access_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_memory_access_00000738",
                "param_1": "inputValue",
                "iVar1": "exceptionNumber"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_interrupt_data_00000794",
            "code": "\nint * initializeInterruptData_00000794(void)\n\n{\n  int interruptStatus;\n  int counter;\n  undefined4 *pointer;\n  uint temp;\n  int loopCounter1;\n  int loopCounter2;\n  int *arrayPointer;\n  \n  get_interrupt_status_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  update_data_00000698(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  run_infinite_loop_00000930();\n  temp = (int)pointer + counter & 0xfffffffc;\n  arrayPointer = (int *)(temp - 4);\n  *arrayPointer = 0x77777777;\n  if (((uint)arrayPointer & 7) != 0) {\n    arrayPointer = (int *)(temp - 8);\n    *arrayPointer = 0x88888888;\n  }\n  arrayPointer[-1] = 0x1000000;\n  arrayPointer[-2] = counter << 0xd;\n  arrayPointer[-3] = 0x795;\n  arrayPointer = arrayPointer + -4;\n  *arrayPointer = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = loopCounter2;\n  }\n  arrayPointer = arrayPointer + -1;\n  *arrayPointer = interruptStatus;\n  for (loopCounter1 = 0xb; 3 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = loopCounter1;\n  }\n  arrayPointer[-1] = -3;\n  return arrayPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_interrupt_data_00000794",
                "extraout_r1": "interruptStatus",
                "iVar1": "counter",
                "puVar2": "pointer",
                "uVar3": "temp",
                "iStack_1c": "loopCounter1",
                "iStack_18": "loopCounter2",
                "piStack_14": "arrayPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int i;\n  int j;\n  int *memoryPointer;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  memoryPointer = (int *)(alignedSize - 4);\n  *memoryPointer = 0x77777777;\n  if (((uint)memoryPointer & 7) != 0) {\n    memoryPointer = (int *)(alignedSize - 8);\n    *memoryPointer = 0x88888888;\n  }\n  memoryPointer[-1] = 0x1000000;\n  memoryPointer[-2] = param1;\n  memoryPointer[-3] = 0x795;\n  memoryPointer = memoryPointer + -4;\n  *memoryPointer = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    memoryPointer = memoryPointer + -1;\n    *memoryPointer = j;\n  }\n  memoryPointer = memoryPointer + -1;\n  *memoryPointer = param2;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    memoryPointer = memoryPointer + -1;\n    *memoryPointer = i;\n  }\n  memoryPointer[-1] = -3;\n  return memoryPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "i",
                "local_10": "j",
                "local_c": "memoryPointer"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_elf_relocations_000008b8",
            "code": "\nint countElfRelocations_000008b8(void)\n\n{\n  Elf32_Rel *currentRelocation;\n  \n  for (currentRelocation = (Elf32_Rel *)&DAT_1fff0000;\n      (currentRelocation->r_offset == 0xe7fee7fe && (currentRelocation < EndOfElfRelocationTableAddress));\n      currentRelocation = (Elf32_Rel *)&currentRelocation->r_info) {\n  }\n  return ((int)EndOfElfRelocationTableAddress - (int)currentRelocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_elf_relocations_000008b8",
                "local_c": "currentRelocation",
                "Elf32_Rel_ARRAY_1fff0200": "EndOfElfRelocationTableAddress"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_constant_value_0000091c",
            "code": "\nuint32_t getConstantValue_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_constant_value_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_infinite_loop_00000930",
            "code": "\nvoid runInfiniteLoop_00000930(void)\n\n{\n  checkInterruptsEnabledStatus();\n  triggerSoftwareInterrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_infinite_loop_00000930",
                "check_ir_qinterrupts_enabled_status_00000cf0": "checkInterruptsEnabledStatus",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "enable_memory_access_0000093c",
            "code": "\n\n\nvoid enable_memory_access_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "enable_memory_access_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_and_clear_memory_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  configure_system_00000e64();\n  execute_function_set_0000459c();\n  FUNC_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_NMI_00000a30(void)\n\n{\n  int param;\n  \n  handle_panic(4,\"NMI HANDLER\");\n  return pointer + -*(int *)(param + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "param",
                "handle_kernel_panic_00000f04": "handle_panic",
                "&stack0xe000ffe0": "pointer"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "irq_interrupts_management_00000cc0",
            "code": "\nundefined4 irqInterruptsManagement_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  handleKernelPanic(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "irq_interrupts_management_00000cc0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled",
                "handle_kernel_panic_00000f04": "handleKernelPanic",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "isIRQinterruptsEnabled": "checkIRQinterruptsEnabled"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "get_interrupt_status_00000cd0",
            "code": "\nundefined4 getInterruptStatus_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "get_interrupt_status_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_enabled_status_00000cf0",
            "code": "\nundefined4 checkIRQinterruptsEnabledStatus_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabledStatus;\n  \n  enableIRQinterrupts();\n  interruptsEnabledStatus = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabledStatus = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabledStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_enabled_status_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabledStatus"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIRQinterruptsIfPrivileged_00000d0c(uint interruptControlBit)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    enableIRQinterrupts((interruptControlBit & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_privileged_00000d0c",
                "param_1": "interruptControlBit",
                "bVar1": "isPrivilegedMode"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculateOffset_00000d44(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 input1,undefined input2)\n\n{\n  undefined4 *memoryPointer;\n  \n  memoryPointer = (undefined4 *)calculate_offset_00000d44(input1,input2);\n  *memoryPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "memoryPointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_memory_00000d9c",
            "code": "\nvoid clearMemory_00000d9c(void)\n\n{\n  clear_memory_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_memory_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_and_clear_memory_00000db0",
            "code": "\nvoid initialize_and_clear_memory_00000db0(void)\n\n{\n  initialize_memory();\n  clear_memory();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_and_clear_memory_00000db0",
                "initialize_memory_00000dcc": "initialize_memory",
                "clear_memory_00000d9c": "clear_memory"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_interrupts_00000dc0",
            "code": "\nvoid initialize_interrupts_00000dc0(void)\n\n{\n  manage_irq_interrupts();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_interrupts_00000dc0",
                "irq_interrupts_management_00000cc0": "manage_irq_interrupts"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_data_00000df4",
            "code": "\nvoid initialize_data_00000df4(void)\n\n{\n  initialize_data_00000df4_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_data_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "copy_elements_and_increment_00000e14",
            "code": "\nundefined4 copyElementsAndIncrement_00000e14(undefined4 inputArray,undefined4 count)\n\n{\n  undefined4 result;\n  \n  result = copy_and_increment_elements_000012e2(0x1fff0204,inputArray,count);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "copy_elements_and_increment_00000e14",
                "param_1": "inputArray",
                "param_2": "count",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_data_and_return_00000e38",
            "code": "\nundefined4 copy_data_and_return_00000e38(undefined4 source_data,undefined4 destination_data)\n\n{\n  copy_data_000015d0(0,source_data,destination_data);\n  return destination_data;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_data_and_return_00000e38",
                "param_1": "source_data",
                "param_2": "destination_data"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "infinite_loop_00000e58",
            "code": "\nvoid infiniteLoop_00000e58(void)\n\n{\n  getInterruptStatus();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "infinite_loop_00000e58",
                "get_interrupt_status_00000cd0": "getInterruptStatus"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "configure_system_00000e64",
            "code": "\n\n\nvoid configureSystem_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initializeAndConfigureSystem();\n  updateDataOffsetAndApplyMask(0x2056,0x80);\n  updateDataOffsetAndApplyMask(0x511a,0x80);\n  updateDataOffsetAndApplyMask(0x2055,0x80);\n  setBitAtIndex(0x2056);\n  setBitAtIndex(0x511a);\n  setBitAtIndex(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "configure_system_00000e64",
                "initialize_and_configure_system_00001274": "initializeAndConfigureSystem",
                "update_data_offset_and_apply_mask_00001eea": "updateDataOffsetAndApplyMask",
                "set_bit_at_index_00001ff6": "setBitAtIndex"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 internalLinkRegister;\n  \n  process_and_initialize_00004c84(&DAT_00006f58,internalLinkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "internalLinkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicCode,undefined4 message)\n\n{\n  undefined4 stackPointer;\n  code *jumpTable;\n  undefined4 message;\n  char panicCode;\n  \n  message = message;\n  panicCode = panicCode;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicCode == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    process_and_initialize_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",message);\n    print_process_status_0000211c();\n    process_and_initialize_00004c84(&DAT_00006f78);\n    process_and_initialize_00004c84(\"*** halted.\\n\\n\");\n  }\n  get_interrupt_status_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  infinite_loop_00000e58();\n  stackPointer = (int)&stackPointer + 1;\n  FUNC_00002400();\n  process_and_initialize_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_and_process_data_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicCode",
                "param_2": "message",
                "uStack_18": "stackPointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "message",
                "local_9": "panicCode"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "FUNC_00000f8c",
            "code": "\nvoid FUNC_00000f8c(void)\n\n{\n  uint uVar1;\n  undefined4 *puVar2;\n  uint uVar3;\n  int iStack_24;\n  int *piStack_20;\n  undefined4 uStack_1c;\n  undefined4 local_18;\n  undefined4 local_14;\n  dword local_10;\n  \n  get_interrupt_status_00000cd0();\n  local_10 = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  local_14 = 0;\n  local_18 = 0xf81;\n  initialize_memory_block_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  local_10 = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  local_14 = 0;\n  local_18 = 0xf5d;\n  uVar3 = 0xc;\n  initialize_memory_block_000010d4(&DAT_1fff046c,0x600,7);\n  uStack_1c = 0xfd3;\n  uVar1 = run_infinite_loop_00000930();\n  uVar1 = uVar1 >> 0x1e;\n  puVar2 = (undefined4 *)(uVar3 * 0x100);\n  iStack_24 = (uVar3 >> 0x1d) << 0x11;\n  piStack_20 = &iStack_24;\n  if ((uVar1 & uVar1 - 1) != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *puVar2 = 0;\n  puVar2[1] = 0;\n  puVar2[2] = uVar1 - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "FUNC_00000f8c"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_kernel_panic_data_00000fec",
            "code": "\nvoid initializeKernelPanicData_00000fec(undefined4 *kernelPanicData,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *kernelPanicData = 0;\n  kernelPanicData[1] = 0;\n  kernelPanicData[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_kernel_panic_data_00000fec",
                "param_1": "kernelPanicData",
                "param_2": "size",
                "param_1[1]": "kernelPanicData[1]",
                "param_1[2]": "kernelPanicData[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_best_fit_ptr_00001034",
            "code": "\nvoid find_best_fit_ptr_00001034(int **memory_blocks,int block_info)\n\n{\n  int **current_block;\n  \n  if (8 < *(byte *)(block_info + 4)) {\n    handle_panic(3,\"FAILED ASSERTION.\");\n  }\n  for (current_block = memory_blocks;\n      (*current_block != (int *)0x0 && (*(byte *)((int)*current_block + -3) <= *(byte *)(block_info + 5)));\n      current_block = (int **)*current_block) {\n  }\n  *(int **)(block_info + 8) = *current_block;\n  *current_block = (int *)(int **)(block_info + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_best_fit_ptr_00001034",
                "param_1": "memory_blocks",
                "param_2": "block_info",
                "local_1c": "current_block",
                "handle_kernel_panic_00000f04": "handle_panic"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_offset_000010a0",
            "code": "\nint calculate_offset_000010a0(int *array)\n\n{\n  int *current_ptr;\n  \n  for (current_ptr = array; (int *)*current_ptr == current_ptr; current_ptr = current_ptr + 1) {\n  }\n  return (int)current_ptr - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_offset_000010a0",
                "param_1": "array",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_memory_block_000010d4",
            "code": "\nint initializeMemoryBlock_000010d4(uint address,int size,byte byteCount,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 interruptStatus;\n  undefined4 initializedValue;\n  int result;\n  uint alignedSize;\n  undefined4 *blockPointer;\n  int byteOffset;\n  uint alignedAddress;\n  uint temp;\n  short index1;\n  short availableIndex;\n  \n  if (byteCount < 0x10) {\n    byteOffset = size;\n    alignedAddress = address;\n    if ((address & 3) != 0) {\n      byteOffset = 4 - (address & 3);\n      alignedAddress = byteOffset + address;\n      byteOffset = size - byteOffset;\n    }\n    alignedSize = byteOffset - 0x30U & 0xfffffffc;\n    blockPointer = (undefined4 *)(alignedSize + alignedAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedAddress = alignedAddress;\n    }\n    else {\n      for (temp = alignedAddress; temp < alignedSize + alignedAddress; temp = temp + 4) {\n        *(uint *)temp = temp;\n      }\n    }\n    interruptStatus = get_interrupt_status_00000cd0();\n    availableIndex = 0;\n    for (index1 = 1; index1 < 0x21; index1 = index1 + 1) {\n      if (*(int *)(&DAT_1fff0358 + index1 * 4) == 0) {\n        availableIndex = index1;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      enable_ir_qinterrupts_if_privileged_00000d0c(interruptStatus);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = blockPointer;\n      *(short *)((int)blockPointer + 6) = availableIndex;\n      initializedValue = initialize_memory_000007dc(param5,param6,alignedAddress,alignedSize);\n      *blockPointer = initializedValue;\n      blockPointer[9] = alignedAddress;\n      blockPointer[0xb] = size;\n      blockPointer[10] = param7;\n      *(byte *)((int)blockPointer + 5) = byteCount;\n      *(undefined *)(blockPointer + 1) = 0;\n      blockPointer[2] = 0;\n      blockPointer[3] = 0;\n      blockPointer[4] = 0;\n      initialize_kernel_panic_data_00000fec(blockPointer + 5,0);\n      blockPointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_data_00000698(blockPointer,10);\n        if ((flags & 4) == 0) {\n          enable_ir_qinterrupts_if_privileged_00000d0c(interruptStatus);\n          check_memory_access_00000738(byteCount);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        update_data_00000698(blockPointer,1);\n      }\n      enable_ir_qinterrupts_if_privileged_00000d0c(interruptStatus);\n      result = (int)availableIndex;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_memory_block_000010d4",
                "param_1": "address",
                "param_2": "size",
                "param_3": "byteCount",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "interruptStatus",
                "uVar2": "initializedValue",
                "iVar3": "result",
                "uVar4": "alignedSize",
                "puVar5": "blockPointer",
                "local_30": "byteOffset",
                "local_2c": "alignedAddress",
                "local_10": "temp",
                "local_c": "index1",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_and_configure_system_00001274",
            "code": "\nvoid initialize_and_configure_system_00001274(void)\n\n{\n  initialize_settings();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system();\n  setup_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_and_configure_system_00001274",
                "initialize_settings_0000258c": "initialize_settings",
                "initialize_system_00001c84": "initialize_system",
                "initialize_system_00002396": "setup_system"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "allocate_and_initialize_memory_0000129c",
            "code": "\nvoid allocateAndInitializeMemory_0000129c(undefined4 memoryPtr)\n\n{\n  allocateOrUpdateMemory(memoryPtr,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "allocate_and_initialize_memory_0000129c",
                "param_1": "memoryPtr",
                "allocate_or_update_memory_00002434": "allocateOrUpdateMemory"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "process_and_update_data_000012b4",
            "code": "\nundefined4 process_and_update_data_000012b4(int data_address,undefined unused_parameter)\n\n{\n  undefined4 checksum_result;\n  \n  checksum_result = check_and_update_checksum_00002364(data_address + 4,unused_parameter);\n  process_interrupt_000024bc(data_address);\n  return checksum_result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "process_and_update_data_000012b4",
                "param_1": "data_address",
                "param_2": "unused_parameter",
                "uVar1": "checksum_result"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "copy_and_increment_elements_000012e2",
            "code": "\nint copyAndIncrementElements_000012e2(int array,undefined4 size,undefined4 increment)\n\n{\n  int result;\n  \n  while( true ) {\n    result = copy_and_increment_elements_0000231c(array + 4,size,increment);\n    if (result != 0) break;\n    allocate_and_initialize_memory_0000129c(array);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "copy_and_increment_elements_000012e2",
                "param_1": "array",
                "param_2": "size",
                "param_3": "increment",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "enable_memory_access_if_dat_not_zero_00001348",
            "code": "\nvoid enable_memory_access_if_dat_not_zero_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_memory_access();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "enable_memory_access_if_dat_not_zero_00001348",
                "enable_memory_access_0000093c": "enable_memory_access"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_new_value_00001360",
            "code": "\nint calculate_new_value_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_new_value_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_new_value_to1_00001392",
            "code": "\nvoid setNewValueTo1_00001392(undefined4 input1,undefined input2)\n\n{\n  undefined4 *newValuePointer;\n  \n  newValuePointer = (undefined4 *)calculate_new_value_00001360(input1,input2);\n  *newValuePointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_new_value_to1_00001392",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "newValuePointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_data_000013b8",
            "code": "\nundefined4 initializeData_000013b8(int index,undefined4 config,undefined4 dataOffset1,undefined4 dataOffset2)\n\n{\n  undefined4 returnValue;\n  \n  if (index != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = dataOffset1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = dataOffset2;\n  update_data_offsets_00001448(index);\n  set_new_value_to1_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    set_memory_config_000014c4(index,config);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_data_000013b8",
                "param_1": "index",
                "param_2": "config",
                "param_3": "dataOffset1",
                "param_4": "dataOffset2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_data_offsets_00001448",
            "code": "\nvoid update_data_offsets_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    update_data_offset(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    update_data_offset(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_data_offsets_00001448",
                "param_1": "index",
                "update_data_offset_00001f80": "update_data_offset"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "set_memory_config_000014c4",
            "code": "\nvoid setMemoryConfig_000014c4(int configIndex,uint blockSize)\n\n{\n  byte *configEntry;\n  uint configValue;\n  uint shiftedValue;\n  \n  configEntry = *(byte **)(&DAT_00006fe4 + configIndex * 0x20);\n  configValue = *(uint *)(&DAT_00006fe8 + configIndex * 0x20);\n  configEntry[3] = configEntry[3] & 0xf3;\n  configEntry[2] = (&DAT_00007001)[configIndex * 0x20];\n  shiftedValue = configValue / (blockSize << 4);\n  *configEntry = (byte)(shiftedValue >> 8) & 0x1f;\n  configEntry[1] = (byte)shiftedValue;\n  configEntry[10] = (byte)((configValue << 2) / blockSize + 1 >> 1) & 0x1f;\n  configEntry[0x10] = configEntry[0x10] | 0x88;\n  if ((configEntry[0x10] & 0x70) == 0) {\n    configEntry[0x13] = 0;\n  }\n  else {\n    configEntry[0x13] = (char)(2 << (configEntry[0x10] >> 4 & 7)) - 1;\n  }\n  configEntry[0x15] = 1;\n  configEntry[0x11] = 0xc0;\n  configEntry[3] = configEntry[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[configIndex * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "set_memory_config_000014c4",
                "param_1": "configIndex",
                "param_2": "blockSize",
                "pbVar1": "configEntry",
                "uVar2": "configValue",
                "uVar3": "shiftedValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int source,uint length)\n\n{\n  int dataOffset;\n  uint counter;\n  \n  dataOffset = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(dataOffset + 4));\n    *(undefined *)(dataOffset + 7) = *(undefined *)(counter + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "dataOffset",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_memory_function_00001628",
            "code": "\nvoid executeMemoryFunction_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  enableMemoryAccess();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_memory_function_00001628",
                "param_1": "index",
                "enable_memory_access_if_dat_not_zero_00001348": "enableMemoryAccess"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_memory_00001688",
            "code": "\nvoid initializeMemory_00001688(void)\n\n{\n  executeMemoryFunction(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_memory_00001688",
                "execute_memory_function_00001628": "executeMemoryFunction"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint address,int count)\n\n{\n  return count * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "address",
                "param_2": "count"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_value_000016c8",
            "code": "\nvoid setOffsetToValue_000016c8(undefined4 offset,undefined value)\n\n{\n  undefined4 *offsetPtr;\n  \n  offsetPtr = (undefined4 *)calculate_offset_00001696(offset,value);\n  *offsetPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_value_000016c8",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to1_000016ec",
            "code": "\nvoid setOffsetTo1_000016ec(undefined4 offset,undefined data)\n\n{\n  undefined *offsetPointer;\n  \n  offsetPointer = (undefined *)calculate_offset_00001696(offset,data);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to1_000016ec",
                "param_1": "offset",
                "param_2": "data",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "initialize_memory_00001710",
            "code": "\nvoid initializeMemory_00001710(undefined4 dataOffset,undefined value)\n\n{\n  undefined *memoryAddress;\n  \n  memoryAddress = (undefined *)calculate_offset_00001696(dataOffset,value);\n  *memoryAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "initialize_memory_00001710",
                "param_1": "dataOffset",
                "param_2": "value",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_memory_with_data_00001734",
            "code": "\nvoid initialize_memory_with_data_00001734(void)\n\n{\n  initialize_memory_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_memory_with_data_00001734"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_data_bits_00001748",
            "code": "\nvoid updateDataBits_00001748(byte inputByte)\n\n{\n  DAT_40064003 = inputByte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_data_bits_00001748",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "initialize_and_modify_data_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid initializeAndModifyData_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  initializeMemory(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "initialize_and_modify_data_00001778",
                "initialize_memory_00001710": "initializeMemory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "set_offset_and_check_status_000017dc",
            "code": "\n\n\nvoid setOffsetAndCheckStatus_000017dc(void)\n\n{\n  set_offset_to_value_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "set_offset_and_check_status_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initialize_data_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_offset(&DAT_40064001,0);\n  initialize_memory(&DAT_40064000,1);\n  initialize_memory(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c",
                "set_offset_to1_000016ec": "set_offset",
                "initialize_memory_00001710": "initialize_memory"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_device_000018bc",
            "code": "\nvoid initialize_device_000018bc(void)\n\n{\n  update_data_bits_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  initialize_memory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_device_000018bc",
                "initialize_memory_00001710": "initialize_memory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_and_update_data_0000191c",
            "code": "\nvoid initializeAndUpdateData_0000191c(void)\n\n{\n  initializeAndModifyData();\n  updateDataBits(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_and_update_data_0000191c",
                "initialize_and_modify_data_00001778": "initializeAndModifyData",
                "update_data_bits_00001748": "updateDataBits"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_data_00001960",
            "code": "\nvoid initializeData_00001960(void)\n\n{\n  updateDataBits(0xa0);\n  initializeMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_data_00001960",
                "update_data_bits_00001748": "updateDataBits",
                "initialize_memory_00001710": "initializeMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_and_modify_data_000019c0",
            "code": "\nvoid initializeAndModifyData_000019c0(void)\n\n{\n  initialize_and_modify_data_00001778();\n  update_data_bits_00001748(0x40);\n  initialize_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  initialize_memory_with_data_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_and_modify_data_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  set_offset_to1_000016ec(&DAT_40064001,1);\n  initializeMemoryWithData();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18",
                "initialize_memory_with_data_00001734": "initializeMemoryWithData"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_system_00001a3c",
            "code": "\nvoid initialize_system_00001a3c(void)\n\n{\n  set_offset_to1_000016ec(&DAT_40064001,1);\n  initialize_memory();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_system_00001a3c",
                "initialize_memory_with_data_00001734": "initialize_memory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initialize_memory_00001a60(void)\n\n{\n  initialize_memory_00001a60_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  set_offset_to1_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_devices_00001b10",
            "code": "\nundefined4 initialize_devices_00001b10(byte device_index)\n\n{\n  undefined4 status;\n  \n  if (device_index < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)device_index + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_device_000018bc();\n        break;\n      case 1:\n        initialize_and_update_data_0000191c();\n        break;\n      case 2:\n        initialize_data_00001960();\n        break;\n      case 3:\n        initialize_and_modify_data_000019c0();\n        break;\n      case 4:\n        initialize_system_00001a18();\n        break;\n      case 5:\n        initialize_system_00001a3c();\n        break;\n      case 6:\n        initialize_memory_00001a60();\n        break;\n      case 7:\n        initialize_data_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (device_index != DAT_1fff0b74);\n    status = 0;\n  }\n  else {\n    status = 0xffffffff;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_devices_00001b10",
                "param_1": "device_index",
                "uVar1": "status"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_and_update_data_00001bb8",
            "code": "\nvoid initializeAndUpdateData_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    initializeMemory(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    initializeMemory(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  updateDataBits(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_and_update_data_00001bb8",
                "initialize_memory_00001710": "initializeMemory",
                "update_data_bits_00001748": "updateDataBits"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 interruptStatus;\n  \n  interruptStatus = getInterruptStatus();\n  initializeAndUpdateData();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initializeData();\n  setOffsetAndCheckStatus();\n  initializeDevices(7);\n  enableIRQInterruptsIfPrivileged(interruptStatus);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interruptStatus",
                "get_interrupt_status_00000cd0": "getInterruptStatus",
                "initialize_and_update_data_00001bb8": "initializeAndUpdateData",
                "initialize_data_0000182c": "initializeData",
                "set_offset_and_check_status_000017dc": "setOffsetAndCheckStatus",
                "initialize_devices_00001b10": "initializeDevices",
                "enable_ir_qinterrupts_if_privileged_00000d0c": "enableIRQInterruptsIfPrivileged"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_enable_memory_access_00001cf0",
            "code": "\nvoid checkAndEnableMemoryAccess_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_memory_access_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_enable_memory_access_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_offset_to_one_00001d3a",
            "code": "\nvoid setOffsetToOne_00001d3a(undefined4 input1,undefined input2)\n\n{\n  undefined4 *resultPtr;\n  \n  resultPtr = (undefined4 *)calculate_offset_00001d08(input1,input2);\n  *resultPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_offset_to_one_00001d3a",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPtr"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_bitmask_00001d5e",
            "code": "\nuint applyBitmask_00001d5e(ushort input)\n\n{\n  return input & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_bitmask_00001d5e",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_and_value_00001d80",
            "code": "\nuint applyMaskAndValue_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_and_value_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "mask_lower6_bits_00001dc0",
            "code": "\nushort maskLower6Bits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "mask_lower6_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_offset_to_one_00001ddc",
            "code": "\nvoid setOffsetToOne_00001ddc(undefined2 bits)\n\n{\n  char extractedBits;\n  \n  extractedBits = extract_bits_00001da2(bits);\n  set_offset_to_one_00001d3a(&DAT_40048038,extractedBits + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_offset_to_one_00001ddc",
                "param_1": "bits",
                "cVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bit_from_memory_00001e0c",
            "code": "\nuint extractBitFromMemory_00001e0c(int offset,uint position)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)position >> 3) + offset * 4) * 4) >> ((position & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bit_from_memory_00001e0c",
                "param_1": "offset",
                "param_2": "position"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_data_at_offset_00001e44",
            "code": "\nvoid updateDataAtOffset_00001e44(int offset,uint bitOffset,int newData)\n\n{\n  int shiftedOffset;\n  \n  shiftedOffset = (int)bitOffset >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + offset * 4) * 4) & ~(0xf << ((bitOffset & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + offset * 4) * 4) | newData << ((bitOffset & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_data_at_offset_00001e44",
                "param_1": "offset",
                "param_2": "bitOffset",
                "param_3": "newData",
                "iVar1": "shiftedOffset"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_data_offset_00001ec4",
            "code": "\nvoid updateDataOffset_00001ec4(undefined4 memoryLocation,undefined4 bitPosition)\n\n{\n  undefined4 extractedBit;\n  \n  extractedBit = extract_bit_from_memory_00001e0c(memoryLocation,bitPosition);\n  update_data_at_offset_00001e44(memoryLocation,bitPosition,extractedBit);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_data_offset_00001ec4",
                "param_1": "memoryLocation",
                "param_2": "bitPosition",
                "uVar1": "extractedBit"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_data_offset_and_apply_mask_00001eea",
            "code": "\nundefined4 updateDataOffsetAndApplyMask_00001eea(undefined2 data,byte value)\n\n{\n  uint maskedBitPosition;\n  int maskedAddress;\n  int bitPosition;\n  \n  updateDataOffset(data,0);\n  if ((char)value < '\\0') {\n    maskedBitPosition = getMaskedBitPosition(data);\n    maskedAddress = getMaskedAddress(data);\n    *(uint *)(maskedAddress + 0x14) = *(uint *)(maskedAddress + 0x14) | 1 << (maskedBitPosition & 0xff);\n  }\n  else {\n    maskedBitPosition = getMaskedBitPosition(data);\n    maskedAddress = getMaskedAddress(data);\n    *(uint *)(maskedAddress + 0x14) = *(uint *)(maskedAddress + 0x14) & ~(1 << (maskedBitPosition & 0xff));\n  }\n  maskedAddress = applyBitmask(data);\n  bitPosition = getMaskedBitPosition(data);\n  *(uint *)(maskedAddress + bitPosition * 4) = value & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_data_offset_and_apply_mask_00001eea",
                "param_1": "data",
                "param_2": "value",
                "uVar1": "maskedBitPosition",
                "iVar2": "maskedAddress",
                "iVar3": "bitPosition",
                "update_data_offset_00001f80": "updateDataOffset",
                "mask_lower6_bits_00001dc0": "getMaskedBitPosition",
                "apply_mask_and_value_00001d80": "getMaskedAddress",
                "apply_bitmask_00001d5e": "applyBitmask"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_data_offset_00001f80",
            "code": "\nvoid updateDataOffset_00001f80(undefined2 offset,undefined4 data)\n\n{\n  int offsetApplied;\n  int maskedBits;\n  undefined4 extractedBits;\n  undefined4 lower6BitsMask;\n  uint previousData;\n  \n  set_offset_to_one_00001ddc(offset);\n  offsetApplied = apply_bitmask_00001d5e(offset);\n  maskedBits = mask_lower6_bits_00001dc0(offset);\n  previousData = *(uint *)(offsetApplied + maskedBits * 4);\n  offsetApplied = apply_bitmask_00001d5e(offset);\n  maskedBits = mask_lower6_bits_00001dc0(offset);\n  *(undefined4 *)(offsetApplied + maskedBits * 4) = data;\n  if ((previousData & 0xf0000) != 0) {\n    extractedBits = extract_bits_00001da2(offset);\n    lower6BitsMask = mask_lower6_bits_00001dc0(offset);\n    update_data_offset_00001ec4(extractedBits,lower6BitsMask);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_data_offset_00001f80",
                "param_1": "offset",
                "param_2": "data",
                "iVar1": "offsetApplied",
                "iVar2": "maskedBits",
                "uVar3": "extractedBits",
                "uVar4": "lower6BitsMask",
                "uVar5": "previousData"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_at_index_00001ff6",
            "code": "\nvoid setBitAtIndex_00001ff6(undefined2 input)\n\n{\n  uint lower6Bits;\n  int maskedValue;\n  \n  lower6Bits = mask_lower6_bits_00001dc0(input);\n  maskedValue = apply_mask_and_value_00001d80(input);\n  *(int *)(maskedValue + 4) = 1 << (lower6Bits & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_at_index_00001ff6",
                "param_1": "input",
                "uVar1": "lower6Bits",
                "iVar2": "maskedValue"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_data_00002028",
            "code": "\nvoid processData_00002028(int dataAddress,undefined4 paramValue)\n\n{\n  int bitValue;\n  uint bitmask;\n  uint count;\n  \n  bitmask = *(uint *)(dataAddress + 0xa0);\n  for (count = 0; (int)count < 0x20; count = count + 1) {\n    if (((bitmask & 1 << (count & 0xff)) != 0) &&\n       ((*(uint *)(dataAddress + count * 4) & 0xf0000) != 0)) {\n      *(int *)(dataAddress + 0xa0) = 1 << (count & 0xff);\n      bitValue = extract_bit_from_memory_00001e0c(paramValue,count);\n      (**(code **)(&DAT_1fff0b78 + bitValue * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + bitValue * 0xc));\n    }\n  }\n  check_and_enable_memory_access_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "param_1": "dataAddress",
                "param_2": "paramValue",
                "iVar1": "bitValue",
                "uVar2": "bitmask",
                "local_c": "count"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_data_processing_000020b8",
            "code": "\nvoid initializeDataProcessing_000020b8(void)\n\n{\n  processData(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_data_processing_000020b8",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_data_processing_000020cc",
            "code": "\nvoid initializeDataProcessing_000020cc(void)\n\n{\n  processData(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_data_processing_000020cc",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "process_data_000020e0",
            "code": "\nvoid processData_000020e0(void)\n\n{\n  processData_000020e0Helper(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "process_data_000020e0",
                "process_data_00002028": "processDataHelper"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_data_processing_000020f4",
            "code": "\nvoid initializeDataProcessing_000020f4(void)\n\n{\n  processData(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_data_processing_000020f4",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_data_processing_00002108",
            "code": "\nvoid initializeDataProcessing_00002108(void)\n\n{\n  processData(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_data_processing_00002108",
                "process_data_00002028": "processData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_status_0000211c",
            "code": "\nvoid printProcessStatus_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 stackFrame;\n  int stackUsage;\n  int stackIndicator;\n  dword offset;\n  uint index;\n  undefined4 *relocation;\n  undefined4 mainStack;\n  undefined4 constantValue;\n  int numberOfRelocations;\n  short relocationIndex;\n  int totalStackUsage;\n  int baseStack;\n  \n  stackFrame = 0x515f;\n  baseStack = 0;\n  totalStackUsage = 0;\n  process_and_initialize_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  numberOfRelocations = count_elf_relocations_000008b8();\n  constantValue = get_constant_value_0000091c();\n  mainStack = get_main_stack_pointer_00000900();\n  process_and_initialize_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               numberOfRelocations,constantValue,mainStack);\n  baseStack = baseStack + 0x200;\n  if (0 < numberOfRelocations) {\n    totalStackUsage = numberOfRelocations + totalStackUsage;\n  }\n  for (relocationIndex = 1; relocationIndex < 0x21; relocationIndex = relocationIndex + 1) {\n    relocation = *(undefined4 **)(&DAT_1fff0358 + relocationIndex * 4);\n    if (relocation != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(relocation + 1);\n      offset = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[index];\n      stackIndicator = (int)&stackFrame + (uint)(8 < index);\n      stackUsage = relocation[0xb];\n      baseStack = stackUsage + baseStack;\n      iVar1 = calculate_offset_000010a0(relocation[9]);\n      stackUsage = stackUsage - iVar1;\n      totalStackUsage = stackUsage + totalStackUsage;\n      process_and_initialize_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)relocation + 6),relocation[10],offset,stackIndicator,\n                   *(undefined *)((int)relocation + 5),relocation[0xb],stackUsage,relocation[9],*relocation);\n    }\n  }\n  process_and_initialize_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,baseStack,totalStackUsage);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_status_0000211c",
                "local_40": "stackFrame",
                "local_3c": "stackUsage",
                "local_38": "stackIndicator",
                "local_34": "offset",
                "local_30": "index",
                "local_2c": "relocation",
                "local_28": "mainStack",
                "local_24": "constantValue",
                "local_20": "numberOfRelocations",
                "local_1a": "relocationIndex",
                "local_18": "totalStackUsage",
                "local_14": "baseStack"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = count_elf_relocations_000008b8();\n  local_24 = get_constant_value_0000091c();\n  local_28 = get_main_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = calculate_offset_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int baseAddress)\n\n{\n  undefined result;\n  int value1;\n  bool isEqual;\n  \n  value1 = *(int *)(baseAddress + 0xc);\n  isEqual = *(int *)(baseAddress + 8) == value1;\n  if (isEqual) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "baseAddress",
                "iVar2": "value1",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_sum_equality_00002294",
            "code": "\nundefined checkSumEquality_00002294(int ptrToData)\n\n{\n  undefined result;\n  int dataOffset;\n  bool isChecksumEqual;\n  \n  dataOffset = *(int *)(ptrToData + 4);\n  isChecksumEqual = *(int *)(ptrToData + 0xc) - *(int *)(ptrToData + 8) == dataOffset;\n  if (isChecksumEqual) {\n    dataOffset = 1;\n  }\n  result = (undefined)dataOffset;\n  if (!isChecksumEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_sum_equality_00002294",
                "param_1": "ptrToData",
                "iVar2": "dataOffset",
                "bVar3": "isChecksumEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_pointer_and_store_value_000022be",
            "code": "\nvoid updatePointerAndStoreValue_000022be(int *pointerArray,undefined valueToStore)\n\n{\n  uint oldValue;\n  \n  oldValue = pointerArray[3];\n  pointerArray[3] = oldValue + 1;\n  *(undefined *)((oldValue & pointerArray[1] - 1U) + *pointerArray) = valueToStore;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_pointer_and_store_value_000022be",
                "param_1": "pointerArray",
                "param_2": "valueToStore",
                "uVar1": "oldValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_element_000022f0",
            "code": "\nundefined incrementAndReturnElement_000022f0(int *array)\n\n{\n  uint elementValue;\n  \n  elementValue = array[2];\n  array[2] = elementValue + 1;\n  return *(undefined *)((elementValue & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_element_000022f0",
                "param_1": "array",
                "uVar1": "elementValue"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_increment_elements_0000231c",
            "code": "\nint copyAndIncrementElements_0000231c(undefined4 param1,undefined *destArray,int numElements)\n\n{\n  undefined updatedValue;\n  int isEqual;\n  undefined *destPtr;\n  int remainingElements;\n  \n  destPtr = destArray;\n  remainingElements = numElements;\n  while ((remainingElements != 0 && (isEqual = check_equality_00002270(param1), isEqual == 0))) {\n    updatedValue = increment_and_return_element_000022f0(param1);\n    *destPtr = updatedValue;\n    remainingElements = remainingElements + -1;\n    destPtr = destPtr + 1;\n  }\n  return numElements - remainingElements;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_increment_elements_0000231c",
                "param_1": "param1",
                "param_2": "destArray",
                "param_3": "numElements",
                "uVar1": "updatedValue",
                "iVar2": "isEqual",
                "local_20": "destPtr",
                "local_14": "remainingElements"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_and_update_checksum_00002364",
            "code": "\nundefined4 checkAndUpdateChecksum_00002364(undefined4 input,undefined value)\n\n{\n  int checksumResult;\n  undefined4 returnValue;\n  \n  checksumResult = check_sum_equality_00002294(input);\n  if (checksumResult == 0) {\n    update_pointer_and_store_value_000022be(input,value);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_and_update_checksum_00002364",
                "param_1": "input",
                "param_2": "value",
                "iVar1": "checksumResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  initialize_system_00002396_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_and_process_data_000023a4",
            "code": "\nundefined4 initializeAndProcessData_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined buffer [128];\n  \n  initialize_interrupt_handler_000023d0(0);\n  process_data_00004db8(\"Welcome to RIOT!\");\n  returnValue = continuous_processing_00002e6c(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_and_process_data_000023a4",
                "auStack_88": "buffer",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_software_interrupt_000023c8",
            "code": "\nvoid executeSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "initialize_interrupt_handler_000023d0",
            "code": "\nundefined4 initialize_interrupt_handler_000023d0(undefined4 interrupt_type)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = execute_software_interrupt_000023c8(1,interrupt_type,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "initialize_interrupt_handler_000023d0",
                "param_1": "interrupt_type",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extracted_pointer_0000240c",
            "code": "\nundefined4 * extractedPointer_0000240c(undefined4 *pointer)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*pointer;\n  if (nextPointer != (undefined4 *)0x0) {\n    *pointer = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extracted_pointer_0000240c",
                "param_1": "pointer",
                "puVar1": "nextPointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "allocate_or_update_memory_00002434",
            "code": "\nundefined4 allocateOrUpdateMemory_00002434(int *memoryPointer,int isUpdate)\n\n{\n  int previousMemoryPtr;\n  undefined4 interruptStatus;\n  \n  interruptStatus = get_interrupt_status_00000cd0();\n  previousMemoryPtr = DAT_1fff03dc;\n  if (*memoryPointer == 0) {\n    *memoryPointer = -1;\n    enable_ir_qinterrupts_if_privileged_00000d0c(interruptStatus);\n    interruptStatus = 1;\n  }\n  else if (isUpdate == 0) {\n    enable_ir_qinterrupts_if_privileged_00000d0c(interruptStatus);\n    interruptStatus = 0;\n  }\n  else {\n    update_data_00000698(DAT_1fff03dc,2);\n    if (*memoryPointer == -1) {\n      *memoryPointer = previousMemoryPtr + 8;\n      *(undefined4 *)*memoryPointer = 0;\n    }\n    else {\n      find_best_fit_ptr_00001034(memoryPointer,previousMemoryPtr);\n    }\n    enable_ir_qinterrupts_if_privileged_00000d0c(interruptStatus);\n    enable_memory_access_0000093c();\n    interruptStatus = 1;\n  }\n  return interruptStatus;\n}\n\n",
            "renaming": {
                "FUN_00002434": "allocate_or_update_memory_00002434",
                "param_1": "memoryPointer",
                "param_2": "isUpdate",
                "iVar1": "previousMemoryPtr",
                "uVar2": "interruptStatus"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_interrupt_000024bc",
            "code": "\nvoid processInterrupt_000024bc(int *interruptStatus)\n\n{\n  undefined interruptFlag;\n  undefined4 currentInterruptStatus;\n  int extractedPointer;\n  \n  currentInterruptStatus = getCurrentInterruptStatus();\n  if (*interruptStatus == 0) {\n    enableIRQInterruptsIfPrivileged(currentInterruptStatus);\n  }\n  else if (*interruptStatus == -1) {\n    *interruptStatus = 0;\n    enableIRQInterruptsIfPrivileged(currentInterruptStatus);\n  }\n  else {\n    extractedPointer = extractPointer(interruptStatus);\n    updateData(extractedPointer + -8,10);\n    if (*interruptStatus == 0) {\n      *interruptStatus = -1;\n    }\n    interruptFlag = *(undefined *)(extractedPointer + -3);\n    enableIRQInterruptsIfPrivileged(currentInterruptStatus);\n    checkMemoryAccess(interruptFlag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_interrupt_000024bc",
                "param_1": "interruptStatus",
                "uVar1": "interruptFlag",
                "uVar2": "currentInterruptStatus",
                "iVar3": "extractedPointer",
                "get_interrupt_status_00000cd0": "getCurrentInterruptStatus",
                "enable_ir_qinterrupts_if_privileged_00000d0c": "enableIRQInterruptsIfPrivileged",
                "extracted_pointer_0000240c": "extractPointer",
                "update_data_00000698": "updateData",
                "check_memory_access_00000738": "checkMemoryAccess"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_byte_value_00002538",
            "code": "\nvoid updateByteValue_00002538(byte inputByte,uint newValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((newValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((newValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_byte_value_00002538",
                "param_1": "inputByte",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_settings_0000258c",
            "code": "\n\n\nvoid initializeSettings_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  update_byte_value_00002538(0xfffffffe,1);\n  update_byte_value_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    update_byte_value_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_settings_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  initialize_system_000025f4_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "calculate_and_save_next_date_00002600",
            "code": "\nundefined4 calculateAndSaveNextDate_00002600(undefined4 currentDate)\n\n{\n  undefined4 nextDate;\n  \n  nextDate = calculate_next_date_000047e4(currentDate);\n  set_flag_and_save_0000285c(nextDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "calculate_and_save_next_date_00002600",
                "param_1": "currentDate",
                "uVar1": "nextDate"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "initialize_date_components_00002624",
            "code": "\nundefined4 initializeDateComponents_00002624(undefined4 inputDate)\n\n{\n  undefined4 baseAddress;\n  undefined4 dummyValue;\n  \n  baseAddress = get_base_address_0000281c();\n  dummyValue = 0;\n  calculate_date_components_0000443c(&baseAddress,inputDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "initialize_date_components_00002624",
                "param_1": "inputDate",
                "local_10": "baseAddress",
                "uStack_c": "dummyValue"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_and_set_next_date_00002654",
            "code": "\nundefined4 initialize_and_set_next_date_00002654(undefined4 current_date,undefined4 target_date,undefined4 data_value)\n\n{\n  undefined4 next_date;\n  \n  next_date = calculate_next_date_000047e4(current_date);\n  DAT_1fff0d9c = target_date;\n  initialize_data_00002894(next_date,0x26f1,data_value);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_and_set_next_date_00002654",
                "param_1": "current_date",
                "param_2": "target_date",
                "param_3": "data_value",
                "uVar1": "next_date"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "process_data_00002690",
            "code": "\nundefined4 processData_00002690(undefined4 inputData)\n\n{\n  undefined4 dataValue;\n  undefined4 stackValue;\n  \n  dataValue = increment_data_value_000028f0();\n  stackValue = 0;\n  calculate_date_components_0000443c(&dataValue,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "process_data_00002690",
                "param_1": "inputData",
                "local_10": "dataValue",
                "uStack_c": "stackValue"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_settings_000026c0",
            "code": "\nvoid initializeSettings_000026c0(void)\n\n{\n  clearSettings();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_settings_000026c0",
                "clear_settings_00002910": "clearSettings"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "set_flag_bit_000026d8",
            "code": "\nvoid setFlagBit_000026d8(void)\n\n{\n  setFlagBit_000026d8s();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "set_flag_bit_000026d8",
                "set_flag_bit_0000294c": "setFlagBits"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "clear_interrupt_flag_000026e4",
            "code": "\nvoid clearInterruptFlag_000026e4(void)\n\n{\n  clearInterruptFlag_000026e4Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "clear_interrupt_flag_000026e4",
                "clear_interrupt_flag_00002970": "clearInterruptFlagHelper"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_if_available_000026f0",
            "code": "\nvoid execute_if_available_000026f0(undefined4 argument)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(argument);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_if_available_000026f0",
                "param_1": "argument"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_00002714",
            "code": "\nvoid setBit_00002714(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_00002714",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid updateData_00002744(byte byteValue,uint dataValue)\n\n{\n  if ((character)byteValue < '\\0') {\n    (&DAT_e000ed14)[byteValue & 0xf] = (character)((dataValue & 0xff) << 4);\n  }\n  else {\n    *(character *)((character)byteValue + -0x1fff1c00) = (character)((dataValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "byteValue",
                "param_2": "dataValue",
                "char": "character"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_enable_memory_access_00002798",
            "code": "\nvoid check_and_enable_memory_access_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_memory_access_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_enable_memory_access_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  enableFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "set_flag_bit_0000294c": "enableFlag"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 get_base_address_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_flag_and_save_0000285c",
            "code": "\n\n\nvoid set_flag_and_save_0000285c(undefined4 flag_value)\n\n{\n  _DAT_4003d000 = flag_value;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_flag_and_save_0000285c",
                "param_1": "flag_value"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 dataValue1,undefined4 dataValue2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = dataValue1;\n  DAT_1fff0da4 = dataValue2;\n  update_data_00002744(0x2e,10);\n  set_bit_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "dataValue1",
                "param_3": "dataValue2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_value_000028f0",
            "code": "\n\n\nint incrementDataValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_settings_00002910",
            "code": "\n\n\nvoid clearSettings_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_settings_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_bit_0000294c",
            "code": "\n\n\nvoid setFlagBit_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_bit_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "check_and_execute_functions_00002994",
            "code": "\n\n\nvoid check_and_execute_functions_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  check_and_enable_memory_access_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "check_and_execute_functions_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "process_data_00002a00",
            "code": "\nvoid processData_00002a00(undefined4 data)\n\n{\n  modifyData(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "process_data_00002a00",
                "param_1": "data",
                "process_and_modify_data_00004cb4": "modifyData"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_in_array_00002a18",
            "code": "\nint find_value_in_array_00002a18(int *array,undefined4 value)\n\n{\n  int comparison_result;\n  int *array_ptr;\n  undefined **reboot_string_ptr;\n  uint index;\n  int *current_ptr;\n  \n  array_ptr = array;\n  reboot_string_ptr = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_ptr = (&array_ptr)[index];\n    if (current_ptr != (int *)0x0) {\n      for (; *current_ptr != 0; current_ptr = current_ptr + 3) {\n        comparison_result = compare_byte_arrays_00004e52(*current_ptr,value);\n        if (comparison_result == 0) {\n          return current_ptr[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_in_array_00002a18",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "comparison_result",
                "local_18": "array_ptr",
                "local_14": "reboot_string_ptr",
                "local_10": "index",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commands)\n\n{\n  int *currentCommand;\n  undefined **commandNames;\n  uint commandIndex;\n  int *currentParameter;\n  \n  process_and_initialize_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_data_00004db8(\"---------------------------------------\");\n  currentCommand = commands;\n  commandNames = &PTR_s_reboot_00007300;\n  for (commandIndex = 0; commandIndex < 2; commandIndex = commandIndex + 1) {\n    currentParameter = (&currentCommand)[commandIndex];\n    if (currentParameter != (int *)0x0) {\n      for (; *currentParameter != 0; currentParameter = currentParameter + 3) {\n        process_and_initialize_00004c84(\"%-20s %s\\n\",*currentParameter,currentParameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "currentCommand",
                "local_14": "commandNames",
                "local_10": "commandIndex",
                "local_c": "currentParameter"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_command_line_00002b10",
            "code": "\nvoid processCommandLine_00002b10(undefined4 command,byte *inputBuffer)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *commandList [3];\n  code *commandHandler;\n  char **commandArgs;\n  uint numArgs;\n  byte quoteChar;\n  char *currentChar;\n  char *currentArg;\n  char **argPtr;\n  uint i;\n  int numSlashes;\n  uint numCommands;\n  byte *currentPos;\n  \n  numCommands = 0;\n  numSlashes = 0;\n  currentPos = inputBuffer;\n  while( true ) {\n    commandList[0] = inputBuffer;\n    commandList[1] = (byte *)command;\n    if (0x20 < *currentPos) {\n      if ((*currentPos == 0x22) || (*currentPos == 0x27)) {\n        quoteChar = *currentPos;\n        do {\n          pbVar2 = currentPos + 1;\n          if (*pbVar2 == 0) {\n            currentPos = pbVar2;\n            process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            numSlashes = numSlashes + 1;\n            currentPos = currentPos + 2;\n            pbVar2 = currentPos;\n            if (*currentPos == 0) {\n              process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentPos = pbVar2;\n        } while (quoteChar != *currentPos);\n        if (0x20 < currentPos[1]) {\n          process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentPos == 0x5c) {\n            numSlashes = numSlashes + 1;\n            currentPos = currentPos + 1;\n            if (*currentPos == 0) {\n              process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentPos = currentPos + 1;\n          if (*currentPos == 0x22) {\n            process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentPos);\n      }\n      numCommands = numCommands + 1;\n    }\n    if (*currentPos == 0) break;\n    *currentPos = 0;\n    currentPos = currentPos + 1;\n  }\n  if (numCommands != 0) {\n    numArgs = numCommands;\n    commandArgs = (char **)((int)commandList - ((numCommands + 1) * 4 + 7 & 0xfffffff8));\n    commandArgs[numCommands] = (char *)0x0;\n    currentPos = inputBuffer;\n    for (i = 0; argPtr = commandArgs, i < numCommands; i = i + 1) {\n      for (; *currentPos == 0; currentPos = currentPos + 1) {\n      }\n      if ((*currentPos == 0x22) || (*currentPos == 0x27)) {\n        currentPos = currentPos + 1;\n      }\n      commandArgs[i] = (char *)currentPos;\n      for (; *currentPos != 0; currentPos = currentPos + 1) {\n      }\n    }\n    for (; (numSlashes != 0 && (*argPtr != (char *)0x0)); argPtr = argPtr + 1) {\n      for (currentArg = *argPtr; *currentArg != '\\0'; currentArg = currentArg + 1) {\n        if (*currentArg == '\\') {\n          for (currentChar = currentArg; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          numSlashes = numSlashes + -1;\n          if (numSlashes == 0) break;\n        }\n      }\n    }\n    commandHandler = (code *)find_value_in_array_00002a18(command,*commandArgs);\n    if (commandHandler == (code *)0x0) {\n      iVar1 = compare_byte_arrays_00004e52(&DAT_00007214,*commandArgs);\n      if (iVar1 == 0) {\n        print_command_descriptions_00002a88(commandList[1]);\n      }\n      else {\n        process_and_initialize_00004c84(\"shell: command not found: %s\\n\",*commandArgs);\n      }\n    }\n    else {\n      (*commandHandler)(numCommands,commandArgs);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_command_line_00002b10",
                "param_1": "command",
                "param_2": "inputBuffer",
                "local_48": "commandList",
                "local_3c": "commandHandler",
                "local_38": "commandArgs",
                "local_34": "numArgs",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentArg",
                "local_24": "argPtr",
                "local_20": "i",
                "local_1c": "numSlashes",
                "local_18": "numCommands",
                "local_14": "currentPos"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint processInput_00002d94(undefined *inputBuffer,int bufferSize)\n\n{\n  int value;\n  byte isFirstChar;\n  bool isFirstCharEqualParam;\n  undefined *currentChar;\n  \n  currentChar = inputBuffer;\n  while( true ) {\n    if (bufferSize + -1 <= (int)currentChar - (int)inputBuffer) {\n      return 0xffffffff;\n    }\n    value = process_and_retrieve_value_00004418();\n    if (value < 0) break;\n    if ((value == 0xd) || (value == 10)) {\n      *currentChar = 0;\n      process_data_00002a00(0xd);\n      process_data_00002a00(10);\n      isFirstCharEqualParam = currentChar == inputBuffer;\n      if (isFirstCharEqualParam) {\n        inputBuffer = (undefined *)0x1;\n      }\n      isFirstChar = (byte)inputBuffer;\n      if (!isFirstCharEqualParam) {\n        isFirstChar = 0;\n      }\n      return (uint)isFirstChar;\n    }\n    if ((value == 8) || (value == 0x7f)) {\n      if (currentChar != inputBuffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        process_data_00002a00(8);\n        process_data_00002a00(0x20);\n        process_data_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)value;\n      process_data_00002a00(value);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "inputBuffer",
                "param_2": "bufferSize",
                "iVar1": "value",
                "bVar2": "isFirstChar",
                "bVar3": "isFirstCharEqualParam",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_data_processing_00002e48",
            "code": "\nvoid initializeDataProcessing_00002e48(void)\n\n{\n  processData(0x3e);\n  processData(0x20);\n  processRelEntries(*(undefined4 *)(relEntries[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_data_processing_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relEntries",
                "r_offset": "offset",
                "process_data_00002a00": "processData",
                "process_rel_entries_000041d0": "processRelEntries"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "continuous_processing_00002e6c",
            "code": "\nvoid continuousProcessing_00002e6c(undefined4 inputParam,undefined4 dataParam1,undefined4 dataParam2)\n\n{\n  int result;\n  \n  initializeDataProcessing();\n  do {\n    result = processInput(dataParam1,dataParam2);\n    if (result == 0) {\n      processCommandLine(inputParam,dataParam1);\n    }\n    initializeDataProcessing();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "continuous_processing_00002e6c",
                "param_1": "inputParam",
                "param_2": "dataParam1",
                "param_3": "dataParam2",
                "initialize_data_processing_00002e48": "initializeDataProcessing",
                "process_input_00002d94": "processInput",
                "process_command_line_00002b10": "processCommandLine",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "initialize_data_synchronization_00002e9c",
            "code": "\nundefined4 initializeDataSynchronization_00002e9c(void)\n\n{\n  waitForDataSynchronization();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "initialize_data_synchronization_00002e9c",
                "wait_for_data_synchronization_00003688": "waitForDataSynchronization"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "print_process_status_00002eb4",
            "code": "\nundefined4 print_process_status_00002eb4(void)\n\n{\n  print_process_status_00002eb4_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "print_process_status_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 classString;\n  undefined4 deviceName;\n  undefined dataBuffer [8];\n  uint bufferSize;\n  \n  bufferSize = execute_function_00003d64(deviceInfo,dataBuffer);\n  if ((int)bufferSize < 1) {\n    process_and_initialize_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceName = *(undefined4 *)(deviceInfo + 8);\n    classString = get_class_from_param_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    process_and_initialize_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceName,classString);\n    display_data_object_00003694(dataBuffer,bufferSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "classString",
                "uVar2": "deviceName",
                "auStack_1c": "dataBuffer",
                "local_14": "bufferSize"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_device_data_00002f30",
            "code": "\nvoid process_device_data_00002f30(void)\n\n{\n  int counter;\n  undefined4 *device_ptr;\n  \n  counter = 0;\n  for (device_ptr = DAT_1fff0db0; device_ptr != (undefined4 *)0x0; device_ptr = (undefined4 *)*device_ptr) {\n    read_from_device_00002ecc(counter,device_ptr);\n    process_data_00004db8(&DAT_00007380);\n    counter = counter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_device_data_00002f30",
                "local_10": "counter",
                "local_c": "device_ptr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "list_devices_00002f74",
            "code": "\nvoid listDevices_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceIndex;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceIndex = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    process_data_00004db8(\"No devices found\");\n  }\n  else {\n    process_data_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceClass = get_class_from_param_000039e8(*(undefined *)(deviceList[3] + 8));\n    process_and_initialize_00004c84(\"#%i\\t%s\\t%s\\n\",deviceIndex,deviceClass,deviceList[2]);\n    deviceIndex = deviceIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "list_devices_00002f74",
                "local_18": "deviceIndex",
                "local_14": "deviceList",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_00002fe0",
            "code": "\nvoid process_device_00002fe0(int argument_count,undefined4 *argument_list)\n\n{\n  int comparison_result;\n  undefined4 parsed_number;\n  \n  if (argument_count < 3) {\n    process_and_initialize_00004c84(\"usage: %s %s <device id>|all\\n\",*argument_list,argument_list[1]);\n  }\n  else {\n    comparison_result = compare_byte_arrays_00004e52(argument_list[2],&DAT_000073d4);\n    if (comparison_result == 0) {\n      process_device_00002fe0_data_00002f30();\n    }\n    else {\n      parsed_number = parse_and_process_number_00004042(argument_list[2]);\n      comparison_result = find_element_00003d24(parsed_number);\n      if (comparison_result == 0) {\n        process_data_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        read_from_device_00002ecc(parsed_number,comparison_result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_00002fe0",
                "param_1": "argument_count",
                "param_2": "argument_list",
                "iVar1": "comparison_result",
                "uVar2": "parsed_number"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 parsedNumber;\n  undefined2 values [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceID;\n  int index;\n  \n  if (argc < 4) {\n    process_and_initialize_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceID = parse_and_process_number_00004042(argv[2]);\n    deviceIndex = find_element_00003d24(deviceID);\n    if (deviceIndex == 0) {\n      process_data_00004db8(\"error: undefined device given\");\n    }\n    else {\n      fill_memory_with_byte_00004622(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (index = 0; index < (int)numValues; index = index + 1) {\n        parsedNumber = parse_and_process_number_00004042(argv[index + 3]);\n        values[index] = parsedNumber;\n      }\n      process_and_initialize_00004c84(\"Writing to device #%i - %s\\n\",deviceID,*(undefined4 *)(deviceIndex + 8));\n      display_data_object_00003694(values,numValues & 0xff);\n      numValues = execute_function_00003d94(deviceIndex,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          process_and_initialize_00004c84(\"error: device #%i is not writable\\n\",deviceID);\n        }\n        else {\n          process_and_initialize_00004c84(\"error: failure to write to device #%i\\n\",deviceID);\n        }\n      }\n      else {\n        process_and_initialize_00004c84(\"data successfully written to device #%i\\n\",deviceID);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "parsedNumber",
                "auStack_20": "values",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceID",
                "local_c": "index"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_device_operation_0000316c",
            "code": "\nundefined4 handle_device_operation_0000316c(int device_type,undefined4 *arguments)\n\n{\n  int comparison_result;\n  \n  if (device_type < 2) {\n    list_devices_00002f74();\n  }\n  else {\n    comparison_result = compare_byte_arrays_00004e52(arguments[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      process_device_00002fe0(device_type,arguments);\n    }\n    else {\n      comparison_result = compare_byte_arrays_00004e52(arguments[1],\"write\");\n      if (comparison_result == 0) {\n        write_to_device_0000305c(device_type,arguments);\n      }\n      else {\n        process_and_initialize_00004c84(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_device_operation_0000316c",
                "param_1": "device_type",
                "param_2": "arguments",
                "iVar1": "comparison_result"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int monthOffset;\n  \n  monthOffset = month;\n  if (month < 3) {\n    monthOffset = 1;\n  }\n  isLeapYear = (byte)monthOffset;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  monthOffset = year;\n  if (year < 0) {\n    monthOffset = year + 3;\n  }\n  return ((((monthOffset >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)Elf32_Rel_ARRAY_1fff0200 + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "monthOffset"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_and_calculate_date_0000328c",
            "code": "\nundefined4 parseAndCalculateDate_0000328c(undefined4 *inputArray,int *outputArray)\n\n{\n  int iVar1;\n  int currentIndex;\n  short parsedNumber;\n  \n  parsedNumber = parse_number_00004f84(*inputArray,&currentIndex,10);\n  outputArray[5] = parsedNumber + -0x76c;\n  parsedNumber = parse_number_00004f84(currentIndex + 1,&currentIndex,10);\n  outputArray[4] = parsedNumber + -1;\n  parsedNumber = parse_number_00004f84(currentIndex + 1,&currentIndex,10);\n  outputArray[3] = (int)parsedNumber;\n  parsedNumber = parse_number_00004f84(inputArray[1],&currentIndex,10);\n  outputArray[2] = (int)parsedNumber;\n  parsedNumber = parse_number_00004f84(currentIndex + 1,&currentIndex,10);\n  outputArray[1] = (int)parsedNumber;\n  parsedNumber = parse_number_00004f84(currentIndex + 1,&currentIndex,10);\n  *outputArray = (int)parsedNumber;\n  iVar1 = calculate_day_of_week_000031fc(outputArray[5] + 0x76c,outputArray[4] + 1,outputArray[3]);\n  outputArray[6] = iVar1;\n  outputArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_and_calculate_date_0000328c",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "local_10": "currentIndex",
                "local_a": "parsedNumber"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_formatted_date_time_00003378",
            "code": "\nundefined4 printFormattedDateTime_00003378(undefined4 *dateTimeParams)\n\n{\n  process_and_initialize_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",dateTimeParams[5] + 0x76c,dateTimeParams[4] + 1,dateTimeParams[3],\n               dateTimeParams[2],dateTimeParams[1],*dateTimeParams);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_formatted_date_time_00003378",
                "param_1": "dateTimeParams"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_status_000033c0",
            "code": "\nbool checkAlarmStatus_000033c0(void)\n\n{\n  int result;\n  undefined dataBuffer [36];\n  \n  result = process_data_00002690(dataBuffer);\n  if (result != 0) {\n    process_data_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    print_formatted_date_time_00003378(dataBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_status_000033c0",
                "iVar1": "result",
                "auStack_2c": "dataBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "handle_alarm_000033f4",
            "code": "\nundefined4 handleAlarm_000033f4(undefined4 input)\n\n{\n  int parseResult;\n  undefined4 returnVal;\n  undefined dateBuffer [36];\n  \n  parseResult = parse_and_calculate_date_0000328c(input,dateBuffer);\n  if (parseResult == 0) {\n    parseResult = initialize_and_set_next_date_00002654(dateBuffer,0x31e1,0);\n    if (parseResult == -1) {\n      process_data_00004db8(\"rtc: error setting alarm\");\n      returnVal = 1;\n    }\n    else {\n      returnVal = 0;\n    }\n  }\n  else {\n    returnVal = 1;\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "handle_alarm_000033f4",
                "param_1": "input",
                "iVar1": "parseResult",
                "uVar2": "returnVal",
                "auStack_2c": "dateBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_calculate_date_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_and_set_next_date_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_and_print_date_from_rtc_00003444",
            "code": "\nbool getAndPrintDateFromRTC_00003444(void)\n\n{\n  int result;\n  undefined dateComponents [36];\n  \n  result = initialize_date_components_00002624(dateComponents);\n  if (result != 0) {\n    process_data_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    print_formatted_date_time_00003378(dateComponents);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_and_print_date_from_rtc_00003444",
                "auStack_2c": "dateComponents",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "process_date_00003478",
            "code": "\nundefined4 processDate_00003478(undefined4 date)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined dateString [36];\n  \n  result = parse_and_calculate_date_0000328c(date,dateString);\n  if (result == 0) {\n    result = calculate_and_save_next_date_00002600(dateString);\n    if (result == -1) {\n      process_data_00004db8(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "process_date_00003478",
                "param_1": "date",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "dateString"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_and_calculate_date_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = calculate_and_save_next_date_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  process_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_data_00004db8(\"commands:\");\n  process_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int numParams,int commandParams)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (numParams < 2) {\n    print_usage_000034c0();\n    returnValue = 1;\n  }\n  else {\n    result = calculate_difference_00004e66(*(undefined4 *)(commandParams + 4),\"poweron\",7);\n    if (result == 0) {\n      set_flag_bit_000026d8();\n    }\n    else {\n      result = calculate_difference_00004e66(*(undefined4 *)(commandParams + 4),\"poweroff\",8);\n      if (result == 0) {\n        clear_interrupt_flag_000026e4();\n      }\n      else {\n        result = calculate_difference_00004e66(*(undefined4 *)(commandParams + 4),\"clearalarm\",8);\n        if (result == 0) {\n          initialize_settings_000026c0();\n        }\n        else {\n          result = calculate_difference_00004e66(*(undefined4 *)(commandParams + 4),\"getalarm\",8);\n          if (result == 0) {\n            check_alarm_status_000033c0();\n          }\n          else {\n            result = calculate_difference_00004e66(*(undefined4 *)(commandParams + 4),\"setalarm\",8);\n            if ((result == 0) && (numParams == 4)) {\n              handle_alarm_000033f4(commandParams + 8);\n            }\n            else {\n              result = calculate_difference_00004e66(*(undefined4 *)(commandParams + 4),\"gettime\",7);\n              if (result == 0) {\n                get_and_print_date_from_rtc_00003444();\n              }\n              else {\n                result = calculate_difference_00004e66(*(undefined4 *)(commandParams + 4),\"settime\",7);\n                if ((result != 0) || (numParams != 4)) {\n                  process_and_initialize_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandParams + 4));\n                  print_usage_000034c0();\n                  return 1;\n                }\n                process_date_00003478(commandParams + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "numParams",
                "param_2": "commandParams",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "wait_for_data_synchronization_00003658",
            "code": "\nvoid waitForDataSynchronization_00003658(void)\n\n{\n  synchronizeData(0xf);\n  synchronizeData(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "wait_for_data_synchronization_00003658",
                "DataSynchronizationBarrier": "synchronizeData"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "wait_for_data_synchronization_00003688",
            "code": "\nvoid waitForDataSynchronization_00003688(void)\n\n{\n  waitForDataSync();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "wait_for_data_synchronization_00003688",
                "wait_for_data_synchronization_00003658": "waitForDataSync"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObject,byte length)\n\n{\n  undefined4 memoryAddress;\n  char bitValue;\n  uint bitMask;\n  bool isSet;\n  undefined formatBuffer [8];\n  int bufferLength;\n  char decodedValue;\n  byte index;\n  \n  if ((dataObject == 0) || (3 < length)) {\n    process_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_and_initialize_00004c84(\"Data:\");\n    for (index = 0; index < length; index = index + 1) {\n      if (*(byte *)(dataObject + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObject + 6) & 0x8018f;\n        isSet = bitMask != 0;\n        if (isSet) {\n          bitMask = 1;\n        }\n        bitValue = (char)bitMask;\n        if (!isSet) {\n          bitValue = '\\0';\n        }\n        if (bitValue == '\\0') goto LAB_000036ee;\n        decodedValue = '\\0';\n      }\n      else {\nLAB_000036ee:\n        decodedValue = decode_value_00003918((int)*(char *)(dataObject + 7));\n      }\n      process_and_initialize_00004c84(&DAT_000077bc);\n      if (length < 2) {\n        process_and_initialize_00004c84(\"     \");\n      }\n      else {\n        process_and_initialize_00004c84(\"[%u] \",index);\n      }\n      if (decodedValue == '\\0') {\n        if (*(char *)(dataObject + 7) == '\\0') {\n          process_and_initialize_00004c84(&DAT_000077d8,(int)*(short *)(dataObject + (uint)index * 2));\n        }\n        else if ((*(char *)(dataObject + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObject + 7),4)) &&\n                (*(char *)(dataObject + 7) < '\\0')) {\n          bufferLength = format_and_return_number_00003e9e(formatBuffer,(int)*(short *)(dataObject + (uint)index * 2),\n                                  (int)*(char *)(dataObject + 7));\n          formatBuffer[bufferLength] = 0;\n          process_and_initialize_00004c84(&DAT_000077dc,formatBuffer);\n        }\n        else {\n          process_and_initialize_00004c84(\"%iE%i\",(int)*(short *)(dataObject + (uint)index * 2),\n                       (int)*(char *)(dataObject + 7));\n        }\n      }\n      else {\n        process_and_initialize_00004c84(\"%6d %c\",(int)*(short *)(dataObject + (uint)index * 2),decodedValue);\n      }\n      memoryAddress = get_memory_address_00003810(*(undefined *)(dataObject + 6));\n      process_and_initialize_00004c84(&DAT_000077e8,memoryAddress);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObject",
                "param_2": "length",
                "uVar1": "memoryAddress",
                "cVar2": "bitValue",
                "uVar3": "bitMask",
                "bVar4": "isSet",
                "auStack_18": "formatBuffer",
                "local_10": "bufferLength",
                "local_a": "decodedValue",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined input)\n\n{\n  undefined *result;\n  \n  switch(input) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "decode_value_00003918",
            "code": "\nundefined4 decodeValue_00003918(undefined input)\n\n{\n  undefined4 decodedValue;\n  \n  switch(input) {\n  case 2:\n    decodedValue = 0x68;\n    break;\n  case 3:\n    decodedValue = 0x6b;\n    break;\n  case 6:\n    decodedValue = 0x4d;\n    break;\n  case 9:\n    decodedValue = 0x47;\n    break;\n  case 0xc:\n    decodedValue = 0x54;\n    break;\n  case 0xf:\n    decodedValue = 0x50;\n    break;\n  case 0xf1:\n    decodedValue = 0x66;\n    break;\n  default:\n    decodedValue = 0;\n    break;\n  case 0xf4:\n    decodedValue = 0x70;\n    break;\n  case 0xf7:\n    decodedValue = 0x6e;\n    break;\n  case 0xfa:\n    decodedValue = 0x75;\n    break;\n  case 0xfd:\n    decodedValue = 0x6d;\n  }\n  return decodedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "decode_value_00003918",
                "param_1": "input",
                "uVar1": "decodedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_from_param_000039e8",
            "code": "\nchar * getClassFromParam_000039e8(char param)\n\n{\n  char *className;\n  \n  switch(param) {\n  case '\\0':\n    className = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    className = \"ACT_ANY\";\n    break;\n  case 'B':\n    className = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    className = \"ACT_SERVO\";\n    break;\n  case 'D':\n    className = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    className = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    className = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    className = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    className = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    className = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    className = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    className = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    className = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    className = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    className = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    className = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    className = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    className = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    className = \"SENSE_UV\";\n    break;\n  case -0x74:\n    className = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    className = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    className = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    className = \"SENSE_CO2\";\n    break;\n  default:\n    if (param == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    className = \"CLASS_UNKNOWN\";\n  }\n  return className;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_from_param_000039e8",
                "param_1": "param",
                "pcVar1": "className"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_00003d24",
            "code": "\nundefined4 * findElement_00003d24(int target)\n\n{\n  int count;\n  undefined4 *currentElement;\n  \n  count = 0;\n  for (currentElement = DAT_1fff0db0; (count < target && (currentElement != (undefined4 *)0x0));\n      currentElement = (undefined4 *)*currentElement) {\n    count = count + 1;\n  }\n  return currentElement;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_00003d24",
                "param_1": "target",
                "local_10": "count",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 value)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),value);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "value",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int functionPointer,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "functionPointer",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputOffset,uint number)\n\n{\n  uint remainder;\n  char *result;\n  uint divisor;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (divisor = 10; divisor <= number; divisor = divisor * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputOffset != 0) {\n    result = (char *)(digitCount + inputOffset);\n    remainder = number;\n    do {\n      result = result + -1;\n      *result = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputOffset",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "result",
                "local_10": "divisor",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "count_digits_with_sign_00003e58",
            "code": "\nint count_digits_with_sign_00003e58(undefined *input_str,int num)\n\n{\n  int iVar1;\n  int abs_num;\n  undefined *updated_str;\n  \n  abs_num = num;\n  updated_str = input_str;\n  if (-(num >> 0x1f) != 0) {\n    if (input_str != (undefined *)0x0) {\n      updated_str = input_str + 1;\n      *input_str = 0x2d;\n    }\n    abs_num = -num;\n  }\n  iVar1 = count_digits_00003dc4(updated_str,abs_num);\n  return -(num >> 0x1f) + iVar1;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "count_digits_with_sign_00003e58",
                "param_1": "input_str",
                "param_2": "num",
                "local_18": "abs_num",
                "local_14": "updated_str"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_and_return_number_00003e9e",
            "code": "\nundefined4 formatAndReturnNumber_00003e9e(undefined4 inputNumber,short inputShort,undefined4 inputData)\n\n{\n  undefined4 formattedNumber;\n  \n  formattedNumber = format_number_00003ec4(inputNumber,(int)inputShort,inputData);\n  return formattedNumber;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_and_return_number_00003e9e",
                "param_1": "inputNumber",
                "param_2": "inputShort",
                "param_3": "inputData",
                "uVar1": "formattedNumber"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_number_00003ec4",
            "code": "\nint format_number_00003ec4(undefined *output_buffer,uint number,int num_digits)\n\n{\n  int count;\n  undefined4 digits;\n  uint divisor;\n  int remainder;\n  int count_digits;\n  \n  if (num_digits + 7 < 0 != SCARRY4(num_digits,7)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  count_digits = 0;\n  if (num_digits == 0) {\n    count_digits = count_digits_with_sign_00003e58(output_buffer,number);\n  }\n  else if (num_digits < 1) {\n    divisor = number / *(uint *)(&DAT_00007978 + num_digits * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + num_digits * -4) * divisor;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((divisor == 0) && ((int)number < 0)) {\n      if (output_buffer != (undefined *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      count_digits = 1;\n    }\n    if (output_buffer == (undefined *)0x0) {\n      count = count_digits_with_sign_00003e58(0,divisor);\n      count_digits = count + 1 + count_digits;\n    }\n    else {\n      count = count_digits_with_sign_00003e58(output_buffer + count_digits,divisor);\n      count = count_digits + count;\n      count_digits = count + 1;\n      output_buffer[count] = 0x2e;\n      digits = count_digits_with_sign_00003e58(output_buffer + count_digits,remainder);\n      copy_and_fill_memory_00003ff4(output_buffer + count_digits,digits,-num_digits,0x30);\n    }\n    count_digits = -num_digits + count_digits;\n  }\n  else {\n    count_digits = count_digits_with_sign_00003e58(output_buffer,number);\n    if (output_buffer != (undefined *)0x0) {\n      fill_memory_with_byte_00004622(output_buffer + count_digits,0x30,num_digits);\n    }\n    count_digits = num_digits + count_digits;\n  }\n  return count_digits;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_number_00003ec4",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "num_digits",
                "iVar1": "count",
                "uVar2": "digits",
                "uVar3": "divisor",
                "local_10": "remainder",
                "local_c": "count_digits"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_memory_00003ff4",
            "code": "\nuint copyAndFillMemory_00003ff4(int length,uint src,uint dest,undefined byte)\n\n{\n  uint result;\n  \n  result = src;\n  if ((src < dest) && (result = dest, length != 0)) {\n    copy_and_reverse_000045ee((dest - src) + length,length,src);\n    fill_memory_with_byte_00004622(length,byte,dest - src);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_memory_00003ff4",
                "param_1": "length",
                "param_2": "src",
                "param_3": "dest",
                "param_4": "byte",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_and_process_number_00004042",
            "code": "\nvoid parse_and_process_number_00004042(undefined4 input_number)\n\n{\n  parse_number(input_number,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_and_process_number_00004042",
                "param_1": "input_number",
                "parse_number_00004f84": "parse_number"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *inputArray,int *dataArray)\n\n{\n  int count;\n  int *tempArray;\n  uint tempVar1;\n  ushort tempVar2;\n  int tempVar3;\n  code *decodeFunction;\n  int loopCount;\n  uint tempVar4;\n  bool isZero;\n  \n  tempVar2 = *(ushort *)(dataArray + 3);\n  tempVar1 = (uint)tempVar2;\n  if ((int)(tempVar1 << 0x1c) < 0) {\n    count = dataArray[4];\n    if (count != 0) {\n      tempVar3 = tempVar1 << 0x1e;\n      isZero = tempVar3 == 0;\n      loopCount = *dataArray;\n      if (isZero) {\n        tempVar3 = dataArray[5];\n      }\n      *dataArray = count;\n      if (!isZero) {\n        tempVar3 = 0;\n      }\n      dataArray[2] = tempVar3;\n      for (loopCount = loopCount - count; 0 < loopCount; loopCount = loopCount - tempVar3) {\n        tempVar3 = (*(code *)dataArray[10])(inputArray,dataArray[8],count,loopCount);\n        if (tempVar3 < 1) {\n          *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) | 0x40;\n          return 0xffffffff;\n        }\n        count = count + tempVar3;\n      }\n    }\n  }\n  else {\n    if ((dataArray[1] < 1) && (dataArray[0x10] < 1)) {\n      return 0;\n    }\n    decodeFunction = (code *)dataArray[0xb];\n    if (decodeFunction == (code *)0x0) {\n      return 0;\n    }\n    tempVar4 = *inputArray;\n    *inputArray = 0;\n    if ((tempVar2 & 0x1000) == 0) {\n      count = (*decodeFunction)(inputArray,dataArray[8],tempVar1 & 0x1000,1);\n      if ((count == -1) && (tempVar1 = *inputArray, tempVar1 != 0)) {\n        if ((tempVar1 == 0x1d) || (tempVar1 == 0x16)) {\n          *inputArray = tempVar4;\n          return 0;\n        }\n        tempVar2 = *(ushort *)(dataArray + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      count = dataArray[0x15];\n    }\n    if (((int)((uint)*(ushort *)(dataArray + 3) << 0x1d) < 0) &&\n       (count = count - dataArray[1], dataArray[0xd] != 0)) {\n      count = count - dataArray[0x10];\n    }\n    count = (*(code *)dataArray[0xb])(inputArray,dataArray[8],count,0);\n    tempVar2 = *(ushort *)(dataArray + 3);\n    if ((count == -1) &&\n       ((0x1d < *inputArray || (-1 < (int)((0x20400001U >> (*inputArray & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(dataArray + 3) = tempVar2 | 0x40;\n      return 0xffffffff;\n    }\n    dataArray[1] = 0;\n    *dataArray = dataArray[4];\n    if (((int)((uint)tempVar2 << 0x13) < 0) && ((count != -1 || (*inputArray == 0)))) {\n      dataArray[0x15] = count;\n    }\n    tempArray = (int *)dataArray[0xd];\n    *inputArray = tempVar4;\n    if (tempArray != (int *)0x0) {\n      if (tempArray != dataArray + 0x11) {\n        process_data_00004b34(inputArray);\n      }\n      dataArray[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "inputArray",
                "param_2": "dataArray",
                "iVar1": "count",
                "piVar2": "tempArray",
                "uVar3": "tempVar1",
                "uVar4": "tempVar2",
                "iVar5": "tempVar3",
                "pcVar6": "decodeFunction",
                "iVar7": "loopCount",
                "uVar8": "tempVar4",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int dataPointer,undefined4 *dataArray)\n\n{\n  undefined4 returnValue;\n  \n  if (dataArray[4] != 0) {\n    if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n      initialize_memory_and_process_params_000042a4();\n    }\n    if (dataArray == &DAT_000079b8) {\n      dataArray = *(undefined4 **)(dataPointer + 4);\n    }\n    else if (dataArray == (undefined4 *)&DAT_000079d8) {\n      dataArray = *(undefined4 **)(dataPointer + 8);\n    }\n    else if (dataArray == (undefined4 *)&DAT_00007998) {\n      dataArray = *(undefined4 **)(dataPointer + 0xc);\n    }\n    if (*(short *)(dataArray + 3) != 0) {\n      if ((-1 < (int)(dataArray[0x19] << 0x1f)) && (-1 < (int)*(short *)(dataArray + 3) << 0x16)) {\n        FUNC_000045e8(dataArray[0x16]);\n      }\n      returnValue = process_data_0000404c(dataPointer,dataArray);\n      if ((int)(dataArray[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(dataArray + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(dataArray[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "dataPointer",
                "param_2": "dataArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_rel_entries_000041d0",
            "code": "\nuint process_rel_entries_000041d0(int input_data,undefined4 param_2,undefined4 param_3)\n\n{\n  uint result;\n  int loop_counter;\n  dword *rel_entry;\n  int entry_offset;\n  uint final_result;\n  int inner_loop_counter;\n  undefined4 *pointer_to_data;\n  \n  if (input_data == 0) {\n    pointer_to_data = &DAT_000079f8;\n    rel_entry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    final_result = 0;\n    do {\n      inner_loop_counter = rel_entry[1];\n      entry_offset = rel_entry[2];\n      while (inner_loop_counter = inner_loop_counter + -1, -1 < inner_loop_counter) {\n        if ((1 < *(ushort *)(entry_offset + 0xc)) && (loop_counter = *(short *)(entry_offset + 0xe) + 1, loop_counter != 0)) {\n          result = process_data_00004158(0x1fff0284,entry_offset,param_3,loop_counter,pointer_to_data);\n          final_result = final_result | result;\n        }\n        entry_offset = entry_offset + 0x68;\n      }\n      rel_entry = (dword *)*rel_entry;\n    } while (rel_entry != (dword *)0x0);\n    return final_result;\n  }\n  final_result = process_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,input_data);\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_rel_entries_000041d0",
                "param_1": "input_data",
                "uVar1": "result",
                "iVar2": "loop_counter",
                "pdVar3": "rel_entry",
                "iVar4": "entry_offset",
                "uVar5": "final_result",
                "iVar6": "inner_loop_counter",
                "puVar7": "pointer_to_data"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_memory_000041f4",
            "code": "\nvoid initializeMemory_000041f4(undefined4 *memoryBlock,undefined2 value1,undefined2 value2)\n\n{\n  *memoryBlock = 0;\n  memoryBlock[1] = 0;\n  memoryBlock[4] = 0;\n  memoryBlock[5] = 0;\n  memoryBlock[2] = 0;\n  *(undefined2 *)(memoryBlock + 3) = value1;\n  memoryBlock[0x19] = 0;\n  *(undefined2 *)((int)memoryBlock + 0xe) = value2;\n  memoryBlock[6] = 0;\n  fillMemoryWithByte(memoryBlock + 0x17,0,8);\n  memoryBlock[9] = 0x4dc9;\n  memoryBlock[10] = 0x4def;\n  memoryBlock[0xb] = 0x4e27;\n  memoryBlock[8] = memoryBlock;\n  memoryBlock[0xc] = &label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_memory_000041f4",
                "param_1": "memoryBlock",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_with_byte_00004622": "fillMemoryWithByte",
                "LAB_00004e4a_1": "label"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_and_fill_buffer_00004248",
            "code": "\nundefined4 * allocate_and_fill_buffer_00004248(undefined4 input_param,int num_elements)\n\n{\n  undefined4 *buffer_ptr;\n  int buffer_size;\n  \n  buffer_size = (num_elements + -1) * 0x68;\n  buffer_ptr = (undefined4 *)allocate_buffer_00004bd0(input_param,buffer_size + 0x74);\n  if (buffer_ptr != (undefined4 *)0x0) {\n    *buffer_ptr = 0;\n    buffer_ptr[1] = num_elements;\n    buffer_ptr[2] = buffer_ptr + 3;\n    fill_memory_with_byte_00004622(buffer_ptr + 3,0,buffer_size + 0x68);\n  }\n  return buffer_ptr;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_and_fill_buffer_00004248",
                "param_1": "input_param",
                "param_2": "num_elements",
                "puVar1": "buffer_ptr",
                "iVar2": "buffer_size"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_memory_and_process_params_000042a4",
            "code": "\nvoid initializeMemoryAndProcessParams_000042a4(int memoryAddress)\n\n{\n  undefined4 status;\n  \n  initializeMemory();\n  if (*(int *)(memoryAddress + 0x18) == 0) {\n    *(undefined4 *)(memoryAddress + 0x48) = 0;\n    *(undefined4 *)(memoryAddress + 0x4c) = 0;\n    *(undefined4 *)(memoryAddress + 0x50) = 0;\n    status = 0x1fff0284;\n    *(undefined **)(memoryAddress + 0x28) = &DAT_0000423d;\n    if (memoryAddress == 0x1fff0284) {\n      status = 1;\n    }\n    if (memoryAddress == 0x1fff0284) {\n      *(undefined4 *)(memoryAddress + 0x18) = status;\n    }\n    status = initializeAndAllocateMemory(memoryAddress);\n    *(undefined4 *)(memoryAddress + 4) = status;\n    status = initializeAndAllocateMemory(memoryAddress);\n    *(undefined4 *)(memoryAddress + 8) = status;\n    status = initializeAndAllocateMemory(memoryAddress);\n    *(undefined4 *)(memoryAddress + 0xc) = status;\n    initializeMemoryWithData(*(undefined4 *)(memoryAddress + 4),4,0);\n    initializeMemoryWithData(*(undefined4 *)(memoryAddress + 8),9,1);\n    initializeMemoryWithData(*(undefined4 *)(memoryAddress + 0xc),0x12,2);\n    *(undefined4 *)(memoryAddress + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_memory_and_process_params_000042a4",
                "param_1": "memoryAddress",
                "uVar1": "status",
                "initialize_memory_0000428c": "initializeMemory",
                "initialize_and_allocate_memory_00004314": "initializeAndAllocateMemory",
                "initialize_memory_000041f4": "initializeMemoryWithData"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_and_allocate_memory_00004314",
            "code": "\nundefined4 * initialize_and_allocate_memory_00004314(undefined4 *memory_buffer)\n\n{\n  dword allocated_buffer_address;\n  int remaining_iterations;\n  undefined4 *current_buffer;\n  dword *current_relocation_entry;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    initialize_memory_and_process_params_000042a4(0x1fff0284);\n  }\n  current_relocation_entry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    remaining_iterations = current_relocation_entry[1];\n    current_buffer = (undefined4 *)current_relocation_entry[2];\n    while (remaining_iterations = remaining_iterations + -1, -1 < remaining_iterations) {\n      if (*(short *)(current_buffer + 3) == 0) {\n        current_buffer[3] = 0xffff0001;\n        current_buffer[0x19] = 0;\n        FUNC_000045e4(current_buffer + 0x16);\n        initialize_data_00004280();\n        current_buffer[1] = 0;\n        current_buffer[2] = 0;\n        current_buffer[4] = 0;\n        current_buffer[5] = 0;\n        *current_buffer = 0;\n        current_buffer[6] = 0;\n        fill_memory_with_byte_00004622(current_buffer + 0x17,0,8);\n        current_buffer[0xd] = 0;\n        current_buffer[0xe] = 0;\n        current_buffer[0x12] = 0;\n        current_buffer[0x13] = 0;\n        return current_buffer;\n      }\n      current_buffer = current_buffer + 0x1a;\n    }\n    if (*current_relocation_entry == 0) {\n      allocated_buffer_address = allocate_and_fill_buffer_00004248(memory_buffer,4);\n      *current_relocation_entry = allocated_buffer_address;\n      if (allocated_buffer_address == 0) {\n        initialize_data_00004280();\n        *memory_buffer = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    current_relocation_entry = (dword *)*current_relocation_entry;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_and_allocate_memory_00004314",
                "param_1": "memory_buffer",
                "dVar1": "allocated_buffer_address",
                "iVar2": "remaining_iterations",
                "puVar3": "current_buffer",
                "pdVar4": "current_relocation_entry"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_with_byte_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_fill_buffer_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int inputSize,code *callback)\n\n{\n  uint uVar1;\n  int *ptrArray;\n  int index;\n  uint result;\n  int count;\n  \n  ptrArray = (int *)(inputSize + 0x48);\n  result = 0;\n  do {\n    count = ptrArray[1];\n    index = ptrArray[2];\n    while (count = count + -1, -1 < count) {\n      if ((1 < *(ushort *)(index + 0xc)) && (*(short *)(index + 0xe) != -1)) {\n        uVar1 = (*callback)(index);\n        result = result | uVar1;\n      }\n      index = index + 0x68;\n    }\n    ptrArray = (int *)*ptrArray;\n  } while (ptrArray != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "inputSize",
                "param_2": "callback",
                "piVar2": "ptrArray",
                "iVar3": "index",
                "uVar4": "result",
                "iVar5": "count"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_and_retrieve_value_00004418",
            "code": "\nuint process_and_retrieve_value_00004418(void)\n\n{\n  dword r_offset;\n  uint value;\n  byte **pointer_array;\n  byte *byte_pointer;\n  \n  r_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  pointer_array = *(byte ***)(r_offset + 4);\n  if ((r_offset != 0) && (*(int *)(r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4();\n  }\n  if (pointer_array == (byte **)&DAT_000079b8) {\n    pointer_array = *(byte ***)(r_offset + 4);\n  }\n  else if (pointer_array == (byte **)&DAT_000079d8) {\n    pointer_array = *(byte ***)(r_offset + 8);\n  }\n  else if (pointer_array == (byte **)&DAT_00007998) {\n    pointer_array = *(byte ***)(r_offset + 0xc);\n  }\n  if ((-1 < (int)pointer_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer_array + 3) << 0x16))) {\n    FUNC_000045e8(pointer_array[0x16]);\n  }\n  byte_pointer = pointer_array[1];\n  pointer_array[1] = byte_pointer + -1;\n  if ((int)(byte_pointer + -1) < 0) {\n    value = process_and_retrieve_byte_00005e10(r_offset,pointer_array);\n  }\n  else {\n    byte_pointer = *pointer_array;\n    *pointer_array = byte_pointer + 1;\n    value = (uint)*byte_pointer;\n  }\n  if ((-1 < (int)pointer_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer_array + 3) << 0x16))) {\n    FUNC_000045ec(pointer_array[0x16]);\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_and_retrieve_value_00004418",
                "dVar1": "r_offset",
                "uVar2": "value",
                "ppbVar3": "pointer_array",
                "pbVar4": "byte_pointer"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateComponents_0000443c(undefined4 *dateParams,uint *dateComponents)\n\n{\n  int offset;\n  uint totalMinutes;\n  uint totalSeconds;\n  uint totalDays;\n  uint totalYears;\n  undefined4 firstParam;\n  undefined4 secondParam;\n  uint totalHours;\n  bool isNegative;\n  \n  firstParam = *dateParams;\n  secondParam = dateParams[1];\n  offset = calculateBoundsAndDivision(firstParam,secondParam,0x15180,0);\n  totalSeconds = 0x15180;\n  calculateBoundsAndDivision(firstParam,secondParam,0x15180,0);\n  isNegative = (int)totalSeconds < 0;\n  if (isNegative) {\n    totalSeconds = totalSeconds + 0x15180;\n  }\n  if (isNegative) {\n    totalMinutes = offset + 0xafa6b;\n  }\n  else {\n    totalMinutes = offset + 0xafa6c;\n  }\n  dateComponents[2] = totalSeconds / 0xe10;\n  dateComponents[1] = (totalSeconds % 0xe10) / 0x3c;\n  *dateComponents = (totalSeconds % 0xe10) % 0x3c;\n  dateComponents[6] = (totalMinutes + 3) % 7;\n  totalSeconds = totalMinutes;\n  if ((int)totalMinutes < 0) {\n    totalSeconds = totalMinutes - 0x23ab0;\n  }\n  totalMinutes = (totalSeconds / 0x23ab1) * -0x23ab1 + totalMinutes;\n  totalDays = ((totalMinutes / 0x8eac + totalMinutes) - totalMinutes / 0x5b4) - totalMinutes / 0x23ab0;\n  totalYears = totalDays / 0x16d;\n  totalMinutes = (totalYears / 100 - totalDays / 0x5b4) + totalMinutes + totalYears * -0x16d;\n  totalHours = totalMinutes * 5 + 2;\n  totalDays = totalHours / 0x99;\n  if (totalHours < 0x5fa) {\n    offset = 2;\n  }\n  else {\n    offset = -10;\n  }\n  totalHours = totalDays + offset;\n  offset = (totalSeconds / 0x23ab1) * 400 + totalYears;\n  if (totalHours < 2) {\n    offset = offset + 1;\n  }\n  if (totalMinutes < 0x132) {\n    if (((totalYears & 3) == 0) && (totalYears != (totalYears / 100) * 100)) {\n      totalSeconds = 1;\n    }\n    else {\n      totalSeconds = (uint)(totalYears % 400 == 0);\n    }\n    totalSeconds = totalMinutes + 0x3b + totalSeconds;\n  }\n  else {\n    totalSeconds = totalMinutes - 0x132;\n  }\n  dateComponents[7] = totalSeconds;\n  dateComponents[3] = (totalMinutes + 1) - (totalDays * 0x99 + 2) / 5;\n  dateComponents[4] = totalHours;\n  dateComponents[5] = offset - 0x76c;\n  dateComponents[8] = 0;\n  return dateComponents;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "dateParams",
                "param_2": "dateComponents",
                "uVar2": "totalMinutes",
                "uVar3": "totalSeconds",
                "uVar4": "totalDays",
                "uVar5": "totalYears",
                "uVar6": "firstParam",
                "uVar7": "secondParam",
                "uVar8": "totalHours",
                "bVar9": "isNegative",
                "iVar1": "offset",
                "calculate_bounds_and_division_00006974": "calculateBoundsAndDivision"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_function_set_0000459c",
            "code": "\nvoid executeFunctionSet_0000459c(void)\n\n{\n  code **functionPointer;\n  int index;\n  \n  functionPointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  initialize_data_00000410();\n  functionPointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_function_set_0000459c",
                "ppcVar1": "functionPointer",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *dest,undefined *src,int size)\n\n{\n  undefined *destEnd;\n  undefined *srcEnd;\n  \n  srcEnd = src + size;\n  if ((src < dest) && (dest < srcEnd)) {\n    destEnd = dest + size;\n    while (destEnd != dest) {\n      srcEnd = srcEnd + -1;\n      destEnd = destEnd + -1;\n      *destEnd = *srcEnd;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcEnd; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destEnd",
                "puVar2": "srcEnd"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_with_byte_00004622",
            "code": "\nvoid fillMemoryWithByte_00004622(undefined *destination,undefined byteToFill,int length)\n\n{\n  undefined *endOfDestination;\n  \n  endOfDestination = destination + length;\n  for (; destination != endOfDestination; destination = destination + 1) {\n    *destination = byteToFill;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_with_byte_00004622",
                "param_1": "destination",
                "param_2": "byteToFill",
                "param_3": "length",
                "puVar1": "endOfDestination"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid updateDate_00004634(uint *dateArray,uint dayIncrement,undefined4 unknownParam)\n\n{\n  int daysInMonth;\n  uint days;\n  uint leapYearDays;\n  int months;\n  bool isNegative;\n  uint *remainderArray;\n  uint currentDay;\n  undefined4 unknownStack;\n  \n  remainderArray = dateArray;\n  currentDay = dayIncrement;\n  unknownStack = unknownParam;\n  if (0x3b < *dateArray) {\n    divide_and_store_remainder_00005584(&remainderArray,*dateArray,0x3c);\n    days = dateArray[1] + (int)remainderArray;\n    dateArray[1] = days;\n    if ((int)currentDay < 0) {\n      days = days - 1;\n      *dateArray = currentDay + 0x3c;\n    }\n    else {\n      *dateArray = currentDay;\n    }\n    if ((int)currentDay < 0) {\n      dateArray[1] = days;\n    }\n  }\n  if (0x3b < dateArray[1]) {\n    divide_and_store_remainder_00005584(&remainderArray,dateArray[1],0x3c);\n    isNegative = (int)currentDay < 0;\n    leapYearDays = dateArray[2] + (int)remainderArray;\n    dateArray[2] = leapYearDays;\n    days = currentDay;\n    if (isNegative) {\n      days = currentDay + 0x3c;\n      leapYearDays = leapYearDays - 1;\n    }\n    if (!isNegative) {\n      dateArray[1] = days;\n    }\n    if (isNegative) {\n      dateArray[1] = days;\n    }\n    if (isNegative) {\n      dateArray[2] = leapYearDays;\n    }\n  }\n  if (0x17 < dateArray[2]) {\n    divide_and_store_remainder_00005584(&remainderArray,dateArray[2],0x18);\n    isNegative = (int)currentDay < 0;\n    leapYearDays = dateArray[3] + (int)remainderArray;\n    dateArray[3] = leapYearDays;\n    days = currentDay;\n    if (isNegative) {\n      days = currentDay + 0x18;\n      leapYearDays = leapYearDays - 1;\n    }\n    if (!isNegative) {\n      dateArray[2] = days;\n    }\n    if (isNegative) {\n      dateArray[2] = days;\n    }\n    if (isNegative) {\n      dateArray[3] = leapYearDays;\n    }\n  }\n  if (0xb < dateArray[4]) {\n    divide_and_store_remainder_00005584(&remainderArray,dateArray[4],0xc);\n    isNegative = (int)currentDay < 0;\n    days = dateArray[5] + (int)remainderArray;\n    dateArray[5] = days;\n    if (isNegative) {\n      currentDay = currentDay + 0xc;\n      days = days - 1;\n    }\n    if (!isNegative) {\n      dateArray[4] = currentDay;\n    }\n    if (isNegative) {\n      dateArray[4] = currentDay;\n    }\n    if (isNegative) {\n      dateArray[5] = days;\n    }\n  }\n  days = dateArray[5];\n  if ((days & 3) == 0) {\n    if (days == (days / 100) * 100) {\n      if ((days + 0x76c) % 400 == 0) {\n        months = 0x1d;\n      }\n      else {\n        months = 0x1c;\n      }\n    }\n    else {\n      months = 0x1d;\n    }\n  }\n  else {\n    months = 0x1c;\n  }\n  if ((int)dateArray[3] < 1) {\n    while ((int)dateArray[3] < 1) {\n      days = dateArray[4];\n      dateArray[4] = days - 1;\n      if (days - 1 == 0xffffffff) {\n        leapYearDays = dateArray[5];\n        days = leapYearDays - 1;\n        dateArray[4] = 0xb;\n        dateArray[5] = days;\n        if ((days & 3) == 0) {\n          if (days == (days / 100) * 100) {\n            if ((leapYearDays + 0x76b) % 400 == 0) {\n              months = 0x1d;\n            }\n            else {\n              months = 0x1c;\n            }\n          }\n          else {\n            months = 0x1d;\n          }\n        }\n        else {\n          months = 0x1c;\n        }\n      }\n      daysInMonth = months;\n      if (dateArray[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateArray[4]];\n      }\n      dateArray[3] = daysInMonth + dateArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      days = dateArray[4];\n      daysInMonth = months;\n      if (days != 1) {\n        daysInMonth = (&DAT_000079fc)[days];\n      }\n      if ((int)dateArray[3] <= daysInMonth) break;\n      dateArray[3] = dateArray[3] - daysInMonth;\n      dateArray[4] = days + 1;\n      if (days + 1 == 0xc) {\n        leapYearDays = dateArray[5];\n        days = leapYearDays + 1;\n        dateArray[4] = 0;\n        dateArray[5] = days;\n        if ((days & 3) == 0) {\n          if (days % 100 == 0) {\n            if ((leapYearDays + 0x76d) % 400 == 0) {\n              months = 0x1d;\n            }\n            else {\n              months = 0x1c;\n            }\n          }\n          else {\n            months = 0x1d;\n          }\n        }\n        else {\n          months = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "dateArray",
                "param_2": "dayIncrement",
                "param_3": "unknownParam",
                "iVar1": "daysInMonth",
                "uVar2": "days",
                "uVar3": "leapYearDays",
                "iVar4": "months",
                "bVar5": "isNegative",
                "local_20": "remainderArray",
                "local_1c": "currentDay",
                "uStack_18": "unknownStack"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_next_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateNextDate_000047e4(int *inputParams)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *memoryAddress;\n  uint tempVar1;\n  int tempVar2;\n  int tempVar3;\n  int tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  int dayOfWeek;\n  uint year;\n  uint isLeapYear;\n  uint dayOfMonth;\n  uint days;\n  bool bVar16;\n  \n  memoryAddress = (int *)get_memory_address_000056b0();\n  update_date_00004634(inputParams);\n  year = inputParams[5];\n  dayOfWeek = inputParams[3] + -1 + *(int *)(&DAT_00007a2c + inputParams[4] * 4);\n  if (((1 < inputParams[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    dayOfWeek = dayOfWeek + 1;\n  }\n  inputParams[7] = dayOfWeek;\n  if (20000 < (int)&DAT_00002710 + year) {\n    tempVar4 = -1;\n    tempVar2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (tempVar6 = 0x45; (int)year < (int)tempVar6; tempVar6 = tempVar6 - 1) {\n        if ((tempVar6 & 3) == 0) {\n          if (tempVar6 == (tempVar6 / 100) * 100) {\n            if ((tempVar6 + 0x76c) % 400 == 0) {\n              tempVar4 = 0x16e;\n            }\n            else {\n              tempVar4 = 0x16d;\n            }\n          }\n          else {\n            tempVar4 = 0x16e;\n          }\n        }\n        else {\n          tempVar4 = 0x16d;\n        }\n        dayOfWeek = dayOfWeek - tempVar4;\n      }\n      if ((tempVar6 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          tempVar4 = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            tempVar4 = 0x16e;\n          }\n        }\n        else {\n          tempVar4 = 0x16e;\n        }\n      }\n      else {\n        tempVar4 = 0x16d;\n      }\n      dayOfWeek = dayOfWeek - tempVar4;\n    }\n  }\n  else {\n    tempVar6 = 0x46;\n    do {\n      if ((tempVar6 & 3) == 0) {\n        if (tempVar6 % 100 == 0) {\n          if ((tempVar6 + 0x76c) % 400 == 0) {\n            tempVar4 = 0x16e;\n          }\n          else {\n            tempVar4 = 0x16d;\n          }\n        }\n        else {\n          tempVar4 = 0x16e;\n        }\n      }\n      else {\n        tempVar4 = 0x16d;\n      }\n      tempVar6 = tempVar6 + 1;\n      dayOfWeek = dayOfWeek + tempVar4;\n    } while (year != tempVar6);\n  }\n  totalDays = (longlong)dayOfWeek * 0x15180 + (longlong)(inputParams[2] * 0xe10 + inputParams[1] * 0x3c + *inputParams)\n  ;\n  days = (uint)totalDays;\n  tempVar4 = (int)((ulonglong)totalDays >> 0x20);\n  get_memory_location_000050e8();\n  process_data_00005100();\n  tempVar6 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = memoryAddress[10];\n    tempVar4 = (uint)totalDays + year;\n    tempVar2 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)totalDays,year);\n  }\n  else {\n    dayOfMonth = inputParams[8];\n    isLeapYear = dayOfMonth;\n    if (0 < (int)dayOfMonth) {\n      isLeapYear = 1;\n    }\n    if ((memoryAddress[1] == inputParams[5] + 0x76c) || (tempVar2 = calculate_day_of_week_00004f98(), tempVar2 != 0)) {\n      tempVar7 = memoryAddress[0x14];\n      tempVar1 = memoryAddress[0x12];\n      tempVar5 = memoryAddress[10];\n      tempVar6 = tempVar1 - tempVar5;\n      tempVar2 = (memoryAddress[0x13] - ((int)tempVar5 >> 0x1f)) - (uint)(tempVar1 < tempVar5);\n      if (((int)((tempVar4 - tempVar2) - (uint)(days < tempVar6)) < 0 ==\n           (SBORROW4(tempVar4,tempVar2) != SBORROW4(tempVar4 - tempVar2,(uint)(days < tempVar6)))) &&\n         (tempVar3 = (memoryAddress[0x13] - ((int)tempVar7 >> 0x1f)) - (uint)(tempVar1 < tempVar7),\n         bVar16 = days < tempVar1 - tempVar7,\n         (int)((tempVar4 - tempVar3) - (uint)bVar16) < 0 !=\n         (SBORROW4(tempVar4,tempVar3) != SBORROW4(tempVar4 - tempVar3,(uint)bVar16)))) goto LAB_00004a88;\n      tempVar1 = memoryAddress[8] - tempVar7;\n      tempVar3 = (memoryAddress[9] - ((int)tempVar7 >> 0x1f)) - (uint)((uint)memoryAddress[8] < tempVar7);\n      if (*memoryAddress != 0) {\n        if ((int)((tempVar4 - tempVar3) - (uint)(days < tempVar1)) < 0 ==\n            (SBORROW4(tempVar4,tempVar3) != SBORROW4(tempVar4 - tempVar3,(uint)(days < tempVar1))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempVar6 = 0;\n        if ((int)dayOfMonth < 0) goto LAB_00004934;\nLAB_00004a14:\n        days = isLeapYear ^ tempVar6;\n        isLeapYear = tempVar6;\n        if (days == 1) {\n          if (tempVar6 == 0) {\n            tempVar4 = tempVar7 - tempVar5;\n          }\n          else {\n            tempVar4 = tempVar5 - tempVar7;\n          }\n          tempVar2 = inputParams[3];\n          *inputParams = *inputParams + tempVar4;\n          updatedTotalDays = totalDays + tempVar4;\n          update_date_00004634(inputParams);\n          tempVar2 = inputParams[3] - tempVar2;\n          totalDays = totalDays + tempVar4;\n          if (tempVar2 != 0) {\n            if (tempVar2 < 2) {\n              if (tempVar2 == -2 || tempVar2 + 2 < 0 != SCARRY4(tempVar2,2)) {\n                tempVar2 = 1;\n              }\n            }\n            else {\n              tempVar2 = -1;\n            }\n            tempVar4 = tempVar2 + inputParams[7];\n            dayOfWeek = dayOfWeek + tempVar2;\n            if (tempVar4 < 0) {\n              tempVar6 = year - 1;\n              if ((tempVar6 & 3) == 0) {\n                if (tempVar6 == (tempVar6 / 100) * 100) {\n                  tempVar4 = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    tempVar4 = 0x16c;\n                  }\n                }\n                else {\n                  tempVar4 = 0x16d;\n                }\n              }\n              else {\n                tempVar4 = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  tempVar2 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    tempVar2 = 0x16e;\n                  }\n                }\n                else {\n                  tempVar2 = 0x16e;\n                }\n              }\n              else {\n                tempVar2 = 0x16d;\n              }\n              if (tempVar2 <= tempVar4) {\n                tempVar4 = tempVar4 - tempVar2;\n              }\n            }\n            inputParams[7] = tempVar4;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((tempVar4 - tempVar3) - (uint)(days < tempVar1)) < 0 !=\n          (SBORROW4(tempVar4,tempVar3) != SBORROW4(tempVar4 - tempVar3,(uint)(days < tempVar1)))) {\nLAB_0000491e:\n        if ((int)((tempVar4 - tempVar2) - (uint)(days < tempVar6)) < 0 ==\n            (SBORROW4(tempVar4,tempVar2) != SBORROW4(tempVar4 - tempVar2,(uint)(days < tempVar6))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)dayOfMonth) {\n        tempVar6 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempVar6 = isLeapYear;\n      if (isLeapYear != 1) goto LAB_00004934;\n    }\n    year = memoryAddress[0x14];\n    tempVar4 = (uint)totalDays + year;\n    tempVar2 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)totalDays,year);\n    tempVar6 = 1;\n  }\n  get_memory_address_000050f4();\n  inputParams[8] = tempVar6;\n  inputParams[6] = (dayOfWeek + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempVar2,tempVar4);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_next_date_000047e4",
                "param_1": "inputParams",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "memoryAddress",
                "uVar4": "tempVar1",
                "iVar5": "tempVar2",
                "iVar6": "tempVar3",
                "iVar7": "tempVar4",
                "uVar8": "tempVar5",
                "uVar9": "tempVar6",
                "uVar10": "tempVar7",
                "iVar11": "dayOfWeek",
                "uVar12": "year",
                "uVar13": "isLeapYear",
                "uVar14": "dayOfMonth",
                "uVar15": "days"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "process_data_00004b34",
            "code": "\nvoid processData_00004b34(undefined4 *outputArray,int arraySize,undefined4 paramA,undefined4 paramB)\n\n{\n  int *tempPtr1;\n  int **tempPtr2;\n  int **currentPtr;\n  int **nextPtr;\n  int **previousPtr;\n  int **newNodePtr;\n  bool isConditionMet;\n  \n  if (arraySize == 0) {\n    return;\n  }\n  newNodePtr = (int **)(arraySize + -4);\n  if (*(int *)(arraySize + -4) < 0) {\n    newNodePtr = (int **)((int)newNodePtr + *(int *)(arraySize + -4));\n  }\n  initiate_data_processing_00005790();\n  nextPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNodePtr[1] = (int *)0x0;\n    currentPtr = tempPtr2;\n    DAT_1fff0db4 = newNodePtr;\n  }\n  else {\n    previousPtr = DAT_1fff0db4;\n    if (newNodePtr < DAT_1fff0db4) {\n      currentPtr = (int **)*newNodePtr;\n      nextPtr = (int **)((int)newNodePtr + (int)currentPtr);\n      isConditionMet = DAT_1fff0db4 == nextPtr;\n      if (isConditionMet) {\n        nextPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNodePtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNodePtr;\n      if (isConditionMet) {\n        nextPtr = (int **)((int)nextPtr + (int)currentPtr);\n        *newNodePtr = (int *)nextPtr;\n      }\n    }\n    else {\n      do {\n        nextPtr = previousPtr;\n        previousPtr = (int **)nextPtr[1];\n        if (previousPtr == (int **)0x0) break;\n      } while (previousPtr <= newNodePtr);\n      currentPtr = (int **)*nextPtr;\n      if ((int **)((int)nextPtr + (int)currentPtr) == newNodePtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*newNodePtr);\n        *nextPtr = (int *)currentPtr;\n        if (previousPtr == (int **)((int)nextPtr + (int)currentPtr)) {\n          tempPtr1 = *previousPtr;\n          nextPtr[1] = previousPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)tempPtr1);\n          *nextPtr = (int *)currentPtr;\n        }\n      }\n      else if (newNodePtr < (int **)((int)nextPtr + (int)currentPtr)) {\n        *outputArray = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)newNodePtr + (int)*newNodePtr);\n        isConditionMet = previousPtr == currentPtr;\n        if (isConditionMet) {\n          currentPtr = (int **)*previousPtr;\n          previousPtr = (int **)previousPtr[1];\n        }\n        newNodePtr[1] = (int *)previousPtr;\n        if (isConditionMet) {\n          currentPtr = (int **)((int)currentPtr + (int)*newNodePtr);\n          *newNodePtr = (int *)currentPtr;\n        }\n        nextPtr[1] = (int *)newNodePtr;\n      }\n    }\n  }\n  initialize_data_0000579c(outputArray,currentPtr,nextPtr,paramB);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "process_data_00004b34",
                "param_1": "outputArray",
                "param_2": "arraySize",
                "param_3": "paramA",
                "param_4": "paramB",
                "piVar1": "tempPtr1",
                "extraout_r1": "tempPtr2",
                "ppiVar2": "currentPtr",
                "ppiVar3": "nextPtr",
                "ppiVar4": "previousPtr",
                "ppiVar5": "newNodePtr",
                "bVar6": "isConditionMet"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_buffer_00004bd0",
            "code": "\nuint allocate_buffer_00004bd0(undefined4 *buffer_ptr,uint buffer_size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *ptr1;\n  int index;\n  uint difference;\n  uint *ptr2;\n  uint adjusted_buffer_size;\n  \n  adjusted_buffer_size = (buffer_size + 3 & 0xfffffffc) + 8;\n  if (adjusted_buffer_size < 0xc) {\n    adjusted_buffer_size = 0xc;\n  }\n  if (((int)adjusted_buffer_size < 0) || (adjusted_buffer_size < buffer_size)) {\n    *buffer_ptr = 0xc;\n  }\n  else {\n    initiate_data_processing_00005790();\n    ptr1 = DAT_1fff0db4;\n    for (ptr2 = DAT_1fff0db4; ptr2 != (uint *)0x0; ptr2 = (uint *)ptr2[1]) {\n      difference = *ptr2 - adjusted_buffer_size;\n      if (-1 < (int)difference) {\n        if (0xb < difference) {\n          *ptr2 = difference;\n          ptr2 = (uint *)((int)ptr2 + difference);\n          goto LAB_00004c34;\n        }\n        if (ptr1 == ptr2) {\n          DAT_1fff0db4 = (uint *)ptr2[1];\n        }\n        if (ptr1 != ptr2) {\n          ptr1[1] = (uint)(uint *)ptr2[1];\n        }\n        goto LAB_00004c42;\n      }\n      ptr1 = ptr2;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = validate_and_update_relocation_offset_00000428(buffer_ptr,0,ptr1,0,param_4);\n    }\n    ptr1 = (uint *)validate_and_update_relocation_offset_00000428(buffer_ptr,adjusted_buffer_size);\n    if ((ptr1 != (uint *)0xffffffff) &&\n       ((ptr2 = (uint *)((int)ptr1 + 3U & 0xfffffffc), ptr1 == ptr2 ||\n        (index = validate_and_update_relocation_offset_00000428(buffer_ptr,(int)ptr2 - (int)ptr1), index != -1)))) {\nLAB_00004c34:\n      *ptr2 = adjusted_buffer_size;\nLAB_00004c42:\n      initialize_data_0000579c(buffer_ptr);\n      adjusted_buffer_size = (int)ptr2 + 0xbU & 0xfffffff8;\n      index = adjusted_buffer_size - (int)(ptr2 + 1);\n      if (index == 0) {\n        return adjusted_buffer_size;\n      }\n      *(uint *)((int)ptr2 + index) = (int)(ptr2 + 1) - adjusted_buffer_size;\n      return adjusted_buffer_size;\n    }\n    *buffer_ptr = 0xc;\n    initialize_data_0000579c(buffer_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_buffer_00004bd0",
                "param_1": "buffer_ptr",
                "param_2": "buffer_size",
                "puVar1": "ptr1",
                "iVar2": "index",
                "uVar3": "difference",
                "puVar4": "ptr2",
                "uVar5": "adjusted_buffer_size"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_and_initialize_00004c84",
            "code": "\nvoid process_and_initialize_00004c84(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  dword rel_offset;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  param1_copy = input_param1;\n  param2_copy = input_param2;\n  param3_copy = input_param3;\n  param4_copy = input_param4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_input_000057f8(rel_offset,*(undefined4 *)(rel_offset + 8),input_param1,&param2_copy,param1_copy,&param2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_and_initialize_00004c84",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "dVar1": "rel_offset",
                "uVar2": "param1_copy",
                "uStack_c": "param2_copy",
                "uStack_8": "param3_copy",
                "uStack_4": "param4_copy"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_and_modify_data_00004cb4",
            "code": "\nuint processAndModifyData_00004cb4(uint inputValue)\n\n{\n  dword offset;\n  undefined4 *dataPointer;\n  uint modifiedValue;\n  undefined *bytePointer;\n  undefined4 unusedVariable1;\n  undefined4 unusedVariable2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataPointer = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4();\n  }\n  if (dataPointer == &DAT_000079b8) {\n    dataPointer = *(undefined4 **)(offset + 4);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_000079d8) {\n    dataPointer = *(undefined4 **)(offset + 8);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_00007998) {\n    dataPointer = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045e8(dataPointer[0x16]);\n  }\n  modifiedValue = dataPointer[2] - 1;\n  dataPointer[2] = modifiedValue;\n  if (((int)modifiedValue < 0) && (((int)modifiedValue < (int)dataPointer[6] || (modifiedValue = inputValue & 0xff, modifiedValue == 10))))\n  {\n    inputValue = process_data_00005404(offset,inputValue,dataPointer,modifiedValue,unusedVariable1,unusedVariable2);\n  }\n  else {\n    bytePointer = (undefined *)*dataPointer;\n    *dataPointer = bytePointer + 1;\n    *bytePointer = (char)inputValue;\n    inputValue = inputValue & 0xff;\n  }\n  if ((-1 < (int)(dataPointer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x16))) {\n    FUNC_000045ec(dataPointer[0x16]);\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_and_modify_data_00004cb4",
                "param_1": "inputValue",
                "dVar1": "offset",
                "puVar2": "dataPointer",
                "uVar3": "modifiedValue",
                "puVar4": "bytePointer",
                "unaff_r4": "unusedVariable1",
                "unaff_r5": "unusedVariable2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int inputValue)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *currentStringChar;\n  char **stringPointers;\n  undefined4 returnValue;\n  char *currentString;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4();\n  }\n  stringPointers = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    initialize_memory_and_process_params_000042a4(offset);\n  }\n  if (stringPointers == (char **)&DAT_000079b8) {\n    stringPointers = *(char ***)(offset + 4);\n  }\n  else if (stringPointers == (char **)&DAT_000079d8) {\n    stringPointers = *(char ***)(offset + 8);\n  }\n  else if (stringPointers == (char **)&DAT_00007998) {\n    stringPointers = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)stringPointers[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringPointers + 3) << 0x16))) {\n    FUNC_000045e8(stringPointers[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(stringPointers + 3) << 0x1c) < 0) && (stringPointers[4] != (char *)0x0)) ||\n     (result = process_data_000054a8(offset,stringPointers), result == 0)) {\n    currentString = (char *)(inputValue + -1);\n    do {\n      while( true ) {\n        currentString = currentString + 1;\n        currentChar = *currentString;\n        currentStringChar = stringPointers[2] + -1;\n        stringPointers[2] = currentStringChar;\n        if (currentChar == '\\0') {\n          if (-1 < (int)currentStringChar) {\n            currentString = *stringPointers;\n            returnValue = 10;\n            *stringPointers = currentString + 1;\n            *currentString = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_data_00005404(offset,10,stringPointers);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)currentStringChar < 0) && (((int)currentStringChar < (int)stringPointers[6] || (currentChar == '\\n')))) break;\n        currentStringChar = *stringPointers;\n        *stringPointers = currentStringChar + 1;\n        *currentStringChar = currentChar;\n      }\n      result = process_data_00005404(offset,currentChar,stringPointers);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)stringPointers[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringPointers + 3) << 0x16))) {\n    FUNC_000045ec(stringPointers[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "inputValue",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "currentStringChar",
                "ppcVar5": "stringPointers",
                "uVar6": "returnValue",
                "pcVar7": "currentString"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "increment_and_copy_value_00004dc8",
            "code": "\nvoid incrementAndCopyValue_00004dc8(undefined4 dstArray,int srcArray)\n\n{\n  int copiedValue;\n  uint updatedValue;\n  bool isCopiedValuePositive;\n  \n  copiedValue = copy_and_increment_00000490(dstArray,(int)*(short *)(srcArray + 0xe));\n  isCopiedValuePositive = -1 < copiedValue;\n  if (isCopiedValuePositive) {\n    updatedValue = *(int *)(srcArray + 0x54) + copiedValue;\n  }\n  else {\n    updatedValue = *(ushort *)(srcArray + 0xc) & 0xffffefff;\n  }\n  if (isCopiedValuePositive) {\n    *(uint *)(srcArray + 0x54) = updatedValue;\n  }\n  if (!isCopiedValuePositive) {\n    *(short *)(srcArray + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "increment_and_copy_value_00004dc8",
                "param_1": "dstArray",
                "param_2": "srcArray",
                "iVar1": "copiedValue",
                "uVar2": "updatedValue",
                "bVar3": "isCopiedValuePositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "initialize_and_copy_data_00004dee",
            "code": "\nundefined4 initializeAndCopyData_00004dee(undefined4 result,int input,undefined4 source,undefined4 destination)\n\n{\n  undefined4 copyResult;\n  \n  if ((int)((uint)*(ushort *)(input + 0xc) << 0x17) < 0) {\n    initialize_memory_location_000004f2(result,(int)*(short *)(input + 0xe),0,2);\n  }\n  *(ushort *)(input + 0xc) = *(ushort *)(input + 0xc) & 0xefff;\n  copyResult = copy_data_and_return_00000e38(source,destination);\n  return copyResult;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "initialize_and_copy_data_00004dee",
                "param_1": "result",
                "param_2": "input",
                "param_3": "source",
                "param_4": "destination",
                "uVar1": "copyResult"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_memory_location_00004e26",
            "code": "\nvoid updateMemoryLocation_00004e26(undefined4 param1,int param2)\n\n{\n  int initializedMemory;\n  ushort updatedValue;\n  bool isMemoryInitialized;\n  \n  initializedMemory = initialize_memory_location_000004f2(param1,(int)*(short *)(param2 + 0xe));\n  isMemoryInitialized = initializedMemory == -1;\n  if (isMemoryInitialized) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = initializedMemory;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isMemoryInitialized) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isMemoryInitialized) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_memory_location_00004e26",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initializedMemory",
                "uVar2": "updatedValue",
                "bVar3": "isMemoryInitialized"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compareByteArrays_00004e52(byte *byteArray1,byte *byteArray2)\n\n{\n  byte currentByte;\n  uint byteCounter;\n  bool isEqual;\n  \n  do {\n    byteCounter = (uint)*byteArray1;\n    currentByte = *byteArray2;\n    isEqual = byteCounter == 1;\n    if (byteCounter != 0) {\n      isEqual = byteCounter == currentByte;\n    }\n    byteArray1 = byteArray1 + 1;\n    byteArray2 = byteArray2 + 1;\n  } while (isEqual);\n  return byteCounter - currentByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "byteArray1",
                "param_2": "byteArray2",
                "bVar1": "currentByte",
                "uVar2": "byteCounter",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "calculate_difference_00004e66",
            "code": "\nint calculate_difference_00004e66(byte *data,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = data;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "calculate_difference_00004e66",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *inputString,byte **outputString,uint base)\n\n{\n  uint parsedNumber;\n  uint currentChar;\n  uint isNegative;\n  uint digitValue;\n  int iVar5;\n  uint maxValue;\n  uint quotient;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = isNegative + 0x7fffffff;\n  iVar5 = 0;\n  quotient = maxValue / base;\n  parsedNumber = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (iVar5 != -1) {\n      if ((quotient < parsedNumber) || ((quotient == parsedNumber && ((int)(maxValue - base * quotient) < (int)digitValue)))) {\n        iVar5 = -1;\n      }\n      else {\n        parsedNumber = parsedNumber * base + digitValue;\n        iVar5 = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (iVar5 == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    parsedNumber = maxValue;\n    if (outputString == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      parsedNumber = -parsedNumber;\n    }\n    if (outputString == (byte **)0x0) {\n      return parsedNumber;\n    }\n    if (iVar5 == 0) goto LAB_00004f64;\n  }\n  inputString = nextByte + -1;\nLAB_00004f64:\n  *outputString = inputString;\n  return parsedNumber;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "inputString",
                "param_2": "outputString",
                "param_3": "base",
                "uVar1": "parsedNumber",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "uVar6": "maxValue",
                "uVar7": "quotient",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *memoryAddr;\n  undefined4 result;\n  uint dayOffset;\n  int weekOffset;\n  uint *weekData;\n  int totalOffset;\n  uint isLeapYear;\n  int monthIndex;\n  int monthOffset;\n  uint isDivisibleBy400;\n  \n  memoryAddr = (uint *)get_memory_address_000056b0();\n  if ((int)year < 0x7b2) {\n    result = 0;\n  }\n  else {\n    totalOffset = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memoryAddr[1] = year;\n    isDivisibleBy400 = (uint)(year % 400 == 0);\n    weekData = memoryAddr;\n    do {\n      dayOffset = weekData[5];\n      if (*(char *)(weekData + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOffset < 0x3c) {\n            weekOffset = 0;\n          }\n          else {\n            weekOffset = 1;\n          }\n        }\n        else {\n          weekOffset = 0;\n        }\n        weekOffset = weekOffset + totalOffset + dayOffset + -1;\n      }\n      else if (*(char *)(weekData + 2) == 'D') {\n        weekOffset = totalOffset + dayOffset;\n      }\n      else {\n        isLeapYear = isDivisibleBy400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYear = 1;\n        }\n        monthIndex = 0;\n        weekOffset = totalOffset;\n        while( true ) {\n          monthIndex = monthIndex + 1;\n          if ((int)weekData[3] <= monthIndex) break;\n          weekOffset = weekOffset + *(int *)(&UNK_00007b98 + monthIndex * 4 + isLeapYear * 0x30);\n        }\n        monthOffset = dayOffset - (weekOffset + 4U) % 7;\n        if (monthOffset < 0) {\n          monthOffset = monthOffset + 7;\n        }\n        for (monthOffset = (weekData[4] - 1) * 7 + monthOffset;\n            *(int *)(&UNK_00007b98 + monthIndex * 4 + isLeapYear * 0x30) <= monthOffset; monthOffset = monthOffset + -7) {\n        }\n        weekOffset = weekOffset + monthOffset;\n      }\n      dayOffset = weekData[10] + weekOffset * 0x15180 + weekData[6];\n      weekData[8] = dayOffset;\n      weekData[9] = (int)dayOffset >> 0x1f;\n      weekData = weekData + 10;\n    } while (memoryAddr + 0x14 != weekData);\n    dayOffset = memoryAddr[9];\n    isDivisibleBy400 = memoryAddr[0x13];\n    *memoryAddr = (uint)((int)((dayOffset - isDivisibleBy400) - (uint)(memoryAddr[8] < memoryAddr[0x12])) < 0 !=\n                    (SBORROW4(dayOffset,isDivisibleBy400) !=\n                    SBORROW4(dayOffset - isDivisibleBy400,(uint)(memoryAddr[8] < memoryAddr[0x12]))));\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "memoryAddr",
                "uVar2": "result",
                "uVar3": "dayOffset",
                "iVar4": "weekOffset",
                "puVar5": "weekData",
                "iVar6": "totalOffset",
                "uVar7": "isLeapYear",
                "iVar8": "monthIndex",
                "iVar9": "monthOffset",
                "uVar10": "isDivisibleBy400"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_location_000050e8",
            "code": "\nundefined * getMemoryLocation_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_location_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_address_000050f4",
            "code": "\nundefined * getMemoryAddress_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "process_data_00005100",
            "code": "\nvoid processData_00005100(void)\n\n{\n  dword offset;\n  int memAddress;\n  char *keyOffset;\n  int result;\n  int numBytes;\n  undefined dataType;\n  char *dataPtr;\n  bool isKey;\n  ushort *hourPtr;\n  int *offsetPtr;\n  ushort *minutePtr;\n  int *offsetPtr2;\n  ushort hour;\n  ushort minute;\n  ushort second;\n  ushort day;\n  ushort month;\n  ushort year;\n  int offsetHour;\n  char *parsedData [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  memAddress = get_memory_address_000056b0();\n  keyOffset = (char *)find_key_offset_000056a0(offset,&DAT_00007a5c);\n  if (keyOffset == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = keyOffset;\n    DAT_1fff0ddc = keyOffset;\n    process_relocated_data_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (result = compare_byte_arrays_00004e52(), result != 0)) {\n    process_relocated_data_00005780(DAT_1fff0dd4);\n    result = find_terminating_null_character_00005ecc(keyOffset);\n    DAT_1fff0dd4 = allocate_buffer_00004bd0(offset,result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string_00005ebc(DAT_1fff0dd4,keyOffset);\n    }\n    if (*keyOffset == ':') {\n      keyOffset = keyOffset + 1;\n    }\n    result = process_data_00005e68(keyOffset,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&offsetHour);\n    if (0 < result) {\n      dataPtr = keyOffset + offsetHour;\n      if (keyOffset[offsetHour] == '-') {\n        dataPtr = dataPtr + 1;\n        result = -1;\n      }\n      else {\n        if (keyOffset[offsetHour] == '+') {\n          dataPtr = dataPtr + 1;\n        }\n        result = 1;\n      }\n      minute = 0;\n      second = 0;\n      hourPtr = &minute;\n      offsetPtr = &offsetHour;\n      minutePtr = &second;\n      offsetPtr2 = &offsetHour;\n      numBytes = process_data_00005e68(dataPtr,\"%hu%n:%hu%n:%hu%n\",&hour,&offsetHour,&minute,&offsetHour,\n                           &second,&offsetHour);\n      if (0 < numBytes) {\n        *(uint *)(memAddress + 0x28) =\n             ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * result;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        dataPtr = dataPtr + offsetHour;\n        result = process_data_00005e68(dataPtr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&offsetHour,hourPtr,offsetPtr,minutePtr,\n                             offsetPtr2);\n        if (result < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(memAddress + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          keyOffset = dataPtr + offsetHour;\n          if (dataPtr[offsetHour] == '-') {\n            keyOffset = keyOffset + 1;\n            result = -1;\n          }\n          else {\n            if (dataPtr[offsetHour] == '+') {\n              keyOffset = keyOffset + 1;\n            }\n            result = 1;\n          }\n          hour = 0;\n          minute = 0;\n          second = 0;\n          offsetHour = 0;\n          numBytes = process_data_00005e68(keyOffset,\"%hu%n:%hu%n:%hu%n\",&hour,&offsetHour,&minute,&offsetHour,\n                               &second,&offsetHour);\n          if (numBytes < 1) {\n            result = *(int *)(memAddress + 0x28) + -0xe10;\n          }\n          else {\n            result = ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * result;\n          }\n          *(int *)(memAddress + 0x50) = result;\n          keyOffset = keyOffset + offsetHour;\n          isKey = false;\n          result = memAddress;\n          while( true ) {\n            if (*keyOffset == ',') {\n              keyOffset = keyOffset + 1;\n            }\n            if (*keyOffset == 'M') {\n              numBytes = process_data_00005e68(keyOffset,\"M%hu%n.%hu%n.%hu%n\",&day,&offsetHour,&month,\n                                   &offsetHour,&year,&offsetHour);\n              if (numBytes != 3) {\n                return;\n              }\n              if (0xb < day - 1) {\n                return;\n              }\n              if (4 < month - 1) {\n                return;\n              }\n              if (6 < year) {\n                return;\n              }\n              *(uint *)(result + 0xc) = (uint)day;\n              *(uint *)(result + 0x10) = (uint)month;\n              *(undefined *)(result + 8) = 0x4d;\n              *(uint *)(result + 0x14) = (uint)year;\n              dataPtr = keyOffset + offsetHour;\n            }\n            else {\n              if (*keyOffset == 'J') {\n                keyOffset = keyOffset + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              year = parse_elf32_rel_00005fd8(keyOffset,parsedData,10);\n              dataPtr = parsedData[0];\n              if (parsedData[0] == keyOffset) {\n                if (isKey) {\n                  *(undefined *)(memAddress + 0x30) = 0x4d;\n                  *(undefined4 *)(memAddress + 0x34) = 0xb;\n                  *(undefined4 *)(memAddress + 0x38) = 1;\n                  *(undefined4 *)(memAddress + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memAddress + 8) = 0x4d;\n                  *(undefined4 *)(memAddress + 0xc) = 3;\n                  *(undefined4 *)(memAddress + 0x10) = 2;\n                  *(undefined4 *)(memAddress + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(result + 8) = dataType;\n                *(uint *)(result + 0x14) = (uint)year;\n              }\n            }\n            hour = 2;\n            minute = 0;\n            second = 0;\n            offsetHour = 0;\n            if (*dataPtr == '/') {\n              process_data_00005e68(dataPtr,&DAT_00007a85,&hour,&offsetHour,&minute,&offsetHour,&second,\n                           &offsetHour);\n            }\n            *(uint *)(result + 0x18) =\n                 (uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second;\n            result = result + 0x28;\n            keyOffset = dataPtr + offsetHour;\n            if (isKey) break;\n            isKey = true;\n          }\n          calculate_day_of_week_00004f98(*(undefined4 *)(memAddress + 4));\n          DAT_1fff0ddc = *(char **)(memAddress + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memAddress + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "process_data_00005100",
                "dVar1": "offset",
                "iVar2": "memAddress",
                "pcVar3": "keyOffset",
                "iVar4": "result",
                "iVar5": "numBytes",
                "uVar6": "dataType",
                "pcVar7": "dataPtr",
                "bVar8": "isKey",
                "puVar9": "hourPtr",
                "piVar10": "offsetPtr",
                "puVar11": "minutePtr",
                "piVar12": "offsetPtr2",
                "local_3c": "hour",
                "local_3a": "minute",
                "local_38": "second",
                "local_36": "day",
                "local_34": "month",
                "local_32": "year",
                "local_30": "offsetHour",
                "local_2c": "parsedData"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int inputParam,uint outputValue,int *dataBuffer,undefined4 additionalParam)\n\n{\n  int tempVariable1;\n  uint tempVariable2;\n  undefined *pointerVariable;\n  \n  if ((inputParam != 0) && (*(int *)(inputParam + 0x18) == 0)) {\n    initializeMemoryAndProcessParams();\n  }\n  if (dataBuffer == &DAT_000079b8) {\n    dataBuffer = *(int **)(inputParam + 4);\n  }\n  else if (dataBuffer == (int *)&DAT_000079d8) {\n    dataBuffer = *(int **)(inputParam + 8);\n  }\n  else if (dataBuffer == (int *)&DAT_00007998) {\n    dataBuffer = *(int **)(inputParam + 0xc);\n  }\n  dataBuffer[2] = dataBuffer[6];\n  tempVariable2 = (uint)*(ushort *)(dataBuffer + 3);\n  tempVariable1 = tempVariable2 << 0x1c;\n  if (((tempVariable1 < 0) && (tempVariable2 = dataBuffer[4], tempVariable2 != 0)) ||\n     (tempVariable1 = processData_00005404Helper(inputParam,dataBuffer,tempVariable1,tempVariable2,additionalParam), tempVariable1 == 0)) {\n    tempVariable1 = *dataBuffer - dataBuffer[4];\n    outputValue = outputValue & 0xff;\n    if ((tempVariable1 < dataBuffer[5]) || (tempVariable1 = processData_00005404Helper2(inputParam,dataBuffer), tempVariable1 == 0)) {\n      dataBuffer[2] = dataBuffer[2] + -1;\n      pointerVariable = (undefined *)*dataBuffer;\n      *dataBuffer = (int)(pointerVariable + 1);\n      *pointerVariable = (char)outputValue;\n      if (dataBuffer[5] != tempVariable1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(dataBuffer + 3) << 0x1f)) {\n          return outputValue;\n        }\n        if (outputValue != 10) {\n          return outputValue;\n        }\n      }\n      tempVariable1 = processData_00005404Helper2(inputParam,dataBuffer);\n      if (tempVariable1 == 0) {\n        return outputValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "inputParam",
                "param_2": "outputValue",
                "param_3": "dataBuffer",
                "param_4": "additionalParam",
                "iVar1": "tempVariable1",
                "uVar2": "tempVariable2",
                "puVar3": "pointerVariable",
                "initialize_memory_and_process_params_000042a4": "initializeMemoryAndProcessParams",
                "process_data_000054a8": "processDataHelper",
                "process_data_00004158": "processDataHelper2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *outputData,undefined4 *inputData)\n\n{\n  ushort val1;\n  dword offset;\n  ushort val2;\n  uint val3;\n  uint val4;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputData == &DAT_000079b8) {\n    inputData = *(undefined4 **)(offset + 4);\n  }\n  else if (inputData == (undefined4 *)&DAT_000079d8) {\n    inputData = *(undefined4 **)(offset + 8);\n  }\n  else if (inputData == (undefined4 *)&DAT_00007998) {\n    inputData = *(undefined4 **)(offset + 0xc);\n  }\n  val3 = (uint)*(ushort *)(inputData + 3);\n  val2 = *(ushort *)(inputData + 3);\n  if (-1 < (int)(val3 << 0x1c)) {\n    if (-1 < (int)(val3 << 0x1b)) {\n      *outputData = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(val3 << 0x1d) < 0) {\n      if ((undefined4 *)inputData[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputData[0xd] != inputData + 0x11) {\n          process_data_00004b34(outputData);\n        }\n        inputData[0xd] = 0;\n      }\n      *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xffdb;\n      inputData[1] = 0;\n      *inputData = inputData[4];\n    }\n    *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) | 8;\n  }\n  if ((inputData[4] == 0) && ((*(ushort *)(inputData + 3) & 0x280) != 0x200)) {\n    initialize_buffer_00005700(outputData,inputData);\n  }\n  val1 = *(ushort *)(inputData + 3);\n  val3 = (uint)val1;\n  val2 = *(ushort *)(inputData + 3);\n  val4 = val3 & 1;\n  if ((val1 & 1) == 0) {\n    if (-1 < (int)(val3 << 0x1e)) {\n      val4 = inputData[5];\n    }\n    inputData[2] = val4;\n  }\n  else {\n    inputData[2] = 0;\n    inputData[6] = -inputData[5];\n  }\n  if (inputData[4] != 0) {\n    return 0;\n  }\n  if ((val1 & 0x80) == 0) {\n    return val3 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputData + 3) = val2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "outputData",
                "param_2": "inputData",
                "uVar1": "val1",
                "dVar2": "offset",
                "uVar3": "val2",
                "uVar4": "val3",
                "uVar5": "val4"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          process_data_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_buffer_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_store_remainder_00005584",
            "code": "\nvoid divideAndStoreRemainder_00005584(uint *quotientAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientAndRemainder = quotient;\n  quotientAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_store_remainder_00005584",
                "param_1": "quotientAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_key_offset_0000562c",
            "code": "\nint findKeyOffset_0000562c(undefined4 mem_init,char *input_string,int *result)\n\n{\n  char current_char;\n  int *rel_offset_ptr;\n  int difference;\n  char *current_char_ptr;\n  int *rel_offset_ptr;\n  int input_offset;\n  \n  initialize_memory_00005fec();\n  current_char_ptr = input_string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_char_ptr;\n      if (current_char == '\\0') {\n        input_offset = (int)current_char_ptr - (int)input_string;\n        rel_offset_ptr = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          rel_offset_ptr = rel_offset_ptr;\n          if (*rel_offset_ptr == 0) break;\n          difference = calculate_difference_00004e66(*rel_offset_ptr,input_string,input_offset);\n          rel_offset_ptr = rel_offset_ptr + 1;\n          if ((difference == 0) && (difference = *rel_offset_ptr, *(char *)(difference + input_offset) == '=')) {\n            *result = (int)((int)rel_offset_ptr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            initialize_memory_00005ff8(mem_init);\n            return difference + input_offset + 1;\n          }\n        }\n        break;\n      }\n      current_char_ptr = current_char_ptr + 1;\n    } while (current_char != '=');\n  }\n  initialize_memory_00005ff8(mem_init);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_key_offset_0000562c",
                "param_1": "mem_init",
                "param_2": "input_string",
                "param_3": "result",
                "cVar1": "current_char",
                "piVar2": "rel_offset_ptr",
                "iVar3": "difference",
                "pcVar4": "current_char_ptr",
                "piVar5": "rel_offset_ptr",
                "iVar6": "input_offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_key_offset_000056a0",
            "code": "\nvoid find_key_offset_000056a0(undefined4 input_key,undefined4 output_key,undefined4 key_offset,undefined4 param_4)\n\n{\n  undefined4 output_key_copy;\n  undefined4 key_offset_copy;\n  \n  output_key_copy = output_key;\n  key_offset_copy = key_offset;\n  find_key_offset_000056a0_0000562c(input_key,output_key,&output_key_copy,param_4,input_key);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_key_offset_000056a0",
                "param_1": "input_key",
                "param_2": "output_key",
                "param_3": "key_offset",
                "uStack_c": "output_key_copy",
                "uStack_8": "key_offset_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nuint32_t getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_and_initialize_value_000056b8",
            "code": "\nundefined4 check_and_initialize_value_000056b8(undefined4 input,int data,undefined4 *output,uint *status)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined temporaryArray [4];\n  uint localValue;\n  \n  if ((*(short *)(data + 0xe) < 0) ||\n     (result = initialize_value_00000514(input,(int)*(short *)(data + 0xe),temporaryArray), result < 0)) {\n    *status = 0;\n    if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n      returnValue = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *status = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  returnValue = 0x400;\nLAB_000056f8:\n  *output = returnValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_and_initialize_value_000056b8",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "status",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_68": "temporaryArray",
                "local_64": "localValue"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "initialize_buffer_00005700",
            "code": "\nvoid initializeBuffer_00005700(int bufferSize,int *buffer)\n\n{\n  ushort valueCheckResult;\n  int allocatedBuffer;\n  int tempSize;\n  int *tempBuffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1e)) {\n    tempSize = bufferSize;\n    tempBuffer = buffer;\n    valueCheckResult = check_and_initialize_value_000056b8(bufferSize,buffer,&tempSize,&tempBuffer);\n    allocatedBuffer = allocate_buffer_00004bd0(bufferSize,tempSize);\n    if (allocatedBuffer != 0) {\n      *(undefined **)(bufferSize + 0x28) = &DAT_0000423d;\n      *buffer = allocatedBuffer;\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x80;\n      buffer[5] = tempSize;\n      buffer[4] = allocatedBuffer;\n      if ((tempBuffer != (int *)0x0) &&\n         (allocatedBuffer = check_param_validity_00000534(bufferSize,(int)*(short *)((int)buffer + 0xe)), allocatedBuffer != 0)) {\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(buffer + 3) = valueCheckResult | *(ushort *)(buffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(buffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfffc | 2;\n  }\n  *buffer = (int)buffer + 0x47;\n  buffer[4] = (int)buffer + 0x47;\n  buffer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "initialize_buffer_00005700",
                "param_1": "bufferSize",
                "param_2": "buffer",
                "uVar1": "valueCheckResult",
                "iVar2": "allocatedBuffer",
                "local_18": "tempSize",
                "local_14": "tempBuffer"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "process_relocated_data_00005780",
            "code": "\nvoid process_relocated_data_00005780(undefined4 input_param)\n\n{\n  process_data_00004b34(relocation_array[16].r_offset,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "process_relocated_data_00005780",
                "param_1": "input_param",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initiate_data_processing_00005790",
            "code": "\nvoid initiateDataProcessing_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initiate_data_processing_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_and_update_data_000057a8",
            "code": "\nint process_and_update_data_000057a8(undefined4 status,int data,undefined4 *data_ptrs)\n\n{\n  int count;\n  undefined *data_ptr;\n  \n  count = data_ptrs[2] + -1;\n  data_ptrs[2] = count;\n  if ((count < 0) && ((count < (int)data_ptrs[6] || (data == 10)))) {\n    count = process_data_00005404();\n    return count;\n  }\n  data_ptr = (undefined *)*data_ptrs;\n  *data_ptrs = data_ptr + 1;\n  *data_ptr = (char)data;\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_and_update_data_000057a8",
                "param_1": "status",
                "param_2": "data",
                "param_3": "data_ptrs",
                "iVar1": "count",
                "puVar2": "data_ptr"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint process_data_000057d2(undefined4 arg1,undefined4 arg2,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int iteration;\n  \n  end_ptr = data + length;\n  iteration = length;\n  do {\n    if (data == end_ptr) {\n      return 0;\n    }\n    result = process_and_update_data_000057a8(arg1,*data,arg2,length,iteration);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_ptr",
                "iVar3": "iteration"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_input_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processInput_000057f8(int functionPtr,undefined4 *paramPtr,byte *byteArrayPtr,int *intArrayPtr)\n\n{\n  int result;\n  int processResult;\n  int *intPointer;\n  bool isDigit;\n  byte *bytePtr;\n  int unaff_r7;\n  byte *currentByte;\n  int *intArray;\n  uint flags;\n  int decimal;\n  undefined4 stackVar;\n  int number;\n  int totalSize;\n  byte charVar;\n  undefined charVar1;\n  undefined charVar2;\n  undefined charVar3;\n  undefined4 intVar;\n  \n  if ((functionPtr != 0) && (*(int *)(functionPtr + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4();\n  }\n  if (paramPtr == &DAT_000079b8) {\n    paramPtr = *(undefined4 **)(functionPtr + 4);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_000079d8) {\n    paramPtr = *(undefined4 **)(functionPtr + 8);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_00007998) {\n    paramPtr = *(undefined4 **)(functionPtr + 0xc);\n  }\n  if ((-1 < (int)(paramPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16))) {\n    FUNC_000045e8(paramPtr[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x1c)) || (paramPtr[4] == 0)) &&\n     (result = process_data_000054a8(functionPtr,paramPtr), result != 0)) {\n    if ((-1 < (int)(paramPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16)))\n    {\n      FUNC_000045ec(paramPtr[0x16]);\n    }\n    return -1;\n  }\n  totalSize = 0;\n  charVar1 = 0x20;\n  charVar2 = 0x30;\n  currentByte = byteArrayPtr;\n  intArray = intArrayPtr;\nLAB_0000588e:\n  bytePtr = currentByte;\n  if (*bytePtr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentByte = bytePtr + 1;\n  if (*bytePtr == 0x25) {\nLAB_0000589a:\n    result = (int)bytePtr - (int)byteArrayPtr;\n    if (result != 0) {\n      processResult = process_data_000057d2(functionPtr,paramPtr,byteArrayPtr,result);\n      if (processResult == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(paramPtr[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16))) {\n          FUNC_000045ec(paramPtr[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(paramPtr + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalSize;\n      }\n      totalSize = totalSize + result;\n    }\n    if (*bytePtr == 0) goto LAB_00005a06;\n    decimal = -1;\n    stackVar = 0;\n    flags = 0;\n    number = 0;\n    charVar3 = 0;\n    intVar = 0;\n    currentByte = bytePtr + 1;\n    while( true ) {\n      bytePtr = currentByte + 1;\n      result = find_byte_sequence_00006010(\"#-0+ \",*currentByte,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      currentByte = bytePtr;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      charVar3 = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      charVar3 = 0x2b;\n    }\n    if (*currentByte == 0x2a) {\n      intPointer = intArray + 1;\n      number = *intArray;\n      intArray = intPointer;\n      if (number < 0) {\n        number = -number;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isDigit = false;\n      result = number;\n      bytePtr = currentByte;\n      while( true ) {\n        if (9 < *bytePtr - 0x30) break;\n        result = result * 10 + (*bytePtr - 0x30);\n        isDigit = true;\n        bytePtr = bytePtr + 1;\n      }\n      if (isDigit) {\n        number = result;\n      }\n    }\n    if (*bytePtr == 0x2e) {\n      if (bytePtr[1] == 0x2a) {\n        decimal = *intArray;\n        if (decimal < 0) {\n          decimal = -1;\n        }\n        bytePtr = bytePtr + 2;\n        intArray = intArray + 1;\n      }\n      else {\n        isDigit = false;\n        decimal = 0;\n        result = 0;\n        while( true ) {\n          bytePtr = bytePtr + 1;\n          if (9 < *bytePtr - 0x30) break;\n          result = result * 10 + (*bytePtr - 0x30);\n          isDigit = true;\n        }\n        if (isDigit) {\n          decimal = result;\n        }\n      }\n    }\n    result = find_byte_sequence_00006010(&DAT_00007c02,*bytePtr,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      bytePtr = bytePtr + 1;\n    }\n    byteArrayPtr = bytePtr + 1;\n    charVar = *bytePtr;\n    result = find_byte_sequence_00006010(\"efgEFG\",charVar,6);\n    if (result == 0) {\n      unaff_r7 = parse_input_00005b34(functionPtr,&flags,paramPtr,0x57d3,&intArray);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      intArray = (int *)(((int)intArray + 7U & 0xfffffff8) + 8);\n    }\n    totalSize = totalSize + unaff_r7;\n    currentByte = byteArrayPtr;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_input_000057f8",
                "param_1": "functionPtr",
                "param_2": "paramPtr",
                "param_3": "byteArrayPtr",
                "param_4": "intArrayPtr",
                "iVar1": "result",
                "iVar2": "processResult",
                "piVar3": "intPointer",
                "bVar4": "isDigit",
                "pbVar5": "bytePtr",
                "pbVar6": "currentByte",
                "local_8c": "intArray",
                "local_88": "flags",
                "local_84": "decimal",
                "uStack_80": "stackVar",
                "local_7c": "number",
                "local_74": "totalSize",
                "local_70": "charVar",
                "local_6f": "charVar1",
                "local_6e": "charVar2",
                "local_45": "charVar3",
                "local_30": "intVar"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "copy_and_process_data_00005a58",
            "code": "\nundefined4\ncopyAndProcessData_00005a58(undefined4 sourcePointer,uint *dataPointer,uint *destinationPointer,undefined4 param_4,code *callbackFunction)\n\n{\n  int loopIndex;\n  undefined4 returnValue;\n  int temporaryVariable;\n  uint maximumLength;\n  uint loopCounter;\n  bool checkCondition;\n  \n  maximumLength = dataPointer[4];\n  if ((int)dataPointer[4] < (int)dataPointer[2]) {\n    maximumLength = dataPointer[2];\n  }\n  *destinationPointer = maximumLength;\n  if (*(char *)((int)dataPointer + 0x43) != '\\0') {\n    *destinationPointer = maximumLength + 1;\n  }\n  if ((int)(*dataPointer << 0x1a) < 0) {\n    *destinationPointer = *destinationPointer + 2;\n  }\n  if ((*dataPointer & 6) == 0) {\n    for (loopIndex = 0; loopIndex < (int)(dataPointer[3] - *destinationPointer); loopIndex = loopIndex + 1) {\n      temporaryVariable = (*callbackFunction)(sourcePointer,param_4,(int)dataPointer + 0x19,1);\n      if (temporaryVariable == -1) goto LAB_00005afc;\n    }\n  }\n  maximumLength = (uint)*(byte *)((int)dataPointer + 0x43);\n  if (maximumLength != 0) {\n    maximumLength = 1;\n  }\n  if ((int)(*dataPointer << 0x1a) < 0) {\n    *(undefined *)((int)dataPointer + maximumLength + 0x43) = 0x30;\n    *(undefined *)((int)dataPointer + maximumLength + 0x44) = *(undefined *)((int)dataPointer + 0x45);\n    maximumLength = maximumLength + 2;\n  }\n  loopIndex = (*callbackFunction)(sourcePointer,param_4,(int)dataPointer + 0x43,maximumLength);\n  if (loopIndex == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maximumLength = dataPointer[3];\n    checkCondition = (*dataPointer & 6) == 4;\n    if (checkCondition) {\n      maximumLength = maximumLength - *destinationPointer;\n    }\n    if (checkCondition) {\n      maximumLength = maximumLength & ~((int)maximumLength >> 0x1f);\n    }\n    else {\n      maximumLength = 0;\n    }\n    if ((int)dataPointer[4] < (int)dataPointer[2]) {\n      maximumLength = maximumLength + (dataPointer[2] - dataPointer[4]);\n    }\n    for (loopCounter = 0; maximumLength != loopCounter; loopCounter = loopCounter + 1) {\n      loopIndex = (*callbackFunction)(sourcePointer,param_4,(int)dataPointer + 0x1a,1);\n      if (loopIndex == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "copy_and_process_data_00005a58",
                "param_1": "sourcePointer",
                "param_2": "dataPointer",
                "param_3": "destinationPointer",
                "param_5": "callbackFunction",
                "iVar1": "loopIndex",
                "uVar2": "returnValue",
                "iVar3": "temporaryVariable",
                "uVar4": "maximumLength",
                "uVar5": "loopCounter",
                "bVar6": "checkCondition"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "parse_input_00005b34",
            "code": "\ncode * parseInput_00005b34(undefined4 inputData,uint *outputData,undefined4 param3,code *callback,uint **ppData\n                   )\n\n{\n  bool isNegative;\n  byte inputByte;\n  int result;\n  code *output;\n  char *hexDigits;\n  int tempResult;\n  char *pcVar7;\n  uint number;\n  uint *pData;\n  uint base;\n  uint **ppDataPtrs;\n  char **ppCharPtrs;\n  uint length;\n  char *dst;\n  code *localCallback;\n  \n  inputByte = *(byte *)(outputData + 6);\n  pcVar7 = (char *)((int)outputData + 0x43);\n  localCallback = callback;\n  if (0x78 < inputByte) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)outputData + 0x42) = inputByte;\nLAB_00005bdc:\n    pcVar7 = (char *)((int)outputData + 0x42);\n    number = 1;\nLAB_00005d28:\n    outputData[4] = number;\n    *(undefined *)((int)outputData + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (inputByte < 99) {\n    if (inputByte == 0) goto LAB_00005d06;\n    if (inputByte == 0x58) {\n      hexDigits = \"0123456789ABCDEF\";\n      *(undefined *)((int)outputData + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(inputByte) {\n  case 99:\n    number = **ppData;\n    *ppData = *ppData + 1;\n    *(char *)((int)outputData + 0x42) = (char)number;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *outputData;\n    pData = *ppData;\n    if ((int)(base << 0x18) < 0) {\n      number = *pData;\n      *ppData = pData + 1;\n    }\n    else {\n      number = *pData;\n      *ppData = pData + 1;\n      if ((base & 0x40) != 0) {\n        number = (uint)(short)number;\n      }\n    }\n    if ((int)number < 0) {\n      number = -number;\n      *(undefined *)((int)outputData + 0x43) = 0x2d;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppDataPtrs = (uint **)*ppData;\n    base = *outputData;\n    number = outputData[5];\n    *ppData = (uint *)(ppDataPtrs + 1);\n    pData = *ppDataPtrs;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *pData = number;\n    }\n    else {\n      *(short *)pData = (short)number;\n    }\nLAB_00005d06:\n    outputData[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    pData = *ppData;\n    number = *outputData;\n    *ppData = pData + 1;\n    if (((int)(number << 0x18) < 0) || (-1 < (int)(number << 0x19))) {\n      number = *pData;\n    }\n    else {\n      number = (uint)*(ushort *)pData;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    if (inputByte == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *outputData = *outputData | 0x20;\n  case 0x78:\n    hexDigits = \"0123456789abcdef\";\n    *(undefined *)((int)outputData + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *outputData;\n    number = **ppData;\n    *ppData = *ppData + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      number = number & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *outputData = base | 0x20;\n    }\n    if (number == 0) {\n      *outputData = *outputData & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppCharPtrs = (char **)*ppData;\n    *ppData = (uint *)(ppCharPtrs + 1);\n    pcVar7 = *ppCharPtrs;\n    result = find_byte_sequence_00006010(pcVar7,0,outputData[1],ppCharPtrs,inputData,outputData,param3);\n    if (result != 0) {\n      outputData[1] = result - (int)pcVar7;\n    }\n    number = outputData[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)outputData + 0x43) = 0;\nLAB_00005c36:\n  length = outputData[1];\n  outputData[2] = length;\n  if (-1 < (int)length) {\n    *outputData = *outputData & 0xfffffffb;\n  }\n  dst = pcVar7;\n  if ((number != 0) || (length != 0)) {\n    do {\n      dst = dst + -1;\n      *dst = hexDigits[number - base * (number / base)];\n      isNegative = base <= number;\n      number = number / base;\n    } while (isNegative);\n  }\n  if (((base == 8) && ((int)(*outputData << 0x1f) < 0)) && ((int)outputData[1] <= (int)outputData[4])) {\n    dst[-1] = '0';\n    dst = dst + -1;\n  }\n  outputData[4] = (int)pcVar7 - (int)dst;\n  pcVar7 = dst;\nLAB_00005c84:\n  result = copy_and_process_data_00005a58(inputData,outputData,&localCallback,param3,callback);\n  if ((result == -1) || (result = (*callback)(inputData,param3,pcVar7,outputData[4]), result == -1)) {\nLAB_00005c98:\n    output = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*outputData << 0x1e) < 0) {\n      for (result = 0; result < (int)(outputData[3] - (int)localCallback); result = result + 1) {\n        tempResult = (*callback)(inputData,param3,(int)outputData + 0x19,1);\n        if (tempResult == -1) goto LAB_00005c98;\n      }\n    }\n    output = (code *)outputData[3];\n    if ((int)(code *)outputData[3] < (int)localCallback) {\n      output = localCallback;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "parse_input_00005b34",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "ppData",
                "bVar1": "isNegative",
                "bVar2": "inputByte",
                "iVar3": "result",
                "pcVar4": "output",
                "pcVar5": "hexDigits",
                "iVar6": "tempResult",
                "uVar8": "number",
                "puVar9": "pData",
                "uVar10": "base",
                "uVar13": "length",
                "pcVar14": "dst",
                "local_24": "localCallback",
                "ppuVar11": "ppDataPtrs",
                "ppcVar12": "ppCharPtrs"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_and_retrieve_byte_00005e10",
            "code": "\nuint processAndRetrieveByte_00005e10(int inputPtr,byte **dataPtr)\n\n{\n  int processingResult;\n  uint returnValue;\n  byte *bytePtr;\n  \n  if ((inputPtr != 0) && (*(int *)(inputPtr + 0x18) == 0)) {\n    initialize_memory_and_process_params_000042a4();\n  }\n  if (dataPtr == (byte **)&DAT_000079b8) {\n    dataPtr = *(byte ***)(inputPtr + 4);\n  }\n  else if (dataPtr == (byte **)&DAT_000079d8) {\n    dataPtr = *(byte ***)(inputPtr + 8);\n  }\n  else if (dataPtr == (byte **)&DAT_00007998) {\n    dataPtr = *(byte ***)(inputPtr + 0xc);\n  }\n  processingResult = process_data_00006768(inputPtr,dataPtr);\n  if (processingResult == 0) {\n    dataPtr[1] = dataPtr[1] + -1;\n    bytePtr = *dataPtr;\n    *dataPtr = bytePtr + 1;\n    returnValue = (uint)*bytePtr;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_and_retrieve_byte_00005e10",
                "param_1": "inputPtr",
                "param_2": "dataPtr",
                "iVar1": "processingResult",
                "uVar2": "returnValue",
                "pbVar3": "bytePtr"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_data_00005e68",
            "code": "\nvoid process_data_00005e68(undefined4 input_value,undefined4 output_value,undefined4 additional_param_1,undefined4 additional_param_2)\n\n{\n  undefined4 input_copy;\n  undefined4 null_character;\n  undefined2 constant_value_1;\n  undefined2 constant_value_2;\n  undefined4 input_copy_2;\n  undefined4 null_character_copy;\n  undefined *string_pointer;\n  undefined4 zero_value;\n  undefined4 zero_value_2;\n  undefined4 additional_param_1_copy;\n  undefined4 additional_param_2_copy;\n  \n  constant_value_1 = 0x204;\n  input_copy = input_value;\n  input_copy_2 = input_value;\n  additional_param_1_copy = additional_param_1;\n  additional_param_2_copy = additional_param_2;\n  null_character = find_terminating_null_character_00005ecc();\n  string_pointer = &LAB_00004dea_1;\n  zero_value = 0;\n  zero_value_2 = 0;\n  constant_value_2 = 0xffff;\n  null_character_copy = null_character;\n  process_data_00005e68_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&input_copy,output_value,&additional_param_1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "input_value",
                "param_2": "output_value",
                "param_3": "additional_param_1",
                "param_4": "additional_param_2",
                "local_80": "input_copy",
                "local_7c": "null_character",
                "local_74": "constant_value_1",
                "local_72": "constant_value_2",
                "local_70": "input_copy_2",
                "local_6c": "null_character_copy",
                "local_5c": "string_pointer",
                "local_4c": "zero_value",
                "local_38": "zero_value_2",
                "uStack_8": "additional_param_1_copy",
                "uStack_4": "additional_param_2_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentCharacter;\n  \n  do {\n    currentCharacter = *source;\n    *destination = currentCharacter;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentCharacter != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentCharacter"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_terminating_null_character_00005ecc",
            "code": "\nchar * findTerminatingNullCharacter_00005ecc(char *inputString)\n\n{\n  char currentChar;\n  char *nextCharPointer;\n  char *currentCharPointer;\n  \n  currentCharPointer = inputString;\n  do {\n    nextCharPointer = currentCharPointer + 1;\n    currentChar = *currentCharPointer;\n    currentCharPointer = nextCharPointer;\n  } while (currentChar != '\\0');\n  return nextCharPointer + (-1 - (int)inputString);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_terminating_null_character_00005ecc",
                "param_1": "inputString",
                "cVar1": "currentChar",
                "pcVar2": "nextCharPointer",
                "pcVar3": "currentCharPointer"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_integer_00005edc",
            "code": "\nuint parseInteger_00005edc(undefined4 *result,byte *input,byte **remainingBytes,uint radix)\n\n{\n  uint value;\n  uint ch;\n  byte negativeFlag;\n  int status;\n  uint digit;\n  uint maxDigits;\n  byte *p;\n  byte *pNext;\n  \n  pNext = input;\n  do {\n    p = pNext;\n    pNext = p + 1;\n    ch = (uint)*p;\n    negativeFlag = (&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*pNext;\n    negativeFlag = 1;\n    pNext = p + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*pNext;\n    pNext = p + 2;\n  }\n  if (radix == 0) {\n    if (ch != 0x30) {\n      radix = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((radix != 0x10) || (ch != 0x30)) goto LAB_00005f26;\n  if ((*pNext & 0xdf) == 0x58) {\n    ch = (uint)pNext[1];\n    radix = 0x10;\n    pNext = pNext + 2;\n  }\n  else {\n    ch = 0x30;\n    if (radix == 0) {\n      radix = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxDigits = 0xffffffff / radix;\n  value = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)radix <= (int)digit) break;\n    if (((status < 0) || (maxDigits < value)) ||\n       ((maxDigits == value && ((int)~(radix * maxDigits) < (int)digit)))) {\n      status = -1;\n    }\n    else {\n      value = value * radix + digit;\n      status = 1;\n    }\n    ch = (uint)*pNext;\n    pNext = pNext + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    value = 0xffffffff;\n    if (remainingBytes == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negativeFlag != 0) {\n      value = -value;\n    }\n    if (remainingBytes == (byte **)0x0) {\n      return value;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = pNext + -1;\nLAB_00005fb8:\n  *remainingBytes = input;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_integer_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "remainingBytes",
                "param_4": "radix",
                "uVar1": "value",
                "uVar2": "ch",
                "bVar3": "negativeFlag",
                "iVar4": "status",
                "uVar5": "digit",
                "uVar6": "maxDigits",
                "pbVar7": "p",
                "pbVar8": "pNext"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_elf32_rel_00005fd8",
            "code": "\nvoid parseElf32Rel_00005fd8(undefined4 offsetPtr,undefined4 param1,undefined4 param2)\n\n{\n  parse_integer_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offsetPtr,param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_elf32_rel_00005fd8",
                "param_1": "offsetPtr",
                "param_2": "param1",
                "param_3": "param2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint byte_to_find,uint length)\n\n{\n  byte current_byte;\n  char is_zero_1;\n  char is_zero_2;\n  char is_zero_3;\n  char is_zero_4;\n  byte *next_byte_pointer;\n  uint *current_data_pointer;\n  byte *result_pointer;\n  uint remainder;\n  uint length_remainder;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool is_nonzero_1;\n  bool is_nonzero_2;\n  bool is_nonzero_3;\n  bool is_nonzero_4;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_data_pointer = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = current_data_pointer;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    remainder = (uint)data & 7;\n    while( true ) {\n      if (remainder == 0) {\n        remainder = byte_to_find | byte_to_find << 8;\n        remainder = remainder | remainder << 0x10;\n        length_remainder = length & 0xfffffff8;\n        do {\n          current_data_pointer = data + 2;\n          length_remainder = length_remainder - 8;\n          xor_result_1 = *data ^ remainder;\n          xor_result_2 = data[1] ^ remainder;\n          is_zero_1 = -((char)xor_result_1 == '\\0');\n          is_zero_2 = -((char)(xor_result_1 >> 8) == '\\0');\n          is_zero_3 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          is_zero_4 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(is_zero_4,CONCAT12(is_zero_3,CONCAT11(is_zero_2,is_zero_1)));\n          is_nonzero_1 = (char)xor_result_2 != '\\0';\n          is_nonzero_2 = (char)(xor_result_2 >> 8) != '\\0';\n          is_nonzero_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          is_nonzero_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(is_nonzero_4 * is_zero_4 - !is_nonzero_4,\n                            CONCAT12(is_nonzero_3 * is_zero_3 - !is_nonzero_3,\n                                     CONCAT11(is_nonzero_2 * is_zero_2 - !is_nonzero_2,is_nonzero_1 * is_zero_1 - !is_nonzero_1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              result_pointer = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              result_pointer = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              is_nonzero_1 = (xor_result_1 & 0x100) == 0;\n              next_byte_pointer = result_pointer + 1;\n              if (is_nonzero_1) {\n                is_nonzero_1 = (xor_result_1 & 0x18000) == 0;\n                next_byte_pointer = result_pointer + 2;\n              }\n              result_pointer = next_byte_pointer;\n              if (is_nonzero_1) {\n                result_pointer = result_pointer + 1;\n              }\n            }\n            return result_pointer + -1;\n          }\n          data = current_data_pointer;\n        } while (length_remainder != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      current_data_pointer = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == byte_to_find) break;\n      remainder = (uint)current_data_pointer & 7;\n      data = current_data_pointer;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_data_pointer + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "bVar1": "current_byte",
                "cVar2": "is_zero_1",
                "cVar3": "is_zero_2",
                "cVar4": "is_zero_3",
                "cVar5": "is_zero_4",
                "pbVar6": "next_byte_pointer",
                "puVar7": "current_data_pointer",
                "pbVar8": "result_pointer",
                "uVar9": "remainder",
                "uVar10": "length_remainder",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "is_nonzero_1",
                "bVar14": "is_nonzero_2",
                "bVar15": "is_nonzero_3",
                "bVar16": "is_nonzero_4"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_data_000060b0",
            "code": "\nvoid copyData_000060b0(int destSize,undefined *src,int srcSize)\n\n{\n  undefined *srcPtr;\n  undefined *srcEndPtr;\n  undefined *destPtr;\n  \n  srcEndPtr = src + srcSize;\n  destPtr = (undefined *)(destSize + -1);\n  if (src != srcEndPtr) {\n    do {\n      srcPtr = src + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *src;\n      src = srcPtr;\n    } while (srcPtr != srcEndPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_data_000060b0",
                "param_1": "destSize",
                "param_2": "src",
                "param_3": "srcSize",
                "puVar1": "srcPtr",
                "puVar2": "srcEndPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "process_buffer_000060cc",
            "code": "\nint processBuffer_000060cc(undefined4 bufferSize,int dataPtr,uint sum,undefined4 param_4)\n\n{\n  int result;\n  uint calculatedSum;\n  \n  if (dataPtr != 0) {\n    if (sum == 0) {\n      process_data_00004b34();\n      result = 0;\n    }\n    else {\n      calculatedSum = calculate_sum_00006964();\n      result = dataPtr;\n      if ((calculatedSum < sum) && (result = allocate_buffer_00004bd0(bufferSize,sum), result != 0)) {\n        copy_data_000060b0(result,dataPtr,sum);\n        process_data_00004b34(bufferSize,dataPtr);\n      }\n    }\n    return result;\n  }\n  result = allocate_buffer_00004bd0(bufferSize,sum,sum,param_4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "process_buffer_000060cc",
                "param_1": "bufferSize",
                "param_2": "dataPtr",
                "param_3": "sum",
                "iVar1": "result",
                "uVar2": "calculatedSum"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "process_and_update_data_00006192",
            "code": "\nundefined4 process_and_update_data_00006192(undefined4 input_param,undefined4 *data_array)\n\n{\n  if ((undefined4 *)data_array[0xd] != (undefined4 *)0x0) {\n    if ((undefined4 *)data_array[0xd] != data_array + 0x11) {\n      process_data_00004b34();\n    }\n    data_array[1] = data_array[0x10];\n    data_array[0xd] = 0;\n    if (data_array[0x10] != 0) {\n      *data_array = data_array[0xf];\n      return 0;\n    }\n  }\n  *data_array = data_array[4];\n  data_array[1] = 0;\n  *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "process_and_update_data_00006192",
                "param_1": "input_param",
                "param_2": "data_array"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint processData_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint tempVar;\n  byte *nextByte;\n  uint currentByte;\n  int **outputData;\n  undefined stackBuffer [256];\n  uint flags;\n  undefined4 dataType;\n  uint byteCount;\n  int totalCount;\n  int sectionCount;\n  undefined *localBuffer;\n  int status;\n  undefined *functionPointer;\n  code *updateDataFunc;\n  \n  totalCount = 0;\n  sectionCount = 0;\n  functionPointer = &LAB_00006118_1;\n  updateDataFunc = process_and_update_data_00006192 + 1;\n  outputData = param4;\n  localBuffer = stackBuffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      currentByte = (uint)*param3;\n      if (currentByte == 0) {\n        return totalCount;\n      }\n      tempVar = (byte)(&DAT_00007a99)[currentByte] & 8;\n      nextByte = param3 + 1;\n      if (((&DAT_00007a99)[currentByte] & 8) == 0) break;\n      while (((param3 = nextByte, 0 < (int)param2[1] ||\n              (result = (*updateDataFunc)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        sectionCount = sectionCount + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (currentByte == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*updateDataFunc)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != currentByte) {\n      return totalCount;\n    }\n    *param2 = *param2 + 1;\n    sectionCount = sectionCount + 1;\n    param2[1] = param2[1] + -1;\n    param3 = nextByte;\n  }\n  byteCount = tempVar;\n  flags = tempVar;\n  if (param3[1] == 0x2a) {\n    nextByte = param3 + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    tempVar = (uint)*nextByte;\n    if (9 < tempVar - 0x30) break;\n    nextByte = nextByte + 1;\n    byteCount = (byteCount * 10 + tempVar) - 0x30;\n  }\n  result = find_byte_sequence_00006010(&DAT_00007c02,tempVar,3);\n  if (result != 0) {\n    flags = 1 << (result - 0x7c02U & 0xff) | flags;\n    nextByte = nextByte + 1;\n  }\n  param3 = nextByte + 1;\n  tempVar = (uint)*nextByte;\n  if (tempVar < 0x79) {\n    if (0x57 < tempVar) {\n      switch(tempVar) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)extract_relevant_section_0000687c(stackBuffer,param3);\n        flags = flags | 0x40;\n        status = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        status = 0;\n        break;\n      case 100:\n      case 0x75:\n        dataType = 10;\nLAB_000063a0:\n        if (tempVar < 0x6f) {\n          status = 3;\n        }\n        else {\n          status = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        status = 5;\n        break;\n      case 0x69:\n        dataType = 0;\n        status = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*outputData = (short)sectionCount;\n            outputData = outputData + 1;\n          }\n          else {\n            **outputData = sectionCount;\n            outputData = outputData + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        dataType = 8;\n        status = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        dataType = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        status = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*updateDataFunc)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          sectionCount = sectionCount + 1;\n          nextByte = param2[1];\n          param2[1] = nextByte + -1;\n          if ((int)(nextByte + -1) < 1) {\n            result = (*updateDataFunc)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (status < 3) {\n        result = process_data_000064bc(param1,&flags,param2,&outputData);\n      }\n      else {\n        if (4 < status) goto LAB_000061f6;\n        result = reverse_and_extract_data_0000656c(param1,&flags,param2,&outputData);\n      }\n      if (result == 1) {\n        return totalCount;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (totalCount == 0) {\nLAB_00006388:\n          totalCount = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          totalCount = -1;\n        }\n        return totalCount;\n      }\n      goto LAB_000061f6;\n    }\n    nextByte = param3;\n    if (tempVar == 0x25) goto LAB_00006352;\n    if (tempVar < 0x26) {\n      if (tempVar != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (tempVar - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  status = 3;\n  dataType = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "tempVar",
                "pbVar3": "nextByte",
                "uVar4": "currentByte",
                "local_2b0": "outputData",
                "auStack_2ac": "stackBuffer",
                "local_1ac": "flags",
                "local_1a8": "dataType",
                "local_1a4": "byteCount",
                "local_1a0": "totalCount",
                "local_19c": "sectionCount",
                "local_198": "localBuffer",
                "local_194": "status",
                "local_30": "functionPointer",
                "local_2c": "updateDataFunc"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_value,uint *data_array,byte **byte_ptr_ptr,undefined4 *result_ptr)\n\n{\n  int func_result;\n  uint temp_value;\n  byte **byte_ptr_ptr_ptr;\n  byte *byte_ptr_1;\n  byte *byte_ptr_2;\n  byte *byte_ptr_3;\n  int iteration_count;\n  \n  if (data_array[2] == 0) {\n    if (data_array[6] == 0) {\n      temp_value = 1;\n    }\n    else {\n      temp_value = 0xffffffff;\n    }\n    data_array[2] = temp_value;\n  }\n  if (-1 < (int)(*data_array << 0x1b)) {\n    byte_ptr_ptr_ptr = (byte **)*result_ptr;\n    *result_ptr = byte_ptr_ptr_ptr + 1;\n    byte_ptr_2 = *byte_ptr_ptr_ptr;\n  }\n  iteration_count = 0;\n  do {\n    temp_value = data_array[6];\n    if (temp_value != 0) {\n      if (temp_value == 1) {\n        if (*(char *)(data_array[5] + (uint)**byte_ptr_ptr) == '\\0') {\n          if (iteration_count == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data_array & 0x10) == 0) && (data_array[3] = data_array[3] + 1, data_array[6] != 0)) {\n            *byte_ptr_2 = 0;\n          }\n          data_array[4] = iteration_count + data_array[4];\n          return 0;\n        }\n      }\n      else if ((temp_value != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**byte_ptr_ptr] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byte_ptr_3 = byte_ptr_2;\n    if (-1 < (int)(*data_array << 0x1b)) {\n      byte_ptr_3 = byte_ptr_2 + 1;\n      *byte_ptr_2 = **byte_ptr_ptr;\n    }\n    byte_ptr_1 = byte_ptr_ptr[1];\n    *byte_ptr_ptr = *byte_ptr_ptr + 1;\n    temp_value = data_array[2] - 1;\n    byte_ptr_ptr[1] = byte_ptr_1 + -1;\n    iteration_count = iteration_count + 1;\n    data_array[2] = temp_value;\n    byte_ptr_2 = byte_ptr_3;\n    if ((temp_value == 0) ||\n       (((int)(byte_ptr_1 + -1) < 1 &&\n        (func_result = (*(code *)data_array[0x60])(input_value,byte_ptr_ptr,temp_value,(code *)data_array[0x60],result_ptr),\n        func_result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_3": "byte_ptr_ptr",
                "param_4": "result_ptr",
                "iVar1": "func_result",
                "iVar6": "iteration_count",
                "uVar2": "temp_value",
                "ppbVar3": "byte_ptr_ptr_ptr",
                "pbVar4": "byte_ptr_1",
                "unaff_r6": "byte_ptr_2",
                "pbVar5": "byte_ptr_3"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "reverse_and_extract_data_0000656c",
            "code": "\nundefined4 reverse_and_extract_data_0000656c(undefined4 input,uint *flags,byte **data,undefined4 *output)\n\n{\n  int result;\n  undefined4 value;\n  code *process_data;\n  uint count;\n  byte *byte_value;\n  uint temp_value;\n  undefined4 *result_ptr;\n  uint *data_ptr;\n  uint *temp_ptr;\n  uint *flags_ptr;\n  int limit;\n  int index;\n  undefined *lookup_table [4];\n  \n  lookup_table[0] = &DAT_00007c2f;\n  lookup_table[1] = &DAT_00007c32;\n  lookup_table[2] = &DAT_00007c35;\n  process_data = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    process_data = (code *)&UNK_00005fd5;\n  }\n  temp_value = flags[2];\n  count = temp_value - 1;\n  if (0x15c < count) {\n    limit = temp_value - 0x15d;\n    temp_value = 0x15d;\n  }\n  if (0x15c < count) {\n    flags[2] = temp_value;\n  }\n  flags_ptr = flags + 7;\n  if (count < 0x15d) {\n    limit = 0;\n  }\n  *flags = *flags | 0xd00;\n  index = 0;\n  temp_ptr = flags_ptr;\n  do {\n    result = find_byte_sequence_00006010(lookup_table[index],**data,2);\n    if (result != 0) {\n      if (index == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        count = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = count;\n      }\n      else if (index == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        count = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      count = flags[2];\n      flags[2] = count - 1;\n      if (count != 0) {\n        byte_value = *data;\n        *data = byte_value + 1;\n        data_ptr = (uint *)((int)temp_ptr + 1);\n        *(byte *)temp_ptr = *byte_value;\n        byte_value = data[1];\n        data[1] = byte_value + -1;\n        temp_ptr = data_ptr;\n        if (((int)(byte_value + -1) < 1) &&\n           (result = (*(code *)flags[0x60])(input,data), result != 0)) {\n          index = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    index = index + 1;\n  } while (index != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  extract_relevant_section_0000687c(flags[5],\"01234567]\" + (8 - flags[1]));\n  index = 0;\n  while( true ) {\n    data_ptr = temp_ptr;\n    if (flags[2] == 0) break;\n    byte_value = *data;\n    count = (uint)*byte_value;\n    if (*(char *)(flags[5] + count) == '\\0') break;\n    if ((count == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      index = index + 1;\n      if (limit != 0) {\n        limit = limit + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      data_ptr = (uint *)((int)temp_ptr + 1);\n      *(byte *)temp_ptr = *byte_value;\n    }\n    byte_value = data[1];\n    data[1] = byte_value + -1;\n    if ((int)(byte_value + -1) < 1) {\n      result = (*(code *)flags[0x60])(input,data);\n      if (result != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    temp_ptr = data_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (flags_ptr < data_ptr) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)data_ptr + -1),data);\n      data_ptr = (uint *)((int)data_ptr + -1);\n    }\n    if (data_ptr == flags_ptr) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)data_ptr = 0;\n    value = (*process_data)(input,flags_ptr,0,flags[1]);\n    result_ptr = (undefined4 *)*output;\n    count = *flags;\n    *output = result_ptr + 1;\n    result_ptr = (undefined4 *)*result_ptr;\n    if ((count & 0x20) == 0) {\n      if ((int)(count << 0x1f) < 0) {\n        *(short *)result_ptr = (short)value;\n      }\n      else {\n        *result_ptr = value;\n      }\n    }\n    else {\n      *result_ptr = value;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)data_ptr + flags[4] + (index - (int)flags_ptr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "reverse_and_extract_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "value",
                "pcVar3": "process_data",
                "uVar4": "count",
                "pbVar5": "byte_value",
                "uVar6": "temp_value",
                "puVar7": "result_ptr",
                "puVar8": "data_ptr",
                "puVar9": "temp_ptr",
                "puVar10": "flags_ptr",
                "unaff_r9": "limit",
                "iVar11": "index",
                "local_34": "lookup_table"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputParams,undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 temp1;\n  int temp2;\n  undefined4 temp3;\n  ushort flags;\n  uint temp4;\n  \n  if ((inputParams != (undefined4 *)0x0) && (inputParams[6] == 0)) {\n    initialize_memory_and_process_params_000042a4();\n  }\n  if (data == &DAT_000079b8) {\n    data = (undefined4 *)inputParams[1];\n  }\n  else if (data == (undefined4 *)&DAT_000079d8) {\n    data = (undefined4 *)inputParams[2];\n  }\n  else if (data == (undefined4 *)&DAT_00007998) {\n    data = (undefined4 *)inputParams[3];\n  }\n  flags = *(ushort *)(data + 3);\n  data[1] = 0;\n  temp4 = (uint)*(ushort *)(data + 3);\n  if ((int)(temp4 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(temp4 << 0x1d) < 0) {\n    if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data[0xd] != data + 0x11) {\n        process_data_00004b34(inputParams);\n      }\n      data[1] = data[0x10];\n      data[0xd] = 0;\n      if (data[0x10] != 0) {\n        *data = data[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(temp4 << 0x1b)) {\n      *inputParams = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(temp4 << 0x1c) < 0) {\n      temp2 = process_data_00004158(inputParams,data,temp4 << 0x1c,temp4,value2);\n      if (temp2 != 0) {\n        return 0xffffffff;\n      }\n      data[2] = 0;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfff7;\n      data[6] = 0;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 4;\n  }\n  if (data[4] == 0) {\n    initialize_buffer_00005700(inputParams,data);\n  }\n  flags = *(ushort *)(data + 3);\n  temp1 = *(undefined2 *)(data + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(data + 3) = 1;\n    process_data_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(data + 3) = temp1;\n    if ((flags & 9) == 9) {\n      process_data_0000404c(inputParams,data);\n    }\n  }\n  temp3 = data[4];\n  *data = temp3;\n  temp2 = (*(code *)data[9])(inputParams,data[8],temp3,data[5]);\n  data[1] = temp2;\n  if (0 < temp2) {\n    return 0;\n  }\n  flags = *(ushort *)(data + 3);\n  if (temp2 != 0) {\n    temp3 = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (temp2 != 0) {\n    data[1] = temp3;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputParams",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "flags",
                "uVar5": "temp4"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_relevant_section_0000687c",
            "code": "\nbyte * extract_relevant_section_0000687c(int section_size,byte *binary_data)\n\n{\n  byte *result_ptr;\n  uint comparison_value;\n  int index;\n  uint current_value;\n  uint temp_value_1;\n  uint temp_value_2;\n  bool is_condition_met;\n  \n  current_value = (uint)*binary_data;\n  is_condition_met = current_value == 0x5e;\n  if (is_condition_met) {\n    current_value = (uint)binary_data[1];\n    binary_data = binary_data + 2;\n  }\n  else {\n    binary_data = binary_data + 1;\n  }\n  index = section_size + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_condition_met;\n  } while (index != section_size + 0xff);\n  if (current_value == 0) {\n    result_ptr = binary_data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      temp_value_1 = current_value;\n      *(bool *)(section_size + temp_value_1) = !is_condition_met;\n      binary_data = binary_data + 1;\n      while( true ) {\n        current_value = (uint)binary_data[-1];\n        if (current_value != 0x2d) break;\n        temp_value_2 = (uint)*binary_data;\n        if ((temp_value_2 == 0x5d) || (comparison_value = temp_value_1, (int)temp_value_2 < (int)temp_value_1)) goto LAB_000068aa;\n        do {\n          comparison_value = comparison_value + 1;\n          *(bool *)(section_size + comparison_value) = !is_condition_met;\n        } while ((int)comparison_value < (int)temp_value_2);\n        index = ~temp_value_1 + temp_value_2;\n        if ((int)temp_value_2 <= (int)temp_value_1) {\n          index = 0;\n        }\n        temp_value_1 = temp_value_1 + 1 + index;\n        binary_data = binary_data + 2;\n      }\n      result_ptr = binary_data;\n    } while ((current_value != 0x5d) && (result_ptr = binary_data + -1, current_value != 0));\n  }\n  return result_ptr;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_relevant_section_0000687c",
                "param_1": "section_size",
                "param_2": "binary_data",
                "pbVar1": "result_ptr",
                "uVar2": "comparison_value",
                "iVar3": "index",
                "uVar4": "current_value",
                "uVar5": "temp_value_1",
                "uVar6": "temp_value_2",
                "bVar7": "is_condition_met"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "expand_or_process_buffer_000068f0",
            "code": "\nundefined4 expandOrProcessBuffer_000068f0(undefined4 bufferSize,int *buffer)\n\n{\n  int newBuffer;\n  int oldBufferSize;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    newBuffer = allocate_buffer_00004bd0(bufferSize,0x400);\n    if (newBuffer != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = newBuffer;\n      *(undefined *)(newBuffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(newBuffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(newBuffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = newBuffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    oldBufferSize = buffer[0xe];\n    newBuffer = process_buffer_000060cc(bufferSize,(int *)buffer[0xd],oldBufferSize << 1);\n    if (newBuffer != 0) {\n      copy_data_000060b0(newBuffer + oldBufferSize,newBuffer,oldBufferSize);\n      buffer[0xd] = newBuffer;\n      buffer[0xe] = oldBufferSize << 1;\n      *buffer = newBuffer + oldBufferSize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "expand_or_process_buffer_000068f0",
                "param_1": "bufferSize",
                "param_2": "buffer",
                "iVar1": "newBuffer",
                "iVar2": "oldBufferSize"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 value,int array)\n\n{\n  int sumIndex;\n  \n  sumIndex = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sumIndex = sumIndex + *(int *)(array + sumIndex);\n  }\n  return sumIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "value",
                "param_2": "array",
                "iVar1": "sumIndex"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "calculate_bounds_and_division_00006974",
            "code": "\nundefined8 calculate_bounds_and_division_00006974(int dividend,int divisor,int remainder,int negative_remainder)\n\n{\n  int adjusted_divisor;\n  undefined8 result;\n  undefined temp_buffer [8];\n  \n  if ((negative_remainder == 0) && (remainder == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    adjusted_divisor = -divisor - (uint)(dividend != 0);\n    if (negative_remainder < 0) {\n      result = calculate_division_and_remainder_00006a14(-dividend,adjusted_divisor,-remainder,-negative_remainder - (uint)(remainder != 0),temp_buffer);\n      return result;\n    }\n    result = calculate_division_and_remainder_00006a14(-dividend,adjusted_divisor,remainder,negative_remainder,temp_buffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (negative_remainder < 0) {\n    result = calculate_division_and_remainder_00006a14(dividend,divisor,-remainder,-negative_remainder - (uint)(remainder != 0),temp_buffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = calculate_division_and_remainder_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "calculate_bounds_and_division_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "negative_remainder",
                "iVar1": "adjusted_divisor",
                "uVar2": "result",
                "local_8": "temp_buffer"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "calculate_division_and_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong calculateDivisionAndRemainder_00006a14(uint dividend,uint divisor,uint quotient,uint remainder,uint *quotientAndRemainder)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint quotient1;\n  int numberOfBits;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool carryFlag;\n  ulonglong result;\n  \n  if (remainder == 0) {\n    if (divisor < quotient) {\n      numberOfBits = LZCOUNT(quotient);\n      temp3 = quotient;\n      if (numberOfBits != 0) {\n        temp3 = quotient << numberOfBits;\n        divisor = dividend >> (0x20U - numberOfBits & 0xff) | divisor << numberOfBits;\n        dividend = dividend << numberOfBits;\n      }\n      temp4 = temp3 >> 0x10;\n      temp6 = divisor / temp4;\n      temp1 = dividend >> 0x10 | (divisor - temp4 * temp6) * 0x10000;\n      quotient1 = temp6 * (temp3 & 0xffff);\n      temp2 = temp6;\n      if (temp1 <= quotient1 && quotient1 - temp1 != 0) {\n        carryFlag = CARRY4(temp3,temp1);\n        temp1 = temp3 + temp1;\n        temp2 = temp6 - 1;\n        if ((carryFlag == false) && (temp1 <= quotient1 && quotient1 - temp1 != 0)) {\n          temp2 = temp6 - 2;\n          temp1 = temp1 + temp3;\n        }\n      }\n      temp6 = (temp1 - quotient1) / temp4;\n      temp4 = dividend & 0xffff | ((temp1 - quotient1) - temp4 * temp6) * 0x10000;\n      temp1 = temp6 * (temp3 & 0xffff);\n      quotient1 = temp6;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carryFlag = CARRY4(temp3,temp4);\n        temp4 = temp3 + temp4;\n        quotient1 = temp6 - 1;\n        if ((carryFlag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          quotient1 = temp6 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp4 = temp4 - temp1;\n      quotient1 = quotient1 | temp2 << 0x10;\n      temp3 = 0;\n    }\n    else {\n      if (quotient == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        result = (*UNRECOVERED_JUMPTABLE)();\n        return result;\n      }\n      numberOfBits = LZCOUNT(quotient);\n      if (numberOfBits == 0) {\n        divisor = divisor - quotient;\n        temp7 = quotient >> 0x10;\n        temp5 = quotient & 0xffff;\n        temp3 = 1;\n        temp2 = quotient;\n      }\n      else {\n        temp2 = quotient << numberOfBits;\n        temp7 = temp2 >> 0x10;\n        quotient1 = divisor >> (0x20U - numberOfBits & 0xff);\n        temp3 = dividend >> (0x20U - numberOfBits & 0xff) | divisor << numberOfBits;\n        temp1 = quotient1 / temp7;\n        temp5 = temp2 & 0xffff;\n        temp6 = temp3 >> 0x10 | (quotient1 - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        dividend = dividend << numberOfBits;\n        quotient1 = temp1;\n        if (temp6 <= temp4 && temp4 - temp6 != 0) {\n          carryFlag = CARRY4(temp2,temp6);\n          temp6 = temp2 + temp6;\n          quotient1 = temp1 - 1;\n          if ((carryFlag == false) && (temp6 <= temp4 && temp4 - temp6 != 0)) {\n            quotient1 = temp1 - 2;\n            temp6 = temp6 + temp2;\n          }\n        }\n        temp1 = (temp6 - temp4) / temp7;\n        divisor = temp3 & 0xffff | ((temp6 - temp4) - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        temp3 = temp1;\n        if (divisor <= temp4 && temp4 - divisor != 0) {\n          carryFlag = CARRY4(temp2,divisor);\n          divisor = temp2 + divisor;\n          temp3 = temp1 - 1;\n          if ((carryFlag == false) && (divisor <= temp4 && temp4 - divisor != 0)) {\n            temp3 = temp1 - 2;\n            divisor = divisor + temp2;\n          }\n        }\n        divisor = divisor - temp4;\n        temp3 = temp3 | quotient1 << 0x10;\n      }\n      temp6 = divisor / temp7;\n      temp4 = dividend >> 0x10 | (divisor - temp7 * temp6) * 0x10000;\n      quotient1 = temp5 * temp6;\n      temp1 = temp6;\n      if (temp4 <= quotient1 && quotient1 - temp4 != 0) {\n        carryFlag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        temp1 = temp6 - 1;\n        if ((carryFlag == false) && (temp4 <= quotient1 && quotient1 - temp4 != 0)) {\n          temp1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp6 = (temp4 - quotient1) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - quotient1) - temp7 * temp6) * 0x10000;\n      temp5 = temp5 * temp6;\n      quotient1 = temp6;\n      if (temp4 <= temp5 && temp5 - temp4 != 0) {\n        carryFlag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        quotient1 = temp6 - 1;\n        if ((carryFlag == false) && (temp4 <= temp5 && temp5 - temp4 != 0)) {\n          quotient1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp4 = temp4 - temp5;\n      quotient1 = quotient1 | temp1 << 0x10;\n    }\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = temp4 >> LZCOUNT(quotient);\n      quotientAndRemainder[1] = 0;\n    }\n  }\n  else if (divisor < remainder) {\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = dividend;\n      quotientAndRemainder[1] = divisor;\n      return 0;\n    }\n    quotient1 = 0;\n    temp3 = 0;\n  }\n  else {\n    numberOfBits = LZCOUNT(remainder);\n    if (numberOfBits != 0) {\n      temp5 = 0x20 - numberOfBits;\n      temp1 = quotient >> (temp5 & 0xff) | remainder << numberOfBits;\n      temp7 = temp1 >> 0x10;\n      quotient1 = divisor >> (temp5 & 0xff);\n      temp3 = dividend >> (temp5 & 0xff) | divisor << numberOfBits;\n      temp4 = quotient1 / temp7;\n      temp2 = temp3 >> 0x10 | (quotient1 - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      dividend = dividend << numberOfBits;\n      quotient1 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carryFlag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient1 = temp4 - 1;\n        if ((carryFlag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          quotient1 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp4 = (temp2 - temp6) / temp7;\n      temp2 = temp3 & 0xffff | ((temp2 - temp6) - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      temp3 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carryFlag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        temp3 = temp4 - 1;\n        if ((carryFlag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          temp3 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp3 = temp3 | quotient1 << 0x10;\n      result = (ulonglong)temp3 * (ulonglong)(quotient << numberOfBits);\n      if (CONCAT44(temp2 - temp6,dividend) < result) {\n        result = result - CONCAT44(temp1,quotient << numberOfBits);\n        temp3 = temp3 - 1;\n      }\n      if (quotientAndRemainder != (uint *)0x0) {\n        quotient1 = ((temp2 - temp6) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotientAndRemainder = quotient1 << (temp5 & 0xff) | dividend - (uint)result >> numberOfBits;\n        quotientAndRemainder[1] = quotient1 >> numberOfBits;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((remainder < divisor) || (quotient <= dividend)) {\n      carryFlag = dividend < quotient;\n      dividend = dividend - quotient;\n      divisor = (divisor - remainder) - (uint)carryFlag;\n      quotient1 = 1;\n    }\n    else {\n      quotient1 = 0;\n    }\n    temp3 = 0;\n    if (quotientAndRemainder != (uint *)0x0) {\n      *quotientAndRemainder = dividend;\n      quotientAndRemainder[1] = divisor;\n    }\n  }\n  return CONCAT44(temp3,quotient1);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "calculate_division_and_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "param_5": "quotientAndRemainder",
                "uVar1": "quotient1",
                "iVar2": "numberOfBits",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "bVar10": "carryFlag",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 138119,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}