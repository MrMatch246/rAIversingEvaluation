{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_uart_stdio_00000410",
            "code": "\nvoid initialize_uart_stdio_00000410(void)\n\n{\n  initialize_uart_stdio_00000410();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_uart_stdio_00000410",
                "uart_stdio_init": "initialize_uart_stdio"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "uart_stdio_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_and_update_offset_00000428",
            "code": "\ndword validateAndUpdateOffset_00000428(undefined4 *outputPtr,int inputOffset)\n\n{\n  undefined4 disabledIRQ;\n  dword oldOffset;\n  \n  disabledIRQ = irq_disable();\n  oldOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *outputPtr = 0xc;\n    oldOffset = 0xffffffff;\n  }\n  irq_restore(disabledIRQ);\n  return oldOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_and_update_offset_00000428",
                "param_1": "outputPtr",
                "param_2": "inputOffset",
                "uVar1": "disabledIRQ",
                "local_c": "oldOffset"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "irq_restore",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "read_uart_input_00000490",
            "code": "\nundefined4 read_uart_input_00000490(undefined4 param_1,undefined4 param_2,undefined4 uart_input_buffer,undefined4 buffer_size)\n\n{\n  undefined4 result;\n  \n  result = uart_stdio_read(uart_input_buffer,buffer_size);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "read_uart_input_00000490",
                "param_3": "uart_input_buffer",
                "param_4": "buffer_size",
                "uVar1": "result"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "uart_stdio_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initializeValueAndReturn_000004f2(undefined4 *output)\n\n{\n  *output = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "output"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_value_and_return_00000514",
            "code": "\nundefined4 set_value_and_return_00000514(undefined4 *result_ptr)\n\n{\n  *result_ptr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_value_and_return_00000514",
                "param_1": "result_ptr"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_validity_00000534",
            "code": "\nundefined4 checkInputValidity_00000534(undefined4 *result,int inputValue)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((inputValue == 0) || (inputValue == 1)) || (inputValue == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_validity_00000534",
                "param_1": "result",
                "param_2": "inputValue",
                "uVar1": "isValid"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "decode_bits_00000566",
            "code": "\nint decode_bits_00000566(int input_value)\n\n{\n  byte bit_1;\n  byte bit_2;\n  byte bit_3;\n  byte bit_4;\n  int decoded_value;\n  \n  bit_2 = (byte)input_value;\n  bit_3 = (byte)((uint)input_value >> 8);\n  bit_4 = (byte)((uint)input_value >> 0x10);\n  bit_1 = (byte)((uint)input_value >> 0x18);\n  decoded_value = LZCOUNT((uint)(byte)((((((((bit_2 & 1) << 1 | bit_2 >> 1 & 1) << 1 | bit_2 >> 2 & 1) << 1\n                                  | bit_2 >> 3 & 1) << 1 | bit_2 >> 4 & 1) << 1 | bit_2 >> 5 & 1) <<\n                                1 | bit_2 >> 6 & 1) << 1 | bit_2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((bit_3 & 1) << 1 | bit_3 >> 1 & 1) << 1 | bit_3 >> 2 & 1) << 1\n                                  | bit_3 >> 3 & 1) << 1 | bit_3 >> 4 & 1) << 1 | bit_3 >> 5 & 1) <<\n                                1 | bit_3 >> 6 & 1) << 1 | bit_3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((bit_4 & 1) << 1 | bit_4 >> 1 & 1) << 1 | bit_4 >> 2 & 1) << 1\n                                  | bit_4 >> 3 & 1) << 1 | bit_4 >> 4 & 1) << 1 | bit_4 >> 5 & 1) <<\n                                1 | bit_4 >> 6 & 1) << 1 | bit_4 >> 7) << 8 |\n                  (uint)(byte)((((((((bit_1 & 1) << 1 | bit_1 >> 1 & 1) << 1 | bit_1 >> 2 & 1) << 1\n                                  | bit_1 >> 3 & 1) << 1 | bit_1 >> 4 & 1) << 1 | bit_1 >> 5 & 1) <<\n                                1 | bit_1 >> 6 & 1) << 1 | bit_1 >> 7));\n  if (input_value == 0) {\n    decoded_value = -1;\n  }\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_00000566": "decode_bits_00000566",
                "param_1": "input_value",
                "bVar1": "bit_1",
                "bVar2": "bit_2",
                "bVar3": "bit_3",
                "bVar4": "bit_4",
                "iVar5": "decoded_value"
            },
            "calling": [
                "sched_run"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *pointer,undefined4 *newPointer)\n\n{\n  if (*pointer == 0) {\n    *newPointer = newPointer;\n  }\n  else {\n    *newPointer = *(undefined4 *)*pointer;\n    *(undefined4 **)*pointer = newPointer;\n  }\n  *pointer = (int)newPointer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "pointer",
                "param_2": "newPointer"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_from_pointer_000005ca",
            "code": "\nundefined4 * extractValueFromPointer_000005ca(int *ptr)\n\n{\n  undefined4 *result;\n  \n  if (*ptr == 0) {\n    result = (undefined4 *)0x0;\n  }\n  else {\n    result = *(undefined4 **)*ptr;\n    if (result == (undefined4 *)*ptr) {\n      *ptr = 0;\n    }\n    else {\n      *(undefined4 *)*ptr = *result;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "ptr",
                "puVar1": "result"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "update_flag_and_value_00000610",
            "code": "\nundefined4 updateFlagAndValue_00000610(void)\n\n{\n  int originalFlagValue;\n  int index;\n  undefined4 returnValue;\n  \n  originalFlagValue = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = bitarithm_lsb(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (originalFlagValue == index + -8) {\n    returnValue = 0;\n  }\n  else {\n    if ((originalFlagValue != 0) && (*(char *)(originalFlagValue + 4) == '\\t')) {\n      *(undefined *)(originalFlagValue + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    returnValue = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00000610": "update_flag_and_value_00000610",
                "iVar1": "originalFlagValue",
                "iVar2": "index",
                "uVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "bitarithm_lsb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_list_00000698",
            "code": "\nvoid updateList_00000698(int listIndex,uint newElement)\n\n{\n  if (newElement < 9) {\n    if ((8 < *(byte *)(listIndex + 4)) &&\n       (removeLeft(&DAT_1fff03e4 + (uint)*(byte *)(listIndex + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(listIndex + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(listIndex + 5));\n    }\n  }\n  else if (*(byte *)(listIndex + 4) < 9) {\n    insertRight(&DAT_1fff03e4 + (uint)*(byte *)(listIndex + 5) * 4,listIndex + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(listIndex + 5);\n  }\n  *(char *)(listIndex + 4) = elementCount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_list_00000698",
                "param_1": "listIndex",
                "param_2": "newElement",
                "clist_lpop": "removeLeft",
                "clist_rpush": "insertRight",
                "(char)param_2": "elementCount"
            },
            "calling": [
                "thread_create",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [
                "clist_rpush",
                "clist_lpop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_concurrency_conditions_00000738",
            "code": "\nvoid checkConcurrencyConditions_00000738(ushort inputParam)\n\n{\n  int isInIRQ;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputParam < *(byte *)(DAT_1fff03dc + 5))) {\n    isInIRQ = irq_is_in();\n    if (isInIRQ == 0) {\n      thread_yield_higher();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_concurrency_conditions_00000738",
                "param_1": "inputParam",
                "iVar1": "isInIRQ"
            },
            "calling": [
                "thread_create",
                "mutex_unlock"
            ],
            "called": [
                "irq_is_in",
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_stack_00000794",
            "code": "\nint * initializeStack_00000794(void)\n\n{\n  int returnValue;\n  int counter;\n  undefined4 *contextPointer;\n  uint stackPointer;\n  int loopCounter;\n  int loopCounter2;\n  int *stackTop;\n  \n  irq_disable();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  sched_set_status(DAT_1fff03dc,0);\n  contextPointer = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  cpu_switch_context_exit();\n  stackPointer = (int)contextPointer + counter & 0xfffffffc;\n  stackTop = (int *)(stackPointer - 4);\n  *stackTop = 0x77777777;\n  if (((uint)stackTop & 7) != 0) {\n    stackTop = (int *)(stackPointer - 8);\n    *stackTop = 0x88888888;\n  }\n  stackTop[-1] = 0x1000000;\n  stackTop[-2] = counter << 0xd;\n  stackTop[-3] = 0x795;\n  stackTop = stackTop + -4;\n  *stackTop = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    stackTop = stackTop + -1;\n    *stackTop = loopCounter2;\n  }\n  stackTop = stackTop + -1;\n  *stackTop = returnValue;\n  for (loopCounter = 0xb; 3 < loopCounter; loopCounter = loopCounter + -1) {\n    stackTop = stackTop + -1;\n    *stackTop = loopCounter;\n  }\n  stackTop[-1] = -3;\n  return stackTop + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_stack_00000794",
                "extraout_r1": "returnValue",
                "iVar1": "counter",
                "puVar2": "contextPointer",
                "uVar3": "stackPointer",
                "iStack_1c": "loopCounter",
                "iStack_18": "loopCounter2",
                "piStack_14": "stackTop"
            },
            "calling": [],
            "called": [
                "sched_set_status",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 input1,int input2,int length,int offset)\n\n{\n  uint alignedOffset;\n  int i;\n  int count;\n  int *ptr;\n  \n  alignedOffset = offset + length & 0xfffffffc;\n  ptr = (int *)(alignedOffset - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedOffset - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = input1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (count = 3; 0 < count; count = count + -1) {\n    ptr = ptr + -1;\n    *ptr = count;\n  }\n  ptr = ptr + -1;\n  *ptr = input2;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "length",
                "param_4": "offset",
                "uVar1": "alignedOffset",
                "local_14": "i",
                "local_10": "count",
                "local_c": "ptr"
            },
            "calling": [
                "thread_create"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "calculate_offset_000008b8",
            "code": "\nint calculate_offset_000008b8(void)\n\n{\n  RelocationEntry *rel_ptr;\n  \n  for (rel_ptr = (RelocationEntry *)&DAT_1fff0000;\n      (rel_ptr->r_offset == 0xe7fee7fe && (rel_ptr < relocation_array));\n      rel_ptr = (RelocationEntry *)&rel_ptr->r_info) {\n  }\n  return ((int)relocation_array - (int)rel_ptr >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "calculate_offset_000008b8",
                "local_c": "rel_ptr",
                "Elf32_Rel": "RelocationEntry",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_max_valid_address_0000091c",
            "code": "\nundefined4 getMaxValidAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_max_valid_address_0000091c"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "enable_interrupt_and_raise_software_interrupt_00000930",
            "code": "\nvoid enableInterruptAndRaiseSoftwareInterrupt_00000930(void)\n\n{\n  enableInterrupt();\n  raiseSoftwareInterrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "enable_interrupt_and_raise_software_interrupt_00000930",
                "irq_enable": "enableInterrupt",
                "software_interrupt": "raiseSoftwareInterrupt"
            },
            "calling": [
                "kernel_init",
                "sched_task_exit"
            ],
            "called": [
                "irq_enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_memory_access_flag_0000093c",
            "code": "\n\n\nvoid setMemoryAccessFlag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_memory_access_flag_0000093c"
            },
            "calling": [
                "cortexm_isr_end",
                "FUN_00001cf0",
                "_mutex_lock",
                "sched_switch",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000099c": {
            "entrypoint": "0x0000099c",
            "current_name": "initialize_system_0000099c",
            "code": "\nvoid initialize_system_0000099c(void)\n\n{\n  undefined4 temp_variable;\n  undefined4 *stack_base;\n  dword *data_pointer;\n  Elf32_Rel *rel_pointer;\n  \n  stack_base = &temp_variable;\n  data_pointer = (dword *)&DAT_00007c60;\n  pre_startup();\n  rel_pointer = (Elf32_Rel *)&DAT_1fff0000;\n  while (rel_pointer < &temp_variable) {\n    rel_pointer->r_offset = 0xe7fee7fe;\n    rel_pointer = (Elf32_Rel *)((int)rel_pointer + 4);\n  }\n  rel_pointer = Elf32_Rel_ARRAY_1fff0200;\n  while (rel_pointer < (Elf32_Rel *)&DAT_1fff0350) {\n    rel_pointer->r_offset = *data_pointer;\n    data_pointer = data_pointer + 1;\n    rel_pointer = (Elf32_Rel *)&rel_pointer->r_info;\n  }\n  rel_pointer = (Elf32_Rel *)&DAT_1fff0350;\n  while (rel_pointer < (undefined4 *)0x1fff0df0) {\n    rel_pointer->r_offset = 0;\n    rel_pointer = (Elf32_Rel *)((int)rel_pointer + 4);\n  }\n  post_startup();\n  board_init();\n  __libc_init_array();\n  kernel_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000099c": "initialize_system_0000099c",
                "uStack_18": "temp_variable",
                "local_14": "stack_base",
                "local_10": "data_pointer",
                "local_c": "rel_pointer"
            },
            "calling": [],
            "called": [
                "kernel_init",
                "board_init",
                "post_startup",
                "pre_startup",
                "__libc_init_array"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handleNMI_00000a30(void)\n\n{\n  int inputValue;\n  \n  core_panic(4,\"NMI HANDLER\");\n  return &stack0xe000ffe0 + -*(int *)(inputValue + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "inputValue"
            },
            "calling": [],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "handle_dummy_interrupt_00000cc0",
            "code": "\nundefined4 handleDummyInterrupt_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  core_panic(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkIfCurrentModeIsPrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkIfIRQinterruptsAreEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "handle_dummy_interrupt_00000cc0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled",
                "isCurrentModePrivileged": "checkIfCurrentModeIsPrivileged",
                "isIRQinterruptsEnabled": "checkIfIRQinterruptsAreEnabled"
            },
            "calling": [
                "dummy_handler"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "disable_irq_and_return_current_interrupt_state_00000cd0",
            "code": "\nundefined4 disableIRQAndReturnCurrentInterruptState_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 currentInterruptState;\n  \n  currentInterruptState = 0;\n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    currentInterruptState = checkIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return currentInterruptState;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "disable_irq_and_return_current_interrupt_state_00000cd0",
                "uVar2": "currentInterruptState",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "isIRQinterruptsEnabled": "checkIRQinterruptsEnabled"
            },
            "calling": [
                "kernel_init",
                "kinetis_mcg_init",
                "core_panic",
                "pm_off",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_00000cf0",
            "code": "\nundefined4 checkIRQInterrupts_00000cf0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_00000cf0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "cpu_switch_context_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_irq_interrupts_if_needed_00000d0c",
            "code": "\nvoid enableIRQInterruptsIfNeeded_00000d0c(uint inputParam)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkIfPrivileged();\n  if (isPrivilegedMode) {\n    enableInterrupts((inputParam & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_needed_00000d0c",
                "param_1": "inputParam",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkIfPrivileged",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "kinetis_mcg_init",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "sched_switch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint addr,int multiplier)\n\n{\n  return multiplier * 4 + (addr & 0xf0000000 | (addr & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "addr",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_clear32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_memory_00000d76",
            "code": "\nvoid initializeMemory_00000d76(undefined4 inputPointer,undefined offset)\n\n{\n  undefined4 *outputPointer;\n  \n  outputPointer = (undefined4 *)calculate_offset_00000d44(inputPointer,offset);\n  *outputPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_memory_00000d76",
                "param_1": "inputPointer",
                "param_2": "offset",
                "puVar1": "outputPointer"
            },
            "calling": [
                "cpu_errata_fixes"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_interrupt_flag_00000d9c",
            "code": "\nvoid clearInterruptFlag_00000d9c(void)\n\n{\n  clearBit32(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_interrupt_flag_00000d9c",
                "bit_clear32": "clearBit32"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [
                "bit_clear32"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "disable_watchdog_and_fix_cpu_errata_00000db0",
            "code": "\nvoid disable_watchdog_and_fix_cpu_errata_00000db0(void)\n\n{\n  wdog_disable();\n  cpu_errata_fixes();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "disable_watchdog_and_fix_cpu_errata_00000db0"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "wdog_disable",
                "cpu_errata_fixes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_dummy_handler_00000dc0",
            "code": "\nvoid initialize_dummy_handler_00000dc0(void)\n\n{\n  handle_dummy_default();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_dummy_handler_00000dc0",
                "dummy_handler_default": "handle_dummy_default"
            },
            "calling": [],
            "called": [
                "dummy_handler_default"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_uart_connection_00000df4",
            "code": "\nvoid initialize_uart_connection_00000df4(void)\n\n{\n  uart_init(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_uart_connection_00000df4"
            },
            "calling": [
                "_init"
            ],
            "called": [
                "uart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "read_from_isr_pipe_00000e14",
            "code": "\nundefined4 readFromISRPipe_00000e14(undefined4 buffer,undefined4 size)\n\n{\n  undefined4 result;\n  \n  result = isrpipe_read(0x1fff0204,buffer,size);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "read_from_isr_pipe_00000e14",
                "param_1": "buffer",
                "param_2": "size",
                "uVar1": "result"
            },
            "calling": [
                "_read_r"
            ],
            "called": [
                "isrpipe_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "write_data_to_uart_00000e38",
            "code": "\nundefined4 write_data_to_uart_00000e38(undefined4 data,undefined4 length)\n\n{\n  uart_write(0,data,length);\n  return length;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "write_data_to_uart_00000e38",
                "param_1": "data",
                "param_2": "length"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "disable_irq_and_loop_00000e58",
            "code": "\nvoid disableIRQAndLoop_00000e58(void)\n\n{\n  irq_disable();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "disable_irq_and_loop_00000e58"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_00000e64",
            "code": "\n\n\nvoid initialize_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  cpu_init();\n  gpio_init(0x2056,0x80);\n  gpio_init(0x511a,0x80);\n  gpio_init(0x2055,0x80);\n  gpio_set(0x2056);\n  gpio_set(0x511a);\n  gpio_set(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_00000e64"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "gpio_init",
                "gpio_set",
                "cpu_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "print_formatted_message_00000ed8",
            "code": "\nvoid printFormattedMessage_00000ed8(void)\n\n{\n  undefined4 formatString;\n  \n  iprintf(&DAT_00006f58,formatString);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "print_formatted_message_00000ed8",
                "in_lr": "formatString"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handle_kernel_panic_00000f04(char panic_trigger,undefined4 panic_message)\n\n{\n  undefined4 stack_var;\n  code *jumptable_func;\n  undefined4 panic_message_loc;\n  char panic_trigger_loc;\n  \n  panic_message_loc = panic_message;\n  panic_trigger_loc = panic_trigger;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_trigger == '\\x03') {\n      cpu_print_last_instruction();\n    }\n    iprintf(\"*** RIOT kernel panic:\\n%s\\n\\n\",panic_message_loc);\n    ps();\n    iprintf(&DAT_00006f78);\n    iprintf(\"*** halted.\\n\\n\");\n  }\n  irq_disable();\n  panic_arch();\n  jumptable_func = (code *)0xf4d;\n  pm_off();\n  stack_var = (int)&stack_var + 1;\n  auto_init();\n  iprintf(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  main();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable_func)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panic_trigger",
                "param_2": "panic_message",
                "uStack_18": "stack_var",
                "UNRECOVERED_JUMPTABLE": "jumptable_func",
                "local_10": "panic_message_loc",
                "local_9": "panic_trigger_loc"
            },
            "calling": [
                "dummy_handler_default",
                "uart_init",
                "cib_init",
                "nmi_default",
                "fmt_s32_dfp",
                "thread_add_to_list"
            ],
            "called": [
                "cpu_print_last_instruction",
                "iprintf",
                "panic_arch",
                "pm_off",
                "ps",
                "main",
                "auto_init",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_system_00000f8c",
            "code": "\nvoid initialize_system_00000f8c(void)\n\n{\n  uint context_switch_exit_value;\n  undefined4 *memory_pointer;\n  uint thread_priority;\n  int thread_stack_size;\n  int *thread_stack_pointer;\n  undefined4 context_switch_value;\n  undefined4 zero_value_2;\n  undefined4 zero_value_1;\n  dword elf_rel_info;\n  \n  irq_disable();\n  elf_rel_info = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  zero_value_1 = 0;\n  zero_value_2 = 0xf81;\n  thread_create(&DAT_1fff0a6c,0x100,0xf,0xc);\n  elf_rel_info = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  zero_value_1 = 0;\n  zero_value_2 = 0xf5d;\n  thread_priority = 0xc;\n  thread_create(&DAT_1fff046c,0x600,7);\n  context_switch_value = 0xfd3;\n  context_switch_exit_value = cpu_switch_context_exit();\n  context_switch_exit_value = context_switch_exit_value >> 0x1e;\n  memory_pointer = (undefined4 *)(thread_priority * 0x100);\n  thread_stack_size = (thread_priority >> 0x1d) << 0x11;\n  thread_stack_pointer = &thread_stack_size;\n  if ((context_switch_exit_value & context_switch_exit_value - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *memory_pointer = 0;\n  memory_pointer[1] = 0;\n  memory_pointer[2] = context_switch_exit_value - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_system_00000f8c",
                "iStack_24": "thread_stack_size",
                "piStack_20": "thread_stack_pointer",
                "uStack_1c": "context_switch_value",
                "local_10": "elf_rel_info",
                "local_14": "zero_value_1",
                "local_18": "zero_value_2",
                "puVar2": "memory_pointer",
                "uVar1": "context_switch_exit_value",
                "uVar3": "thread_priority"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "thread_create",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_memory_block_00000fec",
            "code": "\nvoid initializeMemoryBlock_00000fec(undefined4 *memoryBlock,uint blockSize)\n\n{\n  if ((blockSize & blockSize - 1) != 0) {\n    raiseError(3,\"FAILED ASSERTION.\");\n  }\n  *memoryBlock = 0;\n  memoryBlock[1] = 0;\n  memoryBlock[2] = blockSize - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_memory_block_00000fec",
                "param_1": "memoryBlock",
                "param_2": "blockSize",
                "param_1[1]": "memoryBlock[1]",
                "param_1[2]": "memoryBlock[2]",
                "core_panic": "raiseError"
            },
            "calling": [
                "thread_create"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_valid_entry_00001034",
            "code": "\nvoid find_valid_entry_00001034(int **entries,int entry_count)\n\n{\n  int **current_entry;\n  \n  if (8 < *(byte *)(entry_count + 4)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  for (current_entry = entries;\n      (*current_entry != (int *)0x0 && (*(byte *)((int)*current_entry + -3) <= *(byte *)(entry_count + 5)));\n      current_entry = (int **)*current_entry) {\n  }\n  *(int **)(entry_count + 8) = *current_entry;\n  *current_entry = (int *)(int **)(entry_count + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_valid_entry_00001034",
                "param_1": "entries",
                "param_2": "entry_count",
                "local_1c": "current_entry"
            },
            "calling": [
                "_mutex_lock"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "count_elements_000010a0",
            "code": "\nint count_elements_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "count_elements_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_thread_stack_000010d4",
            "code": "\nint initializeThreadStack_000010d4(uint address,int size,byte flags,uint config,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 oldInterruptState;\n  undefined4 threadStackInitResult;\n  int returnValue;\n  uint alignedSize;\n  undefined4 *threadDataPointer;\n  int alignedSizeAdjustment;\n  uint adjustedAddress;\n  uint iterationCounter;\n  short tempShort1;\n  short tempShort2;\n  \n  if (flags < 0x10) {\n    alignedSizeAdjustment = size;\n    adjustedAddress = address;\n    if ((address & 3) != 0) {\n      alignedSizeAdjustment = 4 - (address & 3);\n      adjustedAddress = alignedSizeAdjustment + address;\n      alignedSizeAdjustment = size - alignedSizeAdjustment;\n    }\n    alignedSize = alignedSizeAdjustment - 0x30U & 0xfffffffc;\n    threadDataPointer = (undefined4 *)(alignedSize + adjustedAddress);\n    if ((config & 8) == 0) {\n      *(uint *)adjustedAddress = adjustedAddress;\n    }\n    else {\n      for (iterationCounter = adjustedAddress; iterationCounter < alignedSize + adjustedAddress; iterationCounter = iterationCounter + 4) {\n        *(uint *)iterationCounter = iterationCounter;\n      }\n    }\n    oldInterruptState = irq_disable();\n    tempShort2 = 0;\n    for (tempShort1 = 1; tempShort1 < 0x21; tempShort1 = tempShort1 + 1) {\n      if (*(int *)(&DAT_1fff0358 + tempShort1 * 4) == 0) {\n        tempShort2 = tempShort1;\n        break;\n      }\n    }\n    if (tempShort2 == 0) {\n      irq_restore(oldInterruptState);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + tempShort2 * 4) = threadDataPointer;\n      *(short *)((int)threadDataPointer + 6) = tempShort2;\n      threadStackInitResult = thread_stack_init(param5,param6,adjustedAddress,alignedSize);\n      *threadDataPointer = threadStackInitResult;\n      threadDataPointer[9] = adjustedAddress;\n      threadDataPointer[0xb] = size;\n      threadDataPointer[10] = param7;\n      *(byte *)((int)threadDataPointer + 5) = flags;\n      *(undefined *)(threadDataPointer + 1) = 0;\n      threadDataPointer[2] = 0;\n      threadDataPointer[3] = 0;\n      threadDataPointer[4] = 0;\n      cib_init(threadDataPointer + 5,0);\n      threadDataPointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((config & 1) == 0) {\n        sched_set_status(threadDataPointer,10);\n        if ((config & 4) == 0) {\n          irq_restore(oldInterruptState);\n          sched_switch(flags);\n          return (int)tempShort2;\n        }\n      }\n      else {\n        sched_set_status(threadDataPointer,1);\n      }\n      irq_restore(oldInterruptState);\n      returnValue = (int)tempShort2;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_thread_stack_000010d4",
                "param_1": "address",
                "param_2": "size",
                "param_3": "flags",
                "param_4": "config",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "oldInterruptState",
                "uVar2": "threadStackInitResult",
                "iVar3": "returnValue",
                "uVar4": "alignedSize",
                "puVar5": "threadDataPointer",
                "local_30": "alignedSizeAdjustment",
                "local_2c": "adjustedAddress",
                "local_10": "iterationCounter",
                "local_c": "tempShort1",
                "local_a": "tempShort2"
            },
            "calling": [
                "kernel_init"
            ],
            "called": [
                "thread_stack_init",
                "sched_set_status",
                "cib_init",
                "irq_restore",
                "sched_switch",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initialize_system_00001274(void)\n\n{\n  cortexm_init();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_mcg();\n  initialize_peripherals();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274",
                "kinetis_mcg_init": "initialize_mcg",
                "periph_init": "initialize_peripherals"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "kinetis_mcg_init",
                "cortexm_init",
                "periph_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "lock_mutex_0000129c",
            "code": "\nvoid lockMutex_0000129c(undefined4 mutex)\n\n{\n  acquireMutex(mutex,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "lock_mutex_0000129c",
                "param_1": "mutex",
                "_mutex_lock": "acquireMutex"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "unlock_and_add_000012b4",
            "code": "\nundefined4 unlock_and_add_000012b4(int data_offset,undefined data)\n\n{\n  undefined4 result;\n  \n  result = tsrb_add_one(data_offset + 4,data);\n  mutex_unlock(data_offset);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "unlock_and_add_000012b4",
                "param_1": "data_offset",
                "param_2": "data",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "mutex_unlock",
                "tsrb_add_one"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "wait_for_tsrb_data_000012e2",
            "code": "\nint waitForTSRBData_000012e2(int buffer,undefined4 size,undefined4 count)\n\n{\n  int resultCode;\n  \n  while( true ) {\n    resultCode = tsrb_get(buffer + 4,size,count);\n    if (resultCode != 0) break;\n    mutex_lock(buffer);\n  }\n  return resultCode;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "wait_for_tsrb_data_000012e2",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "count",
                "iVar1": "resultCode"
            },
            "calling": [
                "uart_stdio_read"
            ],
            "called": [
                "tsrb_get",
                "mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte byteToSet)\n\n{\n  *(int *)(((uint)(int)(char)byteToSet >> 5) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "byteToSet"
            },
            "calling": [
                "uart_init_uart"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "yield_if_data_available_00001348",
            "code": "\nvoid yield_if_data_available_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "yield_if_data_available_00001348"
            },
            "calling": [
                "irq_handler_uart"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_value_00001360",
            "code": "\nint calculateValue_00001360(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_value_00001360",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_calculated_value_to_one_00001392",
            "code": "\nvoid setCalculatedValueToOne_00001392(undefined4 inputParameter1,undefined inputParameter2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)calculate_value_00001360(inputParameter1,inputParameter2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_calculated_value_to_one_00001392",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_uart_000013b8",
            "code": "\nundefined4 initialize_UART_000013b8(int status,undefined4 configuration,undefined4 pin_param,undefined4 value_param)\n\n{\n  undefined4 result;\n  \n  if (status != 0) {\n    handle_assertion_failure(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + status * 8) = pin_param;\n  *(undefined4 *)(&DAT_1fff0b70 + status * 8) = value_param;\n  initialize_UART_000013b8_pins(status);\n  set_calculated_value_to_one(*(undefined4 *)(&DAT_00006ffc + status * 0x20),\n               *(undefined *)(status * 0x20 + 0x7000));\n  if ((&DAT_00007002)[status * 0x20] == '\\0') {\n    initialize_UART_000013b8_uart(status,configuration);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_uart_000013b8",
                "param_1": "status",
                "param_2": "configuration",
                "param_3": "pin_param",
                "param_4": "value_param",
                "uVar1": "result",
                "core_panic": "handle_assertion_failure",
                "uart_init_pins": "initialize_UART_pins",
                "set_calculated_value_to_one_00001392": "set_calculated_value_to_one",
                "uart_init_uart": "initialize_UART_uart"
            },
            "calling": [
                "uart_stdio_init"
            ],
            "called": [
                "FUN_00001392",
                "core_panic",
                "uart_init_uart",
                "uart_init_pins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "initialize_gpio_ports_00001448",
            "code": "\nvoid initializeGPIOPorts_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "initialize_gpio_ports_00001448",
                "param_1": "index"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "gpio_init_port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid updateConfiguration_000014c4(int index,uint value)\n\n{\n  byte *configPtr;\n  uint configValue1;\n  uint configValue2;\n  \n  configPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  configValue1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  configPtr[3] = configPtr[3] & 0xf3;\n  configPtr[2] = (&DAT_00007001)[index * 0x20];\n  configValue2 = configValue1 / (value << 4);\n  *configPtr = (byte)(configValue2 >> 8) & 0x1f;\n  configPtr[1] = (byte)configValue2;\n  configPtr[10] = (byte)((configValue1 << 2) / value + 1 >> 1) & 0x1f;\n  configPtr[0x10] = configPtr[0x10] | 0x88;\n  if ((configPtr[0x10] & 0x70) == 0) {\n    configPtr[0x13] = 0;\n  }\n  else {\n    configPtr[0x13] = (char)(2 << (configPtr[0x10] >> 4 & 7)) - 1;\n  }\n  configPtr[0x15] = 1;\n  configPtr[0x11] = 0xc0;\n  configPtr[3] = configPtr[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "configPtr",
                "uVar2": "configValue1",
                "uVar3": "configValue2"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int source,uint length)\n\n{\n  int ptrData;\n  uint counter;\n  \n  ptrData = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(ptrData + 4));\n    *(undefined *)(ptrData + 7) = *(undefined *)(counter + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "ptrData",
                "local_c": "counter"
            },
            "calling": [
                "uart_stdio_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "check_and_execute_callback_00001628",
            "code": "\nvoid checkAndExecuteCallback_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  yield_if_data_available_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "check_and_execute_callback_00001628",
                "param_1": "index"
            },
            "calling": [
                "isr_uart0_rx_tx"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_uart_handler_00001688",
            "code": "\nvoid initialize_uart_handler_00001688(void)\n\n{\n  handle_uart_interrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_uart_handler_00001688",
                "irq_handler_uart": "handle_uart_interrupt"
            },
            "calling": [],
            "called": [
                "irq_handler_uart"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_result_00001696",
            "code": "\nint calculate_result_00001696(uint input,int factor)\n\n{\n  return factor * 4 + (input & 0xf0000000 | (input & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_result_00001696",
                "param_1": "input",
                "param_2": "factor"
            },
            "calling": [
                "FUN_000016c8",
                "bit_clear8",
                "bit_set8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_result_to_one_000016c8",
            "code": "\nvoid setResultToOne_000016c8(undefined4 input1,undefined input2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)calculate_result_00001696(input1,input2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_result_to_one_000016c8",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "kinetis_mcg_init_erclk32k"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_result_to_true_000016ec",
            "code": "\nvoid setResultToTrue_000016ec(undefined4 resultPointer,undefined dummyParameter)\n\n{\n  undefined *resultPointer;\n  \n  resultPointer = (undefined *)calculate_result_00001696(resultPointer,dummyParameter);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_result_to_true_000016ec",
                "param_1": "resultPointer",
                "param_2": "dummyParameter",
                "puVar1": "resultPointer"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_result_00001710",
            "code": "\nvoid clearResult_00001710(undefined4 input1,undefined input2)\n\n{\n  undefined *resultPointer;\n  \n  resultPointer = (undefined *)calculate_result_00001696(input1,input2);\n  *resultPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_result_00001710",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_disable_pll",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_bit_00001734",
            "code": "\nvoid clearBit_00001734(void)\n\n{\n  bit_clear8(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_bit_00001734"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flag_with_param_00001748",
            "code": "\nvoid updateFlagWithParam_00001748(byte newFlagValue)\n\n{\n  DAT_40064003 = newFlagValue | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flag_with_param_00001748",
                "param_1": "newFlagValue"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "clear_bit_in_data_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid clearBitInData_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  bit_clear8(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "clear_bit_in_data_00001778"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fee"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_result_and_flags_000017dc",
            "code": "\n\n\nvoid initializeResultAndFlags_000017dc(void)\n\n{\n  setResultToOne(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_result_and_flags_000017dc",
                "set_result_to_one_000016c8": "setResultToOne"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  bit_set8(&DAT_40064001,0);\n  bit_clear8(&DAT_40064000,1);\n  bit_clear8(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_fll_000018bc",
            "code": "\nvoid initializeFLL_000018bc(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  bit_clear8(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_fll_000018bc"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_system_0000191c",
            "code": "\nvoid initializeSystem_0000191c(void)\n\n{\n  kinetis_mcg_enable_osc();\n  kinetis_mcg_set_fll_factor(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  setFLLFactor(0xa0);\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960",
                "kinetis_mcg_set_fll_factor": "setFLLFactor"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_system_000019c0",
            "code": "\nvoid initializeSystem_000019c0(void)\n\n{\n  kinetis_mcg_enable_osc();\n  kinetis_mcg_set_fll_factor(0x40);\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  kinetis_mcg_disable_pll();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disablePLL();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18",
                "kinetis_mcg_disable_pll": "disablePLL"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_system_00001a3c",
            "code": "\nvoid initializeSystem_00001a3c(void)\n\n{\n  setBit(&DAT_40064001,1);\n  disablePLL();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_system_00001a3c",
                "bit_set8": "setBit",
                "kinetis_mcg_disable_pll": "disablePLL"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_peripheral_00001a60",
            "code": "\nvoid initializePeripheral_00001a60(void)\n\n{\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  bit_set8(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_peripheral_00001a60"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "configure_mcg_mode_00001b10",
            "code": "\nundefined4 configure_mcg_mode_00001b10(byte mode)\n\n{\n  undefined4 result;\n  \n  if (mode < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)mode + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        kinetis_mcg_set_fei();\n        break;\n      case 1:\n        kinetis_mcg_set_fee();\n        break;\n      case 2:\n        kinetis_mcg_set_fbi();\n        break;\n      case 3:\n        kinetis_mcg_set_fbe();\n        break;\n      case 4:\n        kinetis_mcg_set_blpi();\n        break;\n      case 5:\n        kinetis_mcg_set_blpe();\n        break;\n      case 6:\n        kinetis_mcg_set_pbe();\n        break;\n      case 7:\n        kinetis_mcg_set_pee();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (mode != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "configure_mcg_mode_00001b10",
                "param_1": "mode",
                "uVar1": "result"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "kinetis_mcg_set_pee",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_blpi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clearBit8(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clearBit8(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  setFLLFactor(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8",
                "bit_clear8": "clearBit8",
                "kinetis_mcg_set_fll_factor": "setFLLFactor"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 disabledInterrupts;\n  \n  disabledInterrupts = disableInterrupts();\n  setSafeMode();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initializeMCGIRCLK();\n  initializeERCLK32K();\n  setMode(7);\n  restoreInterrupts(disabledInterrupts);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "disabledInterrupts",
                "kinetis_mcg_set_safe_mode": "setSafeMode",
                "kinetis_mcg_init_mcgirclk": "initializeMCGIRCLK",
                "kinetis_mcg_init_erclk32k": "initializeERCLK32K",
                "kinetis_mcg_set_mode": "setMode",
                "irq_disable": "disableInterrupts",
                "irq_restore": "restoreInterrupts"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "kinetis_mcg_init_mcgirclk",
                "irq_restore",
                "irq_disable",
                "kinetis_mcg_set_mode",
                "kinetis_mcg_set_safe_mode",
                "kinetis_mcg_init_erclk32k"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "yield_if_not_zero_00001cf0",
            "code": "\nvoid yield_if_not_zero_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "yield_if_not_zero_00001cf0"
            },
            "calling": [
                "irq_handler"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_sum_00001d08",
            "code": "\nint calculateSum_00001d08(uint number,int multiplier)\n\n{\n  return multiplier * 4 + (number & 0xf0000000 | (number & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_sum_00001d08",
                "param_1": "number",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_set32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_bit_to1_00001d3a",
            "code": "\nvoid setBitTo1_00001d3a(undefined4 bitAddress,undefined bitIndex)\n\n{\n  undefined4 *bitValueAddress;\n  \n  bitValueAddress = (undefined4 *)bitband_addr(bitAddress,bitIndex);\n  *bitValueAddress = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_bit_to1_00001d3a",
                "param_1": "bitAddress",
                "param_2": "bitIndex",
                "puVar1": "bitValueAddress"
            },
            "calling": [
                "clk_en"
            ],
            "called": [
                "bitband_addr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_bitwise_operations_00001d5e",
            "code": "\nuint applyBitwiseOperations_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_bitwise_operations_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_to_value_00001d80",
            "code": "\nuint applyMaskToValue_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_to_value_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_three_least_significant_bits_00001da2",
            "code": "\nushort extractThreeLeastSignificantBits_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_three_least_significant_bits_00001da2",
                "param_1": "input"
            },
            "calling": [
                "gpio_init_port",
                "clk_en"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_lower6_bits_00001dc0",
            "code": "\nushort extractLower6Bits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_lower6_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_bit_00001ddc",
            "code": "\nvoid setBit_00001ddc(undefined2 portNumber)\n\n{\n  char charValue;\n  \n  charValue = port_num(portNumber);\n  bit_set32(&DAT_40048038,charValue + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_bit_00001ddc",
                "param_1": "portNumber",
                "cVar1": "charValue"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "bit_set32",
                "port_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int input_offset,uint bit_position)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)bit_position >> 3) + input_offset * 4) * 4) >> ((bit_position & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "input_offset",
                "param_2": "bit_position"
            },
            "calling": [
                "irq_handler",
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_value_at_position_00001e44",
            "code": "\nvoid updateValueAtPosition_00001e44(int position,uint bitField,int newValue)\n\n{\n  int shiftAmount;\n  \n  shiftAmount = (int)bitField >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + position * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + position * 4) * 4) & ~(0xf << ((bitField & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + position * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + position * 4) * 4) | newValue << ((bitField & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_value_at_position_00001e44",
                "param_1": "position",
                "param_2": "bitField",
                "param_3": "newValue",
                "iVar1": "shiftAmount"
            },
            "calling": [
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "write_context_to_map_00001ec4",
            "code": "\nvoid writeContextToMap_00001ec4(undefined4 context,undefined4 data)\n\n{\n  undefined4 ctxValue;\n  \n  ctxValue = get_ctx(context,data);\n  write_map(context,data,ctxValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "write_context_to_map_00001ec4",
                "param_1": "context",
                "param_2": "data",
                "uVar1": "ctxValue"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "get_ctx",
                "write_map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "set_pin_mode_00001eea",
            "code": "\nundefined4 setPinMode_00001eea(undefined2 port,byte mode)\n\n{\n  uint pinNum;\n  int gpioPtr;\n  int pinIndex;\n  \n  gpio_init_port(port,0);\n  if ((char)mode < '\\0') {\n    pinNum = pin_num(port);\n    gpioPtr = gpio(port);\n    *(uint *)(gpioPtr + 0x14) = *(uint *)(gpioPtr + 0x14) | 1 << (pinNum & 0xff);\n  }\n  else {\n    pinNum = pin_num(port);\n    gpioPtr = gpio(port);\n    *(uint *)(gpioPtr + 0x14) = *(uint *)(gpioPtr + 0x14) & ~(1 << (pinNum & 0xff));\n  }\n  gpioPtr = port(port);\n  pinIndex = pin_num(port);\n  *(uint *)(gpioPtr + pinIndex * 4) = mode & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "set_pin_mode_00001eea",
                "param_1": "port",
                "param_2": "mode",
                "uVar1": "pinNum",
                "iVar2": "gpioPtr",
                "iVar3": "pinIndex"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "port",
                "gpio_init_port",
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_pin_value_00001f80",
            "code": "\nvoid updatePinValue_00001f80(undefined2 pinConfig,undefined4 newValue)\n\n{\n  int portAddress;\n  int pinNumber;\n  undefined4 portNumber;\n  undefined4 pinNumber2;\n  uint previousValue;\n  \n  clk_en(pinConfig);\n  portAddress = port(pinConfig);\n  pinNumber = pin_num(pinConfig);\n  previousValue = *(uint *)(portAddress + pinNumber * 4);\n  portAddress = port(pinConfig);\n  pinNumber = pin_num(pinConfig);\n  *(undefined4 *)(portAddress + pinNumber * 4) = newValue;\n  if ((previousValue & 0xf0000) != 0) {\n    portNumber = port_num(pinConfig);\n    pinNumber2 = pin_num(pinConfig);\n    ctx_clear(portNumber,pinNumber2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_pin_value_00001f80",
                "param_1": "pinConfig",
                "param_2": "newValue",
                "iVar1": "portAddress",
                "iVar2": "pinNumber",
                "uVar3": "portNumber",
                "uVar4": "pinNumber2",
                "uVar5": "previousValue"
            },
            "calling": [
                "gpio_init",
                "uart_init_pins"
            ],
            "called": [
                "port",
                "clk_en",
                "port_num",
                "ctx_clear",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_pin_00001ff6",
            "code": "\nvoid setPin_00001ff6(undefined2 pin)\n\n{\n  uint pinNumber;\n  int gpioAddress;\n  \n  pinNumber = pin_num(pin);\n  gpioAddress = gpio(pin);\n  *(int *)(gpioAddress + 4) = 1 << (pinNumber & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_pin_00001ff6",
                "param_1": "pin",
                "uVar1": "pinNumber",
                "iVar2": "gpioAddress"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "check_and_execute_operations_00002028",
            "code": "\nvoid checkAndExecuteOperations_00002028(int baseAddress,undefined4 context)\n\n{\n  int index;\n  uint flag;\n  uint counter;\n  \n  flag = *(uint *)(baseAddress + 0xa0);\n  for (counter = 0; (int)counter < 0x20; counter = counter + 1) {\n    if (((flag & 1 << (counter & 0xff)) != 0) &&\n       ((*(uint *)(baseAddress + counter * 4) & 0xf0000) != 0)) {\n      *(int *)(baseAddress + 0xa0) = 1 << (counter & 0xff);\n      index = get_ctx(context,counter);\n      (**(code **)(&DAT_1fff0b78 + index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + index * 0xc));\n    }\n  }\n  yield_if_not_zero_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "check_and_execute_operations_00002028",
                "param_1": "baseAddress",
                "param_2": "context",
                "iVar1": "index",
                "uVar2": "flag",
                "local_c": "counter"
            },
            "calling": [
                "isr_portd",
                "isr_porta",
                "isr_porte",
                "isr_portb",
                "isr_portc"
            ],
            "called": [
                "get_ctx",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "disable_interrupt_000020b8",
            "code": "\nvoid disableInterrupt_000020b8(void)\n\n{\n  handleIRQ(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "disable_interrupt_000020b8",
                "irq_handler": "handleIRQ"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_interrupt_handler_000020cc",
            "code": "\nvoid initializeInterruptHandler_000020cc(void)\n\n{\n  handleInterrupt(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_interrupt_handler_000020cc",
                "irq_handler": "handleInterrupt"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_interrupts_000020e0",
            "code": "\nvoid initializeInterrupts_000020e0(void)\n\n{\n  irq_handler(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_interrupts_000020e0"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_irq_handler_000020f4",
            "code": "\nvoid initializeIRQHandler_000020f4(void)\n\n{\n  irq_handler(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_irq_handler_000020f4"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_irq_00002108",
            "code": "\nvoid initializeIRQ_00002108(void)\n\n{\n  irq_handler(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_irq_00002108"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_thread_stack_info_0000211c",
            "code": "\nvoid printThreadStackInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 threadName;\n  int threadPriority;\n  int stateChar;\n  dword baseAddr;\n  uint relOffset;\n  undefined4 *threadInfo;\n  undefined4 stackPointer;\n  undefined4 stackStart;\n  int usedStack;\n  short threadIndex;\n  int totalStackUsage;\n  int totalStackSize;\n  \n  threadName = 0x515f;\n  totalStackSize = 0;\n  totalStackUsage = 0;\n  iprintf(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",&DAT_000070b8,\n          \"state\");\n  usedStack = thread_isr_stack_usage();\n  stackStart = thread_isr_stack_start();\n  stackPointer = thread_isr_stack_pointer();\n  iprintf(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n          usedStack,stackStart,stackPointer);\n  totalStackSize = totalStackSize + 0x200;\n  if (0 < usedStack) {\n    totalStackUsage = usedStack + totalStackUsage;\n  }\n  for (threadIndex = 1; threadIndex < 0x21; threadIndex = threadIndex + 1) {\n    threadInfo = *(undefined4 **)(&DAT_1fff0358 + threadIndex * 4);\n    if (threadInfo != (undefined4 *)0x0) {\n      relOffset = (uint)*(byte *)(threadInfo + 1);\n      baseAddr = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[relOffset];\n      stateChar = (int)&threadName + (uint)(8 < relOffset);\n      threadPriority = threadInfo[0xb];\n      totalStackSize = threadPriority + totalStackSize;\n      iVar1 = thread_measure_stack_free(threadInfo[9]);\n      threadPriority = threadPriority - iVar1;\n      totalStackUsage = threadPriority + totalStackUsage;\n      iprintf(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n              (int)*(short *)((int)threadInfo + 6),threadInfo[10],baseAddr,stateChar,\n              *(undefined *)((int)threadInfo + 5),threadInfo[0xb],threadPriority,threadInfo[9],*threadInfo);\n    }\n  }\n  iprintf(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,&DAT_00007190,\n          totalStackSize,totalStackUsage);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_thread_stack_info_0000211c",
                "local_40": "threadName",
                "local_3c": "threadPriority",
                "local_38": "stateChar",
                "local_34": "baseAddr",
                "local_30": "relOffset",
                "local_2c": "threadInfo",
                "local_28": "stackPointer",
                "local_24": "stackStart",
                "local_20": "usedStack",
                "local_1a": "threadIndex",
                "local_18": "totalStackUsage",
                "local_14": "totalStackSize"
            },
            "calling": [
                "core_panic",
                "_ps_handler"
            ],
            "called": [
                "iprintf",
                "thread_isr_stack_start",
                "thread_isr_stack_usage",
                "thread_isr_stack_pointer",
                "thread_measure_stack_free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined uVar1;\n  int value;\n  bool isEqual;\n  \n  value = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value;\n  if (isEqual) {\n    value = 1;\n  }\n  uVar1 = (undefined)value;\n  if (!isEqual) {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "isEqual"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_if_sum_equals_00002294",
            "code": "\nundefined checkIfSumEquals_00002294(int ptr)\n\n{\n  undefined result;\n  int sumDifference;\n  bool isSumEqual;\n  \n  sumDifference = *(int *)(ptr + 4);\n  isSumEqual = *(int *)(ptr + 0xc) - *(int *)(ptr + 8) == sumDifference;\n  if (isSumEqual) {\n    sumDifference = 1;\n  }\n  result = (undefined)sumDifference;\n  if (!isSumEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_if_sum_equals_00002294",
                "param_1": "ptr",
                "iVar2": "sumDifference",
                "bVar3": "isSumEqual",
                "uVar1": "result"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_store_value_000022be",
            "code": "\nvoid incrementAndStoreValue_000022be(int *inputArrayPtr,undefined valueToStore)\n\n{\n  uint currentValue;\n  \n  currentValue = inputArrayPtr[3];\n  inputArrayPtr[3] = currentValue + 1;\n  *(undefined *)((currentValue & inputArrayPtr[1] - 1U) + *inputArrayPtr) = valueToStore;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_store_value_000022be",
                "param_1": "inputArrayPtr",
                "param_2": "valueToStore",
                "uVar1": "currentValue"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_element_000022f0",
            "code": "\nundefined incrementAndReturnElement_000022f0(int *array)\n\n{\n  uint element;\n  \n  element = array[2];\n  array[2] = element + 1;\n  return *(undefined *)((element & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_element_000022f0",
                "param_1": "array",
                "uVar1": "element"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_data_0000231c",
            "code": "\nint copy_data_0000231c(undefined4 tsrb_queue,undefined *destination,int length)\n\n{\n  undefined popped_value;\n  int is_empty;\n  undefined *dest_ptr;\n  int remaining_length;\n  \n  dest_ptr = destination;\n  remaining_length = length;\n  while ((remaining_length != 0 && (is_empty = tsrb_empty(tsrb_queue), is_empty == 0))) {\n    popped_value = _pop(tsrb_queue);\n    *dest_ptr = popped_value;\n    remaining_length = remaining_length + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return length - remaining_length;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_data_0000231c",
                "param_1": "tsrb_queue",
                "param_2": "destination",
                "param_3": "length",
                "uVar1": "popped_value",
                "iVar2": "is_empty",
                "local_20": "dest_ptr",
                "local_14": "remaining_length"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_pop",
                "tsrb_empty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_overflow_00002364",
            "code": "\nundefined4 checkOverflow_00002364(undefined4 buffer,undefined value)\n\n{\n  int isFull;\n  undefined4 result;\n  \n  isFull = tsrb_full(buffer);\n  if (isFull == 0) {\n    _push(buffer,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_overflow_00002364",
                "param_1": "buffer",
                "param_2": "value",
                "iVar1": "isFull",
                "uVar2": "result"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "_push",
                "tsrb_full"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_real_time_clock_00002396",
            "code": "\nvoid initialize_real_time_clock_00002396(void)\n\n{\n  rtc_initialize();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_real_time_clock_00002396",
                "rtc_init": "rtc_initialize"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "rtc_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initialize_system_000023a4(void)\n\n{\n  undefined4 result;\n  undefined input_buffer [128];\n  \n  startForkserver(0);\n  puts(\"Welcome to RIOT!\");\n  result = shell_run(0,input_buffer,0x80);\n  software_interrupt(0x3f);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "input_buffer",
                "uVar1": "result"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "startForkserver",
                "shell_run",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "trigger_software_interrupt_000023c8",
            "code": "\nvoid triggerSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "handle_afl_function_000023d0",
            "code": "\nundefined4 handleAflFunction_000023d0(undefined4 inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = aflCall(1,inputParam,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "handle_afl_function_000023d0",
                "param_1": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_pointer_value_0000240c",
            "code": "\nundefined4 * extractPointerValue_0000240c(undefined4 *inputPointer)\n\n{\n  undefined4 *retrievedPointer;\n  \n  retrievedPointer = (undefined4 *)*inputPointer;\n  if (retrievedPointer != (undefined4 *)0x0) {\n    *inputPointer = *retrievedPointer;\n  }\n  return retrievedPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_pointer_value_0000240c",
                "param_1": "inputPointer",
                "puVar1": "retrievedPointer"
            },
            "calling": [
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_thread_state_00002434",
            "code": "\nundefined4 updateThreadState_00002434(int *threadState,int flag)\n\n{\n  int localVariable1;\n  undefined4 savedFlags;\n  \n  savedFlags = irq_disable();\n  localVariable1 = DAT_1fff03dc;\n  if (*threadState == 0) {\n    *threadState = -1;\n    irq_restore(savedFlags);\n    savedFlags = 1;\n  }\n  else if (flag == 0) {\n    irq_restore(savedFlags);\n    savedFlags = 0;\n  }\n  else {\n    sched_set_status(DAT_1fff03dc,2);\n    if (*threadState == -1) {\n      *threadState = localVariable1 + 8;\n      *(undefined4 *)*threadState = 0;\n    }\n    else {\n      thread_add_to_list(threadState,localVariable1);\n    }\n    irq_restore(savedFlags);\n    thread_yield_higher();\n    savedFlags = 1;\n  }\n  return savedFlags;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_thread_state_00002434",
                "param_1": "threadState",
                "param_2": "flag",
                "iVar1": "localVariable1",
                "uVar2": "savedFlags"
            },
            "calling": [
                "mutex_lock"
            ],
            "called": [
                "thread_yield_higher",
                "sched_set_status",
                "irq_restore",
                "irq_disable",
                "thread_add_to_list"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "remove_head_and_set_status_000024bc",
            "code": "\nvoid removeHeadAndSetStatus_000024bc(int *list)\n\n{\n  undefined status;\n  undefined4 irqState;\n  int head;\n  \n  irqState = irq_disable();\n  if (*list == 0) {\n    irq_restore(irqState);\n  }\n  else if (*list == -1) {\n    *list = 0;\n    irq_restore(irqState);\n  }\n  else {\n    head = list_remove_head(list);\n    sched_set_status(head + -8,10);\n    if (*list == 0) {\n      *list = -1;\n    }\n    status = *(undefined *)(head + -3);\n    irq_restore(irqState);\n    sched_switch(status);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "remove_head_and_set_status_000024bc",
                "param_1": "list",
                "uVar1": "status",
                "uVar2": "irqState",
                "iVar3": "head"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "sched_set_status",
                "irq_restore",
                "sched_switch",
                "irq_disable",
                "list_remove_head"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "set_char_at_offset_00002538",
            "code": "\nvoid setCharAtOffset_00002538(byte offset,uint value)\n\n{\n  if ((char)offset < '\\0') {\n    (&DAT_e000ed14)[offset & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)offset + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "set_char_at_offset_00002538",
                "param_1": "offset",
                "param_2": "value"
            },
            "calling": [
                "cortexm_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_characters_0000258c",
            "code": "\n\n\nvoid initializeCharacters_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  set_char_at_offset_00002538(0xfffffffe,1);\n  set_char_at_offset_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    set_char_at_offset_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_characters_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_rtt_000025f4",
            "code": "\nvoid initialize_rtt_000025f4(void)\n\n{\n  initialize_real-time_trace();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_rtt_000025f4",
                "rtt_init": "initialize_real-time_trace"
            },
            "calling": [
                "periph_init"
            ],
            "called": [
                "rtt_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "set_counter_00002600",
            "code": "\nundefined4 setCounter_00002600(undefined4 dateTime)\n\n{\n  undefined4 convertedTime;\n  \n  convertedTime = mktime(dateTime);\n  rtt_set_counter(convertedTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "set_counter_00002600",
                "param_1": "dateTime",
                "uVar1": "convertedTime"
            },
            "calling": [
                "_rtc_settime"
            ],
            "called": [
                "rtt_set_counter",
                "mktime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "convert_counter_to_time_00002624",
            "code": "\nundefined4 convertCounterToTime_00002624(undefined4 convertedTime)\n\n{\n  undefined4 counterValue;\n  undefined4 zeroValue;\n  \n  counterValue = rtt_get_counter();\n  zeroValue = 0;\n  gmtime_r(&counterValue,convertedTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "convert_counter_to_time_00002624",
                "param_1": "convertedTime",
                "local_10": "counterValue",
                "uStack_c": "zeroValue"
            },
            "calling": [
                "_rtc_gettime"
            ],
            "called": [
                "gmtime_r",
                "rtt_get_counter"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "set_alarm_00002654",
            "code": "\nundefined4 setAlarm_00002654(undefined4 timeInSeconds,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 time;\n  \n  time = mktime(timeInSeconds);\n  DAT_1fff0d9c = param2;\n  rtt_set_alarm(time,0x26f1,param3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "set_alarm_00002654",
                "param_1": "timeInSeconds",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "time"
            },
            "calling": [
                "_rtc_setalarm"
            ],
            "called": [
                "mktime",
                "rtt_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "convert_to_utc_time_00002690",
            "code": "\nundefined4 convertToUtcTime_00002690(undefined4 utcTime)\n\n{\n  undefined4 currentAlarm;\n  undefined4 zero;\n  \n  currentAlarm = rtt_get_alarm();\n  zero = 0;\n  gmtime_r(&currentAlarm,utcTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "convert_to_utc_time_00002690",
                "param_1": "utcTime",
                "local_10": "currentAlarm",
                "uStack_c": "zero"
            },
            "calling": [
                "_rtc_getalarm"
            ],
            "called": [
                "rtt_get_alarm",
                "gmtime_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_alarm_and_reset_counter_000026c0",
            "code": "\nvoid clearAlarmAndResetCounter_000026c0(void)\n\n{\n  rtt_clear_alarm();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_alarm_and_reset_counter_000026c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_clear_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "power_on_rtt_000026d8",
            "code": "\nvoid powerOnRTT_000026d8(void)\n\n{\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "power_on_rtt_000026d8"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "poweroff_device_000026e4",
            "code": "\nvoid poweroff_device_000026e4(void)\n\n{\n  rtt_poweroff();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "poweroff_device_000026e4"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweroff"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_function_000026f0",
            "code": "\nvoid executeCallbackFunction_000026f0(undefined4 callbackParameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_function_000026f0",
                "param_1": "callbackParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_at_offset_00002714",
            "code": "\nvoid setBitAtOffset_00002714(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_at_offset_00002714",
                "param_1": "byteValue"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "set_memory_00002744",
            "code": "\nvoid setMemory_00002744(byte index,uint value)\n\n{\n  if ((char)index < '\\0') {\n    (&DAT_e000ed14)[index & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)index + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "set_memory_00002744",
                "param_1": "index",
                "param_2": "value"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_yield_00002798",
            "code": "\nvoid checkAndYield_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_yield_00002798"
            },
            "calling": [
                "isr_rtc"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "calling": [
                "rtc_init"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_initial_value_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getInitialValue_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_initial_value_0000281c"
            },
            "calling": [
                "rtc_get_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_flags_0000285c",
            "code": "\n\n\nvoid initializeFlags_0000285c(undefined4 value)\n\n{\n  _DAT_4003d000 = value;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_flags_0000285c",
                "param_1": "value"
            },
            "calling": [
                "rtc_set_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_peripheral_00002894",
            "code": "\n\n\nvoid initializePeripheral_00002894(int previousValue,undefined4 value1,undefined4 value2)\n\n{\n  _DAT_4003d008 = previousValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value1;\n  DAT_1fff0da4 = value2;\n  NVIC_SetPriority(0x2e,10);\n  NVIC_EnableIRQ(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_peripheral_00002894",
                "param_1": "previousValue",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "rtc_set_alarm"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_000028f0",
            "code": "\n\n\nint incrementData_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_000028f0"
            },
            "calling": [
                "rtc_get_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clearFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "rtc_clear_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "rtt_init",
                "rtc_poweron"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "rtc_poweroff"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_interrupt_handler_00002994",
            "code": "\n\n\nvoid executeInterruptHandler_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  cortexm_isr_end();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_interrupt_handler_00002994"
            },
            "calling": [],
            "called": [
                "cortexm_isr_end"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "print_character_00002a00",
            "code": "\nvoid printCharacter_00002a00(undefined4 character)\n\n{\n  putCharacter(character);\n  void;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "print_character_00002a00",
                "param_1": "character",
                "putchar": "putCharacter",
                "return": "void"
            },
            "calling": [
                "print_prompt",
                "readline"
            ],
            "called": [
                "putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_based_on_string_00002a18",
            "code": "\nint find_value_based_on_string_00002a18(int *array,undefined4 search_string)\n\n{\n  int comparison_result;\n  int *array_ptr;\n  undefined **string_array_ptr;\n  uint array_index;\n  int *current_string_ptr;\n  \n  array_ptr = array;\n  string_array_ptr = &PTR_s_reboot_00007300;\n  array_index = 0;\n  do {\n    if (1 < array_index) {\n      return 0;\n    }\n    current_string_ptr = (&array_ptr)[array_index];\n    if (current_string_ptr != (int *)0x0) {\n      for (; *current_string_ptr != 0; current_string_ptr = current_string_ptr + 3) {\n        comparison_result = strcmp(*current_string_ptr,search_string);\n        if (comparison_result == 0) {\n          return current_string_ptr[2];\n        }\n      }\n    }\n    array_index = array_index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_based_on_string_00002a18",
                "param_1": "array",
                "param_2": "search_string",
                "iVar1": "comparison_result",
                "local_18": "array_ptr",
                "local_14": "string_array_ptr",
                "local_10": "array_index",
                "local_c": "current_string_ptr"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "display_command_descriptions_00002a88",
            "code": "\nvoid displayCommandDescriptions_00002a88(int *commandsArray)\n\n{\n  int *currentCommand;\n  undefined **descriptionArrayPtr;\n  uint i;\n  int *currentDescription;\n  \n  iprintf(\"%-20s %s\\n\",\"Command\",\"Description\");\n  puts(\"---------------------------------------\");\n  currentCommand = commandsArray;\n  descriptionArrayPtr = &PTR_s_reboot_00007300;\n  for (i = 0; i < 2; i = i + 1) {\n    currentDescription = (&currentCommand)[i];\n    if (currentDescription != (int *)0x0) {\n      for (; *currentDescription != 0; currentDescription = currentDescription + 3) {\n        iprintf(\"%-20s %s\\n\",*currentDescription,currentDescription[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "display_command_descriptions_00002a88",
                "param_1": "commandsArray",
                "local_18": "currentCommand",
                "local_14": "descriptionArrayPtr",
                "local_10": "i",
                "local_c": "currentDescription"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "iprintf",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "parse_command_00002b10",
            "code": "\nvoid parseCommand_00002b10(undefined4 param1,byte *param2)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *commandArray [3];\n  code *commandHandler;\n  char **splitCommands;\n  uint numCommands;\n  byte quoteChar;\n  char *escapeChar;\n  char *command;\n  char **currentCommand;\n  uint commandIndex;\n  int numEscapes;\n  uint numQuotes;\n  byte *currentChar;\n  \n  numQuotes = 0;\n  numEscapes = 0;\n  currentChar = param2;\n  while( true ) {\n    commandArray[0] = param2;\n    commandArray[1] = (byte *)param1;\n    if (0x20 < *currentChar) {\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        quoteChar = *currentChar;\n        do {\n          pbVar2 = currentChar + 1;\n          if (*pbVar2 == 0) {\n            currentChar = pbVar2;\n            print(errorMessages[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            numEscapes = numEscapes + 1;\n            currentChar = currentChar + 2;\n            pbVar2 = currentChar;\n            if (*currentChar == 0) {\n              print(errorMessages[9].r_info);\n              return;\n            }\n          }\n          currentChar = pbVar2;\n        } while (quoteChar != *currentChar);\n        if (0x20 < currentChar[1]) {\n          print(errorMessages[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentChar == 0x5c) {\n            numEscapes = numEscapes + 1;\n            currentChar = currentChar + 1;\n            if (*currentChar == 0) {\n              print(errorMessages[9].r_info);\n              return;\n            }\n          }\n          currentChar = currentChar + 1;\n          if (*currentChar == 0x22) {\n            print(errorMessages[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentChar);\n      }\n      numQuotes = numQuotes + 1;\n    }\n    if (*currentChar == 0) break;\n    *currentChar = 0;\n    currentChar = currentChar + 1;\n  }\n  if (numQuotes != 0) {\n    numCommands = numQuotes;\n    splitCommands = (char **)((int)commandArray - ((numQuotes + 1) * 4 + 7 & 0xfffffff8));\n    splitCommands[numQuotes] = (char *)0x0;\n    currentChar = param2;\n    for (commandIndex = 0; currentCommand = splitCommands, commandIndex < numQuotes; commandIndex = commandIndex + 1) {\n      for (; *currentChar == 0; currentChar = currentChar + 1) {\n      }\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        currentChar = currentChar + 1;\n      }\n      splitCommands[commandIndex] = (char *)currentChar;\n      for (; *currentChar != 0; currentChar = currentChar + 1) {\n      }\n    }\n    for (; (numEscapes != 0 && (*currentCommand != (char *)0x0)); currentCommand = currentCommand + 1) {\n      for (command = *currentCommand; *command != '\\0'; command = command + 1) {\n        if (*command == '\\') {\n          for (escapeChar = command; *escapeChar != '\\0'; escapeChar = escapeChar + 1) {\n            *escapeChar = escapeChar[1];\n          }\n          numEscapes = numEscapes + -1;\n          if (numEscapes == 0) break;\n        }\n      }\n    }\n    commandHandler = (code *)findCommandHandler(param1,*splitCommands);\n    if (commandHandler == (code *)0x0) {\n      iVar1 = compareStrings(&DAT_00007214,*splitCommands);\n      if (iVar1 == 0) {\n        printCommandHelp(commandArray[1]);\n      }\n      else {\n        formattedPrint(\"shell: command not found: %s\\n\",*splitCommands);\n      }\n    }\n    else {\n      (*commandHandler)(numQuotes,splitCommands);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "parse_command_00002b10",
                "param_1": "param1",
                "param_2": "param2",
                "local_48": "commandArray",
                "local_3c": "commandHandler",
                "local_38": "splitCommands",
                "local_34": "numCommands",
                "local_2d": "quoteChar",
                "local_2c": "escapeChar",
                "local_28": "command",
                "local_24": "currentCommand",
                "local_20": "commandIndex",
                "local_1c": "numEscapes",
                "local_18": "numQuotes",
                "local_14": "currentChar",
                "Elf32_Rel_ARRAY_1fff0200": "errorMessages",
                "puts": "print",
                "find_handler": "findCommandHandler",
                "strcmp": "compareStrings",
                "print_help": "printCommandHelp",
                "iprintf": "formattedPrint"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "iprintf",
                "find_handler",
                "puts",
                "strcmp",
                "print_help"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "read_string_00002d94",
            "code": "\nuint readString_00002d94(undefined *destination,int maxSize)\n\n{\n  int inputChar;\n  byte isFirstChar;\n  bool isFirstLoop;\n  undefined *currentChar;\n  \n  currentChar = destination;\n  while( true ) {\n    if (maxSize + -1 <= (int)currentChar - (int)destination) {\n      return 0xffffffff;\n    }\n    inputChar = getchar();\n    if (inputChar < 0) break;\n    if ((inputChar == 0xd) || (inputChar == 10)) {\n      *currentChar = 0;\n      _putchar(0xd);\n      _putchar(10);\n      isFirstLoop = currentChar == destination;\n      if (isFirstLoop) {\n        destination = (undefined *)0x1;\n      }\n      isFirstChar = (byte)destination;\n      if (!isFirstLoop) {\n        isFirstChar = 0;\n      }\n      return (uint)isFirstChar;\n    }\n    if ((inputChar == 8) || (inputChar == 0x7f)) {\n      if (currentChar != destination) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        _putchar(8);\n        _putchar(0x20);\n        _putchar(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputChar;\n      _putchar(inputChar);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "read_string_00002d94",
                "param_1": "destination",
                "param_2": "maxSize",
                "iVar1": "inputChar",
                "bVar2": "isFirstChar",
                "bVar3": "isFirstLoop",
                "local_c": "currentChar"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "_putchar",
                "getchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "output_arrow_and_space_00002e48",
            "code": "\nvoid outputArrowAndSpace_00002e48(void)\n\n{\n  _putchar(0x3e);\n  _putchar(0x20);\n  fflush(*(undefined4 *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "output_arrow_and_space_00002e48"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "fflush",
                "_putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "readline_loop_00002e6c",
            "code": "\nvoid readline_loop_00002e6c(undefined4 param_1,undefined4 input_buffer,undefined4 buffer_size)\n\n{\n  int read_result;\n  \n  print_prompt();\n  do {\n    read_result = readline(input_buffer,buffer_size);\n    if (read_result == 0) {\n      handle_input_line(param_1,input_buffer);\n    }\n    print_prompt();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "readline_loop_00002e6c",
                "param_2": "input_buffer",
                "param_3": "buffer_size",
                "iVar1": "read_result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "handle_input_line",
                "print_prompt",
                "readline"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "reboot_system_00002e9c",
            "code": "\nundefined4 reboot_system_00002e9c(void)\n\n{\n  pm_reboot();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "reboot_system_00002e9c"
            },
            "calling": [],
            "called": [
                "pm_reboot"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "execute_application_00002eb4",
            "code": "\nundefined4 execute_application_00002eb4(void)\n\n{\n  print_startup_message();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "execute_application_00002eb4",
                "ps": "print_startup_message"
            },
            "calling": [],
            "called": [
                "ps"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_device_data_00002ecc",
            "code": "\nvoid readDeviceData_00002ecc(undefined4 deviceNumber,int deviceAddress)\n\n{\n  undefined4 classString;\n  undefined4 deviceName;\n  undefined dataBuffer [8];\n  uint dataSize;\n  \n  dataSize = saul_reg_read(deviceAddress,dataBuffer);\n  if ((int)dataSize < 1) {\n    iprintf(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceName = *(undefined4 *)(deviceAddress + 8);\n    classString = saul_class_to_str(*(undefined *)(*(int *)(deviceAddress + 0xc) + 8));\n    iprintf(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceName,classString);\n    phydat_dump(dataBuffer,dataSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_device_data_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceAddress",
                "uVar1": "classString",
                "uVar2": "deviceName",
                "auStack_1c": "dataBuffer",
                "local_14": "dataSize"
            },
            "calling": [
                "read",
                "probe_all"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "saul_reg_read",
                "phydat_dump"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "enumerate_and_probe_00002f30",
            "code": "\nvoid enumerate_and_probe_00002f30(void)\n\n{\n  int index;\n  undefined4 *current_item;\n  \n  index = 0;\n  for (current_item = DAT_1fff0db0; current_item != (undefined4 *)0x0; current_item = (undefined4 *)*current_item) {\n    probe(index,current_item);\n    puts(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "enumerate_and_probe_00002f30",
                "local_10": "index",
                "local_c": "current_item"
            },
            "calling": [
                "read"
            ],
            "called": [
                "probe",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 classStr;\n  int deviceCount;\n  undefined4 *currentDevice;\n  \n  currentDevice = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    puts(\"No devices found\");\n  }\n  else {\n    puts(\"ID\\tClass\\t\\tName\");\n  }\n  for (; currentDevice != (undefined4 *)0x0; currentDevice = (undefined4 *)*currentDevice) {\n    classStr = saul_class_to_str(*(undefined *)(currentDevice[3] + 8));\n    iprintf(\"#%i\\t%s\\t%s\\n\",deviceCount,classStr,currentDevice[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "currentDevice",
                "uVar1": "classStr"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "handle_device_probe_00002fe0",
            "code": "\nvoid handle_device_probe_00002fe0(int device_count,undefined4 *arguments)\n\n{\n  int comparison_result;\n  undefined4 device_id;\n  \n  if (device_count < 3) {\n    print_usage(\"usage: %s %s <device id>|all\\n\",*arguments,arguments[1]);\n  }\n  else {\n    comparison_result = compare_strings(arguments[2],&DAT_000073d4);\n    if (comparison_result == 0) {\n      probe_all_devices();\n    }\n    else {\n      device_id = convert_to_integer(arguments[2]);\n      comparison_result = saul_reg_find_nth(device_id);\n      if (comparison_result == 0) {\n        print_error(\"error: undefined device id given\");\n      }\n      else {\n        probe_device(device_id,comparison_result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "handle_device_probe_00002fe0",
                "param_1": "device_count",
                "param_2": "arguments",
                "iVar1": "comparison_result",
                "uVar2": "device_id",
                "iprintf": "print_usage",
                "strcmp": "compare_strings",
                "probe_all": "probe_all_devices",
                "atoi": "convert_to_integer",
                "puts": "print_error",
                "probe": "probe_device"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "probe",
                "saul_reg_find_nth",
                "probe_all",
                "puts",
                "strcmp",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 intValue;\n  undefined2 values [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceId;\n  int counter;\n  \n  if (argc < 4) {\n    iprintf(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = atoi(argv[2]);\n    deviceIndex = saul_reg_find_nth(deviceId);\n    if (deviceIndex == 0) {\n      puts(\"error: undefined device given\");\n    }\n    else {\n      memset(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (counter = 0; counter < (int)numValues; counter = counter + 1) {\n        intValue = atoi(argv[counter + 3]);\n        values[counter] = intValue;\n      }\n      iprintf(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      phydat_dump(values,numValues & 0xff);\n      numValues = saul_reg_write(deviceIndex,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          iprintf(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          iprintf(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        iprintf(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "intValue",
                "auStack_20": "values",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceId",
                "local_c": "counter"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_reg_write",
                "memset",
                "saul_reg_find_nth",
                "puts",
                "phydat_dump",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "execute_command_0000316c",
            "code": "\nundefined4 execute_command_0000316c(int command_count,undefined4 *command_args)\n\n{\n  int result;\n  \n  if (command_count < 2) {\n    list_command();\n  }\n  else {\n    result = compare_strings(command_args[1],&DAT_000074ec);\n    if (result == 0) {\n      execute_read(command_count,command_args);\n    }\n    else {\n      result = compare_strings(command_args[1],\"execute_write\");\n      if (result == 0) {\n        execute_write(command_count,command_args);\n      }\n      else {\n        print_usage(\"usage: %s execute_read|execute_write\\n\",*command_args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "execute_command_0000316c",
                "param_1": "command_count",
                "param_2": "command_args",
                "iVar1": "result",
                "list": "list_command",
                "read": "execute_read",
                "strcmp": "compare_strings",
                "write": "execute_write",
                "iprintf": "print_usage"
            },
            "calling": [],
            "called": [
                "list",
                "iprintf",
                "read",
                "strcmp",
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "display_alarm_message_000031e0",
            "code": "\nvoid displayAlarmMessage_000031e0(void)\n\n{\n  puts(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "display_alarm_message_000031e0"
            },
            "calling": [],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekdayOffsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "weekdayOffsets"
            },
            "calling": [
                "_parse_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_input_0000328c",
            "code": "\nundefined4 parseInput_0000328c(undefined4 *inputStrings,int *resultArray)\n\n{\n  int dowResult;\n  int nextToken;\n  short parsedNumber;\n  \n  parsedNumber = strtol(*inputStrings,&nextToken,10);\n  resultArray[5] = parsedNumber + -0x76c;\n  parsedNumber = strtol(nextToken + 1,&nextToken,10);\n  resultArray[4] = parsedNumber + -1;\n  parsedNumber = strtol(nextToken + 1,&nextToken,10);\n  resultArray[3] = (int)parsedNumber;\n  parsedNumber = strtol(inputStrings[1],&nextToken,10);\n  resultArray[2] = (int)parsedNumber;\n  parsedNumber = strtol(nextToken + 1,&nextToken,10);\n  resultArray[1] = (int)parsedNumber;\n  parsedNumber = strtol(nextToken + 1,&nextToken,10);\n  *resultArray = (int)parsedNumber;\n  dowResult = dow(resultArray[5] + 0x76c,resultArray[4] + 1,resultArray[3]);\n  resultArray[6] = dowResult;\n  resultArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_input_0000328c",
                "param_1": "inputStrings",
                "param_2": "resultArray",
                "iVar1": "dowResult",
                "local_10": "nextToken",
                "local_a": "parsedNumber"
            },
            "calling": [
                "_rtc_setalarm",
                "_rtc_settime"
            ],
            "called": [
                "dow",
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeArray)\n\n{\n  iprintf(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,hour,\n          minute,*dateTimeArray);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeArray",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "_rtc_gettime",
                "_rtc_getalarm"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_alarm_and_print_time_000033c0",
            "code": "\nbool get_alarm_and_print_time_000033c0(void)\n\n{\n  int error_code;\n  undefined alarm_data [36];\n  \n  error_code = rtc_get_alarm(alarm_data);\n  if (error_code != 0) {\n    puts(\"rtc: error getting alarm\");\n  }\n  else {\n    _print_time(alarm_data);\n  }\n  return error_code != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_alarm_and_print_time_000033c0",
                "auStack_2c": "alarm_data",
                "iVar1": "error_code"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_alarm",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_if_needed_000033f4",
            "code": "\nundefined4 setAlarmIfNeeded_000033f4(undefined4 inputTime)\n\n{\n  int parseResult;\n  undefined4 returnValue;\n  undefined timeBuffer [36];\n  \n  parseResult = _parse_time(inputTime,timeBuffer);\n  if (parseResult == 0) {\n    parseResult = rtc_set_alarm(timeBuffer,0x31e1,0);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_if_needed_000033f4",
                "param_1": "inputTime",
                "iVar1": "parseResult",
                "uVar2": "returnValue",
                "auStack_2c": "timeBuffer"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts",
                "_parse_time",
                "rtc_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_print_time_00003444",
            "code": "\nbool getPrintTime_00003444(void)\n\n{\n  int resultCode;\n  undefined timeData [36];\n  \n  resultCode = rtc_get_time(timeData);\n  if (resultCode != 0) {\n    puts(\"rtc: error getting time\");\n  }\n  else {\n    _print_time(timeData);\n  }\n  return resultCode != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_print_time_00003444",
                "auStack_2c": "timeData",
                "iVar1": "resultCode"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_time",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_rtc_time_00003478",
            "code": "\nundefined4 setRtcTime_00003478(undefined4 time)\n\n{\n  int parseResult;\n  undefined4 returnVal;\n  undefined timeBuffer [36];\n  \n  parseResult = _parse_time(time,timeBuffer);\n  if (parseResult == 0) {\n    parseResult = rtc_set_time(timeBuffer);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting time\");\n      returnVal = 1;\n    }\n    else {\n      returnVal = 0;\n    }\n  }\n  else {\n    returnVal = 1;\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_rtc_time_00003478",
                "param_1": "time",
                "iVar1": "parseResult",
                "uVar2": "returnVal",
                "auStack_2c": "timeBuffer"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_set_time",
                "puts",
                "_parse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  puts(\"usage: rtc <command> [arguments]\");\n  puts(\"commands:\");\n  puts(\"\\tpoweron\\t\\tpower the interface on\");\n  puts(\"\\tpoweroff\\tpower the interface off\");\n  puts(\"\\tclearalarm\\tdeactivate the current alarm\");\n  puts(\"\\tgetalarm\\tprint the currently alarm time\");\n  puts(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  puts(\"\\tgettime\\t\\tprint the current time\");\n  puts(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_rtc_command_00003524",
            "code": "\nundefined4 handle_rtc_command_00003524(int num_args,int command_args)\n\n{\n  int comparison_result;\n  undefined4 status_result;\n  \n  if (num_args < 2) {\n    _rtc_usage();\n    status_result = 1;\n  }\n  else {\n    comparison_result = strncmp(*(undefined4 *)(command_args + 4),\"poweron\",7);\n    if (comparison_result == 0) {\n      rtc_poweron();\n    }\n    else {\n      comparison_result = strncmp(*(undefined4 *)(command_args + 4),\"poweroff\",8);\n      if (comparison_result == 0) {\n        rtc_poweroff();\n      }\n      else {\n        comparison_result = strncmp(*(undefined4 *)(command_args + 4),\"clearalarm\",8);\n        if (comparison_result == 0) {\n          rtc_clear_alarm();\n        }\n        else {\n          comparison_result = strncmp(*(undefined4 *)(command_args + 4),\"getalarm\",8);\n          if (comparison_result == 0) {\n            _rtc_getalarm();\n          }\n          else {\n            comparison_result = strncmp(*(undefined4 *)(command_args + 4),\"setalarm\",8);\n            if ((comparison_result == 0) && (num_args == 4)) {\n              _rtc_setalarm(command_args + 8);\n            }\n            else {\n              comparison_result = strncmp(*(undefined4 *)(command_args + 4),\"gettime\",7);\n              if (comparison_result == 0) {\n                _rtc_gettime();\n              }\n              else {\n                comparison_result = strncmp(*(undefined4 *)(command_args + 4),\"settime\",7);\n                if ((comparison_result != 0) || (num_args != 4)) {\n                  iprintf(\"unknown command or missing parameters: %s\\n\\n\",\n                          *(undefined4 *)(command_args + 4));\n                  _rtc_usage();\n                  return 1;\n                }\n                _rtc_settime(command_args + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    status_result = 0;\n  }\n  return status_result;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_rtc_command_00003524",
                "param_1": "num_args",
                "param_2": "command_args",
                "iVar1": "comparison_result",
                "uVar2": "status_result"
            },
            "calling": [],
            "called": [
                "iprintf",
                "_rtc_setalarm",
                "rtc_clear_alarm",
                "strncmp",
                "_rtc_gettime",
                "_rtc_getalarm",
                "rtc_poweron",
                "rtc_poweroff",
                "_rtc_settime",
                "_rtc_usage"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "continuous_loop_00003658",
            "code": "\nvoid continuousLoop_00003658(void)\n\n{\n  barrier(0xf);\n  barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "continuous_loop_00003658",
                "DataSynchronizationBarrier": "barrier"
            },
            "calling": [
                "pm_reboot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "FUNC_00003688",
            "code": "\nvoid FUNC_00003688(void)\n\n{\n  NVIC_SystemReset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "FUNC_00003688"
            },
            "calling": [
                "_reboot_handler"
            ],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataAddr,byte dataSize)\n\n{\n  undefined4 unitStr;\n  char bitFlag;\n  uint bitMask;\n  bool bitFlagSet;\n  undefined prefixBuffer [8];\n  int bufferIndex;\n  char prefixChar;\n  byte index;\n  \n  if ((dataAddr == 0) || (3 < dataSize)) {\n    puts(\"Unable to display data object\");\n  }\n  else {\n    iprintf(\"Data:\");\n    for (index = 0; index < dataSize; index = index + 1) {\n      if (*(byte *)(dataAddr + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataAddr + 6) & 0x8018f;\n        bitFlagSet = bitMask != 0;\n        if (bitFlagSet) {\n          bitMask = 1;\n        }\n        bitFlag = (char)bitMask;\n        if (!bitFlagSet) {\n          bitFlag = '\\0';\n        }\n        if (bitFlag == '\\0') goto LAB_000036ee;\n        prefixChar = '\\0';\n      }\n      else {\nLAB_000036ee:\n        prefixChar = phydat_prefix_from_scale((int)*(char *)(dataAddr + 7));\n      }\n      iprintf(&DAT_000077bc);\n      if (dataSize < 2) {\n        iprintf(\"     \");\n      }\n      else {\n        iprintf(\"[%u] \",index);\n      }\n      if (prefixChar == '\\0') {\n        if (*(char *)(dataAddr + 7) == '\\0') {\n          iprintf(&DAT_000077d8,(int)*(short *)(dataAddr + (uint)index * 2));\n        }\n        else if ((*(char *)(dataAddr + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddr + 7),4)) &&\n                (*(char *)(dataAddr + 7) < '\\0')) {\n          bufferIndex = fmt_s16_dfp(prefixBuffer,(int)*(short *)(dataAddr + (uint)index * 2),\n                                 (int)*(char *)(dataAddr + 7));\n          prefixBuffer[bufferIndex] = 0;\n          iprintf(&DAT_000077dc,prefixBuffer);\n        }\n        else {\n          iprintf(\"%iE%i\",(int)*(short *)(dataAddr + (uint)index * 2),(int)*(char *)(dataAddr + 7));\n        }\n      }\n      else {\n        iprintf(\"%6d %c\",(int)*(short *)(dataAddr + (uint)index * 2),prefixChar);\n      }\n      unitStr = phydat_unit_to_str(*(undefined *)(dataAddr + 6));\n      iprintf(&DAT_000077e8,unitStr);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataAddr",
                "param_2": "dataSize",
                "uVar1": "unitStr",
                "cVar2": "bitFlag",
                "uVar3": "bitMask",
                "bVar4": "bitFlagSet",
                "auStack_18": "prefixBuffer",
                "local_10": "bufferIndex",
                "local_a": "prefixChar",
                "local_9": "index"
            },
            "calling": [
                "probe",
                "write"
            ],
            "called": [
                "phydat_prefix_from_scale",
                "iprintf",
                "puts",
                "fmt_s16_dfp",
                "phydat_unit_to_str"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined inputValue)\n\n{\n  undefined *memoryAddress;\n  \n  switch(inputValue) {\n  case 2:\n    memoryAddress = &DAT_000077ec;\n    break;\n  case 3:\n    memoryAddress = &DAT_000077f0;\n    break;\n  case 4:\n    memoryAddress = &DAT_000077f4;\n    break;\n  case 5:\n    memoryAddress = &DAT_000077f8;\n    break;\n  case 6:\n    memoryAddress = &DAT_000077fc;\n    break;\n  case 7:\n    memoryAddress = (undefined *)0x7800;\n    break;\n  case 8:\n    memoryAddress = &DAT_00007804;\n    break;\n  case 9:\n    memoryAddress = &DAT_00007808;\n    break;\n  case 10:\n    memoryAddress = &DAT_0000780c;\n    break;\n  case 0xb:\n    memoryAddress = &DAT_00007810;\n    break;\n  case 0xc:\n    memoryAddress = &DAT_00007814;\n    break;\n  case 0xd:\n    memoryAddress = &DAT_00007818;\n    break;\n  case 0xe:\n    memoryAddress = &DAT_0000781c;\n    break;\n  case 0xf:\n    memoryAddress = &DAT_00007820;\n    break;\n  case 0x10:\n    memoryAddress = &DAT_00007824;\n    break;\n  case 0x11:\n    memoryAddress = &DAT_0000782c;\n    break;\n  default:\n    memoryAddress = &DAT_00007834;\n    break;\n  case 0x13:\n    memoryAddress = &DAT_00007830;\n    break;\n  case 0x15:\n    memoryAddress = &DAT_00007828;\n  }\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "inputValue",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_character_from_code_00003918",
            "code": "\nundefined4 getCharacterFromCode_00003918(undefined code)\n\n{\n  undefined4 character;\n  \n  switch(code) {\n  case 2:\n    character = 0x68;\n    break;\n  case 3:\n    character = 0x6b;\n    break;\n  case 6:\n    character = 0x4d;\n    break;\n  case 9:\n    character = 0x47;\n    break;\n  case 0xc:\n    character = 0x54;\n    break;\n  case 0xf:\n    character = 0x50;\n    break;\n  case 0xf1:\n    character = 0x66;\n    break;\n  default:\n    character = 0;\n    break;\n  case 0xf4:\n    character = 0x70;\n    break;\n  case 0xf7:\n    character = 0x6e;\n    break;\n  case 0xfa:\n    character = 0x75;\n    break;\n  case 0xfd:\n    character = 0x6d;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_character_from_code_00003918",
                "param_1": "code",
                "uVar1": "character"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "map_param_to_name_000039e8",
            "code": "\nchar * mapParamToName_000039e8(char parameter)\n\n{\n  char *mappedName;\n  \n  switch(parameter) {\n  case '\\0':\n    mappedName = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    mappedName = \"ACT_ANY\";\n    break;\n  case 'B':\n    mappedName = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    mappedName = \"ACT_SERVO\";\n    break;\n  case 'D':\n    mappedName = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    mappedName = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    mappedName = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    mappedName = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    mappedName = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    mappedName = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    mappedName = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    mappedName = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    mappedName = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    mappedName = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    mappedName = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    mappedName = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    mappedName = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    mappedName = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    mappedName = \"SENSE_UV\";\n    break;\n  case -0x74:\n    mappedName = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    mappedName = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    mappedName = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    mappedName = \"SENSE_CO2\";\n    break;\n  default:\n    if (parameter == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    mappedName = \"CLASS_UNKNOWN\";\n  }\n  return mappedName;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "map_param_to_name_000039e8",
                "param_1": "parameter",
                "pcVar1": "mappedName"
            },
            "calling": [
                "list",
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_00003d24",
            "code": "\nundefined4 * findElement_00003d24(int num_elements)\n\n{\n  int index;\n  undefined4 *current_element;\n  \n  index = 0;\n  for (current_element = DAT_1fff0db0; (index < num_elements && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    index = index + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_00003d24",
                "param_1": "num_elements",
                "local_10": "index",
                "local_c": "current_element"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_or_return_error_00003d64",
            "code": "\nundefined4 execute_function_or_return_error_00003d64(int function_ptr,undefined4 param)\n\n{\n  undefined4 result;\n  \n  if (function_ptr == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (***(code ***)(function_ptr + 0xc))(*(undefined4 *)(function_ptr + 4),param);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_or_return_error_00003d64",
                "param_1": "function_ptr",
                "param_2": "param",
                "uVar1": "result"
            },
            "calling": [
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int functionPointer,undefined4 inputValue)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),inputValue);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "functionPointer",
                "param_2": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputOffset,uint number)\n\n{\n  uint remainder;\n  char *output;\n  uint base;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (base = 10; base <= number; base = base * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputOffset != 0) {\n    output = (char *)(digitCount + inputOffset);\n    remainder = number;\n    do {\n      output = output + -1;\n      *output = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputOffset",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "output",
                "local_10": "base",
                "local_c": "digitCount"
            },
            "calling": [
                "fmt_s32_dec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "convert_to_decimal_00003e58",
            "code": "\nint convertToDecimal_00003e58(undefined *inputString,int inputNumber)\n\n{\n  int formattedLength;\n  int absoluteNumber;\n  undefined *modifiedInputString;\n  \n  absoluteNumber = inputNumber;\n  modifiedInputString = inputString;\n  if (-(inputNumber >> 0x1f) != 0) {\n    if (inputString != (undefined *)0x0) {\n      modifiedInputString = inputString + 1;\n      *inputString = 0x2d;\n    }\n    absoluteNumber = -inputNumber;\n  }\n  formattedLength = fmt_u32_dec(modifiedInputString,absoluteNumber);\n  return -(inputNumber >> 0x1f) + formattedLength;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "convert_to_decimal_00003e58",
                "param_1": "inputString",
                "param_2": "inputNumber",
                "local_18": "absoluteNumber",
                "local_14": "modifiedInputString",
                "iVar1": "formattedLength"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "fmt_u32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_integer_to_string_00003e9e",
            "code": "\nundefined4 formatIntegerToString_00003e9e(undefined4 inputValue,short decimalPlaces,undefined4 formatOptions)\n\n{\n  undefined4 formattedString;\n  \n  formattedString = fmt_s32_dfp(inputValue,(int)decimalPlaces,formatOptions);\n  return formattedString;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_integer_to_string_00003e9e",
                "param_1": "inputValue",
                "param_2": "decimalPlaces",
                "param_3": "formatOptions",
                "uVar1": "formattedString"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [
                "fmt_s32_dfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "FUNC_00003ec4",
            "code": "\nint FUNC_00003ec4(undefined *param_1,uint param_2,int param_3)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  int local_10;\n  int local_c;\n  \n  if (param_3 + 7 < 0 != SCARRY4(param_3,7)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  local_c = 0;\n  if (param_3 == 0) {\n    local_c = fmt_s32_dec(param_1,param_2);\n  }\n  else if (param_3 < 1) {\n    uVar3 = param_2 / *(uint *)(&DAT_00007978 + param_3 * -4);\n    local_10 = param_2 - *(uint *)(&DAT_00007978 + param_3 * -4) * uVar3;\n    if (local_10 < 0) {\n      local_10 = -local_10;\n    }\n    if ((uVar3 == 0) && ((int)param_2 < 0)) {\n      if (param_1 != (undefined *)0x0) {\n        *param_1 = 0x2d;\n      }\n      local_c = 1;\n    }\n    if (param_1 == (undefined *)0x0) {\n      iVar1 = fmt_s32_dec(0,uVar3);\n      local_c = iVar1 + 1 + local_c;\n    }\n    else {\n      iVar1 = fmt_s32_dec(param_1 + local_c,uVar3);\n      iVar1 = local_c + iVar1;\n      local_c = iVar1 + 1;\n      param_1[iVar1] = 0x2e;\n      uVar2 = fmt_s32_dec(param_1 + local_c,local_10);\n      fmt_lpad(param_1 + local_c,uVar2,-param_3,0x30);\n    }\n    local_c = -param_3 + local_c;\n  }\n  else {\n    local_c = fmt_s32_dec(param_1,param_2);\n    if (param_1 != (undefined *)0x0) {\n      memset(param_1 + local_c,0x30,param_3);\n    }\n    local_c = param_3 + local_c;\n  }\n  return local_c;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "FUNC_00003ec4"
            },
            "calling": [
                "fmt_s16_dfp"
            ],
            "called": [
                "core_panic",
                "memset",
                "fmt_lpad",
                "fmt_s32_dec"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_set_range_00003ff4",
            "code": "\nuint copyAndSetRange_00003ff4(int destination,uint sourceLength,uint destinationLength,undefined fillByte)\n\n{\n  uint newDestinationLength;\n  \n  newDestinationLength = sourceLength;\n  if ((sourceLength < destinationLength) && (newDestinationLength = destinationLength, destination != 0)) {\n    memmove((destinationLength - sourceLength) + destination,destination,sourceLength);\n    memset(destination,fillByte,destinationLength - sourceLength);\n  }\n  return newDestinationLength;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_set_range_00003ff4",
                "param_1": "destination",
                "param_2": "sourceLength",
                "param_3": "destinationLength",
                "param_4": "fillByte",
                "uVar1": "newDestinationLength"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "memset",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_string_to_integer_00004042",
            "code": "\nvoid parseStringToInteger_00004042(undefined4 stringToParse)\n\n{\n  strtol(stringToParse,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_string_to_integer_00004042",
                "param_1": "stringToParse"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "decode_data_0000404c",
            "code": "\nundefined4 decode_data_0000404c(uint *output_buffer,int *input_buffer)\n\n{\n  int temp_var_1;\n  int *temp_var_2;\n  uint flag_var;\n  ushort status_flag;\n  int temp_var_3;\n  code *decode_function;\n  int temp_var_4;\n  uint temp_var_5;\n  bool is_flag_true;\n  \n  status_flag = *(ushort *)(input_buffer + 3);\n  flag_var = (uint)status_flag;\n  if ((int)(flag_var << 0x1c) < 0) {\n    temp_var_1 = input_buffer[4];\n    if (temp_var_1 != 0) {\n      temp_var_3 = flag_var << 0x1e;\n      is_flag_true = temp_var_3 == 0;\n      temp_var_4 = *input_buffer;\n      if (is_flag_true) {\n        temp_var_3 = input_buffer[5];\n      }\n      *input_buffer = temp_var_1;\n      if (!is_flag_true) {\n        temp_var_3 = 0;\n      }\n      input_buffer[2] = temp_var_3;\n      for (temp_var_4 = temp_var_4 - temp_var_1; 0 < temp_var_4; temp_var_4 = temp_var_4 - temp_var_3) {\n        temp_var_3 = (*(code *)input_buffer[10])(output_buffer,input_buffer[8],temp_var_1,temp_var_4);\n        if (temp_var_3 < 1) {\n          *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n          return 0xffffffff;\n        }\n        temp_var_1 = temp_var_1 + temp_var_3;\n      }\n    }\n  }\n  else {\n    if ((input_buffer[1] < 1) && (input_buffer[0x10] < 1)) {\n      return 0;\n    }\n    decode_function = (code *)input_buffer[0xb];\n    if (decode_function == (code *)0x0) {\n      return 0;\n    }\n    temp_var_5 = *output_buffer;\n    *output_buffer = 0;\n    if ((status_flag & 0x1000) == 0) {\n      temp_var_1 = (*decode_function)(output_buffer,input_buffer[8],flag_var & 0x1000,1);\n      if ((temp_var_1 == -1) && (flag_var = *output_buffer, flag_var != 0)) {\n        if ((flag_var == 0x1d) || (flag_var == 0x16)) {\n          *output_buffer = temp_var_5;\n          return 0;\n        }\n        status_flag = *(ushort *)(input_buffer + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      temp_var_1 = input_buffer[0x15];\n    }\n    if (((int)((uint)*(ushort *)(input_buffer + 3) << 0x1d) < 0) &&\n       (temp_var_1 = temp_var_1 - input_buffer[1], input_buffer[0xd] != 0)) {\n      temp_var_1 = temp_var_1 - input_buffer[0x10];\n    }\n    temp_var_1 = (*(code *)input_buffer[0xb])(output_buffer,input_buffer[8],temp_var_1,0);\n    status_flag = *(ushort *)(input_buffer + 3);\n    if ((temp_var_1 == -1) &&\n       ((0x1d < *output_buffer || (-1 < (int)((0x20400001U >> (*output_buffer & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(input_buffer + 3) = status_flag | 0x40;\n      return 0xffffffff;\n    }\n    input_buffer[1] = 0;\n    *input_buffer = input_buffer[4];\n    if (((int)((uint)status_flag << 0x13) < 0) && ((temp_var_1 != -1 || (*output_buffer == 0)))) {\n      input_buffer[0x15] = temp_var_1;\n    }\n    temp_var_2 = (int *)input_buffer[0xd];\n    *output_buffer = temp_var_5;\n    if (temp_var_2 != (int *)0x0) {\n      if (temp_var_2 != input_buffer + 0x11) {\n        _free_r(output_buffer);\n      }\n      input_buffer[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "decode_data_0000404c",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "iVar1": "temp_var_1",
                "piVar2": "temp_var_2",
                "uVar3": "flag_var",
                "uVar4": "status_flag",
                "iVar5": "temp_var_3",
                "pcVar6": "decode_function",
                "iVar7": "temp_var_4",
                "uVar8": "temp_var_5",
                "bVar9": "is_flag_true"
            },
            "calling": [
                "_fflush_r",
                "__srefill_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "flush_stream_if_needed_00004158",
            "code": "\nundefined4 flushStreamIfNeeded_00004158(int streamPointer,undefined4 *streamProperties)\n\n{\n  undefined4 result;\n  \n  if (streamProperties[4] != 0) {\n    if ((streamPointer != 0) && (*(int *)(streamPointer + 0x18) == 0)) {\n      initializeStream();\n    }\n    if (streamProperties == &DAT_000079b8) {\n      streamProperties = *(undefined4 **)(streamPointer + 4);\n    }\n    else if (streamProperties == (undefined4 *)&DAT_000079d8) {\n      streamProperties = *(undefined4 **)(streamPointer + 8);\n    }\n    else if (streamProperties == (undefined4 *)&DAT_00007998) {\n      streamProperties = *(undefined4 **)(streamPointer + 0xc);\n    }\n    if (*(short *)(streamProperties + 3) != 0) {\n      if ((-1 < (int)(streamProperties[0x19] << 0x1f)) && (-1 < (int)*(short *)(streamProperties + 3) << 0x16)) {\n        acquireLock(streamProperties[0x16]);\n      }\n      result = flushStream(streamPointer,streamProperties);\n      if ((int)(streamProperties[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(streamProperties + 3) << 0x16) < 0) {\n        return result;\n      }\n      releaseLock(streamProperties[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "flush_stream_if_needed_00004158",
                "param_1": "streamPointer",
                "param_2": "streamProperties",
                "uVar1": "result",
                "__sinit": "initializeStream",
                "__sflush_r": "flushStream",
                "__retarget_lock_acquire_recursive": "acquireLock",
                "__retarget_lock_release_recursive": "releaseLock"
            },
            "calling": [
                "fflush",
                "__swbuf_r",
                "__srefill_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "flush_multiple_buffers_000041d0",
            "code": "\nuint flushMultipleBuffers_000041d0(int fileDescriptor,undefined4 param_2,undefined4 param_3)\n\n{\n  uint flushResult;\n  int loopCounter;\n  dword *relTablePointer;\n  int entryPointer;\n  uint combinedResult;\n  int innerLoopCounter;\n  undefined4 *localBufferPointer;\n  \n  if (fileDescriptor == 0) {\n    localBufferPointer = &DAT_000079f8;\n    relTablePointer = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combinedResult = 0;\n    do {\n      innerLoopCounter = relTablePointer[1];\n      entryPointer = relTablePointer[2];\n      while (innerLoopCounter = innerLoopCounter + -1, -1 < innerLoopCounter) {\n        if ((1 < *(ushort *)(entryPointer + 0xc)) && (loopCounter = *(short *)(entryPointer + 0xe) + 1, loopCounter != 0)) {\n          flushResult = _fflush_r(0x1fff0284,entryPointer,param_3,loopCounter,localBufferPointer);\n          combinedResult = combinedResult | flushResult;\n        }\n        entryPointer = entryPointer + 0x68;\n      }\n      relTablePointer = (dword *)*relTablePointer;\n    } while (relTablePointer != (dword *)0x0);\n    return combinedResult;\n  }\n  combinedResult = _fflush_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,fileDescriptor);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "flush_multiple_buffers_000041d0",
                "param_1": "fileDescriptor",
                "uVar1": "flushResult",
                "iVar2": "loopCounter",
                "pdVar3": "relTablePointer",
                "iVar4": "entryPointer",
                "uVar5": "combinedResult",
                "iVar6": "innerLoopCounter",
                "puVar7": "localBufferPointer"
            },
            "calling": [
                "print_prompt"
            ],
            "called": [
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_data_structure_000041f4",
            "code": "\nvoid initializeDataStructure_000041f4(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[0x19] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[6] = 0;\n  memset(dataStructure + 0x17,0,8);\n  dataStructure[9] = 0x4dc9;\n  dataStructure[10] = 0x4def;\n  dataStructure[0xb] = 0x4e27;\n  dataStructure[8] = dataStructure;\n  dataStructure[0xc] = &markerFunction;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_data_structure_000041f4",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "dataStructure[1]",
                "param_1[4]": "dataStructure[4]",
                "param_1[5]": "dataStructure[5]",
                "param_1[2]": "dataStructure[2]",
                "param_1[0x19]": "dataStructure[0x19]",
                "param_1[6]": "dataStructure[6]",
                "param_1[9]": "dataStructure[9]",
                "param_1[10]": "dataStructure[10]",
                "param_1[0xb]": "dataStructure[0xb]",
                "param_1[8]": "dataStructure[8]",
                "param_1[0xc]": "dataStructure[0xc]",
                "&LAB_00004e4a_1": "&markerFunction"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_structure_00004248",
            "code": "\nundefined4 * initializeDataStructure_00004248(undefined4 sizeOfDataStructure,int numberOfElements)\n\n{\n  undefined4 *dataStructurePtr;\n  int dataStructureSize;\n  \n  dataStructureSize = (numberOfElements + -1) * 0x68;\n  dataStructurePtr = (undefined4 *)_malloc_r(sizeOfDataStructure,dataStructureSize + 0x74);\n  if (dataStructurePtr != (undefined4 *)0x0) {\n    *dataStructurePtr = 0;\n    dataStructurePtr[1] = numberOfElements;\n    dataStructurePtr[2] = dataStructurePtr + 3;\n    memset(dataStructurePtr + 3,0,dataStructureSize + 0x68);\n  }\n  return dataStructurePtr;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_structure_00004248",
                "param_1": "sizeOfDataStructure",
                "param_2": "numberOfElements",
                "puVar1": "dataStructurePtr",
                "iVar2": "dataStructureSize"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "acquire_recursive_lock_00004274",
            "code": "\nvoid acquire_recursive_lock_00004274(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "acquire_recursive_lock_00004274"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "release_recursive_lock_00004280",
            "code": "\nvoid releaseRecursiveLock_00004280(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "release_recursive_lock_00004280"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "acquire_recursive_lock_0000428c",
            "code": "\nvoid acquire_recursive_lock_0000428c(void)\n\n{\n  acquire_recursive_lock_0000428c(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "acquire_recursive_lock_0000428c",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_000042a4",
            "code": "\nvoid initializeData_000042a4(int dataPtr)\n\n{\n  undefined4 flags;\n  \n  __sinit_lock_acquire();\n  if (*(int *)(dataPtr + 0x18) == 0) {\n    *(undefined4 *)(dataPtr + 0x48) = 0;\n    *(undefined4 *)(dataPtr + 0x4c) = 0;\n    *(undefined4 *)(dataPtr + 0x50) = 0;\n    flags = 0x1fff0284;\n    *(undefined **)(dataPtr + 0x28) = &DAT_0000423d;\n    if (dataPtr == 0x1fff0284) {\n      flags = 1;\n    }\n    if (dataPtr == 0x1fff0284) {\n      *(undefined4 *)(dataPtr + 0x18) = flags;\n    }\n    flags = __sfp(dataPtr);\n    *(undefined4 *)(dataPtr + 4) = flags;\n    flags = __sfp(dataPtr);\n    *(undefined4 *)(dataPtr + 8) = flags;\n    flags = __sfp(dataPtr);\n    *(undefined4 *)(dataPtr + 0xc) = flags;\n    std(*(undefined4 *)(dataPtr + 4),4,0);\n    std(*(undefined4 *)(dataPtr + 8),9,1);\n    std(*(undefined4 *)(dataPtr + 0xc),0x12,2);\n    *(undefined4 *)(dataPtr + 0x18) = 1;\n  }\n  __retarget_lock_release_recursive(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "param_1": "dataPtr",
                "uVar1": "flags"
            },
            "calling": [
                "iprintf",
                "_fflush_r",
                "__swbuf_r",
                "_vfprintf_r",
                "__srefill_r",
                "__sfp",
                "puts",
                "__srget_r",
                "__swsetup_r",
                "getchar",
                "putchar"
            ],
            "called": [
                "std",
                "__sinit_lock_acquire",
                "__sfp",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_locks_00004314",
            "code": "\nundefined4 * initializeLocks_00004314(undefined4 *outputArray)\n\n{\n  dword newSpace;\n  int arrayIndex;\n  undefined4 *currentElement;\n  dword *arrayPointer;\n  \n  __sfp_lock_acquire();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    __sinit(0x1fff0284);\n  }\n  arrayPointer = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    arrayIndex = arrayPointer[1];\n    currentElement = (undefined4 *)arrayPointer[2];\n    while (arrayIndex = arrayIndex + -1, -1 < arrayIndex) {\n      if (*(short *)(currentElement + 3) == 0) {\n        currentElement[3] = 0xffff0001;\n        currentElement[0x19] = 0;\n        __retarget_lock_init_recursive(currentElement + 0x16);\n        __sfp_lock_release();\n        currentElement[1] = 0;\n        currentElement[2] = 0;\n        currentElement[4] = 0;\n        currentElement[5] = 0;\n        *currentElement = 0;\n        currentElement[6] = 0;\n        memset(currentElement + 0x17,0,8);\n        currentElement[0xd] = 0;\n        currentElement[0xe] = 0;\n        currentElement[0x12] = 0;\n        currentElement[0x13] = 0;\n        return currentElement;\n      }\n      currentElement = currentElement + 0x1a;\n    }\n    if (*arrayPointer == 0) {\n      newSpace = __sfmoreglue(outputArray,4);\n      *arrayPointer = newSpace;\n      if (newSpace == 0) {\n        __sfp_lock_release();\n        *outputArray = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    arrayPointer = (dword *)*arrayPointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_locks_00004314",
                "param_1": "outputArray",
                "dVar1": "newSpace",
                "iVar2": "arrayIndex",
                "puVar3": "currentElement",
                "pdVar4": "arrayPointer"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sfp_lock_acquire",
                "memset",
                "__sfp_lock_release",
                "__sfmoreglue",
                "__sinit",
                "__retarget_lock_init_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "find_updated_values_000043a0",
            "code": "\nuint find_updated_values_000043a0(int input_value,code *code_function)\n\n{\n  uint func_result;\n  int *array_ptr;\n  int value_1;\n  uint result;\n  int value_2;\n  \n  array_ptr = (int *)(input_value + 0x48);\n  result = 0;\n  do {\n    value_2 = array_ptr[1];\n    value_1 = array_ptr[2];\n    while (value_2 = value_2 + -1, -1 < value_2) {\n      if ((1 < *(ushort *)(value_1 + 0xc)) && (*(short *)(value_1 + 0xe) != -1)) {\n        func_result = (*code_function)(value_1);\n        result = result | func_result;\n      }\n      value_1 = value_1 + 0x68;\n    }\n    array_ptr = (int *)*array_ptr;\n  } while (array_ptr != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "find_updated_values_000043a0",
                "param_1": "input_value",
                "param_2": "code_function",
                "piVar2": "array_ptr",
                "iVar3": "value_1",
                "uVar4": "result",
                "iVar5": "value_2",
                "uVar1": "func_result"
            },
            "calling": [
                "__srefill_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "get_character_from_buffer_00004418",
            "code": "\nuint getCharacterFromBuffer_00004418(void)\n\n{\n  dword buffer_offset;\n  uint char_value;\n  byte **buffer_ptr_ptr;\n  byte *buffer_ptr;\n  \n  buffer_offset = buffer[16].r_offset;\n  if ((buffer[16].r_offset != 0) &&\n     (*(int *)(buffer[16].r_offset + 0x18) == 0)) {\n    initializeBuffer(buffer[16].r_offset);\n  }\n  buffer_ptr_ptr = *(byte ***)(buffer_offset + 4);\n  if ((buffer_offset != 0) && (*(int *)(buffer_offset + 0x18) == 0)) {\n    initializeBuffer();\n  }\n  if (buffer_ptr_ptr == (byte **)&DAT_000079b8) {\n    buffer_ptr_ptr = *(byte ***)(buffer_offset + 4);\n  }\n  else if (buffer_ptr_ptr == (byte **)&DAT_000079d8) {\n    buffer_ptr_ptr = *(byte ***)(buffer_offset + 8);\n  }\n  else if (buffer_ptr_ptr == (byte **)&DAT_00007998) {\n    buffer_ptr_ptr = *(byte ***)(buffer_offset + 0xc);\n  }\n  if ((-1 < (int)buffer_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(buffer_ptr_ptr + 3) << 0x16))) {\n    lock_acquire_recursive(buffer_ptr_ptr[0x16]);\n  }\n  buffer_ptr = buffer_ptr_ptr[1];\n  buffer_ptr_ptr[1] = buffer_ptr + -1;\n  if ((int)(buffer_ptr + -1) < 0) {\n    char_value = retrieveCharacterFromBuffer(buffer_offset,buffer_ptr_ptr);\n  }\n  else {\n    buffer_ptr = *buffer_ptr_ptr;\n    *buffer_ptr_ptr = buffer_ptr + 1;\n    char_value = (uint)*buffer_ptr;\n  }\n  if ((-1 < (int)buffer_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(buffer_ptr_ptr + 3) << 0x16))) {\n    lock_release_recursive(buffer_ptr_ptr[0x16]);\n  }\n  return char_value;\n}\n\n",
            "renaming": {
                "FUN_00004418": "get_character_from_buffer_00004418",
                "Elf32_Rel_ARRAY_1fff0200": "buffer",
                "dVar1": "buffer_offset",
                "uVar2": "char_value",
                "ppbVar3": "buffer_ptr_ptr",
                "pbVar4": "buffer_ptr",
                "__sinit": "initializeBuffer",
                "__retarget_lock_acquire_recursive": "lock_acquire_recursive",
                "__srget_r": "retrieveCharacterFromBuffer",
                "__retarget_lock_release_recursive": "lock_release_recursive"
            },
            "calling": [
                "readline"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__srget_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "extract_date_time_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * extractDateTimeComponents_0000443c(undefined4 *timeInput,uint *dateTimeComponents)\n\n{\n  int quotient;\n  uint temp;\n  uint totalMinutes;\n  uint daysSince1860;\n  uint leapYears;\n  undefined4 dividend;\n  undefined4 divisor;\n  uint temp2;\n  bool isPositiveResult;\n  \n  dividend = *timeInput;\n  divisor = timeInput[1];\n  quotient = __aeabi_ldivmod(dividend,divisor,0x15180,0);\n  totalMinutes = 0x15180;\n  __aeabi_ldivmod(dividend,divisor,0x15180,0);\n  isPositiveResult = (int)totalMinutes < 0;\n  if (isPositiveResult) {\n    totalMinutes = totalMinutes + 0x15180;\n  }\n  if (isPositiveResult) {\n    temp = quotient + 0xafa6b;\n  }\n  else {\n    temp = quotient + 0xafa6c;\n  }\n  dateTimeComponents[2] = totalMinutes / 0xe10;\n  dateTimeComponents[1] = (totalMinutes % 0xe10) / 0x3c;\n  *dateTimeComponents = (totalMinutes % 0xe10) % 0x3c;\n  dateTimeComponents[6] = (temp + 3) % 7;\n  totalMinutes = temp;\n  if ((int)temp < 0) {\n    totalMinutes = temp - 0x23ab0;\n  }\n  temp = (totalMinutes / 0x23ab1) * -0x23ab1 + temp;\n  daysSince1860 = ((temp / 0x8eac + temp) - temp / 0x5b4) - temp / 0x23ab0;\n  leapYears = daysSince1860 / 0x16d;\n  temp = (leapYears / 100 - daysSince1860 / 0x5b4) + temp + leapYears * -0x16d;\n  temp2 = temp * 5 + 2;\n  daysSince1860 = temp2 / 0x99;\n  if (temp2 < 0x5fa) {\n    quotient = 2;\n  }\n  else {\n    quotient = -10;\n  }\n  temp2 = daysSince1860 + quotient;\n  quotient = (totalMinutes / 0x23ab1) * 400 + leapYears;\n  if (temp2 < 2) {\n    quotient = quotient + 1;\n  }\n  if (temp < 0x132) {\n    if (((leapYears & 3) == 0) && (leapYears != (leapYears / 100) * 100)) {\n      totalMinutes = 1;\n    }\n    else {\n      totalMinutes = (uint)(leapYears % 400 == 0);\n    }\n    totalMinutes = temp + 0x3b + totalMinutes;\n  }\n  else {\n    totalMinutes = temp - 0x132;\n  }\n  dateTimeComponents[7] = totalMinutes;\n  dateTimeComponents[3] = (temp + 1) - (daysSince1860 * 0x99 + 2) / 5;\n  dateTimeComponents[4] = temp2;\n  dateTimeComponents[5] = quotient - 0x76c;\n  dateTimeComponents[8] = 0;\n  return dateTimeComponents;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "extract_date_time_components_0000443c",
                "param_1": "timeInput",
                "param_2": "dateTimeComponents",
                "iVar1": "quotient",
                "uVar2": "temp",
                "uVar3": "totalMinutes",
                "uVar4": "daysSince1860",
                "uVar5": "leapYears",
                "uVar6": "dividend",
                "uVar7": "divisor",
                "uVar8": "temp2",
                "bVar9": "isPositiveResult"
            },
            "calling": [
                "rtc_get_alarm",
                "rtc_get_time"
            ],
            "called": [
                "__aeabi_ldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "initialize_and_execute_functions_0000459c",
            "code": "\nvoid initializeAndExecuteFunctions_0000459c(void)\n\n{\n  code **functionPointer;\n  int counter;\n  \n  functionPointer = (code **)&DAT_00007c58;\n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  _init();\n  functionPointer = (code **)&DAT_00007c58;\n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "initialize_and_execute_functions_0000459c",
                "ppcVar1": "functionPointer",
                "iVar2": "counter"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "__sfp"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "__sinit_lock_acquire",
                "_fflush_r",
                "__env_lock",
                "__sfp_lock_acquire",
                "__malloc_lock",
                "_vfprintf_r",
                "puts",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "__env_unlock",
                "_fflush_r",
                "__malloc_unlock",
                "_vfprintf_r",
                "puts",
                "__sfp_lock_release",
                "__sinit",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_range_000045ee",
            "code": "\nvoid copyRange_000045ee(undefined *dest,undefined *src,int size)\n\n{\n  undefined *destEnd;\n  undefined *srcEnd;\n  \n  srcEnd = src + size;\n  if ((src < dest) && (dest < srcEnd)) {\n    destEnd = dest + size;\n    while (destEnd != dest) {\n      srcEnd = srcEnd + -1;\n      destEnd = destEnd + -1;\n      *destEnd = *srcEnd;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcEnd; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_range_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destEnd",
                "puVar2": "srcEnd"
            },
            "calling": [
                "fmt_lpad"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "memset_00004622",
            "code": "\nvoid memset_00004622(undefined *destination,undefined value,int num_elements)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + num_elements;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "memset_00004622",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "num_elements",
                "puVar1": "end_address"
            },
            "calling": [
                "std",
                "fmt_lpad",
                "__sfp",
                "fmt_s32_dfp",
                "__sfmoreglue",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *dateTimeArray,uint seconds,undefined4 param_3)\n\n{\n  int daysInMonth;\n  uint currentDay;\n  uint currentMonth;\n  int currentYear;\n  bool isNegative;\n  uint *quotient;\n  uint remainder;\n  undefined4 uStack_18;\n  \n  quotient = dateTimeArray;\n  remainder = seconds;\n  uStack_18 = param_3;\n  if (0x3b < *dateTimeArray) {\n    div(&quotient,*dateTimeArray,0x3c);\n    currentDay = dateTimeArray[1] + (int)quotient;\n    dateTimeArray[1] = currentDay;\n    if ((int)remainder < 0) {\n      currentDay = currentDay - 1;\n      *dateTimeArray = remainder + 0x3c;\n    }\n    else {\n      *dateTimeArray = remainder;\n    }\n    if ((int)remainder < 0) {\n      dateTimeArray[1] = currentDay;\n    }\n  }\n  if (0x3b < dateTimeArray[1]) {\n    div(&quotient,dateTimeArray[1],0x3c);\n    isNegative = (int)remainder < 0;\n    currentMonth = dateTimeArray[2] + (int)quotient;\n    dateTimeArray[2] = currentMonth;\n    currentDay = remainder;\n    if (isNegative) {\n      currentDay = remainder + 0x3c;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[1] = currentDay;\n    }\n    if (isNegative) {\n      dateTimeArray[1] = currentDay;\n    }\n    if (isNegative) {\n      dateTimeArray[2] = currentMonth;\n    }\n  }\n  if (0x17 < dateTimeArray[2]) {\n    div(&quotient,dateTimeArray[2],0x18);\n    isNegative = (int)remainder < 0;\n    currentMonth = dateTimeArray[3] + (int)quotient;\n    dateTimeArray[3] = currentMonth;\n    currentDay = remainder;\n    if (isNegative) {\n      currentDay = remainder + 0x18;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[2] = currentDay;\n    }\n    if (isNegative) {\n      dateTimeArray[2] = currentDay;\n    }\n    if (isNegative) {\n      dateTimeArray[3] = currentMonth;\n    }\n  }\n  if (0xb < dateTimeArray[4]) {\n    div(&quotient,dateTimeArray[4],0xc);\n    isNegative = (int)remainder < 0;\n    currentDay = dateTimeArray[5] + (int)quotient;\n    dateTimeArray[5] = currentDay;\n    if (isNegative) {\n      remainder = remainder + 0xc;\n      currentDay = currentDay - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[4] = remainder;\n    }\n    if (isNegative) {\n      dateTimeArray[4] = remainder;\n    }\n    if (isNegative) {\n      dateTimeArray[5] = currentDay;\n    }\n  }\n  currentDay = dateTimeArray[5];\n  if ((currentDay & 3) == 0) {\n    if (currentDay == (currentDay / 100) * 100) {\n      if ((currentDay + 0x76c) % 400 == 0) {\n        currentYear = 0x1d;\n      }\n      else {\n        currentYear = 0x1c;\n      }\n    }\n    else {\n      currentYear = 0x1d;\n    }\n  }\n  else {\n    currentYear = 0x1c;\n  }\n  if ((int)dateTimeArray[3] < 1) {\n    while ((int)dateTimeArray[3] < 1) {\n      currentDay = dateTimeArray[4];\n      dateTimeArray[4] = currentDay - 1;\n      if (currentDay - 1 == 0xffffffff) {\n        currentMonth = dateTimeArray[5];\n        currentDay = currentMonth - 1;\n        dateTimeArray[4] = 0xb;\n        dateTimeArray[5] = currentDay;\n        if ((currentDay & 3) == 0) {\n          if (currentDay == (currentDay / 100) * 100) {\n            if ((currentMonth + 0x76b) % 400 == 0) {\n              currentYear = 0x1d;\n            }\n            else {\n              currentYear = 0x1c;\n            }\n          }\n          else {\n            currentYear = 0x1d;\n          }\n        }\n        else {\n          currentYear = 0x1c;\n        }\n      }\n      daysInMonth = currentYear;\n      if (dateTimeArray[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateTimeArray[4]];\n      }\n      dateTimeArray[3] = daysInMonth + dateTimeArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      currentDay = dateTimeArray[4];\n      daysInMonth = currentYear;\n      if (currentDay != 1) {\n        daysInMonth = (&DAT_000079fc)[currentDay];\n      }\n      if ((int)dateTimeArray[3] <= daysInMonth) break;\n      dateTimeArray[3] = dateTimeArray[3] - daysInMonth;\n      dateTimeArray[4] = currentDay + 1;\n      if (currentDay + 1 == 0xc) {\n        currentMonth = dateTimeArray[5];\n        currentDay = currentMonth + 1;\n        dateTimeArray[4] = 0;\n        dateTimeArray[5] = currentDay;\n        if ((currentDay & 3) == 0) {\n          if (currentDay % 100 == 0) {\n            if ((currentMonth + 0x76d) % 400 == 0) {\n              currentYear = 0x1d;\n            }\n            else {\n              currentYear = 0x1c;\n            }\n          }\n          else {\n            currentYear = 0x1d;\n          }\n        }\n        else {\n          currentYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "dateTimeArray",
                "param_2": "seconds",
                "iVar1": "daysInMonth",
                "uVar2": "currentDay",
                "uVar3": "currentMonth",
                "iVar4": "currentYear",
                "bVar5": "isNegative",
                "local_20": "quotient",
                "local_1c": "remainder"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "div"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDate_000047e4(int *dateValues)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *tzInfo;\n  uint tempVar;\n  int dayOffset;\n  int tempVar2;\n  int updatedDayOffset;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  int leapYearOffset;\n  uint yearValue;\n  uint hasLeapYear;\n  uint monthValue;\n  uint daysValue;\n  bool isLeapYear;\n  \n  tzInfo = (int *)__gettzinfo();\n  validate_structure(dateValues);\n  yearValue = dateValues[5];\n  leapYearOffset = dateValues[3] + -1 + *(int *)(&DAT_00007a2c + dateValues[4] * 4);\n  if (((1 < dateValues[4]) && ((yearValue & 3) == 0)) &&\n     ((yearValue != (yearValue / 100) * 100 || (yearValue + 0x76c == ((yearValue + 0x76c) / 400) * 400)))) {\n    leapYearOffset = leapYearOffset + 1;\n  }\n  dateValues[7] = leapYearOffset;\n  if (20000 < (int)&DAT_00002710 + yearValue) {\n    updatedDayOffset = -1;\n    dayOffset = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)yearValue < 0x47) {\n    if (yearValue != 0x46) {\n      for (tempVar4 = 0x45; (int)yearValue < (int)tempVar4; tempVar4 = tempVar4 - 1) {\n        if ((tempVar4 & 3) == 0) {\n          if (tempVar4 == (tempVar4 / 100) * 100) {\n            if ((tempVar4 + 0x76c) % 400 == 0) {\n              updatedDayOffset = 0x16e;\n            }\n            else {\n              updatedDayOffset = 0x16d;\n            }\n          }\n          else {\n            updatedDayOffset = 0x16e;\n          }\n        }\n        else {\n          updatedDayOffset = 0x16d;\n        }\n        leapYearOffset = leapYearOffset - updatedDayOffset;\n      }\n      if ((tempVar4 & 3) == 0) {\n        if (yearValue == (yearValue / 100) * 100) {\n          updatedDayOffset = 0x16d;\n          if ((yearValue + 0x76c) % 400 == 0) {\n            updatedDayOffset = 0x16e;\n          }\n        }\n        else {\n          updatedDayOffset = 0x16e;\n        }\n      }\n      else {\n        updatedDayOffset = 0x16d;\n      }\n      leapYearOffset = leapYearOffset - updatedDayOffset;\n    }\n  }\n  else {\n    tempVar4 = 0x46;\n    do {\n      if ((tempVar4 & 3) == 0) {\n        if (tempVar4 % 100 == 0) {\n          if ((tempVar4 + 0x76c) % 400 == 0) {\n            updatedDayOffset = 0x16e;\n          }\n          else {\n            updatedDayOffset = 0x16d;\n          }\n        }\n        else {\n          updatedDayOffset = 0x16e;\n        }\n      }\n      else {\n        updatedDayOffset = 0x16d;\n      }\n      tempVar4 = tempVar4 + 1;\n      leapYearOffset = leapYearOffset + updatedDayOffset;\n    } while (yearValue != tempVar4);\n  }\n  totalDays = (longlong)leapYearOffset * 0x15180 + (longlong)(dateValues[2] * 0xe10 + dateValues[1] * 0x3c + *dateValues)\n  ;\n  daysValue = (uint)totalDays;\n  updatedDayOffset = (int)((ulonglong)totalDays >> 0x20);\n  __tz_lock();\n  _tzset_unlocked();\n  tempVar4 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    yearValue = tzInfo[10];\n    updatedDayOffset = (uint)totalDays + yearValue;\n    dayOffset = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)yearValue >> 0x1f) + (uint)CARRY4((uint)totalDays,yearValue);\n  }\n  else {\n    monthValue = dateValues[8];\n    hasLeapYear = monthValue;\n    if (0 < (int)monthValue) {\n      hasLeapYear = 1;\n    }\n    if ((tzInfo[1] == dateValues[5] + 0x76c) || (dayOffset = __tzcalc_limits(), dayOffset != 0)) {\n      tempVar5 = tzInfo[0x14];\n      tempVar = tzInfo[0x12];\n      tempVar3 = tzInfo[10];\n      tempVar4 = tempVar - tempVar3;\n      dayOffset = (tzInfo[0x13] - ((int)tempVar3 >> 0x1f)) - (uint)(tempVar < tempVar3);\n      if (((int)((updatedDayOffset - dayOffset) - (uint)(daysValue < tempVar4)) < 0 ==\n           (SBORROW4(updatedDayOffset,dayOffset) != SBORROW4(updatedDayOffset - dayOffset,(uint)(daysValue < tempVar4)))) &&\n         (tempVar2 = (tzInfo[0x13] - ((int)tempVar5 >> 0x1f)) - (uint)(tempVar < tempVar5),\n         isLeapYear = daysValue < tempVar - tempVar5,\n         (int)((updatedDayOffset - tempVar2) - (uint)isLeapYear) < 0 !=\n         (SBORROW4(updatedDayOffset,tempVar2) != SBORROW4(updatedDayOffset - tempVar2,(uint)isLeapYear)))) goto LAB_00004a88;\n      tempVar = tzInfo[8] - tempVar5;\n      tempVar2 = (tzInfo[9] - ((int)tempVar5 >> 0x1f)) - (uint)((uint)tzInfo[8] < tempVar5);\n      if (*tzInfo != 0) {\n        if ((int)((updatedDayOffset - tempVar2) - (uint)(daysValue < tempVar)) < 0 ==\n            (SBORROW4(updatedDayOffset,tempVar2) != SBORROW4(updatedDayOffset - tempVar2,(uint)(daysValue < tempVar))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempVar4 = 0;\n        if ((int)monthValue < 0) goto LAB_00004934;\nLAB_00004a14:\n        daysValue = hasLeapYear ^ tempVar4;\n        hasLeapYear = tempVar4;\n        if (daysValue == 1) {\n          if (tempVar4 == 0) {\n            updatedDayOffset = tempVar5 - tempVar3;\n          }\n          else {\n            updatedDayOffset = tempVar3 - tempVar5;\n          }\n          dayOffset = dateValues[3];\n          *dateValues = *dateValues + updatedDayOffset;\n          updatedTotalDays = totalDays + updatedDayOffset;\n          validate_structure(dateValues);\n          dayOffset = dateValues[3] - dayOffset;\n          totalDays = totalDays + updatedDayOffset;\n          if (dayOffset != 0) {\n            if (dayOffset < 2) {\n              if (dayOffset == -2 || dayOffset + 2 < 0 != SCARRY4(dayOffset,2)) {\n                dayOffset = 1;\n              }\n            }\n            else {\n              dayOffset = -1;\n            }\n            updatedDayOffset = dayOffset + dateValues[7];\n            leapYearOffset = leapYearOffset + dayOffset;\n            if (updatedDayOffset < 0) {\n              tempVar4 = yearValue - 1;\n              if ((tempVar4 & 3) == 0) {\n                if (tempVar4 == (tempVar4 / 100) * 100) {\n                  updatedDayOffset = 0x16d;\n                  if ((yearValue + 0x76b) % 400 != 0) {\n                    updatedDayOffset = 0x16c;\n                  }\n                }\n                else {\n                  updatedDayOffset = 0x16d;\n                }\n              }\n              else {\n                updatedDayOffset = 0x16c;\n              }\n            }\n            else {\n              if ((yearValue & 3) == 0) {\n                if (yearValue == (yearValue / 100) * 100) {\n                  dayOffset = 0x16d;\n                  if ((yearValue + 0x76c) % 400 == 0) {\n                    dayOffset = 0x16e;\n                  }\n                }\n                else {\n                  dayOffset = 0x16e;\n                }\n              }\n              else {\n                dayOffset = 0x16d;\n              }\n              if (dayOffset <= updatedDayOffset) {\n                updatedDayOffset = updatedDayOffset - dayOffset;\n              }\n            }\n            dateValues[7] = updatedDayOffset;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((updatedDayOffset - tempVar2) - (uint)(daysValue < tempVar)) < 0 !=\n          (SBORROW4(updatedDayOffset,tempVar2) != SBORROW4(updatedDayOffset - tempVar2,(uint)(daysValue < tempVar)))) {\nLAB_0000491e:\n        if ((int)((updatedDayOffset - dayOffset) - (uint)(daysValue < tempVar4)) < 0 ==\n            (SBORROW4(updatedDayOffset,dayOffset) != SBORROW4(updatedDayOffset - dayOffset,(uint)(daysValue < tempVar4))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)monthValue) {\n        tempVar4 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempVar4 = hasLeapYear;\n      if (hasLeapYear != 1) goto LAB_00004934;\n    }\n    yearValue = tzInfo[0x14];\n    updatedDayOffset = (uint)totalDays + yearValue;\n    dayOffset = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)yearValue >> 0x1f) + (uint)CARRY4((uint)totalDays,yearValue);\n    tempVar4 = 1;\n  }\n  __tz_unlock();\n  dateValues[8] = tempVar4;\n  dateValues[6] = (leapYearOffset + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(dayOffset,updatedDayOffset);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_000047e4",
                "param_1": "dateValues",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "tzInfo",
                "uVar4": "tempVar",
                "iVar5": "dayOffset",
                "iVar6": "tempVar2",
                "iVar7": "updatedDayOffset",
                "uVar8": "tempVar3",
                "uVar9": "tempVar4",
                "uVar10": "tempVar5",
                "iVar11": "leapYearOffset",
                "uVar12": "yearValue",
                "uVar13": "hasLeapYear",
                "uVar14": "monthValue",
                "uVar15": "daysValue",
                "bVar16": "isLeapYear"
            },
            "calling": [
                "rtc_set_time",
                "rtc_set_alarm"
            ],
            "called": [
                "_tzset_unlocked",
                "__tz_unlock",
                "__gettzinfo",
                "__tz_lock",
                "__tzcalc_limits",
                "validate_structure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "FUNC_00004b34",
            "code": "\nvoid FUNC_00004b34(undefined4 *param_1,int param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int **extraout_r1;\n  int **ppiVar2;\n  int **ppiVar3;\n  int **ppiVar4;\n  int **ppiVar5;\n  bool bVar6;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  ppiVar5 = (int **)(param_2 + -4);\n  if (*(int *)(param_2 + -4) < 0) {\n    ppiVar5 = (int **)((int)ppiVar5 + *(int *)(param_2 + -4));\n  }\n  __malloc_lock();\n  ppiVar3 = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    ppiVar5[1] = (int *)0x0;\n    ppiVar2 = extraout_r1;\n    DAT_1fff0db4 = ppiVar5;\n  }\n  else {\n    ppiVar4 = DAT_1fff0db4;\n    if (ppiVar5 < DAT_1fff0db4) {\n      ppiVar2 = (int **)*ppiVar5;\n      ppiVar3 = (int **)((int)ppiVar5 + (int)ppiVar2);\n      bVar6 = DAT_1fff0db4 == ppiVar3;\n      if (bVar6) {\n        ppiVar3 = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      ppiVar5[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = ppiVar5;\n      if (bVar6) {\n        ppiVar3 = (int **)((int)ppiVar3 + (int)ppiVar2);\n        *ppiVar5 = (int *)ppiVar3;\n      }\n    }\n    else {\n      do {\n        ppiVar3 = ppiVar4;\n        ppiVar4 = (int **)ppiVar3[1];\n        if (ppiVar4 == (int **)0x0) break;\n      } while (ppiVar4 <= ppiVar5);\n      ppiVar2 = (int **)*ppiVar3;\n      if ((int **)((int)ppiVar3 + (int)ppiVar2) == ppiVar5) {\n        ppiVar2 = (int **)((int)ppiVar2 + (int)*ppiVar5);\n        *ppiVar3 = (int *)ppiVar2;\n        if (ppiVar4 == (int **)((int)ppiVar3 + (int)ppiVar2)) {\n          piVar1 = *ppiVar4;\n          ppiVar3[1] = ppiVar4[1];\n          ppiVar2 = (int **)((int)ppiVar2 + (int)piVar1);\n          *ppiVar3 = (int *)ppiVar2;\n        }\n      }\n      else if (ppiVar5 < (int **)((int)ppiVar3 + (int)ppiVar2)) {\n        *param_1 = 0xc;\n      }\n      else {\n        ppiVar2 = (int **)((int)ppiVar5 + (int)*ppiVar5);\n        bVar6 = ppiVar4 == ppiVar2;\n        if (bVar6) {\n          ppiVar2 = (int **)*ppiVar4;\n          ppiVar4 = (int **)ppiVar4[1];\n        }\n        ppiVar5[1] = (int *)ppiVar4;\n        if (bVar6) {\n          ppiVar2 = (int **)((int)ppiVar2 + (int)*ppiVar5);\n          *ppiVar5 = (int *)ppiVar2;\n        }\n        ppiVar3[1] = (int *)ppiVar5;\n      }\n    }\n  }\n  __malloc_unlock(param_1,ppiVar2,ppiVar3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "FUNC_00004b34"
            },
            "calling": [
                "__ssrefill_r",
                "__srefill_r",
                "free",
                "__swsetup_r",
                "_realloc_r",
                "__sflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "FUNC_00004bd0",
            "code": "\nuint FUNC_00004bd0(undefined4 *param_1,uint param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *puVar1;\n  int iVar2;\n  uint uVar3;\n  uint *puVar4;\n  uint uVar5;\n  \n  uVar5 = (param_2 + 3 & 0xfffffffc) + 8;\n  if (uVar5 < 0xc) {\n    uVar5 = 0xc;\n  }\n  if (((int)uVar5 < 0) || (uVar5 < param_2)) {\n    *param_1 = 0xc;\n  }\n  else {\n    __malloc_lock();\n    puVar1 = DAT_1fff0db4;\n    for (puVar4 = DAT_1fff0db4; puVar4 != (uint *)0x0; puVar4 = (uint *)puVar4[1]) {\n      uVar3 = *puVar4 - uVar5;\n      if (-1 < (int)uVar3) {\n        if (0xb < uVar3) {\n          *puVar4 = uVar3;\n          puVar4 = (uint *)((int)puVar4 + uVar3);\n          goto LAB_00004c34;\n        }\n        if (puVar1 == puVar4) {\n          DAT_1fff0db4 = (uint *)puVar4[1];\n        }\n        if (puVar1 != puVar4) {\n          puVar1[1] = (uint)(uint *)puVar4[1];\n        }\n        goto LAB_00004c42;\n      }\n      puVar1 = puVar4;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = _sbrk_r(param_1,0,puVar1,0,param_4);\n    }\n    puVar1 = (uint *)_sbrk_r(param_1,uVar5);\n    if ((puVar1 != (uint *)0xffffffff) &&\n       ((puVar4 = (uint *)((int)puVar1 + 3U & 0xfffffffc), puVar1 == puVar4 ||\n        (iVar2 = _sbrk_r(param_1,(int)puVar4 - (int)puVar1), iVar2 != -1)))) {\nLAB_00004c34:\n      *puVar4 = uVar5;\nLAB_00004c42:\n      __malloc_unlock(param_1);\n      uVar5 = (int)puVar4 + 0xbU & 0xfffffff8;\n      iVar2 = uVar5 - (int)(puVar4 + 1);\n      if (iVar2 == 0) {\n        return uVar5;\n      }\n      *(uint *)((int)puVar4 + iVar2) = (int)(puVar4 + 1) - uVar5;\n      return uVar5;\n    }\n    *param_1 = 0xc;\n    __malloc_unlock(param_1);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "FUNC_00004bd0"
            },
            "calling": [
                "_tzset_unlocked",
                "__smakebuf_r",
                "__submore",
                "_realloc_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "print_formatted_text_00004c84",
            "code": "\nvoid printFormattedText_00004c84(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  dword offset;\n  undefined4 format;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  format = formatString;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  _vfprintf_r(offset,*(undefined4 *)(offset + 8),formatString,&arg1Copy,format,&arg1Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "print_formatted_text_00004c84",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "dVar1": "offset",
                "uVar2": "format",
                "uStack_c": "arg1Copy",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "cpu_print_last_instruction",
                "handle_input_line",
                "ps",
                "_print_time",
                "phydat_dump",
                "write",
                "list",
                "probe",
                "core_panic",
                "_saul",
                "read",
                "_rtc_handler",
                "print_help"
            ],
            "called": [
                "_vfprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "write_byte_00004cb4",
            "code": "\nuint write_byte_00004cb4(uint input_byte)\n\n{\n  dword elf_relocation_offset;\n  undefined4 *relocation_entry;\n  uint remaining_bytes;\n  undefined *data_ptr;\n  undefined4 register_4;\n  undefined4 register_5;\n  \n  elf_relocation_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  relocation_entry = *(undefined4 **)(elf_relocation_offset + 8);\n  if ((elf_relocation_offset != 0) && (*(int *)(elf_relocation_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (relocation_entry == &DAT_000079b8) {\n    relocation_entry = *(undefined4 **)(elf_relocation_offset + 4);\n  }\n  else if (relocation_entry == (undefined4 *)&DAT_000079d8) {\n    relocation_entry = *(undefined4 **)(elf_relocation_offset + 8);\n  }\n  else if (relocation_entry == (undefined4 *)&DAT_00007998) {\n    relocation_entry = *(undefined4 **)(elf_relocation_offset + 0xc);\n  }\n  if ((-1 < (int)(relocation_entry[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(relocation_entry + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(relocation_entry[0x16]);\n  }\n  remaining_bytes = relocation_entry[2] - 1;\n  relocation_entry[2] = remaining_bytes;\n  if (((int)remaining_bytes < 0) && (((int)remaining_bytes < (int)relocation_entry[6] || (remaining_bytes = input_byte & 0xff, remaining_bytes == 10))))\n  {\n    input_byte = __swbuf_r(elf_relocation_offset,input_byte,relocation_entry,remaining_bytes,register_4,register_5);\n  }\n  else {\n    data_ptr = (undefined *)*relocation_entry;\n    *relocation_entry = data_ptr + 1;\n    *data_ptr = (char)input_byte;\n    input_byte = input_byte & 0xff;\n  }\n  if ((-1 < (int)(relocation_entry[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(relocation_entry + 3) << 0x16))) {\n    __retarget_lock_release_recursive(relocation_entry[0x16]);\n  }\n  return input_byte;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "write_byte_00004cb4",
                "param_1": "input_byte",
                "dVar1": "elf_relocation_offset",
                "puVar2": "relocation_entry",
                "uVar3": "remaining_bytes",
                "puVar4": "data_ptr",
                "unaff_r4": "register_4",
                "unaff_r5": "register_5"
            },
            "calling": [
                "_putchar"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "read_from_file_00004db8",
            "code": "\nundefined4 read_from_file_00004db8(int file_descriptor)\n\n{\n  char current_char;\n  dword elf_base_address;\n  int result;\n  char *current_string_char;\n  char **elf_section;\n  undefined4 return_value;\n  char *current_string_char2;\n  \n  elf_base_address = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  elf_section = *(char ***)(elf_base_address + 8);\n  if (*(int *)(elf_base_address + 0x18) == 0) {\n    __sinit(elf_base_address);\n  }\n  if (elf_section == (char **)&DAT_000079b8) {\n    elf_section = *(char ***)(elf_base_address + 4);\n  }\n  else if (elf_section == (char **)&DAT_000079d8) {\n    elf_section = *(char ***)(elf_base_address + 8);\n  }\n  else if (elf_section == (char **)&DAT_00007998) {\n    elf_section = *(char ***)(elf_base_address + 0xc);\n  }\n  if ((-1 < (int)elf_section[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(elf_section + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(elf_section[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(elf_section + 3) << 0x1c) < 0) && (elf_section[4] != (char *)0x0)) ||\n     (result = __swsetup_r(elf_base_address,elf_section), result == 0)) {\n    current_string_char2 = (char *)(file_descriptor + -1);\n    do {\n      while( true ) {\n        current_string_char2 = current_string_char2 + 1;\n        current_char = *current_string_char2;\n        current_string_char = elf_section[2] + -1;\n        elf_section[2] = current_string_char;\n        if (current_char == '\\0') {\n          if (-1 < (int)current_string_char) {\n            current_string_char2 = *elf_section;\n            return_value = 10;\n            *elf_section = current_string_char2 + 1;\n            *current_string_char2 = '\\n';\n            goto LAB_00004d64;\n          }\n          result = __swbuf_r(elf_base_address,10,elf_section);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)current_string_char < 0) && (((int)current_string_char < (int)elf_section[6] || (current_char == '\\n')))) break;\n        current_string_char = *elf_section;\n        *elf_section = current_string_char + 1;\n        *current_string_char = current_char;\n      }\n      result = __swbuf_r(elf_base_address,current_char,elf_section);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)elf_section[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(elf_section + 3) << 0x16))) {\n    __retarget_lock_release_recursive(elf_section[0x16]);\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "read_from_file_00004db8",
                "param_1": "file_descriptor",
                "cVar1": "current_char",
                "dVar2": "elf_base_address",
                "iVar3": "result",
                "pcVar4": "current_string_char",
                "ppcVar5": "elf_section",
                "uVar6": "return_value",
                "pcVar7": "current_string_char2"
            },
            "calling": [
                "handle_input_line",
                "main",
                "phydat_dump",
                "_rtc_settime",
                "_rtc_usage",
                "write",
                "list",
                "_rtc_setalarm",
                "read",
                "_rtc_gettime",
                "_rtc_getalarm",
                "probe_all",
                "_alarm_handler",
                "print_help"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 ptr,int offset)\n\n{\n  int readResult;\n  uint newValue;\n  bool isReadSuccessful;\n  \n  readResult = _read_r(ptr,(int)*(short *)(offset + 0xe));\n  isReadSuccessful = -1 < readResult;\n  if (isReadSuccessful) {\n    newValue = *(int *)(offset + 0x54) + readResult;\n  }\n  else {\n    newValue = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (isReadSuccessful) {\n    *(uint *)(offset + 0x54) = newValue;\n  }\n  if (!isReadSuccessful) {\n    *(short *)(offset + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "ptr",
                "param_2": "offset",
                "iVar1": "readResult",
                "uVar2": "newValue",
                "bVar3": "isReadSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "write_to_uart_00004dee",
            "code": "\nundefined4 write_to_uart_00004dee(undefined4 file_descriptor,int buffer,undefined4 data,undefined4 size)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(buffer + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(buffer + 0xe),0,2);\n  }\n  *(ushort *)(buffer + 0xc) = *(ushort *)(buffer + 0xc) & 0xefff;\n  result = uart_stdio_write(data,size);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "write_to_uart_00004dee",
                "param_1": "file_descriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "size",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "uart_stdio_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_file_pointer_00004e26",
            "code": "\nvoid updateFilePointer_00004e26(undefined4 fileDescriptor,int dataBuffer)\n\n{\n  int seekResult;\n  ushort updatedFlag;\n  bool isSeekError;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(dataBuffer + 0xe));\n  isSeekError = seekResult == -1;\n  if (isSeekError) {\n    updatedFlag = *(ushort *)(dataBuffer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataBuffer + 0x54) = seekResult;\n    updatedFlag = *(ushort *)(dataBuffer + 0xc) | 0x1000;\n  }\n  if (isSeekError) {\n    *(ushort *)(dataBuffer + 0xc) = updatedFlag;\n  }\n  if (!isSeekError) {\n    *(ushort *)(dataBuffer + 0xc) = updatedFlag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_file_pointer_00004e26",
                "param_1": "fileDescriptor",
                "param_2": "dataBuffer",
                "iVar1": "seekResult",
                "uVar2": "updatedFlag",
                "bVar3": "isSeekError"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compareByteArrays_00004e52(byte *byteArray1,byte *byteArray2)\n\n{\n  byte currentByte;\n  uint byte1;\n  bool isMatching;\n  \n  do {\n    byte1 = (uint)*byteArray1;\n    currentByte = *byteArray2;\n    isMatching = byte1 == 1;\n    if (byte1 != 0) {\n      isMatching = byte1 == currentByte;\n    }\n    byteArray1 = byteArray1 + 1;\n    byteArray2 = byteArray2 + 1;\n  } while (isMatching);\n  return byte1 - currentByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "byteArray1",
                "param_2": "byteArray2",
                "bVar1": "currentByte",
                "uVar2": "byte1",
                "bVar3": "isMatching"
            },
            "calling": [
                "handle_input_line",
                "_saul",
                "_tzset_unlocked",
                "read",
                "find_handler",
                "strcmp"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_bytes_00004e66",
            "code": "\nint compareBytes_00004e66(byte *buffer,int startPosition,int length)\n\n{\n  byte *currentByte;\n  int difference;\n  byte *nextByte;\n  uint currentValue;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    nextByte = (byte *)(startPosition + -1);\n    currentByte = buffer;\n    do {\n      currentValue = (uint)*currentByte;\n      nextByte = nextByte + 1;\n      if ((currentValue != *nextByte) || (currentByte + 1 == buffer + length)) break;\n      currentByte = currentByte + 1;\n    } while (currentValue != 0);\n    difference = currentValue - *nextByte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "param_1": "buffer",
                "param_2": "startPosition",
                "param_3": "length",
                "pbVar1": "currentByte",
                "iVar2": "difference",
                "pbVar3": "nextByte",
                "uVar4": "currentValue"
            },
            "calling": [
                "_findenv_r",
                "_rtc_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parseInteger_00004f84(byte *inputString,byte **outputPointer,uint base)\n\n{\n  uint parsedInteger;\n  uint currentChar;\n  uint isNegative;\n  uint digitValue;\n  int comparisonResult;\n  uint maxIntegerValue;\n  uint quotient;\n  byte *currentPtr;\n  byte *nextPtr;\n  \n  nextPtr = inputString;\n  do {\n    currentPtr = nextPtr;\n    nextPtr = currentPtr + 1;\n    currentChar = (uint)*currentPtr;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextPtr;\n    isNegative = 1;\n    nextPtr = currentPtr + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextPtr;\n    nextPtr = currentPtr + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextPtr & 0xdf) == 0x58) {\n    currentChar = (uint)nextPtr[1];\n    base = 0x10;\n    nextPtr = nextPtr + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxIntegerValue = isNegative + 0x7fffffff;\n  comparisonResult = 0;\n  quotient = maxIntegerValue / base;\n  parsedInteger = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (comparisonResult != -1) {\n      if ((quotient < parsedInteger) || ((quotient == parsedInteger && ((int)(maxIntegerValue - base * quotient) < (int)digitValue)))) {\n        comparisonResult = -1;\n      }\n      else {\n        parsedInteger = parsedInteger * base + digitValue;\n        comparisonResult = 1;\n      }\n    }\n    currentChar = (uint)*nextPtr;\n    nextPtr = nextPtr + 1;\n  } while( true );\n  if (comparisonResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    parsedInteger = maxIntegerValue;\n    if (outputPointer == (byte **)0x0) {\n      return maxIntegerValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      parsedInteger = -parsedInteger;\n    }\n    if (outputPointer == (byte **)0x0) {\n      return parsedInteger;\n    }\n    if (comparisonResult == 0) goto LAB_00004f64;\n  }\n  inputString = nextPtr + -1;\nLAB_00004f64:\n  *outputPointer = inputString;\n  return parsedInteger;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "inputString",
                "param_2": "outputPointer",
                "param_3": "base",
                "uVar1": "parsedInteger",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "iVar5": "comparisonResult",
                "uVar6": "maxIntegerValue",
                "uVar7": "quotient",
                "pbVar8": "currentPtr",
                "pbVar9": "nextPtr"
            },
            "calling": [
                "_parse_time",
                "atoi"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *timezoneInfo;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int daysSinceStart;\n  uint *ptrDaysMonth;\n  int totalDays;\n  uint isLeap;\n  int i;\n  int dayOfWeekOffset;\n  uint isDivisibleBy400;\n  \n  timezoneInfo = (uint *)__gettzinfo();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    totalDays = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    timezoneInfo[1] = year;\n    isDivisibleBy400 = (uint)(year % 400 == 0);\n    ptrDaysMonth = timezoneInfo;\n    do {\n      dayOfWeek = ptrDaysMonth[5];\n      if (*(char *)(ptrDaysMonth + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            daysSinceStart = 0;\n          }\n          else {\n            daysSinceStart = 1;\n          }\n        }\n        else {\n          daysSinceStart = 0;\n        }\n        daysSinceStart = daysSinceStart + totalDays + dayOfWeek + -1;\n      }\n      else if (*(char *)(ptrDaysMonth + 2) == 'D') {\n        daysSinceStart = totalDays + dayOfWeek;\n      }\n      else {\n        isLeap = isDivisibleBy400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeap = 1;\n        }\n        i = 0;\n        daysSinceStart = totalDays;\n        while( true ) {\n          i = i + 1;\n          if ((int)ptrDaysMonth[3] <= i) break;\n          daysSinceStart = daysSinceStart + *(int *)(&UNK_00007b98 + i * 4 + isLeap * 0x30);\n        }\n        dayOfWeekOffset = dayOfWeek - (daysSinceStart + 4U) % 7;\n        if (dayOfWeekOffset < 0) {\n          dayOfWeekOffset = dayOfWeekOffset + 7;\n        }\n        for (dayOfWeekOffset = (ptrDaysMonth[4] - 1) * 7 + dayOfWeekOffset;\n            *(int *)(&UNK_00007b98 + i * 4 + isLeap * 0x30) <= dayOfWeekOffset; dayOfWeekOffset = dayOfWeekOffset + -7) {\n        }\n        daysSinceStart = daysSinceStart + dayOfWeekOffset;\n      }\n      dayOfWeek = ptrDaysMonth[10] + daysSinceStart * 0x15180 + ptrDaysMonth[6];\n      ptrDaysMonth[8] = dayOfWeek;\n      ptrDaysMonth[9] = (int)dayOfWeek >> 0x1f;\n      ptrDaysMonth = ptrDaysMonth + 10;\n    } while (timezoneInfo + 0x14 != ptrDaysMonth);\n    dayOfWeek = timezoneInfo[9];\n    isDivisibleBy400 = timezoneInfo[0x13];\n    *timezoneInfo = (uint)((int)((dayOfWeek - isDivisibleBy400) - (uint)(timezoneInfo[8] < timezoneInfo[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isDivisibleBy400) !=\n                    SBORROW4(dayOfWeek - isDivisibleBy400,(uint)(timezoneInfo[8] < timezoneInfo[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "timezoneInfo",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "daysSinceStart",
                "puVar5": "ptrDaysMonth",
                "iVar6": "totalDays",
                "uVar7": "isLeap",
                "iVar8": "i",
                "iVar9": "dayOfWeekOffset",
                "uVar10": "isDivisibleBy400"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime"
            ],
            "called": [
                "__gettzinfo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_of_data_000050e8",
            "code": "\nundefined * get_memory_address_of_data_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_of_data_000050e8"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "FUNC_000050f4",
            "code": "\nundefined * FUNC_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "FUNC_000050f4"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_time_zone_info_00005100",
            "code": "\nvoid parseTimeZoneInfo_00005100(void)\n\n{\n  dword offsetIndex;\n  int tzInfoHandle;\n  char *envVar;\n  int strCmpResult;\n  int scanResult;\n  undefined timezoneType;\n  char *scanStr;\n  bool isFirstTimezone;\n  ushort *timezoneHours;\n  int *scanCount;\n  ushort *timezoneMinutes;\n  int *scanCount2;\n  ushort hours1;\n  ushort minutes1;\n  ushort seconds1;\n  ushort hours2;\n  ushort minutes2;\n  ushort seconds2;\n  int scanResult;\n  char *scanResultsArr [2];\n  \n  offsetIndex = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  tzInfoHandle = __gettzinfo();\n  envVar = (char *)_getenv_r(offsetIndex,&DAT_00007a5c);\n  if (envVar == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = envVar;\n    DAT_1fff0ddc = envVar;\n    free(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (strCmpResult = strcmp(), strCmpResult != 0)) {\n    free(DAT_1fff0dd4);\n    strCmpResult = strlen(envVar);\n    DAT_1fff0dd4 = _malloc_r(offsetIndex,strCmpResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      strcpy(DAT_1fff0dd4,envVar);\n    }\n    if (*envVar == ':') {\n      envVar = envVar + 1;\n    }\n    strCmpResult = siscanf(envVar,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&scanResult);\n    if (0 < strCmpResult) {\n      scanStr = envVar + scanResult;\n      if (envVar[scanResult] == '-') {\n        scanStr = scanStr + 1;\n        strCmpResult = -1;\n      }\n      else {\n        if (envVar[scanResult] == '+') {\n          scanStr = scanStr + 1;\n        }\n        strCmpResult = 1;\n      }\n      minutes1 = 0;\n      seconds1 = 0;\n      timezoneHours = &minutes1;\n      scanCount = &scanResult;\n      timezoneMinutes = &seconds1;\n      scanCount2 = &scanResult;\n      scanResult = siscanf(scanStr,\"%hu%n:%hu%n:%hu%n\",&hours1,&scanResult,&minutes1,&scanResult,&seconds1,\n                      &scanResult);\n      if (0 < scanResult) {\n        *(uint *)(tzInfoHandle + 0x28) =\n             ((uint)hours1 * 0xe10 + (uint)minutes1 * 0x3c + (uint)seconds1) * strCmpResult;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        scanStr = scanStr + scanResult;\n        strCmpResult = siscanf(scanStr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&scanResult,timezoneHours,scanCount,timezoneMinutes,\n                        scanCount2);\n        if (strCmpResult < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(tzInfoHandle + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          envVar = scanStr + scanResult;\n          if (scanStr[scanResult] == '-') {\n            envVar = envVar + 1;\n            strCmpResult = -1;\n          }\n          else {\n            if (scanStr[scanResult] == '+') {\n              envVar = envVar + 1;\n            }\n            strCmpResult = 1;\n          }\n          hours1 = 0;\n          minutes1 = 0;\n          seconds1 = 0;\n          scanResult = 0;\n          scanResult = siscanf(envVar,\"%hu%n:%hu%n:%hu%n\",&hours1,&scanResult,&minutes1,&scanResult,\n                          &seconds1,&scanResult);\n          if (scanResult < 1) {\n            strCmpResult = *(int *)(tzInfoHandle + 0x28) + -0xe10;\n          }\n          else {\n            strCmpResult = ((uint)hours1 * 0xe10 + (uint)minutes1 * 0x3c + (uint)seconds1) * strCmpResult;\n          }\n          *(int *)(tzInfoHandle + 0x50) = strCmpResult;\n          envVar = envVar + scanResult;\n          isFirstTimezone = false;\n          strCmpResult = tzInfoHandle;\n          while( true ) {\n            if (*envVar == ',') {\n              envVar = envVar + 1;\n            }\n            if (*envVar == 'M') {\n              scanResult = siscanf(envVar,\"M%hu%n.%hu%n.%hu%n\",&hours2,&scanResult,&minutes2,&scanResult,\n                              &seconds2,&scanResult);\n              if (scanResult != 3) {\n                return;\n              }\n              if (0xb < hours2 - 1) {\n                return;\n              }\n              if (4 < minutes2 - 1) {\n                return;\n              }\n              if (6 < seconds2) {\n                return;\n              }\n              *(uint *)(strCmpResult + 0xc) = (uint)hours2;\n              *(uint *)(strCmpResult + 0x10) = (uint)minutes2;\n              *(undefined *)(strCmpResult + 8) = 0x4d;\n              *(uint *)(strCmpResult + 0x14) = (uint)seconds2;\n              scanStr = envVar + scanResult;\n            }\n            else {\n              if (*envVar == 'J') {\n                envVar = envVar + 1;\n                timezoneType = 0x4a;\n              }\n              else {\n                timezoneType = 0x44;\n              }\n              seconds2 = strtoul(envVar,scanResultsArr,10);\n              scanStr = scanResultsArr[0];\n              if (scanResultsArr[0] == envVar) {\n                if (isFirstTimezone) {\n                  *(undefined *)(tzInfoHandle + 0x30) = 0x4d;\n                  *(undefined4 *)(tzInfoHandle + 0x34) = 0xb;\n                  *(undefined4 *)(tzInfoHandle + 0x38) = 1;\n                  *(undefined4 *)(tzInfoHandle + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(tzInfoHandle + 8) = 0x4d;\n                  *(undefined4 *)(tzInfoHandle + 0xc) = 3;\n                  *(undefined4 *)(tzInfoHandle + 0x10) = 2;\n                  *(undefined4 *)(tzInfoHandle + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(strCmpResult + 8) = timezoneType;\n                *(uint *)(strCmpResult + 0x14) = (uint)seconds2;\n              }\n            }\n            hours1 = 2;\n            minutes1 = 0;\n            seconds1 = 0;\n            scanResult = 0;\n            if (*scanStr == '/') {\n              siscanf(scanStr,&DAT_00007a85,&hours1,&scanResult,&minutes1,&scanResult,&seconds1,\n                      &scanResult);\n            }\n            *(uint *)(strCmpResult + 0x18) =\n                 (uint)hours1 * 0xe10 + (uint)minutes1 * 0x3c + (uint)seconds1;\n            strCmpResult = strCmpResult + 0x28;\n            envVar = scanStr + scanResult;\n            if (isFirstTimezone) break;\n            isFirstTimezone = true;\n          }\n          __tzcalc_limits(*(undefined4 *)(tzInfoHandle + 4));\n          DAT_1fff0ddc = *(char **)(tzInfoHandle + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(tzInfoHandle + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_time_zone_info_00005100",
                "dVar1": "offsetIndex",
                "iVar2": "tzInfoHandle",
                "pcVar3": "envVar",
                "iVar4": "strCmpResult",
                "iVar5": "scanResult",
                "uVar6": "timezoneType",
                "pcVar7": "scanStr",
                "bVar8": "isFirstTimezone",
                "puVar9": "timezoneHours",
                "piVar10": "scanCount",
                "puVar11": "timezoneMinutes",
                "piVar12": "scanCount2",
                "local_3c": "hours1",
                "local_3a": "minutes1",
                "local_38": "seconds1",
                "local_36": "hours2",
                "local_34": "minutes2",
                "local_32": "seconds2",
                "local_30": "scanResult",
                "local_2c": "scanResultsArr"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "_getenv_r",
                "strlen",
                "strcpy",
                "siscanf",
                "__gettzinfo",
                "free",
                "_malloc_r",
                "strtoul",
                "strcmp",
                "__tzcalc_limits"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_00005404",
            "code": "\nuint process_00005404(int value1,uint value2,int *array,undefined4 value4)\n\n{\n  int temp1;\n  uint temp2;\n  undefined *ptr;\n  \n  if ((value1 != 0) && (*(int *)(value1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (array == &DAT_000079b8) {\n    array = *(int **)(value1 + 4);\n  }\n  else if (array == (int *)&DAT_000079d8) {\n    array = *(int **)(value1 + 8);\n  }\n  else if (array == (int *)&DAT_00007998) {\n    array = *(int **)(value1 + 0xc);\n  }\n  array[2] = array[6];\n  temp2 = (uint)*(ushort *)(array + 3);\n  temp1 = temp2 << 0x1c;\n  if (((temp1 < 0) && (temp2 = array[4], temp2 != 0)) ||\n     (temp1 = __swsetup_r(value1,array,temp1,temp2,value4), temp1 == 0)) {\n    temp1 = *array - array[4];\n    value2 = value2 & 0xff;\n    if ((temp1 < array[5]) || (temp1 = _fflush_r(value1,array), temp1 == 0)) {\n      array[2] = array[2] + -1;\n      ptr = (undefined *)*array;\n      *array = (int)(ptr + 1);\n      *ptr = (char)value2;\n      if (array[5] != temp1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(array + 3) << 0x1f)) {\n          return value2;\n        }\n        if (value2 != 10) {\n          return value2;\n        }\n      }\n      temp1 = _fflush_r(value1,array);\n      if (temp1 == 0) {\n        return value2;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_00005404",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "array",
                "param_4": "value4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "puVar3": "ptr"
            },
            "calling": [
                "puts",
                "putchar",
                "__sfputc_r"
            ],
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *outputParam,undefined4 *inputParam)\n\n{\n  ushort tempVar1;\n  dword offset;\n  ushort tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputParam == &DAT_000079b8) {\n    inputParam = *(undefined4 **)(offset + 4);\n  }\n  else if (inputParam == (undefined4 *)&DAT_000079d8) {\n    inputParam = *(undefined4 **)(offset + 8);\n  }\n  else if (inputParam == (undefined4 *)&DAT_00007998) {\n    inputParam = *(undefined4 **)(offset + 0xc);\n  }\n  tempVar3 = (uint)*(ushort *)(inputParam + 3);\n  tempVar2 = *(ushort *)(inputParam + 3);\n  if (-1 < (int)(tempVar3 << 0x1c)) {\n    if (-1 < (int)(tempVar3 << 0x1b)) {\n      *outputParam = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(tempVar3 << 0x1d) < 0) {\n      if ((undefined4 *)inputParam[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputParam[0xd] != inputParam + 0x11) {\n          _free_r(outputParam);\n        }\n        inputParam[0xd] = 0;\n      }\n      *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) & 0xffdb;\n      inputParam[1] = 0;\n      *inputParam = inputParam[4];\n    }\n    *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) | 8;\n  }\n  if ((inputParam[4] == 0) && ((*(ushort *)(inputParam + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputParam,inputParam);\n  }\n  tempVar1 = *(ushort *)(inputParam + 3);\n  tempVar3 = (uint)tempVar1;\n  tempVar2 = *(ushort *)(inputParam + 3);\n  tempVar4 = tempVar3 & 1;\n  if ((tempVar1 & 1) == 0) {\n    if (-1 < (int)(tempVar3 << 0x1e)) {\n      tempVar4 = inputParam[5];\n    }\n    inputParam[2] = tempVar4;\n  }\n  else {\n    inputParam[2] = 0;\n    inputParam[6] = -inputParam[5];\n  }\n  if (inputParam[4] != 0) {\n    return 0;\n  }\n  if ((tempVar1 & 0x80) == 0) {\n    return tempVar3 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputParam + 3) = tempVar2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "uVar1": "tempVar1",
                "dVar2": "offset",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4"
            },
            "calling": [
                "__swbuf_r",
                "_vfprintf_r",
                "puts"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "calculate_division_and_remainder_00005584",
            "code": "\nvoid calculateDivisionAndRemainder_00005584(uint *divisionAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *divisionAndRemainder = quotient;\n  divisionAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "calculate_division_and_remainder_00005584",
                "param_1": "divisionAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "validate_structure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_env_variable_0000562c",
            "code": "\nint findEnvVariable_0000562c(undefined4 param_1,char *envString,int *resultIndex)\n\n{\n  char currentChar;\n  int *envArray;\n  int strComparison;\n  char *currentPos;\n  int *currentEnv;\n  int envStringOffset;\n  \n  __env_lock();\n  currentPos = envString;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentChar = *currentPos;\n      if (currentChar == '\\0') {\n        envStringOffset = (int)currentPos - (int)envString;\n        envArray = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          currentEnv = envArray;\n          if (*currentEnv == 0) break;\n          strComparison = strncmp(*currentEnv,envString,envStringOffset);\n          envArray = currentEnv + 1;\n          if ((strComparison == 0) && (strComparison = *currentEnv, *(char *)(strComparison + envStringOffset) == '=')) {\n            *resultIndex = (int)((int)currentEnv - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            __env_unlock(param_1);\n            return strComparison + envStringOffset + 1;\n          }\n        }\n        break;\n      }\n      currentPos = currentPos + 1;\n    } while (currentChar != '=');\n  }\n  __env_unlock(param_1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_env_variable_0000562c",
                "param_2": "envString",
                "param_3": "resultIndex",
                "cVar1": "currentChar",
                "piVar2": "envArray",
                "iVar3": "strComparison",
                "pcVar4": "currentPos",
                "piVar5": "currentEnv",
                "iVar6": "envStringOffset"
            },
            "calling": [
                "_getenv_r"
            ],
            "called": [
                "__env_unlock",
                "__env_lock",
                "strncmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_environment_000056a0",
            "code": "\nvoid find_environment_000056a0(undefined4 input_param,undefined4 env_var1,undefined4 env_var2,undefined4 output_param)\n\n{\n  undefined4 env_var1_copy;\n  undefined4 env_var2_copy;\n  \n  env_var1_copy = env_var1;\n  env_var2_copy = env_var2;\n  _findenv_r(input_param,env_var1,&env_var1_copy,output_param,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_environment_000056a0",
                "param_1": "input_param",
                "param_2": "env_var1",
                "param_3": "env_var2",
                "param_4": "output_param",
                "uStack_c": "env_var1_copy",
                "uStack_8": "env_var2_copy"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_findenv_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nunsignedInt getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "unsignedInt"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime",
                "__tzcalc_limits"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "determine_file_permissions_000056b8",
            "code": "\nundefined4 determineFilePermissions_000056b8(undefined4 fileDescriptor,int fileInformation,undefined4 *permissionFlag,uint *isExecutable)\n\n{\n  int fileStatus;\n  undefined4 permissionCode;\n  undefined statBuffer [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileInformation + 0xe) < 0) ||\n     (fileStatus = _fstat_r(fileDescriptor,(int)*(short *)(fileInformation + 0xe),statBuffer), fileStatus < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileInformation + 0xc) << 0x18) < 0) {\n      permissionCode = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  permissionCode = 0x400;\nLAB_000056f8:\n  *permissionFlag = permissionCode;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "determine_file_permissions_000056b8",
                "param_1": "fileDescriptor",
                "param_2": "fileInformation",
                "param_3": "permissionFlag",
                "param_4": "isExecutable",
                "iVar1": "fileStatus",
                "uVar2": "permissionCode",
                "auStack_68": "statBuffer",
                "local_64": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int context,int *data)\n\n{\n  ushort result;\n  int allocatedMemory;\n  int param1Value;\n  int *param2Value;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    param1Value = context;\n    param2Value = data;\n    result = __swhatbuf_r(context,data,&param1Value,&param2Value);\n    allocatedMemory = _malloc_r(context,param1Value);\n    if (allocatedMemory != 0) {\n      *(undefined **)(context + 0x28) = &DAT_0000423d;\n      *data = allocatedMemory;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[5] = param1Value;\n      data[4] = allocatedMemory;\n      if ((param2Value != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(context,(int)*(short *)((int)data + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = result | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "context",
                "param_2": "data",
                "uVar1": "result",
                "iVar2": "allocatedMemory",
                "local_18": "param1Value",
                "local_14": "param2Value"
            },
            "calling": [
                "__srefill_r",
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "free_elf32_rel_array_00005780",
            "code": "\nvoid freeElf32RelArray_00005780(undefined4 arg)\n\n{\n  _free_r(relArray[16].r_offset,arg);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "free_elf32_rel_array_00005780",
                "param_1": "arg",
                "Elf32_Rel_ARRAY_1fff0200": "relArray"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "acquire_recursive_lock_00005790",
            "code": "\nvoid acquire_recursive_lock_00005790(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "acquire_recursive_lock_00005790"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "release_recursive_lock_0000579c",
            "code": "\nvoid releaseRecursiveLock_0000579c(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "release_recursive_lock_0000579c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "write_character_000057a8",
            "code": "\nint writeCharacter_000057a8(undefined4 buffer,int character,undefined4 *stream)\n\n{\n  int remainingBytes;\n  undefined *currentByte;\n  \n  remainingBytes = stream[2] + -1;\n  stream[2] = remainingBytes;\n  if ((remainingBytes < 0) && ((remainingBytes < (int)stream[6] || (character == 10)))) {\n    remainingBytes = __swbuf_r();\n    return remainingBytes;\n  }\n  currentByte = (undefined *)*stream;\n  *stream = currentByte + 1;\n  *currentByte = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "write_character_000057a8",
                "param_1": "buffer",
                "param_2": "character",
                "param_3": "stream",
                "iVar1": "remainingBytes",
                "puVar2": "currentByte"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "write_to_stream_000057d2",
            "code": "\nint write_to_stream_000057d2(undefined4 stream,undefined4 buffer,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int remaining_length;\n  \n  end_of_data = data + length;\n  remaining_length = length;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*data,buffer,length,remaining_length);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "write_to_stream_000057d2",
                "param_1": "stream",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "remaining_length"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_printf_format_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parsePrintfFormat_000057f8(int device,undefined4 *format,byte *str,int *numArgs)\n\n{\n  int result;\n  int returnValue;\n  int *ptr;\n  bool isDigit;\n  byte *ptrByte;\n  int recursiveLock;\n  byte *currentChar;\n  int *argList;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int argWidth;\n  int totalChars;\n  byte specifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined zeroFlag;\n  undefined4 length;\n  \n  if ((device != 0) && (*(int *)(device + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format == &DAT_000079b8) {\n    format = *(undefined4 **)(device + 4);\n  }\n  else if (format == (undefined4 *)&DAT_000079d8) {\n    format = *(undefined4 **)(device + 8);\n  }\n  else if (format == (undefined4 *)&DAT_00007998) {\n    format = *(undefined4 **)(device + 0xc);\n  }\n  if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(format[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (result = __swsetup_r(device,format), result != 0)) {\n    if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16)))\n    {\n      __retarget_lock_release_recursive(format[0x16]);\n    }\n    return -1;\n  }\n  totalChars = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = str;\n  argList = numArgs;\nLAB_0000588e:\n  ptrByte = currentChar;\n  if (*ptrByte != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentChar = ptrByte + 1;\n  if (*ptrByte == 0x25) {\nLAB_0000589a:\n    result = (int)ptrByte - (int)str;\n    if (result != 0) {\n      returnValue = __sfputs_r(device,format,str,result);\n      if (returnValue == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(format[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n          __retarget_lock_release_recursive(format[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalChars;\n      }\n      totalChars = totalChars + result;\n    }\n    if (*ptrByte == 0) goto LAB_00005a06;\n    precision = -1;\n    width = 0;\n    flags = 0;\n    argWidth = 0;\n    zeroFlag = 0;\n    length = 0;\n    currentChar = ptrByte + 1;\n    while( true ) {\n      ptrByte = currentChar + 1;\n      result = memchr(\"#-0+ \",*currentChar,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      currentChar = ptrByte;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      zeroFlag = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      zeroFlag = 0x2b;\n    }\n    if (*currentChar == 0x2a) {\n      ptr = argList + 1;\n      argWidth = *argList;\n      argList = ptr;\n      if (argWidth < 0) {\n        argWidth = -argWidth;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isDigit = false;\n      result = argWidth;\n      ptrByte = currentChar;\n      while( true ) {\n        if (9 < *ptrByte - 0x30) break;\n        result = result * 10 + (*ptrByte - 0x30);\n        isDigit = true;\n        ptrByte = ptrByte + 1;\n      }\n      if (isDigit) {\n        argWidth = result;\n      }\n    }\n    if (*ptrByte == 0x2e) {\n      if (ptrByte[1] == 0x2a) {\n        precision = *argList;\n        if (precision < 0) {\n          precision = -1;\n        }\n        ptrByte = ptrByte + 2;\n        argList = argList + 1;\n      }\n      else {\n        isDigit = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          ptrByte = ptrByte + 1;\n          if (9 < *ptrByte - 0x30) break;\n          result = result * 10 + (*ptrByte - 0x30);\n          isDigit = true;\n        }\n        if (isDigit) {\n          precision = result;\n        }\n      }\n    }\n    result = memchr(&DAT_00007c02,*ptrByte,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      ptrByte = ptrByte + 1;\n    }\n    str = ptrByte + 1;\n    specifier = *ptrByte;\n    result = memchr(\"efgEFG\",specifier,6);\n    if (result == 0) {\n      recursiveLock = _printf_i(device,&flags,format,0x57d3,&argList);\n      if (recursiveLock == -1) goto LAB_00005a06;\n    }\n    else {\n      argList = (int *)(((int)argList + 7U & 0xfffffff8) + 8);\n    }\n    totalChars = totalChars + recursiveLock;\n    currentChar = str;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_printf_format_000057f8",
                "param_1": "device",
                "param_2": "format",
                "param_3": "str",
                "param_4": "numArgs",
                "iVar1": "result",
                "iVar2": "returnValue",
                "piVar3": "ptr",
                "bVar4": "isDigit",
                "pbVar5": "ptrByte",
                "unaff_r7": "recursiveLock",
                "pbVar6": "currentChar",
                "local_8c": "argList",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "width",
                "local_7c": "argWidth",
                "local_74": "totalChars",
                "local_70": "specifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "zeroFlag",
                "local_30": "length"
            },
            "calling": [
                "iprintf"
            ],
            "called": [
                "__sfputs_r",
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "memchr",
                "__sinit",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_required_size_00005a58",
            "code": "\nundefined4\ncalculateRequiredSize_00005a58(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int i;\n  undefined4 result;\n  int counter;\n  uint maxSize;\n  uint currentSize;\n  bool flag;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *output = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (i = 0; i < (int)(data[3] - *output); i = i + 1) {\n      counter = (*callback)(input,param,(int)data + 0x19,1);\n      if (counter == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n    maxSize = maxSize + 2;\n  }\n  i = (*callback)(input,param,(int)data + 0x43,maxSize);\n  if (i == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    maxSize = data[3];\n    flag = (*data & 6) == 4;\n    if (flag) {\n      maxSize = maxSize - *output;\n    }\n    if (flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    for (currentSize = 0; maxSize != currentSize; currentSize = currentSize + 1) {\n      i = (*callback)(input,param,(int)data + 0x1a,1);\n      if (i == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_required_size_00005a58",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "result",
                "iVar3": "counter",
                "uVar4": "maxSize",
                "uVar5": "currentSize",
                "bVar6": "flag"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "print_formatted_value_00005b34",
            "code": "\ncode * printFormattedValue_00005b34(undefined4 formatSpecifier,uint *outputBuffer,undefined4 additionalFlag,code *printerFunction,uint **inputData\n                   )\n\n{\n  bool isWithinRange;\n  byte outputSpecifier;\n  int resultCode;\n  code *outputPointer;\n  char *digits;\n  int printResult;\n  char *stringPointer;\n  uint valueTemp;\n  uint *inputPointer;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint stringLength;\n  char *outputEnd;\n  code *initialOutput;\n  \n  outputSpecifier = *(byte *)(outputBuffer + 6);\n  stringPointer = (char *)((int)outputBuffer + 0x43);\n  initialOutput = printerFunction;\n  if (0x78 < outputSpecifier) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)outputBuffer + 0x42) = outputSpecifier;\nLAB_00005bdc:\n    stringPointer = (char *)((int)outputBuffer + 0x42);\n    valueTemp = 1;\nLAB_00005d28:\n    outputBuffer[4] = valueTemp;\n    *(undefined *)((int)outputBuffer + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (outputSpecifier < 99) {\n    if (outputSpecifier == 0) goto LAB_00005d06;\n    if (outputSpecifier == 0x58) {\n      digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)outputBuffer + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(outputSpecifier) {\n  case 99:\n    valueTemp = **inputData;\n    *inputData = *inputData + 1;\n    *(char *)((int)outputBuffer + 0x42) = (char)valueTemp;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *outputBuffer;\n    inputPointer = *inputData;\n    if ((int)(base << 0x18) < 0) {\n      valueTemp = *inputPointer;\n      *inputData = inputPointer + 1;\n    }\n    else {\n      valueTemp = *inputPointer;\n      *inputData = inputPointer + 1;\n      if ((base & 0x40) != 0) {\n        valueTemp = (uint)(short)valueTemp;\n      }\n    }\n    if ((int)valueTemp < 0) {\n      valueTemp = -valueTemp;\n      *(undefined *)((int)outputBuffer + 0x43) = 0x2d;\n    }\n    digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*inputData;\n    base = *outputBuffer;\n    valueTemp = outputBuffer[5];\n    *inputData = (uint *)(ppuVar11 + 1);\n    inputPointer = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *inputPointer = valueTemp;\n    }\n    else {\n      *(short *)inputPointer = (short)valueTemp;\n    }\nLAB_00005d06:\n    outputBuffer[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    inputPointer = *inputData;\n    valueTemp = *outputBuffer;\n    *inputData = inputPointer + 1;\n    if (((int)(valueTemp << 0x18) < 0) || (-1 < (int)(valueTemp << 0x19))) {\n      valueTemp = *inputPointer;\n    }\n    else {\n      valueTemp = (uint)*(ushort *)inputPointer;\n    }\n    digits = \"0123456789ABCDEF\";\n    if (outputSpecifier == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *outputBuffer = *outputBuffer | 0x20;\n  case 0x78:\n    digits = \"0123456789abcdef\";\n    *(undefined *)((int)outputBuffer + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *outputBuffer;\n    valueTemp = **inputData;\n    *inputData = *inputData + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      valueTemp = valueTemp & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *outputBuffer = base | 0x20;\n    }\n    if (valueTemp == 0) {\n      *outputBuffer = *outputBuffer & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*inputData;\n    *inputData = (uint *)(ppcVar12 + 1);\n    stringPointer = *ppcVar12;\n    resultCode = memchr(stringPointer,0,outputBuffer[1],ppcVar12,formatSpecifier,outputBuffer,additionalFlag);\n    if (resultCode != 0) {\n      outputBuffer[1] = resultCode - (int)stringPointer;\n    }\n    valueTemp = outputBuffer[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)outputBuffer + 0x43) = 0;\nLAB_00005c36:\n  stringLength = outputBuffer[1];\n  outputBuffer[2] = stringLength;\n  if (-1 < (int)stringLength) {\n    *outputBuffer = *outputBuffer & 0xfffffffb;\n  }\n  outputEnd = stringPointer;\n  if ((valueTemp != 0) || (stringLength != 0)) {\n    do {\n      outputEnd = outputEnd + -1;\n      *outputEnd = digits[valueTemp - base * (valueTemp / base)];\n      isWithinRange = base <= valueTemp;\n      valueTemp = valueTemp / base;\n    } while (isWithinRange);\n  }\n  if (((base == 8) && ((int)(*outputBuffer << 0x1f) < 0)) && ((int)outputBuffer[1] <= (int)outputBuffer[4])) {\n    outputEnd[-1] = '0';\n    outputEnd = outputEnd + -1;\n  }\n  outputBuffer[4] = (int)stringPointer - (int)outputEnd;\n  stringPointer = outputEnd;\nLAB_00005c84:\n  resultCode = _printf_common(formatSpecifier,outputBuffer,&initialOutput,additionalFlag,printerFunction);\n  if ((resultCode == -1) || (resultCode = (*printerFunction)(formatSpecifier,additionalFlag,stringPointer,outputBuffer[4]), resultCode == -1)) {\nLAB_00005c98:\n    outputPointer = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*outputBuffer << 0x1e) < 0) {\n      for (resultCode = 0; resultCode < (int)(outputBuffer[3] - (int)initialOutput); resultCode = resultCode + 1) {\n        printResult = (*printerFunction)(formatSpecifier,additionalFlag,(int)outputBuffer + 0x19,1);\n        if (printResult == -1) goto LAB_00005c98;\n      }\n    }\n    outputPointer = (code *)outputBuffer[3];\n    if ((int)(code *)outputBuffer[3] < (int)initialOutput) {\n      outputPointer = initialOutput;\n    }\n  }\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "print_formatted_value_00005b34",
                "param_1": "formatSpecifier",
                "param_2": "outputBuffer",
                "param_3": "additionalFlag",
                "param_4": "printerFunction",
                "param_5": "inputData",
                "bVar1": "isWithinRange",
                "bVar2": "outputSpecifier",
                "iVar3": "resultCode",
                "pcVar4": "outputPointer",
                "pcVar5": "digits",
                "iVar6": "printResult",
                "pcVar7": "stringPointer",
                "uVar8": "valueTemp",
                "puVar9": "inputPointer",
                "uVar10": "base",
                "uVar13": "stringLength",
                "pcVar14": "outputEnd",
                "local_24": "initialOutput"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "read_byte_from_stream_00005e10",
            "code": "\nuint read_byte_from_stream_00005e10(int stream,byte **buffer)\n\n{\n  int result;\n  uint byte_read;\n  byte *current_byte;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == (byte **)&DAT_000079b8) {\n    buffer = *(byte ***)(stream + 4);\n  }\n  else if (buffer == (byte **)&DAT_000079d8) {\n    buffer = *(byte ***)(stream + 8);\n  }\n  else if (buffer == (byte **)&DAT_00007998) {\n    buffer = *(byte ***)(stream + 0xc);\n  }\n  result = __srefill_r(stream,buffer);\n  if (result == 0) {\n    buffer[1] = buffer[1] + -1;\n    current_byte = *buffer;\n    *buffer = current_byte + 1;\n    byte_read = (uint)*current_byte;\n  }\n  else {\n    byte_read = 0xffffffff;\n  }\n  return byte_read;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "read_byte_from_stream_00005e10",
                "param_1": "stream",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "byte_read",
                "pbVar3": "current_byte"
            },
            "calling": [
                "getchar"
            ],
            "called": [
                "__srefill_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "extract_and_scanf_00005e68",
            "code": "\nvoid extract_and_scanf_00005e68(undefined4 input_data,undefined4 format_string,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 input_data_copy;\n  undefined4 str_length;\n  undefined2 constant_value;\n  undefined2 constant_value_2;\n  undefined4 input_data_copy_2;\n  undefined4 str_length_copy;\n  undefined *pointer_to_string;\n  undefined4 variable1;\n  undefined4 variable2;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  constant_value = 0x204;\n  input_data_copy = input_data;\n  input_data_copy_2 = input_data;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  str_length = strlen();\n  pointer_to_string = &LAB_00004dea_1;\n  variable1 = 0;\n  variable2 = 0;\n  constant_value_2 = 0xffff;\n  str_length_copy = str_length;\n  __ssvfiscanf_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&input_data_copy,format_string,&param_3_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "extract_and_scanf_00005e68",
                "param_1": "input_data",
                "param_2": "format_string",
                "local_80": "input_data_copy",
                "local_7c": "str_length",
                "local_74": "constant_value",
                "local_72": "constant_value_2",
                "local_70": "input_data_copy_2",
                "local_6c": "str_length_copy",
                "local_5c": "pointer_to_string",
                "local_4c": "variable1",
                "local_38": "variable2",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "__ssvfiscanf_r",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_null_terminated_string_00005ecc",
            "code": "\nchar * find_null_terminated_string_00005ecc(char *string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_null_terminated_string_00005ecc",
                "param_1": "string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "_tzset_unlocked",
                "siscanf"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *result,byte *input,byte **endPtr,uint base)\n\n{\n  uint parsedValue;\n  uint currentChar;\n  byte negative;\n  int status;\n  uint digitValue;\n  uint maxValue;\n  byte *ptr;\n  byte *nextPtr;\n  \n  nextPtr = input;\n  do {\n    ptr = nextPtr;\n    nextPtr = ptr + 1;\n    currentChar = (uint)*ptr;\n    negative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextPtr;\n    negative = 1;\n    nextPtr = ptr + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextPtr;\n    nextPtr = ptr + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextPtr & 0xdf) == 0x58) {\n    currentChar = (uint)nextPtr[1];\n    base = 0x10;\n    nextPtr = nextPtr + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxValue = 0xffffffff / base;\n  parsedValue = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((status < 0) || (maxValue < parsedValue)) ||\n       ((maxValue == parsedValue && ((int)~(base * maxValue) < (int)digitValue)))) {\n      status = -1;\n    }\n    else {\n      parsedValue = parsedValue * base + digitValue;\n      status = 1;\n    }\n    currentChar = (uint)*nextPtr;\n    nextPtr = nextPtr + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsedValue = 0xffffffff;\n    if (endPtr == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      parsedValue = -parsedValue;\n    }\n    if (endPtr == (byte **)0x0) {\n      return parsedValue;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = nextPtr + -1;\nLAB_00005fb8:\n  *endPtr = input;\n  return parsedValue;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "endPtr",
                "param_4": "base",
                "uVar1": "parsedValue",
                "uVar2": "currentChar",
                "bVar3": "negative",
                "iVar4": "status",
                "uVar5": "digitValue",
                "uVar6": "maxValue",
                "pbVar7": "ptr",
                "pbVar8": "nextPtr"
            },
            "calling": [
                "strtoul"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_unsigned_long_00005fd8",
            "code": "\nvoid parseUnsignedLong_00005fd8(undefined4 str,undefined4 endptr,undefined4 base)\n\n{\n  _strtoul_l_isra_0(Elf32_Rel_ARRAY_1fff0200[16].r_offset,str,endptr,base);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_unsigned_long_00005fd8",
                "param_1": "str",
                "param_2": "endptr",
                "param_3": "base"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_strtoul_l.isra.0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "acquire_recursive_lock_00005fec",
            "code": "\nvoid acquire_recursive_lock_00005fec(void)\n\n{\n  acquire_recursive_lock_00005fec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "acquire_recursive_lock_00005fec",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "release_recursive_lock_00005ff8",
            "code": "\nvoid releaseRecursiveLock_00005ff8(void)\n\n{\n  __retarget_lock_release_recursive(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "release_recursive_lock_00005ff8"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_last_occurrence_00006010",
            "code": "\nbyte * find_last_occurrence_00006010(uint *data,uint target,uint length)\n\n{\n  byte byteVal;\n  char currByte0;\n  char currByte1;\n  char currByte2;\n  char currByte3;\n  byte *foundPtr;\n  uint *currPtr;\n  byte *nextPtr;\n  uint dataAlignment;\n  uint lengthAligned;\n  uint currVal0;\n  uint currVal1;\n  bool isNonzero0;\n  bool isNonzero1;\n  bool isNonzero2;\n  bool isNonzero3;\n  \n  target = target & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      currPtr = (uint *)((int)data + 1);\n      byteVal = *(byte *)data;\n      length = length - 1;\n      data = currPtr;\n    } while (byteVal != target);\n  }\n  else {\n    dataAlignment = (uint)data & 7;\n    while( true ) {\n      if (dataAlignment == 0) {\n        dataAlignment = target | target << 8;\n        dataAlignment = dataAlignment | dataAlignment << 0x10;\n        lengthAligned = length & 0xfffffff8;\n        do {\n          currPtr = data + 2;\n          lengthAligned = lengthAligned - 8;\n          currVal0 = *data ^ dataAlignment;\n          currVal1 = data[1] ^ dataAlignment;\n          currByte0 = -((char)currVal0 == '\\0');\n          currByte1 = -((char)(currVal0 >> 8) == '\\0');\n          currByte2 = -((char)(currVal0 >> 0x10) == '\\0');\n          currByte3 = -((char)(currVal0 >> 0x18) == '\\0');\n          currVal0 = CONCAT13(currByte3,CONCAT12(currByte2,CONCAT11(currByte1,currByte0)));\n          isNonzero0 = (char)currVal1 != '\\0';\n          isNonzero1 = (char)(currVal1 >> 8) != '\\0';\n          isNonzero2 = (char)(currVal1 >> 0x10) != '\\0';\n          isNonzero3 = (char)(currVal1 >> 0x18) != '\\0';\n          currVal1 = CONCAT13(isNonzero3 * currByte3 - !isNonzero3,\n                            CONCAT12(isNonzero2 * currByte2 - !isNonzero2,\n                                     CONCAT11(isNonzero1 * currByte1 - !isNonzero1,isNonzero0 * currByte0 - !isNonzero0)));\n          if (currVal1 != 0) {\n            if (currVal0 == 0) {\n              nextPtr = (byte *)((int)data + 5);\n              currVal0 = currVal1;\n            }\n            else {\n              nextPtr = (byte *)((int)data + 1);\n            }\n            if ((currVal0 & 1) == 0) {\n              isNonzero0 = (currVal0 & 0x100) == 0;\n              foundPtr = nextPtr + 1;\n              if (isNonzero0) {\n                isNonzero0 = (currVal0 & 0x18000) == 0;\n                foundPtr = nextPtr + 2;\n              }\n              nextPtr = foundPtr;\n              if (isNonzero0) {\n                nextPtr = nextPtr + 1;\n              }\n            }\n            return nextPtr + -1;\n          }\n          data = currPtr;\n        } while (lengthAligned != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      currPtr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target) break;\n      dataAlignment = (uint)currPtr & 7;\n      data = currPtr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)currPtr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_last_occurrence_00006010",
                "param_1": "data",
                "param_2": "target",
                "param_3": "length",
                "bVar1": "byteVal",
                "cVar2": "currByte0",
                "cVar3": "currByte1",
                "cVar4": "currByte2",
                "cVar5": "currByte3",
                "pbVar6": "foundPtr",
                "puVar7": "currPtr",
                "pbVar8": "nextPtr",
                "uVar9": "dataAlignment",
                "uVar10": "lengthAligned",
                "uVar11": "currVal0",
                "uVar12": "currVal1",
                "bVar13": "isNonzero0",
                "bVar14": "isNonzero1",
                "bVar15": "isNonzero2",
                "bVar16": "isNonzero3"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_vfprintf_r",
                "_printf_i",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int dest,undefined *src,int length)\n\n{\n  undefined *srcPtr;\n  undefined *srcEndPtr;\n  undefined *destPtr;\n  \n  srcEndPtr = src + length;\n  destPtr = (undefined *)(dest + -1);\n  if (src != srcEndPtr) {\n    do {\n      srcPtr = src + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *src;\n      src = srcPtr;\n    } while (srcPtr != srcEndPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "srcPtr",
                "puVar2": "srcEndPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "__submore",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_memory_000060cc",
            "code": "\nint allocate_memory_000060cc(undefined4 memory_manager,int source_buffer,uint source_size,undefined4 optional_param)\n\n{\n  int allocated_memory;\n  uint usable_size;\n  \n  if (source_buffer != 0) {\n    if (source_size == 0) {\n      _free_r();\n      allocated_memory = 0;\n    }\n    else {\n      usable_size = _malloc_usable_size_r();\n      allocated_memory = source_buffer;\n      if ((usable_size < source_size) && (allocated_memory = _malloc_r(memory_manager,source_size), allocated_memory != 0)) {\n        memcpy(allocated_memory,source_buffer,source_size);\n        _free_r(memory_manager,source_buffer);\n      }\n    }\n    return allocated_memory;\n  }\n  allocated_memory = _malloc_r(memory_manager,source_size,source_size,optional_param);\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_memory_000060cc",
                "param_1": "memory_manager",
                "param_2": "source_buffer",
                "param_3": "source_size",
                "param_4": "optional_param",
                "iVar1": "allocated_memory",
                "uVar2": "usable_size"
            },
            "calling": [
                "__submore"
            ],
            "called": [
                "_malloc_r",
                "_free_r",
                "memcpy",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "process_data_00006192",
            "code": "\nundefined4 processData_00006192(undefined4 input,undefined4 *data)\n\n{\n  if ((undefined4 *)data[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)data[13] != data + 0x11) {\n      _free_r();\n    }\n    data[1] = data[16];\n    data[13] = 0;\n    if (data[16] != 0) {\n      *data = data[0xf];\n      return 0;\n    }\n  }\n  *data = data[4];\n  data[1] = 0;\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "process_data_00006192",
                "param_1": "input",
                "param_2": "data",
                "param_2[0xd]": "data[13]",
                "param_2[0x10]": "data[16]",
                "param_2[4]": "data[4]"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_format_string_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseFormatString_000061cc(undefined4 param,byte **formatString,byte *currentChar,int **args)\n\n{\n  int result;\n  uint currentCharValue;\n  byte *nextChar;\n  uint currentCharIndex;\n  int **argsCopy;\n  undefined stack [256];\n  uint flags;\n  undefined4 base;\n  uint digitCount;\n  int returnVal;\n  int readChars;\n  undefined *buffer;\n  int formatType;\n  undefined *LAB_00006118_1;\n  code *local_2c;\n  \n  returnVal = 0;\n  readChars = 0;\n  LAB_00006118_1 = &LAB_00006118_1;\n  local_2c = __ssrefill_r + 1;\n  argsCopy = args;\n  buffer = stack;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      currentCharIndex = (uint)*currentChar;\n      if (currentCharIndex == 0) {\n        return returnVal;\n      }\n      currentCharValue = (byte)(&DAT_00007a99)[currentCharIndex] & 8;\n      nextChar = currentChar + 1;\n      if (((&DAT_00007a99)[currentCharIndex] & 8) == 0) break;\n      while (((currentChar = nextChar, 0 < (int)formatString[1] ||\n              (result = (*local_2c)(param,formatString), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**formatString] << 0x1c) < 0))) {\n        readChars = readChars + 1;\n        formatString[1] = formatString[1] + -1;\n        *formatString = *formatString + 1;\n      }\n    }\n    if (currentCharIndex == 0x25) break;\nLAB_00006352:\n    if (((int)formatString[1] < 1) && (result = (*local_2c)(param,formatString), result != 0))\n    goto LAB_00006380;\n    if (**formatString != currentCharIndex) {\n      return returnVal;\n    }\n    *formatString = *formatString + 1;\n    readChars = readChars + 1;\n    formatString[1] = formatString[1] + -1;\n    currentChar = nextChar;\n  }\n  digitCount = currentCharValue;\n  flags = currentCharValue;\n  if (currentChar[1] == 0x2a) {\n    nextChar = currentChar + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    currentCharValue = (uint)*nextChar;\n    if (9 < currentCharValue - 0x30) break;\n    nextChar = nextChar + 1;\n    digitCount = (digitCount * 10 + currentCharValue) - 0x30;\n  }\n  result = memchr(&DAT_00007c02,currentCharValue,3);\n  if (result != 0) {\n    flags = 1 << (result - 0x7c02U & 0xff) | flags;\n    nextChar = nextChar + 1;\n  }\n  currentChar = nextChar + 1;\n  currentCharValue = (uint)*nextChar;\n  if (currentCharValue < 0x79) {\n    if (0x57 < currentCharValue) {\n      switch(currentCharValue) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        currentChar = (byte *)__sccl(stack,currentChar);\n        flags = flags | 0x40;\n        formatType = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        formatType = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (currentCharValue < 0x6f) {\n          formatType = 3;\n        }\n        else {\n          formatType = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        formatType = 5;\n        break;\n      case 0x69:\n        base = 0;\n        formatType = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*argsCopy = (short)readChars;\n            argsCopy = argsCopy + 1;\n          }\n          else {\n            **argsCopy = readChars;\n            argsCopy = argsCopy + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        base = 8;\n        formatType = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        formatType = 2;\n      }\nLAB_000063ac:\n      if (((int)formatString[1] < 1) && (result = (*local_2c)(param,formatString), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**formatString] << 0x1c) < 0) {\n          readChars = readChars + 1;\n          nextChar = formatString[1];\n          formatString[1] = nextChar + -1;\n          if ((int)(nextChar + -1) < 1) {\n            result = (*local_2c)(param,formatString);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *formatString = *formatString + 1;\n          }\n        }\n      }\n      if (formatType < 3) {\n        result = _scanf_chars(param,&flags,formatString,&argsCopy);\n      }\n      else {\n        if (4 < formatType) goto LAB_000061f6;\n        result = _scanf_i(param,&flags,formatString,&argsCopy);\n      }\n      if (result == 1) {\n        return returnVal;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (returnVal == 0) {\nLAB_00006388:\n          returnVal = -1;\n        }\n        else if ((*(ushort *)(formatString + 3) & 0x40) != 0) {\n          returnVal = -1;\n        }\n        return returnVal;\n      }\n      goto LAB_000061f6;\n    }\n    nextChar = currentChar;\n    if (currentCharValue == 0x25) goto LAB_00006352;\n    if (currentCharValue < 0x26) {\n      if (currentCharValue != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (currentCharValue - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  formatType = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_format_string_000061cc",
                "param_1": "param",
                "param_2": "formatString",
                "param_3": "currentChar",
                "param_4": "args",
                "iVar1": "result",
                "uVar2": "currentCharValue",
                "pbVar3": "nextChar",
                "uVar4": "currentCharIndex",
                "local_2b0": "argsCopy",
                "auStack_2ac": "stack",
                "local_1ac": "flags",
                "local_1a8": "base",
                "local_1a4": "digitCount",
                "local_1a0": "returnVal",
                "local_19c": "readChars",
                "local_198": "buffer",
                "local_194": "formatType",
                "local_30": "LAB_00006118_1"
            },
            "calling": [
                "siscanf"
            ],
            "called": [
                "__ssrefill_r",
                "__sccl",
                "memchr",
                "_scanf_chars",
                "_scanf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_param,uint *data_array,byte **byte_array_ptr,undefined4 *result_ptr)\n\n{\n  int function_result;\n  uint temp_var;\n  byte **byte_ptr_ptr;\n  byte *byte_ptr_1;\n  byte *current_byte_ptr;\n  byte *byte_ptr_2;\n  int iteration_count;\n  \n  if (data_array[2] == 0) {\n    if (data_array[6] == 0) {\n      temp_var = 1;\n    }\n    else {\n      temp_var = 0xffffffff;\n    }\n    data_array[2] = temp_var;\n  }\n  if (-1 < (int)(*data_array << 0x1b)) {\n    byte_ptr_ptr = (byte **)*result_ptr;\n    *result_ptr = byte_ptr_ptr + 1;\n    current_byte_ptr = *byte_ptr_ptr;\n  }\n  iteration_count = 0;\n  do {\n    temp_var = data_array[6];\n    if (temp_var != 0) {\n      if (temp_var == 1) {\n        if (*(char *)(data_array[5] + (uint)**byte_array_ptr) == '\\0') {\n          if (iteration_count == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data_array & 0x10) == 0) && (data_array[3] = data_array[3] + 1, data_array[6] != 0)) {\n            *current_byte_ptr = 0;\n          }\n          data_array[4] = iteration_count + data_array[4];\n          return 0;\n        }\n      }\n      else if ((temp_var != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**byte_array_ptr] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byte_ptr_2 = current_byte_ptr;\n    if (-1 < (int)(*data_array << 0x1b)) {\n      byte_ptr_2 = current_byte_ptr + 1;\n      *current_byte_ptr = **byte_array_ptr;\n    }\n    byte_ptr_1 = byte_array_ptr[1];\n    *byte_array_ptr = *byte_array_ptr + 1;\n    temp_var = data_array[2] - 1;\n    byte_array_ptr[1] = byte_ptr_1 + -1;\n    iteration_count = iteration_count + 1;\n    data_array[2] = temp_var;\n    current_byte_ptr = byte_ptr_2;\n    if ((temp_var == 0) ||\n       (((int)(byte_ptr_1 + -1) < 1 &&\n        (function_result = (*(code *)data_array[0x60])(input_param,byte_array_ptr,temp_var,(code *)data_array[0x60],result_ptr),\n        function_result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_3": "byte_array_ptr",
                "param_4": "result_ptr",
                "iVar1": "function_result",
                "uVar2": "temp_var",
                "ppbVar3": "byte_ptr_ptr",
                "pbVar4": "byte_ptr_1",
                "unaff_r6": "current_byte_ptr",
                "pbVar5": "byte_ptr_2",
                "iVar6": "iteration_count"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 input,uint *flags,byte **data,undefined4 *output)\n\n{\n  int index;\n  undefined4 result;\n  code *funcPointer;\n  uint value;\n  byte *bytePtr;\n  uint uValue;\n  undefined4 *resultPtr;\n  uint *currentPtr;\n  uint *tempPtr;\n  uint *startPtr;\n  int unaffIndex;\n  int counter;\n  undefined *dataArray [4];\n  \n  dataArray[0] = &DAT_00007c2f;\n  dataArray[1] = &DAT_00007c32;\n  dataArray[2] = &DAT_00007c35;\n  funcPointer = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    funcPointer = (code *)&UNK_00005fd5;\n  }\n  uValue = flags[2];\n  value = uValue - 1;\n  if (0x15c < value) {\n    unaffIndex = uValue - 0x15d;\n    uValue = 0x15d;\n  }\n  if (0x15c < value) {\n    flags[2] = uValue;\n  }\n  startPtr = flags + 7;\n  if (value < 0x15d) {\n    unaffIndex = 0;\n  }\n  *flags = *flags | 0xd00;\n  counter = 0;\n  tempPtr = startPtr;\n  do {\n    index = memchr(dataArray[counter],**data,2);\n    if (index != 0) {\n      if (counter == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        value = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = value;\n      }\n      else if (counter == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        value = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      value = flags[2];\n      flags[2] = value - 1;\n      if (value != 0) {\n        bytePtr = *data;\n        *data = bytePtr + 1;\n        currentPtr = (uint *)((int)tempPtr + 1);\n        *(byte *)tempPtr = *bytePtr;\n        bytePtr = data[1];\n        data[1] = bytePtr + -1;\n        tempPtr = currentPtr;\n        if (((int)(bytePtr + -1) < 1) &&\n           (index = (*(code *)flags[0x60])(input,data), index != 0)) {\n          counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    counter = counter + 1;\n  } while (counter != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  __sccl(flags[5],\"01234567]\" + (8 - flags[1]));\n  counter = 0;\n  while( true ) {\n    currentPtr = tempPtr;\n    if (flags[2] == 0) break;\n    bytePtr = *data;\n    value = (uint)*bytePtr;\n    if (*(char *)(flags[5] + value) == '\\0') break;\n    if ((value == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      counter = counter + 1;\n      if (unaffIndex != 0) {\n        unaffIndex = unaffIndex + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      currentPtr = (uint *)((int)tempPtr + 1);\n      *(byte *)tempPtr = *bytePtr;\n    }\n    bytePtr = data[1];\n    data[1] = bytePtr + -1;\n    if ((int)(bytePtr + -1) < 1) {\n      index = (*(code *)flags[0x60])(input,data);\n      if (index != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    tempPtr = currentPtr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (startPtr < currentPtr) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)currentPtr + -1),data);\n      currentPtr = (uint *)((int)currentPtr + -1);\n    }\n    if (currentPtr == startPtr) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)currentPtr = 0;\n    result = (*funcPointer)(input,startPtr,0,flags[1]);\n    resultPtr = (undefined4 *)*output;\n    value = *flags;\n    *output = resultPtr + 1;\n    resultPtr = (undefined4 *)*resultPtr;\n    if ((value & 0x20) == 0) {\n      if ((int)(value << 0x1f) < 0) {\n        *(short *)resultPtr = (short)result;\n      }\n      else {\n        *resultPtr = result;\n      }\n    }\n    else {\n      *resultPtr = result;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)currentPtr + flags[4] + (counter - (int)startPtr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "index",
                "uVar2": "result",
                "pcVar3": "funcPointer",
                "uVar4": "value",
                "pbVar5": "bytePtr",
                "uVar6": "uValue",
                "puVar7": "resultPtr",
                "puVar8": "currentPtr",
                "puVar9": "tempPtr",
                "puVar10": "startPtr",
                "unaff_r9": "unaffIndex",
                "iVar11": "counter",
                "local_34": "dataArray"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "__sccl",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *outputBuffer,undefined4 *inputBuffer,undefined4 size,undefined4 param_4)\n\n{\n  undefined2 flag1;\n  int result;\n  undefined4 temp1;\n  ushort flag2;\n  uint temp2;\n  \n  if ((outputBuffer != (undefined4 *)0x0) && (outputBuffer[6] == 0)) {\n    __sinit();\n  }\n  if (inputBuffer == &DAT_000079b8) {\n    inputBuffer = (undefined4 *)outputBuffer[1];\n  }\n  else if (inputBuffer == (undefined4 *)&DAT_000079d8) {\n    inputBuffer = (undefined4 *)outputBuffer[2];\n  }\n  else if (inputBuffer == (undefined4 *)&DAT_00007998) {\n    inputBuffer = (undefined4 *)outputBuffer[3];\n  }\n  flag2 = *(ushort *)(inputBuffer + 3);\n  inputBuffer[1] = 0;\n  temp2 = (uint)*(ushort *)(inputBuffer + 3);\n  if ((int)(temp2 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(temp2 << 0x1d) < 0) {\n    if ((undefined4 *)inputBuffer[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)inputBuffer[0xd] != inputBuffer + 0x11) {\n        _free_r(outputBuffer);\n      }\n      inputBuffer[1] = inputBuffer[0x10];\n      inputBuffer[0xd] = 0;\n      if (inputBuffer[0x10] != 0) {\n        *inputBuffer = inputBuffer[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(temp2 << 0x1b)) {\n      *outputBuffer = 9;\n      flag2 = flag2 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(temp2 << 0x1c) < 0) {\n      result = _fflush_r(outputBuffer,inputBuffer,temp2 << 0x1c,temp2,param_4);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      inputBuffer[2] = 0;\n      *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xfff7;\n      inputBuffer[6] = 0;\n    }\n    *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) | 4;\n  }\n  if (inputBuffer[4] == 0) {\n    __smakebuf_r(outputBuffer,inputBuffer);\n  }\n  flag2 = *(ushort *)(inputBuffer + 3);\n  flag1 = *(undefined2 *)(inputBuffer + 3);\n  if ((flag2 & 3) != 0) {\n    *(undefined2 *)(inputBuffer + 3) = 1;\n    _fwalk(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(inputBuffer + 3) = flag1;\n    if ((flag2 & 9) == 9) {\n      __sflush_r(outputBuffer,inputBuffer);\n    }\n  }\n  temp1 = inputBuffer[4];\n  *inputBuffer = temp1;\n  result = (*(code *)inputBuffer[9])(outputBuffer,inputBuffer[8],temp1,inputBuffer[5]);\n  inputBuffer[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  flag2 = *(ushort *)(inputBuffer + 3);\n  if (result != 0) {\n    temp1 = 0;\n  }\n  else {\n    flag2 = flag2 | 0x20;\n  }\n  if (result != 0) {\n    inputBuffer[1] = temp1;\n    flag2 = flag2 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(inputBuffer + 3) = flag2;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "param_3": "size",
                "uVar1": "flag1",
                "iVar2": "result",
                "uVar3": "temp1",
                "uVar4": "flag2",
                "uVar5": "temp2"
            },
            "calling": [
                "__srget_r"
            ],
            "called": [
                "_fflush_r",
                "_fwalk",
                "__smakebuf_r",
                "_free_r",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "process_input_0000687c",
            "code": "\nbyte * process_input_0000687c(int buffer_size,byte *input_data)\n\n{\n  byte *output_data;\n  uint temp_var;\n  int index;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  bool is_caret;\n  \n  uVar4 = (uint)*input_data;\n  is_caret = uVar4 == 0x5e;\n  if (is_caret) {\n    uVar4 = (uint)input_data[1];\n    input_data = input_data + 2;\n  }\n  else {\n    input_data = input_data + 1;\n  }\n  index = buffer_size + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_caret;\n  } while (index != buffer_size + 0xff);\n  if (uVar4 == 0) {\n    output_data = input_data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      uVar5 = uVar4;\n      *(bool *)(buffer_size + uVar5) = !is_caret;\n      input_data = input_data + 1;\n      while( true ) {\n        uVar4 = (uint)input_data[-1];\n        if (uVar4 != 0x2d) break;\n        uVar6 = (uint)*input_data;\n        if ((uVar6 == 0x5d) || (temp_var = uVar5, (int)uVar6 < (int)uVar5)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(buffer_size + temp_var) = !is_caret;\n        } while ((int)temp_var < (int)uVar6);\n        index = ~uVar5 + uVar6;\n        if ((int)uVar6 <= (int)uVar5) {\n          index = 0;\n        }\n        uVar5 = uVar5 + 1 + index;\n        input_data = input_data + 2;\n      }\n      output_data = input_data;\n    } while ((uVar4 != 0x5d) && (output_data = input_data + -1, uVar4 != 0));\n  }\n  return output_data;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "process_input_0000687c",
                "param_1": "buffer_size",
                "param_2": "input_data",
                "pbVar1": "output_data",
                "uVar2": "temp_var",
                "iVar3": "index",
                "bVar7": "is_caret"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_or_resize_memory_000068f0",
            "code": "\nundefined4 allocate_or_resize_memory_000068f0(undefined4 flags,int *memory_block)\n\n{\n  int new_memory_block;\n  int current_size;\n  \n  if ((int *)memory_block[0xd] == memory_block + 0x11) {\n    new_memory_block = _malloc_r(flags,0x400);\n    if (new_memory_block != 0) {\n      memory_block[0xe] = 0x400;\n      memory_block[0xd] = new_memory_block;\n      *(undefined *)(new_memory_block + 0x3ff) = *(undefined *)((int)memory_block + 0x46);\n      *(undefined *)(new_memory_block + 0x3fe) = *(undefined *)((int)memory_block + 0x45);\n      *(undefined *)(new_memory_block + 0x3fd) = *(undefined *)(memory_block + 0x11);\n      *memory_block = new_memory_block + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = memory_block[0xe];\n    new_memory_block = _realloc_r(flags,(int *)memory_block[0xd],current_size << 1);\n    if (new_memory_block != 0) {\n      memcpy(new_memory_block + current_size,new_memory_block,current_size);\n      memory_block[0xd] = new_memory_block;\n      memory_block[0xe] = current_size << 1;\n      *memory_block = new_memory_block + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_or_resize_memory_000068f0",
                "param_1": "flags",
                "param_2": "memory_block",
                "iVar1": "new_memory_block",
                "iVar2": "current_size"
            },
            "calling": [],
            "called": [
                "_malloc_r",
                "memcpy",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "addition_or_subtraction_00006964",
            "code": "\nint additionOrSubtraction_00006964(undefined4 address,int offset)\n\n{\n  int newOffset;\n  \n  newOffset = *(int *)(offset + -4) + -4;\n  if (*(int *)(offset + -4) < 0) {\n    newOffset = newOffset + *(int *)(offset + newOffset);\n  }\n  return newOffset;\n}\n\n",
            "renaming": {
                "FUN_00006964": "addition_or_subtraction_00006964",
                "param_1": "address",
                "param_2": "offset",
                "iVar1": "newOffset"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "divmod_function_00006974",
            "code": "\nundefined8 divmod_function_00006974(int dividend,int divisor,int quotient,int remainder)\n\n{\n  int negative_dividend;\n  undefined8 result;\n  undefined temp_buffer [8];\n  \n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    negative_dividend = -divisor - (uint)(dividend != 0);\n    if (remainder < 0) {\n      result = __udivmoddi4(-dividend,negative_dividend,-quotient,-remainder - (uint)(quotient != 0),temp_buffer);\n      return result;\n    }\n    result = __udivmoddi4(-dividend,negative_dividend,quotient,remainder,temp_buffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (remainder < 0) {\n    result = __udivmoddi4(dividend,divisor,-quotient,-remainder - (uint)(quotient != 0),temp_buffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = __udivmoddi4();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "divmod_function_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "negative_dividend",
                "uVar2": "result",
                "local_8": "temp_buffer"
            },
            "calling": [
                "gmtime_r"
            ],
            "called": [
                "__udivmoddi4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_and_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divideAndRemainder_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jump_table;\n  uint quotient;\n  int shift;\n  uint dividend_low;\n  uint quotient_low;\n  uint temp1;\n  uint temp2;\n  uint divisor_low;\n  uint quotient_high;\n  uint divisor_dividend_high;\n  bool is_carry;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift = LZCOUNT(divisor);\n      temp1 = divisor;\n      if (shift != 0) {\n        temp1 = divisor << shift;\n        dividend_high = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        dividend = dividend << shift;\n      }\n      temp2 = temp1 >> 0x10;\n      quotient_high = dividend_high / temp2;\n      dividend_low = dividend >> 0x10 | (dividend_high - temp2 * quotient_high) * 0x10000;\n      quotient = quotient_high * (temp1 & 0xffff);\n      quotient_low = quotient_high;\n      if (dividend_low <= quotient && quotient - dividend_low != 0) {\n        is_carry = CARRY4(temp1,dividend_low);\n        dividend_low = temp1 + dividend_low;\n        quotient_low = quotient_high - 1;\n        if ((is_carry == false) && (dividend_low <= quotient && quotient - dividend_low != 0)) {\n          quotient_low = quotient_high - 2;\n          dividend_low = dividend_low + temp1;\n        }\n      }\n      quotient_high = (dividend_low - quotient) / temp2;\n      temp2 = dividend & 0xffff | ((dividend_low - quotient) - temp2 * quotient_high) * 0x10000;\n      dividend_low = quotient_high * (temp1 & 0xffff);\n      quotient = quotient_high;\n      if (temp2 <= dividend_low && dividend_low - temp2 != 0) {\n        is_carry = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = quotient_high - 1;\n        if ((is_carry == false) && (temp2 <= dividend_low && dividend_low - temp2 != 0)) {\n          quotient = quotient_high - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp2 = temp2 - dividend_low;\n      quotient = quotient | quotient_low << 0x10;\n      temp1 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift = LZCOUNT(divisor);\n      if (shift == 0) {\n        dividend_high = dividend_high - divisor;\n        divisor_dividend_high = divisor >> 0x10;\n        divisor_low = divisor & 0xffff;\n        temp1 = 1;\n        quotient_low = divisor;\n      }\n      else {\n        quotient_low = divisor << shift;\n        divisor_dividend_high = quotient_low >> 0x10;\n        quotient = dividend_high >> (0x20U - shift & 0xff);\n        temp1 = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        dividend_low = quotient / divisor_dividend_high;\n        divisor_low = quotient_low & 0xffff;\n        quotient_high = temp1 >> 0x10 | (quotient - divisor_dividend_high * dividend_low) * 0x10000;\n        temp2 = dividend_low * divisor_low;\n        dividend = dividend << shift;\n        quotient = dividend_low;\n        if (quotient_high <= temp2 && temp2 - quotient_high != 0) {\n          is_carry = CARRY4(quotient_low,quotient_high);\n          quotient_high = quotient_low + quotient_high;\n          quotient = dividend_low - 1;\n          if ((is_carry == false) && (quotient_high <= temp2 && temp2 - quotient_high != 0)) {\n            quotient = dividend_low - 2;\n            quotient_high = quotient_high + quotient_low;\n          }\n        }\n        dividend_low = (quotient_high - temp2) / divisor_dividend_high;\n        dividend_high = temp1 & 0xffff | ((quotient_high - temp2) - divisor_dividend_high * dividend_low) * 0x10000;\n        temp2 = dividend_low * divisor_low;\n        temp1 = dividend_low;\n        if (dividend_high <= temp2 && temp2 - dividend_high != 0) {\n          is_carry = CARRY4(quotient_low,dividend_high);\n          dividend_high = quotient_low + dividend_high;\n          temp1 = dividend_low - 1;\n          if ((is_carry == false) && (dividend_high <= temp2 && temp2 - dividend_high != 0)) {\n            temp1 = dividend_low - 2;\n            dividend_high = dividend_high + quotient_low;\n          }\n        }\n        dividend_high = dividend_high - temp2;\n        temp1 = temp1 | quotient << 0x10;\n      }\n      quotient_high = dividend_high / divisor_dividend_high;\n      temp2 = dividend >> 0x10 | (dividend_high - divisor_dividend_high * quotient_high) * 0x10000;\n      quotient = divisor_low * quotient_high;\n      dividend_low = quotient_high;\n      if (temp2 <= quotient && quotient - temp2 != 0) {\n        is_carry = CARRY4(quotient_low,temp2);\n        temp2 = quotient_low + temp2;\n        dividend_low = quotient_high - 1;\n        if ((is_carry == false) && (temp2 <= quotient && quotient - temp2 != 0)) {\n          dividend_low = quotient_high - 2;\n          temp2 = temp2 + quotient_low;\n        }\n      }\n      quotient_high = (temp2 - quotient) / divisor_dividend_high;\n      temp2 = dividend & 0xffff | ((temp2 - quotient) - divisor_dividend_high * quotient_high) * 0x10000;\n      divisor_low = divisor_low * quotient_high;\n      quotient = quotient_high;\n      if (temp2 <= divisor_low && divisor_low - temp2 != 0) {\n        is_carry = CARRY4(quotient_low,temp2);\n        temp2 = quotient_low + temp2;\n        quotient = quotient_high - 1;\n        if ((is_carry == false) && (temp2 <= divisor_low && divisor_low - temp2 != 0)) {\n          quotient = quotient_high - 2;\n          temp2 = temp2 + quotient_low;\n        }\n      }\n      temp2 = temp2 - divisor_low;\n      quotient = quotient | dividend_low << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp2 >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    temp1 = 0;\n  }\n  else {\n    shift = LZCOUNT(divisor_high);\n    if (shift != 0) {\n      divisor_low = 0x20 - shift;\n      dividend_low = divisor >> (divisor_low & 0xff) | divisor_high << shift;\n      divisor_dividend_high = dividend_low >> 0x10;\n      quotient = dividend_high >> (divisor_low & 0xff);\n      temp1 = dividend >> (divisor_low & 0xff) | dividend_high << shift;\n      temp2 = quotient / divisor_dividend_high;\n      quotient_low = temp1 >> 0x10 | (quotient - divisor_dividend_high * temp2) * 0x10000;\n      quotient_high = temp2 * (dividend_low & 0xffff);\n      dividend = dividend << shift;\n      quotient = temp2;\n      if (quotient_low <= quotient_high && quotient_high - quotient_low != 0) {\n        is_carry = CARRY4(dividend_low,quotient_low);\n        quotient_low = dividend_low + quotient_low;\n        quotient = temp2 - 1;\n        if ((is_carry == false) && (quotient_low <= quotient_high && quotient_high - quotient_low != 0)) {\n          quotient = temp2 - 2;\n          quotient_low = quotient_low + dividend_low;\n        }\n      }\n      temp2 = (quotient_low - quotient_high) / divisor_dividend_high;\n      quotient_low = temp1 & 0xffff | ((quotient_low - quotient_high) - divisor_dividend_high * temp2) * 0x10000;\n      quotient_high = temp2 * (dividend_low & 0xffff);\n      temp1 = temp2;\n      if (quotient_low <= quotient_high && quotient_high - quotient_low != 0) {\n        is_carry = CARRY4(dividend_low,quotient_low);\n        quotient_low = dividend_low + quotient_low;\n        temp1 = temp2 - 1;\n        if ((is_carry == false) && (quotient_low <= quotient_high && quotient_high - quotient_low != 0)) {\n          temp1 = temp2 - 2;\n          quotient_low = quotient_low + dividend_low;\n        }\n      }\n      temp1 = temp1 | quotient << 0x10;\n      result = (ulonglong)temp1 * (ulonglong)(divisor << shift);\n      if (CONCAT44(quotient_low - quotient_high,dividend) < result) {\n        result = result - CONCAT44(dividend_low,divisor << shift);\n        temp1 = temp1 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((quotient_low - quotient_high) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (divisor_low & 0xff) | dividend - (uint)result >> shift;\n        remainder[1] = quotient >> shift;\n      }\n      return (ulonglong)temp1;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      is_carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)is_carry;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    temp1 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(temp1,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_and_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uVar1": "quotient",
                "iVar2": "shift",
                "uVar3": "dividend_low",
                "uVar4": "quotient_low",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "divisor_low",
                "uVar8": "quotient_high",
                "uVar9": "divisor_dividend_high",
                "bVar10": "is_carry",
                "uVar11": "result"
            },
            "calling": [
                "__aeabi_ldivmod"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 134155,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_0000099c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001448",
            "FUN_000015d0",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ],
        [
            "FUN_00000d76",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_00001628",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00002028",
            "FUN_0000258c"
        ],
        [
            "FUN_000013b8",
            "FUN_000017dc"
        ]
    ],
    "locked_functions": []
}