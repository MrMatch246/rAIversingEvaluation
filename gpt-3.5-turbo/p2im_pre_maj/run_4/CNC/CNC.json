{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 input)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_and_return_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_and_return_080001ac(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_and_return_080001ac",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_system_080001f8",
            "code": "\nvoid initialize_system_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_system_080001f8_08000210();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_system_080001f8"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_system_08000210",
            "code": "\nvoid initializeSystem_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_system_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "handle_param_1_08000220",
            "code": "\nvoid handle_param_1_08000220(char input)\n\n{\n  if (input != DAT_20000468) {\n    handle_valid_pointers();\n    if (input == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = input;\n    }\n    else if (input == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = input;\n    }\n    else {\n      initialize_system();\n      DAT_20000468 = input;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "handle_param_1_08000220",
                "param_1": "input",
                "handle_valid_pointers_08002fd4": "handle_valid_pointers",
                "initialize_system_08000210": "initialize_system"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_value_08000268",
            "code": "\n\n\nint calculateValue_08000268(void)\n\n{\n  int data;\n  \n  data = getGlobalData();\n  return (data + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_value_08000268",
                "iVar1": "data",
                "get_global_data_08005a84": "getGlobalData"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "initialize_data_080002a0",
            "code": "\nvoid initializeData_080002a0(undefined4 dataPointer)\n\n{\n  waitForGlobalData(dataPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "initialize_data_080002a0",
                "param_1": "dataPointer",
                "wait_for_global_data_08005a98": "waitForGlobalData"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "check_value_080002b6",
            "code": "\nvoid check_value_080002b6(uint input_value)\n\n{\n  uint calculated_value1;\n  uint calculated_value2;\n  bool is_valid;\n  longlong result;\n  undefined8 temp_value;\n  \n  result = calculate_value_08000268();\n  calculated_value2 = (uint)(result + (ulonglong)input_value >> 0x20);\n  do {\n    temp_value = calculate_value_08000268();\n    calculated_value1 = (uint)((ulonglong)temp_value >> 0x20);\n    is_valid = calculated_value2 <= calculated_value1;\n    if (calculated_value1 == calculated_value2) {\n      is_valid = (uint)(result + (ulonglong)input_value) <= (uint)temp_value;\n    }\n  } while (!is_valid);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "check_value_080002b6",
                "param_1": "input_value",
                "uVar1": "calculated_value1",
                "uVar2": "calculated_value2",
                "bVar3": "is_valid",
                "lVar4": "result",
                "uVar5": "temp_value"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_memory_080002f0",
            "code": "\nvoid initializeMemory_080002f0(void)\n\n{\n  fill_memory_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_memory_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_memory_value_08000310",
            "code": "\nundefined getMemoryValue_08000310(uint value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  return (&DAT_20000470)[value & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_memory_value_08000310",
                "param_1": "value",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_parameter_value_to_memory_08000340",
            "code": "\nvoid storeParameterValueToMemory_08000340(uint parameterIndex,undefined parameterValue)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n  }\n  (&DAT_20000470)[parameterIndex & 0x3ff] = parameterValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_parameter_value_to_memory_08000340",
                "param_1": "parameterIndex",
                "param_2": "parameterValue"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_parameter_08000374",
            "code": "\nvoid processParameter_08000374(int valueIndex,char *parameter,int length)\n\n{\n  int remainingLength;\n  char *currentParameter;\n  int currentValueIndex;\n  char checksum;\n  \n  checksum = '\\0';\n  remainingLength = length;\n  currentParameter = parameter;\n  currentValueIndex = valueIndex;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    currentParameter = parameter;\n    currentValueIndex = valueIndex;\n  }\n  for (; remainingLength != 0; remainingLength = remainingLength + -1) {\n    checksum = (checksum != '\\0') + *currentParameter;\n    store_parameter_value_to_memory_08000340(currentValueIndex,*currentParameter);\n    currentParameter = currentParameter + 1;\n    currentValueIndex = currentValueIndex + 1;\n  }\n  store_parameter_value_to_memory_08000340(currentValueIndex,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_parameter_08000374",
                "param_1": "valueIndex",
                "param_2": "parameter",
                "param_3": "length",
                "local_1c": "remainingLength",
                "local_18": "currentParameter",
                "local_14": "currentValueIndex",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_memory_values_080003ec",
            "code": "\nbool check_memory_values_080003ec(char *input_string,int start_index,int length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remaining_length;\n  int current_index;\n  char *output_string;\n  byte sum_of_values;\n  \n  sum_of_values = 0;\n  remaining_length = length;\n  current_index = start_index;\n  output_string = input_string;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    current_index = start_index;\n    output_string = input_string;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    cVar1 = get_memory_value_08000310(current_index);\n    sum_of_values = cVar1 + (sum_of_values != 0);\n    *output_string = cVar1;\n    current_index = current_index + 1;\n    output_string = output_string + 1;\n  }\n  uVar2 = get_memory_value_08000310(current_index);\n  return sum_of_values == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_memory_values_080003ec",
                "param_1": "input_string",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "output_string",
                "local_9": "sum_of_values"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_parameters_08000478",
            "code": "\nvoid initializeParameters_08000478(undefined inputParam1,undefined inputParam2,undefined inputParam3)\n\n{\n  DAT_20000e89 = inputParam1;\n  DAT_20000e8a = inputParam2;\n  DAT_20000e8b = inputParam3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_parameters_08000478",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_and_handle_memory_080004ac",
            "code": "\nvoid initializeAndHandleMemory_080004ac(void)\n\n{\n  int iVar1;\n  \n  fill_memory_0800b430(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initializeParameters(0,1,2);\n  DAT_20000e74 = 1;\n  iVar1 = checkAndInitializeMemory(DAT_20000e8c,&DAT_20000e90);\n  if (iVar1 == 0) {\n    handleErrorMessage(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_and_handle_memory_080004ac",
                "initialize_parameters_08000478": "initializeParameters",
                "check_and_initialize_memory_08004d7c": "checkAndInitializeMemory",
                "handle_error_message_08004030": "handleErrorMessage"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "process_float_values_080004fc",
            "code": "\nvoid processFloatValues_080004fc(undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3)\n\n{\n  undefined4 bits1;\n  \n  bits1 = extract_bits_08008e44(inputValue1);\n  DAT_20000e7c = calculate_floating_point_08009054(bits1,DAT_20000ebc);\n  bits1 = extract_bits_08008e44(inputValue2);\n  DAT_20000e80 = calculate_floating_point_08009054(bits1,DAT_20000ec0);\n  bits1 = extract_bits_08008e44(inputValue3);\n  DAT_20000e84 = calculate_floating_point_08009054(bits1,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "process_float_values_080004fc",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "uVar1": "bits1"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "decode_and_calculate_0800056c",
            "code": "\nundefined4 decode_and_calculate_0800056c(undefined4 input_value)\n\n{\n  undefined8 decoded_value;\n  \n  if (DAT_20000e73 != '\\0') {\n    decoded_value = decode(input_value);\n    decoded_value = calculate_result((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20),0x66666666,0x40396666);\n    input_value = calculate_float((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "decode_and_calculate_0800056c",
                "param_1": "input_value",
                "uVar1": "decoded_value",
                "decode_and_improve_08008590": "decode",
                "calculate_result_08008640": "calculate_result",
                "calculate_float_08008c30": "calculate_float"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "decode_and_process_data_080005b4",
            "code": "\nchar decode_and_process_data_080005b4(undefined4 input_data)\n\n{\n  int result;\n  undefined4 temp_var;\n  char error_code;\n  uint temp_var_2;\n  undefined4 temp_var_3;\n  undefined8 decoded_value;\n  undefined8 decoded_value_2;\n  undefined8 decoded_value_3;\n  undefined4 memory_block [4];\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 temp_var_4;\n  undefined4 temp_var_5;\n  undefined4 temp_block [6];\n  undefined4 input_char;\n  byte input_action;\n  undefined flag;\n  undefined4 float_param_1;\n  undefined4 float_result;\n  undefined is_float;\n  uint integer_param;\n  byte loop_counter_1;\n  byte loop_counter_2;\n  byte loop_counter_3;\n  byte loop_counter_4;\n  char float_flag;\n  uint param_5;\n  undefined4 param_6;\n  sbyte flag_temp;\n  char float_flag_temp;\n  char float_flag_temp_2;\n  undefined4 float_param;\n  byte flag_temp_2;\n  ushort flag_temp_3;\n  uint integer_temp;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    error_code = '\\f';\n  }\n  else {\n    flag = 0;\n    flag_temp_3 = 0;\n    flag_temp_2 = 0;\n    float_param = 0xbf800000;\n    float_flag_temp_2 = '\\0';\n    float_flag_temp = '\\0';\n    fill_memory_0800b430(temp_block + 3,0,0xc);\n    fill_memory_0800b430(temp_block,0,0xc);\n    DAT_20000e70 = '\\0';\n    flag_temp = 0;\n    while (result = parse_and_validate_character_0800184c(&input_action,temp_block + 6,input_data,&flag), result != 0) {\n      decoded_value = decode_and_improve_08008590(input_char);\n      decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n      integer_temp = extract_integer_08008ba0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n      if (input_action == 0x47) {\n        switch(integer_temp) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          flag_temp = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          flag_temp = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          flag_temp = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          flag_temp = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          flag_temp = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          flag_temp = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          flag_temp = 6;\n        }\n        switch(integer_temp) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          float_flag_temp = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          float_flag_temp = '\\x02';\n          break;\n        case 0x11:\n          initialize_parameters_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_parameters_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_parameters_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp_var = calculate_floating_point_08008eec(input_char,0x41200000);\n          decoded_value = decode_and_improve_08008590(temp_var);\n          decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          integer_temp = extract_integer_08008ba0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          switch(integer_temp) {\n          case 0x118:\n            float_flag_temp = '\\x03';\n            break;\n          case 0x119:\n            float_flag_temp = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            float_flag_temp = '\\x05';\n            break;\n          case 0x12d:\n            float_flag_temp = '\\x06';\n          }\n          break;\n        case 0x35:\n          float_flag_temp_2 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)integer_temp - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp_var = calculate_floating_point_08008eec(input_char,0x41200000);\n          decoded_value = decode_and_improve_08008590(temp_var);\n          decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          integer_temp = extract_integer_08008ba0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          if (integer_temp == 0x398) {\n            float_flag_temp = '\\a';\n          }\n          else if (integer_temp == 0x399) {\n            float_flag_temp = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (input_action == 0x4d) {\n        if (integer_temp == 0x1e) {\nLAB_08000b96:\n          flag_temp = 5;\n        }\n        else if ((int)integer_temp < 0x1f) {\n          if ((int)integer_temp < 3) {\n            if (-1 < (int)integer_temp) goto LAB_08000b96;\n          }\n          else if (integer_temp - 3 < 3) {\n            flag_temp = 8;\n          }\n        }\n        switch(integer_temp) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (flag_temp != 0) {\n        if (((int)(uint)flag_temp_3 >> flag_temp & 1U) == 0) {\n          flag_temp_3 = flag_temp_3 | (ushort)(1 << flag_temp);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        flag_temp = 0;\n      }\n    }\n    error_code = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      param_6 = 0;\n      param_5 = 0;\n      float_flag = '\\0';\n      flag = 0;\nswitchD_08000d18_caseD_47:\n      result = parse_and_validate_character_0800184c(&input_action,temp_block + 6,input_data,&flag);\n      if (result != 0) {\n        switch(input_action) {\n        case 0x46:\n          result = check_combine_result_0800923c(input_char,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = decode_and_calculate_0800056c(input_char);\n          }\n          else {\n            float_param = decode_and_calculate_0800056c(input_char);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_var_2 = (uint)input_action;\n          temp_var = decode_and_calculate_0800056c(input_char);\n          temp_block[temp_var_2 - 0x49] = temp_var;\n          break;\n        case 0x4c:\n          decoded_value = decode_and_improve_08008590(input_char);\n          decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          float_flag = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          break;\n        case 0x50:\n          param_6 = input_char;\n          break;\n        case 0x52:\n          param_5 = decode_and_calculate_0800056c(input_char);\n          break;\n        case 0x53:\n          result = check_if_input_empty_08009228(input_char,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = check_if_input_empty_08009228(input_char,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          decoded_value = decode_and_improve_08008590(input_char);\n          decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          DAT_20000e88 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          break;\n        case 0x58:\n          temp_block[3] = decode_and_calculate_0800056c(input_char);\n          flag_temp_2 = flag_temp_2 | 1;\n          break;\n        case 0x59:\n          temp_block[4] = decode_and_calculate_0800056c(input_char);\n          flag_temp_2 = flag_temp_2 | 2;\n          break;\n        case 0x5a:\n          temp_block[5] = decode_and_calculate_0800056c(input_char);\n          flag_temp_2 = flag_temp_2 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      error_code = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          handle_pointers_0800525c((int)DAT_20000e76);\n          handle_input_data_08000220(DAT_20000e77);\n        }\n        if ((flag_temp_3 & 0x200) != 0) {\n          result = check_and_initialize_memory_08004d7c(DAT_20000e8c,&param_4);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = param_4;\n          DAT_20000e94 = temp_var_4;\n          DAT_20000e98 = temp_var_5;\n        }\n        switch(float_flag_temp) {\n        case '\\x01':\n          result = check_if_input_empty_08009228(param_6,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              decode_and_handle_data_08002408(param_6);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          decoded_value = decode_and_improve_08008590(param_6);\n          decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          integer_temp = extract_integer_08008ba0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n          if ((((float_flag == '\\x02') || (float_flag == '\\x14')) && (-1 < (int)integer_temp)) &&\n             ((int)integer_temp < 7)) {\n            if ((flag_temp_2 == 0) && (float_flag == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)integer_temp < 1) {\n                integer_temp = (uint)DAT_20000e8c;\n              }\n              else {\n                integer_temp = integer_temp - 1;\n              }\n              result = check_and_initialize_memory_08004d7c(integer_temp & 0xff,memory_block);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (loop_counter_4 = 0; loop_counter_4 < 3; loop_counter_4 = loop_counter_4 + 1) {\n                if (((int)(uint)flag_temp_2 >> loop_counter_4 & 1U) != 0) {\n                  if (float_flag == '\\x14') {\n                    temp_var_2 = (uint)loop_counter_4;\n                    temp_var = calculate_floating_point_08008cd8(*(undefined4 *)(&DAT_20000e74 + (loop_counter_4 + 2) * 4),\n                                         temp_block[loop_counter_4 + 3]);\n                    memory_block[temp_var_2] = temp_var;\n                  }\n                  else {\n                    memory_block[loop_counter_4] = temp_block[loop_counter_4 + 3];\n                  }\n                }\n              }\n              process_and_initialize_data_08004bf4(integer_temp & 0xff,memory_block);\n              if (integer_temp == DAT_20000e8c) {\n                DAT_20000e90 = memory_block[0];\n                DAT_20000e94 = memory_block[1];\n                DAT_20000e98 = memory_block[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          flag_temp_2 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (flag_temp_2 != 0) {\n            for (loop_counter_3 = 0; loop_counter_3 < 3; loop_counter_3 = loop_counter_3 + 1) {\n              if (((int)(uint)flag_temp_2 >> loop_counter_3 & 1U) == 0) {\n                temp_block[loop_counter_3 + 3] = *(undefined4 *)(&DAT_20000e74 + (loop_counter_3 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_var_2 = (uint)loop_counter_3;\n                temp_var = calculate_float_08008cdc(temp_block[loop_counter_3 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (loop_counter_3 + 2) * 4));\n                temp_block[temp_var_2 + 3] = temp_var;\n              }\n              else {\n                temp_var_3 = temp_block[loop_counter_3 + 3];\n                temp_var = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (loop_counter_3 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (loop_counter_3 + 10) * 4));\n                temp_var_2 = (uint)loop_counter_3;\n                temp_var = calculate_float_08008cdc(temp_var_3,temp_var);\n                temp_block[temp_var_2 + 3] = temp_var;\n              }\n            }\n            handle_data_processing_08001e98(temp_block[3],temp_block[4],temp_block[5],DAT_20000ed0,0);\n          }\n          if (float_flag_temp == '\\x05') {\n            result = check_and_initialize_memory_08004d7c(7,memory_block + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = check_and_initialize_memory_08004d7c(6,memory_block + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          handle_data_processing_08001e98(memory_block[3],param_2,param_3,DAT_20000ed0,0);\n          DAT_20000e7c = memory_block[3];\n          DAT_20000e80 = param_2;\n          DAT_20000e84 = param_3;\n          flag_temp_2 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (float_flag_temp == '\\x06') {\n            process_and_initialize_data_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            process_and_initialize_data_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (flag_temp_2 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (loop_counter_2 = 0; loop_counter_2 < 3; loop_counter_2 = loop_counter_2 + 1) {\n              if (((int)(uint)flag_temp_2 >> loop_counter_2 & 1U) != 0) {\n                temp_var = calculate_floating_point_08008cd8(*(undefined4 *)(&DAT_20000e74 + (loop_counter_2 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (loop_counter_2 + 8) * 4));\n                temp_var_2 = (uint)loop_counter_2;\n                temp_var = calculate_floating_point_08008cd8(temp_var,temp_block[loop_counter_2 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_var_2 + 10) * 4) = temp_var;\n              }\n            }\n          }\n          flag_temp_2 = 0;\n          break;\n        case '\\b':\n          fill_memory_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((flag_temp_3 & 4) != 0) || (flag_temp_2 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = check_if_input_empty_08009228(float_param,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((float_flag_temp_2 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (loop_counter_1 = 0; loop_counter_1 < 3; loop_counter_1 = loop_counter_1 + 1) {\n            if (((int)(uint)flag_temp_2 >> loop_counter_1 & 1U) == 0) {\n              temp_block[loop_counter_1 + 3] = *(undefined4 *)(&DAT_20000e74 + (loop_counter_1 + 2) * 4);\n            }\n            else if (float_flag_temp_2 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_var_2 = (uint)loop_counter_1;\n                temp_var = calculate_float_08008cdc(temp_block[loop_counter_1 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (loop_counter_1 + 2) * 4));\n                temp_block[temp_var_2 + 3] = temp_var;\n              }\n              else {\n                temp_var_3 = temp_block[loop_counter_1 + 3];\n                temp_var = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (loop_counter_1 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (loop_counter_1 + 10) * 4));\n                temp_var_2 = (uint)loop_counter_1;\n                temp_var = calculate_float_08008cdc(temp_var_3,temp_var);\n                temp_block[temp_var_2 + 3] = temp_var;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (flag_temp_2 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              handle_data_processing_08001e98(temp_block[3],temp_block[4],temp_block[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (flag_temp_2 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp_var = float_param;\n              if (DAT_20000e72 == '\\0') {\n                temp_var = DAT_20000e78;\n              }\n              handle_data_processing_08001e98(temp_block[3],temp_block[4],temp_block[5],temp_var,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            flag_temp_2 = flag_temp_2 & ~(byte)(1 << DAT_20000e8b);\n            if ((flag_temp_2 == 0) ||\n               (((result = check_value_is_not_zero_08009214(param_5,0), result != 0 &&\n                 (result = check_value_is_not_zero_08009214(temp_block[DAT_20000e89],0), result != 0)) &&\n                (result = check_value_is_not_zero_08009214(temp_block[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = check_value_is_not_zero_08009214(param_5,0);\n              if (result == 0) {\n                float_result = calculate_floating_point_08008cd8(temp_block[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                float_param_1 = calculate_floating_point_08008cd8(temp_block[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                fill_memory_0800b430(temp_block,0,0xc);\n                temp_var = calculate_floating_point_08008eec(param_5,0x40800000);\n                temp_var = calculate_floating_point_08008eec(temp_var,param_5);\n                temp_var_3 = calculate_floating_point_08008eec(float_result,float_result);\n                temp_var = calculate_floating_point_08008cd8(temp_var,temp_var_3);\n                temp_var_3 = calculate_floating_point_08008eec(float_param_1,float_param_1);\n                integer_param = calculate_floating_point_08008cd8(temp_var,temp_var_3);\n                result = check_if_input_empty_08009228(integer_param,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                decoded_value = decode_and_improve_08008590(integer_param);\n                decoded_value = calculate_and_initialize_080098d0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n                decoded_value_2 = decode_and_improve_08008590(float_result);\n                decoded_value_3 = decode_and_improve_08008590(float_param_1);\n                decoded_value_2 = initialize_and_set_values_0800981c((int)decoded_value_2,(int)((ulonglong)decoded_value_2 >> 0x20),(int)decoded_value_3,\n                                     (int)((ulonglong)decoded_value_3 >> 0x20));\n                decoded_value = floating_point_conversion_08008894((int)decoded_value,(uint)((ulonglong)decoded_value >> 0x20) ^ 0x80000000,\n                                     (int)decoded_value_2,(int)((ulonglong)decoded_value_2 >> 0x20));\n                integer_param = calculate_float_08008c30((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  integer_param = integer_param ^ 0x80000000;\n                }\n                result = check_if_input_empty_08009228(param_5,0);\n                if (result != 0) {\n                  integer_param = integer_param ^ 0x80000000;\n                  param_5 = param_5 ^ 0x80000000;\n                }\n                temp_var = calculate_floating_point_08008eec(float_param_1,integer_param);\n                temp_var = calculate_floating_point_08008cd8(float_result,temp_var);\n                temp_var_2 = (uint)DAT_20000e89;\n                temp_var = calculate_floating_point_08008eec(temp_var,0x3f000000);\n                temp_block[temp_var_2] = temp_var;\n                temp_var = calculate_floating_point_08008eec(float_result,integer_param);\n                temp_var = calculate_float_08008cdc(temp_var,float_param_1);\n                temp_var_2 = (uint)DAT_20000e8a;\n                temp_var = calculate_floating_point_08008eec(temp_var,0x3f000000);\n                temp_block[temp_var_2] = temp_var;\n              }\n              else {\n                decoded_value = decode_and_improve_08008590(temp_block[DAT_20000e89]);\n                decoded_value_2 = decode_and_improve_08008590(temp_block[DAT_20000e8a]);\n                decoded_value = initialize_and_set_values_0800981c((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20),(int)decoded_value_2,\n                                     (int)((ulonglong)decoded_value_2 >> 0x20));\n                param_5 = calculate_float_08008c30((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n              }\n              is_float = DAT_20000e71 == '\\x02';\n              temp_var = float_param;\n              if (DAT_20000e72 == '\\0') {\n                temp_var = DAT_20000e78;\n              }\n              calculate_values_08001f00(&DAT_20000e7c,temp_block + 3,temp_block,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp_var,DAT_20000e72,param_5,is_float);\n            }\n            break;\n          case '\\x04':\n            if (flag_temp_2 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = temp_block[3];\n          DAT_20000e80 = temp_block[4];\n          DAT_20000e84 = temp_block[5];\n        }\n        error_code = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          handle_valid_pointers_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_system_and_check_flags_080025e8();\n            error_code = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            error_code = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return error_code;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "decode_and_process_data_080005b4",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "temp_var",
                "cVar3": "error_code",
                "uVar4": "temp_var_2",
                "uVar5": "temp_var_3",
                "uVar6": "decoded_value",
                "uVar7": "decoded_value_2",
                "uVar8": "decoded_value_3",
                "local_94": "memory_block",
                "local_84": "param_2",
                "local_80": "param_3",
                "local_7c": "param_4",
                "uStack_78": "temp_var_4",
                "uStack_74": "temp_var_5",
                "auStack_70": "temp_block",
                "local_58": "input_char",
                "local_52": "input_action",
                "local_51": "flag",
                "local_50": "float_param_1",
                "local_4c": "float_result",
                "local_45": "is_float",
                "local_44": "integer_param",
                "local_3d": "loop_counter_1",
                "local_3c": "loop_counter_2",
                "local_3b": "loop_counter_3",
                "local_3a": "loop_counter_4",
                "local_39": "float_flag",
                "local_38": "param_5",
                "local_34": "param_6",
                "local_2f": "flag_temp",
                "local_2e": "float_flag_temp",
                "local_2d": "float_flag_temp_2",
                "local_2c": "float_param",
                "local_27": "flag_temp_2",
                "local_26": "flag_temp_3",
                "local_24": "integer_temp"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "parse_and_validate_character_0800184c",
            "code": "\nundefined4 parse_and_validate_character_0800184c(byte *output_character,undefined4 max_output_length,int input_data,byte *input_index)\n\n{\n  int parse_integer_result;\n  undefined4 return_value;\n  \n  if (*(char *)(input_data + (uint)*input_index) == '\\0') {\n    return_value = 0;\n  }\n  else {\n    *output_character = *(byte *)(input_data + (uint)*input_index);\n    if ((*output_character < 0x41) || (0x5a < *output_character)) {\n      DAT_20000e70 = 2;\n      return_value = 0;\n    }\n    else {\n      *input_index = *input_index + 1;\n      parse_integer_result = parse_integer_08002638(input_data,input_index,max_output_length);\n      if (parse_integer_result == 0) {\n        DAT_20000e70 = 1;\n        return_value = 0;\n      }\n      else {\n        return_value = 1;\n      }\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "parse_and_validate_character_0800184c",
                "param_1": "output_character",
                "param_2": "max_output_length",
                "param_3": "input_data",
                "param_4": "input_index",
                "iVar1": "parse_integer_result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_flag_with_param_080018cc",
            "code": "\n\n\nvoid updateFlagWithParam_080018cc(uint flag)\n\n{\n  _DAT_40021014 = flag | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_flag_with_param_080018cc",
                "param_1": "flag"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_memory_address_080018fc",
            "code": "\n\n\nvoid updateMemoryAddress_080018fc(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_memory_address_080018fc",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "check_flag_status_0800192c",
            "code": "\nvoid checkFlagStatus_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "check_flag_status_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_and_check_system_0800195c",
            "code": "\nvoid initialize_and_check_system_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_system_and_check_flags_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_and_check_system_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "decode_and_calculate_08001994",
            "code": "\nvoid decode_and_calculate_08001994(byte flags,char param2_flag,char param3_flag,undefined4 param4_data)\n\n{\n  undefined4 result;\n  uint max_value;\n  undefined8 shifted_value;\n  undefined8 init_value;\n  byte function_flags;\n  uint product_1;\n  uint product_2;\n  uint product_3;\n  ushort flag1;\n  uint product_4;\n  int shifted_value_2;\n  undefined4 float_value;\n  uint max_product;\n  uint final_value;\n  ushort updated_flag;\n  uint flag;\n  uint accumulator;\n  int difference;\n  int accumulator_1;\n  int accumulator_2;\n  int accumulator_3;\n  ushort shifted_flag_value;\n  uint min_value;\n  char counter;\n  \n  counter = '\\0';\n  fill_memory_0800b430(&product_1,0,0xc);\n  if ((flags & 1) != 0) {\n    counter = counter + '\\x01';\n    shifted_value = decode_and_improve_08008590(DAT_20000ebc);\n    product_1 = calculate_product_080095b8((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    counter = counter + '\\x01';\n    shifted_value = decode_and_improve_08008590(DAT_20000ec0);\n    product_2 = calculate_product_080095b8((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    counter = counter + '\\x01';\n    shifted_value = decode_and_improve_08008590(DAT_20000ec4);\n    product_3 = calculate_product_080095b8((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  }\n  max_value = product_3;\n  if (product_3 < product_2) {\n    max_value = product_2;\n  }\n  max_product = product_1;\n  if (product_1 < max_value) {\n    max_product = max_value;\n  }\n  shifted_value = shift_and_concatenate_0800854c(max_product);\n  init_value = shift_and_concatenate_0800854c(counter);\n  init_value = calculate_and_initialize_080098d0((int)init_value,(int)((ulonglong)init_value >> 0x20));\n  shifted_value = floating_point_conversion_08008894((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),(int)init_value,\n                       (int)((ulonglong)init_value >> 0x20));\n  float_value = calculate_float_08008c30((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  result = calculate_floating_point_08008eec(DAT_20000edc,float_value);\n  result = calculate_floating_point_08009054(result,0x453b8000);\n  shifted_value = decode_and_improve_08008590(result);\n  shifted_value = calculate_float_08009318((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  shifted_value_2 = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  shifted_value = shift_and_concatenate_0800854c(counter);\n  shifted_value = calculate_and_initialize_080098d0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  init_value = decode_and_improve_08008590(param4_data);\n  shifted_value = calculate_result_08008640((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20),(int)init_value,\n                       (int)((ulonglong)init_value >> 0x20));\n  result = calculate_float_08008c30((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  result = calculate_floating_point_08008eec(float_value,result);\n  result = calculate_floating_point_08009054(0x4c64e1c0,result);\n  shifted_value = decode_and_improve_08008590(result);\n  product_4 = calculate_product_080095b8((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n  min_value = 75000;\n  if (product_4 < 75000) {\n    min_value = product_4;\n  }\n  flag1 = DAT_20000ed4;\n  shifted_flag_value = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (param2_flag == '\\0') {\n    shifted_flag_value = shifted_flag_value ^ 0xaa0;\n  }\n  update_memory_address_080018fc(shifted_flag_value);\n  update_flag_with_param_080018cc(flag1);\n  accumulator_1 = -(max_product >> 1);\n  difference = min_value - DAT_20000ec9;\n  accumulator = 0;\n  flag = 10000;\n  function_flags = flags;\n  accumulator_2 = accumulator_1;\n  accumulator_3 = accumulator_1;\n  while( true ) {\n    updated_flag = flag1;\n    final_value = calculate_final_value_080078f4();\n    if (param3_flag == '\\0') {\n      final_value = final_value ^ 0x1e;\n    }\n    if (((function_flags & 1) != 0) && (accumulator_3 = accumulator_3 + product_1, 0 < accumulator_3)) {\n      if ((final_value & 0x10) == 0) {\n        function_flags = function_flags & 0xfe;\n      }\n      else {\n        updated_flag = updated_flag ^ 0x10;\n      }\n      accumulator_3 = accumulator_3 - max_product;\n    }\n    if (((function_flags & 2) != 0) && (accumulator_2 = accumulator_2 + product_2, 0 < accumulator_2)) {\n      if ((final_value & 8) == 0) {\n        function_flags = function_flags & 0xfd;\n      }\n      else {\n        updated_flag = updated_flag ^ 0x440;\n      }\n      accumulator_2 = accumulator_2 - max_product;\n    }\n    if (((function_flags & 4) != 0) && (accumulator_1 = accumulator_1 + product_3, 0 < accumulator_1)) {\n      if ((final_value & 4) == 0) {\n        function_flags = function_flags & 0xfb;\n      }\n      else {\n        updated_flag = updated_flag ^ 0x100;\n      }\n      accumulator_1 = accumulator_1 - max_product;\n    }\n    if ((function_flags == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_flag_with_param_080018cc(updated_flag);\n    FUNC_08002828(DAT_20000ec9);\n    update_flag_with_param_080018cc(flag1);\n    FUNC_08002828(difference);\n    if ((product_4 < min_value) && (flag = min_value + flag, 20000 < flag)) {\n      flag = flag - 20000;\n      accumulator = shifted_value_2 + accumulator;\n      min_value = 60000000 / accumulator;\n      if (min_value < product_4) {\n        min_value = product_4;\n      }\n      difference = min_value - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "decode_and_calculate_08001994",
                "param_1": "flags",
                "param_2": "param2_flag",
                "param_3": "param3_flag",
                "param_4": "param4_data",
                "uVar1": "result",
                "uVar2": "max_value",
                "uVar3": "shifted_value",
                "uVar4": "init_value",
                "local_61": "function_flags",
                "local_5c": "product_1",
                "local_58": "product_2",
                "local_54": "product_3",
                "local_4e": "flag1",
                "local_4c": "product_4",
                "local_48": "shifted_value_2",
                "local_44": "float_value",
                "local_40": "max_product",
                "local_3c": "final_value",
                "local_36": "updated_flag",
                "local_34": "flag",
                "local_30": "accumulator",
                "local_2c": "difference",
                "local_28": "accumulator_1",
                "local_24": "accumulator_2",
                "local_20": "accumulator_3",
                "local_1a": "shifted_flag_value",
                "local_18": "min_value",
                "local_11": "counter"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_decode_data_08001d4c",
            "code": "\nvoid initialize_and_decode_data_08001d4c(void)\n\n{\n  char updated_count;\n  char loop_count;\n  \n  initialize_and_set_flags();\n  decode_and_calculate(4,1,0,DAT_20000eec);\n  decode_and_calculate(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loop_count = '\\x02';\n  while( true ) {\n    updated_count = loop_count + -1;\n    if (loop_count == '\\0') break;\n    decode_and_calculate(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loop_count = updated_count;\n    if ('\\0' < updated_count) {\n      decode_and_calculate(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  reset_and_check_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_decode_data_08001d4c",
                "local_9": "loop_count",
                "cVar1": "updated_count",
                "initialize_and_set_flags_08005790": "initialize_and_set_flags",
                "decode_and_calculate_08001994": "decode_and_calculate",
                "reset_and_check_flags_080057e4": "reset_and_check_flags"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "run_application_08001ddc",
            "code": "\nvoid runApplication_08001ddc(void)\n\n{\n  FUNC_08008244();\n  initializeBinary();\n  initializeAndCheckFlags();\n  fillMemory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initializeMemory();\n      initializeAndHandleMemory();\n      initializeAndSetup();\n      initializeData();\n      initializeSystem();\n      checkFlagStatus();\n      initializeData();\n      initializeAndProcessValues();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        displayStatusMessage(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        processMemoryAndData();\n      }\n    }\n    handleAlarm();\n    processUserInput();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "run_application_08001ddc",
                "initialize_binary_080051b4": "initializeBinary",
                "initialize_and_check_flags_0800583c": "initializeAndCheckFlags",
                "fill_memory_0800b430": "fillMemory",
                "initialize_memory_08002f24": "initializeMemory",
                "initialize_and_handle_memory_080004ac": "initializeAndHandleMemory",
                "initialize_and_setup_080039a0": "initializeAndSetup",
                "initialize_data_08005238": "initializeData",
                "initialize_system_080001f8": "initializeSystem",
                "check_flag_status_0800192c": "checkFlagStatus",
                "initialize_data_08005814": "initializeData",
                "initialize_and_process_values_0800283a": "initializeAndProcessValues",
                "display_status_message_080041a0": "displayStatusMessage",
                "process_memory_and_data_080039bc": "processMemoryAndData",
                "handle_alarm_08003a74": "handleAlarm",
                "process_user_input_08003f34": "processUserInput"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "handle_data_processing_08001e98",
            "code": "\nvoid handle_data_processing_08001e98(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined param5)\n\n{\n  int isEqual;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      handle_alarm_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      isEqual = is_data_equal_08002fac();\n    } while (isEqual != 0);\n    calculate_and_improve(param1,param2,param3,param4,param5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_flags();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "handle_data_processing_08001e98",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "isEqual",
                "calculate_and_improve_08003004": "calculate_and_improve",
                "initialize_flags_0800585c": "initialize_flags"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_values_08001f00",
            "code": "\nvoid calculateValues_08001f00(int inputBuffer1,undefined4 *inputBuffer2,int inputBuffer3,byte byteParam1,byte byteParam2,byte byteParam3\n                 ,undefined4 param7,char param8,undefined4 param9,char param10)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int result;\n  uint tempResult;\n  undefined8 decodedResult1;\n  undefined8 decodedResult2;\n  uint floatValues [4];\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  ushort localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  undefined4 localVar10;\n  uint tempValue1;\n  undefined4 tempValue2;\n  undefined4 tempFloat1;\n  char tempChar;\n  ushort tempUShort;\n  undefined4 finalResult;\n  uint localVar11;\n  uint localVar12;\n  \n  tempFloat1 = calculate_float_08008cdc(*(undefined4 *)((uint)byteParam1 * 4 + inputBuffer1),\n                          *(undefined4 *)((uint)byteParam1 * 4 + inputBuffer3));\n  tempValue2 = calculate_float_08008cdc(*(undefined4 *)((uint)byteParam2 * 4 + inputBuffer1),\n                          *(undefined4 *)((uint)byteParam2 * 4 + inputBuffer3));\n  tempValue1 = calculate_floating_point_08008cd8(inputBuffer2[byteParam3],*(undefined4 *)((uint)byteParam3 * 4 + inputBuffer1));\n  localVar12 = *(uint *)((uint)byteParam1 * 4 + inputBuffer3) ^ 0x80000000;\n  localVar11 = *(uint *)((uint)byteParam2 * 4 + inputBuffer3) ^ 0x80000000;\n  localVar10 = calculate_floating_point_08008cd8(inputBuffer2[byteParam1],tempFloat1);\n  localVar9 = calculate_floating_point_08008cd8(inputBuffer2[byteParam2],tempValue2);\n  uVar1 = calculate_floating_point_08008eec(localVar12,localVar9);\n  uVar2 = calculate_floating_point_08008eec(localVar11,localVar10);\n  uVar1 = calculate_floating_point_08008cd8(uVar1,uVar2);\n  decodedResult1 = decode_and_improve_08008590(uVar1);\n  uVar1 = calculate_floating_point_08008eec(localVar12,localVar10);\n  uVar2 = calculate_floating_point_08008eec(localVar11,localVar9);\n  uVar1 = calculate_float_08008cdc(uVar1,uVar2);\n  decodedResult2 = decode_and_improve_08008590(uVar1);\n  decodedResult1 = calculate_value_thunk_08009990((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                             (int)((ulonglong)decodedResult2 >> 0x20));\n  finalResult = calculate_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n  if (param10 == '\\0') {\n    result = check_combine_result_0800923c(finalResult,0);\n    if (result != 0) {\n      decodedResult1 = decode_and_improve_08008590(finalResult);\n      decodedResult1 = calculate_sum_080082d4((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0x54442d18,0x401921fb);\n      finalResult = calculate_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    }\n  }\n  else {\n    result = check_combination_08009250(finalResult,0);\n    if (result != 0) {\n      decodedResult1 = decode_and_improve_08008590(finalResult);\n      decodedResult1 = calculate_result_080082d0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0x54442d18,0x401921fb);\n      finalResult = calculate_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    }\n  }\n  uVar1 = calculate_floating_point_08008eec(finalResult,param9);\n  decodedResult1 = decode_and_improve_08008590(uVar1);\n  decodedResult2 = decode_and_improve_08008590(tempValue1 & 0x7fffffff);\n  decodedResult1 = initialize_and_set_values_0800981c((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                       (int)((ulonglong)decodedResult2 >> 0x20));\n  localVar8 = calculate_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n  result = check_value_is_not_zero_08009214(localVar8,0);\n  if (result == 0) {\n    uVar1 = calculate_floating_point_08009054(localVar8,DAT_20000ed8);\n    decodedResult1 = decode_and_improve_08008590(uVar1);\n    decodedResult1 = calculate_result_080094c0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVar7 = calculate_shifted_value_08008bf0((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    if (param8 != '\\0') {\n      uVar1 = extract_bits_08008e44(localVar7);\n      param7 = calculate_floating_point_08008eec(param7,uVar1);\n    }\n    uVar1 = extract_bits_08008e44(localVar7);\n    localVar6 = calculate_floating_point_08009054(finalResult,uVar1);\n    uVar1 = extract_bits_08008e44(localVar7);\n    localVar5 = calculate_floating_point_08009054(tempValue1,uVar1);\n    decodedResult1 = decode_and_improve_08008590(localVar6);\n    decodedResult1 = calculate_result_08008640((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),0,0x3fe00000);\n    decodedResult2 = decode_and_improve_08008590(localVar6);\n    decodedResult1 = calculate_result_08008640((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20),(int)decodedResult2,\n                         (int)((ulonglong)decodedResult2 >> 0x20));\n    decodedResult1 = calculate_result_080082d0(0,0x3ff00000,(int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVar4 = calculate_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n    localVar3 = localVar6;\n    tempChar = '\\0';\n    floatValues[byteParam3] = *(uint *)(inputBuffer1 + (uint)byteParam3 * 4);\n    for (tempUShort = 1; tempUShort < localVar7; tempUShort = tempUShort + 1) {\n      if ((int)tempChar < (int)(uint)DAT_20000efa) {\n        uVar1 = calculate_floating_point_08008eec(localVar12,localVar3);\n        uVar2 = calculate_floating_point_08008eec(localVar11,localVar4);\n        floatValues[3] = calculate_float_08008cdc(uVar1,uVar2);\n        uVar1 = calculate_floating_point_08008eec(localVar12,localVar4);\n        uVar2 = calculate_floating_point_08008eec(localVar11,localVar3);\n        localVar12 = calculate_floating_point_08008cd8(uVar1,uVar2);\n        localVar11 = floatValues[3];\n        tempChar = tempChar + '\\x01';\n      }\n      else {\n        uVar1 = extract_bits_08008e44(tempUShort);\n        uVar1 = calculate_floating_point_08008eec(uVar1,localVar6);\n        decodedResult1 = decode_and_improve_08008590(uVar1);\n        decodedResult1 = calculate_result_08009410((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        localVar2 = calculate_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        uVar1 = extract_bits_08008e44(tempUShort);\n        uVar1 = calculate_floating_point_08008eec(uVar1,localVar6);\n        decodedResult1 = decode_and_improve_08008590(uVar1);\n        decodedResult1 = calculate_improved_result_080096e8((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        localVar1 = calculate_float_08008c30((int)decodedResult1,(int)((ulonglong)decodedResult1 >> 0x20));\n        uVar1 = calculate_floating_point_08008eec(*(uint *)((uint)byteParam1 * 4 + inputBuffer3) ^ 0x80000000,localVar2);\n        uVar2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)byteParam2 * 4 + inputBuffer3),localVar1);\n        localVar12 = calculate_float_08008cdc(uVar1,uVar2);\n        uVar1 = calculate_floating_point_08008eec(*(uint *)((uint)byteParam1 * 4 + inputBuffer3) ^ 0x80000000,localVar1);\n        uVar2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)byteParam2 * 4 + inputBuffer3),localVar2);\n        localVar11 = calculate_floating_point_08008cd8(uVar1,uVar2);\n        tempChar = '\\0';\n      }\n      tempResult = calculate_float_08008cdc(tempFloat1,localVar12);\n      floatValues[byteParam1] = tempResult;\n      tempResult = calculate_float_08008cdc(tempValue2,localVar11);\n      floatValues[byteParam2] = tempResult;\n      tempResult = calculate_float_08008cdc(floatValues[byteParam3],localVar5);\n      floatValues[byteParam3] = tempResult;\n      handle_data_processing_08001e98(floatValues[0],floatValues[1],floatValues[2],param7,param8);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    handle_data_processing_08001e98(*inputBuffer2,inputBuffer2[1],inputBuffer2[2],param7,param8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_values_08001f00",
                "param_1": "inputBuffer1",
                "param_2": "inputBuffer2",
                "param_3": "inputBuffer3",
                "param_4": "byteParam1",
                "param_5": "byteParam2",
                "param_6": "byteParam3",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "iVar3": "result",
                "uVar4": "tempResult",
                "uVar5": "decodedResult1",
                "uVar6": "decodedResult2",
                "local_6c": "floatValues",
                "local_5c": "localVar1",
                "local_58": "localVar2",
                "local_54": "localVar3",
                "local_50": "localVar4",
                "local_4c": "localVar5",
                "local_48": "localVar6",
                "local_42": "localVar7",
                "local_40": "localVar8",
                "local_3c": "localVar9",
                "local_38": "localVar10",
                "local_34": "tempValue1",
                "local_30": "tempValue2",
                "local_2c": "tempFloat1",
                "local_27": "tempChar",
                "local_26": "tempUShort",
                "local_24": "finalResult",
                "local_20": "localVar11",
                "local_1c": "localVar12"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "decode_and_handle_data_08002408",
            "code": "\nvoid decode_and_handle_data_08002408(undefined4 input_data)\n\n{\n  undefined2 result_shifted_value;\n  undefined4 floating_point_value_1;\n  undefined4 extracted_bits;\n  undefined8 decoded_improved_value;\n  ushort loop_counter;\n  \n  floating_point_value_1 = calculate_floating_point_08008eec(input_data,0x41a00000);\n  decoded_improved_value = decode_and_improve_08008590(floating_point_value_1);\n  decoded_improved_value = calculate_result_080094c0((int)decoded_improved_value,(int)((ulonglong)decoded_improved_value >> 0x20));\n  loop_counter = calculate_shifted_value_08008bf0((int)decoded_improved_value,(int)((ulonglong)decoded_improved_value >> 0x20));\n  handle_valid_pointers_08002fd4();\n  floating_point_value_1 = calculate_floating_point_08008eec(input_data,0x447a0000);\n  extracted_bits = extract_bits_08008e44((uint)loop_counter * 0x32);\n  floating_point_value_1 = calculate_floating_point_08008cd8(floating_point_value_1,extracted_bits);\n  decoded_improved_value = decode_and_improve_08008590(floating_point_value_1);\n  decoded_improved_value = calculate_result_080094c0((int)decoded_improved_value,(int)((ulonglong)decoded_improved_value >> 0x20));\n  result_shifted_value = calculate_shifted_value_08008bf0((int)decoded_improved_value,(int)((ulonglong)decoded_improved_value >> 0x20));\n  FUNC_08002814(result_shifted_value);\n  while ((loop_counter != 0 && (handle_alarm_08003a74(), DAT_20000ea8 == '\\0'))) {\n    initialize_data_080002a0(0x32);\n    loop_counter = loop_counter - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "decode_and_handle_data_08002408",
                "param_1": "input_data",
                "uVar1": "result_shifted_value",
                "uVar2": "floating_point_value_1",
                "uVar3": "extracted_bits",
                "uVar4": "decoded_improved_value",
                "local_12": "loop_counter"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_data_and_process_080024c4",
            "code": "\nvoid initializeDataAndProcess_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char variable1;\n  char variable2;\n  char variable3;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initialize_and_decode_data_08001d4c();\n  handle_alarm_08003a74();\n  if (DAT_20000ea8 == '\\0') {\n    fillMemory(&DAT_20000eac,0,0xc);\n    initializeAndProcessValues();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      variable3 = -1;\n    }\n    else {\n      variable3 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      variable2 = -1;\n    }\n    else {\n      variable2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      variable1 = -1;\n    }\n    else {\n      variable1 = '\\x01';\n    }\n    uVar1 = extractBits((int)variable3);\n    uVar1 = calculateFloatingPoint(uVar1,DAT_20000ef4);\n    uVar2 = extractBits((int)variable2);\n    uVar2 = calculateFloatingPoint(uVar2,DAT_20000ef4);\n    uVar3 = extractBits((int)variable1);\n    uVar3 = calculateFloatingPoint(uVar3,DAT_20000ef4);\n    handleDataProcessing(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initializeFlags();\n    handleValidPointers();\n    initializeAndProcessValues();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_data_and_process_080024c4",
                "local_13": "variable1",
                "local_12": "variable2",
                "local_11": "variable3",
                "fill_memory_0800b430": "fillMemory",
                "initialize_and_process_values_0800283a": "initializeAndProcessValues",
                "extract_bits_08008e44": "extractBits",
                "calculate_floating_point_08008eec": "calculateFloatingPoint",
                "handle_data_processing_08001e98": "handleDataProcessing",
                "initialize_flags_0800585c": "initializeFlags",
                "handle_valid_pointers_08002fd4": "handleValidPointers",
                "flag": "newFlag"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_system_and_check_flags_080025e8",
            "code": "\nvoid initialize_system_and_check_flags_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    execute_initialization();\n    initialize_system();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      reset_and_check_flags();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_system_and_check_flags_080025e8",
                "execute_initialization_08005250": "execute_initialization",
                "initialize_system_08000210": "initialize_system",
                "reset_and_check_flags_080057e4": "reset_and_check_flags"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_08002638",
            "code": "\nundefined4 parseInteger_08002638(int param1,byte *param2,uint *param3)\n\n{\n  byte digit;\n  bool isNegative;\n  bool isFloating;\n  int result;\n  char *currentChar;\n  char *nextChar;\n  undefined4 success;\n  undefined8 tempResult;\n  uint temp;\n  byte digitCount;\n  char decimalCount;\n  int integerResult;\n  char firstChar;\n  char *currentPtr;\n  \n  nextChar = (char *)(param1 + (uint)*param2);\n  currentChar = nextChar + 1;\n  firstChar = *nextChar;\n  isNegative = false;\n  if (firstChar == '-') {\n    isNegative = true;\n    firstChar = *currentChar;\n    currentPtr = nextChar + 2;\n  }\n  else {\n    currentPtr = currentChar;\n    if (firstChar == '+') {\n      currentPtr = nextChar + 2;\n      firstChar = *currentChar;\n    }\n  }\n  integerResult = 0;\n  decimalCount = '\\0';\n  digitCount = 0;\n  isFloating = false;\n  do {\n    digit = firstChar - 0x30;\n    if (digit < 10) {\n      digitCount = digitCount + 1;\n      if (digitCount < 9) {\n        if (isFloating) {\n          decimalCount = decimalCount + -1;\n        }\n        integerResult = (uint)digit + integerResult * 10;\n      }\n      else if (!isFloating) {\n        decimalCount = decimalCount + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (isFloating)) {\n        if (digitCount == 0) {\n          success = 0;\n        }\n        else {\n          temp = calculate_result_08008e3c(integerResult);\n          result = check_value_is_not_zero_08009214(temp,0);\n          if (result == 0) {\n            for (; decimalCount < -1; decimalCount = decimalCount + '\\x02') {\n              tempResult = decode_and_improve_08008590(temp);\n              tempResult = calculate_result_08008640((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              temp = calculate_float_08008c30((int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n            }\n            if (decimalCount < '\\0') {\n              tempResult = decode_and_improve_08008590(temp);\n              tempResult = calculate_result_08008640((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              temp = calculate_float_08008c30((int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimalCount; decimalCount = decimalCount + -1) {\n                temp = calculate_floating_point_08008eec(temp,0x41200000);\n              }\n            }\n          }\n          if (isNegative) {\n            *param3 = temp ^ 0x80000000;\n          }\n          else {\n            *param3 = temp;\n          }\n          *param2 = ((char)currentPtr - (char)param1) - 1;\n          success = 1;\n        }\n        return success;\n      }\n      isFloating = true;\n    }\n    firstChar = *currentPtr;\n    currentPtr = currentPtr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "bVar1": "digit",
                "bVar2": "isNegative",
                "bVar3": "isFloating",
                "iVar4": "result",
                "pcVar5": "currentChar",
                "pcVar6": "nextChar",
                "uVar7": "success",
                "uVar8": "tempResult",
                "local_1c": "temp",
                "local_16": "digitCount",
                "local_15": "decimalCount",
                "local_14": "integerResult",
                "local_d": "firstChar",
                "local_c": "currentPtr"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_process_values_0800283a",
            "code": "\nvoid initialize_and_process_values_0800283a(void)\n\n{\n  initialize_params_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  process_float_values_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_process_values_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_check_limit_08002870",
            "code": "\nchar incrementAndCheckLimit_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_check_limit_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_default_08002896",
            "code": "\nchar decrement_and_default_08002896(char input)\n\n{\n  char result;\n  \n  result = input;\n  if (input == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_default_08002896",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_result_080028bc",
            "code": "\nundefined4 calculate_result_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_floating_point_08008eec(input_2,input_2);\n  result_2 = calculate_floating_point_08008eec(input_1,input_1);\n  result_1 = calculate_floating_point_08008cd8(result_1,result_2);\n  result_2 = calculate_float_08008cdc(input_3,input_3);\n  result_1 = calculate_floating_point_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_final_result_08002908",
            "code": "\nundefined4 calculate_final_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_float_08008cdc(input_3,input_3);\n  result_1 = calculate_floating_point_08008eec(result_1,input_4);\n  result_2 = calculate_floating_point_08008eec(input_1,input_1);\n  result_1 = calculate_floating_point_08008cd8(result_1,result_2);\n  result_2 = calculate_floating_point_08008eec(input_2,input_2);\n  result_1 = calculate_float_08008cdc(result_1,result_2);\n  result_2 = calculate_floating_point_08008eec(input_3,0x40800000);\n  result_1 = calculate_floating_point_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_final_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_and_initialize_values_08002978",
            "code": "\nundefined4 calculate_and_initialize_values_08002978(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined8 decoded_value;\n  \n  result_1 = calculate_floating_point_08008eec(input_param_2,input_param_2);\n  result_2 = calculate_float_08008cdc(input_param_1,input_param_1);\n  result_2 = calculate_floating_point_08008eec(result_2,input_param_3);\n  result_1 = calculate_floating_point_08008cd8(result_1,result_2);\n  decoded_value = decode_and_improve_08008590(result_1);\n  decoded_value = calculate_and_initialize_080098d0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  result_1 = calculate_float_08008c30((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_and_initialize_values_08002978",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "decoded_value"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "initialize_output_080029d8",
            "code": "\nvoid initializeOutput_080029d8(undefined4 output,int input1,int input2)\n\n{\n  int checkResult;\n  undefined4 calculatedValue;\n  undefined4 tempValue;\n  \n  if (((input1 != 0) && (input2 != 0)) &&\n     (checkResult = checkValueNotZero(*(undefined4 *)(input1 + 0x18),*(undefined4 *)(input1 + 0x1c)),\n     checkResult == 0)) {\n    if ((*(char *)(input1 + 0x25) == '\\0') &&\n       (checkResult = checkIsEmpty(*(undefined4 *)(input1 + 0x1c),*(undefined4 *)(input2 + 0x18)),\n       checkResult != 0)) {\n      tempValue = *(undefined4 *)(input1 + 0x1c);\n      calculatedValue = calculateAndInitialize(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input2 + 0x18),\n                           *(undefined4 *)(input1 + 0x20));\n      checkResult = checkInputEmpty(tempValue,calculatedValue);\n      if (checkResult == 0) {\n        calculatedValue = calculateAndInitialize(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input2 + 0x18),\n                             *(undefined4 *)(input1 + 0x20));\n      }\n      else {\n        calculatedValue = *(undefined4 *)(input1 + 0x1c);\n      }\n      *(undefined4 *)(input1 + 0x18) = calculatedValue;\n    }\n    else {\n      *(undefined4 *)(input1 + 0x18) = *(undefined4 *)(input1 + 0x1c);\n    }\n    *(undefined *)(input1 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "initialize_output_080029d8",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "iVar1": "checkResult",
                "uVar2": "calculatedValue",
                "uVar3": "tempValue",
                "check_value_is_not_zero_08009214": "checkValueNotZero",
                "check_if_empty_08009264": "checkIsEmpty",
                "calculate_and_initialize_values_08002978": "calculateAndInitialize",
                "check_if_input_empty_08009228": "checkInputEmpty"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "process_output_08002a94",
            "code": "\nvoid processOutput_08002a94(void)\n\n{\n  undefined *tempPtr;\n  undefined *outputPtr;\n  undefined *prevOutputPtr;\n  byte inputByte;\n  \n  inputByte = DAT_20000cf0;\n  outputPtr = (undefined *)0x0;\n  prevOutputPtr = (undefined *)0x0;\n  while (tempPtr = prevOutputPtr, inputByte != DAT_20000cf1) {\n    inputByte = decrement_and_default_08002896(inputByte);\n    prevOutputPtr = outputPtr;\n    initialize_output_080029d8(&DAT_20000870 + (uint)inputByte * 0x40,outputPtr,tempPtr);\n    outputPtr = &DAT_20000870 + (uint)inputByte * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "process_output_08002a94",
                "local_9": "inputByte",
                "local_18": "outputPtr",
                "local_14": "prevOutputPtr",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "check_and_update_values_08002afc",
            "code": "\nvoid checkAndUpdateValues_08002afc(int inputPtr,int outputPtr)\n\n{\n  int checkResult;\n  undefined4 newValue;\n  undefined4 originalValue;\n  \n  if (((inputPtr != 0) && (*(char *)(inputPtr + 0x25) == '\\0')) &&\n     (checkResult = check_if_input_empty_08009228(*(undefined4 *)(inputPtr + 0x18),*(undefined4 *)(outputPtr + 0x18)),\n     checkResult != 0)) {\n    originalValue = *(undefined4 *)(outputPtr + 0x18);\n    newValue = calculate_and_initialize_values_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(inputPtr + 0x18),\n                         *(undefined4 *)(inputPtr + 0x20));\n    checkResult = check_if_input_empty_08009228(originalValue,newValue);\n    if (checkResult == 0) {\n      newValue = calculate_and_initialize_values_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(inputPtr + 0x18),\n                           *(undefined4 *)(inputPtr + 0x20));\n    }\n    else {\n      newValue = *(undefined4 *)(outputPtr + 0x18);\n    }\n    checkResult = check_value_is_not_zero_08009214(newValue,*(undefined4 *)(outputPtr + 0x18));\n    if (checkResult == 0) {\n      *(undefined4 *)(outputPtr + 0x18) = newValue;\n      *(undefined *)(outputPtr + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "check_and_update_values_08002afc",
                "param_1": "inputPtr",
                "param_2": "outputPtr",
                "iVar1": "checkResult",
                "uVar2": "newValue",
                "uVar3": "originalValue"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "update_values_08002ba8",
            "code": "\nvoid update_values_08002ba8(void)\n\n{\n  uint uVar1;\n  undefined *previous_values;\n  undefined *current_values;\n  undefined *temp_previous;\n  undefined *temp_current;\n  byte current_byte;\n  \n  temp_previous = (undefined *)0x0;\n  temp_current = (undefined *)0x0;\n  current_byte = DAT_20000cf1;\n  current_values = (undefined *)0x0;\n  while (previous_values = temp_previous, current_byte != DAT_20000cf0) {\n    temp_previous = temp_current;\n    uVar1 = (uint)current_byte;\n    check_and_update_values_08002ba8_08002afc(previous_values,temp_current,&DAT_20000870 + uVar1 * 0x40);\n    current_byte = increment_and_check_limit_08002870(current_byte);\n    current_values = previous_values;\n    temp_current = &DAT_20000870 + uVar1 * 0x40;\n  }\n  check_and_update_values_08002ba8_08002afc(temp_previous,temp_current,0,temp_previous,current_values);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "update_values_08002ba8",
                "puVar2": "previous_values",
                "puVar3": "current_values",
                "local_14": "temp_previous",
                "local_10": "temp_current",
                "local_9": "current_byte"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "improve_calculations_08002c18",
            "code": "\nvoid improveCalculations_08002c18(int data,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 result1;\n  int integerValue;\n  undefined4 result2;\n  undefined4 bits1;\n  undefined4 bits2;\n  uint extractedInteger;\n  undefined8 floatResult;\n  int finalResult;\n  uint value3;\n  \n  result1 = calculate_result_08008e3c(*(undefined4 *)(data + 0x3c));\n  result1 = calculate_floating_point_08008eec(result1,value1);\n  floatResult = decode_and_improve_08008590(result1);\n  floatResult = calculate_float_08009318((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  result1 = calculate_shifted_value_08008bf0((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  *(undefined4 *)(data + 0x28) = result1;\n  result1 = calculate_result_08008e3c(*(undefined4 *)(data + 0x3c));\n  result1 = calculate_floating_point_08008eec(result1,value2);\n  floatResult = decode_and_improve_08008590(result1);\n  floatResult = calculate_float_08009318((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  result1 = calculate_shifted_value_08008bf0((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  *(undefined4 *)(data + 0x2c) = result1;\n  floatResult = bitwise_shift_0800856c(*(int *)(data + 0x30) * 0x32);\n  floatResult = calculate_result_08008640((int)floatResult,(int)((ulonglong)floatResult >> 0x20),0,0x404e0000);\n  integerValue = extract_integer_08008ba0((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  result1 = calculate_result_08008e3c(*(undefined4 *)(data + 0x28));\n  result2 = calculate_result_08008e3c(*(undefined4 *)(data + 0x3c));\n  bits1 = extract_bits_08008e44(integerValue);\n  result1 = calculate_result_080028bc(result1,result2,bits1);\n  floatResult = decode_and_improve_08008590(result1);\n  floatResult = calculate_float_08009318((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  value3 = extract_integer_08008ba0((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  result1 = calculate_result_08008e3c(*(undefined4 *)(data + 0x3c));\n  result2 = calculate_result_08008e3c(*(undefined4 *)(data + 0x2c));\n  bits1 = extract_bits_08008e44(-integerValue);\n  result1 = calculate_result_080028bc(result1,result2,bits1);\n  floatResult = decode_and_improve_08008590(result1);\n  floatResult = calculate_result_080094c0((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  finalResult = extract_integer_08008ba0((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n  finalResult = (*(int *)(data + 0x10) - value3) - finalResult;\n  if (finalResult < 0) {\n    result1 = calculate_result_08008e3c(*(undefined4 *)(data + 0x28));\n    result2 = calculate_result_08008e3c(*(undefined4 *)(data + 0x2c));\n    bits1 = extract_bits_08008e44(integerValue);\n    bits2 = extract_bits_08008e44(*(undefined4 *)(data + 0x10));\n    result1 = calculate_final_result_08002908(result1,result2,bits1,bits2);\n    floatResult = decode_and_improve_08008590(result1);\n    floatResult = calculate_float_08009318((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n    extractedInteger = extract_integer_08008ba0((int)floatResult,(int)((ulonglong)floatResult >> 0x20));\n    extractedInteger = extractedInteger & ~((int)extractedInteger >> 0x1f);\n    value3 = *(uint *)(data + 0x10);\n    if ((int)extractedInteger <= (int)*(uint *)(data + 0x10)) {\n      value3 = extractedInteger;\n    }\n    finalResult = 0;\n  }\n  *(uint *)(data + 0x34) = value3;\n  *(uint *)(data + 0x38) = finalResult + value3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "improve_calculations_08002c18",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "result1",
                "iVar2": "integerValue",
                "uVar3": "result2",
                "uVar4": "bits1",
                "uVar5": "bits2",
                "uVar6": "extractedInteger",
                "uVar7": "floatResult",
                "local_20": "finalResult",
                "local_1c": "value3"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "improve_calculations_08002e08",
            "code": "\nvoid improve_calculations_08002e08(void)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int index;\n  undefined *data_ptr;\n  byte byte_val;\n  \n  data_ptr = (undefined *)0x0;\n  byte_val = DAT_20000cf1;\n  while (byte_val != DAT_20000cf0) {\n    index = (uint)byte_val * 0x40;\n    if ((data_ptr != (undefined *)0x0) &&\n       ((data_ptr[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      result_1 = calculate_floating_point_08009054(*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(data_ptr + 0x14));\n      result_2 = calculate_floating_point_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(data_ptr + 0x14));\n      improve_calculations_08002e08_08002c18(data_ptr,result_1,result_2);\n      data_ptr[0x24] = 0;\n    }\n    byte_val = increment_and_check_limit_08002870(byte_val);\n    data_ptr = &DAT_20000870 + index;\n  }\n  result_1 = calculate_floating_point_08009054(*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(data_ptr + 0x14));\n  result_2 = calculate_floating_point_08009054(0,*(undefined4 *)(data_ptr + 0x14));\n  improve_calculations_08002e08_08002c18(data_ptr,result_1,result_2);\n  data_ptr[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "improve_calculations_08002e08",
                "local_18": "data_ptr",
                "local_11": "byte_val",
                "iVar3": "index",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "process_and_improve_08002edc",
            "code": "\nvoid process_and_improve_08002edc(void)\n\n{\n  process_output();\n  update_values();\n  improve_calculations();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "process_and_improve_08002edc",
                "process_output_08002a94": "process_output",
                "update_values_08002ba8": "update_values",
                "improve_calculations_08002e08": "improve_calculations"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_data_and_check_limit_08002ef0",
            "code": "\nvoid update_data_and_check_limit_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_check_limit(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_data_and_check_limit_08002ef0",
                "increment_and_check_limit_08002870": "increment_and_check_limit"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_memory_08002f24",
            "code": "\nvoid initializeMemory_08002f24(void)\n\n{\n  updateDataAndCheckLimit();\n  fillMemory(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_memory_08002f24",
                "update_data_and_check_limit_08002ef0": "updateDataAndCheckLimit",
                "fill_memory_0800b430": "fillMemory"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_limit_if_not_equal_08002f40",
            "code": "\nvoid update_limit_if_not_equal_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_check_limit(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_limit_if_not_equal_08002f40",
                "increment_and_check_limit_08002870": "increment_and_check_limit"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_valid_pointer_08002f74",
            "code": "\nundefined * getValidPointer_08002f74(void)\n\n{\n  undefined *validPointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    validPointer = (undefined *)0x0;\n  }\n  else {\n    validPointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return validPointer;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_valid_pointer_08002f74",
                "puVar1": "validPointer"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "is_data_equal_08002fac",
            "code": "\nbool is_data_equal_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "is_data_equal_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "handle_valid_pointers_08002fd4",
            "code": "\nvoid handle_valid_pointers_08002fd4(void)\n\n{\n  int validPointer;\n  \n  while ((validPointer = getValidPointer(), validPointer != 0 || (DAT_20000ea9 == '\\x03'))) {\n    handleAlarm();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "handle_valid_pointers_08002fd4",
                "iVar1": "validPointer",
                "get_valid_pointer_08002f74": "getValidPointer",
                "handle_alarm_08003a74": "handleAlarm"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_and_improve_08003004",
            "code": "\nvoid calculateAndImprove_08003004(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char flag)\n\n{\n  undefined4 result1;\n  int product1;\n  int product2;\n  int product3;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint maxValue;\n  int iVar10;\n  ushort *dataPointer;\n  int difference;\n  uint maxDifference;\n  undefined8 improvedResult;\n  undefined8 conversionResult1;\n  undefined8 conversionResult2;\n  undefined4 emptyInputValue;\n  undefined4 output;\n  \n  iVar10 = (uint)DAT_20000cf0 * 0x40;\n  dataPointer = (ushort *)(&DAT_20000870 + iVar10);\n  result1 = calculate_floating_point_08008eec(DAT_20000ebc,input1);\n  improvedResult = decode_and_improve_08008590(result1);\n  product1 = calculate_product_080095b8((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000ec0,input2);\n  improvedResult = decode_and_improve_08008590(result1);\n  product2 = calculate_product_080095b8((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000ec4,input3);\n  improvedResult = decode_and_improve_08008590(result1);\n  product3 = calculate_product_080095b8((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n  *dataPointer = 0;\n  if (product1 < DAT_20000cf4) {\n    *dataPointer = *dataPointer | 0x20;\n  }\n  if (product2 < DAT_20000cf8) {\n    *dataPointer = *dataPointer | 0x880;\n  }\n  if (product3 < DAT_20000cfc) {\n    *dataPointer = *dataPointer | 0x200;\n  }\n  difference = product1 - DAT_20000cf4;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000874 + iVar10) = difference;\n  difference = product2 - DAT_20000cf8;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000878 + iVar10) = difference;\n  difference = product3 - DAT_20000cfc;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_2000087c + iVar10) = difference;\n  maxValue = *(uint *)(&DAT_2000087c + iVar10);\n  if (*(uint *)(&DAT_2000087c + iVar10) < *(uint *)(&DAT_20000878 + iVar10)) {\n    maxValue = *(uint *)(&DAT_20000878 + iVar10);\n  }\n  maxDifference = *(uint *)(&DAT_20000874 + iVar10);\n  if (*(uint *)(&DAT_20000874 + iVar10) < maxValue) {\n    maxDifference = maxValue;\n  }\n  *(uint *)(&DAT_20000880 + iVar10) = maxDifference;\n  if (*(int *)(&DAT_20000880 + iVar10) != 0) {\n    result1 = extract_bits_08008e44(product1 - DAT_20000cf4);\n    result1 = calculate_floating_point_08009054(result1,DAT_20000ebc);\n    result2 = extract_bits_08008e44(product2 - DAT_20000cf8);\n    result2 = calculate_floating_point_08009054(result2,DAT_20000ec0);\n    result3 = extract_bits_08008e44(product3 - DAT_20000cfc);\n    result3 = calculate_floating_point_08009054(result3,DAT_20000ec4);\n    result4 = calculate_floating_point_08008eec(result1,result1);\n    result5 = calculate_floating_point_08008eec(result2,result2);\n    result4 = calculate_float_08008cdc(result4,result5);\n    result5 = calculate_floating_point_08008eec(result3,result3);\n    result4 = calculate_float_08008cdc(result4,result5);\n    improvedResult = decode_and_improve_08008590(result4);\n    improvedResult = calculate_and_initialize_080098d0((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n    result4 = calculate_float_08008c30((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + iVar10) = result4;\n    result4 = calculate_floating_point_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + iVar10));\n    if (flag == '\\0') {\n      output = calculate_floating_point_08008eec(input4,result4);\n    }\n    else {\n      output = calculate_floating_point_08009054(0x3f800000,input4);\n    }\n    result5 = calculate_floating_point_08008eec(*(undefined4 *)(&DAT_20000890 + iVar10),output);\n    *(undefined4 *)(&DAT_20000884 + iVar10) = result5;\n    result5 = extract_bits_08008e44(*(undefined4 *)(&DAT_20000880 + iVar10));\n    result5 = calculate_floating_point_08008eec(result5,output);\n    improvedResult = decode_and_improve_08008590(result5);\n    improvedResult = calculate_float_08009318((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n    result5 = calculate_shifted_value_08008bf0((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + iVar10) = result5;\n    result5 = extract_bits_08008e44(*(undefined4 *)(&DAT_20000880 + iVar10));\n    result5 = calculate_floating_point_08008eec(result5,result4);\n    result5 = calculate_floating_point_08008eec(result5,DAT_20000edc);\n    result5 = calculate_floating_point_08009054(result5,0x453b8000);\n    improvedResult = decode_and_improve_08008590(result5);\n    improvedResult = calculate_float_08009318((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n    result5 = extract_integer_08008ba0((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + iVar10) = result5;\n    maxValue = calculate_floating_point_08008eec(result1,result4);\n    result1 = calculate_floating_point_08008eec(result2,result4);\n    result2 = calculate_floating_point_08008eec(result3,result4);\n    emptyInputValue = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (difference = check_if_empty_08009264(DAT_20000d0c,0), difference != 0)) {\n      result3 = calculate_floating_point_08008eec(DAT_20000d00 ^ 0x80000000,maxValue);\n      result4 = calculate_floating_point_08008eec(DAT_20000d04,result1);\n      result3 = calculate_floating_point_08008cd8(result3,result4);\n      result4 = calculate_floating_point_08008eec(DAT_20000d08,result2);\n      result3 = calculate_floating_point_08008cd8(result3,result4);\n      improvedResult = decode_and_improve_08008590(result3);\n      difference = is_cy_null_08008b24((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20),0x66666666,0x3fee6666);\n      if (difference != 0) {\n        difference = check_if_input_empty_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + iVar10));\n        emptyInputValue = DAT_20000d0c;\n        if (difference == 0) {\n          emptyInputValue = *(undefined4 *)(&DAT_20000884 + iVar10);\n        }\n        improvedResult = decode_and_improve_08008590(result3);\n        difference = check_if_null_08008b60_08008b60((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20),0x66666666,0xbfee6666);\n        if (difference != 0) {\n          improvedResult = decode_and_improve_08008590(result3);\n          improvedResult = calculate_result_080082d0(0,0x3ff00000,(int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n          improvedResult = calculate_result_08008640((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20),0,0x3fe00000);\n          improvedResult = calculate_and_initialize_080098d0((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n          result3 = calculate_float_08008c30((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n          improvedResult = decode_and_improve_08008590(emptyInputValue);\n          result4 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n          result4 = calculate_floating_point_08008eec(result4,result3);\n          conversionResult1 = decode_and_improve_08008590(result4);\n          conversionResult2 = decode_and_improve_08008590(result3);\n          conversionResult2 = calculate_result_080082d0(0,0x3ff00000,(int)conversionResult2,(int)((ulonglong)conversionResult2 >> 0x20));\n          conversionResult1 = floating_point_conversion_08008894((int)conversionResult1,(int)((ulonglong)conversionResult1 >> 0x20),(int)conversionResult2,\n                                (int)((ulonglong)conversionResult2 >> 0x20));\n          conversionResult1 = calculate_and_initialize_080098d0((int)conversionResult1,(int)((ulonglong)conversionResult1 >> 0x20));\n          difference = is_cy_null_08008b24((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20),(int)conversionResult1,\n                                (int)((ulonglong)conversionResult1 >> 0x20));\n          if (difference == 0) {\n            result4 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n            result4 = calculate_floating_point_08008eec(result4,result3);\n            improvedResult = decode_and_improve_08008590(result4);\n            conversionResult1 = decode_and_improve_08008590(result3);\n            conversionResult1 = calculate_result_080082d0(0,0x3ff00000,(int)conversionResult1,(int)((ulonglong)conversionResult1 >> 0x20));\n            improvedResult = floating_point_conversion_08008894((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20),(int)conversionResult1,\n                                  (int)((ulonglong)conversionResult1 >> 0x20));\n            improvedResult = calculate_and_initialize_080098d0((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n            emptyInputValue = calculate_float_08008c30((int)improvedResult,(int)((ulonglong)improvedResult >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + iVar10) = emptyInputValue;\n    result4 = calculate_and_initialize_values_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + iVar10));\n    difference = check_if_input_empty_08009228(emptyInputValue,result4);\n    result3 = result4;\n    if (difference != 0) {\n      result3 = emptyInputValue;\n    }\n    *(undefined4 *)(&DAT_20000888 + iVar10) = result3;\n    difference = check_combination_08009250(result4,*(undefined4 *)(&DAT_20000884 + iVar10));\n    if (difference == 0) {\n      (&DAT_20000895)[iVar10] = 0;\n    }\n    else {\n      (&DAT_20000895)[iVar10] = 1;\n    }\n    (&DAT_20000894)[iVar10] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + iVar10);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maxValue;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result2;\n    DAT_20000cf2 = increment_and_check_limit_08002870(DAT_20000cf2);\n    DAT_20000cf4 = product1;\n    DAT_20000cf8 = product2;\n    DAT_20000cfc = product3;\n    process_and_improve_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_and_improve_08003004",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "uVar1": "result1",
                "iVar2": "product1",
                "iVar3": "product2",
                "iVar4": "product3",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "maxValue",
                "puVar11": "dataPointer",
                "iVar12": "difference",
                "uVar13": "maxDifference",
                "uVar14": "improvedResult",
                "uVar15": "conversionResult1",
                "uVar16": "conversionResult2",
                "local_20": "emptyInputValue",
                "local_1c": "output"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_params_080035ec",
            "code": "\nvoid initializeParams_080035ec(undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  DAT_20000cf4 = value1;\n  DAT_20000cf8 = value2;\n  DAT_20000cfc = value3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_params_080035ec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_floating_point_data_08003618",
            "code": "\nvoid updateFloatingPointData_08003618(undefined4 inputData)\n\n{\n  undefined4 extractedBits;\n  int dataIndex;\n  undefined4 extractedBits2;\n  \n  dataIndex = (uint)DAT_20000cf1 * 0x40;\n  extractedBits2 = *(undefined4 *)(&DAT_20000890 + dataIndex);\n  extractedBits = extract_bits_08008e44(inputData);\n  extractedBits = calculate_floating_point_08008eec(extractedBits2,extractedBits);\n  extractedBits2 = extract_bits_08008e44(*(undefined4 *)(&DAT_20000880 + dataIndex));\n  extractedBits = calculate_floating_point_08009054(extractedBits,extractedBits2);\n  *(undefined4 *)(&DAT_20000890 + dataIndex) = extractedBits;\n  *(undefined4 *)(&DAT_20000880 + dataIndex) = inputData;\n  *(undefined4 *)(&DAT_20000888 + dataIndex) = 0;\n  *(undefined4 *)(&DAT_2000088c + dataIndex) = 0;\n  (&DAT_20000895)[dataIndex] = 0;\n  (&DAT_20000894)[dataIndex] = 1;\n  process_and_improve_08002edc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_floating_point_data_08003618",
                "param_1": "inputData",
                "uVar1": "extractedBits",
                "iVar2": "dataIndex",
                "uVar3": "extractedBits2"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "process_string_0800369c",
            "code": "\nvoid process_string_0800369c(char *input_string)\n\n{\n  char *current_char;\n  \n  current_char = input_string;\n  while (*current_char != '\\0') {\n    wait_for_flag_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "process_string_0800369c",
                "param_1": "input_string",
                "local_c": "current_char"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "wait_for_flag_and_increment_080036c6",
            "code": "\nvoid waitForFlagAndIncrement_080036c6(char *inputString)\n\n{\n  char *currentCharacter;\n  \n  currentCharacter = inputString;\n  while (*currentCharacter != '\\0') {\n    wait_for_flag_08008250(*currentCharacter);\n    currentCharacter = currentCharacter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "wait_for_flag_and_increment_080036c6",
                "param_1": "inputString",
                "local_c": "currentCharacter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "bit_print_080036f0",
            "code": "\nvoid bitPrint_080036f0(uint number,int bitCount)\n\n{\n  undefined4 outputChar;\n  int bitIndex;\n  uint bitMask;\n  \n  bitMask = 1 << (bitCount - 1U & 0xff);\n  for (bitIndex = 0; bitIndex < bitCount; bitIndex = bitIndex + 1) {\n    if ((bitMask & number) == 0) {\n      outputChar = 0x30;\n    }\n    else {\n      outputChar = 0x31;\n    }\n    wait_for_flag_08008250(outputChar);\n    bitMask = bitMask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "bit_print_080036f0",
                "param_1": "number",
                "param_2": "bitCount",
                "uVar1": "outputChar",
                "local_10": "bitIndex",
                "local_c": "bitMask"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_bits_08003740",
            "code": "\nvoid print_bits_08003740(undefined input)\n\n{\n  print_bits_08003740_helper(input,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_bits_08003740",
                "param_1": "input",
                "bit_print_080036f0": "print_bits_helper"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_binary_0800375c",
            "code": "\nvoid printBinary_0800375c(undefined2 data)\n\n{\n  printBits(data,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_binary_0800375c",
                "param_1": "data",
                "bit_print_080036f0": "printBits"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "convert_and_print_integer_08003778",
            "code": "\nvoid convertAndPrintInteger_08003778(uint inputNumber)\n\n{\n  uint previousDigitIndex;\n  uint currentNumber;\n  char digitStack [12];\n  byte numDigits;\n  \n  numDigits = 0;\n  currentNumber = inputNumber;\n  if (inputNumber == 0) {\n    wait_for_flag_08008250(0x30);\n  }\n  else {\n    for (; currentNumber != 0; currentNumber = currentNumber / 10) {\n      previousDigitIndex = (uint)numDigits;\n      numDigits = numDigits + 1;\n      digitStack[previousDigitIndex + 1] = (char)(currentNumber % 10) + '0';\n    }\n    for (; numDigits != 0; numDigits = numDigits - 1) {\n      wait_for_flag_08008250(digitStack[numDigits]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "convert_and_print_integer_08003778",
                "param_1": "inputNumber",
                "uVar1": "previousDigitIndex",
                "local_1c": "currentNumber",
                "acStack_15": "digitStack",
                "local_9": "numDigits"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int inputNumber)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = inputNumber;\n  if (inputNumber < 0) {\n    wait_for_flag_08008250(0x2d);\n    absoluteValue = -inputNumber;\n  }\n  convert_and_print_integer_08003778(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "inputNumber",
                "local_c": "absoluteValue"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "calculate_and_display_float_08003826",
            "code": "\nvoid calculate_and_display_float_08003826(uint input_value)\n\n{\n  int isEmpty;\n  undefined4 floatValue;\n  byte tempByte;\n  uint tempUInt;\n  uint modifiedInput;\n  char outputString [13];\n  uint tempValue;\n  byte counter;\n  byte dataSize;\n  \n  isEmpty = checkInputEmpty(input_value,0);\n  modifiedInput = input_value;\n  if (isEmpty != 0) {\n    waitFlag(0x2d);\n    modifiedInput = input_value ^ 0x80000000;\n  }\n  for (dataSize = DAT_20000ef9; 1 < dataSize; dataSize = dataSize - 2) {\n    modifiedInput = calculateFloat(modifiedInput,0x42c80000);\n  }\n  if (dataSize != 0) {\n    modifiedInput = calculateFloat(modifiedInput,0x41200000);\n  }\n  floatValue = calculateFloatValue(modifiedInput,0x3f000000);\n  counter = 0;\n  tempValue = extractValue(floatValue);\n  outputString[DAT_20000ef9 + 1] = '.';\n  for (; tempValue != 0; tempValue = tempValue / 10) {\n    if (counter == DAT_20000ef9) {\n      counter = counter + 1;\n    }\n    tempUInt = (uint)counter;\n    counter = counter + 1;\n    outputString[tempUInt + 1] = (char)(tempValue % 10) + '0';\n  }\n  while (counter < DAT_20000ef9) {\n    tempUInt = (uint)counter;\n    counter = counter + 1;\n    outputString[tempUInt + 1] = '0';\n  }\n  if (counter == DAT_20000ef9) {\n    tempByte = counter + 1;\n    counter = counter + 2;\n    outputString[tempByte + 1] = '0';\n  }\n  for (; counter != 0; counter = counter - 1) {\n    waitFlag(outputString[counter]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "calculate_and_display_float_08003826",
                "param_1": "input_value",
                "iVar1": "isEmpty",
                "uVar2": "floatValue",
                "bVar3": "tempByte",
                "uVar4": "tempUInt",
                "local_24": "modifiedInput",
                "acStack_1d": "outputString",
                "local_10": "tempValue",
                "local_a": "counter",
                "local_9": "dataSize",
                "wait_for_flag_08008250": "waitFlag",
                "check_if_input_empty_08009228": "checkInputEmpty",
                "calculate_floating_point_08008eec": "calculateFloat",
                "calculate_float_08008cdc": "calculateFloatValue",
                "extracted_value_08009278": "extractValue"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_and_setup_080039a0",
            "code": "\nvoid initialize_and_setup_080039a0(void)\n\n{\n  initialize_data();\n  initialize_grbl();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_and_setup_080039a0",
                "initialize_data_08003980": "initialize_data",
                "initialize_grbl_08004228": "initialize_grbl"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_memory_and_data_080039bc",
            "code": "\nvoid process_memory_and_data_080039bc(void)\n\n{\n  int result;\n  undefined4 error_code;\n  byte counter;\n  \n  for (counter = 0; counter < 2; counter = counter + 1) {\n    result = check_memory_and_process_08004d2c(counter,&DAT_20000d10);\n    if (result == 0) {\n      handle_error_message_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      process_string_0800369c(&DAT_20000d10);\n      error_code = decode_and_process_data_080005b4(&DAT_20000d10);\n      handle_error_message_08004030(error_code);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_memory_and_data_080039bc",
                "iVar1": "result",
                "uVar2": "error_code",
                "local_9": "counter"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "check_flags_and_update_state_08003a18",
            "code": "\nvoid checkFlagsAndUpdateState_08003a18(uint flags)\n\n{\n  if ((flags & 0x80) == 0) {\n    if ((flags & 0x40) == 0) {\n      if ((flags & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initialize_system_and_check_flags_080025e8();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "check_flags_and_update_state_08003a18",
                "param_1": "flags"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "handle_alarm_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid handle_alarm_08003a74(void)\n\n{\n  byte input_byte;\n  \n  input_byte = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        display_alarm_message(0xffffffff);\n        display_status_message(1);\n        do {\n        } while( true );\n      }\n      display_alarm_message(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((input_byte & 0x10) == 0) {\n      if ((input_byte & 1) != 0) {\n        display_position_and_stats();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((input_byte & 8) != 0) {\n        update_data_status();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((input_byte & 4) != 0) {\n        update_data();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((input_byte & 2) != 0) {\n        initialize_flags();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "handle_alarm_08003a74",
                "bVar1": "input_byte",
                "display_alarm_message_08004148": "display_alarm_message",
                "display_status_message_080041a0": "display_status_message",
                "display_position_and_stats_08004940": "display_position_and_stats",
                "update_data_status_0800587c": "update_data_status",
                "update_data_080058a0": "update_data",
                "initialize_flags_0800585c": "initialize_flags"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "parse_and_process_command_08003b98",
            "code": "\nuint parse_and_process_command_08003b98(char *command_str)\n\n{\n  byte command_type;\n  int result;\n  undefined4 extracted_value;\n  uint return_value;\n  undefined8 decoded_value;\n  undefined4 value1;\n  undefined4 value2;\n  byte position;\n  byte flag;\n  \n  if (*command_str != '$') {\n    return_value = decode_and_process_data_080005b4(command_str);\n    return return_value;\n  }\n  position = 1;\n  flag = '\\0';\n  command_type = command_str[1];\n  if (command_type == 0) {\n    view_grbl_settings_0800423c();\n    return 0;\n  }\n  if ((0x58 < command_type) || (command_type < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(command_type) {\n  case 0x23:\n    position = 2;\n    if (command_str[2] != '\\0') {\n      return 3;\n    }\n    process_data_080044e8();\n    break;\n  case 0x24:\n    position = 2;\n    if (command_str[2] != '\\0') {\n      return 3;\n    }\n    initialize_settings_08004250();\n    break;\n  case 0x43:\n    position = 2;\n    if (command_str[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_system_and_check_flags_080025e8();\n      display_status_message_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_status_message_080041a0(4);\n    }\n    break;\n  case 0x47:\n    position = 2;\n    if (command_str[2] != '\\0') {\n      return 3;\n    }\n    process_data_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_data_and_process_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      process_memory_and_data_080039bc();\n    }\n    break;\n  case 0x4e:\n    position = 2;\n    if (command_str[2] == '\\0') {\n      for (flag = 0; flag < 2; flag = flag + 1) {\n        result = check_memory_and_process_08004d2c(flag,command_str);\n        if (result == 0) {\n          handle_error_message_08004030(10);\n        }\n        else {\n          process_08004900(flag,command_str);\n        }\n      }\n      return 0;\n    }\n    flag = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = parse_integer_08002638(command_str,&position,&value2);\n    if (result == 0) {\n      return 1;\n    }\n    command_type = position + 1;\n    if (command_str[position] != '=') {\n      return 3;\n    }\n    position = command_type;\n    if (flag == '\\0') {\n      result = parse_integer_08002638(command_str,&position,&value1);\n      if (result == 0) {\n        return 1;\n      }\n      if (command_str[position] == '\\0') {\n        extracted_value = extracted_value_08009278(value2);\n        return_value = process_data_08004e30(extracted_value,value1);\n        return return_value;\n      }\n      return 3;\n    }\n    do {\n      command_str[(uint)position - (uint)command_type] = command_str[position];\n      return_value = (uint)position;\n      position = position + 1;\n    } while (command_str[return_value] != '\\0');\n    flag = command_type;\n    flag = decode_and_process_data_080005b4(command_str);\n    if (flag != 0) {\n      return (uint)flag;\n    }\n    decoded_value = decode_and_improve_08008590(value2);\n    decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    flag = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    process_and_return_08004bc0(flag,command_str);\n    break;\n  case 0x58:\n    position = 2;\n    if (command_str[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_status_message_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "parse_and_process_command_08003b98",
                "param_1": "command_str",
                "bVar1": "command_type",
                "iVar2": "result",
                "uVar3": "extracted_value",
                "uVar4": "return_value",
                "uVar5": "decoded_value",
                "local_14": "value1",
                "local_10": "value2",
                "local_a": "position",
                "local_9": "flag"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_user_input_08003f34",
            "code": "\nvoid processUserInput_08003f34(void)\n\n{\n  byte flagByte;\n  undefined4 errorCode;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      flagByte = check_flag_and_get_lowest_byte_08008286();\n      if (flagByte == 0xff) {\n        return;\n      }\n      if ((flagByte == 10) || (flagByte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < flagByte) && (flagByte != 0x2f)) {\n          if (flagByte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            handleErrorMessage(0xd);\n            initializeData();\n          }\n          else if ((flagByte < 0x61) || (0x7a < flagByte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = flagByte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = flagByte - 0x20;\n          }\n        }\n      }\n      else if (flagByte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    handleAlarm();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      handleErrorMessage(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      errorCode = parseAndProcessCommand(&DAT_20000d10);\n      handleErrorMessage(errorCode);\n    }\n    initializeData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_user_input_08003f34",
                "bVar1": "flagByte",
                "uVar2": "errorCode",
                "uVar3": "index",
                "handle_error_message_08004030": "handleErrorMessage",
                "initialize_data_08003980": "initializeData",
                "handle_alarm_08003a74": "handleAlarm",
                "parse_and_process_command_08003b98": "parseAndProcessCommand"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "handle_error_message_08004030",
            "code": "\nvoid handleErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    printMessage(&DAT_0800b5c8);\n  }\n  else {\n    printMessage(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      printMessage(\"Bad number format\");\n      break;\n    case '\\x02':\n      printMessage(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printMessage(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printMessage(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printMessage(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printMessage(\"Invalid statement\");\n      break;\n    case '\\a':\n      printMessage(\"Setting disabled\");\n      break;\n    case '\\b':\n      printMessage(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printMessage(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printMessage(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printMessage(\"Busy or queued\");\n      break;\n    case '\\f':\n      printMessage(\"Alarm lock\");\n      break;\n    case '\\r':\n      printMessage(\"Line overflow\");\n    }\n    printMessage(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "handle_error_message_08004030",
                "param_1": "errorCode",
                "wait_for_flag_and_increment_080036c6": "printMessage"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  waitForFlagAndIncrement(\"ALARM: \");\n  if (errorCode == -2) {\n    waitForFlagAndIncrement(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    waitForFlagAndIncrement(\"Hard limit\");\n  }\n  waitForFlagAndIncrement(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "wait_for_flag_and_increment_080036c6": "waitForFlagAndIncrement"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_status_message_080041a0",
            "code": "\nvoid displayStatusMessage_080041a0(undefined messageType)\n\n{\n  waitForFlagAndIncrement(&DAT_0800b710);\n  switch(messageType) {\n  case 1:\n    waitForFlagAndIncrement(\"Reset to continue\");\n    break;\n  case 2:\n    waitForFlagAndIncrement(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    waitForFlagAndIncrement(\"Caution: Unlocked\");\n    break;\n  case 4:\n    waitForFlagAndIncrement(\"Enabled\");\n    break;\n  case 5:\n    waitForFlagAndIncrement(\"Disabled\");\n  }\n  waitForFlagAndIncrement(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "messageType",
                "wait_for_flag_and_increment_080036c6": "waitForFlagAndIncrement"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "initialize_grbl_08004228",
            "code": "\nvoid initialize_grbl_08004228(void)\n\n{\n  wait_for_flag_and_increment(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "initialize_grbl_08004228",
                "wait_for_flag_and_increment_080036c6": "wait_for_flag_and_increment"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "view_grbl_settings_0800423c",
            "code": "\nvoid viewGrblSettings_0800423c(void)\n\n{\n  waitForFlagAndIncrement(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "view_grbl_settings_0800423c",
                "wait_for_flag_and_increment_080036c6": "waitForFlagAndIncrement"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "initialize_settings_08004250",
            "code": "\nvoid initializeSettings_08004250(void)\n\n{\n  undefined4 result;\n  \n  waitForFlagAndIncrement(&DAT_0800b8b8);\n  calculateAndDisplayFloat(DAT_20000ebc);\n  waitForFlagAndIncrement(\" (x, step/mm)\\r\\n$1=\");\n  calculateAndDisplayFloat(DAT_20000ec0);\n  waitForFlagAndIncrement(\" (y, step/mm)\\r\\n$2=\");\n  calculateAndDisplayFloat(DAT_20000ec4);\n  waitForFlagAndIncrement(\" (z, step/mm)\\r\\n$3=\");\n  printAbsoluteValue(DAT_20000ec9);\n  waitForFlagAndIncrement(\" (step pulse, usec)\\r\\n$4=\");\n  calculateAndDisplayFloat(DAT_20000ecc);\n  waitForFlagAndIncrement(\" (default feed, mm/min)\\r\\n$5=\");\n  calculateAndDisplayFloat(DAT_20000ed0);\n  waitForFlagAndIncrement(\" (default seek, mm/min)\\r\\n$6=\");\n  printAbsoluteValue(DAT_20000ed4);\n  waitForFlagAndIncrement(\" (step port invert mask, int:\");\n  printBinary(DAT_20000ed4);\n  waitForFlagAndIncrement(\")\\r\\n$7=\");\n  printAbsoluteValue(DAT_20000ef8);\n  waitForFlagAndIncrement(\" (step idle delay, msec)\\r\\n$8=\");\n  result = calculateFloatingPoint(DAT_20000edc,0x45610000);\n  calculateAndDisplayFloat(result);\n  waitForFlagAndIncrement(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  calculateAndDisplayFloat(DAT_20000ee0);\n  waitForFlagAndIncrement(\" (junction deviation, mm)\\r\\n$10=\");\n  calculateAndDisplayFloat(DAT_20000ed8);\n  waitForFlagAndIncrement(\" (arc, mm/segment)\\r\\n$11=\");\n  printAbsoluteValue(DAT_20000efa);\n  waitForFlagAndIncrement(\" (n-arc correction, int)\\r\\n$12=\");\n  printAbsoluteValue(DAT_20000ef9);\n  waitForFlagAndIncrement(\" (n-decimals, int)\\r\\n$13=\");\n  printAbsoluteValue((DAT_20000ee4 & 1) != 0);\n  waitForFlagAndIncrement(\" (report inches, bool)\\r\\n$14=\");\n  printAbsoluteValue((DAT_20000ee4 & 2) != 0);\n  waitForFlagAndIncrement(\" (auto start, bool)\\r\\n$15=\");\n  printAbsoluteValue((DAT_20000ee4 & 4) != 0);\n  waitForFlagAndIncrement(\" (invert step enable, bool)\\r\\n$16=\");\n  printAbsoluteValue((DAT_20000ee4 & 8) != 0);\n  waitForFlagAndIncrement(\" (hard limits, bool)\\r\\n$17=\");\n  printAbsoluteValue((DAT_20000ee4 & 0x10) != 0);\n  waitForFlagAndIncrement(\" (homing cycle, bool)\\r\\n$18=\");\n  printAbsoluteValue(DAT_20000ee6);\n  waitForFlagAndIncrement(\" (homing dir invert mask, int:\");\n  printBinary(DAT_20000ee6);\n  waitForFlagAndIncrement(\")\\r\\n$19=\");\n  calculateAndDisplayFloat(DAT_20000ee8);\n  waitForFlagAndIncrement(\" (homing feed, mm/min)\\r\\n$20=\");\n  calculateAndDisplayFloat(DAT_20000eec);\n  waitForFlagAndIncrement(\" (homing seek, mm/min)\\r\\n$21=\");\n  printAbsoluteValue(DAT_20000ef0);\n  waitForFlagAndIncrement(\" (homing debounce, msec)\\r\\n$22=\");\n  calculateAndDisplayFloat(DAT_20000ef4);\n  waitForFlagAndIncrement(\" (homing pull-off, mm)\\r\\n$23=\");\n  printAbsoluteValue(DAT_20000ed6);\n  waitForFlagAndIncrement(\" (dir port invert mask, int:\");\n  printBinary(DAT_20000ed6);\n  waitForFlagAndIncrement(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "initialize_settings_08004250",
                "uVar1": "result",
                "wait_for_flag_and_increment_080036c6": "waitForFlagAndIncrement",
                "calculate_and_display_float_08003826": "calculateAndDisplayFloat",
                "print_absolute_value_080037fc": "printAbsoluteValue",
                "print_binary_0800375c": "printBinary",
                "calculate_floating_point_08009054": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "process_data_080044e8",
            "code": "\nvoid processData_080044e8(void)\n\n{\n  int result;\n  undefined4 floatResult;\n  undefined8 decodedValue;\n  undefined4 memoryBlock [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      wait_for_flag_and_increment_080036c6(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          calculate_and_display_float_08003826(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          decodedValue = decode_and_improve_08008590(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          decodedValue = calculate_result_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x57e16865,0x3fa42851);\n          floatResult = calculate_float_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          calculate_and_display_float_08003826(floatResult);\n        }\n        if (index < 2) {\n          wait_for_flag_and_increment_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          wait_for_flag_and_increment_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    result = check_and_initialize_memory_08004d7c(counter,memoryBlock);\n    if (result == 0) break;\n    wait_for_flag_and_increment_080036c6(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      wait_for_flag_and_increment_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      wait_for_flag_and_increment_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      wait_for_flag_and_increment_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      wait_for_flag_and_increment_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      wait_for_flag_and_increment_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      wait_for_flag_and_increment_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      wait_for_flag_and_increment_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      wait_for_flag_and_increment_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        calculate_and_display_float_08003826(memoryBlock[index]);\n      }\n      else {\n        decodedValue = decode_and_improve_08008590(memoryBlock[index]);\n        decodedValue = calculate_result_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x57e16865,0x3fa42851);\n        floatResult = calculate_float_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n        calculate_and_display_float_08003826(floatResult);\n      }\n      if (index < 2) {\n        wait_for_flag_and_increment_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        wait_for_flag_and_increment_080036c6(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  handle_error_message_08004030(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "process_data_080044e8",
                "iVar1": "result",
                "uVar2": "floatResult",
                "uVar3": "decodedValue",
                "auStack_18": "memoryBlock",
                "local_a": "index",
                "local_9": "counter"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "process_data_080046d0",
            "code": "\nvoid processData_080046d0(void)\n\n{\n  undefined4 result;\n  undefined8 decodedValue;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    wait_for_flag_and_increment_080036c6(&DAT_0800bbc8);\n    break;\n  case 1:\n    wait_for_flag_and_increment_080036c6(&DAT_0800bbcc);\n    break;\n  case 2:\n    wait_for_flag_and_increment_080036c6(&DAT_0800bbd0);\n    break;\n  case 3:\n    wait_for_flag_and_increment_080036c6(&DAT_0800bbd4);\n    break;\n  case 4:\n    wait_for_flag_and_increment_080036c6(&DAT_0800bbd8);\n  }\n  wait_for_flag_and_increment_080036c6(&DAT_0800bbe0);\n  print_absolute_value_080037fc(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bbe4);\n    }\n    else {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bbec);\n    }\n  }\n  else {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc04);\n  }\n  else {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc14);\n  }\n  else {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc24);\n  }\n  else {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bc48);\n    }\n  }\n  wait_for_flag_and_increment_080036c6(&DAT_0800bc50);\n  print_absolute_value_080037fc(DAT_20000e88);\n  wait_for_flag_and_increment_080036c6(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    calculate_and_display_float_08003826(DAT_20000e78);\n  }\n  else {\n    decodedValue = decode_and_improve_08008590(DAT_20000e78);\n    decodedValue = calculate_result_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x57e16865,0x3fa42851);\n    result = calculate_float_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    calculate_and_display_float_08003826(result);\n  }\n  wait_for_flag_and_increment_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "process_data_080046d0",
                "uVar1": "result",
                "uVar2": "decodedValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "process_08004900",
            "code": "\nvoid process_08004900(undefined input,undefined4 data)\n\n{\n  wait_and_increment(&DAT_0800bc58);\n  print_absolute_value(input);\n  wait_and_increment(&DAT_0800bc5c);\n  process_08004900_string(data);\n  wait_and_increment(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "process_08004900",
                "param_1": "input",
                "param_2": "data",
                "wait_for_flag_and_increment_080036c6": "wait_and_increment",
                "print_absolute_value_080037fc": "print_absolute_value",
                "process_string_0800369c": "process_string"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "display_position_and_stats_08004940",
            "code": "\nvoid displayPositionAndStats_08004940(void)\n\n{\n  undefined4 bits;\n  uint indexUint;\n  undefined4 floatVal;\n  undefined8 improvedVal1;\n  undefined8 improvedVal2;\n  undefined4 positionStack [6];\n  byte index;\n  \n  positionStack[3] = DAT_20000eac;\n  positionStack[4] = DAT_20000eb0;\n  positionStack[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    wait_for_flag_and_increment_080036c6(\"<Idle\");\n    break;\n  case 2:\n    wait_for_flag_and_increment_080036c6(\"<Queue\");\n    break;\n  case 3:\n    wait_for_flag_and_increment_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    wait_for_flag_and_increment_080036c6(\"<Hold\");\n    break;\n  case 5:\n    wait_for_flag_and_increment_080036c6(\"<Home\");\n    break;\n  case 6:\n    wait_for_flag_and_increment_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    wait_for_flag_and_increment_080036c6(\"<Check\");\n  }\n  wait_for_flag_and_increment_080036c6(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    bits = extract_bits_08008e44(positionStack[index + 3]);\n    indexUint = (uint)index;\n    bits = calculate_floating_point_08009054(bits,(&DAT_20000ebc)[index]);\n    positionStack[indexUint] = bits;\n    if ((DAT_20000ee4 & 1) != 0) {\n      improvedVal1 = decode_and_improve_08008590(positionStack[index]);\n      improvedVal1 = calculate_result_08008640((int)improvedVal1,(int)((ulonglong)improvedVal1 >> 0x20),0x57e16865,0x3fa42851);\n      indexUint = (uint)index;\n      bits = calculate_float_08008c30((int)improvedVal1,(int)((ulonglong)improvedVal1 >> 0x20));\n      positionStack[indexUint] = bits;\n    }\n    calculate_and_display_float_08003826(positionStack[index]);\n    wait_for_flag_and_increment_080036c6(&DAT_0800bbbc);\n  }\n  wait_for_flag_and_increment_080036c6(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      floatVal = positionStack[index];\n      bits = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      indexUint = (uint)index;\n      bits = calculate_floating_point_08008cd8(floatVal,bits);\n      positionStack[indexUint] = bits;\n    }\n    else {\n      improvedVal1 = decode_and_improve_08008590(positionStack[index]);\n      bits = calculate_float_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      improvedVal2 = decode_and_improve_08008590(bits);\n      improvedVal2 = calculate_result_08008640((int)improvedVal2,(int)((ulonglong)improvedVal2 >> 0x20),0x57e16865,0x3fa42851);\n      improvedVal1 = calculate_result_080082d0((int)improvedVal1,(int)((ulonglong)improvedVal1 >> 0x20),(int)improvedVal2,\n                           (int)((ulonglong)improvedVal2 >> 0x20));\n      indexUint = (uint)index;\n      bits = calculate_float_08008c30((int)improvedVal1,(int)((ulonglong)improvedVal1 >> 0x20));\n      positionStack[indexUint] = bits;\n    }\n    calculate_and_display_float_08003826(positionStack[index]);\n    if (index < 2) {\n      wait_for_flag_and_increment_080036c6(&DAT_0800bbbc);\n    }\n  }\n  wait_for_flag_and_increment_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "display_position_and_stats_08004940",
                "auStack_2c": "positionStack",
                "local_11": "index",
                "uVar1": "bits",
                "uVar2": "indexUint",
                "uVar3": "floatVal",
                "uVar4": "improvedVal1",
                "uVar5": "improvedVal2"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "process_and_return_08004bc0",
            "code": "\nvoid processAndReturn_08004bc0(byte inputByte,undefined4 param)\n\n{\n  processParameter((inputShort)inputByte * 0x101 + 0x300,param,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "process_and_return_08004bc0",
                "param_1": "inputByte",
                "param_2": "param",
                "process_parameter_08000374": "processParameter",
                "ushort": "inputShort"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "process_and_initialize_data_08004bf4",
            "code": "\nvoid process_and_initialize_data_08004bf4(byte input_byte,undefined4 input_value)\n\n{\n  process_data((unsigned_short)input_byte * 0xd + 0x200,input_value,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "process_and_initialize_data_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_value",
                "process_parameter_08000374": "process_data",
                "ushort": "unsigned_short"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_process_08004c2a",
            "code": "\nvoid initializeProcess_08004c2a(void)\n\n{\n  storeParameterValueToMemory(0,5);\n  processParameter(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_process_08004c2a",
                "store_parameter_value_to_memory_08000340": "storeParameterValueToMemory",
                "process_parameter_08000374": "processParameter"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_data_08004c48",
            "code": "\nvoid initialize_data_08004c48(char input_flag)\n\n{\n  if (input_flag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_process_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "param_1": "input_flag"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "check_memory_and_process_08004d2c",
            "code": "\nbool checkMemoryAndProcess_08004d2c(byte inputByte,undefined *memoryPtr)\n\n{\n  int result;\n  \n  result = check_memory_values_080003ec(memoryPtr,(ushort)inputByte * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *memoryPtr = 0;\n    process_and_return_08004bc0(inputByte,memoryPtr);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "check_memory_and_process_08004d2c",
                "param_1": "inputByte",
                "param_2": "memoryPtr",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "check_and_initialize_memory_08004d7c",
            "code": "\nbool check_and_initialize_memory_08004d7c(byte input_byte,undefined4 input_value)\n\n{\n  int memory_check_result;\n  \n  memory_check_result = check_memory_values_080003ec(input_value,(ushort)input_byte * 0xd + 0x200,0xc);\n  if (memory_check_result == 0) {\n    fill_memory_0800b430(input_value,0,0xc);\n    process_and_initialize_data_08004bf4(input_byte,input_value);\n  }\n  return memory_check_result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "check_and_initialize_memory_08004d7c",
                "param_1": "input_byte",
                "param_2": "input_value",
                "iVar1": "memory_check_result"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_and_initialize_data_08004dd2",
            "code": "\nundefined4 check_and_initialize_data_08004dd2(void)\n\n{\n  byte memoryValue;\n  int result;\n  \n  memoryValue = get_memory_value_08000310(0);\n  if (memoryValue == 5) {\n    result = check_memory_values_080003ec(&DAT_20000ebc,1,0x40);\n    if (result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < memoryValue) {\n      return 0;\n    }\n    result = check_memory_values_080003ec(&DAT_20000ebc,1,0x28);\n    if (result == 0) {\n      return 0;\n    }\n    initialize_data_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_and_initialize_data_08004dd2",
                "bVar1": "memoryValue",
                "iVar2": "result"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "process_data_08004e30",
            "code": "\nundefined4 process_data_08004e30(int type,uint value)\n\n{\n  undefined4 result;\n  int check_result;\n  undefined8 decoded_value;\n  \n  switch(type) {\n  case 0:\n  case 1:\n  case 2:\n    check_result = check_combine_result_0800923c(value,0);\n    if (check_result != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[type] = value;\n    break;\n  case 3:\n    check_result = check_if_input_empty_08009228(value,0x40400000);\n    if (check_result != 0) {\n      return 9;\n    }\n    decoded_value = decode_and_improve_08008590(value);\n    decoded_value = calculate_result_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ec9 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = value;\n    break;\n  case 5:\n    DAT_20000ed0 = value;\n    break;\n  case 6:\n    decoded_value = decode_and_improve_08008590(value);\n    decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ed4 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 7:\n    decoded_value = decode_and_improve_08008590(value);\n    decoded_value = calculate_result_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef8 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 8:\n    result = calculate_floating_point_08008eec(value,0x42700000);\n    DAT_20000edc = calculate_floating_point_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = value;\n    break;\n  case 0xb:\n    decoded_value = decode_and_improve_08008590(value);\n    decoded_value = calculate_result_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000efa = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0xc:\n    decoded_value = decode_and_improve_08008590(value);\n    decoded_value = calculate_result_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef9 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0xd:\n    check_result = check_value_is_not_zero_08009214(value,0);\n    if (check_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    check_result = check_value_is_not_zero_08009214(value,0);\n    if (check_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    check_result = check_value_is_not_zero_08009214(value,0);\n    if (check_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    check_result = check_value_is_not_zero_08009214(value,0);\n    if (check_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    check_flag_status_0800192c();\n    break;\n  case 0x11:\n    check_result = check_value_is_not_zero_08009214(value,0);\n    if (check_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    decoded_value = decode_and_improve_08008590(value);\n    decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ee6 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = value;\n    break;\n  case 0x14:\n    DAT_20000eec = value;\n    break;\n  case 0x15:\n    decoded_value = decode_and_improve_08008590(value);\n    decoded_value = calculate_result_08009654((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ef0 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = value;\n    break;\n  case 0x17:\n    decoded_value = decode_and_improve_08008590(value);\n    decoded_value = calculate_shift_and_mask_08009798((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    DAT_20000ed6 = calculate_shifted_value_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_process_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "process_data_08004e30",
                "param_1": "type",
                "param_2": "value",
                "uVar1": "result",
                "iVar2": "check_result",
                "uVar3": "decoded_value"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "initialize_binary_080051b4",
            "code": "\nvoid initializeBinary_080051b4(void)\n\n{\n  int dataInitialized;\n  undefined stackData [15];\n  byte loopIndex;\n  \n  dataInitialized = check_and_initialize_data_08004dd2();\n  if (dataInitialized == 0) {\n    handle_error_message_08004030(10);\n    initialize_data_08004c48(1);\n    initialize_settings_08004250();\n  }\n  for (loopIndex = 0; loopIndex < 8; loopIndex = loopIndex + 1) {\n    dataInitialized = check_and_initialize_memory_08004d7c(loopIndex,stackData);\n    if (dataInitialized == 0) {\n      handle_error_message_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "initialize_binary_080051b4",
                "iVar1": "dataInitialized",
                "auStack_18": "stackData",
                "local_9": "loopIndex"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_data_08005238",
            "code": "\nvoid initialize_data_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  execute_initialization();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_data_08005238",
                "execute_initialization_08005250": "execute_initialization"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "execute_initialization_08005250",
            "code": "\nvoid execute_initialization_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "execute_initialization_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "handle_pointers_0800525c",
            "code": "\nvoid handle_pointers_0800525c(byte input_byte)\n\n{\n  if ((int)(char)input_byte != (uint)DAT_20000e12) {\n    check_valid_pointers();\n    if (input_byte == 0) {\n      initialize();\n      DAT_20000e12 = input_byte;\n    }\n    else {\n      if ((char)input_byte < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input_byte;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "handle_pointers_0800525c",
                "param_1": "input_byte",
                "handle_valid_pointers_08002fd4": "check_valid_pointers",
                "execute_initialization_08005250": "initialize"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_flags_080052ac",
            "code": "\n\n\nvoid updateFlags_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_flags_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_data_080052dc",
            "code": "\n\n\nvoid updateData_080052dc(uint input)\n\n{\n  _DAT_40021014 = input | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_data_080052dc",
                "param_1": "input"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_data_rate_08005324",
            "code": "\nvoid calculateDataRate_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_data_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_data_rate_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_and_check_threshold_08005360",
            "code": "\nbool updateCounterAndCheckThreshold_08005360(void)\n\n{\n  bool thresholdExceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  thresholdExceeded = 420000 < DAT_20000e2c;\n  if (thresholdExceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return thresholdExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_and_check_threshold_08005360",
                "bVar1": "thresholdExceeded"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_data_information_080053a0",
            "code": "\nvoid update_data_information_080053a0(void)\n\n{\n  int iVar1;\n  \n  update_data_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_valid_data_pointer();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      reset_and_check_data_flags();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculate_data_rate(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iVar1 = update_counter_and_check_threshold();\n        if (iVar1 != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculate_data_rate(DAT_20000e30);\n          }\n          else {\n            reset_and_check_data_flags();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iVar1 = update_counter_and_check_threshold();\n        if (iVar1 != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculate_data_rate(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculate_data_rate(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iVar1 = update_counter_and_check_threshold();\n        if (iVar1 != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculate_data_rate(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      update_limit_if_not_equal();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_data_information_080053a0",
                "get_valid_pointer_08002f74": "get_valid_data_pointer",
                "calculate_data_rate_08005324": "calculate_data_rate",
                "update_counter_and_check_threshold_08005360": "update_counter_and_check_threshold",
                "reset_and_check_flags_080057e4": "reset_and_check_data_flags",
                "update_limit_if_not_equal_08002f40": "update_limit_if_not_equal"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "update_flags_08005760",
            "code": "\nvoid update_flags_08005760(void)\n\n{\n  update_flags_08005760_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "update_flags_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "update_flags_08005778",
            "code": "\nvoid update_flags_08005778(void)\n\n{\n  update_flags_08005778_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "update_flags_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_and_set_flags_08005790",
            "code": "\nvoid initialize_and_set_flags_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    set_parameter_value(0x69);\n    initialize_global_variable((DAT_20000ec9 + 5) * 0x15);\n    set_flags_based_on_conditions();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_and_set_flags_08005790",
                "set_parameter_value_08007c40": "set_parameter_value",
                "initialize_global_variable_08007c5e": "initialize_global_variable",
                "set_flags_based_on_conditions_08007b70": "set_flags_based_on_conditions"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "reset_and_check_flags_080057e4",
            "code": "\nvoid resetAndCheckFlags_080057e4(void)\n\n{\n  reset_bits_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "reset_and_check_flags_080057e4"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initializeData_08005814(void)\n\n{\n  fill_memory_0800b430(&DAT_20000e14,0,0x24);\n  calculateDataRate(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "calculate_data_rate_08005324": "calculateDataRate"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_and_check_flags_0800583c",
            "code": "\nvoid initialize_and_check_flags_0800583c(void)\n\n{\n  update_flags(DAT_20000ed4);\n  initialize_and_set_flags();\n  reset_and_check_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_and_check_flags_0800583c",
                "update_flags_080052ac": "update_flags",
                "initialize_and_set_flags_08005790": "initialize_and_set_flags",
                "reset_and_check_flags_080057e4": "reset_and_check_flags"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_flags_0800585c",
            "code": "\nvoid initializeFlags_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initializeFlags_0800585cAndSet();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_flags_0800585c",
                "initialize_and_set_flags_08005790": "initializeFlagsAndSet"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_data_status_0800587c",
            "code": "\nvoid updateDataStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_data_status_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "update_data_080058a0",
            "code": "\nvoid updateData_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    updateFloatingPointData(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculateDataRate(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "update_data_080058a0",
                "update_floating_point_data_08003618": "updateFloatingPointData",
                "calculate_data_rate_08005324": "calculateDataRate"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_byte_value_08005900",
            "code": "\nundefined4 checkByteValue_08005900(byte byteValue)\n\n{\n  if (byteValue == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byteValue < 0x7f) {\n    if (byteValue == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byteValue < 0x40) {\n      if (byteValue == 0x18) {\n        initialize_system_and_check_flags_080025e8();\n        return 1;\n      }\n      if (byteValue == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_byte_value_08005900",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid executeSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "initialize_interrupt_handler_08005984",
            "code": "\nundefined4 initialize_interrupt_handler_08005984(undefined4 interrupt_code)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = execute_software_interrupt_0800597c(1,interrupt_code,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "initialize_interrupt_handler_08005984",
                "param_1": "interrupt_code",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_and_process_080059b4",
            "code": "\n\n\nundefined4 initialize_and_process_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  process_input(16000);\n  initialize_registers(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_and_process_080059b4",
                "process_input_08006d72": "process_input",
                "initialize_registers_08006ce0": "initialize_registers"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_global_data_08005a84",
            "code": "\nundefined4 getGlobalData_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_global_data_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "wait_for_global_data_08005a98",
            "code": "\nvoid waitForGlobalData_08005a98(int targetValue)\n\n{\n  int initialValue;\n  uint currentValue;\n  \n  initialValue = get_global_data_08005a84();\n  do {\n    currentValue = get_global_data_08005a84();\n  } while (currentValue < (uint)(targetValue + initialValue));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "wait_for_global_data_08005a98",
                "param_1": "targetValue",
                "iVar1": "initialValue",
                "uVar2": "currentValue"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "write_data_08005bdc",
            "code": "\nvoid writeData_08005bdc(byte byteValue,uint valueToWrite)\n\n{\n  if (signedByteValue < '\\0') {\n    *(char *)((byteValue & 0xf) + 0xe000ed14) = (char)((valueToWrite & 0xff) << 4);\n  }\n  else {\n    *(char *)(signedByteValue + -0x1fff1c00) = (char)((valueToWrite & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "write_data_08005bdc",
                "param_1": "byteValue",
                "param_2": "valueToWrite",
                "(char)param_1": "signedByteValue"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "is_valid_param_08005c30",
            "code": "\n\n\nbool isValidParam_08005c30(int param)\n\n{\n  bool isInRange;\n  \n  isInRange = param - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = param + -1;\n    writeData(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "is_valid_param_08005c30",
                "param_1": "param",
                "bVar1": "isInRange",
                "write_data_08005bdc": "writeData"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_and_modify_status_08005cec",
            "code": "\n\n\nundefined4 checkAndModifyStatus_08005cec(uint *statusFlags)\n\n{\n  int returnValue;\n  uint currentTime;\n  \n  if ((*statusFlags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (param1Value != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 5000U <= currentTime) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)param1Value,_DAT_40023800));\n      if (param1Value == 1) {\n        returnValue = get_global_data_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = get_global_data_08005a84();\n          if (returnValue + 5000U <= currentTime) {\n            return 3;\n          }\n        }\n      }\n      else {\n        returnValue = get_global_data_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = get_global_data_08005a84();\n          if (returnValue + 5000U <= currentTime) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*statusFlags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (param3Value != 1)) {\n        return 1;\n      }\n    }\n    else if (param3Value == 0) {\n      _DAT_42470000 = 0;\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 100U <= currentTime) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = param4Value << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*statusFlags & 8) != 0) {\n    if (statusFlags[5] == 0) {\n      _DAT_42470e80 = 0;\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*statusFlags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    returnValue = get_global_data_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      currentTime = get_global_data_08005a84();\n      if (returnValue + 100U <= currentTime) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    returnValue = get_global_data_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      currentTime = get_global_data_08005a84();\n      if (returnValue + 5000U <= currentTime) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)param2Value);\n    if (param2Value == 1) {\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 5000U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n    else {\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 5000U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (param6Value != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (param6Value == 2) {\n      _DAT_42470060 = 0;\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 100U <= currentTime) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           param7Value << 0x18 |\n           param8Value | param9Value << 6 | ((param10Value >> 1) - 1) * 0x10000 | param11Value |\n           0x20000000;\n      _DAT_42470060 = 1;\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      returnValue = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        currentTime = get_global_data_08005a84();\n        if (returnValue + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_and_modify_status_08005cec",
                "param_1": "statusFlags",
                "iVar1": "returnValue",
                "uVar2": "currentTime",
                "param_1[1]": "param1Value",
                "param_1[3]": "param3Value",
                "param_1[4]": "param4Value",
                "param_1[2]": "param2Value",
                "param_1[6]": "param6Value",
                "param_1[0xb]": "param7Value",
                "param_1[8]": "param8Value",
                "param_1[9]": "param9Value",
                "param_1[10]": "param10Value",
                "param_1[7]": "param11Value"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "check_parameter_validity_0800618c",
            "code": "\n\n\nundefined4 checkParameterValidity_0800618c(uint *parameters,uint paramValue)\n\n{\n  int globalDataValue;\n  uint globalDataTemp;\n  uint globalDataLimit;\n  undefined8 clockSpeed;\n  \n  if ((_DAT_40023c00 & 0xf) < paramValue) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)paramValue);\n    if (paramValue != (paramValue & 0xf)) {\n      return 1;\n    }\n    if ((*parameters & 1) != 0) {\n      if (parameters[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((parameters[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = parameters[1] | _DAT_40023808 & 0xfffffffc;\n      globalDataValue = get_global_data_08005a84();\n      globalDataLimit = globalDataValue + 5000;\n      if (parameters[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          globalDataTemp = get_global_data_08005a84();\n          if (globalDataLimit <= globalDataTemp) {\n            return 3;\n          }\n        }\n      }\n      else if (parameters[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          globalDataTemp = get_global_data_08005a84();\n          if (globalDataLimit <= globalDataTemp) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          globalDataTemp = get_global_data_08005a84();\n          if (globalDataLimit <= globalDataTemp) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*parameters & 1) != 0) {\n      if (parameters[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (parameters[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = parameters[1] | _DAT_40023808 & 0xfffffffc;\n      globalDataValue = get_global_data_08005a84();\n      globalDataLimit = globalDataValue + 5000;\n      if (parameters[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          globalDataTemp = get_global_data_08005a84();\n          if (globalDataLimit <= globalDataTemp) {\n            return 3;\n          }\n        }\n      }\n      else if (parameters[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          globalDataTemp = get_global_data_08005a84();\n          if (globalDataLimit <= globalDataTemp) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          globalDataTemp = get_global_data_08005a84();\n          if (globalDataLimit <= globalDataTemp) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)paramValue);\n    if (paramValue != (paramValue & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    _DAT_40023808 = parameters[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*parameters & 4) != 0) {\n    _DAT_40023808 = parameters[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*parameters & 8) != 0) {\n    _DAT_40023808 = parameters[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clockSpeed = calculate_and_store_clock_speed_08006628();\n  is_valid_param_08005c30((uint)clockSpeed / 1000,(int)((ulonglong)clockSpeed >> 0x20),(uint)clockSpeed * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "check_parameter_validity_0800618c",
                "param_1": "parameters",
                "param_2": "paramValue",
                "iVar1": "globalDataValue",
                "uVar2": "globalDataTemp",
                "uVar3": "globalDataLimit",
                "uVar4": "clockSpeed"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "configure_registers_0800640c",
            "code": "\n\n\nvoid configure_registers_0800640c(int config_type,uint param_2,uint param_3)\n\n{\n  undefined4 ptr_address;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  \n  if (config_type == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    ptr_address = 0x100;\n    value_1 = 2;\n    value_3 = 3;\n    value_2 = 0;\n    value_4 = 0;\n    update_registers_08006e88(0x40020000,&ptr_address);\n    _DAT_40023808 = param_3 | param_2 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    ptr_address = 0x200;\n    value_1 = 2;\n    value_3 = 3;\n    value_2 = 0;\n    value_4 = 0;\n    update_registers_08006e88(0x40020800,&ptr_address);\n    _DAT_40023808 = param_2 | param_3 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "configure_registers_0800640c",
                "param_1": "config_type",
                "local_1c": "ptr_address",
                "local_18": "value_1",
                "local_14": "value_2",
                "local_10": "value_3",
                "local_c": "value_4"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_speed_080064ec",
            "code": "\n\n\nuint calculateClockSpeed_080064ec(void)\n\n{\n  uint controlValue;\n  uint clockSpeed;\n  \n  controlValue = _DAT_40023808 & 0xc;\n  if (controlValue == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockSpeed / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (controlValue < 9) {\n    if (controlValue == 0) {\n      return 16000000;\n    }\n    if (controlValue == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_speed_080064ec",
                "uVar1": "controlValue",
                "local_c": "clockSpeed"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_and_store_clock_speed_08006628",
            "code": "\n\n\nuint calculateAndStoreClockSpeed_08006628(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_clock_speed_080064ec();\n  DAT_20000000 = clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_and_store_clock_speed_08006628",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_adjusted_clock_speed_08006680",
            "code": "\n\n\nuint calculateAdjustedClockSpeed_08006680(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_and_store_clock_speed_08006628();\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_adjusted_clock_speed_08006680",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_clock_speed_080066cc",
            "code": "\n\n\nuint calculateClockSpeed_080066cc(void)\n\n{\n  uint clockSpeed;\n  \n  clockSpeed = calculate_and_store_clock_speed_08006628();\n  return clockSpeed >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_clock_speed_080066cc",
                "uVar1": "clockSpeed"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "initialize_register_values_08006950",
            "code": "\n\n\nvoid initializeRegisterValues_08006950(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (inputValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "initialize_register_values_08006950",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_shifted_value_08006998",
            "code": "\n\n\nuint getShiftedValue_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_shifted_value_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_memory_080069b4",
            "code": "\nvoid setBitInMemory_080069b4(byte data)\n\n{\n  *(int *)(((uint)(int)(char)data >> 5) * 4 + -0x1fff1f00) = 1 << (data & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "data"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_at_index_080069e4",
            "code": "\nvoid setBitAtIndex_080069e4(byte byteToSet)\n\n{\n  *(int *)((((uint)(int)(char)byteToSet >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_at_index_080069e4",
                "param_1": "byteToSet"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_08006a18",
            "code": "\nbool checkBit_08006a18(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_at_index_08006a58",
            "code": "\nvoid setBitAtIndex_08006a58(byte byteToSet)\n\n{\n  *(int *)((((uint)(int)(char)byteToSet >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_at_index_08006a58",
                "param_1": "byteToSet"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_08006a8c",
            "code": "\nvoid setBit_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_08006ac0",
            "code": "\nbool checkBit_08006ac0(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "set_byte_value_08006b00",
            "code": "\nvoid setByteValue_08006b00(byte inputValue,uint byteValue)\n\n{\n  if ((char)inputValue < '\\0') {\n    *(char *)((inputValue & 0xf) + 0xe000ed14) = (char)((byteValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputValue + -0x1fff1c00) = (char)((byteValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "set_byte_value_08006b00",
                "param_1": "inputValue",
                "param_2": "byteValue"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extracted_byte_08006b54",
            "code": "\nbyte extractedByte_08006b54(byte inputByte)\n\n{\n  byte outputByte;\n  \n  if ((char)inputByte < '\\0') {\n    outputByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    outputByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return outputByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extracted_byte_08006b54",
                "param_1": "inputByte",
                "bVar1": "outputByte"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "perform_bitwise_operations_08006ba0",
            "code": "\nuint performBitwiseOperations_08006ba0(uint bitMask,uint inputMask,uint outputMask)\n\n{\n  uint shiftCount;\n  \n  bitMask = bitMask & 7;\n  shiftCount = 7 - bitMask;\n  if (3 < shiftCount) {\n    shiftCount = 4;\n  }\n  if (bitMask + 4 < 7) {\n    bitMask = 0;\n  }\n  else {\n    bitMask = bitMask - 3;\n  }\n  return outputMask & (1 << (bitMask & 0xff)) - 1U |\n         ((1 << (shiftCount & 0xff)) - 1U & inputMask) << (bitMask & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "perform_bitwise_operations_08006ba0",
                "param_1": "bitMask",
                "param_2": "inputMask",
                "param_3": "outputMask",
                "uVar1": "shiftCount"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_from_uint_08006c04",
            "code": "\nvoid extractBitsFromUint_08006c04(uint input,uint bitOffset,uint *output1,uint *output2)\n\n{\n  uint shiftAmount;\n  \n  bitOffset = bitOffset & 7;\n  shiftAmount = 7 - bitOffset;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (bitOffset + 4 < 7) {\n    bitOffset = 0;\n  }\n  else {\n    bitOffset = bitOffset - 3;\n  }\n  *output1 = (1 << (shiftAmount & 0xff)) - 1U & input >> (bitOffset & 0xff);\n  *output2 = (1 << (bitOffset & 0xff)) - 1U & input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_from_uint_08006c04",
                "param_1": "input",
                "param_2": "bitOffset",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\nvoid infiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_modify_value_08006c9c",
            "code": "\n\n\nbool checkAndModifyValue_08006c9c(int value)\n\n{\n  bool isValueInRange;\n  \n  isValueInRange = value - 1U < 0x1000000;\n  if (isValueInRange) {\n    _DAT_e000e014 = value + -1;\n    set_byte_value_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValueInRange;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_modify_value_08006c9c",
                "param_1": "value",
                "bVar1": "isValueInRange"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "initialize_registers_08006ce0",
            "code": "\nvoid initialize_registers_08006ce0(undefined4 register_values)\n\n{\n  initialize_registers_08006ce0_helper(register_values);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "initialize_registers_08006ce0",
                "param_1": "register_values",
                "initialize_register_values_08006950": "initialize_registers_helper"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "set_shifted_value_08006cf6",
            "code": "\nvoid setShiftedValue_08006cf6(char inputByte,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 shiftedValue;\n  \n  shiftedValue = getShiftedValue();\n  shiftedValue = performBitwiseOperations(shiftedValue,param2,param3);\n  setByteValue((int)inputByte,shiftedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "set_shifted_value_08006cf6",
                "param_1": "inputByte",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "shiftedValue",
                "get_shifted_value_08006998": "getShiftedValue",
                "perform_bitwise_operations_08006ba0": "performBitwiseOperations",
                "set_byte_value_08006b00": "setByteValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_in_memory_08006d2e",
            "code": "\nvoid setBitInMemory_08006d2e(char input)\n\n{\n  setBitInMemory_08006d2eHelper((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "param_1": "input",
                "set_bit_in_memory_080069b4": "setBitInMemoryHelper"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_at_index_08006d4a",
            "code": "\nvoid setBitAtIndex_08006d4a(char index)\n\n{\n  set_bit_at_index_080069e4((int)index);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_at_index_08006d4a",
                "param_1": "index"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "run_infinite_loop_08006d66",
            "code": "\nvoid run_infinite_loop_08006d66(void)\n\n{\n  execute_infinite_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "run_infinite_loop_08006d66",
                "infinite_loop_08006c70": "execute_infinite_loop"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "process_input_08006d72",
            "code": "\nundefined4 processInput_08006d72(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_modify_value_08006c9c(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "process_input_08006d72",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_shifted_value_08006d8a",
            "code": "\nundefined4 get_shifted_value_08006d8a(void)\n\n{\n  undefined4 shifted_value;\n  \n  shifted_value = get_shifted_value_08006d8a_08006998();\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_shifted_value_08006d8a",
                "uVar1": "shifted_value"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "extract_bits_from_char_08006d98",
            "code": "\nvoid extractBitsFromChar_08006d98(char inputChar,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extractedByte;\n  \n  extractedByte = getExtractedByte((int)inputChar);\n  extractBitsFromUInt(extractedByte,param2,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "extract_bits_from_char_08006d98",
                "param_1": "inputChar",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "extractedByte",
                "extracted_byte_08006b54": "getExtractedByte",
                "extract_bits_from_uint_08006c04": "extractBitsFromUInt"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_at_index_08006dc4",
            "code": "\nvoid setBitAtIndex_08006dc4(char index)\n\n{\n  set_bit_at_index_08006a58((int)index);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_at_index_08006dc4",
                "param_1": "index"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_bit_08006de0",
            "code": "\nundefined4 checkBit_08006de0(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006a18((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_bit_08006de0",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_08006dfe",
            "code": "\nvoid setBit_08006dfe(char input)\n\n{\n  setBit_08006dfeValue((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_08006dfe",
                "param_1": "input",
                "set_bit_08006a8c": "setBitValue"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_08006e1a",
            "code": "\nundefined4 checkBit_08006e1a(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006ac0((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_08006e1a",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_registers_08006e88",
            "code": "\n\n\nvoid updateRegisters_08006e88(uint *outputRegisters,uint *inputRegisters)\n\n{\n  uint bitMask;\n  uint bitValue;\n  int registerIndex;\n  uint loopIndex;\n  \n  for (loopIndex = 0; loopIndex < 0x10; loopIndex = loopIndex + 1) {\n    bitMask = 1 << (loopIndex & 0xff);\n    bitValue = *inputRegisters & bitMask;\n    if (bitValue == bitMask) {\n      if ((inputRegisters[1] == 2) || (inputRegisters[1] == 0x12)) {\n        bitMask = inputRegisters[4];\n        outputRegisters[(loopIndex >> 3) + 8] = outputRegisters[(loopIndex >> 3) + 8] & ~(0xf << ((loopIndex & 7) << 2));\n        outputRegisters[(loopIndex >> 3) + 8] = outputRegisters[(loopIndex >> 3) + 8] | bitMask << ((loopIndex & 7) << 2);\n      }\n      *outputRegisters = *outputRegisters & ~(3 << ((loopIndex & 0x7f) << 1));\n      *outputRegisters = *outputRegisters | (inputRegisters[1] & 3) << ((loopIndex & 0x7f) << 1);\n      if ((((inputRegisters[1] == 1) || (inputRegisters[1] == 2)) || (inputRegisters[1] == 0x11)) || (inputRegisters[1] == 0x12)\n         ) {\n        outputRegisters[2] = outputRegisters[2] & ~(3 << ((loopIndex & 0x7f) << 1));\n        outputRegisters[2] = outputRegisters[2] | inputRegisters[3] << ((loopIndex & 0x7f) << 1);\n        outputRegisters[1] = outputRegisters[1] & ~(1 << (loopIndex & 0xff));\n        outputRegisters[1] = outputRegisters[1] | (inputRegisters[1] >> 4 & 1) << (loopIndex & 0xff);\n      }\n      outputRegisters[3] = outputRegisters[3] & ~(3 << ((loopIndex & 0x7f) << 1));\n      outputRegisters[3] = outputRegisters[3] | inputRegisters[2] << ((loopIndex & 0x7f) << 1);\n      if ((inputRegisters[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((loopIndex & 3) << 2)) & *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800);\n        if (outputRegisters == (uint *)0x40020000) {\n          registerIndex = 0;\n        }\n        else if (outputRegisters == (uint *)0x40020400) {\n          registerIndex = 1;\n        }\n        else if (outputRegisters == (uint *)0x40020800) {\n          registerIndex = 2;\n        }\n        else if (outputRegisters == (uint *)0x40020c00) {\n          registerIndex = 3;\n        }\n        else if (outputRegisters == (uint *)0x40021000) {\n          registerIndex = 4;\n        }\n        else if (outputRegisters == (uint *)0x40021400) {\n          registerIndex = 5;\n        }\n        else if (outputRegisters == (uint *)0x40021800) {\n          registerIndex = 6;\n        }\n        else if (outputRegisters == (uint *)0x40021c00) {\n          registerIndex = 7;\n        }\n        else if (outputRegisters == (uint *)0x40022000) {\n          registerIndex = 8;\n        }\n        else if (outputRegisters == (uint *)0x40022400) {\n          registerIndex = 9;\n        }\n        else {\n          registerIndex = 10;\n        }\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             registerIndex << ((loopIndex & 3) << 2) | *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitValue & _DAT_40013c00;\n        _DAT_40013c04 = ~bitValue & _DAT_40013c04;\n        if ((inputRegisters[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitValue | _DAT_40013c00;\n        }\n        if ((inputRegisters[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitValue | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitValue & _DAT_40013c08;\n        _DAT_40013c0c = ~bitValue & _DAT_40013c0c;\n        if ((inputRegisters[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitValue | _DAT_40013c08;\n        }\n        if ((inputRegisters[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitValue | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_registers_08006e88",
                "param_1": "outputRegisters",
                "param_2": "inputRegisters",
                "uVar1": "bitMask",
                "uVar2": "bitValue",
                "iVar3": "registerIndex",
                "local_c": "loopIndex"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "set_param_value_0800733e",
            "code": "\nvoid setParamValue_0800733e(int dataObject,undefined2 value,char isSecondValue)\n\n{\n  if (isSecondValue == '\\0') {\n    *(undefined2 *)(dataObject + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(dataObject + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "dataObject",
                "param_2": "value",
                "param_3": "isSecondValue"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_and_call_function_0800738e",
            "code": "\n\n\nvoid updateAndCallFunction_0800738e(ushort input)\n\n{\n  if ((input & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)input;\n    FUNC_080073c0(input);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_and_call_function_0800738e",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid setBitInMemory_080073d4(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x4002001a) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "update_bitmap_08007402",
            "code": "\nvoid updateBitmap_08007402(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "update_bitmap_08007402",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initializeSystem_08007436(void)\n\n{\n  int result;\n  undefined4 statusFlag1;\n  undefined4 statusFlag2;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  undefined4 parameter5;\n  undefined4 parameter6;\n  undefined4 parameter7;\n  undefined4 parameter8;\n  undefined4 parameter9;\n  undefined4 parameter10;\n  undefined4 parameter11;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  statusFlag1 = 1;\n  statusFlag2 = 1;\n  parameter1 = 2;\n  parameter2 = 0x400000;\n  parameter3 = 8;\n  parameter4 = 0x150;\n  parameter5 = 2;\n  parameter6 = 7;\n  result = check_and_modify_status_08005cec(&statusFlag1);\n  if (result != 0) {\n    infinite_loop_08007430();\n  }\n  parameter7 = 0xf;\n  parameter8 = 2;\n  parameter9 = 0;\n  parameter10 = 0x1400;\n  parameter11 = 0x1000;\n  result = check_parameter_validity_0800618c(&parameter7,5);\n  if (result != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "statusFlag1",
                "local_48": "statusFlag2",
                "local_34": "parameter1",
                "local_30": "parameter2",
                "local_2c": "parameter3",
                "local_28": "parameter4",
                "local_24": "parameter5",
                "local_20": "parameter6",
                "local_1c": "parameter7",
                "local_18": "parameter8",
                "local_14": "parameter9",
                "local_10": "parameter10",
                "local_c": "parameter11",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "process_function_080074c8",
            "code": "\nvoid processFunction_080074c8(uint inputParameter)\n\n{\n  if ((inputParameter & 1) != 0) {\n    updateBitmap(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((inputParameter & 0x1e) != 0)) {\n    initializeAndCheckSystem();\n  }\n  if ((DAT_20000e50 != 0) && ((inputParameter & 0x80) != 0)) {\n    updateState(inputParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "process_function_080074c8",
                "param_1": "inputParameter",
                "update_bitmap_08007402": "updateBitmap",
                "initialize_and_check_system_0800195c": "initializeAndCheckSystem",
                "check_flags_and_update_state_08003a18": "updateState"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_in_memory_08007520",
            "code": "\nvoid setBitInMemory_08007520(uint input)\n\n{\n  if ((input & 1) != 0) {\n    setMemoryBit(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_in_memory_08007520",
                "param_1": "input",
                "set_bit_in_memory_080073d4": "setMemoryBit"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_and_run_application_08007540",
            "code": "\nundefined4 initialize_and_run_application_08007540(void)\n\n{\n  initialize_and_process();\n  initialize_system();\n  initialize_registers();\n  initialize();\n  initialize_memory();\n  initialize_memory();\n  initialize_interrupt_handler(0);\n  run_application();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_and_run_application_08007540",
                "initialize_and_process_080059b4": "initialize_and_process",
                "initialize_system_08007436": "initialize_system",
                "initialize_registers_0800778c": "initialize_registers",
                "initialize_08007e08": "initialize",
                "initialize_memory_080079c0": "initialize_memory",
                "initialize_memory_08008190": "initialize_memory",
                "initialize_interrupt_handler_08005984": "initialize_interrupt_handler",
                "run_application_08001ddc": "run_application"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_memory_0800756c",
            "code": "\n\n\nvoid initializeMemory_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_memory_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "modify_bits_080076c8",
            "code": "\nvoid modifyBits_080076c8(uint input)\n\n{\n  *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "modify_bits_080076c8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "execute_data_operations_08007756",
            "code": "\nvoid executeDataOperations_08007756(void)\n\n{\n  uint globalData;\n  \n  globalData = getGlobalData();\n  if ((globalData & 0x1ff) == 0) {\n    modifyBits(0x3c);\n  }\n  if ((globalData & 0xf) == 0) {\n    updateBitFlags();\n  }\n  incrementCounter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "execute_data_operations_08007756",
                "uVar1": "globalData",
                "get_global_data_08005a84": "getGlobalData",
                "modify_bits_080076c8": "modifyBits",
                "update_bit_flags_08007930": "updateBitFlags",
                "increment_counter_08005a68": "incrementCounter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_registers_0800778c",
            "code": "\n\n\nvoid initializeRegisters_0800778c(void)\n\n{\n  int index;\n  int bitShift;\n  undefined4 registerValueA;\n  undefined4 registerValueB;\n  undefined4 registerValueC;\n  undefined4 registerValueD;\n  uint *pointerToRegister;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    index = counter * 0x18;\n    pointerToRegister = (uint *)(&DAT_0800bcbc + index);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*pointerToRegister >> 4 & 0xff);\n    bitShift = 1 << (*pointerToRegister & 0xf);\n    registerValueA = *(undefined4 *)(&DAT_0800bcc0 + index);\n    registerValueB = *(undefined4 *)(&DAT_0800bcc4 + index);\n    registerValueC = *(undefined4 *)(&DAT_0800bcc8 + index);\n    registerValueD = *(undefined4 *)(&DAT_0800bccc + index);\n    update_registers_08006e88(((*pointerToRegister >> 4) + 0x100080) * 0x400,&bitShift);\n    if (-1 < (int)pointerToRegister[5]) {\n      set_param_value_0800733e(((*pointerToRegister >> 4) + 0x100080) * 0x400,1 << (*pointerToRegister & 0xf) & 0xffff,\n                   pointerToRegister[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_registers_0800778c",
                "iVar1": "index",
                "local_24": "bitShift",
                "local_20": "registerValueA",
                "local_1c": "registerValueB",
                "local_18": "registerValueC",
                "local_14": "registerValueD",
                "local_10": "pointerToRegister",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_value_08007854",
            "code": "\nuint checkBitValue_08007854(uint inputValue)\n\n{\n  return *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020010) >> (inputValue & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_value_08007854",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "map_bit_flags_to_value_08007884",
            "code": "\nuint map_bit_flags_to_value_08007884(void)\n\n{\n  int bit_flag_0x36;\n  int bit_flag_0x37;\n  int bit_flag_0x38;\n  int bit_flag_0x39;\n  int bit_flag_0xf;\n  uint bit_flag_0;\n  \n  bit_flag_0x36 = get_bit_value(0x36);\n  bit_flag_0x37 = get_bit_value(0x37);\n  bit_flag_0x38 = get_bit_value(0x38);\n  bit_flag_0x39 = get_bit_value(0x39);\n  bit_flag_0xf = get_bit_value(0xf);\n  bit_flag_0 = get_bit_value(0);\n  return bit_flag_0 | bit_flag_0x36 << 4 | bit_flag_0x37 << 3 | bit_flag_0x38 << 2 | bit_flag_0x39 << 1 | bit_flag_0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "map_bit_flags_to_value_08007884",
                "iVar1": "bit_flag_0x36",
                "iVar2": "bit_flag_0x37",
                "iVar3": "bit_flag_0x38",
                "iVar4": "bit_flag_0x39",
                "iVar5": "bit_flag_0xf",
                "uVar6": "bit_flag_0",
                "check_bit_value_08007854": "get_bit_value"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_final_value_080078f4",
            "code": "\nuint calculateFinalValue_080078f4(void)\n\n{\n  int index;\n  uint finalValue;\n  \n  finalValue = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    finalValue = *(uint *)(&DAT_20000e54 + index * 4) | finalValue;\n  }\n  return finalValue;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_final_value_080078f4",
                "local_10": "index",
                "local_c": "finalValue"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_bit_flags_08007930",
            "code": "\nvoid update_bit_flags_08007930(void)\n\n{\n  int currentIndex;\n  uint previousBitFlags;\n  undefined4 newMappedValue;\n  uint finalValue;\n  uint changedBits;\n  \n  currentIndex = DAT_20000e68;\n  previousBitFlags = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    newMappedValue = map_bit_flags_to_value_08007884();\n    *(undefined4 *)(&DAT_20000e54 + currentIndex * 4) = newMappedValue;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    finalValue = calculate_final_value_080078f4();\n    previousBitFlags = DAT_20000e64;\n    if (finalValue != DAT_20000e64) {\n      changedBits = ~finalValue & DAT_20000e64;\n      if ((~DAT_20000e64 & finalValue) != 0) {\n        process_function_080074c8(~DAT_20000e64 & finalValue);\n      }\n      previousBitFlags = finalValue;\n      if (changedBits != 0) {\n        set_bit_in_memory_08007520(changedBits);\n      }\n    }\n  }\n  DAT_20000e64 = previousBitFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_bit_flags_08007930",
                "iVar1": "currentIndex",
                "uVar2": "previousBitFlags",
                "uVar3": "newMappedValue",
                "uVar4": "finalValue",
                "uVar5": "changedBits"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_memory_080079c0",
            "code": "\nvoid initializeMemory_080079c0(void)\n\n{\n  fill_memory_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_memory_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_080079e0",
            "code": "\nvoid setBit_080079e0(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_080079e0",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flags_based_on_address_08007a10",
            "code": "\n\n\nvoid updateFlagsBasedOnAddress_08007a10(undefined *address)\n\n{\n  if (address == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (address == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (address == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flags_based_on_address_08007a10",
                "param_1": "address"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "set_shifted_value_and_bit_08007a70",
            "code": "\nvoid setShiftedValueAndBit_08007a70(undefined *inputPointer,undefined4 value1,undefined4 value2)\n\n{\n  undefined localShiftedValue;\n  \n  if (inputPointer == (undefined *)0x40000000) {\n    localShiftedValue = 0x1c;\n  }\n  else if (inputPointer == (undefined *)0x40000400) {\n    localShiftedValue = 0x1d;\n  }\n  else {\n    if (inputPointer != &DAT_40000800) {\n      return;\n    }\n    localShiftedValue = 0x1e;\n  }\n  set_shifted_value_08006cf6(localShiftedValue,value1,value2);\n  set_bit_080079e0(localShiftedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "set_shifted_value_and_bit_08007a70",
                "param_1": "inputPointer",
                "param_2": "value1",
                "param_3": "value2",
                "local_c": "localShiftedValue"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  updateFlagsBasedOnAddress(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  setShiftedValueAndBit(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "set_shifted_value_and_bit_08007a70": "setShiftedValueAndBit",
                "update_flags_based_on_address_08007a10": "updateFlagsBasedOnAddress"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_based_on_conditions_08007b70",
            "code": "\n\n\nvoid setFlagsBasedOnConditions_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_based_on_conditions_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "reset_bits_08007bc2",
            "code": "\n\n\nvoid resetBits_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "reset_bits_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_data_08007bf0",
            "code": "\n\n\nvoid update_data_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_data_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_parameter_value_08007c40",
            "code": "\n\n\nvoid set_parameter_value_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_parameter_value_08007c40",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "initialize_global_variable_08007c5e",
            "code": "\n\n\nvoid initializeGlobalVariable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "initialize_global_variable_08007c5e",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "update_flags_and_data_information_08007c7c",
            "code": "\n\n\nvoid update_flags_and_data_information_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    update_flags_function();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_flags_function_2();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_data_information_function();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "update_flags_and_data_information_08007c7c",
                "update_flags_08005778": "update_flags_function",
                "update_flags_08005760": "update_flags_function_2",
                "update_data_information_080053a0": "update_data_information_function"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_registers_08007d08",
            "code": "\n\n\nvoid initialize_registers_08007d08(void)\n\n{\n  update_flags_based_on_address_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_registers_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_and_values_08007da8",
            "code": "\n\n\nvoid setFlagsAndValues_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_and_values_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_08007e08",
            "code": "\nvoid initialize_08007e08(void)\n\n{\n  initialize_08007e08_memory();\n  initialize_08007e08_registers();\n  set_flags_and_values();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_08007e08",
                "initialize_memory_08007ad0": "initialize_memory",
                "initialize_registers_08007d08": "initialize_registers",
                "set_flags_and_values_08007da8": "set_flags_and_values"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_flag_08007e1c",
            "code": "\n\n\nvoid waitForFlag_08007e1c(byte inputByte)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)inputByte;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_08007e1c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_flag_set_08007e58",
            "code": "\n\n\nbool isFlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_flag_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_memory_08007ea4",
            "code": "\n\n\nvoid updateMemory_08007ea4(undefined *memory_address)\n\n{\n  if (memory_address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memory_address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memory_address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memory_address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memory_address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memory_address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_memory_08007ea4",
                "param_1": "memory_address"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_speed_08007f54",
            "code": "\nvoid calculateClockSpeed_08007f54(int clockAddress,int multiplier)\n\n{\n  ulonglong clockAdjustment;\n  int adjustedClockSpeed;\n  int currentClockSpeed;\n  undefined8 clockSpeed;\n  \n  if ((*(uint *)(clockAddress + 0xc) & 0x8000) == 0) {\n    if ((clockAddress != 0x40011000) && (clockAddress != 0x40011400)) {\n      clockSpeed = calculate_adjusted_clock_speed_08006680();\n      clockAdjustment = (ulonglong)(uint)((int)clockSpeed * 0x19) / (ulonglong)(uint)(multiplier << 2);\n      adjustedClockSpeed = calculate_adjusted_clock_speed_08006680((int)clockSpeed,(int)((ulonglong)clockSpeed >> 0x20),(int)(clockAdjustment * 0x51eb851f));\n      currentClockSpeed = calculate_adjusted_clock_speed_08006680();\n      *(uint *)(clockAddress + 8) =\n           (int)(clockAdjustment / 100) << 4 |\n           (((uint)(adjustedClockSpeed * 0x19) / (uint)(multiplier << 2) +\n            (int)(((ulonglong)(uint)(currentClockSpeed * 0x19) / (ulonglong)(uint)(multiplier << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockSpeed = calculate_clock_speed_080066cc();\n    clockAdjustment = (ulonglong)(uint)((int)clockSpeed * 0x19) / (ulonglong)(uint)(multiplier << 2);\n    adjustedClockSpeed = calculate_clock_speed_080066cc((int)clockSpeed,(int)((ulonglong)clockSpeed >> 0x20),(int)(clockAdjustment * 0x51eb851f));\n    currentClockSpeed = calculate_clock_speed_080066cc();\n    *(uint *)(clockAddress + 8) =\n         (int)(clockAdjustment / 100) << 4 |\n         (((uint)(adjustedClockSpeed * 0x19) / (uint)(multiplier << 2) +\n          (int)(((ulonglong)(uint)(currentClockSpeed * 0x19) / (ulonglong)(uint)(multiplier << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((clockAddress != 0x40011000) && (clockAddress != 0x40011400)) {\n      clockSpeed = calculate_adjusted_clock_speed_08006680();\n      clockAdjustment = (ulonglong)(uint)((int)clockSpeed * 0x19) / (ulonglong)(uint)(multiplier << 1);\n      adjustedClockSpeed = calculate_adjusted_clock_speed_08006680((int)clockSpeed,(int)((ulonglong)clockSpeed >> 0x20),(int)(clockAdjustment * 0x51eb851f));\n      currentClockSpeed = calculate_adjusted_clock_speed_08006680();\n      *(uint *)(clockAddress + 8) =\n           (int)(clockAdjustment / 100) << 4 |\n           (((uint)(adjustedClockSpeed * 0x19) / (uint)(multiplier << 1) +\n            (int)(((ulonglong)(uint)(currentClockSpeed * 0x19) / (ulonglong)(uint)(multiplier << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockSpeed = calculate_clock_speed_080066cc();\n    clockAdjustment = (ulonglong)(uint)((int)clockSpeed * 0x19) / (ulonglong)(uint)(multiplier << 1);\n    adjustedClockSpeed = calculate_clock_speed_080066cc((int)clockSpeed,(int)((ulonglong)clockSpeed >> 0x20),(int)(clockAdjustment * 0x51eb851f));\n    currentClockSpeed = calculate_clock_speed_080066cc();\n    *(uint *)(clockAddress + 8) =\n         (int)(clockAdjustment / 100) << 4 |\n         (((uint)(adjustedClockSpeed * 0x19) / (uint)(multiplier << 1) +\n          (int)(((ulonglong)(uint)(currentClockSpeed * 0x19) / (ulonglong)(uint)(multiplier << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_speed_08007f54",
                "param_1": "clockAddress",
                "param_2": "multiplier",
                "uVar1": "clockAdjustment",
                "iVar2": "adjustedClockSpeed",
                "iVar3": "currentClockSpeed",
                "uVar4": "clockSpeed"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_memory_08008190",
            "code": "\n\n\nvoid initializeMemory_08008190(void)\n\n{\n  update_memory_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  setClockSpeed(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_memory_08008190",
                "calculate_clock_speed_08007f54": "setClockSpeed"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "wait_for_flag_08008250",
            "code": "\nvoid wait_for_flag_08008250(undefined input)\n\n{\n  wait_for_flag_08008250_08007e1c(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "wait_for_flag_08008250",
                "param_1": "input"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "wait_for_flag_0800826a",
            "code": "\nundefined4 wait_for_flag_0800826a(undefined flag_address)\n\n{\n  wait_for_flag_0800826a_08007e1c(flag_address);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "wait_for_flag_0800826a",
                "param_1": "flag_address"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_flag_and_get_lowest_byte_08008286",
            "code": "\nundefined check_flag_and_get_lowest_byte_08008286(void)\n\n{\n  undefined lowest_byte_value;\n  int is_flag_set;\n  \n  is_flag_set = is_flag_set_08007e58();\n  if (is_flag_set != 0) {\n    lowest_byte_value = get_lowest_byte_08007e84();\n    is_flag_set = check_byte_value(lowest_byte_value);\n    if (is_flag_set == 0) {\n      return lowest_byte_value;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_flag_and_get_lowest_byte_08008286",
                "iVar2": "is_flag_set",
                "uVar1": "lowest_byte_value",
                "check_byte_value_08005900": "check_byte_value"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_result_080082d0",
            "code": "\nulonglong calculate_result_080082d0(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int index_1;\n  byte byte_val;\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  int index_2;\n  uint result_1;\n  uint result_2;\n  uint result_3;\n  uint result_4;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  \n  temp_var4 = input_4 ^ 0x80000000;\n  result_1 = input_2 << 1;\n  input_4 = input_4 << 1;\n  bool_var1 = ((input_2 ^ temp_var4) & 0x7fffffff) == 0;\n  bool_var2 = bool_var1 && input_1 == input_3;\n  if (!bool_var1 || input_1 != input_3) {\n    bool_var2 = (result_1 | input_1) == 0;\n  }\n  if (!bool_var2) {\n    bool_var2 = (input_4 | input_3) == 0;\n  }\n  index_2 = (int)result_1 >> 0x15;\n  if (!bool_var2) {\n    bool_var2 = index_2 == -1;\n  }\n  index_1 = (int)input_4 >> 0x15;\n  if (!bool_var2) {\n    bool_var2 = index_1 == -1;\n  }\n  if (bool_var2) {\n    if (index_2 == -1 || index_1 == -1) {\n      result_1 = temp_var4;\n      result_3 = input_3;\n      if (index_2 == -1) {\n        result_1 = input_2;\n        result_3 = input_1;\n      }\n      if (index_2 != -1 || index_1 != -1) {\n        input_3 = result_3;\n        temp_var4 = result_1;\n      }\n      bool_var2 = (result_3 | result_1 << 0xc) == 0;\n      if (bool_var2) {\n        bool_var2 = (input_3 | temp_var4 << 0xc) == 0;\n      }\n      if (bool_var2) {\n        bool_var2 = result_1 == temp_var4;\n      }\n      if (!bool_var2) {\n        result_1 = result_1 | 0x80000;\n      }\n      return CONCAT44(result_1,result_3);\n    }\n    if (((input_2 ^ temp_var4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((result_1 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_var4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_var4) {\n      return 0;\n    }\n    if (result_1 >> 0x15 == 0) {\n      bool_var2 = (input_1 & 0x80000000) != 0;\n      temp_var4 = input_2 * 2 + (uint)bool_var2;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)bool_var2)) {\n        temp_var4 = temp_var4 | 0x80000000;\n      }\n      return CONCAT44(temp_var4,input_1 << 1);\n    }\n    if (result_1 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  result_1 = result_1 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  result_3 = input_4 - result_1;\n  bool_var2 = result_3 != 0;\n  if (input_4 < result_1) {\n    result_3 = -result_3;\n  }\n  result_2 = input_1;\n  temp_var5 = input_2;\n  if (bool_var2 && result_1 <= input_4) {\n    result_1 = result_1 + result_3;\n    result_2 = input_3;\n    temp_var5 = temp_var4;\n    input_3 = input_1;\n    temp_var4 = input_2;\n  }\n  if (0x36 < result_3) {\n    return CONCAT44(temp_var5,result_2);\n  }\n  temp_var2 = temp_var5 & 0xfffff | 0x100000;\n  if ((temp_var5 & 0x80000000) != 0) {\n    bool_var2 = result_2 != 0;\n    result_2 = -result_2;\n    temp_var2 = -temp_var2 - (uint)bool_var2;\n  }\n  temp_var5 = temp_var4 & 0xfffff | 0x100000;\n  if ((temp_var4 & 0x80000000) != 0) {\n    bool_var2 = input_3 != 0;\n    input_3 = -input_3;\n    temp_var5 = -temp_var5 - (uint)bool_var2;\n  }\n  if (result_1 == result_3) {\n    temp_var5 = temp_var5 ^ 0x100000;\n    if (result_1 == 0) {\n      temp_var2 = temp_var2 ^ 0x100000;\n      result_1 = 1;\n    }\n    else {\n      result_3 = result_3 - 1;\n    }\n  }\n  temp_var4 = -result_3 + 0x20;\n  if ((int)result_3 < 0x21) {\n    result_4 = input_3 << (temp_var4 & 0xff);\n    input_3 = input_3 >> (result_3 & 0xff);\n    temp_var1 = result_2 + input_3;\n    temp_var3 = temp_var5 << (temp_var4 & 0xff);\n    temp_var4 = temp_var1 + temp_var3;\n    temp_var2 = temp_var2 + CARRY4(result_2,input_3) + ((int)temp_var5 >> (result_3 & 0xff)) +\n            (uint)CARRY4(temp_var1,temp_var3);\n  }\n  else {\n    result_4 = temp_var5 << (-result_3 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      result_4 = result_4 | 2;\n    }\n    temp_var5 = (int)temp_var5 >> (result_3 - 0x20 & 0xff);\n    temp_var4 = result_2 + temp_var5;\n    temp_var2 = temp_var2 + ((int)temp_var5 >> 0x1f) + (uint)CARRY4(result_2,temp_var5);\n  }\n  input_2 = temp_var2 & 0x80000000;\n  result_3 = temp_var2;\n  if ((int)temp_var2 < 0) {\n    bool_var2 = result_4 == 0;\n    result_4 = -result_4;\n    result_3 = -temp_var4;\n    temp_var4 = -(uint)!bool_var2 - temp_var4;\n    result_3 = -(uint)(bool_var2 <= result_3) - temp_var2;\n  }\n  if (0xfffff < result_3) {\n    result_2 = result_1 - 1;\n    if (0x1fffff < result_3) {\n      result_2 = result_3 & 1;\n      result_3 = result_3 >> 1;\n      byte_val = (byte)temp_var4;\n      temp_var4 = (uint)(result_2 != 0) << 0x1f | temp_var4 >> 1;\n      result_4 = (uint)(byte_val & 1) << 0x1f | result_4 >> 1;\n      result_2 = result_1;\n      if (0xffbfffff < result_1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    bool_var2 = 0x7fffffff < result_4;\n    if (result_4 == 0x80000000) {\n      bool_var2 = (temp_var4 & 1) != 0;\n    }\n    return CONCAT44(result_3 + result_2 * 0x100000 + (uint)CARRY4(temp_var4,(uint)bool_var2) | input_2,\n                    temp_var4 + bool_var2);\n  }\n  bool_var1 = (result_4 & 0x80000000) != 0;\n  result_4 = result_4 << 1;\n  result_2 = temp_var4 * 2;\n  bool_var2 = CARRY4(temp_var4,temp_var4);\n  temp_var4 = temp_var4 * 2 + (uint)bool_var1;\n  result_3 = result_3 * 2 + (uint)(bool_var2 || CARRY4(result_2,(uint)bool_var1));\n  result_2 = result_1 - 2;\n  if (result_1 - 1 != 0 && 0xfffff < result_3) goto LAB_080083e0;\n  temp_var5 = temp_var4;\n  result_1 = result_3;\n  if (result_3 == 0) {\n    temp_var5 = 0;\n    result_1 = temp_var4;\n  }\n  index_2 = LZCOUNT(result_1);\n  if (result_3 == 0) {\n    index_2 = index_2 + 0x20;\n  }\n  result_3 = index_2 - 0xb;\n  bool_var3 = SBORROW4(result_3,0x20);\n  temp_var4 = index_2 - 0x2b;\n  bool_var2 = (int)temp_var4 < 0;\n  bool_var1 = temp_var4 == 0;\n  if ((int)result_3 < 0x20) {\n    bool_var3 = SCARRY4(temp_var4,0xc);\n    index_2 = index_2 + -0x1f;\n    bool_var2 = index_2 < 0;\n    bool_var1 = index_2 == 0;\n    temp_var4 = result_3;\n    if (!bool_var1 && bool_var2 == bool_var3) {\n      temp_var5 = result_1 << (result_3 & 0xff);\n      result_1 = result_1 >> (0xcU - index_2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    result_4 = 0x20 - temp_var4;\n  }\n  result_1 = result_1 << (temp_var4 & 0xff);\n  if (bool_var1 || bool_var2 != bool_var3) {\n    result_1 = result_1 | temp_var5 >> (result_4 & 0xff);\n  }\n  if (bool_var1 || bool_var2 != bool_var3) {\n    temp_var5 = temp_var5 << (temp_var4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result_3 <= (int)result_2) {\n    return CONCAT44(result_1 + (result_2 - result_3) * 0x100000 | input_2,temp_var5);\n  }\n  temp_var4 = ~(result_2 - result_3);\n  if ((int)temp_var4 < 0x1f) {\n    index_2 = temp_var4 - 0x13;\n    if (index_2 != 0 && index_2 < 0 == SCARRY4(temp_var4 - 0x1f,0xc)) {\n      return CONCAT44(temp_var2,temp_var5 >> (0x20 - (0xcU - index_2) & 0xff) | result_1 << (0xcU - index_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_var4 = temp_var4 + 1;\n    return CONCAT44(input_2 | result_1 >> (temp_var4 & 0xff),\n                    temp_var5 >> (temp_var4 & 0xff) | result_1 << (0x20 - temp_var4 & 0xff));\n  }\n  return CONCAT44(temp_var2,result_1 >> (temp_var4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_result_080082d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "index_1",
                "bVar2": "byte_val",
                "uVar3": "temp_var1",
                "uVar4": "temp_var2",
                "uVar5": "temp_var3",
                "uVar6": "temp_var4",
                "uVar7": "temp_var5",
                "iVar8": "index_2",
                "uVar9": "result_1",
                "uVar10": "result_2",
                "uVar11": "result_3",
                "uVar12": "result_4",
                "bVar13": "bool_var1",
                "bVar14": "bool_var2",
                "bVar15": "bool_var3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_sum_080082d4",
            "code": "\nulonglong calculate_sum_080082d4(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint shifted_value2;\n  uint shifted_value3;\n  uint shifted_value4;\n  uint diff_shifted_values;\n  uint temp7;\n  uint temp8;\n  bool is_equal;\n  bool check_result;\n  bool overflow_check;\n  \n  shifted_value2 = value2 << 1;\n  shifted_value4 = value4 << 1;\n  is_equal = ((value2 ^ value4) & 0x7fffffff) == 0;\n  check_result = is_equal && value1 == value3;\n  if (!is_equal || value1 != value3) {\n    check_result = (shifted_value2 | value1) == 0;\n  }\n  if (!check_result) {\n    check_result = (shifted_value4 | value3) == 0;\n  }\n  temp6 = (int)shifted_value2 >> 0x15;\n  if (!check_result) {\n    check_result = temp6 == -1;\n  }\n  temp1 = (int)shifted_value4 >> 0x15;\n  if (!check_result) {\n    check_result = temp1 == -1;\n  }\n  if (check_result) {\n    if (temp6 == -1 || temp1 == -1) {\n      shifted_value4 = value4;\n      shifted_value2 = value3;\n      if (temp6 == -1) {\n        shifted_value4 = value2;\n        shifted_value2 = value1;\n      }\n      if (temp6 != -1 || temp1 != -1) {\n        value3 = shifted_value2;\n        value4 = shifted_value4;\n      }\n      check_result = (shifted_value2 | shifted_value4 << 0xc) == 0;\n      if (check_result) {\n        check_result = (value3 | value4 << 0xc) == 0;\n      }\n      if (check_result) {\n        check_result = shifted_value4 == value4;\n      }\n      if (!check_result) {\n        shifted_value4 = shifted_value4 | 0x80000;\n      }\n      return CONCAT44(shifted_value4,shifted_value2);\n    }\n    if (((value2 ^ value4) & 0x7fffffff) != 0 || value1 != value3) {\n      if ((shifted_value2 | value1) == 0) {\n        value1 = value3;\n        value2 = value4;\n      }\n      return CONCAT44(value2,value1);\n    }\n    if (value2 != value4) {\n      return 0;\n    }\n    if (shifted_value2 >> 0x15 == 0) {\n      check_result = (value1 & 0x80000000) != 0;\n      shifted_value4 = value2 * 2 + (uint)check_result;\n      if (CARRY4(value2,value2) || CARRY4(value2 * 2,(uint)check_result)) {\n        shifted_value4 = shifted_value4 | 0x80000000;\n      }\n      return CONCAT44(shifted_value4,value1 << 1);\n    }\n    if (shifted_value2 < 0xffc00000) {\n      return CONCAT44(value2 + 0x100000,value1);\n    }\n    value2 = value2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(value2 | 0x7ff00000) << 0x20;\n  }\n  shifted_value2 = shifted_value2 >> 0x15;\n  shifted_value4 = shifted_value4 >> 0x15;\n  diff_shifted_values = shifted_value4 - shifted_value2;\n  check_result = diff_shifted_values != 0;\n  if (shifted_value4 < shifted_value2) {\n    diff_shifted_values = -diff_shifted_values;\n  }\n  shifted_value3 = value1;\n  temp5 = value2;\n  if (check_result && shifted_value2 <= shifted_value4) {\n    shifted_value2 = shifted_value2 + diff_shifted_values;\n    shifted_value3 = value3;\n    temp5 = value4;\n    value3 = value1;\n    value4 = value2;\n  }\n  if (0x36 < diff_shifted_values) {\n    return CONCAT44(temp5,shifted_value3);\n  }\n  shifted_value4 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    check_result = shifted_value3 != 0;\n    shifted_value3 = -shifted_value3;\n    shifted_value4 = -shifted_value4 - (uint)check_result;\n  }\n  temp5 = value4 & 0xfffff | 0x100000;\n  if ((value4 & 0x80000000) != 0) {\n    check_result = value3 != 0;\n    value3 = -value3;\n    temp5 = -temp5 - (uint)check_result;\n  }\n  if (shifted_value2 == diff_shifted_values) {\n    temp5 = temp5 ^ 0x100000;\n    if (shifted_value2 == 0) {\n      shifted_value4 = shifted_value4 ^ 0x100000;\n      shifted_value2 = 1;\n    }\n    else {\n      diff_shifted_values = diff_shifted_values - 1;\n    }\n  }\n  temp8 = -diff_shifted_values + 0x20;\n  if ((int)diff_shifted_values < 0x21) {\n    temp7 = value3 << (temp8 & 0xff);\n    value3 = value3 >> (diff_shifted_values & 0xff);\n    temp3 = shifted_value3 + value3;\n    temp4 = temp5 << (temp8 & 0xff);\n    temp8 = temp3 + temp4;\n    shifted_value4 = shifted_value4 + CARRY4(shifted_value3,value3) + ((int)temp5 >> (diff_shifted_values & 0xff)) +\n            (uint)CARRY4(temp3,temp4);\n  }\n  else {\n    temp7 = temp5 << (-diff_shifted_values + 0x40 & 0xff);\n    if (value3 != 0) {\n      temp7 = temp7 | 2;\n    }\n    temp5 = (int)temp5 >> (diff_shifted_values - 0x20 & 0xff);\n    temp8 = shifted_value3 + temp5;\n    shifted_value4 = shifted_value4 + ((int)temp5 >> 0x1f) + (uint)CARRY4(shifted_value3,temp5);\n  }\n  value2 = shifted_value4 & 0x80000000;\n  diff_shifted_values = shifted_value4;\n  if ((int)shifted_value4 < 0) {\n    check_result = temp7 == 0;\n    temp7 = -temp7;\n    diff_shifted_values = -temp8;\n    temp8 = -(uint)!check_result - temp8;\n    diff_shifted_values = -(uint)(check_result <= diff_shifted_values) - shifted_value4;\n  }\n  if (0xfffff < diff_shifted_values) {\n    shifted_value3 = shifted_value2 - 1;\n    if (0x1fffff < diff_shifted_values) {\n      shifted_value4 = diff_shifted_values & 1;\n      diff_shifted_values = diff_shifted_values >> 1;\n      temp2 = (byte)temp8;\n      temp8 = (uint)(shifted_value4 != 0) << 0x1f | temp8 >> 1;\n      temp7 = (uint)(temp2 & 1) << 0x1f | temp7 >> 1;\n      shifted_value3 = shifted_value2;\n      if (0xffbfffff < shifted_value2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    check_result = 0x7fffffff < temp7;\n    if (temp7 == 0x80000000) {\n      check_result = (temp8 & 1) != 0;\n    }\n    return CONCAT44(diff_shifted_values + shifted_value3 * 0x100000 + (uint)CARRY4(temp8,(uint)check_result) | value2,\n                    temp8 + check_result);\n  }\n  is_equal = (temp7 & 0x80000000) != 0;\n  temp7 = temp7 << 1;\n  shifted_value3 = temp8 * 2;\n  check_result = CARRY4(temp8,temp8);\n  temp8 = temp8 * 2 + (uint)is_equal;\n  diff_shifted_values = diff_shifted_values * 2 + (uint)(check_result || CARRY4(shifted_value3,(uint)is_equal));\n  shifted_value3 = shifted_value2 - 2;\n  if (shifted_value2 - 1 != 0 && 0xfffff < diff_shifted_values) goto LAB_080083e0;\n  temp5 = temp8;\n  shifted_value2 = diff_shifted_values;\n  if (diff_shifted_values == 0) {\n    temp5 = 0;\n    shifted_value2 = temp8;\n  }\n  temp6 = LZCOUNT(shifted_value2);\n  if (diff_shifted_values == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  temp8 = temp6 - 0xb;\n  overflow_check = SBORROW4(temp8,0x20);\n  diff_shifted_values = temp6 - 0x2b;\n  check_result = (int)diff_shifted_values < 0;\n  is_equal = diff_shifted_values == 0;\n  if ((int)temp8 < 0x20) {\n    overflow_check = SCARRY4(diff_shifted_values,0xc);\n    temp6 = temp6 + -0x1f;\n    check_result = temp6 < 0;\n    is_equal = temp6 == 0;\n    diff_shifted_values = temp8;\n    if (!is_equal && check_result == overflow_check) {\n      temp5 = shifted_value2 << (temp8 & 0xff);\n      shifted_value2 = shifted_value2 >> (0xcU - temp6 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal || check_result != overflow_check) {\n    temp7 = 0x20 - diff_shifted_values;\n  }\n  shifted_value2 = shifted_value2 << (diff_shifted_values & 0xff);\n  if (is_equal || check_result != overflow_check) {\n    shifted_value2 = shifted_value2 | temp5 >> (temp7 & 0xff);\n  }\n  if (is_equal || check_result != overflow_check) {\n    temp5 = temp5 << (diff_shifted_values & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp8 <= (int)shifted_value3) {\n    return CONCAT44(shifted_value2 + (shifted_value3 - temp8) * 0x100000 | value2,temp5);\n  }\n  diff_shifted_values = ~(shifted_value3 - temp8);\n  if ((int)diff_shifted_values < 0x1f) {\n    temp6 = diff_shifted_values - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(diff_shifted_values - 0x1f,0xc)) {\n      return CONCAT44(shifted_value4,temp5 >> (0x20 - (0xcU - temp6) & 0xff) | shifted_value2 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    diff_shifted_values = diff_shifted_values + 1;\n    return CONCAT44(value2 | shifted_value2 >> (diff_shifted_values & 0xff),\n                    temp5 >> (diff_shifted_values & 0xff) | shifted_value2 << (0x20 - diff_shifted_values & 0xff));\n  }\n  return CONCAT44(shifted_value4,shifted_value2 >> (diff_shifted_values - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_sum_080082d4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "temp1",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "iVar6": "temp6",
                "uVar7": "shifted_value2",
                "uVar8": "shifted_value3",
                "uVar9": "shifted_value4",
                "uVar10": "diff_shifted_values",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "bVar13": "is_equal",
                "bVar14": "check_result",
                "bVar15": "overflow_check"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "shift_and_concatenate_0800854c",
            "code": "\nulonglong shift_and_concatenate_0800854c(uint input)\n\n{\n  uint shifted_result_high;\n  uint shift_amount;\n  int lzcount_result;\n  uint constant_value;\n  uint remaining_shift;\n  bool is_less_than_zero;\n  bool is_equal_zero;\n  bool is_less_than_0x20;\n  \n  if (input == 0) {\n    return 0;\n  }\n  shifted_result_high = 0;\n  lzcount_result = LZCOUNT(input);\n  constant_value = lzcount_result + 0x15;\n  is_less_than_0x20 = SBORROW4(constant_value,0x20);\n  shift_amount = lzcount_result - 0xb;\n  is_less_than_zero = (int)shift_amount < 0;\n  is_equal_zero = shift_amount == 0;\n  if (constant_value < 0x20) {\n    is_less_than_0x20 = SCARRY4(shift_amount,0xc);\n    is_less_than_zero = false;\n    is_equal_zero = lzcount_result + 1 == 0;\n    shift_amount = constant_value;\n    if (!is_equal_zero && is_less_than_0x20 == false) {\n      shifted_result_high = input << constant_value;\n      input = input >> (0xcU - (lzcount_result + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal_zero || is_less_than_zero != is_less_than_0x20) {\n    remaining_shift = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_equal_zero || is_less_than_zero != is_less_than_0x20) {\n    input = input | 0U >> (remaining_shift & 0xff);\n  }\n  if (is_equal_zero || is_less_than_zero != is_less_than_0x20) {\n    shifted_result_high = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (constant_value < 0x433) {\n    return CONCAT44(input + (0x432 - constant_value) * 0x100000,shifted_result_high);\n  }\n  shift_amount = ~(0x432 - constant_value);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  lzcount_result = shift_amount - 0x13;\n  if (lzcount_result == 0 || lzcount_result < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input >> (shift_amount & 0xff),\n                    shifted_result_high >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(shifted_result_high >> (0x20 - (0xcU - lzcount_result) & 0xff) | input << (0xcU - lzcount_result & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "shift_and_concatenate_0800854c",
                "param_1": "input",
                "uVar1": "shifted_result_high",
                "uVar2": "shift_amount",
                "iVar3": "lzcount_result",
                "uVar4": "constant_value",
                "in_r12": "remaining_shift",
                "bVar5": "is_less_than_zero",
                "bVar6": "is_equal_zero",
                "bVar7": "is_less_than_0x20"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "bitwise_shift_0800856c",
            "code": "\nulonglong bitwise_shift_0800856c(uint input)\n\n{\n  uint shifted_value;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint new_shifted_value;\n  uint sign_mask;\n  uint remain_bits;\n  bool negative_shift_amount;\n  bool zero_shift_amount;\n  bool overflow_shift_amount;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_mask = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_mask < 0) {\n    abs_input = -input;\n  }\n  shifted_value = 0;\n  leading_zeros = LZCOUNT(abs_input);\n  new_shifted_value = leading_zeros + 0x15;\n  overflow_shift_amount = SBORROW4(new_shifted_value,0x20);\n  shift_amount = leading_zeros - 0xb;\n  negative_shift_amount = (int)shift_amount < 0;\n  zero_shift_amount = shift_amount == 0;\n  if (new_shifted_value < 0x20) {\n    overflow_shift_amount = SCARRY4(shift_amount,0xc);\n    negative_shift_amount = false;\n    zero_shift_amount = leading_zeros + 1 == 0;\n    shift_amount = new_shifted_value;\n    if (!zero_shift_amount && overflow_shift_amount == false) {\n      shifted_value = abs_input << new_shifted_value;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (zero_shift_amount || negative_shift_amount != overflow_shift_amount) {\n    remain_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (zero_shift_amount || negative_shift_amount != overflow_shift_amount) {\n    abs_input = abs_input | 0U >> (remain_bits & 0xff);\n  }\n  if (zero_shift_amount || negative_shift_amount != overflow_shift_amount) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (new_shifted_value < 0x433) {\n    return CONCAT44(abs_input + (0x432 - new_shifted_value) * 0x100000 | sign_mask,shifted_value);\n  }\n  shift_amount = ~(0x432 - new_shifted_value);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_mask | abs_input >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "bitwise_shift_0800856c",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "new_shifted_value",
                "uVar6": "sign_mask",
                "in_r12": "remain_bits",
                "bVar7": "negative_shift_amount",
                "bVar8": "zero_shift_amount",
                "bVar9": "overflow_shift_amount"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "decode_and_improve_08008590",
            "code": "\nulonglong decode_and_improve_08008590(uint input_value,undefined4 param_2,undefined4 param_3,uint param_4)\n\n{\n  uint flag_bit;\n  uint temp_value;\n  uint combined_result;\n  uint shifted_value;\n  uint modified_input;\n  int shift_count;\n  uint adjusted_shift_count;\n  uint constant_32;\n  bool is_zero_shift;\n  bool is_ff000000;\n  bool is_negative_shift;\n  \n  modified_input = input_value << 1;\n  is_ff000000 = modified_input == 0;\n  flag_bit = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  shifted_value = (uint)((int)modified_input >> 3) >> 1;\n  combined_result = flag_bit | shifted_value;\n  input_value = input_value << 0x1d;\n  if (!is_ff000000) {\n    param_4 = modified_input & 0xff000000;\n    is_ff000000 = param_4 == 0;\n  }\n  if (!is_ff000000) {\n    is_ff000000 = param_4 == 0xff000000;\n  }\n  if (!is_ff000000) {\n    return CONCAT44(combined_result,input_value) ^ 0x3800000000000000;\n  }\n  if ((modified_input & 0xffffff) == 0) {\n    return CONCAT44(combined_result,input_value);\n  }\n  if (param_4 == 0xff000000) {\n    return CONCAT44(combined_result,input_value) | 0x8000000000000;\n  }\n  temp_value = input_value;\n  modified_input = shifted_value;\n  if (shifted_value == 0) {\n    temp_value = 0;\n    modified_input = input_value;\n  }\n  shift_count = LZCOUNT(modified_input);\n  if (shifted_value == 0) {\n    shift_count = shift_count + 0x20;\n  }\n  adjusted_shift_count = shift_count - 0xb;\n  is_negative_shift = SBORROW4(adjusted_shift_count,0x20);\n  shifted_value = shift_count - 0x2b;\n  is_ff000000 = (int)shifted_value < 0;\n  is_zero_shift = shifted_value == 0;\n  if ((int)adjusted_shift_count < 0x20) {\n    is_negative_shift = SCARRY4(shifted_value,0xc);\n    shift_count = shift_count + -0x1f;\n    is_ff000000 = shift_count < 0;\n    is_zero_shift = shift_count == 0;\n    shifted_value = adjusted_shift_count;\n    if (!is_zero_shift && is_ff000000 == is_negative_shift) {\n      temp_value = modified_input << (adjusted_shift_count & 0xff);\n      modified_input = modified_input >> (0xcU - shift_count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero_shift || is_ff000000 != is_negative_shift) {\n    constant_32 = 0x20 - shifted_value;\n  }\n  modified_input = modified_input << (shifted_value & 0xff);\n  if (is_zero_shift || is_ff000000 != is_negative_shift) {\n    modified_input = modified_input | temp_value >> (constant_32 & 0xff);\n  }\n  if (is_zero_shift || is_ff000000 != is_negative_shift) {\n    temp_value = temp_value << (shifted_value & 0xff);\n  }\nLAB_08008458:\n  if ((int)adjusted_shift_count < 0x381) {\n    return CONCAT44(modified_input + (0x380 - adjusted_shift_count) * 0x100000 | flag_bit,temp_value);\n  }\n  shifted_value = ~(0x380 - adjusted_shift_count);\n  if (0x1e < (int)shifted_value) {\n    return CONCAT44(combined_result,modified_input >> (shifted_value - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  shift_count = shifted_value - 0x13;\n  if (shift_count == 0 || shift_count < 0 != SCARRY4(shifted_value - 0x1f,0xc)) {\n    shifted_value = shifted_value + 1;\n    return CONCAT44(flag_bit | modified_input >> (shifted_value & 0xff),\n                    temp_value >> (shifted_value & 0xff) | modified_input << (0x20 - shifted_value & 0xff));\n  }\n  return CONCAT44(combined_result,temp_value >> (0x20 - (0xcU - shift_count) & 0xff) | modified_input << (0xcU - shift_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "decode_and_improve_08008590",
                "param_1": "input_value",
                "uVar1": "flag_bit",
                "uVar2": "temp_value",
                "uVar3": "combined_result",
                "uVar4": "shifted_value",
                "uVar5": "modified_input",
                "iVar6": "shift_count",
                "uVar7": "adjusted_shift_count",
                "in_r12": "constant_32",
                "bVar8": "is_zero_shift",
                "bVar9": "is_ff000000",
                "bVar10": "is_negative_shift"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_result_08008640",
            "code": "\nulonglong calculate_result_08008640(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  ulonglong result_1;\n  longlong result_2;\n  uint temp_1;\n  uint temp_2;\n  int temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong temp_result;\n  \n  temp_result = CONCAT44(input_2,input_1);\n  temp_6 = 0x7ff;\n  temp_2 = input_2 >> 0x14 & 0x7ff;\n  flag_1 = temp_2 == 0;\n  if (!flag_1) {\n    temp_5 = input_4 >> 0x14 & 0x7ff;\n    flag_1 = temp_5 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_2 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_5 == 0x7ff;\n  }\n  if (flag_1) {\n    temp_result = calculate_bitwise_0800881c();\n  }\n  temp_1 = (uint)(temp_result >> 0x20);\n  temp_3 = temp_2 + temp_5;\n  temp_2 = temp_1 ^ input_4;\n  temp_1 = temp_1 & ~(temp_6 << 0x15);\n  input_4 = input_4 & ~(temp_6 << 0x15);\n  flag_1 = ((uint)temp_result | temp_1 << 0xc) == 0;\n  if (!flag_1) {\n    flag_1 = (input_3 | input_4 << 0xc) == 0;\n  }\n  temp_1 = temp_1 | 0x100000;\n  input_4 = input_4 | 0x100000;\n  if (flag_1) {\n    input_3 = (uint)temp_result | input_3;\n    input_4 = (temp_2 & 0x80000000 | temp_1) ^ input_4;\n    temp_2 = temp_6 >> 1;\n    flag_3 = SBORROW4(temp_3,temp_2);\n    temp_4 = temp_3 - temp_2;\n    flag_1 = temp_4 == 0;\n    temp_1 = temp_4;\n    if (!flag_1 && (int)temp_2 <= temp_3) {\n      flag_3 = SBORROW4(temp_6,temp_4);\n      temp_1 = temp_6 - temp_4;\n      flag_1 = temp_6 == temp_4;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      input_4 = input_4 | temp_4 * 0x100000;\n    }\n    if (!flag_1 && (int)temp_1 < 0 == flag_3) {\n      return CONCAT44(input_4,input_3);\n    }\n    input_4 = input_4 | 0x100000;\n    temp_6 = 0;\n    flag_3 = SBORROW4(temp_4,1);\n    temp_4 = temp_4 - 1;\n    flag_1 = temp_4 == 0;\n    temp_2 = temp_4;\n  }\n  else {\n    result_1 = (temp_result & 0xffffffff) * (ulonglong)input_3;\n    temp_result = (temp_result & 0xffffffff) * (ulonglong)input_4 +\n             (ulonglong)temp_1 * (ulonglong)input_3 + (result_1 >> 0x20);\n    temp_7 = (uint)temp_result;\n    result_2 = (ulonglong)temp_1 * (ulonglong)input_4 + (temp_result >> 0x20);\n    temp_6 = (uint)result_2;\n    temp_1 = (uint)((ulonglong)result_2 >> 0x20);\n    if ((int)result_1 != 0) {\n      temp_7 = temp_7 | 1;\n    }\n    temp_4 = (temp_3 + -0x3ff) - (uint)(temp_1 < 0x200);\n    if (temp_1 < 0x200) {\n      flag_1 = (temp_7 & 0x80000000) != 0;\n      temp_7 = temp_7 << 1;\n      result_2 = CONCAT44(temp_1 * 2 + (uint)(CARRY4(temp_6,temp_6) || CARRY4(temp_6 * 2,(uint)flag_1)),\n                       temp_6 * 2 + (uint)flag_1);\n    }\n    input_4 = temp_2 & 0x80000000 | (int)((ulonglong)result_2 >> 0x20) << 0xb | (uint)result_2 >> 0x15;\n    input_3 = (uint)result_2 << 0xb | temp_7 >> 0x15;\n    temp_6 = temp_7 * 0x800;\n    flag_2 = 0xfc < temp_4;\n    flag_3 = SBORROW4(temp_4,0xfd);\n    temp_1 = temp_4 - 0xfd;\n    flag_1 = temp_1 == 0;\n    temp_2 = temp_1;\n    if (flag_2 && !flag_1) {\n      flag_2 = 0x6ff < temp_1;\n      flag_3 = SBORROW4(temp_1,0x700);\n      temp_2 = temp_4 - 0x7fd;\n      flag_1 = temp_1 == 0x700;\n    }\n    if (!flag_2 || flag_1) {\n      flag_1 = 0x7fffffff < temp_6;\n      if (temp_6 == 0x80000000) {\n        flag_1 = (temp_7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_4 + temp_4 * 0x100000 + (uint)CARRY4(input_3,(uint)flag_1),input_3 + flag_1\n                     );\n    }\n  }\n  if (!flag_1 && (int)temp_2 < 0 == flag_3) {\n    return (ulonglong)(input_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_2 = SCARRY4(temp_4,0x36);\n  flag_1 = (int)(temp_4 + 0x36) < 0;\n  flag_3 = temp_4 == 0xffffffca;\n  if (flag_3 || flag_1 != flag_2) {\n    input_3 = 0;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    input_4 = input_4 & 0x80000000;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    return CONCAT44(input_4,input_3);\n  }\n  temp_2 = -temp_4;\n  temp_1 = temp_2 - 0x20;\n  if (0x1f < (int)temp_2) {\n    temp_4 = input_3 >> (temp_1 & 0xff) | input_4 << (0x20 - temp_1 & 0xff);\n    temp_2 = (input_4 >> (temp_1 & 0xff) & ~((input_4 & 0x80000000) >> (temp_1 & 0xff))) -\n            ((int)temp_4 >> 0x1f);\n    if ((temp_6 | input_3 << (0x20 - temp_1 & 0xff) | temp_4 << 1) == 0) {\n      temp_2 = temp_2 & ~(temp_4 >> 0x1f);\n    }\n    return CONCAT44(input_4,temp_2) & 0x80000000ffffffff;\n  }\n  temp_3 = temp_2 - 0x14;\n  if (temp_3 == 0 || temp_3 < 0 != SCARRY4(temp_1,0xc)) {\n    temp_7 = input_3 << (temp_4 + 0x20 & 0xff);\n    temp_1 = input_3 >> (temp_2 & 0xff) | input_4 << (temp_4 + 0x20 & 0xff);\n    temp_4 = temp_1 + -((int)temp_7 >> 0x1f);\n    if ((temp_6 | temp_7 << 1) == 0) {\n      temp_4 = temp_4 & ~(temp_7 >> 0x1f);\n    }\n    return CONCAT44((input_4 & 0x80000000) +\n                    ((input_4 & 0x7fffffff) >> (temp_2 & 0xff)) +\n                    (uint)CARRY4(temp_1,-((int)temp_7 >> 0x1f)),temp_4);\n  }\n  temp_2 = 0xc - temp_3;\n  temp_4 = input_3 << (temp_2 & 0xff);\n  temp_2 = input_3 >> (0x20 - temp_2 & 0xff) | input_4 << (temp_2 & 0xff);\n  temp_1 = temp_2 + -((int)temp_4 >> 0x1f);\n  if ((temp_6 | temp_4 << 1) == 0) {\n    temp_1 = temp_1 & ~(temp_4 >> 0x1f);\n  }\n  return CONCAT44((input_4 & 0x80000000) + (uint)CARRY4(temp_2,-((int)temp_4 >> 0x1f)),temp_1);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_result_08008640",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "lVar2": "result_2",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "iVar5": "temp_3",
                "uVar6": "temp_4",
                "unaff_r5": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "temp_7",
                "bVar9": "flag_1",
                "bVar10": "flag_2",
                "bVar11": "flag_3",
                "uVar12": "temp_result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_bitwise_0800881c",
            "code": "\nulonglong calculate_bitwise_0800881c(uint number1,uint number2,uint number3,uint number4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & number4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    isZero = (number1 | number2 << 1) == 0;\n    if (!isZero) {\n      isZero = (number3 | number4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((number2 ^ number4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = number2 & 0x80000000;\n      do {\n        bit1 = number1 & 0x80000000;\n        number1 = number1 << 1;\n        number2 = number2 * 2 + (uint)(bit1 != 0);\n      } while ((number2 & 0x100000) == 0);\n      number2 = number2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(number2,number1);\n      }\n    }\n    do {\n      bit3 = number3 & 0x80000000;\n      number3 = number3 << 1;\n      number4 = number4 * 2 + (uint)(bit3 != 0);\n    } while ((number4 & 0x100000) == 0);\n    return CONCAT44(number2,number1);\n  }\n  isZero = (number1 | number2 << 1) == 0;\n  if (isZero) {\n    number2 = number4;\n    number1 = number3;\n  }\n  if (!isZero) {\n    isZero = (number3 | number4 << 1) == 0;\n  }\n  bit4 = number2;\n  if (((!isZero) && ((bit2 != bit5 || ((number1 | number2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (number1 = number3, bit4 = number4, (number3 | number4 << 0xc) == 0)))) {\n    return (ulonglong)((number2 ^ number4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,number1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_bitwise_0800881c",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "number3",
                "param_4": "number4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "floating_point_conversion_08008894",
            "code": "\nulonglong floatingPointConversion_08008894(undefined4 signAndExponent,uint fraction,uint input1,uint input2)\n\n{\n  uint sum;\n  uint input1SignAndExp;\n  uint input1Fraction;\n  uint input2SignAndExp;\n  uint input2Fraction;\n  uint difference;\n  uint resultSignAndExp;\n  int diffSignAndExp;\n  uint diffSum;\n  uint unaff_r5;\n  uint diffSumAdjusted;\n  uint resultFraction;\n  uint input1FractionShifted;\n  uint input2FractionShifted;\n  bool isZero;\n  bool isZeroAdjusted;\n  bool overflow;\n  undefined8 extractedParams;\n  \n  extractedParams = CONCAT44(fraction,signAndExponent);\n  input2FractionShifted = 0x7ff;\n  resultSignAndExp = fraction >> 0x14 & 0x7ff;\n  isZero = resultSignAndExp == 0;\n  if (!isZero) {\n    unaff_r5 = input2 >> 0x14 & 0x7ff;\n    isZero = unaff_r5 == 0;\n  }\n  if (!isZero) {\n    isZero = resultSignAndExp == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = unaff_r5 == 0x7ff;\n  }\n  if (isZero) {\n    extractedParams = extract_bits_from_params_08008a02();\n  }\n  diffSum = (uint)((ulonglong)extractedParams >> 0x20);\n  resultFraction = (uint)extractedParams;\n  diffSignAndExp = resultSignAndExp - unaff_r5;\n  if ((input1 | input2 << 0xc) == 0) {\n    resultSignAndExp = (diffSum ^ input2) & 0x80000000 | diffSum & 0xfffff;\n    overflow = SCARRY4(diffSignAndExp,input2FractionShifted >> 1);\n    diffSum = diffSignAndExp + (input2FractionShifted >> 1);\n    isZero = (int)diffSum < 0;\n    isZeroAdjusted = diffSum == 0;\n    if (!isZeroAdjusted && isZero == overflow) {\n      overflow = SBORROW4(input2FractionShifted,diffSum);\n      isZero = (int)(input2FractionShifted - diffSum) < 0;\n      isZeroAdjusted = input2FractionShifted == diffSum;\n    }\n    if (!isZeroAdjusted && isZero == overflow) {\n      resultSignAndExp = resultSignAndExp | diffSum * 0x100000;\n    }\n    if (!isZeroAdjusted && isZero == overflow) {\n      return CONCAT44(resultSignAndExp,resultFraction);\n    }\n    resultSignAndExp = resultSignAndExp | 0x100000;\n    input2FractionShifted = 0;\n    isZeroAdjusted = SBORROW4(diffSum,1);\n    diffSum = diffSum - 1;\n    isZero = diffSum == 0;\n    input1Fraction = diffSum;\n  }\n  else {\n    input1Fraction = (input2 << 0xc) >> 4 | 0x10000000 | input1 >> 0x18;\n    input2FractionShifted = input1 << 8;\n    diffSumAdjusted = (diffSum << 0xc) >> 4 | 0x10000000 | resultFraction >> 0x18;\n    resultFraction = resultFraction * 0x100;\n    resultSignAndExp = (diffSum ^ input2) & 0x80000000;\n    isZero = input1Fraction <= diffSumAdjusted;\n    if (diffSumAdjusted == input1Fraction) {\n      isZero = input2FractionShifted <= resultFraction;\n    }\n    diffSignAndExp = diffSignAndExp + (uint)isZero;\n    diffSum = diffSignAndExp + 0x3fd;\n    if (isZero == false) {\n      input1Fraction = input1Fraction >> 1;\n      input2FractionShifted = (uint)((input1 >> 0x18 & 1) != 0) << 0x1f | input2FractionShifted >> 1;\n    }\n    input1FractionShifted = resultFraction - input2FractionShifted;\n    diffSumAdjusted = (diffSumAdjusted - input1Fraction) - (uint)(resultFraction < input2FractionShifted);\n    input2SignAndExp = input1Fraction >> 1;\n    sum = (uint)((input1Fraction & 1) != 0) << 0x1f | input2FractionShifted >> 1;\n    resultFraction = 0x100000;\n    input1Fraction = 0x80000;\n    while( true ) {\n      isZero = sum <= input1FractionShifted;\n      if (input2SignAndExp < diffSumAdjusted || diffSumAdjusted - input2SignAndExp < (uint)isZero) {\n        input1FractionShifted = input1FractionShifted - sum;\n        resultFraction = resultFraction | input1Fraction;\n        diffSumAdjusted = (diffSumAdjusted - input2SignAndExp) - (uint)!isZero;\n      }\n      input2Fraction = input2SignAndExp >> 1;\n      sum = (uint)((input2SignAndExp & 1) != 0) << 0x1f | sum >> 1;\n      isZeroAdjusted = sum <= input1FractionShifted;\n      isZero = diffSumAdjusted - input2Fraction < (uint)isZeroAdjusted;\n      input2FractionShifted = diffSumAdjusted;\n      if (input2Fraction < diffSumAdjusted || isZero) {\n        input1FractionShifted = input1FractionShifted - sum;\n        input2FractionShifted = (diffSumAdjusted - input2Fraction) - (uint)!isZeroAdjusted;\n      }\n      if (input2Fraction < diffSumAdjusted || isZero) {\n        resultFraction = resultFraction | input1Fraction >> 1;\n      }\n      diffSumAdjusted = input2SignAndExp >> 2;\n      input1SignAndExp = (uint)((input2Fraction & 1) != 0) << 0x1f | sum >> 1;\n      isZeroAdjusted = input1SignAndExp <= input1FractionShifted;\n      isZero = input2FractionShifted - diffSumAdjusted < (uint)isZeroAdjusted;\n      input2Fraction = input2FractionShifted;\n      if (diffSumAdjusted < input2FractionShifted || isZero) {\n        input1FractionShifted = input1FractionShifted - input1SignAndExp;\n        input2Fraction = (input2FractionShifted - diffSumAdjusted) - (uint)!isZeroAdjusted;\n      }\n      if (diffSumAdjusted < input2FractionShifted || isZero) {\n        resultFraction = resultFraction | input1Fraction >> 2;\n      }\n      difference = input2SignAndExp >> 3;\n      sum = (uint)((diffSumAdjusted & 1) != 0) << 0x1f | input1SignAndExp >> 1;\n      isZeroAdjusted = sum <= input1FractionShifted;\n      isZero = input2Fraction - difference < (uint)isZeroAdjusted;\n      diffSumAdjusted = input2Fraction;\n      if (difference < input2Fraction || isZero) {\n        input1FractionShifted = input1FractionShifted - sum;\n        diffSumAdjusted = (input2Fraction - difference) - (uint)!isZeroAdjusted;\n      }\n      if (difference < input2Fraction || isZero) {\n        resultFraction = resultFraction | input1Fraction >> 3;\n      }\n      input2FractionShifted = diffSumAdjusted | input1FractionShifted;\n      if (input2FractionShifted == 0) break;\n      diffSumAdjusted = diffSumAdjusted << 4 | input1FractionShifted >> 0x1c;\n      input1FractionShifted = input1FractionShifted << 4;\n      input2SignAndExp = input2SignAndExp & 0xfffffff8 | sum >> 0x1d;\n      sum = (input1SignAndExp >> 1) << 3;\n      input1Fraction = input1Fraction >> 4;\n      if (input1Fraction == 0) {\n        difference = input2SignAndExp;\n        if ((resultSignAndExp & 0x100000) != 0) goto LAB_080089b2;\n        resultSignAndExp = resultSignAndExp | resultFraction;\n        resultFraction = 0;\n        input1Fraction = 0x80000000;\n      }\n    }\n    if ((resultSignAndExp & 0x100000) == 0) {\n      resultSignAndExp = resultSignAndExp | resultFraction;\n      resultFraction = 0;\n    }\nLAB_080089b2:\n    overflow = 0xfc < diffSum;\n    isZeroAdjusted = SBORROW4(diffSum,0xfd);\n    input2SignAndExp = diffSignAndExp + 0x300;\n    isZero = input2SignAndExp == 0;\n    input1Fraction = input2SignAndExp;\n    if (overflow && !isZero) {\n      overflow = 0x6ff < input2SignAndExp;\n      isZeroAdjusted = SBORROW4(input2SignAndExp,0x700);\n      input1Fraction = diffSignAndExp - 0x400;\n      isZero = input2SignAndExp == 0x700;\n    }\n    if (!overflow || isZero) {\n      isZero = difference <= diffSumAdjusted;\n      if (diffSumAdjusted == difference) {\n        isZero = sum <= input1FractionShifted;\n      }\n      if (diffSumAdjusted == difference && input1FractionShifted == sum) {\n        isZero = (resultFraction & 1) != 0;\n      }\n      return CONCAT44(resultSignAndExp + diffSum * 0x100000 + (uint)CARRY4(resultFraction,(uint)isZero),resultFraction + isZero);\n    }\n  }\n  if (!isZero && (int)input1Fraction < 0 == isZeroAdjusted) {\n    return (ulonglong)(resultSignAndExp & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  overflow = SCARRY4(diffSum,0x36);\n  isZero = (int)(diffSum + 0x36) < 0;\n  isZeroAdjusted = diffSum == 0xffffffca;\n  if (isZeroAdjusted || isZero != overflow) {\n    resultFraction = 0;\n  }\n  if (isZeroAdjusted || isZero != overflow) {\n    resultSignAndExp = resultSignAndExp & 0x80000000;\n  }\n  if (isZeroAdjusted || isZero != overflow) {\n    return CONCAT44(resultSignAndExp,resultFraction);\n  }\n  input1Fraction = -diffSum;\n  diffSumAdjusted = input1Fraction - 0x20;\n  if (0x1f < (int)input1Fraction) {\n    input1Fraction = resultFraction >> (diffSumAdjusted & 0xff) | resultSignAndExp << (0x20 - diffSumAdjusted & 0xff);\n    diffSum = (resultSignAndExp >> (diffSumAdjusted & 0xff) & ~((resultSignAndExp & 0x80000000) >> (diffSumAdjusted & 0xff))) -\n            ((int)input1Fraction >> 0x1f);\n    if ((input2FractionShifted | resultFraction << (0x20 - diffSumAdjusted & 0xff) | input1Fraction << 1) == 0) {\n      diffSum = diffSum & ~(input1Fraction >> 0x1f);\n    }\n    return CONCAT44(resultSignAndExp,diffSum) & 0x80000000ffffffff;\n  }\n  diffSignAndExp = input1Fraction - 0x14;\n  if (diffSignAndExp != 0 && diffSignAndExp < 0 == SCARRY4(diffSumAdjusted,0xc)) {\n    diffSum = 0xc - diffSignAndExp;\n    input1Fraction = resultFraction << (diffSum & 0xff);\n    resultFraction = resultFraction >> (0x20 - diffSum & 0xff) | resultSignAndExp << (diffSum & 0xff);\n    diffSum = resultFraction + -((int)input1Fraction >> 0x1f);\n    if ((input2FractionShifted | input1Fraction << 1) == 0) {\n      diffSum = diffSum & ~(input1Fraction >> 0x1f);\n    }\n    return CONCAT44((resultSignAndExp & 0x80000000) + (uint)CARRY4(resultFraction,-((int)input1Fraction >> 0x1f)),diffSum);\n  }\n  diffSumAdjusted = resultFraction << (diffSum + 0x20 & 0xff);\n  resultFraction = resultFraction >> (input1Fraction & 0xff) | resultSignAndExp << (diffSum + 0x20 & 0xff);\n  diffSum = resultFraction + -((int)diffSumAdjusted >> 0x1f);\n  if ((input2FractionShifted | diffSumAdjusted << 1) == 0) {\n    diffSum = diffSum & ~(diffSumAdjusted >> 0x1f);\n  }\n  return CONCAT44((resultSignAndExp & 0x80000000) +\n                  ((resultSignAndExp & 0x7fffffff) >> (input1Fraction & 0xff)) +\n                  (uint)CARRY4(resultFraction,-((int)diffSumAdjusted >> 0x1f)),diffSum);\n}\n\n",
            "renaming": {
                "FUN_08008894": "floating_point_conversion_08008894",
                "param_1": "signAndExponent",
                "param_2": "fraction",
                "param_3": "input1",
                "param_4": "input2",
                "uVar1": "sum",
                "uVar2": "input1SignAndExp",
                "uVar3": "input1Fraction",
                "uVar4": "input2SignAndExp",
                "uVar5": "input2Fraction",
                "uVar6": "difference",
                "uVar7": "resultSignAndExp",
                "iVar8": "diffSignAndExp",
                "uVar9": "diffSum",
                "uVar10": "diffSumAdjusted",
                "uVar11": "resultFraction",
                "uVar12": "input1FractionShifted",
                "uVar13": "input2FractionShifted",
                "bVar14": "isZero",
                "bVar15": "isZeroAdjusted",
                "bVar16": "overflow",
                "uVar17": "extractedParams"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "extract_bits_from_params_08008a02",
            "code": "\nulonglong extractBitsFromParams_08008a02(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & value4 >> 0x14;\n  bit4 = value2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((value1 | value2 << 0xc) == 0) && (value1 = value3, bit4 = value4, bit3 != bit5)\n         ) {\nLAB_08008874:\n        return (ulonglong)((value2 ^ value4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      value1 = value3;\n      bit4 = value4;\n      if ((value3 | value4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((value2 ^ value4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (value1 | value2 << 1) == 0;\n      if (!isZero) {\n        isZero = (value3 | value4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = value2 & 0x80000000;\n          do {\n            bit1 = value1 & 0x80000000;\n            value1 = value1 << 1;\n            value2 = value2 * 2 + (uint)(bit1 != 0);\n          } while ((value2 & 0x100000) == 0);\n          value2 = value2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(value2,value1);\n          }\n        }\n        do {\n          bit4 = value3 & 0x80000000;\n          value3 = value3 << 1;\n          value4 = value4 * 2 + (uint)(bit4 != 0);\n        } while ((value4 & 0x100000) == 0);\n        return CONCAT44(value2,value1);\n      }\n      if ((value1 | value2 << 1) != 0) goto LAB_08008874;\n      if ((value3 | value4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(bit4,value1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "extract_bits_from_params_08008a02",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_parameters_08008a74",
            "code": "\nuint check_parameters_08008a74(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(param_2 << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(param_2 << 1) >> 0x15 == -1 && ((param_1 | param_2 << 0xc) != 0)) ||\n      (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (param_1 | param_2 << 1) == 0;\n  if (isZero) {\n    isZero = (param_3 | param_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = param_2 == param_4;\n  }\n  if (isZero) {\n    isZero = param_1 == param_3;\n  }\n  if (!isZero) {\n    result = param_2 ^ param_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = param_2 == param_4;\n    }\n    isNegative = -1 < (int)result && param_4 <= param_2;\n    if (isZero) {\n      isNegative = param_3 <= param_1;\n    }\n    param_4 = (int)param_4 >> 0x1f;\n    if (!isNegative) {\n      param_4 = ~param_4;\n    }\n    return param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "validate_parameters_08008af0",
            "code": "\nvoid validate_parameters_08008af0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  validate_parameters_08008af0_08008b00(param_3,param_4,param_1,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "validate_parameters_08008af0"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "validate_parameters_08008b00",
            "code": "\nundefined4 validate_parameters_08008b00(undefined4 input)\n\n{\n  validate_input();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "validate_parameters_08008b00",
                "param_1": "input",
                "check_parameters_08008a74": "validate_input"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "validate_parameters_08008b10",
            "code": "\nbool validate_parameters_08008b10(void)\n\n{\n  char result;\n  \n  validate_parameters_08008b10_08008b00();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "validate_parameters_08008b10",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_cy_null_08008b24",
            "code": "\nbool is_CY_null_08008b24(void)\n\n{\n  char input_char;\n  \n  validate_parameters_08008b00();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_cy_null_08008b24",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "validate_inputs_08008b4c",
            "code": "\nbool validate_inputs_08008b4c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  validate_parameters_08008af0();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "validate_inputs_08008b4c",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "check_if_null_08008b60_08008b60",
            "code": "\nbool check_if_null_08008b60_08008b60(void)\n\n{\n  char input_character;\n  \n  validate_parameters_08008af0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "check_if_null_08008b60_08008b60",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_parameters_08008b74",
            "code": "\nundefined4 check_parameters_08008b74(uint value_1,int shift_2,uint value_3,int shift_4)\n\n{\n  if ((((shift_2 << 1) >> 0x15 != -1) || ((value_1 | shift_2 << 0xc) == 0)) &&\n     (((shift_4 << 1) >> 0x15 != -1 || ((value_3 | shift_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "value_1",
                "param_2": "shift_2",
                "param_3": "value_3",
                "param_4": "shift_4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "extract_integer_08008ba0",
            "code": "\nuint extract_integer_08008ba0(uint input_value,uint modified_multiplier)\n\n{\n  uint result;\n  int offset;\n  uint shift_amount;\n  \n  offset = modified_multiplier * 2 + 0x200000;\n  if (modified_multiplier * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    result = offset >> 0x15;\n    shift_amount = -result - 0x3e1;\n    if (result < 0xfffffc20 && shift_amount != 0) {\n      result = (modified_multiplier << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n      if ((modified_multiplier & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_value | modified_multiplier << 0xc) != 0) {\n    return 0;\n  }\n  modified_multiplier = modified_multiplier & 0x80000000;\n  if (modified_multiplier == 0) {\n    modified_multiplier = 0x7fffffff;\n  }\n  return modified_multiplier;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "extract_integer_08008ba0",
                "param_1": "input_value",
                "param_2": "modified_multiplier",
                "uVar1": "result",
                "iVar2": "offset",
                "uVar3": "shift_amount"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_shifted_value_08008bf0",
            "code": "\nuint calculate_shifted_value_08008bf0(uint input_1,uint input_2)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((input_2 & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "shifted_value",
                "uVar2": "shift_amount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_float_08008c30",
            "code": "\nuint calculateFloat_08008c30(uint inputValue1,uint inputValue2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan;\n  \n  temp1 = inputValue2 * 2;\n  isLessThan = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((inputValue2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputValue1 | inputValue2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputValue2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return inputValue2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputValue1 >> (temp1 & 0xff);\n    if (inputValue1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = inputValue2 & 0x1fffff | 0x100000;\n    inputValue1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (inputValue2 & 0x80000000 | inputValue1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputValue1 * 8);\n  if (inputValue1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_floating_point_08008cd8",
            "code": "\nuint calculateFloatingPoint_08008cd8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint result2;\n  uint modifiedInput1;\n  uint modifiedInput2;\n  uint difference;\n  bool isEqual;\n  \n  result1 = input2 ^ 0x80000000;\n  modifiedInput1 = input1 << 1;\n  isEqual = modifiedInput1 == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = modifiedInput1 == input4;\n  }\n  shiftedInput1 = (int)modifiedInput1 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      modifiedInput1 = result1;\n      if (shiftedInput1 == -1) {\n        modifiedInput1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        result1 = modifiedInput1;\n      }\n      isEqual = (modifiedInput1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (result1 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = modifiedInput1 == result1;\n      }\n      if (!isEqual) {\n        modifiedInput1 = modifiedInput1 | 0x400000;\n      }\n      return modifiedInput1;\n    }\n    if (((input1 ^ result1) & 0x7fffffff) != 0) {\n      if (modifiedInput1 == 0) {\n        input1 = result1;\n      }\n      return input1;\n    }\n    if (input1 != result1) {\n      return 0;\n    }\n    if ((modifiedInput1 & 0xff000000) == 0) {\n      result1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (modifiedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  modifiedInput1 = modifiedInput1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - modifiedInput1;\n  isEqual = difference != 0;\n  modifiedInput2 = modifiedInput1;\n  if (isEqual && modifiedInput1 <= input4) {\n    modifiedInput2 = modifiedInput1 + difference;\n  }\n  if (isEqual && modifiedInput1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (isEqual && modifiedInput1 <= input4) {\n    input1 = input1 ^ result1;\n  }\n  if (isEqual && modifiedInput1 <= input4) {\n    result1 = result1 ^ input1;\n  }\n  if (input4 < modifiedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  modifiedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    modifiedInput1 = -modifiedInput1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (modifiedInput2 == difference) {\n    result2 = result2 ^ 0x800000;\n    if (modifiedInput2 == 0) {\n      modifiedInput1 = modifiedInput1 ^ 0x800000;\n      modifiedInput2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  modifiedInput1 = modifiedInput1 + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  input1 = modifiedInput1 & 0x80000000;\n  if ((int)modifiedInput1 < 0) {\n    isEqual = result2 != 0;\n    result2 = -result2;\n    modifiedInput1 = -modifiedInput1 - (uint)isEqual;\n  }\n  if (modifiedInput1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    modifiedInput1 = modifiedInput1 * 2 + (uint)(result1 != 0);\n    result1 = modifiedInput2 - 2;\n    if (modifiedInput2 - 1 == 0 || modifiedInput1 < 0x800000) {\n      difference = LZCOUNT(modifiedInput1) - 8;\n      modifiedInput1 = modifiedInput1 << (difference & 0xff);\n      if ((int)result1 < (int)difference) {\n        modifiedInput1 = modifiedInput1 >> (-(result1 - difference) & 0xff);\n      }\n      else {\n        modifiedInput1 = modifiedInput1 + (result1 - difference) * 0x800000;\n      }\n      return modifiedInput1 | input1;\n    }\n  }\n  else {\n    result1 = modifiedInput2 - 1;\n    if (0xffffff < modifiedInput1) {\n      result1 = modifiedInput1 & 1;\n      modifiedInput1 = modifiedInput1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = modifiedInput2;\n      if (0xfd < modifiedInput2) goto LAB_08008e12;\n    }\n  }\n  modifiedInput1 = modifiedInput1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    modifiedInput1 = modifiedInput1 & 0xfffffffe;\n  }\n  return modifiedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_floating_point_08008cd8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "modifiedInput1",
                "uVar6": "modifiedInput2",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_float_08008cdc",
            "code": "\nuint calculate_float_08008cdc(uint num1,uint num2,undefined4 value1,uint value2)\n\n{\n  int shift1;\n  int shift2;\n  uint mantissa1;\n  uint mantissa2;\n  uint exponent1;\n  uint exponent2;\n  bool condition;\n  \n  mantissa2 = num1 << 1;\n  condition = mantissa2 == 0;\n  if (!condition) {\n    value2 = num2 << 1;\n    condition = value2 == 0;\n  }\n  if (!condition) {\n    condition = mantissa2 == value2;\n  }\n  shift1 = (int)mantissa2 >> 0x18;\n  if (!condition) {\n    condition = shift1 == -1;\n  }\n  if (!condition) {\n    condition = (int)value2 >> 0x18 == -1;\n  }\n  if (condition) {\n    shift2 = (int)(num2 << 1) >> 0x18;\n    if (shift1 == -1 || shift2 == -1) {\n      mantissa2 = num2;\n      if (shift1 == -1) {\n        mantissa2 = num1;\n      }\n      if (shift1 != -1 || shift2 != -1) {\n        num2 = mantissa2;\n      }\n      condition = (mantissa2 & 0x7fffff) == 0;\n      if (condition) {\n        condition = (num2 & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = mantissa2 == num2;\n      }\n      if (!condition) {\n        mantissa2 = mantissa2 | 0x400000;\n      }\n      return mantissa2;\n    }\n    if (((num1 ^ num2) & 0x7fffffff) != 0) {\n      if (mantissa2 == 0) {\n        num1 = num2;\n      }\n      return num1;\n    }\n    if (num1 != num2) {\n      return 0;\n    }\n    if ((mantissa2 & 0xff000000) == 0) {\n      mantissa2 = num1 << 1;\n      if ((num1 & 0x80000000) != 0) {\n        mantissa2 = mantissa2 | 0x80000000;\n      }\n      return mantissa2;\n    }\n    if (mantissa2 < 0xfe000000) {\n      return num1 + 0x800000;\n    }\n    num1 = num1 & 0x80000000;\nLAB_08008e12:\n    return num1 | 0x7f800000;\n  }\n  mantissa2 = mantissa2 >> 0x18;\n  value2 = value2 >> 0x18;\n  exponent2 = value2 - mantissa2;\n  condition = exponent2 != 0;\n  exponent1 = mantissa2;\n  if (condition && mantissa2 <= value2) {\n    exponent1 = mantissa2 + exponent2;\n  }\n  if (condition && mantissa2 <= value2) {\n    num2 = num2 ^ num1;\n  }\n  if (condition && mantissa2 <= value2) {\n    num1 = num1 ^ num2;\n  }\n  if (condition && mantissa2 <= value2) {\n    num2 = num2 ^ num1;\n  }\n  if (value2 < mantissa2) {\n    exponent2 = -exponent2;\n  }\n  if (0x19 < exponent2) {\n    return num1;\n  }\n  mantissa2 = num1 & 0xffffff | 0x800000;\n  if ((num1 & 0x80000000) != 0) {\n    mantissa2 = -mantissa2;\n  }\n  mantissa1 = num2 & 0xffffff | 0x800000;\n  if ((num2 & 0x80000000) != 0) {\n    mantissa1 = -mantissa1;\n  }\n  if (exponent1 == exponent2) {\n    mantissa1 = mantissa1 ^ 0x800000;\n    if (exponent1 == 0) {\n      mantissa2 = mantissa2 ^ 0x800000;\n      exponent1 = 1;\n    }\n    else {\n      exponent2 = exponent2 - 1;\n    }\n  }\n  mantissa2 = mantissa2 + ((int)mantissa1 >> (exponent2 & 0xff));\n  mantissa1 = mantissa1 << (0x20 - exponent2 & 0xff);\n  num1 = mantissa2 & 0x80000000;\n  if ((int)mantissa2 < 0) {\n    condition = mantissa1 != 0;\n    mantissa1 = -mantissa1;\n    mantissa2 = -mantissa2 - (uint)condition;\n  }\n  if (mantissa2 < 0x800000) {\n    exponent2 = mantissa1 & 0x80000000;\n    mantissa1 = mantissa1 << 1;\n    mantissa2 = mantissa2 * 2 + (uint)(exponent2 != 0);\n    exponent2 = exponent1 - 2;\n    if (exponent1 - 1 == 0 || mantissa2 < 0x800000) {\n      exponent1 = LZCOUNT(mantissa2) - 8;\n      mantissa2 = mantissa2 << (exponent1 & 0xff);\n      if ((int)exponent2 < (int)exponent1) {\n        mantissa2 = mantissa2 >> (-(exponent2 - exponent1) & 0xff);\n      }\n      else {\n        mantissa2 = mantissa2 + (exponent2 - exponent1) * 0x800000;\n      }\n      return mantissa2 | num1;\n    }\n  }\n  else {\n    exponent2 = exponent1 - 1;\n    if (0xffffff < mantissa2) {\n      exponent2 = mantissa2 & 1;\n      mantissa2 = mantissa2 >> 1;\n      mantissa1 = (uint)(exponent2 != 0) << 0x1f | mantissa1 >> 1;\n      exponent2 = exponent1;\n      if (0xfd < exponent1) goto LAB_08008e12;\n    }\n  }\n  mantissa2 = mantissa2 + exponent2 * 0x800000 + (uint)(0x7fffffff < mantissa1);\n  if (mantissa1 == 0x80000000) {\n    mantissa2 = mantissa2 & 0xfffffffe;\n  }\n  return mantissa2 | num1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_float_08008cdc",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "shift1",
                "iVar2": "shift2",
                "uVar3": "mantissa1",
                "uVar4": "mantissa2",
                "uVar5": "exponent1",
                "uVar6": "exponent2",
                "bVar7": "condition"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_result_08008e3c",
            "code": "\nuint calculateResult_08008e3c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int offset;\n  uint comparisonResult;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  offset = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    comparisonResult = 0 << (shiftAmount & 0xff);\n    leadingZeros = offset + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < comparisonResult);\n    if (comparisonResult == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  leadingZeros = offset + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_result_08008e3c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "offset",
                "uVar4": "comparisonResult"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "extract_bits_08008e44",
            "code": "\nuint extract_bits_08008e44(uint input_value)\n\n{\n  uint leading_zeroes;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeroes = count_leading_zeros(input_value);\n  shift_amount = leading_zeroes - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeroes) {\n    leading_zeroes = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeroes);\n    if (leading_zeroes == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input_value << leading_zeroes + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeroes + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "extract_bits_08008e44",
                "param_1": "input_value",
                "uVar1": "leading_zeroes",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint value1,uint value2,undefined4 constant1,uint constant2)\n\n{\n  longlong product;\n  uint result;\n  uint bits1;\n  int sum;\n  int difference;\n  uint bits2;\n  int difference2;\n  uint temp;\n  bool isZero;\n  bool isNegative;\n  \n  bits1 = value1 >> 0x17 & 0xff;\n  isZero = bits1 == 0;\n  if (!isZero) {\n    constant2 = value2 >> 0x17 & 0xff;\n    isZero = constant2 == 0;\n  }\n  if (!isZero) {\n    isZero = bits1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = constant2 == 0xff;\n  }\n  if (isZero) {\n    constant2 = value2 >> 0x17 & 0xff;\n    if (bits1 == 0xff || constant2 == 0xff) {\n      isZero = value1 == 0 || value1 == 0x80000000;\n      result = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        isZero = value2 == 0;\n        result = value1;\n      }\n      if (!isZero) {\n        isZero = value2 == 0x80000000;\n      }\n      temp = result;\n      if (((isZero) || ((bits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((constant2 == 0xff && (temp = value2, (value2 & 0x7fffff) != 0)))) {\n        return temp | 0x7fc00000;\n      }\n      result = result ^ value2;\n      goto LAB_0800903c;\n    }\n    isZero = (value1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (value2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    isZero = bits1 == 0;\n    result = value1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value1 = value1 << 1;\n        isZero = (value1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      bits1 = bits1 - 1;\n    }\n    value1 = value1 | result;\n    isZero = constant2 == 0;\n    result = value2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value2 = value2 << 1;\n        isZero = (value2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      constant2 = constant2 - 1;\n    }\n    value2 = value2 | result;\n  }\n  sum = bits1 + constant2;\n  temp = value1 ^ value2;\n  bits1 = value1 << 9;\n  isZero = bits1 == 0;\n  if (!isZero) {\n    value2 = value2 << 9;\n    isZero = value2 == 0;\n  }\n  if (isZero) {\n    if (bits1 == 0) {\n      value2 = value2 << 9;\n    }\n    result = temp & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    isNegative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    isZero = difference == 0;\n    difference2 = difference;\n    if (!isZero && 0x7e < sum) {\n      isNegative = SBORROW4(0xff,difference);\n      difference2 = 0xff - difference;\n      isZero = difference == 0xff;\n    }\n    if (!isZero && difference2 < 0 == isNegative) {\n      result = result | difference * 0x800000;\n    }\n    if (!isZero && difference2 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    bits2 = 0;\n    isNegative = SBORROW4(difference,1);\n    temp = sum - 0x80;\n    isZero = temp == 0;\n    bits1 = temp;\n  }\n  else {\n    product = (ulonglong)(bits1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    bits2 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | bits2 >> 0x1f;\n      bits2 = bits2 << 1;\n    }\n    result = temp & 0x80000000 | result;\n    temp = (sum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(temp,0xfd);\n    isZero = temp == 0xfd;\n    bits1 = temp - 0xfd;\n    if (temp < 0xfe) {\n      result = result + temp * 0x800000 + (uint)(0x7fffffff < bits2);\n      if (bits2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)bits1 < 0 != isNegative) {\n    isZero = (int)(temp + 0x19) < 0;\n    if (temp == 0xffffffe7 || isZero != SCARRY4(temp,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp != 0xffffffe7 && isZero == SCARRY4(temp,0x19)) {\n      bits1 = (result << 1) >> (-temp & 0xff);\n      temp = result << (temp + 0x20 & 0xff);\n      bits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | bits1 >> 1) + (uint)((byte)bits1 & 1);\n      if ((bits2 | temp << 1) == 0) {\n        bits1 = bits1 & ~(temp >> 0x1f);\n      }\n      return bits1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "constant1",
                "param_4": "constant2",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "bits1",
                "iVar4": "sum",
                "iVar5": "difference",
                "uVar6": "bits2",
                "iVar7": "difference2",
                "uVar8": "temp",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_floating_point_08009054",
            "code": "\nuint calculateFloatingPoint_08009054(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  uint result1;\n  uint result2;\n  int difference;\n  uint temp1;\n  int temp2;\n  uint result;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  result2 = value1 >> 0x17 & 0xff;\n  flag1 = result2 == 0;\n  if (!flag1) {\n    param4 = value2 >> 0x17 & 0xff;\n    flag1 = param4 == 0;\n  }\n  if (!flag1) {\n    flag1 = result2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = param4 == 0xff;\n  }\n  if (flag1) {\n    param4 = value2 >> 0x17 & 0xff;\n    result = value1;\n    if (result2 == 0xff) {\n      if (((value1 & 0x7fffff) != 0) || (result = value2, param4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = value2;\n        if ((value2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (value1 ^ value2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      flag1 = (value1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (value2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = result2 == 0;\n        result = value1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            value1 = value1 << 1;\n            flag1 = (value1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          result2 = result2 - 1;\n        }\n        value1 = value1 | result;\n        flag1 = param4 == 0;\n        result = value2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            value2 = value2 << 1;\n            flag1 = (value2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          param4 = param4 - 1;\n        }\n        value2 = value2 | result;\n        goto LAB_0800906c;\n      }\n      if ((value1 & 0x7fffffff) == 0) {\n        if ((value2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    value1 = value1 ^ value2;\n  }\n  else {\nLAB_0800906c:\n    difference = result2 - param4;\n    if (value2 << 9 == 0) {\n      value1 = (value1 ^ value2) & 0x80000000 | value1 & 0x7fffff;\n      flag3 = SCARRY4(difference,0x7f);\n      temp2 = difference + 0x7f;\n      flag1 = temp2 < 0;\n      flag2 = temp2 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,temp2);\n        flag1 = 0xff - temp2 < 0;\n        flag2 = temp2 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        value1 = value1 | temp2 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return value1;\n      }\n      value1 = value1 | 0x800000;\n      result2 = 0;\n      flag2 = SBORROW4(temp2,1);\n      temp1 = difference + 0x7e;\n      flag1 = temp1 == 0;\n      result = temp1;\n    }\n    else {\n      result1 = (value2 << 9) >> 4 | 0x10000000;\n      result2 = (value1 << 9) >> 4 | 0x10000000;\n      value1 = (value1 ^ value2) & 0x80000000;\n      flag1 = result1 <= result2;\n      if (!flag1) {\n        result2 = result2 << 1;\n      }\n      temp1 = difference + 0x7d + (uint)flag1;\n      result = 0x800000;\n      do {\n        if (result1 <= result2) {\n          result2 = result2 - result1;\n          value1 = value1 | result;\n        }\n        flag1 = result1 >> 1 <= result2;\n        if (flag1) {\n          result2 = result2 - (result1 >> 1);\n        }\n        if (flag1) {\n          value1 = value1 | result >> 1;\n        }\n        flag1 = result1 >> 2 <= result2;\n        if (flag1) {\n          result2 = result2 - (result1 >> 2);\n        }\n        if (flag1) {\n          value1 = value1 | result >> 2;\n        }\n        flag1 = result1 >> 3 <= result2;\n        if (flag1) {\n          result2 = result2 - (result1 >> 3);\n        }\n        if (flag1) {\n          value1 = value1 | result >> 3;\n        }\n        result2 = result2 * 0x10;\n        flag1 = result2 == 0;\n        if (!flag1) {\n          result = result >> 4;\n          flag1 = result == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(temp1,0xfd);\n      flag1 = temp1 == 0xfd;\n      result = temp1 - 0xfd;\n      if (temp1 < 0xfe) {\n        value1 = value1 + temp1 * 0x800000 + (uint)(result1 <= result2);\n        if (result2 - result1 == 0) {\n          value1 = value1 & 0xfffffffe;\n        }\n        return value1;\n      }\n    }\n    if (flag1 || (int)result < 0 != flag2) {\n      flag1 = (int)(temp1 + 0x19) < 0;\n      if (temp1 == 0xffffffe7 || flag1 != SCARRY4(temp1,0x19)) {\n        value1 = value1 & 0x80000000;\n      }\n      if (temp1 == 0xffffffe7 || flag1 != SCARRY4(temp1,0x19)) {\n        return value1;\n      }\n      result = (value1 << 1) >> (-temp1 & 0xff);\n      temp1 = value1 << (temp1 + 0x20 & 0xff);\n      result = ((uint)((value1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((result2 | temp1 << 1) == 0) {\n        result = result & ~(temp1 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return value1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "difference",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "uVar6": "result",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_result_0800919c",
            "code": "\nuint calculate_result_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined == 0;\n  if (!is_zero) {\n    combined = input_1 ^ input_2;\n    is_zero = combined == 0;\n  }\n  is_negative = -1 < (int)combined;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "combine_values_080091fc",
            "code": "\nvoid combine_values_080091fc(undefined4 value1,undefined4 value2)\n\n{\n  combine_values_080091fc_08009204(value2,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "combine_values_080091fc",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "combine_values_08009204",
            "code": "\nundefined8 combineValues_08009204(undefined4 value1,undefined4 value2)\n\n{\n  calculate_result_0800919c();\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08009204": "combine_values_08009204",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_value_is_not_zero_08009214",
            "code": "\nbool check_value_is_not_zero_08009214(void)\n\n{\n  char input_character;\n  \n  combine_values_08009204();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_value_is_not_zero_08009214",
                "in_ZR": "input_character"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_if_input_empty_08009228",
            "code": "\nbool check_if_input_empty_08009228(void)\n\n{\n  char input_char;\n  \n  combine_values_08009204();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_if_input_empty_08009228",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_combine_result_0800923c",
            "code": "\nbool check_combine_result_0800923c(void)\n\n{\n  undefined is_zero_result;\n  undefined carry_flag;\n  \n  combine_values_08009204();\n  return !(bool)carry_flag || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_combine_result_0800923c",
                "in_ZR": "is_zero_result",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_combination_08009250",
            "code": "\nbool check_combination_08009250(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  combine_values_080091fc();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_combination_08009250",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_if_empty_08009264",
            "code": "\nbool check_if_empty_08009264(void)\n\n{\n  char input_char;\n  \n  combine_values_080091fc();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_if_empty_08009264",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "extracted_value_08009278",
            "code": "\nuint extractedValue_08009278(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08009278": "extracted_value_08009278",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_0800756c();\n  execute_functions_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_and_run_application_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_float_08009318",
            "code": "\nlonglong calculate_float_08009318(uint input_value1,uint input_value2,undefined4 constant_value1,undefined4 constant_value2)\n\n{\n  int is_null;\n  uint shifted_value;\n  uint mask;\n  bool carry;\n  undefined8 result;\n  longlong output_value;\n  \n  mask = (input_value2 << 1) >> 0x15;\n  shifted_value = mask - 0x3ff;\n  if ((int)shifted_value < 0x14) {\n    if ((int)shifted_value < 0) {\n      result = calculate_sum_080082d4(input_value1,input_value2,0x8800759c,0x7e37e43c,constant_value2);\n      is_null = check_if_null_08008b60_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output_value = CONCAT44(input_value2,input_value1);\n      if (is_null != 0) {\n        if ((int)input_value2 < 0) {\n          output_value = -0x8000000000000000;\n        }\n        else if ((input_value1 | input_value2) == 0) {\n          output_value = 0;\n        }\n        else {\n          output_value = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shifted_value & 0xff);\n      output_value = CONCAT44(input_value2,input_value1);\n      if ((input_value2 & mask | input_value1) != 0) {\n        result = calculate_sum_080082d4(input_value1,input_value2,0x8800759c,0x7e37e43c,constant_value2);\n        is_null = check_if_null_08008b60_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        output_value = CONCAT44(input_value2,input_value1);\n        if (is_null != 0) {\n          if (0 < (int)input_value2) {\n            input_value2 = input_value2 + (0x100000 >> (shifted_value & 0xff));\n          }\n          output_value = (ulonglong)(input_value2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_value < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    output_value = CONCAT44(input_value2,input_value1);\n    if ((mask & input_value1) != 0) {\n      result = calculate_sum_080082d4(input_value1,input_value2,0x8800759c,0x7e37e43c,constant_value2);\n      is_null = check_if_null_08008b60_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output_value = CONCAT44(input_value2,input_value1);\n      if (is_null != 0) {\n        if (0 < (int)input_value2) {\n          if (shifted_value == 0x14) {\n            input_value2 = input_value2 + 1;\n          }\n          else {\n            shifted_value = 1 << (0x34 - shifted_value & 0xff);\n            carry = CARRY4(shifted_value,input_value1);\n            input_value1 = shifted_value + input_value1;\n            if (carry != false) {\n              input_value2 = input_value2 + 1;\n            }\n          }\n        }\n        output_value = CONCAT44(input_value2,input_value1 & ~mask);\n      }\n    }\n  }\n  else {\n    output_value = CONCAT44(input_value2,input_value1);\n    if (shifted_value == 0x400) {\n      output_value = calculate_sum_080082d4();\n    }\n  }\n  return output_value;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_float_08009318",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "constant_value1",
                "param_4": "constant_value2",
                "iVar1": "is_null",
                "uVar2": "shifted_value",
                "uVar3": "mask",
                "bVar4": "carry",
                "uVar5": "result",
                "lVar6": "output_value"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_result_08009410",
            "code": "\nundefined4 calculate_result_08009410(undefined4 input_value,uint input_flag)\n\n{\n  undefined4 result;\n  uint calculation_type;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  \n  if (0x3fe921fb < (input_flag & 0x7fffffff)) {\n    if ((input_flag & 0x7fffffff) < 0x7ff00000) {\n      calculation_type = calculate_08009d78(input_value,input_flag,&temp_var1);\n      calculation_type = calculation_type & 3;\n      if (calculation_type == 1) {\n        result = calculate_result_08009410_0800adf0(temp_var1,temp_var2,temp_var3,temp_var4,1);\n      }\n      else if (calculation_type == 2) {\n        result = calculate_improved_result_0800a348(temp_var1,temp_var2,temp_var3,temp_var4);\n      }\n      else if (calculation_type == 0) {\n        result = calculate_improved_result_0800a348(temp_var1,temp_var2,temp_var3,temp_var4);\n      }\n      else {\n        result = calculate_result_08009410_0800adf0(temp_var1,temp_var2,temp_var3,temp_var4,1);\n      }\n    }\n    else {\n      result = calculate_result_08009410_080082d0(input_value,input_flag,input_value,input_flag);\n    }\n    return result;\n  }\n  result = calculate_improved_result_0800a348(input_value,input_flag,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input_value",
                "param_2": "input_flag",
                "uVar1": "result",
                "uVar2": "calculation_type",
                "local_28": "temp_var1",
                "uStack_24": "temp_var2",
                "local_20": "temp_var3",
                "uStack_1c": "temp_var4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_result_080094c0",
            "code": "\nlonglong calculate_result_080094c0(uint input_1,uint input_2,undefined4 value_1,undefined4 value_2)\n\n{\n  int check_result;\n  uint shifted_input;\n  uint shift_mask;\n  bool carry_bit;\n  undefined8 sum_result;\n  longlong result;\n  \n  shift_mask = (input_2 << 1) >> 0x15;\n  shifted_input = shift_mask - 0x3ff;\n  if ((int)shifted_input < 0x14) {\n    if ((int)shifted_input < 0) {\n      sum_result = calculate_sum_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,value_2);\n      check_result = check_if_null_08008b60_08008b60((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n      result = CONCAT44(input_2,input_1);\n      if (check_result != 0) {\n        if ((int)input_2 < 0) {\n          if ((input_1 | input_2 & 0x7fffffff) != 0) {\n            input_2 = 0xbff00000;\n          }\n          result = (ulonglong)input_2 << 0x20;\n        }\n        else {\n          result = 0;\n        }\n      }\n    }\n    else {\n      shift_mask = 0xfffff >> (shifted_input & 0xff);\n      result = CONCAT44(input_2,input_1);\n      if ((input_2 & shift_mask | input_1) != 0) {\n        sum_result = calculate_sum_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,value_2);\n        check_result = check_if_null_08008b60_08008b60((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n        result = CONCAT44(input_2,input_1);\n        if (check_result != 0) {\n          if ((int)input_2 < 0) {\n            input_2 = input_2 + (0x100000 >> (shifted_input & 0xff));\n          }\n          result = (ulonglong)(input_2 & ~shift_mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_input < 0x34) {\n    shift_mask = 0xffffffff >> (shift_mask - 0x413 & 0xff);\n    result = CONCAT44(input_2,input_1);\n    if ((shift_mask & input_1) != 0) {\n      sum_result = calculate_sum_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,value_2);\n      check_result = check_if_null_08008b60_08008b60((int)sum_result,(int)((ulonglong)sum_result >> 0x20),0,0);\n      result = CONCAT44(input_2,input_1);\n      if (check_result != 0) {\n        if ((int)input_2 < 0) {\n          if (shifted_input == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            shifted_input = 1 << (0x34 - shifted_input & 0xff);\n            carry_bit = CARRY4(shifted_input,input_1);\n            input_1 = shifted_input + input_1;\n            if (carry_bit != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input_2,input_1 & ~shift_mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input_2,input_1);\n    if (shifted_input == 0x400) {\n      result = calculate_sum_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "value_1",
                "param_4": "value_2",
                "iVar1": "check_result",
                "uVar2": "shifted_input",
                "uVar3": "shift_mask",
                "bVar4": "carry_bit",
                "uVar5": "sum_result",
                "lVar6": "result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_080095b8",
            "code": "\nint calculate_product_080095b8(uint input_value_1,uint input_value_2)\n\n{\n  uint temp_1;\n  uint shifted_input;\n  uint result;\n  int sign;\n  uint temp_2;\n  \n  shifted_input = (input_value_2 << 1) >> 0x15;\n  temp_2 = shifted_input - 0x3ff;\n  if ((int)input_value_2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input_value_2 & 0xfffff | 0x100000;\n  if ((int)temp_2 < 0x14) {\n    if ((int)temp_2 < 0) {\n      if (temp_2 != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (temp_2 & 0xff)) >> (0x14 - temp_2 & 0xff);\n  }\n  else {\n    if (0x1e < temp_2) {\n      sign = extract_integer_08008ba0();\n      return sign;\n    }\n    if ((int)temp_2 < 0x34) {\n      temp_1 = 0x80000000 >> (shifted_input - 0x413 & 0xff);\n      if (CARRY4(temp_1,input_value_1) != false) {\n        result = result + 1;\n      }\n      result = result << (shifted_input - 0x413 & 0xff);\n      if (temp_2 != 0x14) {\n        result = result | temp_1 + input_value_1 >> (0x34 - temp_2 & 0xff);\n      }\n    }\n    else {\n      result = result << (shifted_input - 0x413 & 0xff) | input_value_1 << (shifted_input - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "temp_1",
                "uVar2": "shifted_input",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "temp_2"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "calculate_result_08009654",
            "code": "\nlonglong calculate_result_08009654(uint input_1,uint input_2)\n\n{\n  uint shifted_bits;\n  uint mask;\n  longlong result;\n  \n  result = CONCAT44(input_2,input_1);\n  mask = (input_2 << 1) >> 0x15;\n  shifted_bits = mask - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      input_2 = input_2 & 0x80000000;\n      if (shifted_bits == 0xffffffff) {\n        input_2 = input_2 | 0x3ff00000;\n      }\n      result = (ulonglong)input_2 << 0x20;\n    }\n    else {\n      mask = 0xfffff >> (shifted_bits & 0xff);\n      result = CONCAT44(input_2,input_1);\n      if ((input_2 & mask | input_1) != 0) {\n        result = (ulonglong)(input_2 + (0x80000 >> (shifted_bits & 0xff)) & ~mask) << 0x20;\n      }\n    }\n  }\n  else if ((int)shifted_bits < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    if ((input_1 & mask) != 0) {\n      shifted_bits = 1 << (0x33 - shifted_bits & 0xff);\n      if (CARRY4(input_1,shifted_bits) != false) {\n        input_2 = input_2 + 1;\n      }\n      result = CONCAT44(input_2,input_1 + shifted_bits & ~mask);\n    }\n  }\n  else {\n    result = CONCAT44(input_2,input_1);\n    if (shifted_bits == 0x400) {\n      result = calculate_sum_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "calculate_result_08009654",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "shifted_bits",
                "uVar2": "mask",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_improved_result_080096e8",
            "code": "\nundefined4 calculate_improved_result_080096e8(undefined4 input1,uint input2)\n\n{\n  undefined4 final_result;\n  uint flag;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  \n  if (0x3fe921fb < (input2 & 0x7fffffff)) {\n    if ((input2 & 0x7fffffff) < 0x7ff00000) {\n      flag = calculate_08009d78(input1,input2,&result1);\n      flag = flag & 3;\n      if (flag == 1) {\n        final_result = calculate_improved_result_080096e8_0800a348(result1,result2,result3,result4);\n      }\n      else if (flag == 2) {\n        final_result = calculate_result_0800adf0(result1,result2,result3,result4,1);\n      }\n      else if (flag == 0) {\n        final_result = calculate_result_0800adf0(result1,result2,result3,result4,1);\n      }\n      else {\n        final_result = calculate_improved_result_080096e8_0800a348(result1,result2,result3,result4);\n      }\n    }\n    else {\n      final_result = calculate_result_080082d0(input1,input2,input1,input2);\n    }\n    return final_result;\n  }\n  final_result = calculate_result_0800adf0(input1,input2,0,0,0);\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_improved_result_080096e8",
                "param_1": "input1",
                "param_2": "input2",
                "local_28": "result1",
                "uStack_24": "result2",
                "local_20": "result3",
                "uStack_1c": "result4",
                "uVar1": "final_result",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_shift_and_mask_08009798",
            "code": "\nlonglong calculate_shift_and_mask_08009798(uint input_value_1,uint input_value_2,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  uint shifted_bits;\n  uint shift_amount;\n  longlong result;\n  \n  shift_amount = (input_value_2 << 1) >> 0x15;\n  shifted_bits = shift_amount - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      return ((ulonglong)input_value_2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input_value_2 & ~(0xfffff >> (shifted_bits & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_bits < 0x34) {\n      return CONCAT44(input_value_2,input_value_1 & ~(0xffffffffU >> (shift_amount - 0x413 & 0xff)));\n    }\n    if (shifted_bits != 0x400) {\n      return CONCAT44(input_value_2,input_value_1);\n    }\n    result = calculate_sum_080082d4(input_value_1,input_value_2,input_value_1,input_value_2,parameter_4);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_shift_and_mask_08009798",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uVar1": "shifted_bits",
                "uVar2": "shift_amount",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_value_thunk_08009990",
            "code": "\nuint calculate_value_thunk_08009990(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = value4 & 0x7fffffff;\n  if (((tempVar4 | (-value3 | value3) >> 0x1f) < 0x7ff00001) &&\n     (tempVar5 = value2 & 0x7fffffff, (tempVar5 | (-value1 | value1) >> 0x1f) < 0x7ff00001)) {\n    if ((value4 + 0xc0100000 | value3) == 0) {\n      tempVar4 = calculate_value_thunk_08009990_0800af78();\n      return tempVar4;\n    }\n    tempVar3 = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n    if ((tempVar5 | value1) == 0) {\n      if (tempVar3 == 2) {\n        value1 = 0x54442d18;\n      }\n      else if (tempVar3 == 3) {\n        value1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((tempVar4 | value3) != 0) {\n        if (tempVar4 == 0x7ff00000) {\n          tempVar3 = tempVar3 - 1;\n          if (tempVar5 == 0x7ff00000) {\n            if (tempVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + tempVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (tempVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + tempVar3 * 8);\n          }\n          return 0;\n        }\n        if (tempVar5 != 0x7ff00000) {\n          tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n          if ((int)(tempVar5 - tempVar4) < 0x3d00000) {\n            if (((int)value4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n              tempVar6 = 0;\n            }\n            else {\n              floating_point_conversion_08008894(value1,value2,value3,value4,value4);\n              FUNC_0800b2cc();\n              tempVar6 = calculate_value_thunk_08009990_0800af78();\n            }\n          }\n          else {\n            tempVar6 = 0x3ff921fb54442d18;\n          }\n          tempVar2 = (undefined4)((ulonglong)tempVar6 >> 0x20);\n          tempVar4 = (uint)tempVar6;\n          if (tempVar3 == 1) {\n            return tempVar4;\n          }\n          if (tempVar3 == 2) {\n            tempVar6 = calculate_result_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n            tempVar4 = calculate_result_080082d0(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n            return tempVar4;\n          }\n          if (tempVar3 == 0) {\n            return tempVar4;\n          }\n          tempVar6 = calculate_result_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n          tempVar4 = calculate_result_080082d0((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n          return tempVar4;\n        }\n      }\n      if ((int)value2 < 0) {\n        value1 = 0x54442d18;\n      }\n      else {\n        value1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    value1 = calculate_sum_080082d4(value3,value4,value1,value2);\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_value_thunk_08009990",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "initialize_and_set_values_0800981c",
            "code": "\nundefined8 initializeAndSetValues_0800981c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int shiftValue;\n  undefined4 *dataPtr;\n  int *dataAddressPtr;\n  undefined8 result;\n  undefined4 constant1;\n  char *constant2;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 lowerBound;\n  undefined4 upperBound;\n  int shiftedValue;\n  \n  result = calculate_result_08009b24();\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  shiftedValue = calculate_shifted_value_0800b2d4();\n  if (shiftedValue != 0) {\n    return result;\n  }\n  shiftValue = calculate_shifted_value_0800b2d4(input1,input2);\n  if (shiftValue == 0) {\n    return result;\n  }\n  shiftValue = calculate_shifted_value_0800b2d4(input3,input4);\n  if (shiftValue == 0) {\n    return result;\n  }\n  constant1 = 3;\n  constant2 = \"hypot\";\n  input1_copy = input1;\n  input2_copy = input2;\n  input3_copy = input3;\n  input4_copy = input4;\n  if (DAT_20000014 == '\\0') {\n    lowerBound = 0xe0000000;\n    upperBound = 0x47efffff;\nLAB_080098aa:\n    shiftValue = initialize_0800b2e0(&constant1);\n    if (shiftValue != 0) goto LAB_08009896;\n  }\n  else {\n    lowerBound = 0;\n    upperBound = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  dataPtr = (undefined4 *)get_data_from_address_0800b3dc();\n  *dataPtr = 0x22;\nLAB_08009896:\n  result = CONCAT44(upperBound,lowerBound);\n  if (shiftedValue != 0) {\n    dataAddressPtr = (int *)get_data_from_address_0800b3dc();\n    result = CONCAT44(upperBound,lowerBound);\n    *dataAddressPtr = shiftedValue;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "initialize_and_set_values_0800981c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftValue",
                "puVar2": "dataPtr",
                "piVar3": "dataAddressPtr",
                "uVar4": "result",
                "local_50": "constant1",
                "pcStack_4c": "constant2",
                "local_48": "input1_copy",
                "uStack_44": "input2_copy",
                "local_40": "input3_copy",
                "uStack_3c": "input4_copy",
                "local_30": "shiftedValue",
                "local_38": "lowerBound",
                "uStack_34": "upperBound"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "calculate_and_initialize_080098d0",
            "code": "\nundefined4 calculate_and_initialize_080098d0(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  char cVar1;\n  undefined4 result;\n  int is_cy_null_result;\n  undefined4 *data_address_ptr;\n  int *data_from_address_ptr;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 input_param_1_copy;\n  undefined4 input_param_2_copy;\n  undefined4 input_param_1_copy2;\n  undefined4 input_param_2_copy2;\n  undefined8 float_conversion_result;\n  int check_param_result;\n  \n  result = calculate_0800a1bc();\n  cVar1 = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (check_param_result = check_parameters_08008b74(input_param_1,input_param_2,input_param_1,input_param_2), check_param_result != 0)) ||\n     (is_cy_null_result = is_cy_null_08008b24(input_param_1,input_param_2,0,0), is_cy_null_result == 0)) {\n    return result;\n  }\n  flag = 1;\n  data_ptr = &DAT_0800be5c;\n  input_param_1_copy = input_param_1;\n  input_param_2_copy = input_param_2;\n  input_param_1_copy2 = input_param_1;\n  input_param_2_copy2 = input_param_2;\n  if (cVar1 == '\\0') {\n    float_conversion_result = 0;\nLAB_0800996c:\n    is_cy_null_result = initialize_0800b2e0(&flag);\n    if (is_cy_null_result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    float_conversion_result = floating_point_conversion_08008894(0,0,0,0);\n    if (cVar1 != '\\x02') goto LAB_0800996c;\n  }\n  data_address_ptr = (undefined4 *)get_data_from_address_0800b3dc();\n  *data_address_ptr = 0x21;\njoined_r0x0800997a:\n  if (check_param_result != 0) {\n    data_from_address_ptr = (int *)get_data_from_address_0800b3dc();\n    *data_from_address_ptr = check_param_result;\n  }\n  return (undefined4)float_conversion_result;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "calculate_and_initialize_080098d0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "uVar2": "result",
                "iVar3": "is_cy_null_result",
                "puVar4": "data_address_ptr",
                "piVar5": "data_from_address_ptr",
                "local_50": "flag",
                "local_4c": "data_ptr",
                "local_48": "input_param_1_copy",
                "uStack_44": "input_param_2_copy",
                "local_40": "input_param_1_copy2",
                "uStack_3c": "input_param_2_copy2",
                "local_38": "float_conversion_result",
                "local_30": "check_param_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_value_08009990",
            "code": "\nuint calculate_value_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  undefined8 result5;\n  \n  result3 = input4 & 0x7fffffff;\n  if (((result3 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (result4 = input2 & 0x7fffffff, (result4 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      result3 = calculate_value_08009990_0800af78();\n      return result3;\n    }\n    result2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((result4 | input1) == 0) {\n      if (result2 == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (result2 == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((result3 | input3) != 0) {\n        if (result3 == 0x7ff00000) {\n          result2 = result2 - 1;\n          if (result4 == 0x7ff00000) {\n            if (result2 < 3) {\n              return *(uint *)(&DAT_0800be68 + result2 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (result2 < 3) {\n            return *(uint *)(&DAT_0800be80 + result2 * 8);\n          }\n          return 0;\n        }\n        if (result4 != 0x7ff00000) {\n          temp1 = (int)(result4 - result3) >> 0x14;\n          if ((int)(result4 - result3) < 0x3d00000) {\n            if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n              result5 = 0;\n            }\n            else {\n              floating_point_conversion_08008894(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              result5 = calculate_value_08009990_0800af78();\n            }\n          }\n          else {\n            result5 = 0x3ff921fb54442d18;\n          }\n          result1 = (undefined4)((ulonglong)result5 >> 0x20);\n          result3 = (uint)result5;\n          if (result2 == 1) {\n            return result3;\n          }\n          if (result2 == 2) {\n            result5 = calculate_result_080082d0(result3,result1,0x33145c07,0x3ca1a626);\n            result3 = calculate_result_080082d0(0x54442d18,0x400921fb,(int)result5,(int)((ulonglong)result5 >> 0x20));\n            return result3;\n          }\n          if (result2 == 0) {\n            return result3;\n          }\n          result5 = calculate_result_080082d0(result3,result1,0x33145c07,0x3ca1a626);\n          result3 = calculate_result_080082d0((int)result5,(int)((ulonglong)result5 >> 0x20),0x54442d18,0x400921fb);\n          return result3;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = calculate_sum_080082d4(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_value_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "iVar1": "temp1"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_result_08009b24",
            "code": "\nuint calculate_result_08009b24(uint input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  undefined4 result1;\n  int result2;\n  uint result3;\n  int result4;\n  undefined4 result5;\n  int result6;\n  uint result7;\n  undefined4 result8;\n  undefined4 result9;\n  undefined8 final_result;\n  undefined8 temp_result1;\n  undefined8 temp_result2;\n  undefined8 temp_result3;\n  int shift_value;\n  \n  input_param2 = input_param2 & 0x7fffffff;\n  input_param4 = input_param4 & 0x7fffffff;\n  result3 = input_param1;\n  result7 = input_param2;\n  if (input_param2 < input_param4) {\n    result3 = input_param3;\n    input_param3 = input_param1;\n    result7 = input_param4;\n    input_param4 = input_param2;\n  }\n  if (0x3c00000 < (int)(result7 - input_param4)) {\n    result3 = calculate_sum_080082d4(result3,result7,input_param3,input_param4);\n    return result3;\n  }\n  if (result7 < 0x5f300001) {\n    shift_value = 0;\n  }\n  else {\n    if (0x7fefffff < result7) {\n      if ((result7 & 0xfffff | result3) != 0) {\n        result3 = calculate_sum_080082d4(result3,result7,input_param3,input_param4);\n      }\n      if ((input_param4 ^ 0x7ff00000 | input_param3) != 0) {\n        return result3;\n      }\n      return input_param3;\n    }\n    result7 = result7 + 0xda800000;\n    input_param4 = input_param4 + 0xda800000;\n    shift_value = 600;\n  }\n  temp_result1 = CONCAT44(result7,result3);\n  final_result = CONCAT44(input_param4,input_param3);\n  if ((int)input_param4 < 0x20b00000) {\n    if ((int)input_param4 < 0x100000) {\n      if ((input_param4 | input_param3) == 0) {\n        return result3;\n      }\n      final_result = calculate_result_08009b24_08008640(input_param3,input_param4,0,0x7fd00000);\n      temp_result1 = calculate_result_08009b24_08008640(result3,result7,0,0x7fd00000);\n      shift_value = shift_value + -0x3fe;\n    }\n    else {\n      result7 = result7 + 0x25800000;\n      temp_result1 = CONCAT44(result7,result3);\n      input_param4 = input_param4 + 0x25800000;\n      final_result = CONCAT44(input_param4,input_param3);\n      shift_value = shift_value + -600;\n    }\n  }\n  result9 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n  result8 = (undefined4)temp_result1;\n  result6 = (int)((ulonglong)final_result >> 0x20);\n  result5 = (undefined4)final_result;\n  final_result = calculate_result_08009b24_080082d0(result8,result9,result5,result6);\n  result4 = (int)((ulonglong)final_result >> 0x20);\n  result1 = (undefined4)final_result;\n  result2 = is_cy_null_08008b24(result5,result6,result1,result4);\n  if (result2 == 0) {\n    final_result = calculate_result_08009b24_08008640(0,input_param4,0);\n    temp_result1 = calculate_result_08009b24_08008640(result1,result4 + -0x80000000,result1,result4);\n    temp_result2 = calculate_sum_080082d4(result8,result9,result8,result9);\n    temp_result2 = calculate_result_08009b24_080082d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,result7 + 0x100000);\n    temp_result2 = calculate_result_08009b24_08008640((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),result5,result6);\n    temp_result3 = calculate_result_08009b24_080082d0(result5,result6,0,input_param4);\n    temp_result3 = calculate_result_08009b24_08008640((int)temp_result3,(int)((ulonglong)temp_result3 >> 0x20),0,result7 + 0x100000);\n    temp_result2 = calculate_sum_080082d4((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result3,\n                          (int)((ulonglong)temp_result3 >> 0x20));\n    temp_result1 = calculate_result_08009b24_080082d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                          (int)((ulonglong)temp_result2 >> 0x20));\n    calculate_result_08009b24_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result1,\n                 (int)((ulonglong)temp_result1 >> 0x20));\n    final_result = calculate_0800a1bc();\n  }\n  else {\n    final_result = calculate_result_08009b24_08008640(0,result7,0,result7);\n    temp_result1 = calculate_result_08009b24_08008640(result5,result6 + -0x80000000,result5,result6);\n    temp_result2 = calculate_sum_080082d4(result8,result9,0,result7);\n    temp_result3 = calculate_result_08009b24_080082d0(result8,result9,0,result7);\n    temp_result2 = calculate_result_08009b24_08008640((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result3,\n                          (int)((ulonglong)temp_result3 >> 0x20));\n    temp_result1 = calculate_result_08009b24_080082d0((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                          (int)((ulonglong)temp_result2 >> 0x20));\n    calculate_result_08009b24_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result1,\n                 (int)((ulonglong)temp_result1 >> 0x20));\n    final_result = calculate_0800a1bc();\n  }\n  result3 = (uint)final_result;\n  if (shift_value != 0) {\n    result3 = calculate_result_08009b24_08008640(result3,(int)((ulonglong)final_result >> 0x20),0,shift_value * 0x100000 + 0x3ff00000);\n  }\n  return result3;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "iVar6": "result6",
                "uVar7": "result7",
                "uVar8": "result8",
                "uVar9": "result9",
                "uVar10": "final_result",
                "uVar11": "temp_result1",
                "uVar12": "temp_result2",
                "uVar13": "temp_result3",
                "local_3c": "shift_value"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_08009d78",
            "code": "\nint calculate_08009d78(undefined4 input_param1,uint input_param2,undefined8 *output_param)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  uint modified_param2;\n  int result;\n  undefined8 temp8;\n  undefined8 temp9;\n  undefined8 temp10;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  \n  modified_param2 = input_param2 & 0x7fffffff;\n  if (modified_param2 < 0x3fe921fc) {\n    *(undefined4 *)output_param = input_param1;\n    *(uint *)((int)output_param + 4) = input_param2;\n    *(undefined4 *)(output_param + 1) = 0;\n    *(undefined4 *)((int)output_param + 0xc) = 0;\n    return 0;\n  }\n  if (modified_param2 < 0x4002d97c) {\n    if ((int)input_param2 < 1) {\n      temp8 = calculate_08009d78_sum_080082d4(input_param1,input_param2,0x54400000,0x3ff921fb);\n      temp3 = (undefined4)((ulonglong)temp8 >> 0x20);\n      temp1 = (undefined4)temp8;\n      if (modified_param2 != 0x3ff921fb) {\n        temp8 = calculate_08009d78_sum_080082d4(temp1,temp3,0x1a626331,0x3dd0b461);\n        *output_param = temp8;\n        temp8 = calculate_08009d78_result_080082d0(temp1,temp3);\n        temp8 = calculate_08009d78_sum_080082d4((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x1a626331,0x3dd0b461);\n        output_param[1] = temp8;\n        return -1;\n      }\n      temp8 = calculate_08009d78_sum_080082d4(temp1,temp3,0x1a600000,0x3dd0b461);\n      temp1 = (undefined4)((ulonglong)temp8 >> 0x20);\n      temp9 = calculate_08009d78_sum_080082d4((int)temp8,temp1,0x2e037073,0x3ba3198a);\n      *output_param = temp9;\n      temp8 = calculate_08009d78_result_080082d0((int)temp8,temp1);\n      temp8 = calculate_08009d78_sum_080082d4((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x2e037073,0x3ba3198a);\n      output_param[1] = temp8;\n      return -1;\n    }\n    temp8 = calculate_08009d78_result_080082d0();\n    temp3 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp1 = (undefined4)temp8;\n    if (modified_param2 != 0x3ff921fb) {\n      temp8 = calculate_08009d78_result_080082d0(temp1,temp3,0x1a626331,0x3dd0b461);\n      *output_param = temp8;\n      temp8 = calculate_08009d78_result_080082d0(temp1,temp3);\n      temp8 = calculate_08009d78_result_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x1a626331,0x3dd0b461);\n      output_param[1] = temp8;\n      return 1;\n    }\n    temp8 = calculate_08009d78_result_080082d0(temp1,temp3,0x1a600000,0x3dd0b461);\n    temp1 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp9 = calculate_08009d78_result_080082d0((int)temp8,temp1,0x2e037073,0x3ba3198a);\n    *output_param = temp9;\n    temp8 = calculate_08009d78_result_080082d0((int)temp8,temp1);\n    temp8 = calculate_08009d78_result_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x2e037073,0x3ba3198a);\n    output_param[1] = temp8;\n    return 1;\n  }\n  if (0x413921fb < modified_param2) {\n    if (0x7fefffff < modified_param2) {\n      temp8 = calculate_08009d78_result_080082d0(input_param1,input_param2,input_param1,input_param2);\n      output_param[1] = temp8;\n      *output_param = temp8;\n      return 0;\n    }\n    result = ((int)modified_param2 >> 0x14) + -0x416;\n    extract_integer_08008ba0();\n    local_var3 = bitwise_shift_0800856c();\n    temp8 = calculate_08009d78_result_080082d0(input_param1,modified_param2 + result * -0x100000,(int)local_var3,\n                          (int)((ulonglong)local_var3 >> 0x20));\n    temp8 = calculate_08009d78_result_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x41700000);\n    extract_integer_08008ba0();\n    local_var4 = bitwise_shift_0800856c();\n    temp8 = calculate_08009d78_result_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20));\n    local_var5 = calculate_08009d78_result_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x41700000);\n    validate_parameters_08008b10((int)local_var5,(int)((ulonglong)local_var5 >> 0x20),0,0);\n    result = calculate_08009d78_result_0800a5a0(&local_var3,output_param,result);\n    if (-1 < (int)input_param2) {\n      return result;\n    }\n    *(int *)((int)output_param + 4) = *(int *)((int)output_param + 4) + -0x80000000;\n    *(int *)((int)output_param + 0xc) = *(int *)((int)output_param + 0xc) + -0x80000000;\n    return -result;\n  }\n  temp8 = FUNC_0800b2cc();\n  temp3 = (undefined4)((ulonglong)temp8 >> 0x20);\n  temp9 = calculate_08009d78_result_08008640((int)temp8,temp3,0x6dc9c883,0x3fe45f30);\n  calculate_08009d78_sum_080082d4((int)temp9,(int)((ulonglong)temp9 >> 0x20),0,0x3fe00000);\n  result = extract_integer_08008ba0();\n  temp9 = bitwise_shift_0800856c();\n  temp4 = (undefined4)((ulonglong)temp9 >> 0x20);\n  temp1 = (undefined4)temp9;\n  temp9 = calculate_08009d78_result_08008640(temp1,temp4,0x54400000,0x3ff921fb);\n  temp8 = calculate_08009d78_result_080082d0((int)temp8,temp3,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n  temp5 = (undefined4)((ulonglong)temp8 >> 0x20);\n  temp3 = (undefined4)temp8;\n  temp9 = calculate_08009d78_result_08008640(temp1,temp4,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == modified_param2)) {\n    temp10 = calculate_08009d78_result_080082d0(temp3,temp5,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n    if ((int)((modified_param2 >> 0x14) - ((uint)((int)((ulonglong)temp10 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp9 = calculate_08009d78_result_08008640(temp1,temp4,0x1a600000,0x3dd0b461);\n    temp6 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp8 = calculate_08009d78_result_080082d0(temp3,temp5,(int)temp9,temp6);\n    temp7 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp2 = (undefined4)temp8;\n    temp10 = calculate_08009d78_result_080082d0(temp3,temp5,temp2,temp7);\n    temp9 = calculate_08009d78_result_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,temp6);\n    temp10 = calculate_08009d78_result_08008640(temp1,temp4,0x2e037073,0x3ba3198a);\n    temp9 = calculate_08009d78_result_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n    temp10 = calculate_08009d78_result_080082d0(temp2,temp7,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n    if ((int)(((int)modified_param2 >> 0x14) - ((uint)((int)((ulonglong)temp10 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp9 = calculate_08009d78_result_08008640(temp1,temp4,0x2e000000,0x3ba3198a);\n    temp3 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp8 = calculate_08009d78_result_080082d0(temp2,temp7,(int)temp9,temp3);\n    temp10 = calculate_08009d78_result_080082d0(temp2,temp7);\n    temp9 = calculate_08009d78_result_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,temp3);\n    temp10 = calculate_08009d78_result_08008640(temp1,temp4,0x252049c1,0x397b839a);\n    temp9 = calculate_08009d78_result_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n  }\n  temp10 = calculate_08009d78_result_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                        (int)((ulonglong)temp9 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)temp8 >> 0x20);\n  local_var1 = (undefined4)temp8;\n  *output_param = temp10;\n  temp8 = calculate_08009d78_result_080082d0(local_var1,local_var2);\n  temp8 = calculate_08009d78_result_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                        (int)((ulonglong)temp9 >> 0x20));\n  output_param[1] = temp8;\n  if ((int)input_param2 < 0) {\n    *(int *)output_param = (int)temp10;\n    *(int *)((int)output_param + 4) = (int)((ulonglong)temp10 >> 0x20) + -0x80000000;\n    *(int *)(output_param + 1) = (int)temp8;\n    *(int *)((int)output_param + 0xc) = (int)((ulonglong)temp8 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_08009d78",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "output_param",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "modified_param2",
                "iVar9": "result",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "local_50": "local_var1",
                "uStack_4c": "local_var2",
                "local_40": "local_var3",
                "local_38": "local_var4",
                "local_30": "local_var5"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_0800a1bc",
            "code": "\nuint calculate_0800a1bc(uint input1,uint input2)\n\n{\n  uint shiftAmount;\n  int counter;\n  uint temporary;\n  undefined4 resultHigh;\n  uint zero;\n  uint bitMask;\n  uint result;\n  uint remainder;\n  uint dividend;\n  int loopCounter;\n  uint comparison;\n  uint carry;\n  undefined8 calculationResult;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    calculationResult = calculate_0800a1bc_result_08008640(input1,input2,input1,input2);\n    result = calculate_0800a1bc_sum_080082d4((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),input1,input2);\n    return result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return input1;\n    }\n    if (input2 != 0) {\n      calculationResult = calculate_0800a1bc_result_080082d0(input1,input2,input1);\n      resultHigh = (undefined4)((ulonglong)calculationResult >> 0x20);\n      result = floating_point_conversion_08008894((int)calculationResult,resultHigh,(int)calculationResult,resultHigh);\n      return result;\n    }\n    do {\n      dividend = input1;\n      result = dividend >> 0xb;\n      input2 = input2 - 0x15;\n      input1 = dividend << 0x15;\n    } while (result == 0);\n    shiftAmount = input2;\n    if (-1 < (int)dividend) goto LAB_0800a290;\n    carry = 0x20;\n    zero = 0xffffffff;\n    dividend = input1;\n  }\n  else {\n    shiftAmount = (int)input2 >> 0x14;\n    result = input2;\n    dividend = input1;\n    if (shiftAmount != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    dividend = 0;\n    carry = result;\n    do {\n      zero = dividend;\n      result = carry << 1;\n      loopCounter = carry << 0xc;\n      dividend = zero + 1;\n      carry = result;\n    } while (-1 < loopCounter);\n    carry = 0x20 - dividend;\n    input2 = shiftAmount;\n    dividend = input1 << (dividend & 0xff);\n  }\n  result = input1 >> (carry & 0xff) | result;\n  shiftAmount = input2 - zero;\nLAB_0800a1da:\n  result = result & 0xfffff | 0x100000;\n  if (-1 < (int)(shiftAmount << 0x1f)) {\n    result = result * 2 - ((int)dividend >> 0x1f);\n    dividend = dividend << 1;\n  }\n  carry = 0;\n  result = result * 2 - ((int)dividend >> 0x1f);\n  dividend = dividend << 1;\n  shiftAmount = 0;\n  loopCounter = 0x16;\n  zero = 0x200000;\n  do {\n    counter = shiftAmount + zero;\n    if (counter <= (int)result) {\n      result = result - counter;\n      shiftAmount = counter + zero;\n      carry = carry + zero;\n    }\n    loopCounter = loopCounter + -1;\n    result = result * 2 - ((int)dividend >> 0x1f);\n    zero = zero >> 1;\n    dividend = dividend << 1;\n  } while (loopCounter != 0);\n  counter = 0x20;\n  bitMask = 0x80000000;\n  loopCounter = 0;\n  zero = 0;\n  do {\n    temporary = bitMask + loopCounter;\n    comparison = shiftAmount;\n    if ((int)shiftAmount < (int)result) {\n      if ((int)temporary < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temporary + bitMask)) {\n          comparison = shiftAmount + 1;\n        }\n      }\n      remainder = result - shiftAmount;\n      shiftAmount = comparison;\n      if (dividend < temporary) {\n        remainder = remainder - 1;\n      }\nLAB_0800a262:\n      loopCounter = temporary + bitMask;\n      dividend = dividend - temporary;\n      zero = zero + bitMask;\n      result = remainder;\n    }\n    else if ((result == shiftAmount) && (temporary <= dividend)) {\n      if ((int)temporary < 0) goto LAB_0800a26a;\n      remainder = 0;\n      shiftAmount = result;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    bitMask = bitMask >> 1;\n    result = result * 2 - ((int)dividend >> 0x1f);\n    dividend = dividend << 1;\n    if (counter == 0) {\n      if ((result | dividend) == 0) {\n        zero = zero >> 1;\n      }\n      else if (zero == 0xffffffff) {\n        carry = carry + 1;\n        zero = 0;\n      }\n      else {\n        zero = zero + 1 >> 1;\n      }\n      if ((carry & 1) != 0) {\n        zero = zero | 0x80000000;\n      }\n      return zero;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shiftAmount",
                "iVar2": "counter",
                "uVar3": "temporary",
                "uVar4": "resultHigh",
                "uVar5": "zero",
                "uVar6": "bitMask",
                "uVar7": "result",
                "uVar8": "remainder",
                "uVar9": "dividend",
                "iVar10": "loopCounter",
                "uVar11": "comparison",
                "uVar12": "carry",
                "uVar13": "calculationResult"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_improved_result_0800a348",
            "code": "\nundefined4 calculateImprovedResult_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int extractedInteger;\n  undefined4 result1;\n  undefined4 result1h;\n  uint modifiedInput2;\n  undefined8 result2;\n  undefined8 result3;\n  undefined8 result4;\n  undefined4 stackVar1;\n  undefined4 stackVar1h;\n  undefined4 stackVar2;\n  undefined4 stackVar2h;\n  \n  modifiedInput2 = input2 & 0x7fffffff;\n  if (modifiedInput2 < 0x3e400000) {\n    extractedInteger = extract_integer_08008ba0();\n    if (extractedInteger == 0) {\n      return 0;\n    }\n    result2 = calculate_result_08008640(input1,input2,input1,input2);\n    result1h = (undefined4)((ulonglong)result2 >> 0x20);\n    result1 = (undefined4)result2;\n    result3 = calculate_result_08008640(result1,result1h,0xbe8838d4,0xbda8fae9);\n    result3 = calculate_sum_080082d4((int)result3,(int)((ulonglong)result3 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    result3 = calculate_result_080082d0((int)result3,(int)((ulonglong)result3 >> 0x20),0x809c52ad,0x3e927e4f);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    result3 = calculate_sum_080082d4((int)result3,(int)((ulonglong)result3 >> 0x20),0x19cb1590,0x3efa01a0);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    result3 = calculate_result_080082d0((int)result3,(int)((ulonglong)result3 >> 0x20),0x16c15177,0x3f56c16c);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    result3 = calculate_sum_080082d4((int)result3,(int)((ulonglong)result3 >> 0x20),0x5555554c,0x3fa55555);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n  }\n  else {\n    result2 = calculate_result_08008640(input1,input2,input1,input2);\n    result1h = (undefined4)((ulonglong)result2 >> 0x20);\n    result1 = (undefined4)result2;\n    result3 = calculate_result_08008640(result1,result1h,0xbe8838d4,0xbda8fae9);\n    result3 = calculate_sum_080082d4((int)result3,(int)((ulonglong)result3 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    result3 = calculate_result_080082d0((int)result3,(int)((ulonglong)result3 >> 0x20),0x809c52ad,0x3e927e4f);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    result3 = calculate_sum_080082d4((int)result3,(int)((ulonglong)result3 >> 0x20),0x19cb1590,0x3efa01a0);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    result3 = calculate_result_080082d0((int)result3,(int)((ulonglong)result3 >> 0x20),0x16c15177,0x3f56c16c);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    result3 = calculate_sum_080082d4((int)result3,(int)((ulonglong)result3 >> 0x20),0x5555554c,0x3fa55555);\n    result3 = calculate_result_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),result1,result1h);\n    if (0x3fd33332 < modifiedInput2) {\n      if (modifiedInput2 < 0x3fe90001) {\n        extractedInteger = modifiedInput2 - 0x200000;\n        result2 = calculate_result_080082d0(0,0x3ff00000,0,extractedInteger);\n      }\n      else {\n        extractedInteger = 0x3fd20000;\n        result2 = 0x3fe7000000000000;\n      }\n      stackVar2h = (undefined4)((ulonglong)result2 >> 0x20);\n      stackVar2 = (undefined4)result2;\n      result2 = calculate_result_08008640(result1,result1h,0,0x3fe00000);\n      result2 = calculate_result_080082d0((int)result2,(int)((ulonglong)result2 >> 0x20),0,extractedInteger);\n      result3 = calculate_result_08008640(result1,result1h,(int)result3,(int)((ulonglong)result3 >> 0x20));\n      result4 = calculate_result_08008640(input1,input2,input3,input4);\n      result3 = calculate_result_080082d0((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                           (int)((ulonglong)result4 >> 0x20));\n      result2 = calculate_result_080082d0((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                           (int)((ulonglong)result3 >> 0x20));\n      result1 = calculate_result_080082d0(stackVar2,stackVar2h,(int)result2,(int)((ulonglong)result2 >> 0x20));\n      return result1;\n    }\n  }\n  stackVar1h = (undefined4)((ulonglong)result3 >> 0x20);\n  stackVar1 = (undefined4)result3;\n  result1 = (undefined4)((ulonglong)result2 >> 0x20);\n  result3 = calculate_result_08008640((int)result2,result1,0,0x3fe00000);\n  result2 = calculate_result_08008640((int)result2,result1,stackVar1,stackVar1h);\n  result4 = calculate_result_08008640(input1,input2,input3,input4);\n  result2 = calculate_result_080082d0((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  result2 = calculate_result_080082d0((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result2,\n                       (int)((ulonglong)result2 >> 0x20));\n  result1 = calculate_result_080082d0(0,0x3ff00000,(int)result2,(int)((ulonglong)result2 >> 0x20));\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_improved_result_0800a348",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "extractedInteger",
                "uVar2": "result1",
                "uVar3": "result1h",
                "uVar4": "modifiedInput2",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "local_30": "stackVar1",
                "uStack_2c": "stackVar1h",
                "local_28": "stackVar2",
                "uStack_24": "stackVar2h"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_result_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculateResult_0800a5a0(int inputArray,undefined8 *outputPointer,int inputLength,int totalIterations,int shiftAmount,int calculationArray)\n\n{\n  undefined4 *pointer1;\n  uint result;\n  uint tempVar;\n  int counter;\n  uint *pointer2;\n  undefined4 shiftedValue;\n  uint **ppuVar7;\n  undefined4 upperValue;\n  int innerCounter;\n  undefined4 *pointer3;\n  undefined4 innerResult;\n  uint extractedValue;\n  uint *pointer4;\n  int tempCounter;\n  int tempVar1;\n  undefined8 *pointer5;\n  int tempVar2;\n  undefined4 *pointer18;\n  undefined8 *pointer19;\n  undefined4 tempVar4;\n  int tempVar5;\n  undefined8 *pointer6;\n  undefined4 *pointer7;\n  bool flag1;\n  undefined8 tempVar6;\n  undefined8 finalResult;\n  undefined8 tempVar7;\n  undefined8 *tempArray1;\n  int tempCounter1;\n  int shiftedLength;\n  int shiftedIterations;\n  uint *tempArray2 [2];\n  uint shiftedArray [20];\n  undefined8 tempVar8;\n  undefined8 calculationResult;\n  int inputResult [38];\n  undefined8 tempVar9;\n  \n  tempVar1 = *(int *)(&DAT_0800c060 + shiftAmount * 4);\n  innerCounter = totalIterations + -1;\n  tempArray2[1] = (uint *)outputPointer;\n  if (inputLength + 0x14 < 0 == SCARRY4(inputLength,0x14)) {\n    shiftedIterations = (inputLength + -3) / 0x18;\n    shiftedLength = (shiftedIterations + 1) * -0x18;\n  }\n  else {\n    shiftedLength = -0x18;\n    shiftedIterations = 0;\n  }\n  shiftedLength = inputLength + shiftedLength;\n  tempVar2 = shiftedIterations - innerCounter;\n  if (-1 < tempVar1 + innerCounter) {\n    tempVar5 = tempVar1 + innerCounter + 1 + tempVar2;\n    pointer5 = &tempVar8;\n    do {\n      while (tempVar2 < 0) {\n        tempVar2 = tempVar2 + 1;\n        *(undefined4 *)pointer5 = 0;\n        *(undefined4 *)((int)pointer5 + 4) = 0;\n        pointer5 = pointer5 + 1;\n        if (tempVar2 == tempVar5) goto LAB_0800a626;\n      }\n      finalResult = bitwise_shift_0800856c(*(undefined4 *)(calculationArray + tempVar2 * 4));\n      tempVar2 = tempVar2 + 1;\n      *pointer5 = finalResult;\n      pointer5 = pointer5 + 1;\n    } while (tempVar2 != tempVar5);\n  }\nLAB_0800a626:\n  pointer3 = (undefined4 *)(inputArray + -8);\n  if (-1 < tempVar1) {\n    pointer6 = &tempVar8 + totalIterations;\n    tempVar2 = innerCounter;\n    pointer5 = &tempVar9;\n    do {\n      if (innerCounter < 0) {\n        finalResult = 0;\n      }\n      else {\n        finalResult = 0;\n        pointer7 = pointer3;\n        pointer19 = pointer6;\n        do {\n          pointer18 = pointer7 + 2;\n          tempVar6 = calculate_result_08008640(*pointer18,pointer7[3],*(undefined4 *)(pointer19 + -1),\n                                *(undefined4 *)((int)pointer19 + -4));\n          finalResult = calculate_sum_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempVar6,\n                                (int)((ulonglong)tempVar6 >> 0x20));\n          pointer7 = pointer18;\n          pointer19 = pointer19 + -1;\n        } while (pointer18 != pointer3 + totalIterations * 2);\n      }\n      tempVar2 = tempVar2 + 1;\n      *pointer5 = finalResult;\n      pointer6 = pointer6 + 1;\n      pointer5 = pointer5 + 1;\n    } while (tempVar2 != tempVar1 + totalIterations);\n  }\n  tempArray2[0] = shiftedArray + tempVar1 + -1;\n  tempVar2 = tempVar1;\n  do {\n    finalResult = CONCAT44(*(undefined4 *)((int)&tempVar9 + tempVar2 * 8 + 4),\n                      *(undefined4 *)(&tempVar9 + tempVar2));\n    if (0 < tempVar2) {\n      pointer5 = &tempVar9 + tempVar2;\n      pointer2 = shiftedArray;\n      do {\n        shiftedValue = (undefined4)((ulonglong)finalResult >> 0x20);\n        calculate_result_08008640((int)finalResult,shiftedValue,0,0x3e700000);\n        extract_integer_08008ba0();\n        tempVar6 = bitwise_shift_0800856c();\n        upperValue = (undefined4)((ulonglong)tempVar6 >> 0x20);\n        tempVar7 = calculate_result_08008640((int)tempVar6,upperValue,0,0x41700000);\n        calculate_result_080082d0((int)finalResult,shiftedValue,(int)tempVar7,(int)((ulonglong)tempVar7 >> 0x20));\n        result = extract_integer_08008ba0();\n        pointer6 = pointer5 + -1;\n        shiftedValue = *(undefined4 *)pointer6;\n        innerResult = *(undefined4 *)((int)pointer5 + -4);\n        *pointer2 = result;\n        finalResult = calculate_sum_080082d4((int)tempVar6,upperValue,shiftedValue,innerResult);\n        pointer5 = pointer6;\n        pointer2 = pointer2 + 1;\n      } while (pointer6 != &tempVar9);\n    }\n    finalResult = calculate_final_result_0800b2e8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),shiftedLength);\n    upperValue = (undefined4)((ulonglong)finalResult >> 0x20);\n    calculate_result_08008640((int)finalResult,upperValue,0,0x3fc00000);\n    tempVar6 = calculate_result_080094c0();\n    tempVar6 = calculate_result_08008640((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0,0x40200000);\n    finalResult = calculate_result_080082d0((int)finalResult,upperValue,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n    result = extract_integer_08008ba0();\n    tempVar6 = bitwise_shift_0800856c();\n    finalResult = calculate_result_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempVar6,\n                          (int)((ulonglong)tempVar6 >> 0x20));\n    shiftedValue = (undefined4)((ulonglong)finalResult >> 0x20);\n    upperValue = (undefined4)finalResult;\n    if (shiftedLength < 1) {\n      if (shiftedLength == 0) {\n        tempVar5 = (int)shiftedArray[tempVar2 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      tempVar5 = validate_inputs_08008b4c(upperValue,shiftedValue,0,0x3fe00000);\n      if (tempVar5 != 0) {\n        result = result + 1;\n        if (tempVar2 < 1) {\n          finalResult = calculate_result_080082d0(0,0x3ff00000,upperValue,shiftedValue);\n          tempVar5 = 2;\n          goto LAB_0800a7a4;\n        }\n        tempVar5 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      counter = (int)shiftedArray[tempVar2 + -1] >> (0x18U - shiftedLength & 0xff);\n      extractedValue = shiftedArray[tempVar2 + -1] - (counter << (0x18U - shiftedLength & 0xff));\n      tempVar5 = (int)extractedValue >> (0x17U - shiftedLength & 0xff);\n      shiftedArray[tempVar2 + -1] = extractedValue;\n      result = result + counter;\njoined_r0x0800a8b8:\n      if (0 < tempVar5) {\n        result = result + 1;\n        if (tempVar2 < 1) {\n          flag1 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (shiftedArray[0] == 0) {\n            flag1 = false;\n            if (tempVar2 != 1) {\n              pointer2 = shiftedArray;\n              counter = 1;\n              do {\n                pointer2 = pointer2 + 1;\n                if (*pointer2 != 0) {\n                  tempCounter = counter + 1;\n                  extractedValue = *pointer2;\n                  goto LAB_0800a8e2;\n                }\n                counter = counter + 1;\n              } while (counter != tempVar2);\n              flag1 = false;\n            }\n          }\n          else {\n            tempCounter = 1;\n            counter = 0;\n            extractedValue = shiftedArray[0];\nLAB_0800a8e2:\n            shiftedArray[counter] = 0x1000000 - extractedValue;\n            if (tempCounter < tempVar2) {\n              extractedValue = shiftedArray[tempCounter];\n              pointer2 = shiftedArray + tempCounter;\n              while( true ) {\n                pointer4 = pointer2 + 1;\n                *pointer2 = 0xffffff - extractedValue;\n                if (pointer4 == shiftedArray + tempVar2) break;\n                extractedValue = *pointer4;\n                pointer2 = pointer4;\n              }\n            }\n            flag1 = true;\n          }\n        }\n        if (0 < shiftedLength) {\n          if (shiftedLength == 1) {\n            shiftedArray[tempVar2 + -1] = shiftedArray[tempVar2 + -1] & 0x7fffff;\n          }\n          else if (shiftedLength == 2) {\n            shiftedArray[tempVar2 + -1] = shiftedArray[tempVar2 + -1] & 0x3fffff;\n          }\n        }\n        if (tempVar5 == 2) {\n          finalResult = calculate_result_080082d0(0,0x3ff00000,upperValue,shiftedValue);\n          if (flag1) {\n            tempVar6 = calculate_final_result_0800b2e8(0,0x3ff00000,shiftedLength);\n            finalResult = calculate_result_080082d0((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempVar6,\n                                  (int)((ulonglong)tempVar6 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    upperValue = (undefined4)((ulonglong)finalResult >> 0x20);\n    counter = validate_parameters_08008b10((int)finalResult,upperValue,0,0);\n    if (counter == 0) {\n      finalResult = calculate_final_result_0800b2e8((int)finalResult,upperValue,-shiftedLength);\n      shiftedValue = (undefined4)((ulonglong)finalResult >> 0x20);\n      upperValue = (undefined4)finalResult;\n      innerCounter = validate_inputs_08008b4c(upperValue,shiftedValue,0,0x41700000);\n      if (innerCounter == 0) {\n        extractedValue = extract_integer_08008ba0(upperValue,shiftedValue);\n        shiftedArray[tempVar2] = extractedValue;\n        counter = tempVar2;\n      }\n      else {\n        calculate_result_08008640(upperValue,shiftedValue,0,0x3e700000);\n        extractedValue = extract_integer_08008ba0();\n        finalResult = bitwise_shift_0800856c();\n        finalResult = calculate_result_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0,0x41700000);\n        calculate_result_080082d0(upperValue,shiftedValue,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n        tempVar = extract_integer_08008ba0();\n        shiftedLength = shiftedLength + 0x18;\n        shiftedArray[tempVar2] = tempVar;\n        shiftedArray[tempVar2 + 1] = extractedValue;\n        counter = tempVar2 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    counter = tempVar2 + -1;\n    if (tempVar1 <= counter) {\n      extractedValue = 0;\n      pointer2 = shiftedArray + tempVar2 + 0x3fffffff;\n      do {\n        pointer4 = pointer2 + -1;\n        extractedValue = extractedValue | *pointer2;\n        pointer2 = pointer4;\n      } while (pointer4 != tempArray2[0]);\n      if (extractedValue != 0) break;\n    }\n    if (shiftedArray[tempVar1 + -1] == 0) {\n      tempCounter1 = 1;\n      ppuVar7 = tempArray2 + tempVar1;\n      do {\n        pointer2 = *ppuVar7;\n        tempCounter1 = tempCounter1 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (pointer2 == (uint *)0x0);\n      tempCounter1 = tempVar2 + tempCounter1;\n    }\n    else {\n      tempCounter1 = tempVar2 + 1;\n    }\n    tempVar5 = tempVar2 + 1;\n    pointer7 = (undefined4 *)(calculationArray + (tempVar5 + shiftedIterations + 0x3fffffff) * 4);\n    pointer5 = &tempVar8 + tempVar2 + totalIterations;\n    tempArray1 = &tempVar9 + tempVar5;\n    do {\n      pointer7 = pointer7 + 1;\n      finalResult = bitwise_shift_0800856c(*pointer7);\n      *pointer5 = finalResult;\n      pointer6 = pointer5 + 1;\n      if (innerCounter < 0) {\n        tempVar6 = 0;\n      }\n      else {\n        tempVar6 = 0;\n        pointer18 = pointer3;\n        while( true ) {\n          pointer5 = pointer5 + -1;\n          pointer1 = pointer18 + 2;\n          finalResult = calculate_result_08008640((int)finalResult,(int)((ulonglong)finalResult >> 0x20),*pointer1,pointer18[3]);\n          tempVar6 = calculate_sum_080082d4((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),(int)finalResult,\n                                (int)((ulonglong)finalResult >> 0x20));\n          if (pointer1 == pointer3 + totalIterations * 2) break;\n          finalResult = *pointer5;\n          pointer18 = pointer1;\n        }\n      }\n      *tempArray1 = tempVar6;\n      tempVar5 = tempVar5 + 1;\n      tempVar2 = tempCounter1;\n      pointer5 = pointer6;\n      tempArray1 = tempArray1 + 1;\n    } while (tempVar5 <= tempCounter1);\n  } while( true );\n  shiftedLength = shiftedLength + -0x18;\n  if (shiftedArray[counter] == 0) {\n    pointer2 = shiftedArray + tempVar2 + 0x3ffffffe;\n    do {\n      extractedValue = *pointer2;\n      counter = counter + -1;\n      shiftedLength = shiftedLength + -0x18;\n      pointer2 = pointer2 + -1;\n    } while (extractedValue == 0);\n  }\nLAB_0800a9f6:\n  finalResult = calculate_final_result_0800b2e8(0,0x3ff00000,shiftedLength);\n  if (counter < 0) {\n    if (2 < shiftAmount) {\n      if (shiftAmount == 3) {\n        finalResult = 0;\nLAB_0800abe4:\n        if (tempVar5 == 0) {\n          *tempArray2[1] = (undefined4)calculationResult;\n          *(int *)((int)tempArray2[1] + 4) = calculationResult._4_4_;\n          *(undefined8 *)((int)tempArray2[1] + 0x10) = finalResult;\n          *(int *)((int)tempArray2[1] + 8) = inputResult[0];\n          *(int *)((int)tempArray2[1] + 0xc) = inputResult[1];\n          return result & 7;\n        }\n        *(int *)((int)tempArray2[1] + 0x10) = (int)finalResult;\n        *(int *)((int)tempArray2[1] + 8) = inputResult[0];\n        *(int *)((int)tempArray2[1] + 0x14) = (int)((ulonglong)finalResult >> 0x20) + -0x80000000;\n        *(int *)((int)tempArray2[1] + 4) = calculationResult._4_4_ + -0x80000000;\n        *(int *)((int)tempArray2[1] + 0xc) = inputResult[1] + -0x80000000;\n        *tempArray2[1] = (undefined4)calculationResult;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (shiftAmount < 1) {\n      if (shiftAmount != 0) goto LAB_0800ab0e;\n      finalResult = 0;\nLAB_0800aafc:\n      innerCounter = (int)((ulonglong)finalResult >> 0x20);\n      if (tempVar5 != 0) {\n        innerCounter = innerCounter + -0x80000000;\n      }\n      *tempArray2[1] = (int)finalResult;\n      *(int *)((int)tempArray2[1] + 4) = innerCounter;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    finalResult = 0;\n  }\n  else {\n    pointer6 = &tempVar9 + counter;\n    pointer2 = shiftedArray + counter + 1;\n    pointer5 = &tempVar9 + counter + 1;\n    do {\n      upperValue = (undefined4)((ulonglong)finalResult >> 0x20);\n      pointer2 = pointer2 + -1;\n      tempVar6 = bitwise_shift_0800856c(*pointer2);\n      tempVar6 = calculate_result_08008640((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),(int)finalResult,upperValue);\n      pointer5 = pointer5 + -1;\n      *pointer5 = tempVar6;\n      finalResult = calculate_result_08008640((int)finalResult,upperValue,0,0x3e700000);\n    } while (pointer2 != shiftedArray);\n    innerCounter = 0;\n    do {\n      if (tempVar1 < 0) {\n        finalResult = 0;\n      }\n      else {\n        upperValue = 0x40000000;\n        shiftedValue = 0x3ff921fb;\n        finalResult = 0;\n        tempVar2 = 0;\n        pointer5 = pointer6;\n        pointer3 = &DAT_0800c028;\n        while( true ) {\n          tempVar6 = calculate_result_08008640(*(undefined4 *)pointer5,*(undefined4 *)((int)pointer5 + 4),upperValue,shiftedValue\n                               );\n          finalResult = calculate_sum_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempVar6,\n                                (int)((ulonglong)tempVar6 >> 0x20));\n          tempVar2 = tempVar2 + 1;\n          if ((tempVar1 < tempVar2) || (innerCounter < tempVar2)) break;\n          upperValue = *pointer3;\n          shiftedValue = pointer3[1];\n          pointer5 = pointer5 + 1;\n          pointer3 = pointer3 + 2;\n        }\n      }\n      flag1 = innerCounter != counter;\n      *(int *)(&calculationResult + innerCounter) = (int)finalResult;\n      *(int *)((int)&calculationResult + (innerCounter * 2 + 1) * 4) = (int)((ulonglong)finalResult >> 0x20);\n      pointer6 = pointer6 + -1;\n      innerCounter = innerCounter + 1;\n    } while (flag1);\n    if (2 < shiftAmount) {\n      if (shiftAmount == 3) {\n        if (counter != 0) {\n          pointer5 = &calculationResult + counter;\n          finalResult = CONCAT44(*(undefined4 *)((int)&calculationResult + (counter * 2 + 1) * 4),\n                            *(undefined4 *)pointer5);\n          do {\n            shiftedValue = (undefined4)((ulonglong)finalResult >> 0x20);\n            upperValue = (undefined4)finalResult;\n            innerResult = *(undefined4 *)(pointer5 + -1);\n            tempVar4 = *(undefined4 *)((int)pointer5 + -4);\n            finalResult = calculate_sum_080082d4(upperValue,shiftedValue,innerResult,tempVar4);\n            tempVar6 = calculate_result_080082d0(innerResult,tempVar4,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n            tempVar6 = calculate_sum_080082d4((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),upperValue,shiftedValue);\n            *pointer5 = tempVar6;\n            pointer5 = pointer5 + -1;\n            *pointer5 = finalResult;\n          } while (&calculationResult != pointer5);\n          if (1 < counter) {\n            pointer5 = &calculationResult + counter;\n            finalResult = CONCAT44(*(undefined4 *)((int)&calculationResult + (counter * 2 + 1) * 4),\n                              *(undefined4 *)pointer5);\n            do {\n              shiftedValue = (undefined4)((ulonglong)finalResult >> 0x20);\n              upperValue = (undefined4)finalResult;\n              innerResult = *(undefined4 *)(pointer5 + -1);\n              tempVar4 = *(undefined4 *)((int)pointer5 + -4);\n              finalResult = calculate_sum_080082d4(upperValue,shiftedValue,innerResult,tempVar4);\n              tempVar6 = calculate_result_080082d0(innerResult,tempVar4,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n              tempVar6 = calculate_sum_080082d4((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),upperValue,shiftedValue);\n              *pointer5 = tempVar6;\n              pointer5 = pointer5 + -1;\n              *pointer5 = finalResult;\n            } while (&calculationResult + 1 != pointer5);\n            finalResult = 0;\n            pointer5 = &calculationResult + counter + 1;\n            do {\n              pointer6 = pointer5 + -1;\n              finalResult = calculate_sum_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),\n                                    *(undefined4 *)pointer6,*(undefined4 *)((int)pointer5 + -4));\n              pointer5 = pointer6;\n            } while (&calculationResult + 2 != pointer6);\n            goto LAB_0800abe4;\n          }\n        }\n        finalResult = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (shiftAmount < 1) {\n      if (shiftAmount != 0) goto LAB_0800ab0e;\n      finalResult = 0;\n      pointer5 = &calculationResult + counter + 1;\n      do {\n        pointer6 = pointer5 + -1;\n        finalResult = calculate_sum_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),*(undefined4 *)pointer6,\n                              *(undefined4 *)((int)pointer5 + -4));\n        pointer5 = pointer6;\n      } while (&calculationResult != pointer6);\n      goto LAB_0800aafc;\n    }\n    finalResult = 0;\n    pointer5 = &calculationResult + counter + 1;\n    do {\n      pointer6 = pointer5 + -1;\n      finalResult = calculate_sum_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),*(undefined4 *)pointer6,\n                            *(undefined4 *)((int)pointer5 + -4));\n      pointer5 = pointer6;\n    } while (&calculationResult != pointer6);\n  }\n  innerCounter = (int)((ulonglong)finalResult >> 0x20);\n  upperValue = (undefined4)finalResult;\n  if (tempVar5 == 0) {\n    *(undefined8 *)tempArray2[1] = finalResult;\n    finalResult = calculate_result_080082d0((undefined4)calculationResult,calculationResult._4_4_,upperValue,innerCounter);\n    if (counter < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    innerCounter = 1;\n    pointer5 = &calculationResult;\n    do {\n      finalResult = calculate_sum_080082d4((int)finalResult,(int)((ulonglong)finalResult >> 0x20),\n                            *(undefined4 *)(pointer5 + 1),*(undefined4 *)((int)pointer5 + 0xc));\n      innerCounter = innerCounter + 1;\n      pointer5 = pointer5 + 1;\n    } while (innerCounter <= counter);\n    if (tempVar5 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *tempArray2[1] = upperValue;\n    *(int *)((int)tempArray2[1] + 4) = innerCounter + -0x80000000;\n    finalResult = calculate_result_080082d0((undefined4)calculationResult,calculationResult._4_4_,upperValue,innerCounter);\n    if (0 < counter) goto LAB_0800ad04;\n  }\n  finalResult = CONCAT44((int)((ulonglong)finalResult >> 0x20) + -0x80000000,(int)finalResult);\nLAB_0800ad26:\n  *(undefined8 *)((int)tempArray2[1] + 8) = finalResult;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "param_1": "inputArray",
                "param_2": "outputPointer",
                "param_3": "inputLength",
                "param_4": "totalIterations",
                "param_5": "shiftAmount",
                "param_6": "calculationArray",
                "puVar1": "pointer1",
                "uVar2": "result",
                "uVar3": "tempVar",
                "iVar4": "counter",
                "puVar5": "pointer2",
                "uVar6": "shiftedValue",
                "uVar8": "upperValue",
                "iVar9": "innerCounter",
                "puVar10": "pointer3",
                "uVar11": "innerResult",
                "uVar12": "extractedValue",
                "puVar13": "pointer4",
                "iVar14": "tempCounter",
                "iVar15": "tempVar1",
                "iVar17": "tempVar2",
                "puVar16": "pointer5",
                "uVar20": "tempVar4",
                "iVar21": "tempVar5",
                "puVar22": "pointer6",
                "puVar23": "pointer7",
                "bVar24": "flag1",
                "uVar25": "tempVar6",
                "uVar26": "finalResult",
                "uVar27": "tempVar7",
                "local_284": "tempArray1",
                "local_280": "tempCounter1",
                "local_270": "shiftedLength",
                "local_26c": "shiftedIterations",
                "local_260": "tempArray2",
                "local_258": "shiftedArray",
                "uStack_208": "tempVar8",
                "local_168": "calculationResult",
                "local_160": "inputResult",
                "uStack_c8": "tempVar9"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_result_0800adf0",
            "code": "\nundefined4\ncalculate_result_0800adf0(undefined4 input_value,uint flag,undefined4 param_1,undefined4 param_2,int reverse_flag)\n\n{\n  int extracted_integer;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined8 temp_result;\n  undefined8 temp_result2;\n  \n  if (((flag & 0x7fffffff) < 0x3e400000) && (extracted_integer = extract_integer_08008ba0(), extracted_integer == 0)) {\n    return input_value;\n  }\n  temp_result = calculate_result_0800adf0_08008640(input_value,flag,input_value);\n  result3 = (undefined4)((ulonglong)temp_result >> 0x20);\n  result2 = (undefined4)temp_result;\n  temp_result = calculate_result_0800adf0_08008640(input_value,flag,result2,result3);\n  result4 = (undefined4)((ulonglong)temp_result >> 0x20);\n  result1 = (undefined4)temp_result;\n  temp_result = calculate_result_0800adf0_08008640(result2,result3,0x5acfd57c,0x3de5d93a);\n  temp_result = calculate_result_0800adf0_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_result = calculate_result_0800adf0_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result2,result3);\n  temp_result = calculate_sum_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_result = calculate_result_0800adf0_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result2,result3);\n  temp_result = calculate_result_0800adf0_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_result = calculate_result_0800adf0_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result2,result3);\n  temp_result = calculate_sum_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x1110f8a6,0x3f811111);\n  result5 = (undefined4)((ulonglong)temp_result >> 0x20);\n  if (reverse_flag != 0) {\n    temp_result2 = calculate_result_0800adf0_08008640(param_1,param_2,0,0x3fe00000);\n    temp_result = calculate_result_0800adf0_08008640(result1,result4,(int)temp_result,result5);\n    temp_result = calculate_result_0800adf0_080082d0((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n    temp_result = calculate_result_0800adf0_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result2,result3);\n    temp_result = calculate_result_0800adf0_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),param_1,param_2);\n    temp_result2 = calculate_result_0800adf0_08008640(result1,result4,0x55555549,0x3fc55555);\n    temp_result = calculate_sum_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result2,\n                         (int)((ulonglong)temp_result2 >> 0x20));\n    result2 = calculate_result_0800adf0_080082d0(input_value,flag,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n    return result2;\n  }\n  temp_result = calculate_result_0800adf0_08008640(result2,result3,(int)temp_result,result5);\n  temp_result = calculate_result_0800adf0_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x55555549,0x3fc55555);\n  temp_result = calculate_result_0800adf0_08008640((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result1,result4);\n  result2 = calculate_sum_080082d4((int)temp_result,(int)((ulonglong)temp_result >> 0x20),input_value,flag);\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_1": "input_value",
                "param_2": "flag",
                "param_3": "param_1",
                "param_4": "param_2",
                "param_5": "reverse_flag",
                "iVar1": "extracted_integer",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "uVar7": "temp_result",
                "uVar8": "temp_result2"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_value_0800af78",
            "code": "\nint calculateValue_0800af78(int input1,uint input2)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  int result;\n  undefined4 temp5;\n  uint positiveInput2;\n  undefined8 temp6;\n  undefined8 temp7;\n  undefined4 localVar;\n  \n  temp6 = CONCAT44(input2,input1);\n  positiveInput2 = input2 & 0x7fffffff;\n  if (positiveInput2 < 0x44100000) {\n    if (positiveInput2 < 0x3fdc0000) {\n      if (positiveInput2 < 0x3e200000) {\n        temp7 = calculate_sum_080082d4(input1,input2,0x8800759c,0x7e37e43c);\n        result = check_if_null_08008b60_08008b60((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return input1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp6 = FUNC_0800b2cc();\n      temp4 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp1 = (undefined4)temp6;\n      if (positiveInput2 < 0x3ff30000) {\n        if (positiveInput2 < 0x3fe60000) {\n          temp6 = calculate_sum_080082d4(temp1,temp4,temp1,temp4);\n          temp6 = calculate_result_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,0x3ff00000);\n          temp7 = calculate_sum_080082d4(temp1,temp4,0,0x40000000);\n          temp6 = floating_point_conversion_08008894((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                               (int)((ulonglong)temp7 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp6 = calculate_result_080082d0(temp1,temp4,0,0x3ff00000);\n          temp7 = calculate_sum_080082d4(temp1,temp4,0,0x3ff00000);\n          temp6 = floating_point_conversion_08008894((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                               (int)((ulonglong)temp7 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (positiveInput2 < 0x40038000) {\n        temp6 = calculate_result_080082d0(temp1,temp4,0,0x3ff80000);\n        temp7 = calculate_result_08008640(temp1,temp4,0,0x3ff80000);\n        temp7 = calculate_sum_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3ff00000);\n        temp6 = floating_point_conversion_08008894((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                             (int)((ulonglong)temp7 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp6 = floating_point_conversion_08008894(0,0xbff00000,temp1,temp4);\n        result = 3;\n      }\n    }\n    localVar = (undefined4)((ulonglong)temp6 >> 0x20);\n    temp5 = (undefined4)temp6;\n    temp6 = calculate_result_08008640(temp5,localVar,temp5);\n    temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n    temp1 = (undefined4)temp6;\n    temp6 = calculate_result_08008640(temp1,temp2,temp1,temp2);\n    temp3 = (undefined4)((ulonglong)temp6 >> 0x20);\n    temp4 = (undefined4)temp6;\n    temp6 = calculate_result_08008640(temp4,temp3,0xe322da11,0x3f90ad3a);\n    temp6 = calculate_sum_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp6 = calculate_result_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,temp3);\n    temp6 = calculate_sum_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp6 = calculate_result_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,temp3);\n    temp6 = calculate_sum_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp6 = calculate_result_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,temp3);\n    temp6 = calculate_sum_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x920083ff,0x3fc24924);\n    temp6 = calculate_result_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp4,temp3);\n    temp6 = calculate_sum_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x5555550d,0x3fd55555);\n    temp6 = calculate_result_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp1,temp2);\n    temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n    temp7 = calculate_result_08008640(temp4,temp3,0x2c6a6c2f,0xbfa2b444);\n    temp7 = calculate_result_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp7 = calculate_result_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = calculate_result_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp7 = calculate_result_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = calculate_result_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp7 = calculate_result_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp7 = calculate_result_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp7 = calculate_result_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),temp4,temp3);\n    temp4 = (undefined4)((ulonglong)temp7 >> 0x20);\n    if (result == -1) {\n      temp6 = calculate_sum_080082d4((int)temp6,temp1,(int)temp7,temp4);\n      temp6 = calculate_result_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp5,localVar);\n      result = calculate_result_080082d0(temp5,localVar,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n      return result;\n    }\n    temp6 = calculate_sum_080082d4((int)temp6,temp1,(int)temp7,temp4);\n    temp6 = calculate_result_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp5,localVar);\n    temp6 = calculate_result_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + result * 8),\n                         *(undefined4 *)(&UNK_0800c094 + result * 8));\n    temp6 = calculate_result_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp5,localVar);\n    result = calculate_result_080082d0(*(undefined4 *)(&UNK_0800c070 + result * 8),\n                         *(undefined4 *)(&UNK_0800c074 + result * 8),(int)temp6,\n                         (int)((ulonglong)temp6 >> 0x20));\n    if ((int)input2 < 0) {\n      return result;\n    }\n  }\n  else {\n    if ((0x7ff00000 < positiveInput2) || ((positiveInput2 == 0x7ff00000 && (input1 != 0)))) {\n      result = calculate_sum_080082d4(input1,input2,input1);\n      return result;\n    }\n    result = 0x54442d18;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_value_0800af78",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "result",
                "uVar6": "temp5",
                "uVar7": "positiveInput2",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "calculate_shifted_value_0800b2d4",
            "code": "\nuint calculateShiftedValue_0800b2d4(undefined4 inputFlag,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "calculate_shifted_value_0800b2d4",
                "param_1": "inputFlag",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nvoid initialize_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_final_result_0800b2e8",
            "code": "\nuint calculate_final_result_0800b2e8(uint input1,uint input2,int modifier,undefined4 constant)\n\n{\n  uint shifted_input2;\n  int updated_modifier;\n  uint high_bits;\n  undefined8 concatenated_inputs;\n  \n  concatenated_inputs = CONCAT44(input2,input1);\n  shifted_input2 = (input2 << 1) >> 0x15;\n  if (shifted_input2 == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    concatenated_inputs = calculate_result(input1,input2,0,0x43500000);\n    if (modifier < -50000) goto LAB_0800b34a;\n    shifted_input2 = ((uint)((int)((ulonglong)concatenated_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input2 == 0x7ff) {\n    shifted_input2 = calculate_sum(input1,input2,input1,input2,constant);\n    return shifted_input2;\n  }\n  high_bits = (uint)((ulonglong)concatenated_inputs >> 0x20);\n  updated_modifier = shifted_input2 + modifier;\n  if (updated_modifier < 0x7ff) {\n    if (0 < updated_modifier) {\n      return (uint)concatenated_inputs;\n    }\n    if (updated_modifier + 0x35 < 0 == SCARRY4(updated_modifier,0x35)) {\n      shifted_input2 = calculate_result((uint)concatenated_inputs,high_bits & 0x800fffff | (updated_modifier + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input2;\n    }\n    if (modifier < 0xc351) {\n      concatenated_inputs = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input2 = calculate_result((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input2;\n    }\n  }\n  shifted_input2 = calculate_result(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input2;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_final_result_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "modifier",
                "param_4": "constant",
                "uVar1": "shifted_input2",
                "iVar2": "updated_modifier",
                "uVar3": "high_bits",
                "uVar4": "concatenated_inputs",
                "calculate_result_08008640": "calculate_result",
                "calculate_sum_080082d4": "calculate_sum"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_data_from_address_0800b3dc",
            "code": "\nundefined4 get_data_from_address_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_data_from_address_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeFunctions_0800b3e8(void)\n\n{\n  int index;\n  code **functionPointers;\n  \n  FUNC_0800b5b0();\n  index = 0;\n  functionPointers = (code **)&DAT_0800c0b4;\n  do {\n    index = index + 1;\n    (**functionPointers)();\n    functionPointers = functionPointers + 1;\n  } while (index != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_functions_0800b3e8",
                "iVar1": "index",
                "ppcVar2": "functionPointers"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_memory_0800b430",
            "code": "\nvoid fillMemory_0800b430(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *dstPtr;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  undefined4 value32;\n  bool isCompleted;\n  \n  if (((uint)destination & 3) != 0) {\n    remainingSize = size - 1;\n    dstPtr = destination;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dstPtr + 1);\n      *(undefined *)dstPtr = value;\n      size = remainingSize;\n      if (((uint)destination & 3) == 0) break;\n      isCompleted = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      dstPtr = destination;\n      if (isCompleted) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dstPtr = destination + 4;\n      do {\n        dstPtr[-4] = value32;\n        dstPtr[-3] = value32;\n        dstPtr[-2] = value32;\n        dstPtr[-1] = value32;\n        dstPtr = dstPtr + 4;\n      } while (dstPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x20));\n      remainingSize = size & 0xc;\n      destination = destination + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remainingSize == 0) goto joined_r0x0800b4a8;\n    }\n    dstPtr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)destination);\n    do {\n      srcPtr = destination + 1;\n      *destination = value32;\n      destination = srcPtr;\n    } while (dstPtr != srcPtr);\n    size = size & 3;\n    destination = dstPtr;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    dstPtr = destination;\n    do {\n      srcPtr = (undefined4 *)((int)dstPtr + 1);\n      *(undefined *)dstPtr = value;\n      dstPtr = srcPtr;\n    } while ((undefined4 *)(size + (int)destination) != srcPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_memory_0800b430",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dstPtr",
                "puVar2": "srcPtr",
                "uVar3": "remainingSize",
                "uVar4": "value32",
                "bVar5": "isCompleted"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 updateData_0800b524(int updateType,undefined4 dataToAdd,undefined4 value1,undefined4 value2)\n\n{\n  undefined *dataPtr;\n  undefined4 result;\n  uint bitMask;\n  uint dataCount;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  dataCount = *(uint *)(DAT_20000168 + 4);\n  if ((int)dataCount < 0x20) {\n    if (updateType != 0) {\n      *(undefined4 *)(DAT_20000168 + dataCount * 4 + 0x88) = value1;\n      bitMask = 1 << (dataCount & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + dataCount * 4 + 0x108) = value2;\n      if (updateType == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    result = DAT_20000448;\n    *(uint *)(dataPtr + 4) = dataCount + 1;\n    *(undefined4 *)(dataPtr + (dataCount + 2) * 4) = dataToAdd;\n    FUNC_0800b520(result);\n    result = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "updateType",
                "param_2": "dataToAdd",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "bitMask",
                "uVar4": "dataCount"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 197074,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}