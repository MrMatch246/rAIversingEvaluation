{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 input)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_and_convert_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_and_convert_080001ac(undefined4 first_input,undefined4 second_input)\n\n{\n  return CONCAT44(second_input,first_input);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_and_convert_080001ac",
                "param_1": "first_input",
                "param_2": "second_input"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "stop_coolant_pump_080001f8",
            "code": "\nvoid stop_coolant_pump_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  coolant_stop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "stop_coolant_pump_080001f8"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "turn_off_coolant_system_08000210",
            "code": "\nvoid turn_off_coolant_system_08000210(void)\n\n{\n  turn_off_coolant_mist();\n  turn_off_coolant_flood();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "turn_off_coolant_system_08000210",
                "coolant_mist_off": "turn_off_coolant_mist",
                "coolant_flood_off": "turn_off_coolant_flood"
            },
            "calling": [
                "mc_reset",
                "coolant_run",
                "coolant_init"
            ],
            "called": [
                "coolant_flood_off",
                "coolant_mist_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "update_coolant_status_08000220",
            "code": "\nvoid updateCoolantStatus_08000220(char coolantStatus)\n\n{\n  if (coolantStatus != DAT_20000468) {\n    plan_synchronize();\n    if (coolantStatus == '\\x01') {\n      coolant_flood_on();\n      DAT_20000468 = coolantStatus;\n    }\n    else if (coolantStatus == '\\x02') {\n      coolant_mist_on();\n      DAT_20000468 = coolantStatus;\n    }\n    else {\n      coolant_stop();\n      DAT_20000468 = coolantStatus;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "update_coolant_status_08000220",
                "param_1": "coolantStatus"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "coolant_stop",
                "coolant_flood_on",
                "coolant_mist_on",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_time_delay_08000268",
            "code": "\n\n\nint calculateTimeDelay_08000268(void)\n\n{\n  int currentTick;\n  \n  currentTick = getCurrentTick();\n  return (currentTick + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_time_delay_08000268",
                "iVar1": "currentTick",
                "HAL_GetTick": "getCurrentTick"
            },
            "calling": [
                "_delay_us"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "delay_function_080002a0",
            "code": "\nvoid delayFunction_080002a0(undefined4 delayTime)\n\n{\n  HAL_Delay(delayTime);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "delay_function_080002a0",
                "param_1": "delayTime"
            },
            "calling": [
                "mc_dwell"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "wait_until_time_080002b6",
            "code": "\nvoid wait_until_time_080002b6(uint time_delay)\n\n{\n  uint current_usecs_high;\n  uint target_usecs_high;\n  bool is_target_reached;\n  longlong current_usecs;\n  undefined8 new_usecs;\n  \n  current_usecs = get_current_usecs();\n  target_usecs_high = (uint)(current_usecs + (ulonglong)time_delay >> 0x20);\n  do {\n    new_usecs = get_current_usecs();\n    current_usecs_high = (uint)((ulonglong)new_usecs >> 0x20);\n    is_target_reached = target_usecs_high <= current_usecs_high;\n    if (current_usecs_high == target_usecs_high) {\n      is_target_reached = (uint)(current_usecs + (ulonglong)time_delay) <= (uint)new_usecs;\n    }\n  } while (!is_target_reached);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "wait_until_time_080002b6",
                "param_1": "time_delay",
                "uVar1": "current_usecs_high",
                "uVar2": "target_usecs_high",
                "bVar3": "is_target_reached",
                "lVar4": "current_usecs",
                "uVar5": "new_usecs"
            },
            "calling": [],
            "called": [
                "get_current_usecs"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_data_080002f0",
            "code": "\nvoid initializeData_080002f0(void)\n\n{\n  memset(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "calling": [
                "eeprom_get_char",
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_eeprom_data_08000310",
            "code": "\nundefined getEEPROMData_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeEEPROM();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_eeprom_data_08000310",
                "param_1": "index",
                "eeprom_init": "initializeEEPROM"
            },
            "calling": [
                "memcpy_from_eeprom_with_checksum",
                "read_global_settings"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "write_to_eeprom_08000340",
            "code": "\nvoid writeToEEPROM_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeEEPROM();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "write_to_eeprom_08000340",
                "param_1": "index",
                "param_2": "value",
                "eeprom_init": "initializeEEPROM"
            },
            "calling": [
                "write_global_settings",
                "memcpy_to_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "calculate_and_store_checksum_08000374",
            "code": "\nvoid calculate_and_store_checksum_08000374(int data_starting_address,char *data_to_checksum,int data_length)\n\n{\n  int remaining_data_length;\n  char *current_data;\n  int current_address;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_data_length = data_length;\n  current_data = data_to_checksum;\n  current_address = data_starting_address;\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n    current_data = data_to_checksum;\n    current_address = data_starting_address;\n  }\n  for (; remaining_data_length != 0; remaining_data_length = remaining_data_length + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    eeprom_put_char(current_address,*current_data);\n    current_data = current_data + 1;\n    current_address = current_address + 1;\n  }\n  eeprom_put_char(current_address,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "calculate_and_store_checksum_08000374",
                "param_1": "data_starting_address",
                "param_2": "data_to_checksum",
                "param_3": "data_length",
                "local_1c": "remaining_data_length",
                "local_18": "current_data",
                "local_14": "current_address",
                "local_9": "checksum"
            },
            "calling": [
                "settings_store_startup_line",
                "write_global_settings",
                "settings_write_coord_data"
            ],
            "called": [
                "eeprom_init",
                "eeprom_put_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_eeprom_data_080003ec",
            "code": "\nbool check_eeprom_data_080003ec(char *data_buffer,int start_index,int length)\n\n{\n  char current_char;\n  uint expected_char;\n  int remaining_length;\n  int current_index;\n  char *current_dest;\n  byte char_sum;\n  \n  char_sum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_dest = data_buffer;\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n    current_index = start_index;\n    current_dest = data_buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_char = eeprom_get_char(current_index);\n    char_sum = current_char + (char_sum != 0);\n    *current_dest = current_char;\n    current_index = current_index + 1;\n    current_dest = current_dest + 1;\n  }\n  expected_char = eeprom_get_char(current_index);\n  return char_sum == expected_char;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_eeprom_data_080003ec",
                "param_1": "data_buffer",
                "param_2": "start_index",
                "param_3": "length",
                "cVar1": "current_char",
                "uVar2": "expected_char",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_dest",
                "local_9": "char_sum"
            },
            "calling": [
                "settings_read_coord_data",
                "settings_read_startup_line",
                "read_global_settings"
            ],
            "called": [
                "eeprom_init",
                "eeprom_get_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_data_08000478",
            "code": "\nvoid initializeData_08000478(undefined data1,undefined data2,undefined data3)\n\n{\n  DAT_20000e89 = data1;\n  DAT_20000e8a = data2;\n  DAT_20000e8b = data3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_data_08000478",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3"
            },
            "calling": [
                "gc_execute_line",
                "gc_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_graphics_080004ac",
            "code": "\nvoid initializeGraphics_080004ac(void)\n\n{\n  int result;\n  \n  memset(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  select_plane(0,1,2);\n  DAT_20000e74 = 1;\n  result = settings_read_coord_data(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    report_status_message(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_graphics_080004ac",
                "iVar1": "result"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "select_plane",
                "settings_read_coord_data",
                "report_status_message",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_divisions_080004fc",
            "code": "\nvoid calculateDivisions_080004fc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 convertedValue;\n  \n  convertedValue = __floatsisf(input1);\n  DAT_20000e7c = __aeabi_fdiv(convertedValue,DAT_20000ebc);\n  convertedValue = __floatsisf(input2);\n  DAT_20000e80 = __aeabi_fdiv(convertedValue,DAT_20000ec0);\n  convertedValue = __floatsisf(input3);\n  DAT_20000e84 = __aeabi_fdiv(convertedValue,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_divisions_080004fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "convertedValue"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "convert_to_float_0800056c",
            "code": "\nundefined4 convertToFloat_0800056c(undefined4 inputValue)\n\n{\n  undefined8 convertedValue;\n  \n  if (DAT_20000e73 != '\\0') {\n    convertedValue = __aeabi_f2d(inputValue);\n    convertedValue = __muldf3((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20),0x66666666,0x40396666);\n    inputValue = __truncdfsf2((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "convert_to_float_0800056c",
                "param_1": "inputValue",
                "uVar1": "convertedValue"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__truncdfsf2",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_binary_080005b4",
            "code": "\nchar processBinary_080005b4(undefined4 inputData)\n\n{\n  int returnValue;\n  undefined4 tempVar1;\n  char status;\n  uint tempVar2;\n  undefined4 tempVar3;\n  undefined8 tempVar4;\n  undefined8 tempVar5;\n  undefined8 tempVar6;\n  undefined4 tempArray1 [4];\n  undefined4 tempVar7;\n  undefined4 tempVar8;\n  undefined4 tempVar9;\n  undefined4 tempVar10;\n  undefined4 tempVar11;\n  undefined4 tempArray2 [6];\n  undefined4 tempVar12;\n  byte tempVar13;\n  undefined tempVar14;\n  undefined4 tempVar15;\n  undefined4 tempVar16;\n  undefined tempVar17;\n  uint tempVar18;\n  byte tempVar19;\n  byte tempVar20;\n  byte tempVar21;\n  byte tempVar22;\n  char tempVar23;\n  uint tempVar24;\n  undefined4 tempVar25;\n  sbyte tempVar26;\n  char tempVar27;\n  char tempVar28;\n  undefined4 tempVar29;\n  byte tempVar30;\n  ushort tempVar31;\n  uint tempVar32;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    status = '\\f';\n  }\n  else {\n    tempVar14 = 0;\n    tempVar31 = 0;\n    tempVar30 = 0;\n    tempVar29 = 0xbf800000;\n    tempVar28 = '\\0';\n    tempVar27 = '\\0';\n    memset(tempArray2 + 3,0,0xc);\n    memset(tempArray2,0,0xc);\n    DAT_20000e70 = '\\0';\n    tempVar26 = 0;\n    while (returnValue = next_statement(&tempVar13,tempArray2 + 6,inputData,&tempVar14), returnValue != 0) {\n      tempVar4 = __aeabi_f2d(tempVar12);\n      tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n      tempVar32 = __aeabi_d2iz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n      if (tempVar13 == 0x47) {\n        switch(tempVar32) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          tempVar26 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          tempVar26 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          tempVar26 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          tempVar26 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          tempVar26 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          tempVar26 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          tempVar26 = 6;\n        }\n        switch(tempVar32) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          tempVar27 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          tempVar27 = '\\x02';\n          break;\n        case 0x11:\n          select_plane(0,1,2);\n          break;\n        case 0x12:\n          select_plane(2,0,1);\n          break;\n        case 0x13:\n          select_plane(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          tempVar1 = __aeabi_fmul(tempVar12,0x41200000);\n          tempVar4 = __aeabi_f2d(tempVar1);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          tempVar32 = __aeabi_d2iz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          switch(tempVar32) {\n          case 0x118:\n            tempVar27 = '\\x03';\n            break;\n          case 0x119:\n            tempVar27 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            tempVar27 = '\\x05';\n            break;\n          case 0x12d:\n            tempVar27 = '\\x06';\n          }\n          break;\n        case 0x35:\n          tempVar28 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)tempVar32 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          tempVar1 = __aeabi_fmul(tempVar12,0x41200000);\n          tempVar4 = __aeabi_f2d(tempVar1);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          tempVar32 = __aeabi_d2iz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          if (tempVar32 == 0x398) {\n            tempVar27 = '\\a';\n          }\n          else if (tempVar32 == 0x399) {\n            tempVar27 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (tempVar13 == 0x4d) {\n        if (tempVar32 == 0x1e) {\nLAB_08000b96:\n          tempVar26 = 5;\n        }\n        else if ((int)tempVar32 < 0x1f) {\n          if ((int)tempVar32 < 3) {\n            if (-1 < (int)tempVar32) goto LAB_08000b96;\n          }\n          else if (tempVar32 - 3 < 3) {\n            tempVar26 = 8;\n          }\n        }\n        switch(tempVar32) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (tempVar26 != 0) {\n        if (((int)(uint)tempVar31 >> tempVar26 & 1U) == 0) {\n          tempVar31 = tempVar31 | (ushort)(1 << tempVar26);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        tempVar26 = 0;\n      }\n    }\n    status = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      tempVar25 = 0;\n      tempVar24 = 0;\n      tempVar23 = '\\0';\n      tempVar14 = 0;\nswitchD_08000d18_caseD_47:\n      returnValue = next_statement(&tempVar13,tempArray2 + 6,inputData,&tempVar14);\n      if (returnValue != 0) {\n        switch(tempVar13) {\n        case 0x46:\n          returnValue = __aeabi_fcmple(tempVar12,0);\n          if (returnValue != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = to_millimeters(tempVar12);\n          }\n          else {\n            tempVar29 = to_millimeters(tempVar12);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          tempVar2 = (uint)tempVar13;\n          tempVar1 = to_millimeters(tempVar12);\n          tempArray2[tempVar2 - 0x49] = tempVar1;\n          break;\n        case 0x4c:\n          tempVar4 = __aeabi_f2d(tempVar12);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          tempVar23 = __aeabi_d2uiz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          break;\n        case 0x50:\n          tempVar25 = tempVar12;\n          break;\n        case 0x52:\n          tempVar24 = to_millimeters(tempVar12);\n          break;\n        case 0x53:\n          returnValue = __aeabi_fcmplt(tempVar12,0);\n          if (returnValue != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          returnValue = __aeabi_fcmplt(tempVar12,0);\n          if (returnValue != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          tempVar4 = __aeabi_f2d(tempVar12);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          DAT_20000e88 = __aeabi_d2uiz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          break;\n        case 0x58:\n          tempArray2[3] = to_millimeters(tempVar12);\n          tempVar30 = tempVar30 | 1;\n          break;\n        case 0x59:\n          tempArray2[4] = to_millimeters(tempVar12);\n          tempVar30 = tempVar30 | 2;\n          break;\n        case 0x5a:\n          tempArray2[5] = to_millimeters(tempVar12);\n          tempVar30 = tempVar30 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      status = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          spindle_run((int)DAT_20000e76);\n          coolant_run(DAT_20000e77);\n        }\n        if ((tempVar31 & 0x200) != 0) {\n          returnValue = settings_read_coord_data(DAT_20000e8c,&tempVar9);\n          if (returnValue == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = tempVar9;\n          DAT_20000e94 = tempVar10;\n          DAT_20000e98 = tempVar11;\n        }\n        switch(tempVar27) {\n        case '\\x01':\n          returnValue = __aeabi_fcmplt(tempVar25,0);\n          if (returnValue == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              mc_dwell(tempVar25);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          tempVar4 = __aeabi_f2d(tempVar25);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          tempVar32 = __aeabi_d2iz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          if ((((tempVar23 == '\\x02') || (tempVar23 == '\\x14')) && (-1 < (int)tempVar32)) &&\n             ((int)tempVar32 < 7)) {\n            if ((tempVar30 == 0) && (tempVar23 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)tempVar32 < 1) {\n                tempVar32 = (uint)DAT_20000e8c;\n              }\n              else {\n                tempVar32 = tempVar32 - 1;\n              }\n              returnValue = settings_read_coord_data(tempVar32 & 0xff,tempArray1);\n              if (returnValue == 0) {\n                return '\\n';\n              }\n              for (tempVar22 = 0; tempVar22 < 3; tempVar22 = tempVar22 + 1) {\n                if (((int)(uint)tempVar30 >> tempVar22 & 1U) != 0) {\n                  if (tempVar23 == '\\x14') {\n                    tempVar2 = (uint)tempVar22;\n                    tempVar1 = __aeabi_fsub(*(undefined4 *)(&DAT_20000e74 + (tempVar22 + 2) * 4),\n                                         tempArray2[tempVar22 + 3]);\n                    tempArray1[tempVar2] = tempVar1;\n                  }\n                  else {\n                    tempArray1[tempVar22] = tempArray2[tempVar22 + 3];\n                  }\n                }\n              }\n              settings_write_coord_data(tempVar32 & 0xff,tempArray1);\n              if (tempVar32 == DAT_20000e8c) {\n                DAT_20000e90 = tempArray1[0];\n                DAT_20000e94 = tempArray1[1];\n                DAT_20000e98 = tempArray1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          tempVar30 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (tempVar30 != 0) {\n            for (tempVar21 = 0; tempVar21 < 3; tempVar21 = tempVar21 + 1) {\n              if (((int)(uint)tempVar30 >> tempVar21 & 1U) == 0) {\n                tempArray2[tempVar21 + 3] = *(undefined4 *)(&DAT_20000e74 + (tempVar21 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                tempVar2 = (uint)tempVar21;\n                tempVar1 = __addsf3(tempArray2[tempVar21 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (tempVar21 + 2) * 4));\n                tempArray2[tempVar2 + 3] = tempVar1;\n              }\n              else {\n                tempVar3 = tempArray2[tempVar21 + 3];\n                tempVar1 = __addsf3(*(undefined4 *)(&DAT_20000e70 + (tempVar21 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (tempVar21 + 10) * 4));\n                tempVar2 = (uint)tempVar21;\n                tempVar1 = __addsf3(tempVar3,tempVar1);\n                tempArray2[tempVar2 + 3] = tempVar1;\n              }\n            }\n            mc_line(tempArray2[3],tempArray2[4],tempArray2[5],DAT_20000ed0,0);\n          }\n          if (tempVar27 == '\\x05') {\n            returnValue = settings_read_coord_data(7,tempArray1 + 3);\n            if (returnValue == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            returnValue = settings_read_coord_data(6,tempArray1 + 3);\n            if (returnValue == 0) {\n              return '\\n';\n            }\n          }\n          mc_line(tempArray1[3],tempVar7,tempVar8,DAT_20000ed0,0);\n          DAT_20000e7c = tempArray1[3];\n          DAT_20000e80 = tempVar7;\n          DAT_20000e84 = tempVar8;\n          tempVar30 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (tempVar27 == '\\x06') {\n            settings_write_coord_data(7,&DAT_20000e7c);\n          }\n          else {\n            settings_write_coord_data(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (tempVar30 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (tempVar20 = 0; tempVar20 < 3; tempVar20 = tempVar20 + 1) {\n              if (((int)(uint)tempVar30 >> tempVar20 & 1U) != 0) {\n                tempVar1 = __aeabi_fsub(*(undefined4 *)(&DAT_20000e74 + (tempVar20 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (tempVar20 + 8) * 4));\n                tempVar2 = (uint)tempVar20;\n                tempVar1 = __aeabi_fsub(tempVar1,tempArray2[tempVar20 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (tempVar2 + 10) * 4) = tempVar1;\n              }\n            }\n          }\n          tempVar30 = 0;\n          break;\n        case '\\b':\n          memset(&DAT_20000e9c,0,0xc);\n        }\n        if (((tempVar31 & 4) != 0) || (tempVar30 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((returnValue = __aeabi_fcmplt(tempVar29,0), returnValue != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((tempVar28 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (tempVar19 = 0; tempVar19 < 3; tempVar19 = tempVar19 + 1) {\n            if (((int)(uint)tempVar30 >> tempVar19 & 1U) == 0) {\n              tempArray2[tempVar19 + 3] = *(undefined4 *)(&DAT_20000e74 + (tempVar19 + 2) * 4);\n            }\n            else if (tempVar28 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                tempVar2 = (uint)tempVar19;\n                tempVar1 = __addsf3(tempArray2[tempVar19 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (tempVar19 + 2) * 4));\n                tempArray2[tempVar2 + 3] = tempVar1;\n              }\n              else {\n                tempVar3 = tempArray2[tempVar19 + 3];\n                tempVar1 = __addsf3(*(undefined4 *)(&DAT_20000e70 + (tempVar19 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (tempVar19 + 10) * 4));\n                tempVar2 = (uint)tempVar19;\n                tempVar1 = __addsf3(tempVar3,tempVar1);\n                tempArray2[tempVar2 + 3] = tempVar1;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (tempVar30 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              mc_line(tempArray2[3],tempArray2[4],tempArray2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (tempVar30 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              tempVar1 = tempVar29;\n              if (DAT_20000e72 == '\\0') {\n                tempVar1 = DAT_20000e78;\n              }\n              mc_line(tempArray2[3],tempArray2[4],tempArray2[5],tempVar1,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            tempVar30 = tempVar30 & ~(byte)(1 << DAT_20000e8b);\n            if ((tempVar30 == 0) ||\n               (((returnValue = __aeabi_fcmpeq(tempVar24,0), returnValue != 0 &&\n                 (returnValue = __aeabi_fcmpeq(tempArray2[DAT_20000e89],0), returnValue != 0)) &&\n                (returnValue = __aeabi_fcmpeq(tempArray2[DAT_20000e8a],0), returnValue != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              returnValue = __aeabi_fcmpeq(tempVar24,0);\n              if (returnValue == 0) {\n                tempVar16 = __aeabi_fsub(tempArray2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                tempVar15 = __aeabi_fsub(tempArray2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                memset(tempArray2,0,0xc);\n                tempVar1 = __aeabi_fmul(tempVar24,0x40800000);\n                tempVar1 = __aeabi_fmul(tempVar1,tempVar24);\n                tempVar3 = __aeabi_fmul(tempVar16,tempVar16);\n                tempVar1 = __aeabi_fsub(tempVar1,tempVar3);\n                tempVar3 = __aeabi_fmul(tempVar15,tempVar15);\n                tempVar18 = __aeabi_fsub(tempVar1,tempVar3);\n                returnValue = __aeabi_fcmplt(tempVar18,0);\n                if (returnValue != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                tempVar4 = __aeabi_f2d(tempVar18);\n                tempVar4 = sqrt((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n                tempVar5 = __aeabi_f2d(tempVar16);\n                tempVar6 = __aeabi_f2d(tempVar15);\n                tempVar5 = hypot((int)tempVar5,(int)((ulonglong)tempVar5 >> 0x20),(int)tempVar6,\n                              (int)((ulonglong)tempVar6 >> 0x20));\n                tempVar4 = __divdf3((int)tempVar4,(uint)((ulonglong)tempVar4 >> 0x20) ^ 0x80000000,(int)tempVar5\n                                 ,(int)((ulonglong)tempVar5 >> 0x20));\n                tempVar18 = __truncdfsf2((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  tempVar18 = tempVar18 ^ 0x80000000;\n                }\n                returnValue = __aeabi_fcmplt(tempVar24,0);\n                if (returnValue != 0) {\n                  tempVar18 = tempVar18 ^ 0x80000000;\n                  tempVar24 = tempVar24 ^ 0x80000000;\n                }\n                tempVar1 = __aeabi_fmul(tempVar15,tempVar18);\n                tempVar1 = __aeabi_fsub(tempVar16,tempVar1);\n                tempVar2 = (uint)DAT_20000e89;\n                tempVar1 = __aeabi_fmul(tempVar1,0x3f000000);\n                tempArray2[tempVar2] = tempVar1;\n                tempVar1 = __aeabi_fmul(tempVar16,tempVar18);\n                tempVar1 = __addsf3(tempVar1,tempVar15);\n                tempVar2 = (uint)DAT_20000e8a;\n                tempVar1 = __aeabi_fmul(tempVar1,0x3f000000);\n                tempArray2[tempVar2] = tempVar1;\n              }\n              else {\n                tempVar4 = __aeabi_f2d(tempArray2[DAT_20000e89]);\n                tempVar5 = __aeabi_f2d(tempArray2[DAT_20000e8a]);\n                tempVar4 = hypot((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20),(int)tempVar5,\n                              (int)((ulonglong)tempVar5 >> 0x20));\n                tempVar24 = __truncdfsf2((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n              }\n              tempVar17 = DAT_20000e71 == '\\x02';\n              tempVar1 = tempVar29;\n              if (DAT_20000e72 == '\\0') {\n                tempVar1 = DAT_20000e78;\n              }\n              mc_arc(&DAT_20000e7c,tempArray2 + 3,tempArray2,DAT_20000e89,DAT_20000e8a,DAT_20000e8b,\n                     tempVar1,DAT_20000e72,tempVar24,tempVar17);\n            }\n            break;\n          case '\\x04':\n            if (tempVar30 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = tempArray2[3];\n          DAT_20000e80 = tempArray2[4];\n          DAT_20000e84 = tempArray2[5];\n        }\n        status = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          plan_synchronize();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            mc_reset();\n            status = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            status = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_binary_080005b4",
                "param_1": "inputData",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "cVar3": "status",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "uVar6": "tempVar4",
                "uVar7": "tempVar5",
                "uVar8": "tempVar6",
                "local_94": "tempArray1",
                "local_84": "tempVar7",
                "local_80": "tempVar8",
                "local_7c": "tempVar9",
                "uStack_78": "tempVar10",
                "uStack_74": "tempVar11",
                "auStack_70": "tempArray2",
                "local_58": "tempVar12",
                "local_52": "tempVar13",
                "local_51": "tempVar14",
                "local_50": "tempVar15",
                "local_4c": "tempVar16",
                "local_45": "tempVar17",
                "local_44": "tempVar18",
                "local_3d": "tempVar19",
                "local_3c": "tempVar20",
                "local_3b": "tempVar21",
                "local_3a": "tempVar22",
                "local_39": "tempVar23",
                "local_38": "tempVar24",
                "local_34": "tempVar25",
                "local_2f": "tempVar26",
                "local_2e": "tempVar27",
                "local_2d": "tempVar28",
                "local_2c": "tempVar29",
                "local_27": "tempVar30",
                "local_26": "tempVar31",
                "local_24": "tempVar32"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "mc_line",
                "mc_arc",
                "__aeabi_fsub",
                "__aeabi_d2iz",
                "__addsf3",
                "next_statement",
                "__aeabi_d2uiz",
                "__aeabi_fcmplt",
                "__divdf3",
                "memset",
                "sqrt",
                "trunc",
                "__aeabi_fmul",
                "__aeabi_fcmple",
                "mc_dwell",
                "plan_synchronize",
                "__aeabi_f2d",
                "select_plane",
                "settings_read_coord_data",
                "mc_reset",
                "spindle_run",
                "to_millimeters",
                "hypot",
                "__truncdfsf2",
                "coolant_run",
                "settings_write_coord_data",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "validate_and_read_float_0800184c",
            "code": "\nundefined4 validateAndReadFloat_0800184c(byte *output,undefined4 size,int data,byte *index)\n\n{\n  int readStatus;\n  undefined4 returnValue;\n  \n  if (*(char *)(data + (uint)*index) == '\\0') {\n    returnValue = 0;\n  }\n  else {\n    *output = *(byte *)(data + (uint)*index);\n    if ((*output < 0x41) || (0x5a < *output)) {\n      DAT_20000e70 = 2;\n      returnValue = 0;\n    }\n    else {\n      *index = *index + 1;\n      readStatus = read_float(data,index,size);\n      if (readStatus == 0) {\n        DAT_20000e70 = 1;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 1;\n      }\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "validate_and_read_float_0800184c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "data",
                "param_4": "index",
                "iVar1": "readStatus",
                "uVar2": "returnValue"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "read_float"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_memory_value_080018cc",
            "code": "\n\n\nvoid updateMemoryValue_080018cc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_memory_value_080018cc",
                "param_1": "newValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_flags_080018fc",
            "code": "\n\n\nvoid updateFlags_080018fc(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_flags_080018fc",
                "param_1": "inputValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "check_bit_and_assign_0800192c",
            "code": "\nvoid checkBitAndAssign_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "check_bit_and_assign_0800192c"
            },
            "calling": [
                "settings_store_global_setting",
                "grbl_main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "handle_reset_condition_0800195c",
            "code": "\nvoid handleResetCondition_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    performReset();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "handle_reset_condition_0800195c",
                "mc_reset": "performReset"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_values_08001994",
            "code": "\nvoid calculateValues_08001994(byte flags,char flag1_enabled,char flag2_enabled,undefined4 param_value)\n\n{\n  undefined4 result1;\n  uint max_value;\n  undefined8 result2;\n  undefined8 result3;\n  byte local_flag;\n  uint val1;\n  uint val2;\n  uint val3;\n  ushort memory_value;\n  uint limit_value;\n  int calc_value1;\n  undefined4 truncated_value;\n  uint calc_value2;\n  uint debounce_value;\n  ushort updated_memory_value;\n  uint delay_value;\n  uint calc_value3;\n  int calc_value_difference;\n  int calc_value4;\n  int calc_value5;\n  int calc_value6;\n  ushort calc_value7;\n  uint limit_value2;\n  char calc_flag;\n  \n  calc_flag = '\\0';\n  memset(&val1,0,0xc);\n  if ((flags & 1) != 0) {\n    calc_flag = calc_flag + '\\x01';\n    result2 = __aeabi_f2d(DAT_20000ebc);\n    val1 = lround((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    calc_flag = calc_flag + '\\x01';\n    result2 = __aeabi_f2d(DAT_20000ec0);\n    val2 = lround((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    calc_flag = calc_flag + '\\x01';\n    result2 = __aeabi_f2d(DAT_20000ec4);\n    val3 = lround((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  max_value = val3;\n  if (val3 < val2) {\n    max_value = val2;\n  }\n  calc_value2 = val1;\n  if (val1 < max_value) {\n    calc_value2 = max_value;\n  }\n  result2 = __floatunsidf(calc_value2);\n  result3 = __floatunsidf(calc_flag);\n  result3 = sqrt((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result2 = __divdf3((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                   (int)((ulonglong)result3 >> 0x20));\n  truncated_value = __truncdfsf2((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = __aeabi_fmul(DAT_20000edc,truncated_value);\n  result1 = __aeabi_fdiv(result1,0x453b8000);\n  result2 = __aeabi_f2d(result1);\n  result2 = ceil((int)result2,(int)((ulonglong)result2 >> 0x20));\n  calc_value1 = __aeabi_d2uiz((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = __floatunsidf(calc_flag);\n  result2 = sqrt((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result3 = __aeabi_f2d(param_value);\n  result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                   (int)((ulonglong)result3 >> 0x20));\n  result1 = __truncdfsf2((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = __aeabi_fmul(truncated_value,result1);\n  result1 = __aeabi_fdiv(0x4c64e1c0,result1);\n  result2 = __aeabi_f2d(result1);\n  limit_value = lround((int)result2,(int)((ulonglong)result2 >> 0x20));\n  limit_value2 = 75000;\n  if (limit_value < 75000) {\n    limit_value2 = limit_value;\n  }\n  memory_value = DAT_20000ed4;\n  calc_value7 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (flag1_enabled == '\\0') {\n    calc_value7 = calc_value7 ^ 0xaa0;\n  }\n  update_flags_080018fc(calc_value7);\n  update_memory_value_080018cc(memory_value);\n  calc_value4 = -(calc_value2 >> 1);\n  calc_value_difference = limit_value2 - DAT_20000ec9;\n  calc_value3 = 0;\n  delay_value = 10000;\n  local_flag = flags;\n  calc_value5 = calc_value4;\n  calc_value6 = calc_value4;\n  while( true ) {\n    updated_memory_value = memory_value;\n    debounce_value = debounce_rd();\n    if (flag2_enabled == '\\0') {\n      debounce_value = debounce_value ^ 0x1e;\n    }\n    if (((local_flag & 1) != 0) && (calc_value6 = calc_value6 + val1, 0 < calc_value6)) {\n      if ((debounce_value & 0x10) == 0) {\n        local_flag = local_flag & 0xfe;\n      }\n      else {\n        updated_memory_value = updated_memory_value ^ 0x10;\n      }\n      calc_value6 = calc_value6 - calc_value2;\n    }\n    if (((local_flag & 2) != 0) && (calc_value5 = calc_value5 + val2, 0 < calc_value5)) {\n      if ((debounce_value & 8) == 0) {\n        local_flag = local_flag & 0xfd;\n      }\n      else {\n        updated_memory_value = updated_memory_value ^ 0x440;\n      }\n      calc_value5 = calc_value5 - calc_value2;\n    }\n    if (((local_flag & 4) != 0) && (calc_value4 = calc_value4 + val3, 0 < calc_value4)) {\n      if ((debounce_value & 4) == 0) {\n        local_flag = local_flag & 0xfb;\n      }\n      else {\n        updated_memory_value = updated_memory_value ^ 0x100;\n      }\n      calc_value4 = calc_value4 - calc_value2;\n    }\n    if ((local_flag == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_memory_value_080018cc(updated_memory_value);\n    delay_us(DAT_20000ec9);\n    update_memory_value_080018cc(memory_value);\n    delay_us(calc_value_difference);\n    if ((limit_value < limit_value2) && (delay_value = limit_value2 + delay_value, 20000 < delay_value)) {\n      delay_value = delay_value - 20000;\n      calc_value3 = calc_value1 + calc_value3;\n      limit_value2 = 60000000 / calc_value3;\n      if (limit_value2 < limit_value) {\n        limit_value2 = limit_value;\n      }\n      calc_value_difference = limit_value2 - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_values_08001994",
                "param_1": "flags",
                "param_2": "flag1_enabled",
                "param_3": "flag2_enabled",
                "param_4": "param_value",
                "uVar1": "result1",
                "uVar2": "max_value",
                "uVar3": "result2",
                "uVar4": "result3",
                "local_61": "local_flag",
                "local_5c": "val1",
                "local_58": "val2",
                "local_54": "val3",
                "local_4e": "memory_value",
                "local_4c": "limit_value",
                "local_48": "calc_value1",
                "local_44": "truncated_value",
                "local_40": "calc_value2",
                "local_3c": "debounce_value",
                "local_36": "updated_memory_value",
                "local_34": "delay_value",
                "local_30": "calc_value3",
                "local_2c": "calc_value_difference",
                "local_28": "calc_value4",
                "local_24": "calc_value5",
                "local_20": "calc_value6",
                "local_1a": "calc_value7",
                "local_18": "limit_value2",
                "local_11": "calc_flag"
            },
            "calling": [
                "limits_go_home"
            ],
            "called": [
                "sqrt",
                "FUN_080018cc",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "lround",
                "__floatunsidf",
                "__aeabi_f2d",
                "ceil",
                "__aeabi_d2uiz",
                "__truncdfsf2",
                "debounce_rd",
                "__divdf3",
                "FUN_080018fc",
                "memset",
                "delay_us",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "perform_homing_cycle_08001d4c",
            "code": "\nvoid performHomingCycle_08001d4c(void)\n\n{\n  char updatedCounter;\n  char counter;\n  \n  wakeUpSystem();\n  executeHomingCycle(4,1,0,DAT_20000eec);\n  executeHomingCycle(3,1,0,DAT_20000eec);\n  delayMilliseconds(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    updatedCounter = counter + -1;\n    if (counter == '\\0') break;\n    executeHomingCycle(7,0,1,DAT_20000ee8);\n    delayMilliseconds(DAT_20000ef0);\n    counter = updatedCounter;\n    if ('\\0' < updatedCounter) {\n      executeHomingCycle(7,1,0,DAT_20000ee8);\n      delayMilliseconds(DAT_20000ef0);\n    }\n  }\n  putSystemToSleep();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "perform_homing_cycle_08001d4c",
                "local_9": "counter",
                "cVar1": "updatedCounter",
                "st_wake_up": "wakeUpSystem",
                "homing_cycle": "executeHomingCycle",
                "delay_ms": "delayMilliseconds",
                "st_go_idle": "putSystemToSleep"
            },
            "calling": [
                "mc_go_home"
            ],
            "called": [
                "st_go_idle",
                "delay_ms",
                "st_wake_up",
                "homing_cycle"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_machine_08001ddc",
            "code": "\nvoid initialize_machine_08001ddc(void)\n\n{\n  initialize_serial();\n  initialize_settings();\n  initialize_st();\n  clear_memory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      reset_serial_read_buffer();\n      initialize_plan();\n      initialize_gc();\n      initialize_protocol();\n      initialize_spindle();\n      initialize_coolant();\n      initialize_limits();\n      reset_st();\n      synchronize_current_position();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        send_feedback_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        execute_startup_protocol();\n      }\n    }\n    execute_runtime_protocol();\n    process_protocol();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_machine_08001ddc",
                "serial_init": "initialize_serial",
                "settings_init": "initialize_settings",
                "st_init": "initialize_st",
                "memset": "clear_memory",
                "serial_reset_read_buffer": "reset_serial_read_buffer",
                "plan_init": "initialize_plan",
                "gc_init": "initialize_gc",
                "protocol_init": "initialize_protocol",
                "spindle_init": "initialize_spindle",
                "coolant_init": "initialize_coolant",
                "limits_init": "initialize_limits",
                "st_reset": "reset_st",
                "sys_sync_current_position": "synchronize_current_position",
                "report_feedback_message": "send_feedback_message",
                "protocol_execute_startup": "execute_startup_protocol",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_process": "process_protocol"
            },
            "calling": [
                "main"
            ],
            "called": [
                "protocol_process",
                "st_reset",
                "report_feedback_message",
                "serial_reset_read_buffer",
                "gc_init",
                "st_init",
                "settings_init",
                "protocol_init",
                "serial_init",
                "coolant_init",
                "protocol_execute_startup",
                "plan_init",
                "sys_sync_current_position",
                "protocol_execute_runtime",
                "spindle_init",
                "memset",
                "limits_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "execute_protocol_08001e98",
            "code": "\nvoid executeProtocol_08001e98(undefined4 bufferParam1,undefined4 bufferParam2,undefined4 bufferParam3,undefined4 bufferParam4,\n                 undefined bufferParam5)\n\n{\n  int bufferCheckResult;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      protocol_execute_runtime();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      bufferCheckResult = plan_check_full_buffer();\n    } while (bufferCheckResult != 0);\n    plan_buffer_line(bufferParam1,bufferParam2,bufferParam3,bufferParam4,bufferParam5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      st_cycle_start();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "execute_protocol_08001e98",
                "param_1": "bufferParam1",
                "param_2": "bufferParam2",
                "param_3": "bufferParam3",
                "param_4": "bufferParam4",
                "param_5": "bufferParam5",
                "iVar1": "bufferCheckResult"
            },
            "calling": [
                "mc_arc",
                "gc_execute_line",
                "mc_go_home"
            ],
            "called": [
                "plan_check_full_buffer",
                "protocol_execute_runtime",
                "st_cycle_start",
                "plan_buffer_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_angles_08001f00",
            "code": "\nvoid calculateAngles_08001f00(int point1,undefined4 *point2,int point3,byte angle1,byte angle2,byte angle3\n                 ,undefined4 scale1,char scale2,undefined4 scale3,char reverseFlag)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int comparisonResult;\n  uint temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  uint points [4];\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  ushort numLoops;\n  undefined4 distance;\n  undefined4 temp10;\n  undefined4 result3;\n  uint angle4;\n  undefined4 angle5;\n  undefined4 angle6;\n  char loopCount;\n  ushort i;\n  undefined4 result4;\n  uint result5;\n  uint result6;\n  \n  angle6 = __addsf3(*(undefined4 *)((uint)angle1 * 4 + point1),\n                      *(undefined4 *)((uint)angle1 * 4 + point3));\n  angle5 = __addsf3(*(undefined4 *)((uint)angle2 * 4 + point1),\n                      *(undefined4 *)((uint)angle2 * 4 + point3));\n  angle4 = __aeabi_fsub(point2[angle3],*(undefined4 *)((uint)angle3 * 4 + point1));\n  result6 = *(uint *)((uint)angle1 * 4 + point3) ^ 0x80000000;\n  result5 = *(uint *)((uint)angle2 * 4 + point3) ^ 0x80000000;\n  result3 = __aeabi_fsub(point2[angle1],angle6);\n  temp10 = __aeabi_fsub(point2[angle2],angle5);\n  result1 = __aeabi_fmul(result6,temp10);\n  result2 = __aeabi_fmul(result5,result3);\n  result1 = __aeabi_fsub(result1,result2);\n  temp2 = __aeabi_f2d(result1);\n  result1 = __aeabi_fmul(result6,result3);\n  result2 = __aeabi_fmul(result5,temp10);\n  result1 = __addsf3(result1,result2);\n  temp3 = __aeabi_f2d(result1);\n  temp2 = atan2((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                (int)((ulonglong)temp3 >> 0x20));\n  result4 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  if (reverseFlag == '\\0') {\n    comparisonResult = __aeabi_fcmple(result4,0);\n    if (comparisonResult != 0) {\n      temp2 = __aeabi_f2d(result4);\n      temp2 = __aeabi_dadd((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x54442d18,0x401921fb);\n      result4 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    }\n  }\n  else {\n    comparisonResult = __aeabi_fcmpge(result4,0);\n    if (comparisonResult != 0) {\n      temp2 = __aeabi_f2d(result4);\n      temp2 = __subdf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x54442d18,0x401921fb);\n      result4 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    }\n  }\n  result1 = __aeabi_fmul(result4,scale3);\n  temp2 = __aeabi_f2d(result1);\n  temp3 = __aeabi_f2d(angle4 & 0x7fffffff);\n  temp2 = hypot((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                (int)((ulonglong)temp3 >> 0x20));\n  distance = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  comparisonResult = __aeabi_fcmpeq(distance,0);\n  if (comparisonResult == 0) {\n    result1 = __aeabi_fdiv(distance,DAT_20000ed8);\n    temp2 = __aeabi_f2d(result1);\n    temp2 = floor((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    numLoops = __aeabi_d2uiz((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if (scale2 != '\\0') {\n      result1 = __floatsisf(numLoops);\n      scale1 = __aeabi_fmul(scale1,result1);\n    }\n    result1 = __floatsisf(numLoops);\n    temp9 = __aeabi_fdiv(result4,result1);\n    result1 = __floatsisf(numLoops);\n    temp8 = __aeabi_fdiv(angle4,result1);\n    temp2 = __aeabi_f2d(temp9);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n    temp3 = __aeabi_f2d(temp9);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                     (int)((ulonglong)temp3 >> 0x20));\n    temp2 = __subdf3(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    temp7 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    temp6 = temp9;\n    loopCount = '\\0';\n    points[angle3] = *(uint *)(point1 + (uint)angle3 * 4);\n    for (i = 1; i < numLoops; i = i + 1) {\n      if ((int)loopCount < (int)(uint)DAT_20000efa) {\n        result1 = __aeabi_fmul(result6,temp6);\n        result2 = __aeabi_fmul(result5,temp7);\n        points[3] = __addsf3(result1,result2);\n        result1 = __aeabi_fmul(result6,temp7);\n        result2 = __aeabi_fmul(result5,temp6);\n        result6 = __aeabi_fsub(result1,result2);\n        result5 = points[3];\n        loopCount = loopCount + '\\x01';\n      }\n      else {\n        result1 = __floatsisf(i);\n        result1 = __aeabi_fmul(result1,temp9);\n        temp2 = __aeabi_f2d(result1);\n        temp2 = cos((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        temp5 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        result1 = __floatsisf(i);\n        result1 = __aeabi_fmul(result1,temp9);\n        temp2 = __aeabi_f2d(result1);\n        temp2 = sin((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        temp4 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        result1 = __aeabi_fmul(*(uint *)((uint)angle1 * 4 + point3) ^ 0x80000000,temp5);\n        result2 = __aeabi_fmul(*(undefined4 *)((uint)angle2 * 4 + point3),temp4);\n        result6 = __addsf3(result1,result2);\n        result1 = __aeabi_fmul(*(uint *)((uint)angle1 * 4 + point3) ^ 0x80000000,temp4);\n        result2 = __aeabi_fmul(*(undefined4 *)((uint)angle2 * 4 + point3),temp5);\n        result5 = __aeabi_fsub(result1,result2);\n        loopCount = '\\0';\n      }\n      temp1 = __addsf3(angle6,result6);\n      points[angle1] = temp1;\n      temp1 = __addsf3(angle5,result5);\n      points[angle2] = temp1;\n      temp1 = __addsf3(points[angle3],temp8);\n      points[angle3] = temp1;\n      mc_line(points[0],points[1],points[2],scale1,scale2);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    mc_line(*point2,point2[1],point2[2],scale1,scale2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_angles_08001f00",
                "param_1": "point1",
                "param_2": "point2",
                "param_3": "point3",
                "param_4": "angle1",
                "param_5": "angle2",
                "param_6": "angle3",
                "param_7": "scale1",
                "param_8": "scale2",
                "param_9": "scale3",
                "param_10": "reverseFlag",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "comparisonResult",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "local_6c": "points",
                "local_5c": "temp4",
                "local_58": "temp5",
                "local_54": "temp6",
                "local_50": "temp7",
                "local_4c": "temp8",
                "local_48": "temp9",
                "local_42": "numLoops",
                "local_40": "distance",
                "local_3c": "temp10",
                "local_38": "result3",
                "local_34": "angle4",
                "local_30": "angle5",
                "local_2c": "angle6",
                "local_27": "loopCount",
                "local_26": "i",
                "local_24": "result4",
                "local_20": "result5",
                "local_1c": "result6"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "mc_line",
                "sin",
                "__aeabi_fsub",
                "__aeabi_dadd",
                "atan2",
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fcmpge",
                "floor",
                "__aeabi_fdiv",
                "__aeabi_fcmple",
                "__subdf3",
                "__aeabi_f2d",
                "cos",
                "__floatsisf",
                "__aeabi_d2uiz",
                "hypot",
                "__truncdfsf2",
                "__aeabi_fcmpeq",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "calculate_delay_and_execute_08002408",
            "code": "\nvoid calculateDelayAndExecute_08002408(undefined4 inputValue)\n\n{\n  undefined2 multipliedValue;\n  undefined4 multipliedValue2;\n  undefined4 subtractedValue;\n  undefined8 convertedValue;\n  ushort numIterations;\n  \n  multipliedValue2 = __aeabi_fmul(inputValue,0x41a00000);\n  convertedValue = __aeabi_f2d(multipliedValue2);\n  convertedValue = floor((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n  numIterations = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n  plan_synchronize();\n  multipliedValue2 = __aeabi_fmul(inputValue,0x447a0000);\n  subtractedValue = __floatsisf((uint)numIterations * 0x32);\n  multipliedValue2 = __aeabi_fsub(multipliedValue2,subtractedValue);\n  convertedValue = __aeabi_f2d(multipliedValue2);\n  convertedValue = floor((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n  multipliedValue = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n  delay_ms(multipliedValue);\n  while ((numIterations != 0 && (protocol_execute_runtime(), DAT_20000ea8 == '\\0'))) {\n    _delay_ms(0x32);\n    numIterations = numIterations - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "calculate_delay_and_execute_08002408",
                "param_1": "inputValue",
                "uVar1": "multipliedValue",
                "uVar2": "multipliedValue2",
                "uVar3": "subtractedValue",
                "uVar4": "convertedValue",
                "local_12": "numIterations"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__floatsisf",
                "__aeabi_d2uiz",
                "delay_ms",
                "__aeabi_fmul",
                "protocol_execute_runtime",
                "floor",
                "_delay_ms",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_system_080024c4",
            "code": "\nvoid initializeSystem_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char isNegativeZ;\n  char isNegativeY;\n  char isNegativeX;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  setLimitsToHome();\n  executeRuntimeProtocol();\n  if (DAT_20000ea8 == '\\0') {\n    clearMemory(&DAT_20000eac,0,0xc);\n    synchronizeCurrentPosition();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      isNegativeX = -1;\n    }\n    else {\n      isNegativeX = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      isNegativeY = -1;\n    }\n    else {\n      isNegativeY = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      isNegativeZ = -1;\n    }\n    else {\n      isNegativeZ = '\\x01';\n    }\n    uVar1 = convertIntToFloat((int)isNegativeX);\n    uVar1 = multiplyFloats(uVar1,DAT_20000ef4);\n    uVar2 = convertIntToFloat((int)isNegativeY);\n    uVar2 = multiplyFloats(uVar2,DAT_20000ef4);\n    uVar3 = convertIntToFloat((int)isNegativeZ);\n    uVar3 = multiplyFloats(uVar3,DAT_20000ef4);\n    drawLineInMC(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    startCycle();\n    synchronizePlan();\n    synchronizeCurrentPosition();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_system_080024c4",
                "local_11": "isNegativeX",
                "local_12": "isNegativeY",
                "local_13": "isNegativeZ",
                "limits_go_home": "setLimitsToHome",
                "protocol_execute_runtime": "executeRuntimeProtocol",
                "memset": "clearMemory",
                "sys_sync_current_position": "synchronizeCurrentPosition",
                "__floatsisf": "convertIntToFloat",
                "__aeabi_fmul": "multiplyFloats",
                "mc_line": "drawLineInMC",
                "st_cycle_start": "startCycle",
                "plan_synchronize": "synchronizePlan"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "mc_line",
                "__floatsisf",
                "limits_go_home",
                "__aeabi_fmul",
                "sys_sync_current_position",
                "protocol_execute_runtime",
                "st_cycle_start",
                "memset",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "stop_spindle_and_coolant_080025e8",
            "code": "\nvoid stopSpindleAndCoolant_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    spindle_stop();\n    coolant_stop();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      st_go_idle();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "stop_spindle_and_coolant_080025e8"
            },
            "calling": [
                "protocol_execute_line",
                "gc_execute_line",
                "serial_rx_hook",
                "limits_isr",
                "buttons_isr"
            ],
            "called": [
                "st_go_idle",
                "coolant_stop",
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_number_08002638",
            "code": "\nundefined4 parse_number_08002638(int base_address,byte *input_string,uint *output_value)\n\n{\n  byte digit;\n  bool is_negative;\n  bool has_decimal;\n  int comparison_result;\n  char *current_char;\n  char *next_char;\n  undefined4 result;\n  undefined8 temp_value;\n  uint float_value;\n  byte digit_count;\n  char decimal_places;\n  int integer_part;\n  char current_byte;\n  char *current_pos;\n  \n  next_char = (char *)(base_address + (uint)*input_string);\n  current_char = next_char + 1;\n  current_byte = *next_char;\n  is_negative = false;\n  if (current_byte == '-') {\n    is_negative = true;\n    current_byte = *current_char;\n    current_pos = next_char + 2;\n  }\n  else {\n    current_pos = current_char;\n    if (current_byte == '+') {\n      current_pos = next_char + 2;\n      current_byte = *current_char;\n    }\n  }\n  integer_part = 0;\n  decimal_places = '\\0';\n  digit_count = 0;\n  has_decimal = false;\n  do {\n    digit = current_byte - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (has_decimal) {\n          decimal_places = decimal_places + -1;\n        }\n        integer_part = (uint)digit + integer_part * 10;\n      }\n      else if (!has_decimal) {\n        decimal_places = decimal_places + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (has_decimal)) {\n        if (digit_count == 0) {\n          result = 0;\n        }\n        else {\n          float_value = __floatunsisf(integer_part);\n          comparison_result = __aeabi_fcmpeq(float_value,0);\n          if (comparison_result == 0) {\n            for (; decimal_places < -1; decimal_places = decimal_places + '\\x02') {\n              temp_value = __aeabi_f2d(float_value);\n              temp_value = __muldf3((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x47ae147b,0x3f847ae1);\n              float_value = __truncdfsf2((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            if (decimal_places < '\\0') {\n              temp_value = __aeabi_f2d(float_value);\n              temp_value = __muldf3((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x9999999a,0x3fb99999);\n              float_value = __truncdfsf2((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimal_places; decimal_places = decimal_places + -1) {\n                float_value = __aeabi_fmul(float_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *output_value = float_value ^ 0x80000000;\n          }\n          else {\n            *output_value = float_value;\n          }\n          *input_string = ((char)current_pos - (char)base_address) - 1;\n          result = 1;\n        }\n        return result;\n      }\n      has_decimal = true;\n    }\n    current_byte = *current_pos;\n    current_pos = current_pos + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_number_08002638",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "output_value",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "has_decimal",
                "iVar4": "comparison_result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "result",
                "uVar8": "temp_value",
                "local_1c": "float_value",
                "local_16": "digit_count",
                "local_15": "decimal_places",
                "local_14": "integer_part",
                "local_d": "current_byte",
                "local_c": "current_pos"
            },
            "calling": [
                "protocol_execute_line",
                "next_statement"
            ],
            "called": [
                "__aeabi_f2d",
                "__floatunsisf",
                "__truncdfsf2",
                "__aeabi_fmul",
                "__muldf3",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "limits_go_home",
                "mc_dwell",
                "report_alarm_message"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_gc_and_plan_0800283a",
            "code": "\nvoid initialize_gc_and_plan_0800283a(void)\n\n{\n  plan_set_current_position(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  gc_set_current_position(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_gc_and_plan_0800283a"
            },
            "calling": [
                "grbl_main",
                "mc_go_home"
            ],
            "called": [
                "plan_set_current_position",
                "gc_set_current_position"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_check_08002870",
            "code": "\nchar incrementAndCheck_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_check_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "planner_recalculate_trapezoids",
                "plan_discard_current_block",
                "plan_reset_buffer",
                "planner_forward_pass",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "update_character_08002896",
            "code": "\nchar updateCharacter_08002896(char character)\n\n{\n  char updatedCharacter;\n  \n  updatedCharacter = character;\n  if (character == '\\0') {\n    updatedCharacter = '\\x12';\n  }\n  return updatedCharacter + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "update_character_08002896",
                "param_1": "character",
                "local_9": "updatedCharacter"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_division_result_080028bc",
            "code": "\nundefined4 calculate_division_result_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 squared_input_2;\n  undefined4 squared_input_1;\n  \n  squared_input_2 = __aeabi_fmul(input_2,input_2);\n  squared_input_1 = __aeabi_fmul(input_1,input_1);\n  squared_input_2 = __aeabi_fsub(squared_input_2,squared_input_1);\n  squared_input_1 = __addsf3(input_3,input_3);\n  squared_input_2 = __aeabi_fdiv(squared_input_2,squared_input_1);\n  return squared_input_2;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_division_result_080028bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "squared_input_2",
                "uVar2": "squared_input_1"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_division_08002908",
            "code": "\nundefined4 calculate_division_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 temp_1;\n  undefined4 temp_2;\n  \n  temp_1 = __addsf3(input_3,input_3);\n  temp_1 = __aeabi_fmul(temp_1,input_4);\n  temp_2 = __aeabi_fmul(input_1,input_1);\n  temp_1 = __aeabi_fsub(temp_1,temp_2);\n  temp_2 = __aeabi_fmul(input_2,input_2);\n  temp_1 = __addsf3(temp_1,temp_2);\n  temp_2 = __aeabi_fmul(input_3,0x40800000);\n  temp_1 = __aeabi_fdiv(temp_1,temp_2);\n  return temp_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_division_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_difference_08002978",
            "code": "\nundefined4 calculate_difference_08002978(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 squared_input_2;\n  undefined4 twice_input_1;\n  undefined8 converted_result;\n  \n  squared_input_2 = __aeabi_fmul(input_2,input_2);\n  twice_input_1 = __addsf3(input_1,input_1);\n  twice_input_1 = __aeabi_fmul(twice_input_1,input_3);\n  squared_input_2 = __aeabi_fsub(squared_input_2,twice_input_1);\n  converted_result = __aeabi_f2d(squared_input_2);\n  converted_result = sqrt((int)converted_result,(int)((ulonglong)converted_result >> 0x20));\n  squared_input_2 = __truncdfsf2((int)converted_result,(int)((ulonglong)converted_result >> 0x20));\n  return squared_input_2;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_difference_08002978",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "squared_input_2",
                "uVar2": "twice_input_1",
                "uVar3": "converted_result"
            },
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "sqrt",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__truncdfsf2",
                "__addsf3",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_speed_080029d8",
            "code": "\nvoid updateSpeed_080029d8(undefined4 unused,int currentSpeed,int maxSpeed)\n\n{\n  int isEqual;\n  undefined4 newSpeed;\n  undefined4 oldSpeed;\n  \n  if (((currentSpeed != 0) && (maxSpeed != 0)) &&\n     (isEqual = __aeabi_fcmpeq(*(undefined4 *)(currentSpeed + 0x18),*(undefined4 *)(currentSpeed + 0x1c)),\n     isEqual == 0)) {\n    if ((*(char *)(currentSpeed + 0x25) == '\\0') &&\n       (isEqual = __aeabi_fcmpgt(*(undefined4 *)(currentSpeed + 0x1c),*(undefined4 *)(maxSpeed + 0x18)),\n       isEqual != 0)) {\n      oldSpeed = *(undefined4 *)(currentSpeed + 0x1c);\n      newSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(maxSpeed + 0x18),\n                                  *(undefined4 *)(currentSpeed + 0x20));\n      isEqual = __aeabi_fcmplt(oldSpeed,newSpeed);\n      if (isEqual == 0) {\n        newSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(maxSpeed + 0x18),\n                                    *(undefined4 *)(currentSpeed + 0x20));\n      }\n      else {\n        newSpeed = *(undefined4 *)(currentSpeed + 0x1c);\n      }\n      *(undefined4 *)(currentSpeed + 0x18) = newSpeed;\n    }\n    else {\n      *(undefined4 *)(currentSpeed + 0x18) = *(undefined4 *)(currentSpeed + 0x1c);\n    }\n    *(undefined *)(currentSpeed + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_speed_080029d8",
                "param_1": "unused",
                "param_2": "currentSpeed",
                "param_3": "maxSpeed",
                "iVar1": "isEqual",
                "uVar2": "newSpeed",
                "uVar3": "oldSpeed"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpgt",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "process_blocks_08002a94",
            "code": "\nvoid process_blocks_08002a94(void)\n\n{\n  undefined *previous_block_index;\n  undefined *previous_block;\n  undefined *temp_block;\n  byte current_block_index;\n  \n  current_block_index = DAT_20000cf0;\n  previous_block = (undefined *)0x0;\n  temp_block = (undefined *)0x0;\n  while (previous_block_index = temp_block, current_block_index != DAT_20000cf1) {\n    current_block_index = prev_block_index(current_block_index);\n    temp_block = previous_block;\n    planner_reverse_pass_kernel(&DAT_20000870 + (uint)current_block_index * 0x40,previous_block,previous_block_index);\n    previous_block = &DAT_20000870 + (uint)current_block_index * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "process_blocks_08002a94",
                "local_9": "current_block_index",
                "local_18": "previous_block",
                "local_14": "temp_block",
                "puVar1": "previous_block_index"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "prev_block_index",
                "planner_reverse_pass_kernel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "update_max_allowable_speed_08002afc",
            "code": "\nvoid updateMaxAllowableSpeed_08002afc(int vehicle,int speedometer)\n\n{\n  int isCurrentSpeedLower;\n  undefined4 newMaxSpeed;\n  undefined4 currentMaxSpeed;\n  \n  if (((vehicle != 0) && (*(char *)(vehicle + 0x25) == '\\0')) &&\n     (isCurrentSpeedLower = __aeabi_fcmplt(*(undefined4 *)(vehicle + 0x18),*(undefined4 *)(speedometer + 0x18)),\n     isCurrentSpeedLower != 0)) {\n    currentMaxSpeed = *(undefined4 *)(speedometer + 0x18);\n    newMaxSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(vehicle + 0x18),\n                                *(undefined4 *)(vehicle + 0x20));\n    isCurrentSpeedLower = __aeabi_fcmplt(currentMaxSpeed,newMaxSpeed);\n    if (isCurrentSpeedLower == 0) {\n      newMaxSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(vehicle + 0x18),\n                                  *(undefined4 *)(vehicle + 0x20));\n    }\n    else {\n      newMaxSpeed = *(undefined4 *)(speedometer + 0x18);\n    }\n    isCurrentSpeedLower = __aeabi_fcmpeq(newMaxSpeed,*(undefined4 *)(speedometer + 0x18));\n    if (isCurrentSpeedLower == 0) {\n      *(undefined4 *)(speedometer + 0x18) = newMaxSpeed;\n      *(undefined *)(speedometer + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "update_max_allowable_speed_08002afc",
                "param_1": "vehicle",
                "param_2": "speedometer",
                "iVar1": "isCurrentSpeedLower",
                "uVar2": "newMaxSpeed",
                "uVar3": "currentMaxSpeed"
            },
            "calling": [
                "planner_forward_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "perform_forward_pass_08002ba8",
            "code": "\nvoid performForwardPass_08002ba8(void)\n\n{\n  uint currentBlockUInt;\n  undefined *currentBlockPtr;\n  undefined *previousBlockPtr;\n  undefined *previousBlock;\n  undefined *currentBlock;\n  byte currentBlockIndex;\n  \n  previousBlock = (undefined *)0x0;\n  currentBlock = (undefined *)0x0;\n  currentBlockIndex = DAT_20000cf1;\n  previousBlockPtr = (undefined *)0x0;\n  while (currentBlockPtr = previousBlock, currentBlockIndex != DAT_20000cf0) {\n    previousBlock = currentBlock;\n    currentBlockUInt = (uint)currentBlockIndex;\n    planner_forward_pass_kernel(currentBlockPtr,currentBlock,&DAT_20000870 + currentBlockUInt * 0x40);\n    currentBlockIndex = next_block_index(currentBlockIndex);\n    previousBlockPtr = currentBlockPtr;\n    currentBlock = &DAT_20000870 + currentBlockUInt * 0x40;\n  }\n  planner_forward_pass_kernel(previousBlock,currentBlock,0,previousBlock,previousBlockPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "perform_forward_pass_08002ba8",
                "local_14": "previousBlock",
                "local_10": "currentBlock",
                "local_9": "currentBlockIndex",
                "puVar3": "previousBlockPtr",
                "puVar2": "currentBlockPtr",
                "uVar1": "currentBlockUInt"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "planner_forward_pass_kernel",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_acceleration_distance_08002c18",
            "code": "\nvoid calculateAccelerationDistance_08002c18(int input,undefined4 multiplier,undefined4 factor)\n\n{\n  undefined4 unscaledValue;\n  int scaledValue;\n  undefined4 unscaledValue2;\n  undefined4 scaledValue2;\n  undefined4 scaledValue3;\n  uint unsignedValue;\n  undefined8 doubleValue;\n  int accelerationDistancePositive;\n  uint accelerationDistanceNegative;\n  \n  unscaledValue = __floatunsisf(*(undefined4 *)(input + 0x3c));\n  unscaledValue = __aeabi_fmul(unscaledValue,multiplier);\n  doubleValue = __aeabi_f2d(unscaledValue);\n  doubleValue = ceil((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  unscaledValue = __aeabi_d2uiz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  *(undefined4 *)(input + 0x28) = unscaledValue;\n  unscaledValue = __floatunsisf(*(undefined4 *)(input + 0x3c));\n  unscaledValue = __aeabi_fmul(unscaledValue,factor);\n  doubleValue = __aeabi_f2d(unscaledValue);\n  doubleValue = ceil((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  unscaledValue = __aeabi_d2uiz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  *(undefined4 *)(input + 0x2c) = unscaledValue;\n  doubleValue = __aeabi_i2d(*(int *)(input + 0x30) * 0x32);\n  doubleValue = __muldf3((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20),0,0x404e0000);\n  scaledValue = __aeabi_d2iz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  unscaledValue = __floatunsisf(*(undefined4 *)(input + 0x28));\n  unscaledValue2 = __floatunsisf(*(undefined4 *)(input + 0x3c));\n  scaledValue2 = __floatsisf(scaledValue);\n  unscaledValue = estimate_acceleration_distance(unscaledValue,unscaledValue2,scaledValue2);\n  doubleValue = __aeabi_f2d(unscaledValue);\n  doubleValue = ceil((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  accelerationDistanceNegative = __aeabi_d2iz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  unscaledValue = __floatunsisf(*(undefined4 *)(input + 0x3c));\n  unscaledValue2 = __floatunsisf(*(undefined4 *)(input + 0x2c));\n  scaledValue2 = __floatsisf(-scaledValue);\n  unscaledValue = estimate_acceleration_distance(unscaledValue,unscaledValue2,scaledValue2);\n  doubleValue = __aeabi_f2d(unscaledValue);\n  doubleValue = floor((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  accelerationDistancePositive = __aeabi_d2iz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n  accelerationDistancePositive = (*(int *)(input + 0x10) - accelerationDistanceNegative) - accelerationDistancePositive;\n  if (accelerationDistancePositive < 0) {\n    unscaledValue = __floatunsisf(*(undefined4 *)(input + 0x28));\n    unscaledValue2 = __floatunsisf(*(undefined4 *)(input + 0x2c));\n    scaledValue2 = __floatsisf(scaledValue);\n    scaledValue3 = __floatsisf(*(undefined4 *)(input + 0x10));\n    unscaledValue = intersection_distance(unscaledValue,unscaledValue2,scaledValue2,scaledValue3);\n    doubleValue = __aeabi_f2d(unscaledValue);\n    doubleValue = ceil((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n    unsignedValue = __aeabi_d2iz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n    unsignedValue = unsignedValue & ~((int)unsignedValue >> 0x1f);\n    accelerationDistanceNegative = *(uint *)(input + 0x10);\n    if ((int)unsignedValue <= (int)*(uint *)(input + 0x10)) {\n      accelerationDistanceNegative = unsignedValue;\n    }\n    accelerationDistancePositive = 0;\n  }\n  *(uint *)(input + 0x34) = accelerationDistanceNegative;\n  *(uint *)(input + 0x38) = accelerationDistancePositive + accelerationDistanceNegative;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_acceleration_distance_08002c18",
                "param_1": "input",
                "param_2": "multiplier",
                "param_3": "factor",
                "uVar1": "unscaledValue",
                "iVar2": "scaledValue",
                "uVar3": "unscaledValue2",
                "uVar4": "scaledValue2",
                "uVar5": "scaledValue3",
                "uVar6": "unsignedValue",
                "uVar7": "doubleValue",
                "local_20": "accelerationDistancePositive",
                "local_1c": "accelerationDistanceNegative"
            },
            "calling": [
                "planner_recalculate_trapezoids"
            ],
            "called": [
                "__aeabi_f2d",
                "estimate_acceleration_distance",
                "__floatunsisf",
                "__aeabi_d2iz",
                "__floatsisf",
                "__aeabi_d2uiz",
                "ceil",
                "__aeabi_i2d",
                "__aeabi_fmul",
                "floor",
                "intersection_distance",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_trapezoids_08002e08",
            "code": "\nvoid calculate_trapezoids_08002e08(void)\n\n{\n  undefined4 width_ratio;\n  undefined4 height_ratio;\n  int block_index;\n  undefined *current_block;\n  byte current_index;\n  \n  current_block = (undefined *)0x0;\n  current_index = DAT_20000cf1;\n  while (current_index != DAT_20000cf0) {\n    block_index = (uint)current_index * 0x40;\n    if ((current_block != (undefined *)0x0) &&\n       ((current_block[0x24] != '\\0' || ((&DAT_20000894)[block_index] != '\\0')))) {\n      width_ratio = __aeabi_fdiv(*(undefined4 *)(current_block + 0x18),*(undefined4 *)(current_block + 0x14));\n      height_ratio = __aeabi_fdiv(*(undefined4 *)(&DAT_20000888 + block_index),*(undefined4 *)(current_block + 0x14));\n      calculate_trapezoid_for_block(current_block,width_ratio,height_ratio);\n      current_block[0x24] = 0;\n    }\n    current_index = next_block_index(current_index);\n    current_block = &DAT_20000870 + block_index;\n  }\n  width_ratio = __aeabi_fdiv(*(undefined4 *)(current_block + 0x18),*(undefined4 *)(current_block + 0x14));\n  height_ratio = __aeabi_fdiv(0,*(undefined4 *)(current_block + 0x14));\n  calculate_trapezoid_for_block(current_block,width_ratio,height_ratio);\n  current_block[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_trapezoids_08002e08",
                "iVar3": "block_index",
                "local_18": "current_block",
                "local_11": "current_index",
                "uVar1": "width_ratio",
                "uVar2": "height_ratio"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "next_block_index",
                "calculate_trapezoid_for_block",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "calculate_plan_08002edc",
            "code": "\nvoid calculate_plan_08002edc(void)\n\n{\n  perform_reverse_pass();\n  perform_forward_pass();\n  recalculate_trapezoids();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "calculate_plan_08002edc",
                "planner_reverse_pass": "perform_reverse_pass",
                "planner_forward_pass": "perform_forward_pass",
                "planner_recalculate_trapezoids": "recalculate_trapezoids"
            },
            "calling": [
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [
                "planner_recalculate_trapezoids",
                "planner_reverse_pass",
                "planner_forward_pass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "initialize_block_08002ef0",
            "code": "\nvoid initializeBlock_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = next_block_index(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "initialize_block_08002ef0"
            },
            "calling": [
                "plan_init"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_buffer_08002f24",
            "code": "\nvoid initializeBuffer_08002f24(void)\n\n{\n  resetBuffer();\n  memset(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_buffer_08002f24",
                "plan_reset_buffer": "resetBuffer"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "plan_reset_buffer",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_block_index_08002f40",
            "code": "\nvoid update_block_index_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = next_block_index(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_block_index_08002f40"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_current_data_ptr_08002f74",
            "code": "\nundefined * get_current_data_ptr_08002f74(void)\n\n{\n  undefined *result_ptr;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    result_ptr = (undefined *)0x0;\n  }\n  else {\n    result_ptr = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return result_ptr;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_current_data_ptr_08002f74",
                "puVar1": "result_ptr"
            },
            "calling": [
                "step_period_isr",
                "plan_synchronize"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "is_data_equal_08002fac",
            "code": "\nbool isDataEqual_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "is_data_equal_08002fac"
            },
            "calling": [
                "mc_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "execute_until_block_complete_08002fd4",
            "code": "\nvoid execute_until_block_complete_08002fd4(void)\n\n{\n  int current_block;\n  \n  while ((current_block = get_current_block(), current_block != 0 || (DAT_20000ea9 == '\\x03'))) {\n    execute_runtime();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "execute_until_block_complete_08002fd4",
                "iVar1": "current_block",
                "plan_get_current_block": "get_current_block",
                "protocol_execute_runtime": "execute_runtime"
            },
            "calling": [
                "spindle_run",
                "gc_execute_line",
                "coolant_run",
                "mc_dwell",
                "mc_go_home"
            ],
            "called": [
                "protocol_execute_runtime",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "update_speed_and_position_08003004",
            "code": "\nvoid updateSpeedAndPosition_08003004(undefined4 accelerationX,undefined4 accelerationY,undefined4 accelerationZ,undefined4 timeElapsed,\n                 char isMoving)\n\n{\n  undefined4 accelerationXFloat;\n  int roundAccelerationX;\n  int roundAccelerationY;\n  int roundAccelerationZ;\n  undefined4 accelerationYFloat;\n  undefined4 accelerationZFloat;\n  undefined4 squaredAccelerationX;\n  undefined4 squaredAccelerationY;\n  uint squaredAccelerationZ;\n  int blockIndex;\n  ushort *blockDataPtr;\n  int difference;\n  uint maxDifference;\n  undefined8 distance;\n  undefined8 multiplier;\n  undefined8 ceiledDistance;\n  undefined4 local_20;\n  undefined4 inverseTimeElapsed;\n  \n  blockIndex = (uint)DAT_20000cf0 * 0x40;\n  blockDataPtr = (ushort *)(&DAT_20000870 + blockIndex);\n  accelerationXFloat = __aeabi_fmul(DAT_20000ebc,accelerationX);\n  distance = __aeabi_f2d(accelerationXFloat);\n  roundAccelerationX = lround((int)distance,(int)((ulonglong)distance >> 0x20));\n  accelerationXFloat = __aeabi_fmul(DAT_20000ec0,accelerationY);\n  distance = __aeabi_f2d(accelerationXFloat);\n  roundAccelerationY = lround((int)distance,(int)((ulonglong)distance >> 0x20));\n  accelerationXFloat = __aeabi_fmul(DAT_20000ec4,accelerationZ);\n  distance = __aeabi_f2d(accelerationXFloat);\n  roundAccelerationZ = lround((int)distance,(int)((ulonglong)distance >> 0x20));\n  *blockDataPtr = 0;\n  if (roundAccelerationX < DAT_20000cf4) {\n    *blockDataPtr = *blockDataPtr | 0x20;\n  }\n  if (roundAccelerationY < DAT_20000cf8) {\n    *blockDataPtr = *blockDataPtr | 0x880;\n  }\n  if (roundAccelerationZ < DAT_20000cfc) {\n    *blockDataPtr = *blockDataPtr | 0x200;\n  }\n  difference = roundAccelerationX - DAT_20000cf4;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000874 + blockIndex) = difference;\n  difference = roundAccelerationY - DAT_20000cf8;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000878 + blockIndex) = difference;\n  difference = roundAccelerationZ - DAT_20000cfc;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_2000087c + blockIndex) = difference;\n  squaredAccelerationZ = *(uint *)(&DAT_2000087c + blockIndex);\n  if (*(uint *)(&DAT_2000087c + blockIndex) < *(uint *)(&DAT_20000878 + blockIndex)) {\n    squaredAccelerationZ = *(uint *)(&DAT_20000878 + blockIndex);\n  }\n  maxDifference = *(uint *)(&DAT_20000874 + blockIndex);\n  if (*(uint *)(&DAT_20000874 + blockIndex) < squaredAccelerationZ) {\n    maxDifference = squaredAccelerationZ;\n  }\n  *(uint *)(&DAT_20000880 + blockIndex) = maxDifference;\n  if (*(int *)(&DAT_20000880 + blockIndex) != 0) {\n    accelerationXFloat = __floatsisf(roundAccelerationX - DAT_20000cf4);\n    accelerationXFloat = __aeabi_fdiv(accelerationXFloat,DAT_20000ebc);\n    accelerationYFloat = __floatsisf(roundAccelerationY - DAT_20000cf8);\n    accelerationYFloat = __aeabi_fdiv(accelerationYFloat,DAT_20000ec0);\n    accelerationZFloat = __floatsisf(roundAccelerationZ - DAT_20000cfc);\n    accelerationZFloat = __aeabi_fdiv(accelerationZFloat,DAT_20000ec4);\n    squaredAccelerationX = __aeabi_fmul(accelerationXFloat,accelerationXFloat);\n    squaredAccelerationY = __aeabi_fmul(accelerationYFloat,accelerationYFloat);\n    squaredAccelerationX = __addsf3(squaredAccelerationX,squaredAccelerationY);\n    squaredAccelerationY = __aeabi_fmul(accelerationZFloat,accelerationZFloat);\n    squaredAccelerationX = __addsf3(squaredAccelerationX,squaredAccelerationY);\n    distance = __aeabi_f2d(squaredAccelerationX);\n    distance = sqrt((int)distance,(int)((ulonglong)distance >> 0x20));\n    squaredAccelerationX = __truncdfsf2((int)distance,(int)((ulonglong)distance >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + blockIndex) = squaredAccelerationX;\n    squaredAccelerationX = __aeabi_fdiv(0x3f800000,*(undefined4 *)(&DAT_20000890 + blockIndex));\n    if (isMoving == '\\0') {\n      inverseTimeElapsed = __aeabi_fmul(timeElapsed,squaredAccelerationX);\n    }\n    else {\n      inverseTimeElapsed = __aeabi_fdiv(0x3f800000,timeElapsed);\n    }\n    squaredAccelerationY = __aeabi_fmul(*(undefined4 *)(&DAT_20000890 + blockIndex),inverseTimeElapsed);\n    *(undefined4 *)(&DAT_20000884 + blockIndex) = squaredAccelerationY;\n    squaredAccelerationY = __floatsisf(*(undefined4 *)(&DAT_20000880 + blockIndex));\n    squaredAccelerationY = __aeabi_fmul(squaredAccelerationY,inverseTimeElapsed);\n    distance = __aeabi_f2d(squaredAccelerationY);\n    distance = ceil((int)distance,(int)((ulonglong)distance >> 0x20));\n    squaredAccelerationY = __aeabi_d2uiz((int)distance,(int)((ulonglong)distance >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + blockIndex) = squaredAccelerationY;\n    squaredAccelerationY = __floatsisf(*(undefined4 *)(&DAT_20000880 + blockIndex));\n    squaredAccelerationY = __aeabi_fmul(squaredAccelerationY,squaredAccelerationX);\n    squaredAccelerationY = __aeabi_fmul(squaredAccelerationY,DAT_20000edc);\n    squaredAccelerationY = __aeabi_fdiv(squaredAccelerationY,0x453b8000);\n    distance = __aeabi_f2d(squaredAccelerationY);\n    distance = ceil((int)distance,(int)((ulonglong)distance >> 0x20));\n    squaredAccelerationY = __aeabi_d2iz((int)distance,(int)((ulonglong)distance >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + blockIndex) = squaredAccelerationY;\n    squaredAccelerationZ = __aeabi_fmul(accelerationXFloat,squaredAccelerationX);\n    accelerationXFloat = __aeabi_fmul(accelerationYFloat,squaredAccelerationX);\n    accelerationYFloat = __aeabi_fmul(accelerationZFloat,squaredAccelerationX);\n    local_20 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (difference = __aeabi_fcmpgt(DAT_20000d0c,0), difference != 0)) {\n      accelerationZFloat = __aeabi_fmul(DAT_20000d00 ^ 0x80000000,squaredAccelerationZ);\n      squaredAccelerationX = __aeabi_fmul(DAT_20000d04,accelerationXFloat);\n      accelerationZFloat = __aeabi_fsub(accelerationZFloat,squaredAccelerationX);\n      squaredAccelerationX = __aeabi_fmul(DAT_20000d08,accelerationYFloat);\n      accelerationZFloat = __aeabi_fsub(accelerationZFloat,squaredAccelerationX);\n      distance = __aeabi_f2d(accelerationZFloat);\n      difference = __aeabi_dcmplt((int)distance,(int)((ulonglong)distance >> 0x20),0x66666666,0x3fee6666);\n      if (difference != 0) {\n        difference = __aeabi_fcmplt(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + blockIndex));\n        local_20 = DAT_20000d0c;\n        if (difference == 0) {\n          local_20 = *(undefined4 *)(&DAT_20000884 + blockIndex);\n        }\n        distance = __aeabi_f2d(accelerationZFloat);\n        difference = __aeabi_dcmpgt((int)distance,(int)((ulonglong)distance >> 0x20),0x66666666,0xbfee6666);\n        if (difference != 0) {\n          distance = __aeabi_f2d(accelerationZFloat);\n          distance = __subdf3(0,0x3ff00000,(int)distance,(int)((ulonglong)distance >> 0x20));\n          distance = __muldf3((int)distance,(int)((ulonglong)distance >> 0x20),0,0x3fe00000);\n          distance = sqrt((int)distance,(int)((ulonglong)distance >> 0x20));\n          accelerationZFloat = __truncdfsf2((int)distance,(int)((ulonglong)distance >> 0x20));\n          distance = __aeabi_f2d(local_20);\n          squaredAccelerationX = __aeabi_fmul(DAT_20000edc,DAT_20000ee0);\n          squaredAccelerationX = __aeabi_fmul(squaredAccelerationX,accelerationZFloat);\n          multiplier = __aeabi_f2d(squaredAccelerationX);\n          ceiledDistance = __aeabi_f2d(accelerationZFloat);\n          ceiledDistance = __subdf3(0,0x3ff00000,(int)ceiledDistance,(int)((ulonglong)ceiledDistance >> 0x20));\n          multiplier = __divdf3((int)multiplier,(int)((ulonglong)multiplier >> 0x20),(int)ceiledDistance,\n                            (int)((ulonglong)ceiledDistance >> 0x20));\n          multiplier = sqrt((int)multiplier,(int)((ulonglong)multiplier >> 0x20));\n          difference = __aeabi_dcmplt((int)distance,(int)((ulonglong)distance >> 0x20),(int)multiplier,\n                                  (int)((ulonglong)multiplier >> 0x20));\n          if (difference == 0) {\n            squaredAccelerationX = __aeabi_fmul(DAT_20000edc,DAT_20000ee0);\n            squaredAccelerationX = __aeabi_fmul(squaredAccelerationX,accelerationZFloat);\n            distance = __aeabi_f2d(squaredAccelerationX);\n            multiplier = __aeabi_f2d(accelerationZFloat);\n            multiplier = __subdf3(0,0x3ff00000,(int)multiplier,(int)((ulonglong)multiplier >> 0x20));\n            distance = __divdf3((int)distance,(int)((ulonglong)distance >> 0x20),(int)multiplier,\n                              (int)((ulonglong)multiplier >> 0x20));\n            distance = sqrt((int)distance,(int)((ulonglong)distance >> 0x20));\n            local_20 = __truncdfsf2((int)distance,(int)((ulonglong)distance >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + blockIndex) = local_20;\n    squaredAccelerationX = max_allowable_speed(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + blockIndex))\n    ;\n    difference = __aeabi_fcmplt(local_20,squaredAccelerationX);\n    accelerationZFloat = squaredAccelerationX;\n    if (difference != 0) {\n      accelerationZFloat = local_20;\n    }\n    *(undefined4 *)(&DAT_20000888 + blockIndex) = accelerationZFloat;\n    difference = __aeabi_fcmpge(squaredAccelerationX,*(undefined4 *)(&DAT_20000884 + blockIndex));\n    if (difference == 0) {\n      (&DAT_20000895)[blockIndex] = 0;\n    }\n    else {\n      (&DAT_20000895)[blockIndex] = 1;\n    }\n    (&DAT_20000894)[blockIndex] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + blockIndex);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = squaredAccelerationZ;\n    DAT_20000d04 = accelerationXFloat;\n    DAT_20000d08 = accelerationYFloat;\n    DAT_20000cf2 = next_block_index(DAT_20000cf2);\n    DAT_20000cf4 = roundAccelerationX;\n    DAT_20000cf8 = roundAccelerationY;\n    DAT_20000cfc = roundAccelerationZ;\n    planner_recalculate();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "update_speed_and_position_08003004",
                "param_1": "accelerationX",
                "param_2": "accelerationY",
                "param_3": "accelerationZ",
                "param_4": "timeElapsed",
                "param_5": "isMoving",
                "uVar1": "accelerationXFloat",
                "iVar2": "roundAccelerationX",
                "iVar3": "roundAccelerationY",
                "iVar4": "roundAccelerationZ",
                "uVar5": "accelerationYFloat",
                "uVar6": "accelerationZFloat",
                "uVar7": "squaredAccelerationX",
                "uVar8": "squaredAccelerationY",
                "uVar9": "squaredAccelerationZ",
                "iVar10": "blockIndex",
                "puVar11": "blockDataPtr",
                "iVar12": "difference",
                "uVar13": "maxDifference",
                "uVar14": "distance",
                "uVar15": "multiplier",
                "uVar16": "ceiledDistance",
                "local_1c": "inverseTimeElapsed"
            },
            "calling": [
                "mc_line"
            ],
            "called": [
                "sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_fsub",
                "__aeabi_d2iz",
                "next_block_index",
                "__aeabi_fmul",
                "__aeabi_fcmpge",
                "__addsf3",
                "__aeabi_fdiv",
                "max_allowable_speed",
                "planner_recalculate",
                "lround",
                "__subdf3",
                "__aeabi_f2d",
                "__floatsisf",
                "__aeabi_d2uiz",
                "ceil",
                "__aeabi_fcmplt",
                "__truncdfsf2",
                "__divdf3",
                "__aeabi_fcmpgt",
                "__muldf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_data_080035ec",
            "code": "\nvoid initializeData_080035ec(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  DAT_20000cf4 = input1;\n  DAT_20000cf8 = input2;\n  DAT_20000cfc = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_data_080035ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_planner_data_08003618",
            "code": "\nvoid updatePlannerData_08003618(undefined4 newValue)\n\n{\n  undefined4 convertedValue;\n  int index;\n  undefined4 divisor;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  divisor = *(undefined4 *)(&DAT_20000890 + index);\n  convertedValue = __floatsisf(newValue);\n  convertedValue = __aeabi_fmul(divisor,convertedValue);\n  divisor = __floatsisf(*(undefined4 *)(&DAT_20000880 + index));\n  convertedValue = __aeabi_fdiv(convertedValue,divisor);\n  *(undefined4 *)(&DAT_20000890 + index) = convertedValue;\n  *(undefined4 *)(&DAT_20000880 + index) = newValue;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  planner_recalculate();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_planner_data_08003618",
                "param_1": "newValue",
                "uVar1": "convertedValue",
                "iVar2": "index",
                "uVar3": "divisor"
            },
            "calling": [
                "st_cycle_reinitialize"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "planner_recalculate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "write_string_to_serial_0800369c",
            "code": "\nvoid write_string_to_serial_0800369c(char *input_string)\n\n{\n  char *current_character;\n  \n  current_character = input_string;\n  while (*current_character != '\\0') {\n    serial_write(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "write_string_to_serial_0800369c",
                "param_1": "input_string",
                "local_c": "current_character"
            },
            "calling": [
                "protocol_execute_startup",
                "report_startup_line"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "print_string_080036c6",
            "code": "\nvoid print_string_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    serial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "print_string_080036c6",
                "param_1": "string",
                "local_c": "current_char"
            },
            "calling": [
                "report_gcode_parameters",
                "report_feedback_message",
                "report_init_message",
                "report_grbl_settings",
                "report_grbl_help",
                "report_status_message",
                "report_alarm_message",
                "report_startup_line",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "print_binary_digits_080036f0",
            "code": "\nvoid printBinaryDigits_080036f0(uint number,int numDigits)\n\n{\n  undefined4 binaryDigit;\n  int digitIndex;\n  uint mask;\n  \n  mask = 1 << (numDigits - 1U & 0xff);\n  for (digitIndex = 0; digitIndex < numDigits; digitIndex = digitIndex + 1) {\n    if ((mask & number) == 0) {\n      binaryDigit = 0x30;\n    }\n    else {\n      binaryDigit = 0x31;\n    }\n    serial_write(binaryDigit);\n    mask = mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "print_binary_digits_080036f0",
                "param_1": "number",
                "param_2": "numDigits",
                "uVar1": "binaryDigit",
                "local_10": "digitIndex",
                "local_c": "mask"
            },
            "calling": [
                "print_uint8_base2",
                "print_uint16_base2"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_binary_as_base2_08003740",
            "code": "\nvoid print_binary_as_base2_08003740(undefined input_number)\n\n{\n  print_base2(input_number,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_binary_as_base2_08003740",
                "param_1": "input_number"
            },
            "calling": [],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_base2_0800375c",
            "code": "\nvoid print_base2_0800375c(undefined2 number)\n\n{\n  print_base2_0800375c(number,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_base2_0800375c",
                "param_1": "number"
            },
            "calling": [
                "report_grbl_settings"
            ],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_number_08003778",
            "code": "\nvoid print_number_08003778(uint number)\n\n{\n  uint num_digits;\n  uint temp;\n  char digits [12];\n  byte digit_count;\n  \n  digit_count = 0;\n  temp = number;\n  if (number == 0) {\n    serial_write(0x30);\n  }\n  else {\n    for (; temp != 0; temp = temp / 10) {\n      num_digits = (uint)digit_count;\n      digit_count = digit_count + 1;\n      digits[num_digits + 1] = (char)(temp % 10) + '0';\n    }\n    for (; digit_count != 0; digit_count = digit_count - 1) {\n      serial_write(digits[digit_count]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_number_08003778",
                "param_1": "number",
                "uVar1": "num_digits",
                "local_1c": "temp",
                "acStack_15": "digits",
                "local_9": "digit_count"
            },
            "calling": [
                "printInteger"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int value)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = value;\n  if (value < 0) {\n    serial_write(0x2d);\n    absoluteValue = -value;\n  }\n  print_uint32_base10(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "value",
                "local_c": "absoluteValue"
            },
            "calling": [
                "report_grbl_settings",
                "report_startup_line",
                "report_gcode_modes"
            ],
            "called": [
                "print_uint32_base10",
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_float_to_decimal_08003826",
            "code": "\nvoid convertFloatToDecimal_08003826(uint inputValue)\n\n{\n  int isNegative;\n  undefined4 floatWithBias;\n  byte temp;\n  uint temp2;\n  uint value;\n  char decimalString [13];\n  uint intValue;\n  byte index;\n  byte exponent;\n  \n  isNegative = __aeabi_fcmplt(inputValue,0);\n  value = inputValue;\n  if (isNegative != 0) {\n    serial_write(0x2d);\n    value = inputValue ^ 0x80000000;\n  }\n  for (exponent = DAT_20000ef9; 1 < exponent; exponent = exponent - 2) {\n    value = __aeabi_fmul(value,0x42c80000);\n  }\n  if (exponent != 0) {\n    value = __aeabi_fmul(value,0x41200000);\n  }\n  floatWithBias = __addsf3(value,0x3f000000);\n  index = 0;\n  intValue = __aeabi_f2iz(floatWithBias);\n  decimalString[DAT_20000ef9 + 1] = '.';\n  for (; intValue != 0; intValue = intValue / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    temp2 = (uint)index;\n    index = index + 1;\n    decimalString[temp2 + 1] = (char)(intValue % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    temp2 = (uint)index;\n    index = index + 1;\n    decimalString[temp2 + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    temp = index + 1;\n    index = index + 2;\n    decimalString[temp + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    serial_write(decimalString[index]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_float_to_decimal_08003826",
                "param_1": "inputValue",
                "iVar1": "isNegative",
                "uVar2": "floatWithBias",
                "bVar3": "temp",
                "uVar4": "temp2",
                "local_24": "value",
                "acStack_1d": "decimalString",
                "local_10": "intValue",
                "local_a": "index",
                "local_9": "exponent"
            },
            "calling": [
                "report_gcode_parameters",
                "report_grbl_settings",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [
                "__aeabi_fcmplt",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_f2iz",
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "protocol_process",
                "protocol_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_protocol_080039a0",
            "code": "\nvoid initializeProtocol_080039a0(void)\n\n{\n  resetLineBuffer();\n  displayInitMessage();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_protocol_080039a0",
                "protocol_reset_line_buffer": "resetLineBuffer",
                "report_init_message": "displayInitMessage"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_init_message",
                "protocol_reset_line_buffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_startup_lines_080039bc",
            "code": "\nvoid processStartupLines_080039bc(void)\n\n{\n  int readResult;\n  undefined4 executionResult;\n  byte iteration;\n  \n  for (iteration = 0; iteration < 2; iteration = iteration + 1) {\n    readResult = settings_read_startup_line(iteration,&DAT_20000d10);\n    if (readResult == 0) {\n      report_status_message(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      printString(&DAT_20000d10);\n      executionResult = gc_execute_line(&DAT_20000d10);\n      report_status_message(executionResult);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_startup_lines_080039bc",
                "local_9": "iteration",
                "iVar1": "readResult",
                "uVar2": "executionResult"
            },
            "calling": [
                "protocol_execute_line",
                "grbl_main"
            ],
            "called": [
                "gc_execute_line",
                "settings_read_startup_line",
                "printString",
                "report_status_message"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "process_param_08003a18",
            "code": "\nvoid processParam_08003a18(uint inputParam)\n\n{\n  if ((inputParam & 0x80) == 0) {\n    if ((inputParam & 0x40) == 0) {\n      if ((inputParam & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    resetMemory();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "process_param_08003a18",
                "param_1": "inputParam",
                "mc_reset": "resetMemory"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_status_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid processStatus_08003a74(void)\n\n{\n  byte statusByte;\n  \n  statusByte = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        reportAlarmMessage(0xffffffff);\n        reportFeedbackMessage(1);\n        do {\n        } while( true );\n      }\n      reportAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((statusByte & 0x10) == 0) {\n      if ((statusByte & 1) != 0) {\n        reportRealtimeStatus();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((statusByte & 8) != 0) {\n        feedHold();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((statusByte & 4) != 0) {\n        cycleReinitialize();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((statusByte & 2) != 0) {\n        cycleStart();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_status_08003a74",
                "bVar1": "statusByte",
                "report_alarm_message": "reportAlarmMessage",
                "report_feedback_message": "reportFeedbackMessage",
                "report_realtime_status": "reportRealtimeStatus",
                "st_feed_hold": "feedHold",
                "st_cycle_reinitialize": "cycleReinitialize",
                "st_cycle_start": "cycleStart"
            },
            "calling": [
                "mc_line",
                "grbl_main",
                "protocol_process",
                "mc_dwell",
                "mc_go_home",
                "plan_synchronize"
            ],
            "called": [
                "st_feed_hold",
                "report_feedback_message",
                "st_cycle_reinitialize",
                "st_cycle_start",
                "report_alarm_message",
                "report_realtime_status"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_command_08003b98",
            "code": "\nuint processCommand_08003b98(char *command)\n\n{\n  byte firstChar;\n  int result;\n  undefined4 floatValue;\n  uint returnValue;\n  undefined8 doubleValue;\n  undefined4 secondFloat;\n  undefined4 tempFloat;\n  byte index1;\n  byte index2;\n  \n  if (*command != '$') {\n    returnValue = gc_execute_line(command);\n    return returnValue;\n  }\n  index1 = 1;\n  index2 = '\\0';\n  firstChar = command[1];\n  if (firstChar == 0) {\n    report_grbl_help();\n    return 0;\n  }\n  if ((0x58 < firstChar) || (firstChar < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(firstChar) {\n  case 0x23:\n    index1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_gcode_parameters();\n    break;\n  case 0x24:\n    index1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_grbl_settings();\n    break;\n  case 0x43:\n    index1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      mc_reset();\n      report_feedback_message(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      report_feedback_message(4);\n    }\n    break;\n  case 0x47:\n    index1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_gcode_modes();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    mc_go_home();\n    if (DAT_20000ea8 == '\\0') {\n      protocol_execute_startup();\n    }\n    break;\n  case 0x4e:\n    index1 = 2;\n    if (command[2] == '\\0') {\n      for (index2 = 0; index2 < 2; index2 = index2 + 1) {\n        result = settings_read_startup_line(index2,command);\n        if (result == 0) {\n          report_status_message(10);\n        }\n        else {\n          report_startup_line(index2,command);\n        }\n      }\n      return 0;\n    }\n    index2 = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = read_float(command,&index1,&tempFloat);\n    if (result == 0) {\n      return 1;\n    }\n    firstChar = index1 + 1;\n    if (command[index1] != '=') {\n      return 3;\n    }\n    index1 = firstChar;\n    if (index2 == '\\0') {\n      result = read_float(command,&index1,&secondFloat);\n      if (result == 0) {\n        return 1;\n      }\n      if (command[index1] == '\\0') {\n        floatValue = __aeabi_f2iz(tempFloat);\n        returnValue = settings_store_global_setting(floatValue,secondFloat);\n        return returnValue;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index1 - (uint)firstChar] = command[index1];\n      returnValue = (uint)index1;\n      index1 = index1 + 1;\n    } while (command[returnValue] != '\\0');\n    index2 = firstChar;\n    index2 = gc_execute_line(command);\n    if (index2 != 0) {\n      return (uint)index2;\n    }\n    doubleValue = __aeabi_f2d(tempFloat);\n    doubleValue = trunc((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n    index2 = __aeabi_d2uiz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n    settings_store_startup_line(index2,command);\n    break;\n  case 0x58:\n    index1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      report_feedback_message(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "param_1": "command",
                "bVar1": "firstChar",
                "iVar2": "result",
                "uVar3": "floatValue",
                "uVar4": "returnValue",
                "uVar5": "doubleValue",
                "local_14": "secondFloat",
                "local_10": "tempFloat",
                "local_a": "index1",
                "local_9": "index2"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "settings_store_global_setting",
                "gc_execute_line",
                "report_feedback_message",
                "trunc",
                "report_status_message",
                "report_startup_line",
                "__aeabi_f2iz",
                "mc_go_home",
                "__aeabi_f2d",
                "report_gcode_parameters",
                "mc_reset",
                "protocol_execute_startup",
                "__aeabi_d2uiz",
                "report_grbl_settings",
                "settings_store_startup_line",
                "settings_read_startup_line",
                "report_grbl_help",
                "read_float",
                "report_gcode_modes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_serial_input_08003f34",
            "code": "\nvoid process_serial_input_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 status_code;\n  uint buffer_index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = serial_read();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            report_status_message(0xd);\n            protocol_reset_line_buffer();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            buffer_index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[buffer_index] = input_byte;\n          }\n          else {\n            buffer_index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[buffer_index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    protocol_execute_runtime();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      report_status_message(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      status_code = protocol_execute_line(&DAT_20000d10);\n      report_status_message(status_code);\n    }\n    protocol_reset_line_buffer();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_serial_input_08003f34",
                "bVar1": "input_byte",
                "uVar2": "status_code",
                "uVar3": "buffer_index"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "protocol_execute_line",
                "protocol_execute_runtime",
                "report_status_message",
                "protocol_reset_line_buffer",
                "serial_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "print_error_message_08004030",
            "code": "\nvoid printErrorMessage_08004030(char errorType)\n\n{\n  if (errorType == '\\0') {\n    printPgmString(&DAT_0800b5c8);\n  }\n  else {\n    printPgmString(\"error: \");\n    switch(errorType) {\n    case '\\x01':\n      printPgmString(\"Bad number format\");\n      break;\n    case '\\x02':\n      printPgmString(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printPgmString(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printPgmString(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printPgmString(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printPgmString(\"Invalid statement\");\n      break;\n    case '\\a':\n      printPgmString(\"Setting disabled\");\n      break;\n    case '\\b':\n      printPgmString(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printPgmString(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printPgmString(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printPgmString(\"Busy or queued\");\n      break;\n    case '\\f':\n      printPgmString(\"Alarm lock\");\n      break;\n    case '\\r':\n      printPgmString(\"Line overflow\");\n    }\n    printPgmString(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "print_error_message_08004030",
                "param_1": "errorType"
            },
            "calling": [
                "report_gcode_parameters",
                "protocol_execute_line",
                "protocol_process",
                "protocol_execute_startup",
                "gc_init",
                "settings_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  printProgramString(\"ALARM: \");\n  if (errorCode == -2) {\n    printProgramString(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    printProgramString(\"Hard limit\");\n  }\n  printProgramString(\". MPos?\\r\\n\");\n  delayMilliseconds(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "printPgmString": "printProgramString",
                "delay_ms": "delayMilliseconds"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "delay_ms",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "print_status_message_080041a0",
            "code": "\nvoid printStatusMessage_080041a0(undefined status)\n\n{\n  printPgmString(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    printPgmString(\"Reset to continue\");\n    break;\n  case 2:\n    printPgmString(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    printPgmString(\"Caution: Unlocked\");\n    break;\n  case 4:\n    printPgmString(\"Enabled\");\n    break;\n  case 5:\n    printPgmString(\"Disabled\");\n  }\n  printPgmString(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "print_status_message_080041a0",
                "param_1": "status"
            },
            "calling": [
                "protocol_execute_line",
                "grbl_main",
                "protocol_execute_runtime"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\nvoid print_grbl_version_08004228(void)\n\n{\n  print_program_string(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "printPgmString": "print_program_string"
            },
            "calling": [
                "protocol_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_grbl_commands_0800423c",
            "code": "\nvoid printGrblCommands_0800423c(void)\n\n{\n  printProgramString(\n                \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n                );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_grbl_commands_0800423c",
                "printPgmString": "printProgramString"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configuration_08004250",
            "code": "\nvoid printConfiguration_08004250(void)\n\n{\n  undefined4 acceleration;\n  \n  printProgramString(&DAT_0800b8b8);\n  printFloatingPoint(DAT_20000ebc);\n  printProgramString(\" (x, step/mm)\\r\\n$1=\");\n  printFloatingPoint(DAT_20000ec0);\n  printProgramString(\" (y, step/mm)\\r\\n$2=\");\n  printFloatingPoint(DAT_20000ec4);\n  printProgramString(\" (z, step/mm)\\r\\n$3=\");\n  printInteger(DAT_20000ec9);\n  printProgramString(\" (step pulse, usec)\\r\\n$4=\");\n  printFloatingPoint(DAT_20000ecc);\n  printProgramString(\" (default feed, mm/min)\\r\\n$5=\");\n  printFloatingPoint(DAT_20000ed0);\n  printProgramString(\" (default seek, mm/min)\\r\\n$6=\");\n  printInteger(DAT_20000ed4);\n  printProgramString(\" (step port invert mask, int:\");\n  printUnsignedInt16Base2(DAT_20000ed4);\n  printProgramString(\")\\r\\n$7=\");\n  printInteger(DAT_20000ef8);\n  printProgramString(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration = __aeabi_fdiv(DAT_20000edc,0x45610000);\n  printFloatingPoint(acceleration);\n  printProgramString(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  printFloatingPoint(DAT_20000ee0);\n  printProgramString(\" (junction deviation, mm)\\r\\n$10=\");\n  printFloatingPoint(DAT_20000ed8);\n  printProgramString(\" (arc, mm/segment)\\r\\n$11=\");\n  printInteger(DAT_20000efa);\n  printProgramString(\" (n-arc correction, int)\\r\\n$12=\");\n  printInteger(DAT_20000ef9);\n  printProgramString(\" (n-decimals, int)\\r\\n$13=\");\n  printInteger((DAT_20000ee4 & 1) != 0);\n  printProgramString(\" (report inches, bool)\\r\\n$14=\");\n  printInteger((DAT_20000ee4 & 2) != 0);\n  printProgramString(\" (auto start, bool)\\r\\n$15=\");\n  printInteger((DAT_20000ee4 & 4) != 0);\n  printProgramString(\" (invert step enable, bool)\\r\\n$16=\");\n  printInteger((DAT_20000ee4 & 8) != 0);\n  printProgramString(\" (hard limits, bool)\\r\\n$17=\");\n  printInteger((DAT_20000ee4 & 0x10) != 0);\n  printProgramString(\" (homing cycle, bool)\\r\\n$18=\");\n  printInteger(DAT_20000ee6);\n  printProgramString(\" (homing dir invert mask, int:\");\n  printUnsignedInt16Base2(DAT_20000ee6);\n  printProgramString(\")\\r\\n$19=\");\n  printFloatingPoint(DAT_20000ee8);\n  printProgramString(\" (homing feed, mm/min)\\r\\n$20=\");\n  printFloatingPoint(DAT_20000eec);\n  printProgramString(\" (homing seek, mm/min)\\r\\n$21=\");\n  printInteger(DAT_20000ef0);\n  printProgramString(\" (homing debounce, msec)\\r\\n$22=\");\n  printFloatingPoint(DAT_20000ef4);\n  printProgramString(\" (homing pull-off, mm)\\r\\n$23=\");\n  printInteger(DAT_20000ed6);\n  printProgramString(\" (dir port invert mask, int:\");\n  printUnsignedInt16Base2(DAT_20000ed6);\n  printProgramString(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configuration_08004250",
                "uVar1": "acceleration",
                "printPgmString": "printProgramString",
                "printFloat": "printFloatingPoint",
                "print_uint16_base2": "printUnsignedInt16Base2"
            },
            "calling": [
                "protocol_execute_line",
                "settings_init"
            ],
            "called": [
                "printPgmString",
                "print_uint16_base2",
                "__aeabi_fdiv",
                "printInteger",
                "printFloat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "print_coordinates_080044e8",
            "code": "\nvoid printCoordinates_080044e8(void)\n\n{\n  int errorCode;\n  undefined4 truncatedFloat;\n  undefined8 doubleFloat;\n  undefined4 coordData [3];\n  byte index;\n  byte coordinateIndex;\n  \n  coordinateIndex = 0;\n  while( true ) {\n    if (7 < coordinateIndex) {\n      printPgmString(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          printFloat(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          doubleFloat = __aeabi_f2d(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          doubleFloat = __muldf3((int)doubleFloat,(int)((ulonglong)doubleFloat >> 0x20),0x57e16865,0x3fa42851);\n          truncatedFloat = __truncdfsf2((int)doubleFloat,(int)((ulonglong)doubleFloat >> 0x20));\n          printFloat(truncatedFloat);\n        }\n        if (index < 2) {\n          printPgmString(&DAT_0800bbbc);\n        }\n        else {\n          printPgmString(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    errorCode = settings_read_coord_data(coordinateIndex,coordData);\n    if (errorCode == 0) break;\n    printPgmString(&DAT_0800bb98);\n    switch(coordinateIndex) {\n    case 0:\n      printPgmString(&DAT_0800bb9c);\n      break;\n    case 1:\n      printPgmString(&DAT_0800bba0);\n      break;\n    case 2:\n      printPgmString(&DAT_0800bba4);\n      break;\n    case 3:\n      printPgmString(&DAT_0800bba8);\n      break;\n    case 4:\n      printPgmString(&DAT_0800bbac);\n      break;\n    case 5:\n      printPgmString(&DAT_0800bbb0);\n      break;\n    case 6:\n      printPgmString(&DAT_0800bbb4);\n      break;\n    case 7:\n      printPgmString(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        printFloat(coordData[index]);\n      }\n      else {\n        doubleFloat = __aeabi_f2d(coordData[index]);\n        doubleFloat = __muldf3((int)doubleFloat,(int)((ulonglong)doubleFloat >> 0x20),0x57e16865,0x3fa42851);\n        truncatedFloat = __truncdfsf2((int)doubleFloat,(int)((ulonglong)doubleFloat >> 0x20));\n        printFloat(truncatedFloat);\n      }\n      if (index < 2) {\n        printPgmString(&DAT_0800bbbc);\n      }\n      else {\n        printPgmString(&DAT_0800b764);\n      }\n    }\n    coordinateIndex = coordinateIndex + 1;\n  }\n  report_status_message(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "print_coordinates_080044e8",
                "iVar1": "errorCode",
                "uVar2": "truncatedFloat",
                "uVar3": "doubleFloat",
                "auStack_18": "coordData",
                "local_a": "index",
                "local_9": "coordinateIndex"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "settings_read_coord_data",
                "__truncdfsf2",
                "printPgmString",
                "report_status_message",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_program_info_080046d0",
            "code": "\nvoid printProgramInfo_080046d0(void)\n\n{\n  undefined4 truncatedValue;\n  undefined8 multipliedValue;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    printPgmString(&DAT_0800bbc8);\n    break;\n  case 1:\n    printPgmString(&DAT_0800bbcc);\n    break;\n  case 2:\n    printPgmString(&DAT_0800bbd0);\n    break;\n  case 3:\n    printPgmString(&DAT_0800bbd4);\n    break;\n  case 4:\n    printPgmString(&DAT_0800bbd8);\n  }\n  printPgmString(&DAT_0800bbe0);\n  printInteger(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      printPgmString(&DAT_0800bbe4);\n    }\n    else {\n      printPgmString(&DAT_0800bbec);\n    }\n  }\n  else {\n    printPgmString(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    printPgmString(&DAT_0800bc04);\n  }\n  else {\n    printPgmString(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    printPgmString(&DAT_0800bc14);\n  }\n  else {\n    printPgmString(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    printPgmString(&DAT_0800bc24);\n  }\n  else {\n    printPgmString(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    printPgmString(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      printPgmString(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      printPgmString(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    printPgmString(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      printPgmString(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      printPgmString(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    printPgmString(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      printPgmString(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      printPgmString(&DAT_0800bc48);\n    }\n  }\n  printPgmString(&DAT_0800bc50);\n  printInteger(DAT_20000e88);\n  printPgmString(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    printFloat(DAT_20000e78);\n  }\n  else {\n    multipliedValue = __aeabi_f2d(DAT_20000e78);\n    multipliedValue = __muldf3((int)multipliedValue,(int)((ulonglong)multipliedValue >> 0x20),0x57e16865,0x3fa42851);\n    truncatedValue = __truncdfsf2((int)multipliedValue,(int)((ulonglong)multipliedValue >> 0x20));\n    printFloat(truncatedValue);\n  }\n  printPgmString(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_program_info_080046d0",
                "uVar1": "truncatedValue",
                "uVar2": "multipliedValue"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__truncdfsf2",
                "printPgmString",
                "printInteger",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_data_info_08004900",
            "code": "\nvoid printDataInfo_08004900(undefined dataValue,undefined4 stringValue)\n\n{\n  printPgmString(&DAT_0800bc58);\n  printInteger(dataValue);\n  printPgmString(&DAT_0800bc5c);\n  printString(stringValue);\n  printPgmString(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_data_info_08004900",
                "param_1": "dataValue",
                "param_2": "stringValue"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString",
                "printString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_status_08004940",
            "code": "\nvoid printStatus_08004940(void)\n\n{\n  undefined4 normalizedValue;\n  uint temp1;\n  undefined4 temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined4 statusValues [6];\n  byte index;\n  \n  statusValues[3] = DAT_20000eac;\n  statusValues[4] = DAT_20000eb0;\n  statusValues[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    printPgmString(\"<Idle\");\n    break;\n  case 2:\n    printPgmString(\"<Queue\");\n    break;\n  case 3:\n    printPgmString(&DAT_0800bc70);\n    break;\n  case 4:\n    printPgmString(\"<Hold\");\n    break;\n  case 5:\n    printPgmString(\"<Home\");\n    break;\n  case 6:\n    printPgmString(\"<Alarm\");\n    break;\n  case 7:\n    printPgmString(\"<Check\");\n  }\n  printPgmString(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    normalizedValue = __floatsisf(statusValues[index + 3]);\n    temp1 = (uint)index;\n    normalizedValue = __aeabi_fdiv(normalizedValue,(&DAT_20000ebc)[index]);\n    statusValues[temp1] = normalizedValue;\n    if ((DAT_20000ee4 & 1) != 0) {\n      temp3 = __aeabi_f2d(statusValues[index]);\n      temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x57e16865,0x3fa42851);\n      temp1 = (uint)index;\n      normalizedValue = __truncdfsf2((int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      statusValues[temp1] = normalizedValue;\n    }\n    printFloat(statusValues[index]);\n    printPgmString(&DAT_0800bbbc);\n  }\n  printPgmString(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      temp2 = statusValues[index];\n      normalizedValue = __addsf3(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                       *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      temp1 = (uint)index;\n      normalizedValue = __aeabi_fsub(temp2,normalizedValue);\n      statusValues[temp1] = normalizedValue;\n    }\n    else {\n      temp3 = __aeabi_f2d(statusValues[index]);\n      normalizedValue = __addsf3(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                       *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      temp4 = __aeabi_f2d(normalizedValue);\n      temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x57e16865,0x3fa42851);\n      temp3 = __subdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                       (int)((ulonglong)temp4 >> 0x20));\n      temp1 = (uint)index;\n      normalizedValue = __truncdfsf2((int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      statusValues[temp1] = normalizedValue;\n    }\n    printFloat(statusValues[index]);\n    if (index < 2) {\n      printPgmString(&DAT_0800bbbc);\n    }\n  }\n  printPgmString(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_status_08004940",
                "auStack_2c": "statusValues",
                "local_11": "index",
                "uVar1": "normalizedValue",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__floatsisf",
                "__truncdfsf2",
                "printPgmString",
                "__addsf3",
                "__aeabi_fdiv",
                "__subdf3",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "write_data_to_eeprom_08004bc0",
            "code": "\nvoid writeDataToEEPROM_08004bc0(byte addressOffset,undefined4 data)\n\n{\n  writeDataToEEPROM_08004bc0WithChecksum((ushort)addressOffset * 0x101 + 0x300,data,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "write_data_to_eeprom_08004bc0",
                "param_1": "addressOffset",
                "param_2": "data",
                "memcpy_to_eeprom_with_checksum": "writeDataToEEPROMWithChecksum"
            },
            "calling": [
                "protocol_execute_line",
                "settings_read_startup_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "write_data_to_eeprom_08004bf4",
            "code": "\nvoid writeDataToEEPROM_08004bf4(byte startingAddress,undefined4 data)\n\n{\n  copyToEEPROMWithChecksum((ushort)startingAddress * 0xd + 0x200,data,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "write_data_to_eeprom_08004bf4",
                "param_1": "startingAddress",
                "param_2": "data",
                "memcpy_to_eeprom_with_checksum": "copyToEEPROMWithChecksum"
            },
            "calling": [
                "settings_read_coord_data",
                "gc_execute_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "write_data_to_eeprom_08004c2a",
            "code": "\nvoid write_data_to_eeprom_08004c2a(void)\n\n{\n  write_char_to_eeprom(0,5);\n  write_data_to_eeprom_08004c2a_with_checksum(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "write_data_to_eeprom_08004c2a",
                "eeprom_put_char": "write_char_to_eeprom",
                "memcpy_to_eeprom_with_checksum": "write_data_to_eeprom_with_checksum"
            },
            "calling": [
                "settings_store_global_setting",
                "settings_reset"
            ],
            "called": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_global_settings_08004c48",
            "code": "\nvoid initializeGlobalSettings_08004c48(char inputFlag)\n\n{\n  if (inputFlag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  write_global_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_global_settings_08004c48",
                "param_1": "inputFlag"
            },
            "calling": [
                "settings_init",
                "read_global_settings"
            ],
            "called": [
                "write_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "load_settings_from_eeprom_08004d2c",
            "code": "\nbool loadSettingsFromEEPROM_08004d2c(byte dataSize,undefined *buffer)\n\n{\n  int result;\n  \n  result = memcpy_from_eeprom_with_checksum(buffer,(ushort)dataSize * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *buffer = 0;\n    settings_store_startup_line(dataSize,buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "load_settings_from_eeprom_08004d2c",
                "param_1": "dataSize",
                "param_2": "buffer",
                "iVar1": "result"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "settings_store_startup_line",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "copy_data_from_eeprom_08004d7c",
            "code": "\nbool copyDataFromEEPROM_08004d7c(byte dataIndex,undefined4 dataBuffer)\n\n{\n  int errorCode;\n  \n  errorCode = memcpy_from_eeprom_with_checksum(dataBuffer,(ushort)dataIndex * 0xd + 0x200,0xc);\n  if (errorCode == 0) {\n    memset(dataBuffer,0,0xc);\n    settings_write_coord_data(dataIndex,dataBuffer);\n  }\n  return errorCode != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "copy_data_from_eeprom_08004d7c",
                "param_1": "dataIndex",
                "param_2": "dataBuffer",
                "iVar1": "errorCode"
            },
            "calling": [
                "report_gcode_parameters",
                "gc_execute_line",
                "gc_init",
                "settings_init"
            ],
            "called": [
                "settings_write_coord_data",
                "memset",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_and_copy_settings_08004dd2",
            "code": "\nundefined4 checkAndCopySettings_08004dd2(void)\n\n{\n  byte eepromValue;\n  int copyResult;\n  \n  eepromValue = eeprom_get_char(0);\n  if (eepromValue == 5) {\n    copyResult = memcpy_from_eeprom_with_checksum(&DAT_20000ebc,1,0x40);\n    if (copyResult == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < eepromValue) {\n      return 0;\n    }\n    copyResult = memcpy_from_eeprom_with_checksum(&DAT_20000ebc,1,0x28);\n    if (copyResult == 0) {\n      return 0;\n    }\n    settings_reset(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_and_copy_settings_08004dd2",
                "bVar1": "eepromValue",
                "iVar2": "copyResult"
            },
            "calling": [
                "settings_init"
            ],
            "called": [
                "eeprom_get_char",
                "settings_reset",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_settings_08004e30",
            "code": "\nundefined4 updateSettings_08004e30(int settingType,uint settingValue)\n\n{\n  undefined4 result;\n  int comparisonResult;\n  undefined8 convertedValue;\n  \n  switch(settingType) {\n  case 0:\n  case 1:\n  case 2:\n    comparisonResult = __aeabi_fcmple(settingValue,0);\n    if (comparisonResult != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[settingType] = settingValue;\n    break;\n  case 3:\n    comparisonResult = __aeabi_fcmplt(settingValue,0x40400000);\n    if (comparisonResult != 0) {\n      return 9;\n    }\n    convertedValue = __aeabi_f2d(settingValue);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ec9 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = settingValue;\n    break;\n  case 5:\n    DAT_20000ed0 = settingValue;\n    break;\n  case 6:\n    convertedValue = __aeabi_f2d(settingValue);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed4 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 7:\n    convertedValue = __aeabi_f2d(settingValue);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef8 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 8:\n    result = __aeabi_fmul(settingValue,0x42700000);\n    DAT_20000edc = __aeabi_fmul(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = settingValue & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = settingValue;\n    break;\n  case 0xb:\n    convertedValue = __aeabi_f2d(settingValue);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000efa = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xc:\n    convertedValue = __aeabi_f2d(settingValue);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef9 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xd:\n    comparisonResult = __aeabi_fcmpeq(settingValue,0);\n    if (comparisonResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    comparisonResult = __aeabi_fcmpeq(settingValue,0);\n    if (comparisonResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    comparisonResult = __aeabi_fcmpeq(settingValue,0);\n    if (comparisonResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    comparisonResult = __aeabi_fcmpeq(settingValue,0);\n    if (comparisonResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    limits_init();\n    break;\n  case 0x11:\n    comparisonResult = __aeabi_fcmpeq(settingValue,0);\n    if (comparisonResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    convertedValue = __aeabi_f2d(settingValue);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ee6 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = settingValue;\n    break;\n  case 0x14:\n    DAT_20000eec = settingValue;\n    break;\n  case 0x15:\n    convertedValue = __aeabi_f2d(settingValue);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef0 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = settingValue;\n    break;\n  case 0x17:\n    convertedValue = __aeabi_f2d(settingValue);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed6 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  write_global_settings();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_settings_08004e30",
                "param_1": "settingType",
                "param_2": "settingValue",
                "uVar1": "result",
                "iVar2": "comparisonResult",
                "uVar3": "convertedValue"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_d2uiz",
                "__aeabi_fcmplt",
                "trunc",
                "__aeabi_fmul",
                "write_global_settings",
                "__aeabi_fcmple",
                "limits_init",
                "round",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "check_and_reset_settings_080051b4",
            "code": "\nvoid checkAndResetSettings_080051b4(void)\n\n{\n  int result;\n  undefined coordData [15];\n  byte counter;\n  \n  result = read_global_settings();\n  if (result == 0) {\n    report_status_message(10);\n    settings_reset(1);\n    report_grbl_settings();\n  }\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    result = settings_read_coord_data(counter,coordData);\n    if (result == 0) {\n      report_status_message(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "check_and_reset_settings_080051b4",
                "iVar1": "result",
                "auStack_18": "coordData",
                "local_9": "counter"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "settings_read_coord_data",
                "report_grbl_settings",
                "settings_reset",
                "report_status_message",
                "read_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "spindle_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "stop_spindle_08005238",
            "code": "\nvoid stop_spindle_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  spindle_stop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "stop_spindle_08005238"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "turn_off_spindle_08005250",
            "code": "\nvoid turnOffSpindle_08005250(void)\n\n{\n  spindle_off();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "turn_off_spindle_08005250"
            },
            "calling": [
                "mc_reset",
                "spindle_run",
                "spindle_init"
            ],
            "called": [
                "spindle_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "update_spindle_direction_0800525c",
            "code": "\nvoid updateSpindleDirection_0800525c(byte newDirection)\n\n{\n  if ((int)(char)newDirection != (uint)DAT_20000e12) {\n    plan_synchronize();\n    if (newDirection == 0) {\n      spindle_stop();\n      DAT_20000e12 = newDirection;\n    }\n    else {\n      if ((char)newDirection < '\\x01') {\n        spindle_rev();\n      }\n      else {\n        spindle_fwd();\n      }\n      spindle_on();\n      DAT_20000e12 = newDirection;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "update_spindle_direction_0800525c",
                "param_1": "newDirection"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "spindle_rev",
                "spindle_fwd",
                "spindle_stop",
                "spindle_on",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_data_with_mask_080052ac",
            "code": "\n\n\nvoid updateDataWithMask_080052ac(uint data)\n\n{\n  _DAT_40021014 = data | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_data_with_mask_080052ac",
                "param_1": "data"
            },
            "calling": [
                "step_pulse_isr",
                "st_init",
                "step_delay_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_data_080052dc",
            "code": "\n\n\nvoid updateData_080052dc(uint data)\n\n{\n  _DAT_40021014 = data | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_data_080052dc",
                "param_1": "data"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_step_period_08005324",
            "code": "\nvoid calculateStepPeriod_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  set_step_period(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_step_period_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "st_reset",
                "st_cycle_reinitialize",
                "step_period_isr"
            ],
            "called": [
                "set_step_period"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_and_check_threshold_08005360",
            "code": "\nbool updateCounterAndCheckThreshold_08005360(void)\n\n{\n  bool isThresholdExceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isThresholdExceeded = 420000 < DAT_20000e2c;\n  if (isThresholdExceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isThresholdExceeded;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_and_check_threshold_08005360",
                "bVar1": "isThresholdExceeded"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_block_data_080053a0",
            "code": "\nvoid updateBlockData_080053a0(void)\n\n{\n  int iterationResult;\n  \n  writeDirection(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)getCurrentBlock();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      goIdle();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        setStepEventsPerMinute(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iterationResult = iterateTrapezoidCycleCounter();\n        if (iterationResult != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            setStepEventsPerMinute(DAT_20000e30);\n          }\n          else {\n            goIdle();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iterationResult = iterateTrapezoidCycleCounter();\n        if (iterationResult != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          setStepEventsPerMinute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          setStepEventsPerMinute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iterationResult = iterateTrapezoidCycleCounter();\n        if (iterationResult != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          setStepEventsPerMinute(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      discardCurrentBlock();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_block_data_080053a0",
                "iVar1": "iterationResult",
                "dirn_wr": "writeDirection",
                "plan_get_current_block": "getCurrentBlock",
                "st_go_idle": "goIdle",
                "set_step_events_per_minute": "setStepEventsPerMinute",
                "iterate_trapezoid_cycle_counter": "iterateTrapezoidCycleCounter",
                "plan_discard_current_block": "discardCurrentBlock"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "st_go_idle",
                "plan_discard_current_block",
                "iterate_trapezoid_cycle_counter",
                "plan_get_current_block",
                "dirn_wr",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_step_write_08005760",
            "code": "\nvoid initialize_step_write_08005760(void)\n\n{\n  step_wr(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_step_write_08005760"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_step_08005778",
            "code": "\nvoid initializeStep_08005778(void)\n\n{\n  step_wr(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_step_08005778"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_stepper_motor_08005790",
            "code": "\nvoid initializeStepperMotor_08005790(void)\n\n{\n  stepper_motor_enable();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setStepPulseDelay(0x69);\n    setStepPulseTime((DAT_20000ec9 + 5) * 0x15);\n    enableStepInterrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_stepper_motor_08005790",
                "set_step_pulse_delay": "setStepPulseDelay",
                "set_step_pulse_time": "setStepPulseTime",
                "step_isr_enable": "enableStepInterrupt"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "st_cycle_start"
            ],
            "called": [
                "step_isr_enable",
                "stepper_motor_enable",
                "set_step_pulse_delay",
                "set_step_pulse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "disable_stepper_motor_080057e4",
            "code": "\nvoid disableStepperMotor_080057e4(void)\n\n{\n  disableStepISR();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    disableStepperMotor_080057e4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_080057e4",
                "step_isr_disable": "disableStepISR",
                "stepper_motor_disable": "disableStepperMotor"
            },
            "calling": [
                "mc_reset",
                "limits_go_home",
                "st_init",
                "step_period_isr"
            ],
            "called": [
                "step_isr_disable",
                "stepper_motor_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initializeData_08005814(void)\n\n{\n  memset(&DAT_20000e14,0,0x24);\n  configureStepEventsPerMinute(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "set_step_events_per_minute": "configureStepEventsPerMinute"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "memset",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_device_0800583c",
            "code": "\nvoid initializeDevice_0800583c(void)\n\n{\n  step_wr(DAT_20000ed4);\n  st_wake_up();\n  st_go_idle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_device_0800583c"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "st_go_idle",
                "st_wake_up",
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "update_data_and_wake_0800585c",
            "code": "\nvoid update_data_and_wake_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    st_wake_up();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "update_data_and_wake_0800585c"
            },
            "calling": [
                "mc_line",
                "protocol_execute_runtime",
                "mc_go_home"
            ],
            "called": [
                "st_wake_up"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid updateStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_cycle_080058a0",
            "code": "\nvoid initializeCycle_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    plan_cycle_reinitialize(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    set_step_events_per_minute(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_cycle_080058a0"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "plan_cycle_reinitialize",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_and_update_flags_08005900",
            "code": "\nundefined4 check_and_update_flags_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        reset_machine();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_and_update_flags_08005900",
                "param_1": "byte_value",
                "mc_reset": "reset_machine"
            },
            "calling": [
                "serial_read"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid executeSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "make_afl_call_08005984",
            "code": "\nundefined4 makeAflCall_08005984(undefined4 inputValue)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_20000e44 == 0) {\n    returnValue = aflCall(1,inputValue,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005984": "make_afl_call_08005984",
                "param_1": "inputValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n\nundefined4 initializeSystem_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  configureSystemTimer(16000);\n  setInterruptPriorityGrouping(3);\n  initializeMSP();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "HAL_SYSTICK_Config": "configureSystemTimer",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_MspInit": "initializeMSP"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "reset_peripheral_080059f8",
            "code": "\n\n\nundefined4 resetPeripheral_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  HAL_MspDeInit();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "reset_peripheral_080059f8"
            },
            "calling": [],
            "called": [
                "HAL_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "HAL_DeInit"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_data_value_08005a68",
            "code": "\nvoid incrementDataValue_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_data_value_08005a68"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_data_08005a84",
            "code": "\nundefined4 get_data_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_data_08005a84"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "SysTick_Handler",
                "get_current_usecs",
                "HAL_RCC_ClockConfig",
                "HAL_Delay"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "delay_until_08005a98",
            "code": "\nvoid delayUntil_08005a98(int delay_ms)\n\n{\n  int start_time;\n  uint current_time;\n  \n  start_time = HAL_GetTick();\n  do {\n    current_time = HAL_GetTick();\n  } while (current_time < (uint)(delay_ms + start_time));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "delay_until_08005a98",
                "param_1": "delay_ms",
                "iVar1": "start_time",
                "uVar2": "current_time"
            },
            "calling": [
                "_delay_ms"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "write_to_memory_08005bdc",
            "code": "\nvoid writeToMemory_08005bdc(byte address,uint value)\n\n{\n  if ((char)address < '\\0') {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "write_to_memory_08005bdc",
                "param_1": "address",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_set_memory_08005c30",
            "code": "\n\n\nbool checkAndSetMemory_08005c30(int value)\n\n{\n  bool isInRange;\n  \n  isInRange = value - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = value + -1;\n    writeToMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_set_memory_08005c30",
                "param_1": "value",
                "bVar1": "isInRange",
                "write_to_memory_08005bdc": "writeToMemory"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_and_wait_for_conditions_08005cec",
            "code": "\n\n\nundefined4 check_and_wait_for_conditions_08005cec(uint *conditions)\n\n{\n  int initialTime;\n  uint currentTime;\n  \n  if ((*conditions & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (conditions[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 5000U <= currentTime) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)conditions[1],_DAT_40023800));\n      if (conditions[1] == 1) {\n        initialTime = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (initialTime + 5000U <= currentTime) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialTime = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (initialTime + 5000U <= currentTime) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*conditions & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (conditions[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (conditions[3] == 0) {\n      _DAT_42470000 = 0;\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 100U <= currentTime) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = conditions[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*conditions & 8) != 0) {\n    if (conditions[5] == 0) {\n      _DAT_42470e80 = 0;\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*conditions & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    initialTime = HAL_GetTick();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      currentTime = HAL_GetTick();\n      if (initialTime + 100U <= currentTime) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    initialTime = HAL_GetTick();\n    while ((_DAT_40023870 & 2) != 0) {\n      currentTime = HAL_GetTick();\n      if (initialTime + 5000U <= currentTime) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)conditions[2]);\n    if (conditions[2] == 1) {\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 5000U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 5000U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (conditions[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (conditions[6] == 2) {\n      _DAT_42470060 = 0;\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 100U <= currentTime) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           conditions[0xb] << 0x18 |\n           conditions[8] | conditions[9] << 6 | ((conditions[10] >> 1) - 1) * 0x10000 | conditions[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      initialTime = HAL_GetTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        currentTime = HAL_GetTick();\n        if (initialTime + 100U <= currentTime) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_and_wait_for_conditions_08005cec",
                "param_1": "conditions",
                "iVar1": "initialTime",
                "uVar2": "currentTime"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "initialize_and_check_0800618c",
            "code": "\n\n\nundefined4 initializeAndCheck_0800618c(uint *ptr,uint size)\n\n{\n  int currentTick;\n  uint timeTick;\n  uint targetTick;\n  undefined8 hclkFreq;\n  \n  if ((_DAT_40023c00 & 0xf) < size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n    if ((*ptr & 1) != 0) {\n      if (ptr[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((ptr[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = ptr[1] | _DAT_40023808 & 0xfffffffc;\n      currentTick = HAL_GetTick();\n      targetTick = currentTick + 5000;\n      if (ptr[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          timeTick = HAL_GetTick();\n          if (targetTick <= timeTick) {\n            return 3;\n          }\n        }\n      }\n      else if (ptr[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          timeTick = HAL_GetTick();\n          if (targetTick <= timeTick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          timeTick = HAL_GetTick();\n          if (targetTick <= timeTick) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*ptr & 1) != 0) {\n      if (ptr[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (ptr[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = ptr[1] | _DAT_40023808 & 0xfffffffc;\n      currentTick = HAL_GetTick();\n      targetTick = currentTick + 5000;\n      if (ptr[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          timeTick = HAL_GetTick();\n          if (targetTick <= timeTick) {\n            return 3;\n          }\n        }\n      }\n      else if (ptr[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          timeTick = HAL_GetTick();\n          if (targetTick <= timeTick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          timeTick = HAL_GetTick();\n          if (targetTick <= timeTick) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*ptr & 2) != 0) {\n    _DAT_40023808 = ptr[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*ptr & 4) != 0) {\n    _DAT_40023808 = ptr[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*ptr & 8) != 0) {\n    _DAT_40023808 = ptr[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  check_and_set_memory_08005c30((uint)hclkFreq / 1000,(int)((ulonglong)hclkFreq >> 0x20),(uint)hclkFreq * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "initialize_and_check_0800618c",
                "param_1": "ptr",
                "param_2": "size",
                "iVar1": "currentTick",
                "uVar2": "timeTick",
                "uVar3": "targetTick",
                "uVar4": "hclkFreq"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_08005c30",
                "HAL_RCC_GetHCLKFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "initialize_gpio_port_0800640c",
            "code": "\n\n\nvoid initializeGPIOPort_0800640c(int portNumber,uint pinMask1,uint pinMask2)\n\n{\n  undefined4 mode;\n  undefined4 pupd;\n  undefined4 otype;\n  undefined4 ospeed;\n  undefined4 ocnf;\n  \n  if (portNumber == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    mode = 0x100;\n    pupd = 2;\n    ospeed = 3;\n    otype = 0;\n    ocnf = 0;\n    HAL_GPIO_Init(0x40020000,&mode);\n    _DAT_40023808 = pinMask2 | pinMask1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    mode = 0x200;\n    pupd = 2;\n    ospeed = 3;\n    otype = 0;\n    ocnf = 0;\n    HAL_GPIO_Init(0x40020800,&mode);\n    _DAT_40023808 = pinMask1 | pinMask2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "initialize_gpio_port_0800640c",
                "param_1": "portNumber",
                "param_2": "pinMask1",
                "param_3": "pinMask2",
                "local_1c": "mode",
                "local_18": "pupd",
                "local_14": "otype",
                "local_10": "ospeed",
                "local_c": "ocnf"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_speed_080064ec",
            "code": "\n\n\nuint calculateClockSpeed_080064ec(void)\n\n{\n  uint uVar1;\n  uint clockSpeed;\n  \n  uVar1 = _DAT_40023808 & 0xc;\n  if (uVar1 == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockSpeed / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (uVar1 < 9) {\n    if (uVar1 == 0) {\n      return 16000000;\n    }\n    if (uVar1 == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_speed_080064ec",
                "local_c": "clockSpeed"
            },
            "calling": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "get_sys_clock_frequency_08006628",
            "code": "\n\n\nuint getSysClockFrequency_08006628(void)\n\n{\n  uint sysClockFreq;\n  \n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000000 = sysClockFreq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return sysClockFreq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "get_sys_clock_frequency_08006628",
                "uVar1": "sysClockFreq"
            },
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "get_adjusted_hclk_frequency_08006680",
            "code": "\n\n\nuint getAdjustedHCLKFrequency_08006680(void)\n\n{\n  uint frequency;\n  \n  frequency = getHCLKFrequency();\n  return frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "get_adjusted_hclk_frequency_08006680",
                "uVar1": "frequency",
                "HAL_RCC_GetHCLKFreq": "getHCLKFrequency"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "get_clock_frequency_080066cc",
            "code": "\n\n\nuint getClockFrequency_080066cc(void)\n\n{\n  uint clockFreq;\n  \n  clockFreq = getSystemClockFrequency();\n  return clockFreq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "get_clock_frequency_080066cc",
                "uVar1": "clockFreq",
                "HAL_RCC_GetHCLKFreq": "getSystemClockFrequency"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_param_bits_08006950",
            "code": "\n\n\nvoid setParamBits_08006950(uint input)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_param_bits_08006950",
                "param_1": "input"
            },
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "extract_bits_from_register_08006998",
            "code": "\n\n\nuint extract_bits_from_register_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "extract_bits_from_register_08006998"
            },
            "calling": [
                "HAL_NVIC_GetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_memory_080069b4",
            "code": "\nvoid setBitInMemory_080069b4(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_EnableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_080069e4",
            "code": "\nvoid setBit_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_DisableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_value_08006a18",
            "code": "\nbool checkBitValue_08006a18(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_value_08006a18",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_GetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_memory_08006a58",
            "code": "\nvoid setBitInMemory_08006a58(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_SetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_value_08006a8c",
            "code": "\nvoid setBitValue_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_value_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_set_08006ac0",
            "code": "\nbool checkBitSet_08006ac0(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_set_08006ac0",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_GetActive"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "write_data_08006b00",
            "code": "\nvoid writeData_08006b00(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "write_data_08006b00",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "SysTick_Config",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extracted_byte_08006b54",
            "code": "\nbyte extractedByte_08006b54(byte inputByte)\n\n{\n  byte outputByte;\n  \n  if ((char)inputByte < '\\0') {\n    outputByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    outputByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return outputByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extracted_byte_08006b54",
                "param_1": "inputByte",
                "bVar1": "outputByte"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "apply_bitwise_operations_08006ba0",
            "code": "\nuint applyBitwiseOperations_08006ba0(uint bitCount,uint input1,uint input2)\n\n{\n  uint shiftAmount;\n  \n  bitCount = bitCount & 7;\n  shiftAmount = 7 - bitCount;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (bitCount + 4 < 7) {\n    bitCount = 0;\n  }\n  else {\n    bitCount = bitCount - 3;\n  }\n  return input2 & (1 << (bitCount & 0xff)) - 1U |\n         ((1 << (shiftAmount & 0xff)) - 1U & input1) << (bitCount & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "apply_bitwise_operations_08006ba0",
                "param_1": "bitCount",
                "param_2": "input1",
                "param_3": "input2",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extractBits_08006c04(uint input,uint bitOffset,uint *output1,uint *output2)\n\n{\n  uint remainingBits;\n  \n  bitOffset = bitOffset & 7;\n  remainingBits = 7 - bitOffset;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (bitOffset + 4 < 7) {\n    bitOffset = 0;\n  }\n  else {\n    bitOffset = bitOffset - 3;\n  }\n  *output1 = (1 << (remainingBits & 0xff)) - 1U & input >> (bitOffset & 0xff);\n  *output2 = (1 << (bitOffset & 0xff)) - 1U & input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "bitOffset",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "remainingBits"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "run_infinite_loop_08006c70",
            "code": "\nvoid runInfiniteLoop_08006c70(void)\n\n{\n  synchronizeData(0xf);\n  synchronizeData(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "run_infinite_loop_08006c70",
                "DataSynchronizationBarrier": "synchronizeData"
            },
            "calling": [
                "HAL_NVIC_SystemReset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_initialize_priority_08006c9c",
            "code": "\n\n\nbool checkAndInitializePriority_08006c9c(int value)\n\n{\n  bool isInRange;\n  \n  isInRange = value - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = value + -1;\n    setInterruptPriority(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_initialize_priority_08006c9c",
                "param_1": "value",
                "bVar1": "isInRange",
                "NVIC_SetPriority": "setInterruptPriority"
            },
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "configure_interrupt_priority_group_08006ce0",
            "code": "\nvoid configureInterruptPriorityGroup_08006ce0(undefined4 priorityGroupSetting)\n\n{\n  NVIC_SetPriorityGrouping(priorityGroupSetting);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "configure_interrupt_priority_group_08006ce0",
                "param_1": "priorityGroupSetting"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "set_priority_encoding_08006cf6",
            "code": "\nvoid setPriorityEncoding_08006cf6(char interruptNumber,undefined4 priorityGroup,undefined4 preemptPriority)\n\n{\n  undefined4 priorityGrouping;\n  \n  priorityGrouping = getPriorityGrouping();\n  priorityGrouping = encodePriority(priorityGrouping,priorityGroup,preemptPriority);\n  setPriority((int)interruptNumber,priorityGrouping);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "set_priority_encoding_08006cf6",
                "param_1": "interruptNumber",
                "param_2": "priorityGroup",
                "param_3": "preemptPriority",
                "uVar1": "priorityGrouping",
                "NVIC_GetPriorityGrouping": "getPriorityGrouping",
                "NVIC_EncodePriority": "encodePriority",
                "NVIC_SetPriority": "setPriority"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [
                "NVIC_SetPriority",
                "NVIC_EncodePriority",
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_in_memory_08006d2e",
            "code": "\nvoid setBitInMemory_08006d2e(char value)\n\n{\n  setBit((address)value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "param_1": "value",
                "set_bit_in_memory_080069b4": "setBit",
                "int": "address"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "disable_interrupt_08006d4a",
            "code": "\nvoid disableInterrupt_08006d4a(char interruptNumber)\n\n{\n  NVIC_DisableIRQ((int)interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "disable_interrupt_08006d4a",
                "param_1": "interruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "reset_system_08006d66",
            "code": "\nvoid reset_system_08006d66(void)\n\n{\n  reset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "reset_system_08006d66",
                "NVIC_SystemReset": "reset"
            },
            "calling": [],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "initialize_sys_tick_08006d72",
            "code": "\nundefined4 initializeSysTick_08006d72(undefined4 interval)\n\n{\n  undefined4 status;\n  \n  status = SysTick_Config(interval);\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "initialize_sys_tick_08006d72",
                "param_1": "interval",
                "uVar1": "status"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "SysTick_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_priority_grouping_08006d8a",
            "code": "\nundefined4 getPriorityGrouping_08006d8a(void)\n\n{\n  undefined4 priorityGrouping;\n  \n  priorityGrouping = NVIC_GetPriorityGrouping();\n  return priorityGrouping;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_priority_grouping_08006d8a",
                "uVar1": "priorityGrouping"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "decode_and_set_priority_08006d98",
            "code": "\nvoid decode_and_set_priority_08006d98(char input_char,undefined4 priority_param_1,undefined4 priority_param_2,undefined4 priority_param_3)\n\n{\n  undefined4 priority_value;\n  \n  priority_value = NVIC_GetPriority((int)input_char);\n  NVIC_DecodePriority(priority_value,priority_param_1,priority_param_2,priority_param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "decode_and_set_priority_08006d98",
                "param_1": "input_char",
                "param_2": "priority_param_1",
                "param_3": "priority_param_2",
                "param_4": "priority_param_3",
                "uVar1": "priority_value"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriority",
                "NVIC_DecodePriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_ir_qas_pending_08006dc4",
            "code": "\nvoid setIRQasPending_08006dc4(char IRQ_number)\n\n{\n  NVIC_SetPendingIRQ((int)IRQ_number);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_ir_qas_pending_08006dc4",
                "param_1": "IRQ_number"
            },
            "calling": [],
            "called": [
                "NVIC_SetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "get_pending_irq_status_08006de0",
            "code": "\nundefined4 getPendingIRQStatus_08006de0(char irqNumber)\n\n{\n  undefined4 pendingIRQStatus;\n  \n  pendingIRQStatus = NVIC_GetPendingIRQ((int)irqNumber);\n  return pendingIRQStatus;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "get_pending_irq_status_08006de0",
                "param_1": "irqNumber",
                "uVar1": "pendingIRQStatus"
            },
            "calling": [],
            "called": [
                "NVIC_GetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "clear_pending_irq_08006dfe",
            "code": "\nvoid clearPendingIRQ_08006dfe(char irqNumber)\n\n{\n  NVIC_ClearPendingIRQ((int)irqNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "clear_pending_irq_08006dfe",
                "param_1": "irqNumber"
            },
            "calling": [],
            "called": [
                "NVIC_ClearPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "get_active_interrupt_08006e1a",
            "code": "\nundefined4 get_active_interrupt_08006e1a(char interrupt_number)\n\n{\n  undefined4 active_interrupt_status;\n  \n  active_interrupt_status = NVIC_GetActive((int)interrupt_number);\n  return active_interrupt_status;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_08006e1a",
                "param_1": "interrupt_number",
                "uVar1": "active_interrupt_status"
            },
            "calling": [],
            "called": [
                "NVIC_GetActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_param_bits_08006e88",
            "code": "\n\n\nvoid updateParamBits_08006e88(uint *paramArray,uint *bitArray)\n\n{\n  uint bitMask;\n  uint bitValue;\n  int index;\n  uint bitIndex;\n  \n  for (bitIndex = 0; bitIndex < 0x10; bitIndex = bitIndex + 1) {\n    bitMask = 1 << (bitIndex & 0xff);\n    bitValue = *bitArray & bitMask;\n    if (bitValue == bitMask) {\n      if ((bitArray[1] == 2) || (bitArray[1] == 0x12)) {\n        bitMask = bitArray[4];\n        paramArray[(bitIndex >> 3) + 8] = paramArray[(bitIndex >> 3) + 8] & ~(0xf << ((bitIndex & 7) << 2));\n        paramArray[(bitIndex >> 3) + 8] = paramArray[(bitIndex >> 3) + 8] | bitMask << ((bitIndex & 7) << 2);\n      }\n      *paramArray = *paramArray & ~(3 << ((bitIndex & 0x7f) << 1));\n      *paramArray = *paramArray | (bitArray[1] & 3) << ((bitIndex & 0x7f) << 1);\n      if ((((bitArray[1] == 1) || (bitArray[1] == 2)) || (bitArray[1] == 0x11)) || (bitArray[1] == 0x12)\n         ) {\n        paramArray[2] = paramArray[2] & ~(3 << ((bitIndex & 0x7f) << 1));\n        paramArray[2] = paramArray[2] | bitArray[3] << ((bitIndex & 0x7f) << 1);\n        paramArray[1] = paramArray[1] & ~(1 << (bitIndex & 0xff));\n        paramArray[1] = paramArray[1] | (bitArray[1] >> 4 & 1) << (bitIndex & 0xff);\n      }\n      paramArray[3] = paramArray[3] & ~(3 << ((bitIndex & 0x7f) << 1));\n      paramArray[3] = paramArray[3] | bitArray[2] << ((bitIndex & 0x7f) << 1);\n      if ((bitArray[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((bitIndex & 3) << 2)) & *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800);\n        if (paramArray == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (paramArray == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (paramArray == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (paramArray == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (paramArray == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (paramArray == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (paramArray == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (paramArray == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (paramArray == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (paramArray == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800) =\n             index << ((bitIndex & 3) << 2) | *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitValue & _DAT_40013c00;\n        _DAT_40013c04 = ~bitValue & _DAT_40013c04;\n        if ((bitArray[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitValue | _DAT_40013c00;\n        }\n        if ((bitArray[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitValue | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitValue & _DAT_40013c08;\n        _DAT_40013c0c = ~bitValue & _DAT_40013c0c;\n        if ((bitArray[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitValue | _DAT_40013c08;\n        }\n        if ((bitArray[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitValue | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_param_bits_08006e88",
                "param_1": "paramArray",
                "param_2": "bitArray",
                "uVar1": "bitMask",
                "uVar2": "bitValue",
                "iVar3": "index",
                "local_c": "bitIndex"
            },
            "calling": [
                "HAL_RCC_MCOConfig",
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "set_param_value_0800733e",
            "code": "\nvoid setParamValue_0800733e(int objectPtr,undefined2 value,char isSecondary)\n\n{\n  if (isSecondary == '\\0') {\n    *(undefined2 *)(objectPtr + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(objectPtr + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "objectPtr",
                "param_2": "value",
                "param_3": "isSecondary"
            },
            "calling": [
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_if_param_meets_condition_0800738e",
            "code": "\n\n\nvoid updateIfParamMeetsCondition_0800738e(ushort inputValue)\n\n{\n  if ((inputValue & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)inputValue;\n    handleExternalInterrupt(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_if_param_meets_condition_0800738e",
                "param_1": "inputValue",
                "HAL_GPIO_EXTI_Callback": "handleExternalInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid setBitInMemory_080073d4(uint memoryAddress)\n\n{\n  *(short *)(((int)memoryAddress >> 4) * 0x400 + 0x4002001a) = (short)(1 << (memoryAddress & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "update_memory_08007402",
            "code": "\nvoid updateMemory_08007402(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "update_memory_08007402",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "run_infinite_loop_08007430",
            "code": "\nvoid runInfiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "run_infinite_loop_08007430"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initializeSystem_08007436(void)\n\n{\n  int iVar1;\n  undefined4 oscillatorConfig;\n  undefined4 externalOscConfig;\n  undefined4 oscillatiorType;\n  undefined4 oscFrequency;\n  undefined4 clkPrescaler;\n  undefined4 ahbPrescaler;\n  undefined4 apb1Clock;\n  undefined4 apb2Clock;\n  undefined4 sysclockSource;\n  undefined4 pllMultiplier;\n  undefined4 pllDivider;\n  undefined4 pllSource;\n  undefined4 adcPrescaler;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  oscillatorConfig = 1;\n  externalOscConfig = 1;\n  oscillatiorType = 2;\n  oscFrequency = 0x400000;\n  clkPrescaler = 8;\n  ahbPrescaler = 0x150;\n  apb1Clock = 2;\n  apb2Clock = 7;\n  iVar1 = HAL_RCC_OscConfig(&oscillatorConfig);\n  if (iVar1 != 0) {\n    Error_Handler();\n  }\n  sysclockSource = 0xf;\n  pllMultiplier = 2;\n  pllDivider = 0;\n  pllSource = 0x1400;\n  adcPrescaler = 0x1000;\n  iVar1 = HAL_RCC_ClockConfig(&sysclockSource,5);\n  if (iVar1 != 0) {\n    Error_Handler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "oscillatorConfig",
                "local_48": "externalOscConfig",
                "local_34": "oscillatiorType",
                "local_30": "oscFrequency",
                "local_2c": "clkPrescaler",
                "local_28": "ahbPrescaler",
                "local_24": "apb1Clock",
                "local_20": "apb2Clock",
                "local_1c": "sysclockSource",
                "local_18": "pllMultiplier",
                "local_14": "pllDivider",
                "local_10": "pllSource",
                "local_c": "adcPrescaler"
            },
            "calling": [
                "main"
            ],
            "called": [
                "Error_Handler",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "handle_interrupt_080074c8",
            "code": "\nvoid handleInterrupt_080074c8(uint interruptFlags)\n\n{\n  if ((interruptFlags & 1) != 0) {\n    setGpio(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((interruptFlags & 0x1e) != 0)) {\n    handleLimitsInterrupt();\n  }\n  if ((DAT_20000e50 != 0) && ((interruptFlags & 0x80) != 0)) {\n    handleButtonsInterrupt(interruptFlags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "handle_interrupt_080074c8",
                "param_1": "interruptFlags",
                "gpio_set": "setGpio",
                "limits_isr": "handleLimitsInterrupt",
                "buttons_isr": "handleButtonsInterrupt"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_set",
                "limits_isr",
                "buttons_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "clear_gpio_if_odd_08007520",
            "code": "\nvoid clearGPIOIfOdd_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    clearGPIO(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "clear_gpio_if_odd_08007520",
                "param_1": "inputValue",
                "gpio_clr": "clearGPIO"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_clr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_hardware_08007540",
            "code": "\nundefined4 initializeHardware_08007540(void)\n\n{\n  initializeHAL();\n  configureSystemClock();\n  initializeGPIO();\n  initializeTimers();\n  initializeDebouncer();\n  initializeUSART();\n  startServer(0);\n  runGRBL();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_hardware_08007540",
                "HAL_Init": "initializeHAL",
                "SystemClock_Config": "configureSystemClock",
                "gpio_init": "initializeGPIO",
                "timers_init": "initializeTimers",
                "debounce_init": "initializeDebouncer",
                "usart_init": "initializeUSART",
                "startForkserver": "startServer",
                "grbl_main": "runGRBL"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "grbl_main",
                "debounce_init",
                "HAL_Init",
                "timers_init",
                "startForkserver",
                "gpio_init",
                "SystemClock_Config",
                "usart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_hardware_0800756c",
            "code": "\n\n\nvoid initializeHardware_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_hardware_0800756c"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bitfield_080076c8",
            "code": "\nvoid updateBitfield_080076c8(uint inputValue)\n\n{\n  *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) ^ 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bitfield_080076c8",
                "param_1": "inputValue"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "check_and_toggle_gpio_08007756",
            "code": "\nvoid check_and_toggle_gpio_08007756(void)\n\n{\n  uint current_tick;\n  \n  current_tick = get_current_tick();\n  if ((current_tick & 0x1ff) == 0) {\n    toggle_gpio(0x3c);\n  }\n  if ((current_tick & 0xf) == 0) {\n    handle_debounce_isr();\n  }\n  increment_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "check_and_toggle_gpio_08007756",
                "uVar1": "current_tick",
                "HAL_GetTick": "get_current_tick",
                "gpio_toggle": "toggle_gpio",
                "debounce_isr": "handle_debounce_isr",
                "HAL_IncTick": "increment_tick"
            },
            "calling": [],
            "called": [
                "debounce_isr",
                "gpio_toggle",
                "HAL_IncTick",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_gpio_0800778c",
            "code": "\n\n\nvoid initializeGPIO_0800778c(void)\n\n{\n  int index;\n  int pinConfig;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  undefined4 arg4;\n  uint *pinAddress;\n  uint local_c;\n  \n  for (local_c = 0; local_c < 0x11; local_c = local_c + 1) {\n    index = local_c * 0x18;\n    pinAddress = (uint *)(&DAT_0800bcbc + index);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*pinAddress >> 4 & 0xff);\n    pinConfig = 1 << (*pinAddress & 0xf);\n    arg1 = *(undefined4 *)(&DAT_0800bcc0 + index);\n    arg2 = *(undefined4 *)(&DAT_0800bcc4 + index);\n    arg3 = *(undefined4 *)(&DAT_0800bcc8 + index);\n    arg4 = *(undefined4 *)(&DAT_0800bccc + index);\n    HAL_GPIO_Init(((*pinAddress >> 4) + 0x100080) * 0x400,&pinConfig);\n    if (-1 < (int)pinAddress[5]) {\n      HAL_GPIO_WritePin(((*pinAddress >> 4) + 0x100080) * 0x400,1 << (*pinAddress & 0xf) & 0xffff,\n                        pinAddress[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_gpio_0800778c",
                "iVar1": "index",
                "local_24": "pinConfig",
                "local_20": "arg1",
                "local_1c": "arg2",
                "local_18": "arg3",
                "local_14": "arg4",
                "local_10": "pinAddress"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_GPIO_WritePin",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_08007854",
            "code": "\nuint check_bit_08007854(uint input_value)\n\n{\n  return *(uint *)(((int)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "param_1": "input_value"
            },
            "calling": [
                "debounce_input"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "read_gpio_values_08007884",
            "code": "\nuint read_gpio_values_08007884(void)\n\n{\n  int gpio_value_0x36;\n  int gpio_value_0x37;\n  int gpio_value_0x38;\n  int gpio_value_0x39;\n  int gpio_value_0xf;\n  uint gpio_value_0;\n  \n  gpio_value_0x36 = gpio_rd(0x36);\n  gpio_value_0x37 = gpio_rd(0x37);\n  gpio_value_0x38 = gpio_rd(0x38);\n  gpio_value_0x39 = gpio_rd(0x39);\n  gpio_value_0xf = gpio_rd(0xf);\n  gpio_value_0 = gpio_rd(0);\n  return gpio_value_0 | gpio_value_0x36 << 4 | gpio_value_0x37 << 3 | gpio_value_0x38 << 2 | gpio_value_0x39 << 1 | gpio_value_0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "read_gpio_values_08007884",
                "iVar1": "gpio_value_0x36",
                "iVar2": "gpio_value_0x37",
                "iVar3": "gpio_value_0x38",
                "iVar4": "gpio_value_0x39",
                "iVar5": "gpio_value_0xf",
                "uVar6": "gpio_value_0"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_combined_value_080078f4",
            "code": "\nuint calculateCombinedValue_080078f4(void)\n\n{\n  int index;\n  uint combinedValue;\n  \n  combinedValue = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    combinedValue = *(uint *)(&DAT_20000e54 + index * 4) | combinedValue;\n  }\n  return combinedValue;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_combined_value_080078f4",
                "local_10": "index",
                "local_c": "combinedValue"
            },
            "calling": [
                "debounce_isr",
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_input_and_handle_interrupts_08007930",
            "code": "\nvoid updateInputAndHandleInterrupts_08007930(void)\n\n{\n  int inputIndex;\n  uint previousInput;\n  undefined4 debouncedInput;\n  uint currentInput;\n  uint changedInput;\n  \n  inputIndex = DAT_20000e68;\n  previousInput = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    debouncedInput = getDebouncedInput();\n    *(undefined4 *)(&DAT_20000e54 + inputIndex * 4) = debouncedInput;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    currentInput = getCurrentDebouncedInput();\n    previousInput = DAT_20000e64;\n    if (currentInput != DAT_20000e64) {\n      changedInput = ~currentInput & DAT_20000e64;\n      if ((~DAT_20000e64 & currentInput) != 0) {\n        handleInterrupt(~DAT_20000e64 & currentInput);\n      }\n      previousInput = currentInput;\n      if (changedInput != 0) {\n        clearOddGpio(changedInput);\n      }\n    }\n  }\n  DAT_20000e64 = previousInput;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_input_and_handle_interrupts_08007930",
                "iVar1": "inputIndex",
                "uVar2": "previousInput",
                "uVar3": "debouncedInput",
                "uVar4": "currentInput",
                "uVar5": "changedInput",
                "debounce_input": "getDebouncedInput",
                "debounce_rd": "getCurrentDebouncedInput",
                "handle_interrupt_080074c8": "handleInterrupt",
                "clear_gpio_if_odd_08007520": "clearOddGpio"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "FUN_080074c8",
                "debounce_rd",
                "FUN_08007520",
                "debounce_input"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_data_080079c0",
            "code": "\nvoid initializeData_080079c0(void)\n\n{\n  memset(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0"
            },
            "calling": [
                "main"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_at_index_080079e0",
            "code": "\nvoid setBitAtIndex_080079e0(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_at_index_080079e0",
                "param_1": "byteValue"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "set_flags_based_on_address_08007a10",
            "code": "\n\n\nvoid setFlagsBasedOnAddress_08007a10(undefined *address)\n\n{\n  if (address == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (address == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (address == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "set_flags_based_on_address_08007a10",
                "param_1": "address"
            },
            "calling": [
                "g540_timer_init",
                "step_timer_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "configure_nvic_08007a70",
            "code": "\nvoid configureNVIC_08007a70(undefined *address,undefined4 priorityGroup,undefined4 subPriority)\n\n{\n  undefined interruptID;\n  \n  if (address == (undefined *)0x40000000) {\n    interruptID = 0x1c;\n  }\n  else if (address == (undefined *)0x40000400) {\n    interruptID = 0x1d;\n  }\n  else {\n    if (address != &DAT_40000800) {\n      return;\n    }\n    interruptID = 0x1e;\n  }\n  HAL_NVIC_SetPriority(interruptID,priorityGroup,subPriority);\n  NVIC_EnableIRQ(interruptID);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "configure_nvic_08007a70",
                "param_1": "address",
                "param_2": "priorityGroup",
                "param_3": "subPriority",
                "local_c": "interruptID"
            },
            "calling": [
                "step_timer_init"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_clock_08007ad0",
            "code": "\n\n\nvoid initialize_clock_08007ad0(void)\n\n{\n  configure_tim_clock(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  configure_tim_interrupt(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_clock_08007ad0",
                "enable_tim_clock": "configure_tim_clock",
                "enable_tim_interrupt": "configure_tim_interrupt"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_interrupt",
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "update_flags_08007b70",
            "code": "\n\n\nvoid updateFlags_08007b70(void)\n\n{\n  uint flag;\n  \n  flag = 1;\n  if (_DAT_40000034 != 0) {\n    flag = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flag = flag | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flag;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "update_flags_08007b70",
                "local_c": "flag"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_bitwise_flags_08007bc2",
            "code": "\n\n\nvoid clearBitwiseFlags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_bitwise_flags_08007bc2"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_data_08007bf0",
            "code": "\n\n\nvoid update_data_08007bf0(uint value)\n\n{\n  _DAT_4000002c = value;\n  if (value <= _DAT_40000024) {\n    _DAT_40000024 = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_data_08007bf0",
                "param_1": "value"
            },
            "calling": [
                "set_step_events_per_minute"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "initialize_data_08007c40",
            "code": "\n\n\nvoid initializeData_08007c40(undefined4 inputValue)\n\n{\n  _DAT_40000034 = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "initialize_data_08007c40",
                "param_1": "inputValue"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "store_param_in_global_variable_08007c5e",
            "code": "\n\n\nvoid storeParamInGlobalVariable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "store_param_in_global_variable_08007c5e",
                "param_1": "value"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "check_and_execute_isr_08007c7c",
            "code": "\n\n\nvoid check_and_execute_isr_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    execute_delay_isr();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    execute_pulse_isr();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    execute_period_isr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "check_and_execute_isr_08007c7c",
                "step_delay_isr": "execute_delay_isr",
                "step_pulse_isr": "execute_pulse_isr",
                "step_period_isr": "execute_period_isr"
            },
            "calling": [],
            "called": [
                "step_pulse_isr",
                "step_period_isr",
                "step_delay_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_timers_08007d08",
            "code": "\n\n\nvoid initialize_timers_08007d08(void)\n\n{\n  enable_tim_clock(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_timers_08007d08"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_and_values_08007da8",
            "code": "\n\n\nvoid setFlagsAndValues_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_and_values_08007da8"
            },
            "calling": [
                "timers_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_and_start_timers_08007e08",
            "code": "\nvoid initialize_and_start_timers_08007e08(void)\n\n{\n  initialize_step_timer();\n  initialize_g540_timer();\n  start_g540_timer();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_and_start_timers_08007e08",
                "step_timer_init": "initialize_step_timer",
                "g540_timer_init": "initialize_g540_timer",
                "g540_timer_start": "start_g540_timer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "g540_timer_init",
                "g540_timer_start",
                "step_timer_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_flag_08007e1c",
            "code": "\n\n\nvoid waitForFlag_08007e1c(byte inputByte)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)inputByte;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_08007e1c",
                "param_1": "inputByte"
            },
            "calling": [
                "__io_putchar",
                "serial_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_flag_set_08007e58",
            "code": "\n\n\nbool isFlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_flag_set_08007e58"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_least_significant_byte_08007e84",
            "code": "\n\n\nuint get_least_significant_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_least_significant_byte_08007e84"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_flags_based_on_param_08007ea4",
            "code": "\n\n\nvoid updateFlagsBasedOnParam_08007ea4(undefined *param)\n\n{\n  if (param == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (param == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (param == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (param == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (param == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (param == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_flags_based_on_param_08007ea4",
                "param_1": "param"
            },
            "calling": [
                "usart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_params_08007f54",
            "code": "\nvoid calculateClockParams_08007f54(int baseAddress,int multiplier)\n\n{\n  ulonglong calculatedValue1;\n  int calculatedValue2;\n  int calculatedValue3;\n  undefined8 frequency;\n  \n  if ((*(uint *)(baseAddress + 0xc) & 0x8000) == 0) {\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      frequency = getPCLK1Frequency();\n      calculatedValue1 = (ulonglong)(uint)((int)frequency * 0x19) / (ulonglong)(uint)(multiplier << 2);\n      calculatedValue2 = getPCLK1Frequency\n                        ((int)frequency,(int)((ulonglong)frequency >> 0x20),(int)(calculatedValue1 * 0x51eb851f));\n      calculatedValue3 = getPCLK1Frequency();\n      *(uint *)(baseAddress + 8) =\n           (int)(calculatedValue1 / 100) << 4 |\n           (((uint)(calculatedValue2 * 0x19) / (uint)(multiplier << 2) +\n            (int)(((ulonglong)(uint)(calculatedValue3 * 0x19) / (ulonglong)(uint)(multiplier << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    frequency = getPCLK2Frequency();\n    calculatedValue1 = (ulonglong)(uint)((int)frequency * 0x19) / (ulonglong)(uint)(multiplier << 2);\n    calculatedValue2 = getPCLK2Frequency\n                      ((int)frequency,(int)((ulonglong)frequency >> 0x20),(int)(calculatedValue1 * 0x51eb851f));\n    calculatedValue3 = getPCLK2Frequency();\n    *(uint *)(baseAddress + 8) =\n         (int)(calculatedValue1 / 100) << 4 |\n         (((uint)(calculatedValue2 * 0x19) / (uint)(multiplier << 2) +\n          (int)(((ulonglong)(uint)(calculatedValue3 * 0x19) / (ulonglong)(uint)(multiplier << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      frequency = getPCLK1Frequency();\n      calculatedValue1 = (ulonglong)(uint)((int)frequency * 0x19) / (ulonglong)(uint)(multiplier << 1);\n      calculatedValue2 = getPCLK1Frequency\n                        ((int)frequency,(int)((ulonglong)frequency >> 0x20),(int)(calculatedValue1 * 0x51eb851f));\n      calculatedValue3 = getPCLK1Frequency();\n      *(uint *)(baseAddress + 8) =\n           (int)(calculatedValue1 / 100) << 4 |\n           (((uint)(calculatedValue2 * 0x19) / (uint)(multiplier << 1) +\n            (int)(((ulonglong)(uint)(calculatedValue3 * 0x19) / (ulonglong)(uint)(multiplier << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    frequency = getPCLK2Frequency();\n    calculatedValue1 = (ulonglong)(uint)((int)frequency * 0x19) / (ulonglong)(uint)(multiplier << 1);\n    calculatedValue2 = getPCLK2Frequency\n                      ((int)frequency,(int)((ulonglong)frequency >> 0x20),(int)(calculatedValue1 * 0x51eb851f));\n    calculatedValue3 = getPCLK2Frequency();\n    *(uint *)(baseAddress + 8) =\n         (int)(calculatedValue1 / 100) << 4 |\n         (((uint)(calculatedValue2 * 0x19) / (uint)(multiplier << 1) +\n          (int)(((ulonglong)(uint)(calculatedValue3 * 0x19) / (ulonglong)(uint)(multiplier << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_params_08007f54",
                "param_1": "baseAddress",
                "param_2": "multiplier",
                "uVar1": "calculatedValue1",
                "iVar2": "calculatedValue2",
                "iVar3": "calculatedValue3",
                "uVar4": "frequency",
                "HAL_RCC_GetPCLK1Freq": "getPCLK1Frequency",
                "HAL_RCC_GetPCLK2Freq": "getPCLK2Frequency"
            },
            "calling": [
                "usart_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "setup_usart_interface_08008190",
            "code": "\n\n\nvoid setup_usart_interface_08008190(void)\n\n{\n  enable_usart_clock(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  set_baud_rate(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "setup_usart_interface_08008190"
            },
            "calling": [
                "main"
            ],
            "called": [
                "enable_usart_clock",
                "set_baud_rate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "print_character_08008250",
            "code": "\nvoid print_character_08008250(undefined character)\n\n{\n  usart_putc(character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "print_character_08008250",
                "param_1": "character"
            },
            "calling": [
                "print_uint32_base10",
                "printPgmString",
                "printString",
                "print_base2",
                "printInteger",
                "printFloat"
            ],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "print_character_0800826a",
            "code": "\nundefined4 print_character_0800826a(undefined character)\n\n{\n  print_to_usart(character);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "print_character_0800826a",
                "param_1": "character",
                "usart_putc": "print_to_usart"
            },
            "calling": [],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "process_usart_data_08008286",
            "code": "\nundefined processUSARTData_08008286(void)\n\n{\n  undefined receivedData;\n  int dataAvailable;\n  \n  dataAvailable = isDataAvailable();\n  if (dataAvailable != 0) {\n    receivedData = getData();\n    dataAvailable = handleReceivedData(receivedData);\n    if (dataAvailable == 0) {\n      return receivedData;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "process_usart_data_08008286",
                "uVar1": "receivedData",
                "iVar2": "dataAvailable",
                "usart_tstc": "isDataAvailable",
                "usart_getc": "getData",
                "serial_rx_hook": "handleReceivedData"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "usart_tstc",
                "serial_rx_hook",
                "usart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_unsigned_dividend_080082d0",
            "code": "\nulonglong calculateUnsignedDividend_080082d0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  int shiftAmount1;\n  byte carry1;\n  uint temp1;\n  uint divisor1;\n  uint temp2;\n  uint dividend1;\n  uint temp3;\n  int shiftAmount2;\n  uint temp4;\n  uint shiftAmount3;\n  uint temp5;\n  uint carry2;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  dividend1 = remainder ^ 0x80000000;\n  temp4 = divisor << 1;\n  remainder = remainder << 1;\n  condition1 = ((divisor ^ dividend1) & 0x7fffffff) == 0;\n  condition2 = condition1 && dividend == quotient;\n  if (!condition1 || dividend != quotient) {\n    condition2 = (temp4 | dividend) == 0;\n  }\n  if (!condition2) {\n    condition2 = (remainder | quotient) == 0;\n  }\n  shiftAmount2 = (int)temp4 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftAmount2 == -1;\n  }\n  shiftAmount1 = (int)remainder >> 0x15;\n  if (!condition2) {\n    condition2 = shiftAmount1 == -1;\n  }\n  if (condition2) {\n    if (shiftAmount2 == -1 || shiftAmount1 == -1) {\n      temp4 = dividend1;\n      temp5 = quotient;\n      if (shiftAmount2 == -1) {\n        temp4 = divisor;\n        temp5 = dividend;\n      }\n      if (shiftAmount2 != -1 || shiftAmount1 != -1) {\n        quotient = temp5;\n        dividend1 = temp4;\n      }\n      condition2 = (temp5 | temp4 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (quotient | dividend1 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = temp4 == dividend1;\n      }\n      if (!condition2) {\n        temp4 = temp4 | 0x80000;\n      }\n      return CONCAT44(temp4,temp5);\n    }\n    if (((divisor ^ dividend1) & 0x7fffffff) != 0 || dividend != quotient) {\n      if ((temp4 | dividend) == 0) {\n        dividend = quotient;\n        divisor = dividend1;\n      }\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != dividend1) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      condition2 = (dividend & 0x80000000) != 0;\n      dividend1 = divisor * 2 + (uint)condition2;\n      if (CARRY4(divisor,divisor) || CARRY4(divisor * 2,(uint)condition2)) {\n        dividend1 = dividend1 | 0x80000000;\n      }\n      return CONCAT44(dividend1,dividend << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(divisor + 0x100000,dividend);\n    }\n    divisor = divisor & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(divisor | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  remainder = remainder >> 0x15;\n  temp5 = remainder - temp4;\n  condition2 = temp5 != 0;\n  if (remainder < temp4) {\n    temp5 = -temp5;\n  }\n  shiftAmount3 = dividend;\n  temp3 = divisor;\n  if (condition2 && temp4 <= remainder) {\n    temp4 = temp4 + temp5;\n    shiftAmount3 = quotient;\n    temp3 = dividend1;\n    quotient = dividend;\n    dividend1 = divisor;\n  }\n  if (0x36 < temp5) {\n    return CONCAT44(temp3,shiftAmount3);\n  }\n  divisor1 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    condition2 = shiftAmount3 != 0;\n    shiftAmount3 = -shiftAmount3;\n    divisor1 = -divisor1 - (uint)condition2;\n  }\n  temp3 = dividend1 & 0xfffff | 0x100000;\n  if ((dividend1 & 0x80000000) != 0) {\n    condition2 = quotient != 0;\n    quotient = -quotient;\n    temp3 = -temp3 - (uint)condition2;\n  }\n  if (temp4 == temp5) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      divisor1 = divisor1 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      temp5 = temp5 - 1;\n    }\n  }\n  dividend1 = -temp5 + 0x20;\n  if ((int)temp5 < 0x21) {\n    carry2 = quotient << (dividend1 & 0xff);\n    quotient = quotient >> (temp5 & 0xff);\n    temp1 = shiftAmount3 + quotient;\n    temp2 = temp3 << (dividend1 & 0xff);\n    dividend1 = temp1 + temp2;\n    divisor1 = divisor1 + CARRY4(shiftAmount3,quotient) + ((int)temp3 >> (temp5 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    carry2 = temp3 << (-temp5 + 0x40 & 0xff);\n    if (quotient != 0) {\n      carry2 = carry2 | 2;\n    }\n    temp3 = (int)temp3 >> (temp5 - 0x20 & 0xff);\n    dividend1 = shiftAmount3 + temp3;\n    divisor1 = divisor1 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shiftAmount3,temp3);\n  }\n  divisor = divisor1 & 0x80000000;\n  temp5 = divisor1;\n  if ((int)divisor1 < 0) {\n    condition2 = carry2 == 0;\n    carry2 = -carry2;\n    temp5 = -dividend1;\n    dividend1 = -(uint)!condition2 - dividend1;\n    temp5 = -(uint)(condition2 <= temp5) - divisor1;\n  }\n  if (0xfffff < temp5) {\n    shiftAmount3 = temp4 - 1;\n    if (0x1fffff < temp5) {\n      shiftAmount3 = temp5 & 1;\n      temp5 = temp5 >> 1;\n      carry1 = (byte)dividend1;\n      dividend1 = (uint)(shiftAmount3 != 0) << 0x1f | dividend1 >> 1;\n      carry2 = (uint)(carry1 & 1) << 0x1f | carry2 >> 1;\n      shiftAmount3 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    condition2 = 0x7fffffff < carry2;\n    if (carry2 == 0x80000000) {\n      condition2 = (dividend1 & 1) != 0;\n    }\n    return CONCAT44(temp5 + shiftAmount3 * 0x100000 + (uint)CARRY4(dividend1,(uint)condition2) | divisor,\n                    dividend1 + condition2);\n  }\n  condition1 = (carry2 & 0x80000000) != 0;\n  carry2 = carry2 << 1;\n  shiftAmount3 = dividend1 * 2;\n  condition2 = CARRY4(dividend1,dividend1);\n  dividend1 = dividend1 * 2 + (uint)condition1;\n  temp5 = temp5 * 2 + (uint)(condition2 || CARRY4(shiftAmount3,(uint)condition1));\n  shiftAmount3 = temp4 - 2;\n  if (temp4 - 1 != 0 && 0xfffff < temp5) goto LAB_080083e0;\n  temp3 = dividend1;\n  temp4 = temp5;\n  if (temp5 == 0) {\n    temp3 = 0;\n    temp4 = dividend1;\n  }\n  shiftAmount2 = LZCOUNT(temp4);\n  if (temp5 == 0) {\n    shiftAmount2 = shiftAmount2 + 0x20;\n  }\n  temp5 = shiftAmount2 - 0xb;\n  condition3 = SBORROW4(temp5,0x20);\n  dividend1 = shiftAmount2 - 0x2b;\n  condition2 = (int)dividend1 < 0;\n  condition1 = dividend1 == 0;\n  if ((int)temp5 < 0x20) {\n    condition3 = SCARRY4(dividend1,0xc);\n    shiftAmount2 = shiftAmount2 + -0x1f;\n    condition2 = shiftAmount2 < 0;\n    condition1 = shiftAmount2 == 0;\n    dividend1 = temp5;\n    if (!condition1 && condition2 == condition3) {\n      temp3 = temp4 << (temp5 & 0xff);\n      temp4 = temp4 >> (0xcU - shiftAmount2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    carry2 = 0x20 - dividend1;\n  }\n  temp4 = temp4 << (dividend1 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    temp4 = temp4 | temp3 >> (carry2 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp3 = temp3 << (dividend1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp5 <= (int)shiftAmount3) {\n    return CONCAT44(temp4 + (shiftAmount3 - temp5) * 0x100000 | divisor,temp3);\n  }\n  dividend1 = ~(shiftAmount3 - temp5);\n  if ((int)dividend1 < 0x1f) {\n    shiftAmount2 = dividend1 - 0x13;\n    if (shiftAmount2 != 0 && shiftAmount2 < 0 == SCARRY4(dividend1 - 0x1f,0xc)) {\n      return CONCAT44(divisor1,temp3 >> (0x20 - (0xcU - shiftAmount2) & 0xff) | temp4 << (0xcU - shiftAmount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    dividend1 = dividend1 + 1;\n    return CONCAT44(divisor | temp4 >> (dividend1 & 0xff),\n                    temp3 >> (dividend1 & 0xff) | temp4 << (0x20 - dividend1 & 0xff));\n  }\n  return CONCAT44(divisor1,temp4 >> (dividend1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_unsigned_dividend_080082d0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "shiftAmount1",
                "bVar2": "carry1",
                "uVar3": "temp1",
                "uVar4": "divisor1",
                "uVar5": "temp2",
                "uVar6": "dividend1",
                "uVar7": "temp3",
                "iVar8": "shiftAmount2",
                "uVar9": "temp4",
                "uVar10": "shiftAmount3",
                "uVar11": "temp5",
                "uVar12": "carry2",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "sin",
                "__ieee754_sqrt",
                "atan",
                "__kernel_rem_pio2",
                "plan_buffer_line",
                "report_realtime_status",
                "__kernel_sin",
                "cos",
                "__kernel_cos",
                "__ieee754_hypot",
                "__ieee754_atan2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_product_080082d4",
            "code": "\nulonglong calculate_product_080082d4(uint multiplicand,uint multiplier,uint addend,uint augend)\n\n{\n  int shift_1;\n  byte carry_1;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  int shift_2;\n  uint result_low;\n  uint result_high;\n  uint product_low;\n  uint product_high;\n  uint carry_2;\n  uint carry_3;\n  bool condition_1;\n  bool condition_2;\n  bool condition_3;\n  \n  result_low = multiplier << 1;\n  product_low = augend << 1;\n  condition_1 = ((multiplier ^ augend) & 0x7fffffff) == 0;\n  condition_2 = condition_1 && multiplicand == addend;\n  if (!condition_1 || multiplicand != addend) {\n    condition_2 = (result_low | multiplicand) == 0;\n  }\n  if (!condition_2) {\n    condition_2 = (product_low | addend) == 0;\n  }\n  shift_2 = (int)result_low >> 0x15;\n  if (!condition_2) {\n    condition_2 = shift_2 == -1;\n  }\n  shift_1 = (int)product_low >> 0x15;\n  if (!condition_2) {\n    condition_2 = shift_1 == -1;\n  }\n  if (condition_2) {\n    if (shift_2 == -1 || shift_1 == -1) {\n      product_low = augend;\n      result_low = addend;\n      if (shift_2 == -1) {\n        product_low = multiplier;\n        result_low = multiplicand;\n      }\n      if (shift_2 != -1 || shift_1 != -1) {\n        addend = result_low;\n        augend = product_low;\n      }\n      condition_2 = (result_low | product_low << 0xc) == 0;\n      if (condition_2) {\n        condition_2 = (addend | augend << 0xc) == 0;\n      }\n      if (condition_2) {\n        condition_2 = product_low == augend;\n      }\n      if (!condition_2) {\n        product_low = product_low | 0x80000;\n      }\n      return CONCAT44(product_low,result_low);\n    }\n    if (((multiplier ^ augend) & 0x7fffffff) != 0 || multiplicand != addend) {\n      if ((result_low | multiplicand) == 0) {\n        multiplicand = addend;\n        multiplier = augend;\n      }\n      return CONCAT44(multiplier,multiplicand);\n    }\n    if (multiplier != augend) {\n      return 0;\n    }\n    if (result_low >> 0x15 == 0) {\n      condition_2 = (multiplicand & 0x80000000) != 0;\n      product_low = multiplier * 2 + (uint)condition_2;\n      if (CARRY4(multiplier,multiplier) || CARRY4(multiplier * 2,(uint)condition_2)) {\n        product_low = product_low | 0x80000000;\n      }\n      return CONCAT44(product_low,multiplicand << 1);\n    }\n    if (result_low < 0xffc00000) {\n      return CONCAT44(multiplier + 0x100000,multiplicand);\n    }\n    multiplier = multiplier & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(multiplier | 0x7ff00000) << 0x20;\n  }\n  result_low = result_low >> 0x15;\n  product_low = product_low >> 0x15;\n  product_high = product_low - result_low;\n  condition_2 = product_high != 0;\n  if (product_low < result_low) {\n    product_high = -product_high;\n  }\n  result_high = multiplicand;\n  temp_3 = multiplier;\n  if (condition_2 && result_low <= product_low) {\n    result_low = result_low + product_high;\n    result_high = addend;\n    temp_3 = augend;\n    addend = multiplicand;\n    augend = multiplier;\n  }\n  if (0x36 < product_high) {\n    return CONCAT44(temp_3,result_high);\n  }\n  product_low = temp_3 & 0xfffff | 0x100000;\n  if ((temp_3 & 0x80000000) != 0) {\n    condition_2 = result_high != 0;\n    result_high = -result_high;\n    product_low = -product_low - (uint)condition_2;\n  }\n  temp_3 = augend & 0xfffff | 0x100000;\n  if ((augend & 0x80000000) != 0) {\n    condition_2 = addend != 0;\n    addend = -addend;\n    temp_3 = -temp_3 - (uint)condition_2;\n  }\n  if (result_low == product_high) {\n    temp_3 = temp_3 ^ 0x100000;\n    if (result_low == 0) {\n      product_low = product_low ^ 0x100000;\n      result_low = 1;\n    }\n    else {\n      product_high = product_high - 1;\n    }\n  }\n  carry_3 = -product_high + 0x20;\n  if ((int)product_high < 0x21) {\n    carry_2 = addend << (carry_3 & 0xff);\n    addend = addend >> (product_high & 0xff);\n    temp_1 = result_high + addend;\n    temp_2 = temp_3 << (carry_3 & 0xff);\n    carry_3 = temp_1 + temp_2;\n    product_low = product_low + CARRY4(result_high,addend) + ((int)temp_3 >> (product_high & 0xff)) +\n            (uint)CARRY4(temp_1,temp_2);\n  }\n  else {\n    carry_2 = temp_3 << (-product_high + 0x40 & 0xff);\n    if (addend != 0) {\n      carry_2 = carry_2 | 2;\n    }\n    temp_3 = (int)temp_3 >> (product_high - 0x20 & 0xff);\n    carry_3 = result_high + temp_3;\n    product_low = product_low + ((int)temp_3 >> 0x1f) + (uint)CARRY4(result_high,temp_3);\n  }\n  multiplier = product_low & 0x80000000;\n  product_high = product_low;\n  if ((int)product_low < 0) {\n    condition_2 = carry_2 == 0;\n    carry_2 = -carry_2;\n    product_high = -carry_3;\n    carry_3 = -(uint)!condition_2 - carry_3;\n    product_high = -(uint)(condition_2 <= product_high) - product_low;\n  }\n  if (0xfffff < product_high) {\n    result_high = result_low - 1;\n    if (0x1fffff < product_high) {\n      product_low = product_high & 1;\n      product_high = product_high >> 1;\n      carry_1 = (byte)carry_3;\n      carry_3 = (uint)(product_low != 0) << 0x1f | carry_3 >> 1;\n      carry_2 = (uint)(carry_1 & 1) << 0x1f | carry_2 >> 1;\n      result_high = result_low;\n      if (0xffbfffff < result_low * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    condition_2 = 0x7fffffff < carry_2;\n    if (carry_2 == 0x80000000) {\n      condition_2 = (carry_3 & 1) != 0;\n    }\n    return CONCAT44(product_high + result_high * 0x100000 + (uint)CARRY4(carry_3,(uint)condition_2) | multiplier,\n                    carry_3 + condition_2);\n  }\n  condition_1 = (carry_2 & 0x80000000) != 0;\n  carry_2 = carry_2 << 1;\n  result_high = carry_3 * 2;\n  condition_2 = CARRY4(carry_3,carry_3);\n  carry_3 = carry_3 * 2 + (uint)condition_1;\n  product_high = product_high * 2 + (uint)(condition_2 || CARRY4(result_high,(uint)condition_1));\n  result_high = result_low - 2;\n  if (result_low - 1 != 0 && 0xfffff < product_high) goto LAB_080083e0;\n  temp_3 = carry_3;\n  result_low = product_high;\n  if (product_high == 0) {\n    temp_3 = 0;\n    result_low = carry_3;\n  }\n  shift_2 = LZCOUNT(result_low);\n  if (product_high == 0) {\n    shift_2 = shift_2 + 0x20;\n  }\n  carry_3 = shift_2 - 0xb;\n  condition_3 = SBORROW4(carry_3,0x20);\n  product_high = shift_2 - 0x2b;\n  condition_2 = (int)product_high < 0;\n  condition_1 = product_high == 0;\n  if ((int)carry_3 < 0x20) {\n    condition_3 = SCARRY4(product_high,0xc);\n    shift_2 = shift_2 + -0x1f;\n    condition_2 = shift_2 < 0;\n    condition_1 = shift_2 == 0;\n    product_high = carry_3;\n    if (!condition_1 && condition_2 == condition_3) {\n      temp_3 = result_low << (carry_3 & 0xff);\n      result_low = result_low >> (0xcU - shift_2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (condition_1 || condition_2 != condition_3) {\n    carry_2 = 0x20 - product_high;\n  }\n  result_low = result_low << (product_high & 0xff);\n  if (condition_1 || condition_2 != condition_3) {\n    result_low = result_low | temp_3 >> (carry_2 & 0xff);\n  }\n  if (condition_1 || condition_2 != condition_3) {\n    temp_3 = temp_3 << (product_high & 0xff);\n  }\nLAB_08008458:\n  if ((int)carry_3 <= (int)result_high) {\n    return CONCAT44(result_low + (result_high - carry_3) * 0x100000 | multiplier,temp_3);\n  }\n  product_high = ~(result_high - carry_3);\n  if ((int)product_high < 0x1f) {\n    shift_2 = product_high - 0x13;\n    if (shift_2 != 0 && shift_2 < 0 == SCARRY4(product_high - 0x1f,0xc)) {\n      return CONCAT44(product_low,temp_3 >> (0x20 - (0xcU - shift_2) & 0xff) | result_low << (0xcU - shift_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    product_high = product_high + 1;\n    return CONCAT44(multiplier | result_low >> (product_high & 0xff),\n                    temp_3 >> (product_high & 0xff) | result_low << (0x20 - product_high & 0xff));\n  }\n  return CONCAT44(product_low,result_low >> (product_high - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_product_080082d4",
                "param_1": "multiplicand",
                "param_2": "multiplier",
                "param_3": "addend",
                "param_4": "augend",
                "iVar1": "shift_1",
                "bVar2": "carry_1",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "iVar6": "shift_2",
                "uVar7": "result_low",
                "uVar8": "result_high",
                "uVar9": "product_low",
                "uVar10": "product_high",
                "uVar11": "carry_2",
                "uVar12": "carry_3",
                "bVar13": "condition_1",
                "bVar14": "condition_2",
                "bVar15": "condition_3"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "__ieee754_sqrt",
                "trunc",
                "atan",
                "floor",
                "__kernel_rem_pio2",
                "scalbn",
                "__kernel_sin",
                "ceil",
                "__kernel_cos",
                "__ieee754_hypot",
                "__ieee754_atan2",
                "round"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "logical_shift_rotate_0800854c",
            "code": "\nulonglong logical_shift_rotate_0800854c(uint input_value)\n\n{\n  uint result;\n  uint shift_amount;\n  int count;\n  uint offset;\n  uint mask;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  result = 0;\n  count = LZCOUNT(input_value);\n  offset = count + 0x15;\n  is_carry = SBORROW4(offset,0x20);\n  shift_amount = count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (offset < 0x20) {\n    is_carry = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = count + 1 == 0;\n    shift_amount = offset;\n    if (!is_zero && is_carry == false) {\n      result = input_value << offset;\n      input_value = input_value >> (0xcU - (count + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    mask = 0x20 - shift_amount;\n  }\n  input_value = input_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    input_value = input_value | 0U >> (mask & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (offset < 0x433) {\n    return CONCAT44(input_value + (0x432 - offset) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - offset);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input_value >> (shift_amount - 0x1f & 0xff));\n  }\n  count = shift_amount - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(input_value >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input_value << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count) & 0xff) | input_value << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "logical_shift_rotate_0800854c",
                "param_1": "input_value",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "iVar3": "count",
                "uVar4": "offset",
                "in_r12": "mask",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_carry"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "count_bits_0800856c",
            "code": "\nulonglong countBits_0800856c(uint num)\n\n{\n  uint leadingZeros;\n  uint absNum;\n  uint shiftAmount;\n  int leadingOnes;\n  uint adjustedShiftAmount;\n  uint signBit;\n  uint shiftMask;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (num == 0) {\n    return 0;\n  }\n  signBit = num & 0x80000000;\n  absNum = num;\n  if ((int)signBit < 0) {\n    absNum = -num;\n  }\n  leadingZeros = 0;\n  leadingOnes = LZCOUNT(absNum);\n  adjustedShiftAmount = leadingOnes + 0x15;\n  isCarry = SBORROW4(adjustedShiftAmount,0x20);\n  shiftAmount = leadingOnes - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (adjustedShiftAmount < 0x20) {\n    isCarry = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingOnes + 1 == 0;\n    shiftAmount = adjustedShiftAmount;\n    if (!isZero && isCarry == false) {\n      leadingZeros = absNum << adjustedShiftAmount;\n      absNum = absNum >> (0xcU - (leadingOnes + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    shiftMask = 0x20 - shiftAmount;\n  }\n  absNum = absNum << (shiftAmount & 0xff);\n  if (isZero || isNegative != isCarry) {\n    absNum = absNum | 0U >> (shiftMask & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if (adjustedShiftAmount < 0x433) {\n    return CONCAT44(absNum + (0x432 - adjustedShiftAmount) * 0x100000 | signBit,leadingZeros);\n  }\n  shiftAmount = ~(0x432 - adjustedShiftAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(num,absNum >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingOnes = shiftAmount - 0x13;\n  if (leadingOnes == 0 || leadingOnes < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absNum >> (shiftAmount & 0xff),\n                    leadingZeros >> (shiftAmount & 0xff) | absNum << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(num,leadingZeros >> (0x20 - (0xcU - leadingOnes) & 0xff) | absNum << (0xcU - leadingOnes & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "count_bits_0800856c",
                "param_1": "num",
                "uVar1": "leadingZeros",
                "uVar2": "absNum",
                "uVar3": "shiftAmount",
                "iVar4": "leadingOnes",
                "uVar5": "adjustedShiftAmount",
                "uVar6": "signBit",
                "in_r12": "shiftMask",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isCarry"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "extract_bits_08008590",
            "code": "\nulonglong extract_bits_08008590(uint value,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint msb;\n  uint shifted_value;\n  uint result;\n  uint shifted_count;\n  uint twice_value;\n  int count;\n  uint shifted_bits;\n  uint constant;\n  bool is_negative;\n  bool is_zero;\n  bool carry;\n  \n  twice_value = value << 1;\n  is_zero = twice_value == 0;\n  msb = (uint)((value & 0x80000000) != 0) << 0x1f;\n  shifted_count = (uint)((int)twice_value >> 3) >> 1;\n  result = msb | shifted_count;\n  value = value << 0x1d;\n  if (!is_zero) {\n    param4 = twice_value & 0xff000000;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,value) ^ 0x3800000000000000;\n  }\n  if ((twice_value & 0xffffff) == 0) {\n    return CONCAT44(result,value);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result,value) | 0x8000000000000;\n  }\n  shifted_value = value;\n  twice_value = shifted_count;\n  if (shifted_count == 0) {\n    shifted_value = 0;\n    twice_value = value;\n  }\n  count = LZCOUNT(twice_value);\n  if (shifted_count == 0) {\n    count = count + 0x20;\n  }\n  shifted_bits = count - 0xb;\n  carry = SBORROW4(shifted_bits,0x20);\n  shifted_count = count - 0x2b;\n  is_zero = (int)shifted_count < 0;\n  is_negative = shifted_count == 0;\n  if ((int)shifted_bits < 0x20) {\n    carry = SCARRY4(shifted_count,0xc);\n    count = count + -0x1f;\n    is_zero = count < 0;\n    is_negative = count == 0;\n    shifted_count = shifted_bits;\n    if (!is_negative && is_zero == carry) {\n      shifted_value = twice_value << (shifted_bits & 0xff);\n      twice_value = twice_value >> (0xcU - count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_negative || is_zero != carry) {\n    constant = 0x20 - shifted_count;\n  }\n  twice_value = twice_value << (shifted_count & 0xff);\n  if (is_negative || is_zero != carry) {\n    twice_value = twice_value | shifted_value >> (constant & 0xff);\n  }\n  if (is_negative || is_zero != carry) {\n    shifted_value = shifted_value << (shifted_count & 0xff);\n  }\nLAB_08008458:\n  if ((int)shifted_bits < 0x381) {\n    return CONCAT44(twice_value + (0x380 - shifted_bits) * 0x100000 | msb,shifted_value);\n  }\n  shifted_count = ~(0x380 - shifted_bits);\n  if (0x1e < (int)shifted_count) {\n    return CONCAT44(result,twice_value >> (shifted_count - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shifted_count - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shifted_count - 0x1f,0xc)) {\n    shifted_count = shifted_count + 1;\n    return CONCAT44(msb | twice_value >> (shifted_count & 0xff),\n                    shifted_value >> (shifted_count & 0xff) | twice_value << (0x20 - shifted_count & 0xff));\n  }\n  return CONCAT44(result,shifted_value >> (0x20 - (0xcU - count) & 0xff) | twice_value << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "extract_bits_08008590",
                "param_1": "value",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "msb",
                "uVar2": "shifted_value",
                "uVar3": "result",
                "uVar4": "shifted_count",
                "uVar5": "twice_value",
                "iVar6": "count",
                "uVar7": "shifted_bits",
                "in_r12": "constant",
                "bVar8": "is_negative",
                "bVar9": "is_zero",
                "bVar10": "carry"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "protocol_execute_line",
                "gc_execute_line",
                "calculate_trapezoid_for_block",
                "max_allowable_speed",
                "homing_cycle",
                "mc_dwell",
                "plan_buffer_line",
                "report_realtime_status",
                "report_gcode_parameters",
                "to_millimeters",
                "read_float",
                "report_gcode_modes"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_new_value_08008640",
            "code": "\nulonglong calculate_new_value_08008640(undefined4 first_param,uint second_param,uint third_param,uint fourth_param)\n\n{\n  ulonglong temp1;\n  longlong temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  uint unaff_r5;\n  uint temp7;\n  uint temp8;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_params;\n  \n  combined_params = CONCAT44(second_param,first_param);\n  temp7 = 0x7ff;\n  temp4 = second_param >> 0x14 & 0x7ff;\n  flag1 = temp4 == 0;\n  if (!flag1) {\n    unaff_r5 = fourth_param >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp4 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_params = calculate_bitwise_0800881c();\n  }\n  temp3 = (uint)(combined_params >> 0x20);\n  temp5 = temp4 + unaff_r5;\n  temp4 = temp3 ^ fourth_param;\n  temp3 = temp3 & ~(temp7 << 0x15);\n  fourth_param = fourth_param & ~(temp7 << 0x15);\n  flag1 = ((uint)combined_params | temp3 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (third_param | fourth_param << 0xc) == 0;\n  }\n  temp3 = temp3 | 0x100000;\n  fourth_param = fourth_param | 0x100000;\n  if (flag1) {\n    third_param = (uint)combined_params | third_param;\n    fourth_param = (temp4 & 0x80000000 | temp3) ^ fourth_param;\n    temp4 = temp7 >> 1;\n    flag3 = SBORROW4(temp5,temp4);\n    temp6 = temp5 - temp4;\n    flag1 = temp6 == 0;\n    temp3 = temp6;\n    if (!flag1 && (int)temp4 <= temp5) {\n      flag3 = SBORROW4(temp7,temp6);\n      temp3 = temp7 - temp6;\n      flag1 = temp7 == temp6;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      fourth_param = fourth_param | temp6 * 0x100000;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      return CONCAT44(fourth_param,third_param);\n    }\n    fourth_param = fourth_param | 0x100000;\n    temp7 = 0;\n    flag3 = SBORROW4(temp6,1);\n    temp6 = temp6 - 1;\n    flag1 = temp6 == 0;\n    temp4 = temp6;\n  }\n  else {\n    temp1 = (combined_params & 0xffffffff) * (ulonglong)third_param;\n    combined_params = (combined_params & 0xffffffff) * (ulonglong)fourth_param +\n             (ulonglong)temp3 * (ulonglong)third_param + (temp1 >> 0x20);\n    temp8 = (uint)combined_params;\n    temp2 = (ulonglong)temp3 * (ulonglong)fourth_param + (combined_params >> 0x20);\n    temp7 = (uint)temp2;\n    temp3 = (uint)((ulonglong)temp2 >> 0x20);\n    if ((int)temp1 != 0) {\n      temp8 = temp8 | 1;\n    }\n    temp6 = (temp5 + -0x3ff) - (uint)(temp3 < 0x200);\n    if (temp3 < 0x200) {\n      flag1 = (temp8 & 0x80000000) != 0;\n      temp8 = temp8 << 1;\n      temp2 = CONCAT44(temp3 * 2 + (uint)(CARRY4(temp7,temp7) || CARRY4(temp7 * 2,(uint)flag1)),\n                       temp7 * 2 + (uint)flag1);\n    }\n    fourth_param = temp4 & 0x80000000 | (int)((ulonglong)temp2 >> 0x20) << 0xb | (uint)temp2 >> 0x15;\n    third_param = (uint)temp2 << 0xb | temp8 >> 0x15;\n    temp7 = temp8 * 0x800;\n    flag2 = 0xfc < temp6;\n    flag3 = SBORROW4(temp6,0xfd);\n    temp3 = temp6 - 0xfd;\n    flag1 = temp3 == 0;\n    temp4 = temp3;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp3;\n      flag3 = SBORROW4(temp3,0x700);\n      temp4 = temp6 - 0x7fd;\n      flag1 = temp3 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp7;\n      if (temp7 == 0x80000000) {\n        flag1 = (temp8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(fourth_param + temp6 * 0x100000 + (uint)CARRY4(third_param,(uint)flag1),third_param + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp4 < 0 == flag3) {\n    return (ulonglong)(fourth_param & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp6,0x36);\n  flag1 = (int)(temp6 + 0x36) < 0;\n  flag3 = temp6 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    third_param = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    fourth_param = fourth_param & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(fourth_param,third_param);\n  }\n  temp4 = -temp6;\n  temp3 = temp4 - 0x20;\n  if (0x1f < (int)temp4) {\n    temp6 = third_param >> (temp3 & 0xff) | fourth_param << (0x20 - temp3 & 0xff);\n    temp4 = (fourth_param >> (temp3 & 0xff) & ~((fourth_param & 0x80000000) >> (temp3 & 0xff))) -\n            ((int)temp6 >> 0x1f);\n    if ((temp7 | third_param << (0x20 - temp3 & 0xff) | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44(fourth_param,temp4) & 0x80000000ffffffff;\n  }\n  temp5 = temp4 - 0x14;\n  if (temp5 == 0 || temp5 < 0 != SCARRY4(temp3,0xc)) {\n    temp8 = third_param << (temp6 + 0x20 & 0xff);\n    temp3 = third_param >> (temp4 & 0xff) | fourth_param << (temp6 + 0x20 & 0xff);\n    temp6 = temp3 + -((int)temp8 >> 0x1f);\n    if ((temp7 | temp8 << 1) == 0) {\n      temp6 = temp6 & ~(temp8 >> 0x1f);\n    }\n    return CONCAT44((fourth_param & 0x80000000) +\n                    ((fourth_param & 0x7fffffff) >> (temp4 & 0xff)) +\n                    (uint)CARRY4(temp3,-((int)temp8 >> 0x1f)),temp6);\n  }\n  temp4 = 0xc - temp5;\n  temp6 = third_param << (temp4 & 0xff);\n  temp4 = third_param >> (0x20 - temp4 & 0xff) | fourth_param << (temp4 & 0xff);\n  temp3 = temp4 + -((int)temp6 >> 0x1f);\n  if ((temp7 | temp6 << 1) == 0) {\n    temp3 = temp3 & ~(temp6 >> 0x1f);\n  }\n  return CONCAT44((fourth_param & 0x80000000) + (uint)CARRY4(temp4,-((int)temp6 >> 0x1f)),temp3);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_new_value_08008640",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "temp1",
                "lVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "temp8",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_params"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "__ieee754_sqrt",
                "calculate_trapezoid_for_block",
                "atan",
                "homing_cycle",
                "__kernel_rem_pio2",
                "scalbn",
                "plan_buffer_line",
                "report_realtime_status",
                "__kernel_sin",
                "report_gcode_parameters",
                "__kernel_cos",
                "to_millimeters",
                "__ieee754_hypot",
                "read_float",
                "report_gcode_modes"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_bitwise_0800881c",
            "code": "\nulonglong calculate_bitwise_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  bit4 = input2;\n  if (((!isZero) && ((bit2 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (input1 = input3, bit4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_bitwise_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "compute_double_precision_value_08008894",
            "code": "\nulonglong compute_double_precision_value_08008894(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  int temp_var_8;\n  uint temp_var_9;\n  uint temp_var_10;\n  uint temp_var_11;\n  uint temp_var_12;\n  uint temp_var_13;\n  uint temp_var_14;\n  bool temp_var_15;\n  bool temp_var_16;\n  bool temp_var_17;\n  undefined8 temp_var_18;\n  \n  temp_var_18 = CONCAT44(input_param_2,input_param_1);\n  temp_var_14 = 0x7ff;\n  temp_var_7 = input_param_2 >> 0x14 & 0x7ff;\n  temp_var_15 = temp_var_7 == 0;\n  if (!temp_var_15) {\n    temp_var_10 = input_param_4 >> 0x14 & 0x7ff;\n    temp_var_15 = temp_var_10 == 0;\n  }\n  if (!temp_var_15) {\n    temp_var_15 = temp_var_7 == 0x7ff;\n  }\n  if (!temp_var_15) {\n    temp_var_15 = temp_var_10 == 0x7ff;\n  }\n  if (temp_var_15) {\n    temp_var_18 = compute_double_precision_value_08008894_08008a02();\n  }\n  temp_var_9 = (uint)((ulonglong)temp_var_18 >> 0x20);\n  temp_var_12 = (uint)temp_var_18;\n  temp_var_8 = temp_var_7 - temp_var_10;\n  if ((input_param_3 | input_param_4 << 0xc) == 0) {\n    temp_var_7 = (temp_var_9 ^ input_param_4) & 0x80000000 | temp_var_9 & 0xfffff;\n    temp_var_17 = SCARRY4(temp_var_8,temp_var_14 >> 1);\n    temp_var_9 = temp_var_8 + (temp_var_14 >> 1);\n    temp_var_15 = (int)temp_var_9 < 0;\n    temp_var_16 = temp_var_9 == 0;\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      temp_var_17 = SBORROW4(temp_var_14,temp_var_9);\n      temp_var_15 = (int)(temp_var_14 - temp_var_9) < 0;\n      temp_var_16 = temp_var_14 == temp_var_9;\n    }\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      temp_var_7 = temp_var_7 | temp_var_9 * 0x100000;\n    }\n    if (!temp_var_16 && temp_var_15 == temp_var_17) {\n      return CONCAT44(temp_var_7,temp_var_12);\n    }\n    temp_var_7 = temp_var_7 | 0x100000;\n    temp_var_14 = 0;\n    temp_var_16 = SBORROW4(temp_var_9,1);\n    temp_var_9 = temp_var_9 - 1;\n    temp_var_15 = temp_var_9 == 0;\n    temp_var_3 = temp_var_9;\n  }\n  else {\n    temp_var_3 = (input_param_4 << 0xc) >> 4 | 0x10000000 | input_param_3 >> 0x18;\n    temp_var_14 = input_param_3 << 8;\n    temp_var_11 = (temp_var_9 << 0xc) >> 4 | 0x10000000 | temp_var_12 >> 0x18;\n    temp_var_12 = temp_var_12 * 0x100;\n    temp_var_7 = (temp_var_9 ^ input_param_4) & 0x80000000;\n    temp_var_15 = temp_var_3 <= temp_var_11;\n    if (temp_var_11 == temp_var_3) {\n      temp_var_15 = temp_var_14 <= temp_var_12;\n    }\n    temp_var_8 = temp_var_8 + (uint)temp_var_15;\n    temp_var_9 = temp_var_8 + 0x3fd;\n    if (temp_var_15 == false) {\n      temp_var_3 = temp_var_3 >> 1;\n      temp_var_14 = (uint)((input_param_3 >> 0x18 & 1) != 0) << 0x1f | temp_var_14 >> 1;\n    }\n    temp_var_13 = temp_var_12 - temp_var_14;\n    temp_var_11 = (temp_var_11 - temp_var_3) - (uint)(temp_var_12 < temp_var_14);\n    temp_var_4 = temp_var_3 >> 1;\n    temp_var_1 = (uint)((temp_var_3 & 1) != 0) << 0x1f | temp_var_14 >> 1;\n    temp_var_12 = 0x100000;\n    temp_var_3 = 0x80000;\n    while( true ) {\n      temp_var_15 = temp_var_1 <= temp_var_13;\n      if (temp_var_4 < temp_var_11 || temp_var_11 - temp_var_4 < (uint)temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_12 = temp_var_12 | temp_var_3;\n        temp_var_11 = (temp_var_11 - temp_var_4) - (uint)!temp_var_15;\n      }\n      temp_var_5 = temp_var_4 >> 1;\n      temp_var_1 = (uint)((temp_var_4 & 1) != 0) << 0x1f | temp_var_1 >> 1;\n      temp_var_16 = temp_var_1 <= temp_var_13;\n      temp_var_15 = temp_var_11 - temp_var_5 < (uint)temp_var_16;\n      temp_var_14 = temp_var_11;\n      if (temp_var_5 < temp_var_11 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_14 = (temp_var_11 - temp_var_5) - (uint)!temp_var_16;\n      }\n      if (temp_var_5 < temp_var_11 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 1;\n      }\n      temp_var_11 = temp_var_4 >> 2;\n      temp_var_2 = (uint)((temp_var_5 & 1) != 0) << 0x1f | temp_var_1 >> 1;\n      temp_var_16 = temp_var_2 <= temp_var_13;\n      temp_var_15 = temp_var_14 - temp_var_11 < (uint)temp_var_16;\n      temp_var_5 = temp_var_14;\n      if (temp_var_11 < temp_var_14 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_2;\n        temp_var_5 = (temp_var_14 - temp_var_11) - (uint)!temp_var_16;\n      }\n      if (temp_var_11 < temp_var_14 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 2;\n      }\n      temp_var_6 = temp_var_4 >> 3;\n      temp_var_1 = (uint)((temp_var_11 & 1) != 0) << 0x1f | temp_var_2 >> 1;\n      temp_var_16 = temp_var_1 <= temp_var_13;\n      temp_var_15 = temp_var_5 - temp_var_6 < (uint)temp_var_16;\n      temp_var_11 = temp_var_5;\n      if (temp_var_6 < temp_var_5 || temp_var_15) {\n        temp_var_13 = temp_var_13 - temp_var_1;\n        temp_var_11 = (temp_var_5 - temp_var_6) - (uint)!temp_var_16;\n      }\n      if (temp_var_6 < temp_var_5 || temp_var_15) {\n        temp_var_12 = temp_var_12 | temp_var_3 >> 3;\n      }\n      temp_var_14 = temp_var_11 | temp_var_13;\n      if (temp_var_14 == 0) break;\n      temp_var_11 = temp_var_11 << 4 | temp_var_13 >> 0x1c;\n      temp_var_13 = temp_var_13 << 4;\n      temp_var_4 = temp_var_4 & 0xfffffff8 | temp_var_1 >> 0x1d;\n      temp_var_1 = (temp_var_2 >> 1) << 3;\n      temp_var_3 = temp_var_3 >> 4;\n      if (temp_var_3 == 0) {\n        temp_var_6 = temp_var_4;\n        if ((temp_var_7 & 0x100000) != 0) goto LAB_080089b2;\n        temp_var_7 = temp_var_7 | temp_var_12;\n        temp_var_12 = 0;\n        temp_var_3 = 0x80000000;\n      }\n    }\n    if ((temp_var_7 & 0x100000) == 0) {\n      temp_var_7 = temp_var_7 | temp_var_12;\n      temp_var_12 = 0;\n    }\nLAB_080089b2:\n    temp_var_17 = 0xfc < temp_var_9;\n    temp_var_16 = SBORROW4(temp_var_9,0xfd);\n    temp_var_4 = temp_var_8 + 0x300;\n    temp_var_15 = temp_var_4 == 0;\n    temp_var_3 = temp_var_4;\n    if (temp_var_17 && !temp_var_15) {\n      temp_var_17 = 0x6ff < temp_var_4;\n      temp_var_16 = SBORROW4(temp_var_4,0x700);\n      temp_var_3 = temp_var_8 - 0x400;\n      temp_var_15 = temp_var_4 == 0x700;\n    }\n    if (!temp_var_17 || temp_var_15) {\n      temp_var_15 = temp_var_6 <= temp_var_11;\n      if (temp_var_11 == temp_var_6) {\n        temp_var_15 = temp_var_1 <= temp_var_13;\n      }\n      if (temp_var_11 == temp_var_6 && temp_var_13 == temp_var_1) {\n        temp_var_15 = (temp_var_12 & 1) != 0;\n      }\n      return CONCAT44(temp_var_7 + temp_var_9 * 0x100000 + (uint)CARRY4(temp_var_12,(uint)temp_var_15),temp_var_12 + temp_var_15);\n    }\n  }\n  if (!temp_var_15 && (int)temp_var_3 < 0 == temp_var_16) {\n    return (ulonglong)(temp_var_7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_var_17 = SCARRY4(temp_var_9,0x36);\n  temp_var_15 = (int)(temp_var_9 + 0x36) < 0;\n  temp_var_16 = temp_var_9 == 0xffffffca;\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    temp_var_12 = 0;\n  }\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    temp_var_7 = temp_var_7 & 0x80000000;\n  }\n  if (temp_var_16 || temp_var_15 != temp_var_17) {\n    return CONCAT44(temp_var_7,temp_var_12);\n  }\n  temp_var_3 = -temp_var_9;\n  temp_var_11 = temp_var_3 - 0x20;\n  if (0x1f < (int)temp_var_3) {\n    temp_var_3 = temp_var_12 >> (temp_var_11 & 0xff) | temp_var_7 << (0x20 - temp_var_11 & 0xff);\n    temp_var_9 = (temp_var_7 >> (temp_var_11 & 0xff) & ~((temp_var_7 & 0x80000000) >> (temp_var_11 & 0xff))) -\n            ((int)temp_var_3 >> 0x1f);\n    if ((temp_var_14 | temp_var_12 << (0x20 - temp_var_11 & 0xff) | temp_var_3 << 1) == 0) {\n      temp_var_9 = temp_var_9 & ~(temp_var_3 >> 0x1f);\n    }\n    return CONCAT44(temp_var_7,temp_var_9) & 0x80000000ffffffff;\n  }\n  temp_var_8 = temp_var_3 - 0x14;\n  if (temp_var_8 != 0 && temp_var_8 < 0 == SCARRY4(temp_var_11,0xc)) {\n    temp_var_9 = 0xc - temp_var_8;\n    temp_var_3 = temp_var_12 << (temp_var_9 & 0xff);\n    temp_var_12 = temp_var_12 >> (0x20 - temp_var_9 & 0xff) | temp_var_7 << (temp_var_9 & 0xff);\n    temp_var_9 = temp_var_12 + -((int)temp_var_3 >> 0x1f);\n    if ((temp_var_14 | temp_var_3 << 1) == 0) {\n      temp_var_9 = temp_var_9 & ~(temp_var_3 >> 0x1f);\n    }\n    return CONCAT44((temp_var_7 & 0x80000000) + (uint)CARRY4(temp_var_12,-((int)temp_var_3 >> 0x1f)),temp_var_9);\n  }\n  temp_var_11 = temp_var_12 << (temp_var_9 + 0x20 & 0xff);\n  temp_var_12 = temp_var_12 >> (temp_var_3 & 0xff) | temp_var_7 << (temp_var_9 + 0x20 & 0xff);\n  temp_var_9 = temp_var_12 + -((int)temp_var_11 >> 0x1f);\n  if ((temp_var_14 | temp_var_11 << 1) == 0) {\n    temp_var_9 = temp_var_9 & ~(temp_var_11 >> 0x1f);\n  }\n  return CONCAT44((temp_var_7 & 0x80000000) +\n                  ((temp_var_7 & 0x7fffffff) >> (temp_var_3 & 0xff)) +\n                  (uint)CARRY4(temp_var_12,-((int)temp_var_11 >> 0x1f)),temp_var_9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "compute_double_precision_value_08008894",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6",
                "uVar7": "temp_var_7",
                "iVar8": "temp_var_8",
                "uVar9": "temp_var_9",
                "unaff_r5": "temp_var_10",
                "uVar10": "temp_var_11",
                "uVar11": "temp_var_12",
                "uVar12": "temp_var_13",
                "uVar13": "temp_var_14",
                "bVar14": "temp_var_15",
                "bVar15": "temp_var_16",
                "bVar16": "temp_var_17",
                "uVar17": "temp_var_18"
            },
            "calling": [
                "sqrt",
                "__ieee754_sqrt",
                "gc_execute_line",
                "atan",
                "__ieee754_atan2",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "compute_double_precision_value_08008a02",
            "code": "\nulonglong computeDoublePrecisionValue_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit4;\n  uint bit2;\n  uint bit3;\n  uint bit5;\n  bool isZero;\n  \n  bit2 = bit5 & input4 >> 0x14;\n  bit3 = input2;\n  if (bit4 != bit5 || bit2 != bit5) {\n    if (bit4 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != bit5)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == bit5) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit4 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "compute_double_precision_value_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit4",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_conditions_08008a74",
            "code": "\nuint check_conditions_08008a74(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isLessOrEqual;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (input_1 | input_2 << 1) == 0;\n  if (isZero) {\n    isZero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = input_2 == input_4;\n  }\n  if (isZero) {\n    isZero = input_1 == input_3;\n  }\n  if (!isZero) {\n    result = input_2 ^ input_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = input_2 == input_4;\n    }\n    isLessOrEqual = -1 < (int)result && input_4 <= input_2;\n    if (isZero) {\n      isLessOrEqual = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!isLessOrEqual) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_conditions_08008a74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isLessOrEqual"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "compare_floating_point_numbers_08008af0",
            "code": "\nvoid compareFloatingPointNumbers_08008af0(undefined4 result,undefined4 status,undefined4 number1,undefined4 number2)\n\n{\n  __aeabi_cdcmpeq(number1,number2,result,status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "compare_floating_point_numbers_08008af0",
                "param_1": "result",
                "param_2": "status",
                "param_3": "number1",
                "param_4": "number2"
            },
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "convert_float_to_undefined4_08008b00",
            "code": "\nundefined4 convertFloatToUndefined4_08008b00(undefined4 newValue)\n\n{\n  performFloatConversion();\n  result newValue;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "convert_float_to_undefined4_08008b00",
                "param_1": "newValue",
                "__nedf2": "performFloatConversion",
                "return": "result"
            },
            "calling": [
                "__aeabi_cdrcmple",
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "compare_double_08008b10",
            "code": "\nbool compare_double_08008b10(void)\n\n{\n  char result;\n  \n  compare_double_08008b10_precision();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "compare_double_08008b10",
                "in_ZR": "result",
                "__aeabi_cdcmpeq": "compare_double_precision"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_cy_null_08008b24",
            "code": "\nbool is_CY_null_08008b24(void)\n\n{\n  char CY_char;\n  \n  __aeabi_cdcmpeq();\n  return CY_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_cy_null_08008b24",
                "in_CY": "CY_char"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "is_less_or_equal_08008b4c",
            "code": "\nbool is_less_or_equal_08008b4c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_flag;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_carry_flag || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "is_less_or_equal_08008b4c",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_flag"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_null_terminated_08008b60",
            "code": "\nbool is_null_terminated_08008b60(void)\n\n{\n  char character;\n  \n  compare_to_zero();\n  return character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_null_terminated_08008b60",
                "in_CY": "character",
                "__aeabi_cdrcmple": "compare_to_zero"
            },
            "calling": [
                "ceil",
                "atan",
                "floor",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "is_parameters_valid_08008b74",
            "code": "\nundefined4 is_parameters_valid_08008b74(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "is_parameters_valid_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "sqrt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "integer_divider_08008ba0",
            "code": "\nuint integerDivider_08008ba0(uint dividend,uint divisor)\n\n{\n  uint shiftedDivisor;\n  int tempValue;\n  uint shiftAmount;\n  \n  tempValue = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < tempValue) {\n      return 0;\n    }\n    shiftedDivisor = tempValue >> 0x15;\n    shiftAmount = -shiftedDivisor - 0x3e1;\n    if (shiftedDivisor < 0xfffffc20 && shiftAmount != 0) {\n      shiftedDivisor = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (shiftAmount & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        shiftedDivisor = -shiftedDivisor;\n      }\n      return shiftedDivisor;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "integer_divider_08008ba0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "shiftedDivisor",
                "iVar2": "tempValue",
                "uVar3": "shiftAmount"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "gc_execute_line",
                "__kernel_cos",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2",
                "lround",
                "plan_buffer_line",
                "__kernel_sin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "check_valid_input_08008bf0",
            "code": "\nuint checkValidInput_08008bf0(uint input1,uint input2)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  \n  if ((input2 & 0x80000000) != 0) {\n    return 0;\n  }\n  tempVar1 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < tempVar1) {\n      return 0;\n    }\n    tempVar2 = -(tempVar1 >> 0x15) - 0x3e1;\n    if (-1 < (int)tempVar2) {\n      return (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (tempVar2 & 0xff);\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "check_valid_input_08008bf0",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "protocol_execute_line",
                "gc_execute_line",
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "mc_dwell",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_floating_point_08008c30",
            "code": "\nuint calculateFloatingPoint_08008c30(uint input1,uint input2)\n\n{\n  uint result;\n  uint multipliedValue;\n  uint addedValue;\n  uint tempValue;\n  bool isZero;\n  bool isLessThan;\n  \n  multipliedValue = input2 * 2;\n  isLessThan = multipliedValue < 0x70000000;\n  addedValue = multipliedValue + 0x90000000;\n  result = addedValue;\n  if (!isLessThan) {\n    tempValue = multipliedValue + 0x8fe00000;\n    result = tempValue;\n  }\n  isZero = result == 0;\n  if (!isLessThan && addedValue >= 0x200000) {\n    isZero = tempValue == 0x1fc00000;\n  }\n  if (((isLessThan || addedValue < 0x200000) || 0x1fc00000 < tempValue) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)multipliedValue >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multipliedValue + 0x92e00000) < 0 != SCARRY4(addedValue,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    multipliedValue = 0x18 - (multipliedValue + 0x92e00000 >> 0x15);\n    result = input1 >> (multipliedValue & 0xff);\n    if (input1 << (0x20 - multipliedValue & 0xff) != 0) {\n      result = result | 1;\n    }\n    addedValue = input2 & 0x1fffff | 0x100000;\n    input1 = result | addedValue << (0x20 - multipliedValue & 0xff);\n    addedValue = (addedValue >> (multipliedValue & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + addedValue * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_floating_point_08008c30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "multipliedValue",
                "uVar3": "addedValue",
                "in_r12": "tempValue",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "mc_arc",
                "report_gcode_parameters",
                "gc_execute_line",
                "to_millimeters",
                "read_float",
                "max_allowable_speed",
                "homing_cycle",
                "plan_buffer_line",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_new_value_08008cd8",
            "code": "\nuint calculate_new_value_08008cd8(uint input_1,uint input_2,undefined4 input_3,uint input_4)\n\n{\n  int shift_1;\n  int shift_2;\n  uint temp_1;\n  uint temp_2;\n  uint result_1;\n  uint result_2;\n  uint diff;\n  bool is_equal;\n  \n  temp_1 = input_2 ^ 0x80000000;\n  result_1 = input_1 << 1;\n  is_equal = result_1 == 0;\n  if (!is_equal) {\n    input_4 = input_2 << 1;\n    is_equal = input_4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result_1 == input_4;\n  }\n  shift_1 = (int)result_1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shift_1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input_4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shift_2 = (int)(input_2 << 1) >> 0x18;\n    if (shift_1 == -1 || shift_2 == -1) {\n      result_1 = temp_1;\n      if (shift_1 == -1) {\n        result_1 = input_1;\n      }\n      if (shift_1 != -1 || shift_2 != -1) {\n        temp_1 = result_1;\n      }\n      is_equal = (result_1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp_1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result_1 == temp_1;\n      }\n      if (!is_equal) {\n        result_1 = result_1 | 0x400000;\n      }\n      return result_1;\n    }\n    if (((input_1 ^ temp_1) & 0x7fffffff) != 0) {\n      if (result_1 == 0) {\n        input_1 = temp_1;\n      }\n      return input_1;\n    }\n    if (input_1 != temp_1) {\n      return 0;\n    }\n    if ((result_1 & 0xff000000) == 0) {\n      temp_1 = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        temp_1 = temp_1 | 0x80000000;\n      }\n      return temp_1;\n    }\n    if (result_1 < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_08008e12:\n    return input_1 | 0x7f800000;\n  }\n  result_1 = result_1 >> 0x18;\n  input_4 = input_4 >> 0x18;\n  diff = input_4 - result_1;\n  is_equal = diff != 0;\n  result_2 = result_1;\n  if (is_equal && result_1 <= input_4) {\n    result_2 = result_1 + diff;\n  }\n  if (is_equal && result_1 <= input_4) {\n    temp_1 = temp_1 ^ input_1;\n  }\n  if (is_equal && result_1 <= input_4) {\n    input_1 = input_1 ^ temp_1;\n  }\n  if (is_equal && result_1 <= input_4) {\n    temp_1 = temp_1 ^ input_1;\n  }\n  if (input_4 < result_1) {\n    diff = -diff;\n  }\n  if (0x19 < diff) {\n    return input_1;\n  }\n  result_1 = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    result_1 = -result_1;\n  }\n  temp_2 = temp_1 & 0xffffff | 0x800000;\n  if ((temp_1 & 0x80000000) != 0) {\n    temp_2 = -temp_2;\n  }\n  if (result_2 == diff) {\n    temp_2 = temp_2 ^ 0x800000;\n    if (result_2 == 0) {\n      result_1 = result_1 ^ 0x800000;\n      result_2 = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  result_1 = result_1 + ((int)temp_2 >> (diff & 0xff));\n  temp_2 = temp_2 << (0x20 - diff & 0xff);\n  input_1 = result_1 & 0x80000000;\n  if ((int)result_1 < 0) {\n    is_equal = temp_2 != 0;\n    temp_2 = -temp_2;\n    result_1 = -result_1 - (uint)is_equal;\n  }\n  if (result_1 < 0x800000) {\n    temp_1 = temp_2 & 0x80000000;\n    temp_2 = temp_2 << 1;\n    result_1 = result_1 * 2 + (uint)(temp_1 != 0);\n    temp_1 = result_2 - 2;\n    if (result_2 - 1 == 0 || result_1 < 0x800000) {\n      diff = LZCOUNT(result_1) - 8;\n      result_1 = result_1 << (diff & 0xff);\n      if ((int)temp_1 < (int)diff) {\n        result_1 = result_1 >> (-(temp_1 - diff) & 0xff);\n      }\n      else {\n        result_1 = result_1 + (temp_1 - diff) * 0x800000;\n      }\n      return result_1 | input_1;\n    }\n  }\n  else {\n    temp_1 = result_2 - 1;\n    if (0xffffff < result_1) {\n      temp_1 = result_1 & 1;\n      result_1 = result_1 >> 1;\n      temp_2 = (uint)(temp_1 != 0) << 0x1f | temp_2 >> 1;\n      temp_1 = result_2;\n      if (0xfd < result_2) goto LAB_08008e12;\n    }\n  }\n  result_1 = result_1 + temp_1 * 0x800000 + (uint)(0x7fffffff < temp_2);\n  if (temp_2 == 0x80000000) {\n    result_1 = result_1 & 0xfffffffe;\n  }\n  return result_1 | input_1;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_new_value_08008cd8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_1",
                "iVar2": "shift_2",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "result_1",
                "uVar6": "result_2",
                "uVar7": "diff",
                "bVar8": "is_equal"
            },
            "calling": [
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "max_allowable_speed",
                "mc_dwell",
                "intersection_distance",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_floating_point_number_08008cdc",
            "code": "\nuint calculateFloatingPointNumber_08008cdc(uint inputNumber1,uint inputNumber2,undefined4 tempValue,uint tempResult)\n\n{\n  int shiftedNumber1;\n  int shiftedNumber2;\n  uint firstPart;\n  uint mask;\n  uint exponent;\n  uint difference;\n  bool isEqual;\n  \n  mask = inputNumber1 << 1;\n  isEqual = mask == 0;\n  if (!isEqual) {\n    tempResult = inputNumber2 << 1;\n    isEqual = tempResult == 0;\n  }\n  if (!isEqual) {\n    isEqual = mask == tempResult;\n  }\n  shiftedNumber1 = (int)mask >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedNumber1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)tempResult >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedNumber2 = (int)(inputNumber2 << 1) >> 0x18;\n    if (shiftedNumber1 == -1 || shiftedNumber2 == -1) {\n      mask = inputNumber2;\n      if (shiftedNumber1 == -1) {\n        mask = inputNumber1;\n      }\n      if (shiftedNumber1 != -1 || shiftedNumber2 != -1) {\n        inputNumber2 = mask;\n      }\n      isEqual = (mask & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (inputNumber2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = mask == inputNumber2;\n      }\n      if (!isEqual) {\n        mask = mask | 0x400000;\n      }\n      return mask;\n    }\n    if (((inputNumber1 ^ inputNumber2) & 0x7fffffff) != 0) {\n      if (mask == 0) {\n        inputNumber1 = inputNumber2;\n      }\n      return inputNumber1;\n    }\n    if (inputNumber1 != inputNumber2) {\n      return 0;\n    }\n    if ((mask & 0xff000000) == 0) {\n      mask = inputNumber1 << 1;\n      if ((inputNumber1 & 0x80000000) != 0) {\n        mask = mask | 0x80000000;\n      }\n      return mask;\n    }\n    if (mask < 0xfe000000) {\n      return inputNumber1 + 0x800000;\n    }\n    inputNumber1 = inputNumber1 & 0x80000000;\nLAB_08008e12:\n    return inputNumber1 | 0x7f800000;\n  }\n  mask = mask >> 0x18;\n  tempResult = tempResult >> 0x18;\n  difference = tempResult - mask;\n  isEqual = difference != 0;\n  exponent = mask;\n  if (isEqual && mask <= tempResult) {\n    exponent = mask + difference;\n  }\n  if (isEqual && mask <= tempResult) {\n    inputNumber2 = inputNumber2 ^ inputNumber1;\n  }\n  if (isEqual && mask <= tempResult) {\n    inputNumber1 = inputNumber1 ^ inputNumber2;\n  }\n  if (isEqual && mask <= tempResult) {\n    inputNumber2 = inputNumber2 ^ inputNumber1;\n  }\n  if (tempResult < mask) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputNumber1;\n  }\n  mask = inputNumber1 & 0xffffff | 0x800000;\n  if ((inputNumber1 & 0x80000000) != 0) {\n    mask = -mask;\n  }\n  firstPart = inputNumber2 & 0xffffff | 0x800000;\n  if ((inputNumber2 & 0x80000000) != 0) {\n    firstPart = -firstPart;\n  }\n  if (exponent == difference) {\n    firstPart = firstPart ^ 0x800000;\n    if (exponent == 0) {\n      mask = mask ^ 0x800000;\n      exponent = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  mask = mask + ((int)firstPart >> (difference & 0xff));\n  firstPart = firstPart << (0x20 - difference & 0xff);\n  inputNumber1 = mask & 0x80000000;\n  if ((int)mask < 0) {\n    isEqual = firstPart != 0;\n    firstPart = -firstPart;\n    mask = -mask - (uint)isEqual;\n  }\n  if (mask < 0x800000) {\n    difference = firstPart & 0x80000000;\n    firstPart = firstPart << 1;\n    mask = mask * 2 + (uint)(difference != 0);\n    difference = exponent - 2;\n    if (exponent - 1 == 0 || mask < 0x800000) {\n      exponent = LZCOUNT(mask) - 8;\n      mask = mask << (exponent & 0xff);\n      if ((int)difference < (int)exponent) {\n        mask = mask >> (-(difference - exponent) & 0xff);\n      }\n      else {\n        mask = mask + (difference - exponent) * 0x800000;\n      }\n      return mask | inputNumber1;\n    }\n  }\n  else {\n    difference = exponent - 1;\n    if (0xffffff < mask) {\n      difference = mask & 1;\n      mask = mask >> 1;\n      firstPart = (uint)(difference != 0) << 0x1f | firstPart >> 1;\n      difference = exponent;\n      if (0xfd < exponent) goto LAB_08008e12;\n    }\n  }\n  mask = mask + difference * 0x800000 + (uint)(0x7fffffff < firstPart);\n  if (firstPart == 0x80000000) {\n    mask = mask & 0xfffffffe;\n  }\n  return mask | inputNumber1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_number_08008cdc",
                "param_1": "inputNumber1",
                "param_2": "inputNumber2",
                "param_3": "tempValue",
                "param_4": "tempResult",
                "iVar1": "shiftedNumber1",
                "iVar2": "shiftedNumber2",
                "uVar3": "firstPart",
                "uVar4": "mask",
                "uVar5": "exponent",
                "uVar6": "difference",
                "bVar7": "isEqual"
            },
            "calling": [
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "max_allowable_speed",
                "intersection_distance",
                "printFloat",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_hash_08008e3c",
            "code": "\nuint calculateHash_08008e3c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int baseValue;\n  uint shiftedValue;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  baseValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    shiftedValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = baseValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < shiftedValue);\n    if (shiftedValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  leadingZeros = baseValue + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_hash_08008e3c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "baseValue",
                "uVar4": "shiftedValue"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "read_float"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_result_08008e44",
            "code": "\nuint calculateResult_08008e44(uint input)\n\n{\n  uint leadingZeros;\n  uint shift;\n  uint signBit;\n  int intermediateValue;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shift = leadingZeros - 8;\n  intermediateValue = ((signBit | 0x4b000000) - 0x800000) + shift * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shift & 0xff);\n    signBit = intermediateValue + (input << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shift = input << leadingZeros + 0x18;\n  signBit = intermediateValue + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shift >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_result_08008e44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shift",
                "uVar3": "signBit",
                "iVar4": "intermediateValue"
            },
            "calling": [
                "mc_arc",
                "plan_cycle_reinitialize",
                "calculate_trapezoid_for_block",
                "gc_set_current_position",
                "mc_dwell",
                "mc_go_home",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_float_08008eec",
            "code": "\nuint calculateFloat_08008eec(uint input1,uint input2,undefined4 flag,uint output)\n\n{\n  longlong tempLong1;\n  uint result;\n  uint bits1;\n  int bitsSum;\n  int bitsDiff;\n  uint tempResult;\n  int tempBits;\n  uint tempBitsResult;\n  bool isZero;\n  bool borrow;\n  \n  bits1 = input1 >> 0x17 & 0xff;\n  isZero = bits1 == 0;\n  if (!isZero) {\n    output = input2 >> 0x17 & 0xff;\n    isZero = output == 0;\n  }\n  if (!isZero) {\n    isZero = bits1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = output == 0xff;\n  }\n  if (isZero) {\n    output = input2 >> 0x17 & 0xff;\n    if (bits1 == 0xff || output == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      tempBitsResult = result;\n      if (((isZero) || ((bits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((output == 0xff && (tempBitsResult = input2, (input2 & 0x7fffff) != 0)))) {\n        return tempBitsResult | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = bits1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      bits1 = bits1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = output == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      output = output - 1;\n    }\n    input2 = input2 | result;\n  }\n  bitsSum = bits1 + output;\n  tempBitsResult = input1 ^ input2;\n  bits1 = input1 << 9;\n  isZero = bits1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (bits1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = tempBitsResult & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    borrow = SBORROW4(bitsSum,0x7f);\n    bitsDiff = bitsSum + -0x7f;\n    isZero = bitsDiff == 0;\n    tempBits = bitsDiff;\n    if (!isZero && 0x7e < bitsSum) {\n      borrow = SBORROW4(0xff,bitsDiff);\n      tempBits = 0xff - bitsDiff;\n      isZero = bitsDiff == 0xff;\n    }\n    if (!isZero && tempBits < 0 == borrow) {\n      result = result | bitsDiff * 0x800000;\n    }\n    if (!isZero && tempBits < 0 == borrow) {\n      return result;\n    }\n    result = result | 0x800000;\n    tempResult = 0;\n    borrow = SBORROW4(bitsDiff,1);\n    tempBitsResult = bitsSum - 0x80;\n    isZero = tempBitsResult == 0;\n    bits1 = tempBitsResult;\n  }\n  else {\n    tempLong1 = (ulonglong)(bits1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    tempResult = (uint)tempLong1;\n    result = (uint)((ulonglong)tempLong1 >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | tempResult >> 0x1f;\n      tempResult = tempResult << 1;\n    }\n    result = tempBitsResult & 0x80000000 | result;\n    tempBitsResult = (bitsSum + -0x7f) - (uint)isZero;\n    borrow = SBORROW4(tempBitsResult,0xfd);\n    isZero = tempBitsResult == 0xfd;\n    bits1 = tempBitsResult - 0xfd;\n    if (tempBitsResult < 0xfe) {\n      result = result + tempBitsResult * 0x800000 + (uint)(0x7fffffff < tempResult);\n      if (tempResult == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)bits1 < 0 != borrow) {\n    isZero = (int)(tempBitsResult + 0x19) < 0;\n    if (tempBitsResult == 0xffffffe7 || isZero != SCARRY4(tempBitsResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (tempBitsResult != 0xffffffe7 && isZero == SCARRY4(tempBitsResult,0x19)) {\n      bits1 = (result << 1) >> (-tempBitsResult & 0xff);\n      tempBitsResult = result << (tempBitsResult + 0x20 & 0xff);\n      bits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | bits1 >> 1) + (uint)((byte)bits1 & 1);\n      if ((tempResult | tempBitsResult << 1) == 0) {\n        bits1 = bits1 & ~(tempBitsResult >> 0x1f);\n      }\n      return bits1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag",
                "param_4": "output",
                "lVar1": "tempLong1",
                "uVar2": "result",
                "uVar3": "bits1",
                "iVar4": "bitsSum",
                "iVar5": "bitsDiff",
                "uVar6": "tempResult",
                "iVar7": "tempBits",
                "uVar8": "tempBitsResult",
                "bVar9": "isZero",
                "bVar10": "borrow"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "plan_cycle_reinitialize",
                "calculate_trapezoid_for_block",
                "max_allowable_speed",
                "homing_cycle",
                "mc_dwell",
                "intersection_distance",
                "mc_go_home",
                "plan_buffer_line",
                "read_float",
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_float_08009054",
            "code": "\nuint calculateFloat_08009054(uint float_1,uint float_2,undefined4 unknown_1,uint unknown_2)\n\n{\n  uint temp_1;\n  uint temp_2;\n  int index_1;\n  uint temp_3;\n  int index_2;\n  uint result;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  \n  temp_2 = float_1 >> 0x17 & 0xff;\n  flag_1 = temp_2 == 0;\n  if (!flag_1) {\n    unknown_2 = float_2 >> 0x17 & 0xff;\n    flag_1 = unknown_2 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_2 == 0xff;\n  }\n  if (!flag_1) {\n    flag_1 = unknown_2 == 0xff;\n  }\n  if (flag_1) {\n    unknown_2 = float_2 >> 0x17 & 0xff;\n    result = float_1;\n    if (temp_2 == 0xff) {\n      if (((float_1 & 0x7fffff) != 0) || (result = float_2, unknown_2 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (unknown_2 == 0xff) {\n        result = float_2;\n        if ((float_2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (float_1 ^ float_2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      flag_1 = (float_1 & 0x7fffffff) == 0;\n      if (!flag_1) {\n        flag_1 = (float_2 & 0x7fffffff) == 0;\n      }\n      if (!flag_1) {\n        flag_1 = temp_2 == 0;\n        result = float_1 & 0x80000000;\n        while( true ) {\n          if (flag_1) {\n            float_1 = float_1 << 1;\n            flag_1 = (float_1 & 0x800000) == 0;\n          }\n          if (!flag_1) break;\n          temp_2 = temp_2 - 1;\n        }\n        float_1 = float_1 | result;\n        flag_1 = unknown_2 == 0;\n        result = float_2 & 0x80000000;\n        while( true ) {\n          if (flag_1) {\n            float_2 = float_2 << 1;\n            flag_1 = (float_2 & 0x800000) == 0;\n          }\n          if (!flag_1) break;\n          unknown_2 = unknown_2 - 1;\n        }\n        float_2 = float_2 | result;\n        goto LAB_0800906c;\n      }\n      if ((float_1 & 0x7fffffff) == 0) {\n        if ((float_2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    float_1 = float_1 ^ float_2;\n  }\n  else {\nLAB_0800906c:\n    index_1 = temp_2 - unknown_2;\n    if (float_2 << 9 == 0) {\n      float_1 = (float_1 ^ float_2) & 0x80000000 | float_1 & 0x7fffff;\n      flag_3 = SCARRY4(index_1,0x7f);\n      index_2 = index_1 + 0x7f;\n      flag_1 = index_2 < 0;\n      flag_2 = index_2 == 0;\n      if (!flag_2 && flag_1 == flag_3) {\n        flag_3 = SBORROW4(0xff,index_2);\n        flag_1 = 0xff - index_2 < 0;\n        flag_2 = index_2 == 0xff;\n      }\n      if (!flag_2 && flag_1 == flag_3) {\n        float_1 = float_1 | index_2 * 0x800000;\n      }\n      if (!flag_2 && flag_1 == flag_3) {\n        return float_1;\n      }\n      float_1 = float_1 | 0x800000;\n      temp_2 = 0;\n      flag_2 = SBORROW4(index_2,1);\n      temp_3 = index_1 + 0x7e;\n      flag_1 = temp_3 == 0;\n      result = temp_3;\n    }\n    else {\n      temp_1 = (float_2 << 9) >> 4 | 0x10000000;\n      temp_2 = (float_1 << 9) >> 4 | 0x10000000;\n      float_1 = (float_1 ^ float_2) & 0x80000000;\n      flag_1 = temp_1 <= temp_2;\n      if (!flag_1) {\n        temp_2 = temp_2 << 1;\n      }\n      temp_3 = index_1 + 0x7d + (uint)flag_1;\n      result = 0x800000;\n      do {\n        if (temp_1 <= temp_2) {\n          temp_2 = temp_2 - temp_1;\n          float_1 = float_1 | result;\n        }\n        flag_1 = temp_1 >> 1 <= temp_2;\n        if (flag_1) {\n          temp_2 = temp_2 - (temp_1 >> 1);\n        }\n        if (flag_1) {\n          float_1 = float_1 | result >> 1;\n        }\n        flag_1 = temp_1 >> 2 <= temp_2;\n        if (flag_1) {\n          temp_2 = temp_2 - (temp_1 >> 2);\n        }\n        if (flag_1) {\n          float_1 = float_1 | result >> 2;\n        }\n        flag_1 = temp_1 >> 3 <= temp_2;\n        if (flag_1) {\n          temp_2 = temp_2 - (temp_1 >> 3);\n        }\n        if (flag_1) {\n          float_1 = float_1 | result >> 3;\n        }\n        temp_2 = temp_2 * 0x10;\n        flag_1 = temp_2 == 0;\n        if (!flag_1) {\n          result = result >> 4;\n          flag_1 = result == 0;\n        }\n      } while (!flag_1);\n      flag_2 = SBORROW4(temp_3,0xfd);\n      flag_1 = temp_3 == 0xfd;\n      result = temp_3 - 0xfd;\n      if (temp_3 < 0xfe) {\n        float_1 = float_1 + temp_3 * 0x800000 + (uint)(temp_1 <= temp_2);\n        if (temp_2 - temp_1 == 0) {\n          float_1 = float_1 & 0xfffffffe;\n        }\n        return float_1;\n      }\n    }\n    if (flag_1 || (int)result < 0 != flag_2) {\n      flag_1 = (int)(temp_3 + 0x19) < 0;\n      if (temp_3 == 0xffffffe7 || flag_1 != SCARRY4(temp_3,0x19)) {\n        float_1 = float_1 & 0x80000000;\n      }\n      if (temp_3 == 0xffffffe7 || flag_1 != SCARRY4(temp_3,0x19)) {\n        return float_1;\n      }\n      result = (float_1 << 1) >> (-temp_3 & 0xff);\n      temp_3 = float_1 << (temp_3 + 0x20 & 0xff);\n      result = ((uint)((float_1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp_2 | temp_3 << 1) == 0) {\n        result = result & ~(temp_3 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return float_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_float_08009054",
                "param_1": "float_1",
                "param_2": "float_2",
                "param_3": "unknown_1",
                "param_4": "unknown_2",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "index_1",
                "uVar4": "temp_3",
                "iVar5": "index_2",
                "uVar6": "result",
                "bVar7": "flag_1",
                "bVar8": "flag_2",
                "bVar9": "flag_3"
            },
            "calling": [
                "planner_recalculate_trapezoids",
                "mc_arc",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "report_grbl_settings",
                "homing_cycle",
                "gc_set_current_position",
                "intersection_distance",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_result_0800919c",
            "code": "\nuint calculate_result_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_shifted;\n  uint input_2_shifted;\n  uint combined_shifted;\n  bool is_zero;\n  \n  input_1_shifted = input_1 * 2;\n  input_2_shifted = input_2 * 2;\n  if (((int)input_1_shifted >> 0x18 == -1 || (int)input_2_shifted >> 0x18 == -1) &&\n     ((((int)input_1_shifted >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_shifted >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_shifted = input_1_shifted | input_2 & 0x7fffffff;\n  is_zero = combined_shifted == 0;\n  if (!is_zero) {\n    combined_shifted = input_1 ^ input_2;\n    is_zero = combined_shifted == 0;\n  }\n  is_negative = -1 < (int)combined_shifted;\n  if (is_negative) {\n    input_1 = input_1_shifted + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_shifted <= input_1_shifted) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_shifted > input_1_shifted) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_shifted",
                "uVar3": "input_2_shifted",
                "uVar4": "combined_shifted",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "compare_floats_080091fc",
            "code": "\nvoid compareFloats_080091fc(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_integers_08009204",
            "code": "\nundefined8 concatenateIntegers_08009204(undefined4 firstInteger,undefined4 secondInteger)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondInteger,firstInteger);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_integers_08009204",
                "param_1": "firstInteger",
                "param_2": "secondInteger"
            },
            "calling": [
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmple",
                "__aeabi_fcmpeq"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_condition_08009214",
            "code": "\nbool check_condition_08009214(void)\n\n{\n  char result;\n  \n  __aeabi_cfcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_condition_08009214",
                "in_ZR": "result"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "planner_forward_pass_kernel",
                "gc_execute_line",
                "planner_reverse_pass_kernel",
                "read_float"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "is_null_byte_present_08009228",
            "code": "\nbool is_null_byte_present_08009228(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfcmpeq();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "is_null_byte_present_08009228",
                "in_CY": "input_char"
            },
            "calling": [
                "settings_store_global_setting",
                "planner_forward_pass_kernel",
                "gc_execute_line",
                "planner_reverse_pass_kernel",
                "printFloat",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "compare_carry_flag_with_zero_0800923c",
            "code": "\nbool compareCarryFlagWithZero_0800923c(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "compare_carry_flag_with_zero_0800923c",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "is_condition_met_08009250",
            "code": "\nbool isConditionMet_08009250(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_08009250": "is_condition_met_08009250",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "mc_arc",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_if_character_is_null_08009264",
            "code": "\nbool check_if_character_is_null_08009264(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_if_character_is_null_08009264",
                "in_CY": "input_character"
            },
            "calling": [
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_signed_08009278",
            "code": "\nuint convertToSigned_08009278(uint inputNum)\n\n{\n  uint shiftedNum;\n  uint difference;\n  \n  if (inputNum << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedNum = (inputNum << 1) >> 0x18;\n  difference = 0x9e - shiftedNum;\n  if (shiftedNum < 0x9f && difference != 0) {\n    shiftedNum = (inputNum << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputNum & 0x80000000) != 0) {\n      shiftedNum = -shiftedNum;\n    }\n    return shiftedNum;\n  }\n  if ((difference == 0xffffff9f) && ((inputNum & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputNum = inputNum & 0x80000000;\n  if (inputNum == 0) {\n    inputNum = 0x7fffffff;\n  }\n  return inputNum;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_signed_08009278",
                "param_1": "inputNum",
                "uVar1": "shiftedNum",
                "uVar2": "difference"
            },
            "calling": [
                "protocol_execute_line",
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080092c4": {
            "entrypoint": "0x080092c4",
            "current_name": "initialize_system_080092c4",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initializeSystem_080092c4(void)\n\n{\n  int counter;\n  undefined4 *ptr;\n  code *jumpTablePointer;\n  \n  for (counter = 0; (undefined4 *)(counter + 0x20000000) < &DAT_2000044c; counter = counter + 4) {\n    *(undefined4 *)(counter + 0x20000000) = *(undefined4 *)(counter + 0x800c0c0);\n  }\n  for (ptr = &DAT_2000044c; ptr < &DAT_20000f20; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTablePointer = (code *)0x80092fa;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTablePointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080092c4": "initialize_system_080092c4",
                "iVar1": "counter",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumpTablePointer"
            },
            "calling": [],
            "called": [
                "__libc_init_array",
                "main",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_floating_point_08009318",
            "code": "\nlonglong calculateFloatingPoint_08009318(uint input1,uint input2,undefined4 constant1,undefined4 constant2)\n\n{\n  int comparisonResult;\n  uint bitDifference;\n  uint mask;\n  bool carryFlag;\n  undefined8 sumResult;\n  longlong result;\n  \n  mask = (input2 << 1) >> 0x15;\n  bitDifference = mask - 0x3ff;\n  if ((int)bitDifference < 0x14) {\n    if ((int)bitDifference < 0) {\n      sumResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,constant2);\n      comparisonResult = __aeabi_dcmpgt((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparisonResult != 0) {\n        if ((int)input2 < 0) {\n          result = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (bitDifference & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        sumResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,constant2);\n        comparisonResult = __aeabi_dcmpgt((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0,0);\n        result = CONCAT44(input2,input1);\n        if (comparisonResult != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (bitDifference & 0xff));\n          }\n          result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)bitDifference < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      sumResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,constant2);\n      comparisonResult = __aeabi_dcmpgt((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparisonResult != 0) {\n        if (0 < (int)input2) {\n          if (bitDifference == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            bitDifference = 1 << (0x34 - bitDifference & 0xff);\n            carryFlag = CARRY4(bitDifference,input1);\n            input1 = bitDifference + input1;\n            if (carryFlag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (bitDifference == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_floating_point_08009318",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant1",
                "param_4": "constant2",
                "iVar1": "comparisonResult",
                "uVar2": "bitDifference",
                "uVar3": "mask",
                "bVar4": "carryFlag",
                "uVar5": "sumResult",
                "lVar6": "result"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_trigonometric_value_08009410",
            "code": "\nundefined4 calculate_trigonometric_value_08009410(undefined4 input_angle,uint flags)\n\n{\n  undefined4 result;\n  uint remainder_flags;\n  undefined4 remainder;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  \n  if (0x3fe921fb < (flags & 0x7fffffff)) {\n    if ((flags & 0x7fffffff) < 0x7ff00000) {\n      remainder_flags = __ieee754_rem_pio2(input_angle,flags,&remainder);\n      remainder_flags = remainder_flags & 3;\n      if (remainder_flags == 1) {\n        result = __kernel_sin(remainder,temp_var1,temp_var2,temp_var3,1);\n      }\n      else if (remainder_flags == 2) {\n        result = __kernel_cos(remainder,temp_var1,temp_var2,temp_var3);\n      }\n      else if (remainder_flags == 0) {\n        result = __kernel_cos(remainder,temp_var1,temp_var2,temp_var3);\n      }\n      else {\n        result = __kernel_sin(remainder,temp_var1,temp_var2,temp_var3,1);\n      }\n    }\n    else {\n      result = __subdf3(input_angle,flags,input_angle,flags);\n    }\n    return result;\n  }\n  result = __kernel_cos(input_angle,flags,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_trigonometric_value_08009410",
                "param_1": "input_angle",
                "param_2": "flags",
                "uVar1": "result",
                "uVar2": "remainder_flags",
                "local_28": "remainder",
                "uStack_24": "temp_var1",
                "local_20": "temp_var2",
                "uStack_1c": "temp_var3"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_cos",
                "__subdf3",
                "__kernel_sin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_floating_point_value_080094c0",
            "code": "\nlonglong calculateFloatingPointValue_080094c0(uint inputValue,uint shiftAmount,undefined4 param_3,undefined4 param_4)\n\n{\n  int comparisonResult;\n  uint shiftedValue;\n  uint mask;\n  bool carryFlag;\n  undefined8 sum;\n  longlong lVar6;\n  \n  mask = (shiftAmount << 1) >> 0x15;\n  shiftedValue = mask - 0x3ff;\n  if ((int)shiftedValue < 0x14) {\n    if ((int)shiftedValue < 0) {\n      sum = __aeabi_dadd(inputValue,shiftAmount,0x8800759c,0x7e37e43c,param_4);\n      comparisonResult = __aeabi_dcmpgt((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      lVar6 = CONCAT44(shiftAmount,inputValue);\n      if (comparisonResult != 0) {\n        if ((int)shiftAmount < 0) {\n          if ((inputValue | shiftAmount & 0x7fffffff) != 0) {\n            shiftAmount = 0xbff00000;\n          }\n          lVar6 = (ulonglong)shiftAmount << 0x20;\n        }\n        else {\n          lVar6 = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shiftedValue & 0xff);\n      lVar6 = CONCAT44(shiftAmount,inputValue);\n      if ((shiftAmount & mask | inputValue) != 0) {\n        sum = __aeabi_dadd(inputValue,shiftAmount,0x8800759c,0x7e37e43c,param_4);\n        comparisonResult = __aeabi_dcmpgt((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n        lVar6 = CONCAT44(shiftAmount,inputValue);\n        if (comparisonResult != 0) {\n          if ((int)shiftAmount < 0) {\n            shiftAmount = shiftAmount + (0x100000 >> (shiftedValue & 0xff));\n          }\n          lVar6 = (ulonglong)(shiftAmount & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftedValue < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    lVar6 = CONCAT44(shiftAmount,inputValue);\n    if ((mask & inputValue) != 0) {\n      sum = __aeabi_dadd(inputValue,shiftAmount,0x8800759c,0x7e37e43c,param_4);\n      comparisonResult = __aeabi_dcmpgt((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      lVar6 = CONCAT44(shiftAmount,inputValue);\n      if (comparisonResult != 0) {\n        if ((int)shiftAmount < 0) {\n          if (shiftedValue == 0x14) {\n            shiftAmount = shiftAmount + 1;\n          }\n          else {\n            shiftedValue = 1 << (0x34 - shiftedValue & 0xff);\n            carryFlag = CARRY4(shiftedValue,inputValue);\n            inputValue = shiftedValue + inputValue;\n            if (carryFlag != false) {\n              shiftAmount = shiftAmount + 1;\n            }\n          }\n        }\n        lVar6 = CONCAT44(shiftAmount,inputValue & ~mask);\n      }\n    }\n  }\n  else {\n    lVar6 = CONCAT44(shiftAmount,inputValue);\n    if (shiftedValue == 0x400) {\n      lVar6 = __aeabi_dadd();\n    }\n  }\n  return lVar6;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_floating_point_value_080094c0",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "iVar1": "comparisonResult",
                "uVar2": "shiftedValue",
                "uVar3": "mask",
                "bVar4": "carryFlag",
                "uVar5": "sum"
            },
            "calling": [
                "mc_arc",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2",
                "mc_dwell"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_signed_integer_inverse_080095b8",
            "code": "\nint calculateSignedIntegerInverse_080095b8(uint inputValue1,uint inputValue2)\n\n{\n  uint carryValue;\n  uint shiftedValue;\n  uint result;\n  int sign;\n  uint exponent;\n  \n  shiftedValue = (inputValue2 << 1) >> 0x15;\n  exponent = shiftedValue - 0x3ff;\n  if ((int)inputValue2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = inputValue2 & 0xfffff | 0x100000;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if (exponent != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (exponent & 0xff)) >> (0x14 - exponent & 0xff);\n  }\n  else {\n    if (0x1e < exponent) {\n      sign = __aeabi_d2iz();\n      return sign;\n    }\n    if ((int)exponent < 0x34) {\n      carryValue = 0x80000000 >> (shiftedValue - 0x413 & 0xff);\n      if (CARRY4(carryValue,inputValue1) != false) {\n        result = result + 1;\n      }\n      result = result << (shiftedValue - 0x413 & 0xff);\n      if (exponent != 0x14) {\n        result = result | carryValue + inputValue1 >> (0x34 - exponent & 0xff);\n      }\n    }\n    else {\n      result = result << (shiftedValue - 0x413 & 0xff) | inputValue1 << (shiftedValue - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_signed_integer_inverse_080095b8",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "carryValue",
                "uVar2": "shiftedValue",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "exponent"
            },
            "calling": [
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_d2iz"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "calculate_floating_point_08009654",
            "code": "\nlonglong calculateFloatingPoint_08009654(uint mantissa,uint exponent)\n\n{\n  uint shiftValue;\n  uint maskValue;\n  longlong result;\n  \n  result = CONCAT44(exponent,mantissa);\n  maskValue = (exponent << 1) >> 0x15;\n  shiftValue = maskValue - 0x3ff;\n  if ((int)shiftValue < 0x14) {\n    if ((int)shiftValue < 0) {\n      exponent = exponent & 0x80000000;\n      if (shiftValue == 0xffffffff) {\n        exponent = exponent | 0x3ff00000;\n      }\n      result = (ulonglong)exponent << 0x20;\n    }\n    else {\n      maskValue = 0xfffff >> (shiftValue & 0xff);\n      result = CONCAT44(exponent,mantissa);\n      if ((exponent & maskValue | mantissa) != 0) {\n        result = (ulonglong)(exponent + (0x80000 >> (shiftValue & 0xff)) & ~maskValue) << 0x20;\n      }\n    }\n  }\n  else if ((int)shiftValue < 0x34) {\n    maskValue = 0xffffffff >> (maskValue - 0x413 & 0xff);\n    if ((mantissa & maskValue) != 0) {\n      shiftValue = 1 << (0x33 - shiftValue & 0xff);\n      if (CARRY4(mantissa,shiftValue) != false) {\n        exponent = exponent + 1;\n      }\n      result = CONCAT44(exponent,mantissa + shiftValue & ~maskValue);\n    }\n  }\n  else {\n    result = CONCAT44(exponent,mantissa);\n    if (shiftValue == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "calculate_floating_point_08009654",
                "param_1": "mantissa",
                "param_2": "exponent",
                "uVar1": "shiftValue",
                "uVar2": "maskValue",
                "lVar3": "result"
            },
            "calling": [
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_trigonometric_080096e8",
            "code": "\nundefined4 calculate_trigonometric_080096e8(undefined4 angle_sign,uint angle)\n\n{\n  undefined4 result;\n  uint remainder;\n  undefined4 integer_part;\n  undefined4 fraction_part;\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  if (0x3fe921fb < (angle & 0x7fffffff)) {\n    if ((angle & 0x7fffffff) < 0x7ff00000) {\n      remainder = __ieee754_rem_pio2(angle_sign,angle,&integer_part);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = __kernel_cos(integer_part,fraction_part,temp1,temp2);\n      }\n      else if (remainder == 2) {\n        result = __kernel_sin(integer_part,fraction_part,temp1,temp2,1);\n      }\n      else if (remainder == 0) {\n        result = __kernel_sin(integer_part,fraction_part,temp1,temp2,1);\n      }\n      else {\n        result = __kernel_cos(integer_part,fraction_part,temp1,temp2);\n      }\n    }\n    else {\n      result = __subdf3(angle_sign,angle,angle_sign,angle);\n    }\n    return result;\n  }\n  result = __kernel_sin(angle_sign,angle,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_trigonometric_080096e8",
                "param_1": "angle_sign",
                "param_2": "angle",
                "uVar1": "result",
                "uVar2": "remainder",
                "local_28": "integer_part",
                "uStack_24": "fraction_part",
                "local_20": "temp1",
                "uStack_1c": "temp2"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_cos",
                "__subdf3",
                "__kernel_sin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "decode_and_combine_08009798",
            "code": "\nlonglong decode_and_combine_08009798(uint input_value_1,uint input_value_2,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  uint num_shifts;\n  uint shifted_input_value_2;\n  longlong result;\n  \n  shifted_input_value_2 = (input_value_2 << 1) >> 0x15;\n  num_shifts = shifted_input_value_2 - 0x3ff;\n  if ((int)num_shifts < 0x14) {\n    if ((int)num_shifts < 0) {\n      return ((ulonglong)input_value_2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input_value_2 & ~(0xfffff >> (num_shifts & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)num_shifts < 0x34) {\n      return CONCAT44(input_value_2,input_value_1 & ~(0xffffffffU >> (shifted_input_value_2 - 0x413 & 0xff)));\n    }\n    if (num_shifts != 0x400) {\n      return CONCAT44(input_value_2,input_value_1);\n    }\n    result = __aeabi_dadd(input_value_1,input_value_2,input_value_1,input_value_2,unused_param_2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "decode_and_combine_08009798",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "num_shifts",
                "uVar2": "shifted_input_value_2",
                "lVar3": "result"
            },
            "calling": [
                "settings_store_global_setting",
                "protocol_execute_line",
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009818": {
            "entrypoint": "0x08009818",
            "current_name": "FUN_08009818",
            "code": "\nuint __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  \n  uVar4 = param_4 & 0x7fffffff;\n  if (((uVar4 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar5 = param_2 & 0x7fffffff, (uVar5 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      uVar4 = atan();\n      return uVar4;\n    }\n    uVar3 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if ((uVar5 | param_1) == 0) {\n      if (uVar3 == 2) {\n        param_1 = 0x54442d18;\n      }\n      else if (uVar3 == 3) {\n        param_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((uVar4 | param_3) != 0) {\n        if (uVar4 == 0x7ff00000) {\n          uVar3 = uVar3 - 1;\n          if (uVar5 == 0x7ff00000) {\n            if (uVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + uVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (uVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + uVar3 * 8);\n          }\n          return 0;\n        }\n        if (uVar5 != 0x7ff00000) {\n          iVar1 = (int)(uVar5 - uVar4) >> 0x14;\n          if ((int)(uVar5 - uVar4) < 0x3d00000) {\n            if (((int)param_4 < 0) && (iVar1 + 0x3c < 0 != SCARRY4(iVar1,0x3c))) {\n              uVar6 = 0;\n            }\n            else {\n              __divdf3(param_1,param_2,param_3,param_4,param_4);\n              fabs();\n              uVar6 = atan();\n            }\n          }\n          else {\n            uVar6 = 0x3ff921fb54442d18;\n          }\n          uVar2 = (undefined4)((ulonglong)uVar6 >> 0x20);\n          uVar4 = (uint)uVar6;\n          if (uVar3 == 1) {\n            return uVar4;\n          }\n          if (uVar3 == 2) {\n            uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n            uVar4 = __subdf3(0x54442d18,0x400921fb,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n            return uVar4;\n          }\n          if (uVar3 == 0) {\n            return uVar4;\n          }\n          uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n          uVar4 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),0x54442d18,0x400921fb);\n          return uVar4;\n        }\n      }\n      if ((int)param_2 < 0) {\n        param_1 = 0x54442d18;\n      }\n      else {\n        param_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    param_1 = __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return param_1;\n}\n\n",
            "renaming": {},
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 length_1,undefined4 length_2,undefined4 length_3,undefined4 length_4)\n\n{\n  int is_finite;\n  undefined4 *err_num_ptr;\n  int *err_num_ptr_2;\n  undefined8 result;\n  undefined4 matherr_arg;\n  char *matherr_name;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 min_value;\n  undefined4 max_value;\n  int err_num;\n  \n  result = __ieee754_hypot();\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  err_num = finite();\n  if (err_num != 0) {\n    return result;\n  }\n  is_finite = finite(length_1,length_2);\n  if (is_finite == 0) {\n    return result;\n  }\n  is_finite = finite(length_3,length_4);\n  if (is_finite == 0) {\n    return result;\n  }\n  matherr_arg = 3;\n  matherr_name = \"hypot\";\n  param_1_copy = length_1;\n  param_2_copy = length_2;\n  param_3_copy = length_3;\n  param_4_copy = length_4;\n  if (DAT_20000014 == '\\0') {\n    min_value = 0xe0000000;\n    max_value = 0x47efffff;\nLAB_080098aa:\n    is_finite = matherr(&matherr_arg);\n    if (is_finite != 0) goto LAB_08009896;\n  }\n  else {\n    min_value = 0;\n    max_value = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  err_num_ptr = (undefined4 *)__errno();\n  *err_num_ptr = 0x22;\nLAB_08009896:\n  result = CONCAT44(max_value,min_value);\n  if (err_num != 0) {\n    err_num_ptr_2 = (int *)__errno();\n    result = CONCAT44(max_value,min_value);\n    *err_num_ptr_2 = err_num;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "length_1",
                "param_2": "length_2",
                "param_3": "length_3",
                "param_4": "length_4",
                "iVar1": "is_finite",
                "puVar2": "err_num_ptr",
                "piVar3": "err_num_ptr_2",
                "uVar4": "result",
                "local_50": "matherr_arg",
                "pcStack_4c": "matherr_name",
                "local_48": "param_1_copy",
                "uStack_44": "param_2_copy",
                "local_40": "param_3_copy",
                "uStack_3c": "param_4_copy",
                "local_38": "min_value",
                "uStack_34": "max_value",
                "local_30": "err_num"
            },
            "calling": [
                "mc_arc",
                "gc_execute_line"
            ],
            "called": [
                "matherr",
                "__errno",
                "__ieee754_hypot",
                "finite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "calculate_square_root_080098d0",
            "code": "\nundefined4 calculateSquareRoot_080098d0(undefined4 inputValue1,undefined4 inputValue2)\n\n{\n  char dataFlag;\n  undefined4 squareRoot;\n  int comparisonResult;\n  undefined4 *errnoPointer;\n  int *errnoValue;\n  undefined4 flagValue;\n  undefined *dataPointer;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input1;\n  undefined4 input2;\n  undefined8 mathErrorValue;\n  int errorValue;\n  \n  squareRoot = __ieee754_sqrt();\n  dataFlag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (errorValue = __unorddf2(inputValue1,inputValue2,inputValue1,inputValue2), errorValue != 0)) ||\n     (comparisonResult = __aeabi_dcmplt(inputValue1,inputValue2,0,0), comparisonResult == 0)) {\n    return squareRoot;\n  }\n  flagValue = 1;\n  dataPointer = &DAT_0800be5c;\n  input1Copy = inputValue1;\n  input2Copy = inputValue2;\n  input1 = inputValue1;\n  input2 = inputValue2;\n  if (dataFlag == '\\0') {\n    mathErrorValue = 0;\nLAB_0800996c:\n    comparisonResult = matherr(&flagValue);\n    if (comparisonResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    mathErrorValue = __divdf3(0,0,0,0);\n    if (dataFlag != '\\x02') goto LAB_0800996c;\n  }\n  errnoPointer = (undefined4 *)__errno();\n  *errnoPointer = 0x21;\njoined_r0x0800997a:\n  if (errorValue != 0) {\n    errnoValue = (int *)__errno();\n    *errnoValue = errorValue;\n  }\n  return (undefined4)mathErrorValue;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "calculate_square_root_080098d0",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "cVar1": "dataFlag",
                "uVar2": "squareRoot",
                "iVar3": "comparisonResult",
                "puVar4": "errnoPointer",
                "piVar5": "errnoValue",
                "local_50": "flagValue",
                "local_4c": "dataPointer",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input1",
                "uStack_3c": "input2",
                "local_38": "mathErrorValue",
                "local_30": "errorValue"
            },
            "calling": [
                "gc_execute_line",
                "max_allowable_speed",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__ieee754_sqrt",
                "matherr",
                "__errno",
                "__unorddf2",
                "__divdf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_atan_08009990",
            "code": "\nuint calculate_atan_08009990(uint numerator,uint denominator,uint partial_result,uint temp_variable)\n\n{\n  int difference;\n  undefined4 upper_bits;\n  uint bit_shift;\n  uint masked_temp;\n  uint masked_denominator;\n  undefined8 atan_result;\n  \n  masked_temp = temp_variable & 0x7fffffff;\n  if (((masked_temp | (-partial_result | partial_result) >> 0x1f) < 0x7ff00001) &&\n     (masked_denominator = denominator & 0x7fffffff, (masked_denominator | (-numerator | numerator) >> 0x1f) < 0x7ff00001)) {\n    if ((temp_variable + 0xc0100000 | partial_result) == 0) {\n      masked_temp = atan();\n      return masked_temp;\n    }\n    bit_shift = (int)temp_variable >> 0x1e & 2U | denominator >> 0x1f;\n    if ((masked_denominator | numerator) == 0) {\n      if (bit_shift == 2) {\n        numerator = 0x54442d18;\n      }\n      else if (bit_shift == 3) {\n        numerator = 0x54442d18;\n      }\n    }\n    else {\n      if ((masked_temp | partial_result) != 0) {\n        if (masked_temp == 0x7ff00000) {\n          bit_shift = bit_shift - 1;\n          if (masked_denominator == 0x7ff00000) {\n            if (bit_shift < 3) {\n              return *(uint *)(&DAT_0800be68 + bit_shift * 8);\n            }\n            return 0x54442d18;\n          }\n          if (bit_shift < 3) {\n            return *(uint *)(&DAT_0800be80 + bit_shift * 8);\n          }\n          return 0;\n        }\n        if (masked_denominator != 0x7ff00000) {\n          difference = (int)(masked_denominator - masked_temp) >> 0x14;\n          if ((int)(masked_denominator - masked_temp) < 0x3d00000) {\n            if (((int)temp_variable < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              atan_result = 0;\n            }\n            else {\n              __divdf3(numerator,denominator,partial_result,temp_variable,temp_variable);\n              fabs();\n              atan_result = atan();\n            }\n          }\n          else {\n            atan_result = 0x3ff921fb54442d18;\n          }\n          upper_bits = (undefined4)((ulonglong)atan_result >> 0x20);\n          masked_temp = (uint)atan_result;\n          if (bit_shift == 1) {\n            return masked_temp;\n          }\n          if (bit_shift == 2) {\n            atan_result = __subdf3(masked_temp,upper_bits,0x33145c07,0x3ca1a626);\n            masked_temp = __subdf3(0x54442d18,0x400921fb,(int)atan_result,(int)((ulonglong)atan_result >> 0x20));\n            return masked_temp;\n          }\n          if (bit_shift == 0) {\n            return masked_temp;\n          }\n          atan_result = __subdf3(masked_temp,upper_bits,0x33145c07,0x3ca1a626);\n          masked_temp = __subdf3((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0x54442d18,0x400921fb);\n          return masked_temp;\n        }\n      }\n      if ((int)denominator < 0) {\n        numerator = 0x54442d18;\n      }\n      else {\n        numerator = 0x54442d18;\n      }\n    }\n  }\n  else {\n    numerator = __aeabi_dadd(partial_result,temp_variable,numerator,denominator);\n  }\n  return numerator;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_atan_08009990",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "partial_result",
                "param_4": "temp_variable",
                "iVar1": "difference",
                "uVar2": "upper_bits",
                "uVar3": "bit_shift",
                "uVar4": "masked_temp",
                "uVar5": "masked_denominator",
                "uVar6": "atan_result"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "__aeabi_dadd",
                "atan",
                "fabs",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_circle_area_08009b24",
            "code": "\nuint calculateCircleArea_08009b24(uint radius1,uint radius2,uint radius3,uint radius4)\n\n{\n  undefined4 result1;\n  int result2;\n  uint radius;\n  int result3;\n  undefined4 result4;\n  int result5;\n  uint maxRadius;\n  undefined4 highBits1;\n  undefined4 lowBits1;\n  undefined8 highBits2;\n  undefined8 lowBits2;\n  undefined8 highBits3;\n  undefined8 lowBits3;\n  int correctionFactor;\n  \n  radius2 = radius2 & 0x7fffffff;\n  radius4 = radius4 & 0x7fffffff;\n  radius = radius1;\n  maxRadius = radius2;\n  if (radius2 < radius4) {\n    radius = radius3;\n    radius3 = radius1;\n    maxRadius = radius4;\n    radius4 = radius2;\n  }\n  if (0x3c00000 < (int)(maxRadius - radius4)) {\n    radius = __aeabi_dadd(radius,maxRadius,radius3,radius4);\n    return radius;\n  }\n  if (maxRadius < 0x5f300001) {\n    correctionFactor = 0;\n  }\n  else {\n    if (0x7fefffff < maxRadius) {\n      if ((maxRadius & 0xfffff | radius) != 0) {\n        radius = __aeabi_dadd(radius,maxRadius,radius3,radius4);\n      }\n      if ((radius4 ^ 0x7ff00000 | radius3) != 0) {\n        return radius;\n      }\n      return radius3;\n    }\n    maxRadius = maxRadius + 0xda800000;\n    radius4 = radius4 + 0xda800000;\n    correctionFactor = 600;\n  }\n  lowBits2 = CONCAT44(maxRadius,radius);\n  highBits2 = CONCAT44(radius4,radius3);\n  if ((int)radius4 < 0x20b00000) {\n    if ((int)radius4 < 0x100000) {\n      if ((radius4 | radius3) == 0) {\n        return radius;\n      }\n      highBits2 = __muldf3(radius3,radius4,0,0x7fd00000);\n      lowBits2 = __muldf3(radius,maxRadius,0,0x7fd00000);\n      correctionFactor = correctionFactor + -0x3fe;\n    }\n    else {\n      maxRadius = maxRadius + 0x25800000;\n      lowBits2 = CONCAT44(maxRadius,radius);\n      radius4 = radius4 + 0x25800000;\n      highBits2 = CONCAT44(radius4,radius3);\n      correctionFactor = correctionFactor + -600;\n    }\n  }\n  lowBits1 = (undefined4)((ulonglong)lowBits2 >> 0x20);\n  highBits1 = (undefined4)lowBits2;\n  result5 = (int)((ulonglong)highBits2 >> 0x20);\n  result4 = (undefined4)highBits2;\n  highBits2 = __subdf3(highBits1,lowBits1,result4,result5);\n  result3 = (int)((ulonglong)highBits2 >> 0x20);\n  result1 = (undefined4)highBits2;\n  result2 = __aeabi_dcmplt(result4,result5,result1,result3);\n  if (result2 == 0) {\n    highBits2 = __muldf3(0,radius4,0);\n    lowBits2 = __muldf3(result1,result3 + -0x80000000,result1,result3);\n    highBits3 = __aeabi_dadd(highBits1,lowBits1,highBits1,lowBits1);\n    highBits3 = __subdf3((int)highBits3,(int)((ulonglong)highBits3 >> 0x20),0,maxRadius + 0x100000);\n    highBits3 = __muldf3((int)highBits3,(int)((ulonglong)highBits3 >> 0x20),result4,result5);\n    lowBits3 = __subdf3(result4,result5,0,radius4);\n    lowBits3 = __muldf3((int)lowBits3,(int)((ulonglong)lowBits3 >> 0x20),0,maxRadius + 0x100000);\n    highBits3 = __aeabi_dadd((int)highBits3,(int)((ulonglong)highBits3 >> 0x20),(int)lowBits3,\n                          (int)((ulonglong)lowBits3 >> 0x20));\n    lowBits2 = __subdf3((int)lowBits2,(int)((ulonglong)lowBits2 >> 0x20),(int)highBits3,\n                      (int)((ulonglong)highBits3 >> 0x20));\n    __subdf3((int)highBits2,(int)((ulonglong)highBits2 >> 0x20),(int)lowBits2,\n             (int)((ulonglong)lowBits2 >> 0x20));\n    highBits2 = __ieee754_sqrt();\n  }\n  else {\n    highBits2 = __muldf3(0,maxRadius,0,maxRadius);\n    lowBits2 = __muldf3(result4,result5 + -0x80000000,result4,result5);\n    highBits3 = __aeabi_dadd(highBits1,lowBits1,0,maxRadius);\n    lowBits3 = __subdf3(highBits1,lowBits1,0,maxRadius);\n    highBits3 = __muldf3((int)highBits3,(int)((ulonglong)highBits3 >> 0x20),(int)lowBits3,\n                      (int)((ulonglong)lowBits3 >> 0x20));\n    lowBits2 = __subdf3((int)lowBits2,(int)((ulonglong)lowBits2 >> 0x20),(int)highBits3,\n                      (int)((ulonglong)highBits3 >> 0x20));\n    __subdf3((int)highBits2,(int)((ulonglong)highBits2 >> 0x20),(int)lowBits2,\n             (int)((ulonglong)lowBits2 >> 0x20));\n    highBits2 = __ieee754_sqrt();\n  }\n  radius = (uint)highBits2;\n  if (correctionFactor != 0) {\n    radius = __muldf3(radius,(int)((ulonglong)highBits2 >> 0x20),0,correctionFactor * 0x100000 + 0x3ff00000);\n  }\n  return radius;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_circle_area_08009b24",
                "param_1": "radius1",
                "param_2": "radius2",
                "param_3": "radius3",
                "param_4": "radius4",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "radius",
                "iVar4": "result3",
                "uVar5": "result4",
                "iVar6": "result5",
                "uVar7": "maxRadius",
                "uVar8": "highBits1",
                "uVar9": "lowBits1",
                "uVar10": "highBits2",
                "uVar11": "lowBits2",
                "uVar12": "highBits3",
                "uVar13": "lowBits3",
                "local_3c": "correctionFactor"
            },
            "calling": [
                "hypot"
            ],
            "called": [
                "__ieee754_sqrt",
                "__aeabi_dadd",
                "__subdf3",
                "__muldf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_values_08009d78",
            "code": "\nint calculate_values_08009d78(undefined4 constant_value,uint floating_point,undefined8 *result_array)\n\n{\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  undefined4 temp_7;\n  uint temp_8;\n  int iteration_count;\n  undefined8 temp_9;\n  undefined8 temp_10;\n  undefined8 temp_11;\n  undefined4 local_variable_1;\n  undefined4 local_variable_2;\n  undefined8 local_variable_3;\n  undefined8 local_variable_4;\n  undefined8 local_variable_5;\n  \n  temp_8 = floating_point & 0x7fffffff;\n  if (temp_8 < 0x3fe921fc) {\n    *(undefined4 *)result_array = constant_value;\n    *(uint *)((int)result_array + 4) = floating_point;\n    *(undefined4 *)(result_array + 1) = 0;\n    *(undefined4 *)((int)result_array + 0xc) = 0;\n    return 0;\n  }\n  if (temp_8 < 0x4002d97c) {\n    if ((int)floating_point < 1) {\n      temp_9 = __aeabi_dadd(constant_value,floating_point,0x54400000,0x3ff921fb);\n      temp_3 = (undefined4)((ulonglong)temp_9 >> 0x20);\n      temp_1 = (undefined4)temp_9;\n      if (temp_8 != 0x3ff921fb) {\n        temp_9 = __aeabi_dadd(temp_1,temp_3,0x1a626331,0x3dd0b461);\n        *result_array = temp_9;\n        temp_9 = __subdf3(temp_1,temp_3);\n        temp_9 = __aeabi_dadd((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0x1a626331,0x3dd0b461);\n        result_array[1] = temp_9;\n        return -1;\n      }\n      temp_9 = __aeabi_dadd(temp_1,temp_3,0x1a600000,0x3dd0b461);\n      temp_1 = (undefined4)((ulonglong)temp_9 >> 0x20);\n      temp_10 = __aeabi_dadd((int)temp_9,temp_1,0x2e037073,0x3ba3198a);\n      *result_array = temp_10;\n      temp_9 = __subdf3((int)temp_9,temp_1);\n      temp_9 = __aeabi_dadd((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0x2e037073,0x3ba3198a);\n      result_array[1] = temp_9;\n      return -1;\n    }\n    temp_9 = __subdf3();\n    temp_3 = (undefined4)((ulonglong)temp_9 >> 0x20);\n    temp_1 = (undefined4)temp_9;\n    if (temp_8 != 0x3ff921fb) {\n      temp_9 = __subdf3(temp_1,temp_3,0x1a626331,0x3dd0b461);\n      *result_array = temp_9;\n      temp_9 = __subdf3(temp_1,temp_3);\n      temp_9 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0x1a626331,0x3dd0b461);\n      result_array[1] = temp_9;\n      return 1;\n    }\n    temp_9 = __subdf3(temp_1,temp_3,0x1a600000,0x3dd0b461);\n    temp_1 = (undefined4)((ulonglong)temp_9 >> 0x20);\n    temp_10 = __subdf3((int)temp_9,temp_1,0x2e037073,0x3ba3198a);\n    *result_array = temp_10;\n    temp_9 = __subdf3((int)temp_9,temp_1);\n    temp_9 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0x2e037073,0x3ba3198a);\n    result_array[1] = temp_9;\n    return 1;\n  }\n  if (0x413921fb < temp_8) {\n    if (0x7fefffff < temp_8) {\n      temp_9 = __subdf3(constant_value,floating_point,constant_value,floating_point);\n      result_array[1] = temp_9;\n      *result_array = temp_9;\n      return 0;\n    }\n    iteration_count = ((int)temp_8 >> 0x14) + -0x416;\n    __aeabi_d2iz();\n    local_variable_3 = __aeabi_i2d();\n    temp_9 = __subdf3(constant_value,temp_8 + iteration_count * -0x100000,(int)local_variable_3,\n                      (int)((ulonglong)local_variable_3 >> 0x20));\n    temp_9 = __muldf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0,0x41700000);\n    __aeabi_d2iz();\n    local_variable_4 = __aeabi_i2d();\n    temp_9 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20));\n    local_variable_5 = __muldf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),0,0x41700000);\n    __aeabi_dcmpeq((int)local_variable_5,(int)((ulonglong)local_variable_5 >> 0x20),0,0);\n    iteration_count = __kernel_rem_pio2(&local_variable_3,result_array,iteration_count);\n    if (-1 < (int)floating_point) {\n      return iteration_count;\n    }\n    *(int *)((int)result_array + 4) = *(int *)((int)result_array + 4) + -0x80000000;\n    *(int *)((int)result_array + 0xc) = *(int *)((int)result_array + 0xc) + -0x80000000;\n    return -iteration_count;\n  }\n  temp_9 = fabs();\n  temp_3 = (undefined4)((ulonglong)temp_9 >> 0x20);\n  temp_10 = __muldf3((int)temp_9,temp_3,0x6dc9c883,0x3fe45f30);\n  __aeabi_dadd((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0,0x3fe00000);\n  iteration_count = __aeabi_d2iz();\n  temp_10 = __aeabi_i2d();\n  temp_4 = (undefined4)((ulonglong)temp_10 >> 0x20);\n  temp_1 = (undefined4)temp_10;\n  temp_10 = __muldf3(temp_1,temp_4,0x54400000,0x3ff921fb);\n  temp_9 = __subdf3((int)temp_9,temp_3,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n  temp_5 = (undefined4)((ulonglong)temp_9 >> 0x20);\n  temp_3 = (undefined4)temp_9;\n  temp_10 = __muldf3(temp_1,temp_4,0x1a626331,0x3dd0b461);\n  if ((0x1f < iteration_count) || (*(uint *)(&DAT_0800be98 + (iteration_count + -1) * 4) == temp_8)) {\n    temp_11 = __subdf3(temp_3,temp_5,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n    if ((int)((temp_8 >> 0x14) - ((uint)((int)((ulonglong)temp_11 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp_10 = __muldf3(temp_1,temp_4,0x1a600000,0x3dd0b461);\n    temp_6 = (undefined4)((ulonglong)temp_10 >> 0x20);\n    temp_9 = __subdf3(temp_3,temp_5,(int)temp_10,temp_6);\n    temp_7 = (undefined4)((ulonglong)temp_9 >> 0x20);\n    temp_2 = (undefined4)temp_9;\n    temp_11 = __subdf3(temp_3,temp_5,temp_2,temp_7);\n    temp_10 = __subdf3((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,temp_6);\n    temp_11 = __muldf3(temp_1,temp_4,0x2e037073,0x3ba3198a);\n    temp_10 = __subdf3((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,\n                      (int)((ulonglong)temp_10 >> 0x20));\n    temp_11 = __subdf3(temp_2,temp_7,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n    if ((int)(((int)temp_8 >> 0x14) - ((uint)((int)((ulonglong)temp_11 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp_10 = __muldf3(temp_1,temp_4,0x2e000000,0x3ba3198a);\n    temp_3 = (undefined4)((ulonglong)temp_10 >> 0x20);\n    temp_9 = __subdf3(temp_2,temp_7,(int)temp_10,temp_3);\n    temp_11 = __subdf3(temp_2,temp_7);\n    temp_10 = __subdf3((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,temp_3);\n    temp_11 = __muldf3(temp_1,temp_4,0x252049c1,0x397b839a);\n    temp_10 = __subdf3((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,\n                      (int)((ulonglong)temp_10 >> 0x20));\n  }\n  temp_11 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),(int)temp_10,\n                    (int)((ulonglong)temp_10 >> 0x20));\nLAB_0800a0ce:\n  local_variable_2 = (undefined4)((ulonglong)temp_9 >> 0x20);\n  local_variable_1 = (undefined4)temp_9;\n  *result_array = temp_11;\n  temp_9 = __subdf3(local_variable_1,local_variable_2);\n  temp_9 = __subdf3((int)temp_9,(int)((ulonglong)temp_9 >> 0x20),(int)temp_10,\n                    (int)((ulonglong)temp_10 >> 0x20));\n  result_array[1] = temp_9;\n  if ((int)floating_point < 0) {\n    *(int *)result_array = (int)temp_11;\n    *(int *)((int)result_array + 4) = (int)((ulonglong)temp_11 >> 0x20) + -0x80000000;\n    *(int *)(result_array + 1) = (int)temp_9;\n    *(int *)((int)result_array + 0xc) = (int)((ulonglong)temp_9 >> 0x20) + -0x80000000;\n    iteration_count = -iteration_count;\n  }\n  return iteration_count;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_values_08009d78",
                "param_1": "constant_value",
                "param_2": "floating_point",
                "param_3": "result_array",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "uVar8": "temp_8",
                "iVar9": "iteration_count",
                "uVar10": "temp_9",
                "uVar11": "temp_10",
                "uVar12": "temp_11",
                "local_50": "local_variable_1",
                "uStack_4c": "local_variable_2",
                "local_40": "local_variable_3",
                "local_38": "local_variable_4",
                "local_30": "local_variable_5"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "fabs",
                "__aeabi_i2d",
                "__aeabi_dcmpeq",
                "__kernel_rem_pio2",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_square_root_0800a1bc",
            "code": "\nuint calculateSquareRoot_0800a1bc(uint numerator,uint denominator)\n\n{\n  uint mask;\n  int shiftCount;\n  uint temp;\n  undefined4 dividend;\n  uint exponent;\n  uint remainder;\n  uint quotient;\n  uint bit;\n  uint den;\n  int count;\n  uint comp;\n  uint shift;\n  undefined8 tmp;\n  \n  if ((~denominator & 0x7ff00000) == 0) {\n    tmp = multiply(numerator,denominator,numerator,denominator);\n    quotient = __aeabi_dadd((int)tmp,(int)((ulonglong)tmp >> 0x20),numerator,denominator);\n    return quotient;\n  }\n  if ((int)denominator < 1) {\n    if ((denominator & 0x7fffffff | numerator) == 0) {\n      return numerator;\n    }\n    if (denominator != 0) {\n      tmp = subtract(numerator,denominator,numerator);\n      dividend = (undefined4)((ulonglong)tmp >> 0x20);\n      quotient = divide((int)tmp,dividend,(int)tmp,dividend);\n      return quotient;\n    }\n    do {\n      den = numerator;\n      quotient = den >> 0xb;\n      denominator = denominator - 0x15;\n      numerator = den << 0x15;\n    } while (quotient == 0);\n    mask = denominator;\n    if (-1 < (int)den) goto LAB_0800a290;\n    shift = 0x20;\n    exponent = 0xffffffff;\n    den = numerator;\n  }\n  else {\n    mask = (int)denominator >> 0x14;\n    quotient = denominator;\n    den = numerator;\n    if (mask != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    den = 0;\n    shift = quotient;\n    do {\n      exponent = den;\n      quotient = shift << 1;\n      count = shift << 0xc;\n      den = exponent + 1;\n      shift = quotient;\n    } while (-1 < count);\n    shift = 0x20 - den;\n    denominator = mask;\n    den = numerator << (den & 0xff);\n  }\n  quotient = numerator >> (shift & 0xff) | quotient;\n  mask = denominator - exponent;\nLAB_0800a1da:\n  quotient = quotient & 0xfffff | 0x100000;\n  if (-1 < (int)(mask << 0x1f)) {\n    quotient = quotient * 2 - ((int)den >> 0x1f);\n    den = den << 1;\n  }\n  shift = 0;\n  quotient = quotient * 2 - ((int)den >> 0x1f);\n  den = den << 1;\n  mask = 0;\n  count = 0x16;\n  exponent = 0x200000;\n  do {\n    shiftCount = mask + exponent;\n    if (shiftCount <= (int)quotient) {\n      quotient = quotient - shiftCount;\n      mask = shiftCount + exponent;\n      shift = shift + exponent;\n    }\n    count = count + -1;\n    quotient = quotient * 2 - ((int)den >> 0x1f);\n    exponent = exponent >> 1;\n    den = den << 1;\n  } while (count != 0);\n  shiftCount = 0x20;\n  remainder = 0x80000000;\n  count = 0;\n  exponent = 0;\n  do {\n    temp = remainder + count;\n    comp = mask;\n    if ((int)mask < (int)quotient) {\n      if ((int)temp < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp + remainder)) {\n          comp = mask + 1;\n        }\n      }\n      bit = quotient - mask;\n      mask = comp;\n      if (den < temp) {\n        bit = bit - 1;\n      }\nLAB_0800a262:\n      count = temp + remainder;\n      den = den - temp;\n      exponent = exponent + remainder;\n      quotient = bit;\n    }\n    else if ((quotient == mask) && (temp <= den)) {\n      if ((int)temp < 0) goto LAB_0800a26a;\n      bit = 0;\n      mask = quotient;\n      goto LAB_0800a262;\n    }\n    shiftCount = shiftCount + -1;\n    remainder = remainder >> 1;\n    quotient = quotient * 2 - ((int)den >> 0x1f);\n    den = den << 1;\n    if (shiftCount == 0) {\n      if ((quotient | den) == 0) {\n        exponent = exponent >> 1;\n      }\n      else if (exponent == 0xffffffff) {\n        shift = shift + 1;\n        exponent = 0;\n      }\n      else {\n        exponent = exponent + 1 >> 1;\n      }\n      if ((shift & 1) != 0) {\n        exponent = exponent | 0x80000000;\n      }\n      return exponent;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_square_root_0800a1bc",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar1": "mask",
                "iVar2": "shiftCount",
                "uVar3": "temp",
                "uVar4": "dividend",
                "uVar5": "exponent",
                "uVar6": "remainder",
                "uVar7": "quotient",
                "uVar8": "bit",
                "uVar9": "den",
                "iVar10": "count",
                "uVar11": "comp",
                "uVar12": "shift",
                "uVar13": "tmp",
                "__muldf3": "multiply",
                "__subdf3": "subtract",
                "__divdf3": "divide"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot"
            ],
            "called": [
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_polynomial_0800a348",
            "code": "\nundefined4 calculate_polynomial_0800a348(undefined4 base,uint exponent,undefined4 constant1,undefined4 constant2)\n\n{\n  int isZero;\n  undefined4 resultLow;\n  undefined4 resultHigh;\n  uint absExponent;\n  undefined8 mulResult;\n  undefined8 accumulator;\n  undefined8 additionalResult;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  absExponent = exponent & 0x7fffffff;\n  if (absExponent < 0x3e400000) {\n    isZero = __aeabi_d2iz();\n    if (isZero == 0) {\n      return 0;\n    }\n    mulResult = __muldf3(base,exponent,base,exponent);\n    resultHigh = (undefined4)((ulonglong)mulResult >> 0x20);\n    resultLow = (undefined4)mulResult;\n    accumulator = __muldf3(resultLow,resultHigh,0xbe8838d4,0xbda8fae9);\n    accumulator = __aeabi_dadd((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    accumulator = __subdf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0x809c52ad,0x3e927e4f);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    accumulator = __aeabi_dadd((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0x19cb1590,0x3efa01a0);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    accumulator = __subdf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0x16c15177,0x3f56c16c);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    accumulator = __aeabi_dadd((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0x5555554c,0x3fa55555);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n  }\n  else {\n    mulResult = __muldf3(base,exponent,base,exponent);\n    resultHigh = (undefined4)((ulonglong)mulResult >> 0x20);\n    resultLow = (undefined4)mulResult;\n    accumulator = __muldf3(resultLow,resultHigh,0xbe8838d4,0xbda8fae9);\n    accumulator = __aeabi_dadd((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    accumulator = __subdf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0x809c52ad,0x3e927e4f);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    accumulator = __aeabi_dadd((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0x19cb1590,0x3efa01a0);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    accumulator = __subdf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0x16c15177,0x3f56c16c);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    accumulator = __aeabi_dadd((int)accumulator,(int)((ulonglong)accumulator >> 0x20),0x5555554c,0x3fa55555);\n    accumulator = __muldf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),resultLow,resultHigh);\n    if (0x3fd33332 < absExponent) {\n      if (absExponent < 0x3fe90001) {\n        isZero = absExponent - 0x200000;\n        mulResult = __subdf3(0,0x3ff00000,0,isZero);\n      }\n      else {\n        isZero = 0x3fd20000;\n        mulResult = 0x3fe7000000000000;\n      }\n      temp4 = (undefined4)((ulonglong)mulResult >> 0x20);\n      temp3 = (undefined4)mulResult;\n      mulResult = __muldf3(resultLow,resultHigh,0,0x3fe00000);\n      mulResult = __subdf3((int)mulResult,(int)((ulonglong)mulResult >> 0x20),0,isZero);\n      accumulator = __muldf3(resultLow,resultHigh,(int)accumulator,(int)((ulonglong)accumulator >> 0x20));\n      additionalResult = __muldf3(base,exponent,constant1,constant2);\n      accumulator = __subdf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),(int)additionalResult,\n                       (int)((ulonglong)additionalResult >> 0x20));\n      mulResult = __subdf3((int)mulResult,(int)((ulonglong)mulResult >> 0x20),(int)accumulator,\n                       (int)((ulonglong)accumulator >> 0x20));\n      resultLow = __subdf3(temp3,temp4,(int)mulResult,(int)((ulonglong)mulResult >> 0x20));\n      return resultLow;\n    }\n  }\n  temp2 = (undefined4)((ulonglong)accumulator >> 0x20);\n  temp1 = (undefined4)accumulator;\n  resultLow = (undefined4)((ulonglong)mulResult >> 0x20);\n  accumulator = __muldf3((int)mulResult,resultLow,0,0x3fe00000);\n  mulResult = __muldf3((int)mulResult,resultLow,temp1,temp2);\n  additionalResult = __muldf3(base,exponent,constant1,constant2);\n  mulResult = __subdf3((int)mulResult,(int)((ulonglong)mulResult >> 0x20),(int)additionalResult,\n                   (int)((ulonglong)additionalResult >> 0x20));\n  mulResult = __subdf3((int)accumulator,(int)((ulonglong)accumulator >> 0x20),(int)mulResult,\n                   (int)((ulonglong)mulResult >> 0x20));\n  resultLow = __subdf3(0,0x3ff00000,(int)mulResult,(int)((ulonglong)mulResult >> 0x20));\n  return resultLow;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_polynomial_0800a348",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "constant1",
                "param_4": "constant2",
                "iVar1": "isZero",
                "uVar2": "resultLow",
                "uVar3": "resultHigh",
                "uVar4": "absExponent",
                "uVar5": "mulResult",
                "uVar6": "accumulator",
                "uVar7": "additionalResult",
                "local_30": "temp1",
                "uStack_2c": "temp2",
                "local_28": "temp3",
                "uStack_24": "temp4"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "FUNC_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  iVar15 = *(int *)(&DAT_0800c060 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (param_3 + -3) / 0x18;\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = __aeabi_i2d(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = __muldf3(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                            *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        __muldf3((int)uVar26,uVar6,0,0x3e700000);\n        __aeabi_d2iz();\n        uVar25 = __aeabi_i2d();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = __muldf3((int)uVar25,uVar8,0,0x41700000);\n        __subdf3((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = __aeabi_d2iz();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = __aeabi_dadd((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = scalbn((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    __muldf3((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = floor();\n    uVar25 = __muldf3((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,0x40200000);\n    uVar26 = __subdf3((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = __aeabi_d2iz();\n    uVar25 = __aeabi_i2d();\n    uVar26 = __subdf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                      (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = __aeabi_dcmpge(uVar8,uVar6,0,0x3fe00000);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = __subdf3(0,0x3ff00000,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          bVar24 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_258[0] == 0) {\n            bVar24 = false;\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                if (*puVar5 != 0) {\n                  iVar14 = iVar4 + 1;\n                  uVar12 = *puVar5;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n              bVar24 = false;\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\n            uVar12 = local_258[0];\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            bVar24 = true;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = __subdf3(0,0x3ff00000,uVar8,uVar6);\n          if (bVar24) {\n            uVar25 = scalbn(0,0x3ff00000,local_270);\n            uVar26 = __subdf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                              (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = __aeabi_dcmpeq((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = scalbn((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = __aeabi_dcmpge(uVar8,uVar6,0,0x41700000);\n      if (iVar9 == 0) {\n        uVar12 = __aeabi_d2iz(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        __muldf3(uVar8,uVar6,0,0x3e700000);\n        uVar12 = __aeabi_d2iz();\n        uVar26 = __aeabi_i2d();\n        uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x41700000);\n        __subdf3(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = __aeabi_d2iz();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = __aeabi_i2d(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = scalbn(0,0x3ff00000,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar26 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar26;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar26;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar26 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      uVar26 = 0;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar26 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar26;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar26 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = __aeabi_i2d(*puVar5);\n      uVar25 = __muldf3((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = __muldf3((int)uVar26,uVar8,0,0x3e700000);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    do {\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar8 = 0x40000000;\n        uVar6 = 0x3ff921fb;\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = &DAT_0800c028;\n        while( true ) {\n          uVar25 = __muldf3(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6);\n          uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar26 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            uVar8 = (undefined4)uVar26;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar26 = __aeabi_dadd(uVar8,uVar6,uVar11,uVar20);\n            uVar25 = __subdf3(uVar11,uVar20,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n            uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar25;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar26;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar26 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              uVar8 = (undefined4)uVar26;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar26 = __aeabi_dadd(uVar8,uVar6,uVar11,uVar20);\n              uVar25 = __subdf3(uVar11,uVar20,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n              uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar25;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar26;\n            } while (&local_168 + 1 != puVar16);\n            uVar26 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar26 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      uVar26 = 0;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar26 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar26 >> 0x20);\n  uVar8 = (undefined4)uVar26;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar26;\n    uVar26 = __subdf3((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),\n                            *(undefined4 *)(puVar16 + 1),*(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar26 = __subdf3((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar26 = CONCAT44((int)((ulonglong)uVar26 >> 0x20) + -0x80000000,(int)uVar26);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_260[1] + 8) = uVar26;\n  return uVar2 & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "calling": [
                "__ieee754_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__aeabi_i2d",
                "floor",
                "__aeabi_dcmpeq",
                "__aeabi_dcmpge",
                "scalbn",
                "__subdf3",
                "__muldf3"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_result_0800adf0",
            "code": "\nundefined4\ncalculate_result_0800adf0(undefined4 base,uint exponent,undefined4 factor1,undefined4 factor2,int is_negative)\n\n{\n  int conversion_result;\n  undefined4 base_low;\n  undefined4 base_high;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 temp_result_high;\n  undefined8 temp_result_low;\n  undefined8 temp_result;\n  \n  if (((exponent & 0x7fffffff) < 0x3e400000) && (conversion_result = __aeabi_d2iz(), conversion_result == 0)) {\n    return base;\n  }\n  temp_result_low = __muldf3(base,exponent,base);\n  result_low = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  base_high = (undefined4)temp_result_low;\n  temp_result_low = __muldf3(base,exponent,base_high,result_low);\n  result_high = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  base_low = (undefined4)temp_result_low;\n  temp_result_low = __muldf3(base_high,result_low,0x5acfd57c,0x3de5d93a);\n  temp_result_low = __subdf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),base_high,result_low);\n  temp_result_low = __aeabi_dadd((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),base_high,result_low);\n  temp_result_low = __subdf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),base_high,result_low);\n  temp_result_low = __aeabi_dadd((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x1110f8a6,0x3f811111);\n  temp_result_high = (undefined4)((ulonglong)temp_result_low >> 0x20);\n  if (is_negative != 0) {\n    temp_result = __muldf3(factor1,factor2,0,0x3fe00000);\n    temp_result_low = __muldf3(base_low,result_high,(int)temp_result_low,temp_result_high);\n    temp_result_low = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result_low,\n                     (int)((ulonglong)temp_result_low >> 0x20));\n    temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),base_high,result_low);\n    temp_result_low = __subdf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),factor1,factor2);\n    temp_result = __muldf3(base_low,result_high,0x55555549,0x3fc55555);\n    temp_result_low = __aeabi_dadd((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n    base_high = __subdf3(base,exponent,(int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20));\n    return base_high;\n  }\n  temp_result_low = __muldf3(base_high,result_low,(int)temp_result_low,temp_result_high);\n  temp_result_low = __subdf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),0x55555549,0x3fc55555);\n  temp_result_low = __muldf3((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),base_low,result_high);\n  base_high = __aeabi_dadd((int)temp_result_low,(int)((ulonglong)temp_result_low >> 0x20),base,exponent);\n  return base_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "factor1",
                "param_4": "factor2",
                "param_5": "is_negative",
                "iVar1": "conversion_result",
                "uVar2": "base_low",
                "uVar3": "base_high",
                "uVar4": "result_low",
                "uVar5": "result_high",
                "uVar6": "temp_result_high",
                "uVar7": "temp_result_low",
                "uVar8": "temp_result"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_square_root_0800af78",
            "code": "\nint calculateSquareRoot_0800af78(int inputValue,uint inputFlag)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int comparisonResult;\n  undefined4 temp1;\n  uint temp2;\n  undefined8 calcResult;\n  undefined8 calcResult2;\n  undefined4 temp3;\n  \n  calcResult = CONCAT44(inputFlag,inputValue);\n  temp2 = inputFlag & 0x7fffffff;\n  if (temp2 < 0x44100000) {\n    if (temp2 < 0x3fdc0000) {\n      if (temp2 < 0x3e200000) {\n        calcResult2 = __aeabi_dadd(inputValue,inputFlag,0x8800759c,0x7e37e43c);\n        comparisonResult = __aeabi_dcmpgt((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0,0x3ff00000);\n        if (comparisonResult != 0) {\n          return inputValue;\n        }\n      }\n      comparisonResult = -1;\n    }\n    else {\n      calcResult = fabs();\n      result4 = (undefined4)((ulonglong)calcResult >> 0x20);\n      result1 = (undefined4)calcResult;\n      if (temp2 < 0x3ff30000) {\n        if (temp2 < 0x3fe60000) {\n          calcResult = __aeabi_dadd(result1,result4,result1,result4);\n          calcResult = __subdf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0,0x3ff00000);\n          calcResult2 = __aeabi_dadd(result1,result4,0,0x40000000);\n          calcResult = __divdf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),(int)calcResult2,\n                           (int)((ulonglong)calcResult2 >> 0x20));\n          comparisonResult = 0;\n        }\n        else {\n          calcResult = __subdf3(result1,result4,0,0x3ff00000);\n          calcResult2 = __aeabi_dadd(result1,result4,0,0x3ff00000);\n          calcResult = __divdf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),(int)calcResult2,\n                           (int)((ulonglong)calcResult2 >> 0x20));\n          comparisonResult = 1;\n        }\n      }\n      else if (temp2 < 0x40038000) {\n        calcResult = __subdf3(result1,result4,0,0x3ff80000);\n        calcResult2 = __muldf3(result1,result4,0,0x3ff80000);\n        calcResult2 = __aeabi_dadd((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0,0x3ff00000);\n        calcResult = __divdf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),(int)calcResult2,\n                         (int)((ulonglong)calcResult2 >> 0x20));\n        comparisonResult = 2;\n      }\n      else {\n        calcResult = __divdf3(0,0xbff00000,result1,result4);\n        comparisonResult = 3;\n      }\n    }\n    temp3 = (undefined4)((ulonglong)calcResult >> 0x20);\n    temp1 = (undefined4)calcResult;\n    calcResult = __muldf3(temp1,temp3,temp1);\n    result2 = (undefined4)((ulonglong)calcResult >> 0x20);\n    result1 = (undefined4)calcResult;\n    calcResult = __muldf3(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)calcResult >> 0x20);\n    result4 = (undefined4)calcResult;\n    calcResult = __muldf3(result4,result3,0xe322da11,0x3f90ad3a);\n    calcResult = __aeabi_dadd((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0x24760deb,0x3fa97b4b);\n    calcResult = __muldf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result4,result3);\n    calcResult = __aeabi_dadd((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    calcResult = __muldf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result4,result3);\n    calcResult = __aeabi_dadd((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0xc54c206e,0x3fb745cd);\n    calcResult = __muldf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result4,result3);\n    calcResult = __aeabi_dadd((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0x920083ff,0x3fc24924);\n    calcResult = __muldf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result4,result3);\n    calcResult = __aeabi_dadd((int)calcResult,(int)((ulonglong)calcResult >> 0x20),0x5555550d,0x3fd55555);\n    calcResult = __muldf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)calcResult >> 0x20);\n    calcResult2 = __muldf3(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    calcResult2 = __subdf3((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0x52defd9a,0x3fadde2d);\n    calcResult2 = __muldf3((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),result4,result3);\n    calcResult2 = __subdf3((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    calcResult2 = __muldf3((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),result4,result3);\n    calcResult2 = __subdf3((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0xfe231671,0x3fbc71c6);\n    calcResult2 = __muldf3((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),result4,result3);\n    calcResult2 = __subdf3((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),0x9998ebc4,0x3fc99999);\n    calcResult2 = __muldf3((int)calcResult2,(int)((ulonglong)calcResult2 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)calcResult2 >> 0x20);\n    if (comparisonResult == -1) {\n      calcResult = __aeabi_dadd((int)calcResult,result1,(int)calcResult2,result4);\n      calcResult = __muldf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),temp1,temp3);\n      comparisonResult = __subdf3(temp1,temp3,(int)calcResult,(int)((ulonglong)calcResult >> 0x20));\n      return comparisonResult;\n    }\n    calcResult = __aeabi_dadd((int)calcResult,result1,(int)calcResult2,result4);\n    calcResult = __muldf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),temp1,temp3);\n    calcResult = __subdf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),\n                     *(undefined4 *)(&UNK_0800c090 + comparisonResult * 8),\n                     *(undefined4 *)(&UNK_0800c094 + comparisonResult * 8));\n    calcResult = __subdf3((int)calcResult,(int)((ulonglong)calcResult >> 0x20),temp1,temp3);\n    comparisonResult = __subdf3(*(undefined4 *)(&UNK_0800c070 + comparisonResult * 8),\n                     *(undefined4 *)(&UNK_0800c074 + comparisonResult * 8),(int)calcResult,\n                     (int)((ulonglong)calcResult >> 0x20));\n    if ((int)inputFlag < 0) {\n      return comparisonResult;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp2) || ((temp2 == 0x7ff00000 && (inputValue != 0)))) {\n      comparisonResult = __aeabi_dadd(inputValue,inputFlag,inputValue);\n      return comparisonResult;\n    }\n    comparisonResult = 0x54442d18;\n  }\n  return comparisonResult;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_square_root_0800af78",
                "param_1": "inputValue",
                "param_2": "inputFlag",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "comparisonResult",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "calcResult",
                "uVar9": "calcResult2",
                "local_2c": "temp3"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__divdf3",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "atan",
                "__ieee754_atan2"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "get_sign_bit_0800b2d4",
            "code": "\nuint get_sign_bit_0800b2d4(undefined4 input_value,uint mask_value)\n\n{\n  return (mask_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "get_sign_bit_0800b2d4",
                "param_1": "input_value",
                "param_2": "mask_value"
            },
            "calling": [
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_application_0800b2e0",
            "code": "\nvoid initializeApplication_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_application_0800b2e0",
                "undefined4": "void"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input_1,uint input_2,int shift_amount,undefined4 constant)\n\n{\n  uint shifted_input;\n  int sum_result;\n  uint high_bits;\n  undefined8 concatenated_inputs;\n  \n  concatenated_inputs = CONCAT44(input_2,input_1);\n  shifted_input = (input_2 << 1) >> 0x15;\n  if (shifted_input == 0) {\n    if ((input_1 | input_2 & 0x7fffffff) == 0) {\n      return input_1;\n    }\n    concatenated_inputs = __muldf3(input_1,input_2,0,0x43500000);\n    if (shift_amount < -50000) goto LAB_0800b34a;\n    shifted_input = ((uint)((int)((ulonglong)concatenated_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input == 0x7ff) {\n    shifted_input = __aeabi_dadd(input_1,input_2,input_1,input_2,constant);\n    return shifted_input;\n  }\n  high_bits = (uint)((ulonglong)concatenated_inputs >> 0x20);\n  sum_result = shifted_input + shift_amount;\n  if (sum_result < 0x7ff) {\n    if (0 < sum_result) {\n      return (uint)concatenated_inputs;\n    }\n    if (sum_result + 0x35 < 0 == SCARRY4(sum_result,0x35)) {\n      shifted_input = __muldf3((uint)concatenated_inputs,high_bits & 0x800fffff | (sum_result + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input;\n    }\n    if (shift_amount < 0xc351) {\n      concatenated_inputs = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input = __muldf3((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input;\n    }\n  }\n  shifted_input = __muldf3(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "shift_amount",
                "param_4": "constant",
                "uVar1": "shifted_input",
                "iVar2": "sum_result",
                "uVar3": "high_bits",
                "uVar4": "concatenated_inputs"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_global_data_0800b3dc",
            "code": "\nundefined4 getGlobalData_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_global_data_0800b3dc"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "initialize_and_execute_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initializeAndExecuteFunctions_0800b3e8(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  _init();\n  iterationCount = 0;\n  functionPointerArray = (code **)&DAT_0800c0b4;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "initialize_and_execute_functions_0800b3e8",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "frame_dummy",
                "register_fini",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "memset_0800b430",
            "code": "\nvoid memset_0800b430(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *currPtr;\n  undefined4 *nextPtr;\n  uint remainingSize;\n  undefined4 optimizedValue;\n  bool isEnd;\n  \n  if (((uint)dest & 3) != 0) {\n    remainingSize = size - 1;\n    currPtr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)currPtr + 1);\n      *(undefined *)currPtr = value;\n      size = remainingSize;\n      if (((uint)dest & 3) == 0) break;\n      isEnd = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      currPtr = dest;\n      if (isEnd) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    optimizedValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      currPtr = dest + 4;\n      do {\n        currPtr[-4] = optimizedValue;\n        currPtr[-3] = optimizedValue;\n        currPtr[-2] = optimizedValue;\n        currPtr[-1] = optimizedValue;\n        currPtr = currPtr + 4;\n      } while (currPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x20));\n      remainingSize = size & 0xc;\n      dest = dest + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remainingSize == 0) goto joined_r0x0800b4a8;\n    }\n    currPtr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      nextPtr = dest + 1;\n      *dest = optimizedValue;\n      dest = nextPtr;\n    } while (currPtr != nextPtr);\n    size = size & 3;\n    dest = currPtr;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    currPtr = dest;\n    do {\n      nextPtr = (undefined4 *)((int)currPtr + 1);\n      *(undefined *)currPtr = value;\n      currPtr = nextPtr;\n    } while ((undefined4 *)(size + (int)dest) != nextPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "memset_0800b430",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "currPtr",
                "puVar2": "nextPtr",
                "uVar3": "remainingSize",
                "uVar4": "optimizedValue",
                "bVar5": "isEnd"
            },
            "calling": [
                "grbl_main",
                "settings_read_coord_data",
                "st_reset",
                "debounce_init",
                "plan_init",
                "gc_execute_line",
                "gc_init",
                "eeprom_init",
                "homing_cycle",
                "mc_go_home"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "add_value_to_data_structure_0800b524",
            "code": "\nundefined4 addValueToDataStructure_0800b524(int newValueType,undefined4 newValue,undefined4 newValueType2,undefined4 newValue2)\n\n{\n  undefined *currentDataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint dataIndex;\n  \n  __retarget_lock_acquire_recursive(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  currentDataPtr = DAT_20000168;\n  dataIndex = *(uint *)(DAT_20000168 + 4);\n  if ((int)dataIndex < 0x20) {\n    if (newValueType != 0) {\n      *(undefined4 *)(DAT_20000168 + dataIndex * 4 + 0x88) = newValueType2;\n      bitMask = 1 << (dataIndex & 0xff);\n      *(uint *)(currentDataPtr + 0x188) = *(uint *)(currentDataPtr + 0x188) | bitMask;\n      *(undefined4 *)(currentDataPtr + dataIndex * 4 + 0x108) = newValue2;\n      if (newValueType == 2) {\n        *(uint *)(currentDataPtr + 0x18c) = bitMask | *(uint *)(currentDataPtr + 0x18c);\n      }\n    }\n    returnValue = DAT_20000448;\n    *(uint *)(currentDataPtr + 4) = dataIndex + 1;\n    *(undefined4 *)(currentDataPtr + (dataIndex + 2) * 4) = newValue;\n    __retarget_lock_release_recursive(returnValue);\n    returnValue = 0;\n  }\n  else {\n    __retarget_lock_release_recursive(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "add_value_to_data_structure_0800b524",
                "param_1": "newValueType",
                "param_2": "newValue",
                "param_3": "newValueType2",
                "param_4": "newValue2",
                "puVar1": "currentDataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "dataIndex"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "frame_dummy",
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 201232,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005bdc",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078f4",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_080092c4",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_08001994",
            "FUN_08005c30",
            "FUN_08006d2e",
            "FUN_08007930",
            "FUN_08008640",
            "FUN_08008894"
        ],
        [
            "FUN_0800618c"
        ]
    ],
    "locked_functions": []
}