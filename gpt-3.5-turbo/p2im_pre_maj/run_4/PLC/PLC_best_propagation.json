{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "reverse_byte_sequence_08000230",
            "code": "\nbyte * reverseByteSequence_08000230(uint *ptr_sequence,uint target_byte,uint sequence_length)\n\n{\n  byte current_byte;\n  char bit_0;\n  char bit_8;\n  char bit_16;\n  char bit_24;\n  byte *next_byte_ptr;\n  uint *ptr_sequence_iterator;\n  byte *byte_ptr_result;\n  uint ptr_alignment;\n  uint aligned_length;\n  uint aligned_byte_0;\n  uint aligned_byte_1;\n  bool is_set_bit_0;\n  bool is_set_bit_8;\n  bool is_set_bit_16;\n  bool is_set_bit_24;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)sequence_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (sequence_length == 0) {\n        return (byte *)0x0;\n      }\n      ptr_sequence_iterator = (uint *)((int)ptr_sequence + 1);\n      current_byte = *(byte *)ptr_sequence;\n      sequence_length = sequence_length - 1;\n      ptr_sequence = ptr_sequence_iterator;\n    } while (current_byte != target_byte);\n  }\n  else {\n    ptr_alignment = (uint)ptr_sequence & 7;\n    while( true ) {\n      if (ptr_alignment == 0) {\n        ptr_alignment = target_byte | target_byte << 8;\n        ptr_alignment = ptr_alignment | ptr_alignment << 0x10;\n        aligned_length = sequence_length & 0xfffffff8;\n        do {\n          ptr_sequence_iterator = ptr_sequence + 2;\n          aligned_length = aligned_length - 8;\n          aligned_byte_0 = *ptr_sequence ^ ptr_alignment;\n          aligned_byte_1 = ptr_sequence[1] ^ ptr_alignment;\n          bit_0 = -((char)aligned_byte_0 == '\\0');\n          bit_8 = -((char)(aligned_byte_0 >> 8) == '\\0');\n          bit_16 = -((char)(aligned_byte_0 >> 0x10) == '\\0');\n          bit_24 = -((char)(aligned_byte_0 >> 0x18) == '\\0');\n          aligned_byte_0 = CONCAT13(bit_24,CONCAT12(bit_16,CONCAT11(bit_8,bit_0)));\n          is_set_bit_0 = (char)aligned_byte_1 != '\\0';\n          is_set_bit_8 = (char)(aligned_byte_1 >> 8) != '\\0';\n          is_set_bit_16 = (char)(aligned_byte_1 >> 0x10) != '\\0';\n          is_set_bit_24 = (char)(aligned_byte_1 >> 0x18) != '\\0';\n          aligned_byte_1 = CONCAT13(is_set_bit_24 * bit_24 - !is_set_bit_24,\n                            CONCAT12(is_set_bit_16 * bit_16 - !is_set_bit_16,\n                                     CONCAT11(is_set_bit_8 * bit_8 - !is_set_bit_8,is_set_bit_0 * bit_0 - !is_set_bit_0)));\n          if (aligned_byte_1 != 0) {\n            if (aligned_byte_0 == 0) {\n              byte_ptr_result = (byte *)((int)ptr_sequence + 5);\n              aligned_byte_0 = aligned_byte_1;\n            }\n            else {\n              byte_ptr_result = (byte *)((int)ptr_sequence + 1);\n            }\n            if ((aligned_byte_0 & 1) == 0) {\n              is_set_bit_0 = (aligned_byte_0 & 0x100) == 0;\n              next_byte_ptr = byte_ptr_result + 1;\n              if (is_set_bit_0) {\n                is_set_bit_0 = (aligned_byte_0 & 0x18000) == 0;\n                next_byte_ptr = byte_ptr_result + 2;\n              }\n              byte_ptr_result = next_byte_ptr;\n              if (is_set_bit_0) {\n                byte_ptr_result = byte_ptr_result + 1;\n              }\n            }\n            return byte_ptr_result + -1;\n          }\n          ptr_sequence = ptr_sequence_iterator;\n        } while (aligned_length != 0);\n        sequence_length = sequence_length & 7;\n        goto joined_r0x08000290;\n      }\n      ptr_sequence_iterator = (uint *)((int)ptr_sequence + 1);\n      sequence_length = sequence_length - 1;\n      if (*(byte *)ptr_sequence == target_byte) break;\n      ptr_alignment = (uint)ptr_sequence_iterator & 7;\n      ptr_sequence = ptr_sequence_iterator;\n      if (sequence_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)ptr_sequence_iterator + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "reverse_byte_sequence_08000230",
                "param_1": "ptr_sequence",
                "param_2": "target_byte",
                "param_3": "sequence_length",
                "bVar1": "current_byte",
                "cVar2": "bit_0",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "pbVar6": "next_byte_ptr",
                "puVar7": "ptr_sequence_iterator",
                "pbVar8": "byte_ptr_result",
                "uVar9": "ptr_alignment",
                "uVar10": "aligned_length",
                "uVar11": "aligned_byte_0",
                "uVar12": "aligned_byte_1",
                "bVar13": "is_set_bit_0",
                "bVar14": "is_set_bit_8",
                "bVar15": "is_set_bit_16",
                "bVar16": "is_set_bit_24"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "divmod_or_default_080002d0",
            "code": "\nundefined8 divmod_or_default_080002d0(int dividend,int divisor,int quotient,int remainder)\n\n{\n  undefined8 result;\n  \n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  result = __udivmoddi4();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "divmod_or_default_080002d0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar1": "result"
            },
            "calling": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "called": [
                "__udivmoddi4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_and_mod_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divideAndMod_08000300(uint dividend,uint dividend_upper_bits,uint divisor,uint remainder,uint *quotient_and_remainder)\n\n{\n  ulonglong temp1;\n  uint temp2;\n  uint result;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (dividend_upper_bits < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        divisor = divisor << shift_amount;\n        dividend_upper_bits = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper_bits << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp7 = divisor >> 0x10;\n      temp5 = dividend_upper_bits / temp7;\n      temp4 = dividend >> 0x10 | (dividend_upper_bits - temp7 * temp5) * 0x10000;\n      temp3 = temp5 * (divisor & 0xffff);\n      result = temp5;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        result = temp5 - 1;\n        if ((carry_flag == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          result = temp5 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp5 = (temp4 - temp3) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - temp3) - temp7 * temp5) * 0x10000;\n      temp7 = temp5 * (divisor & 0xffff);\n      temp3 = temp5;\n      if (temp4 <= temp7 && temp7 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp5 - 1;\n        if ((carry_flag == false) && (temp4 <= temp7 && temp7 - temp4 != 0)) {\n          temp3 = temp5 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp7;\n      temp3 = temp3 | result << 0x10;\n      result = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_upper_bits = dividend_upper_bits - divisor;\n        temp4 = divisor >> 0x10;\n        temp8 = divisor & 0xffff;\n        result = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        temp4 = divisor >> 0x10;\n        temp3 = dividend_upper_bits >> (0x20U - shift_amount & 0xff);\n        temp6 = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper_bits << shift_amount;\n        result = temp3 / temp4;\n        temp8 = divisor & 0xffff;\n        temp7 = temp6 >> 0x10 | (temp3 - temp4 * result) * 0x10000;\n        temp5 = result * temp8;\n        dividend = dividend << shift_amount;\n        temp3 = result;\n        if (temp7 <= temp5 && temp5 - temp7 != 0) {\n          carry_flag = CARRY4(temp7,divisor);\n          temp7 = temp7 + divisor;\n          temp3 = result - 1;\n          if ((carry_flag == false) && (temp7 <= temp5 && temp5 - temp7 != 0)) {\n            temp3 = result - 2;\n            temp7 = temp7 + divisor;\n          }\n        }\n        temp2 = (temp7 - temp5) / temp4;\n        dividend_upper_bits = temp6 & 0xffff | ((temp7 - temp5) - temp4 * temp2) * 0x10000;\n        temp5 = temp2 * temp8;\n        result = temp2;\n        if (dividend_upper_bits <= temp5 && temp5 - dividend_upper_bits != 0) {\n          carry_flag = CARRY4(dividend_upper_bits,divisor);\n          dividend_upper_bits = dividend_upper_bits + divisor;\n          result = temp2 - 1;\n          if ((carry_flag == false) && (dividend_upper_bits <= temp5 && temp5 - dividend_upper_bits != 0)) {\n            result = temp2 - 2;\n            dividend_upper_bits = dividend_upper_bits + divisor;\n          }\n        }\n        dividend_upper_bits = dividend_upper_bits - temp5;\n        result = result | temp3 << 0x10;\n      }\n      temp6 = dividend_upper_bits / temp4;\n      temp7 = dividend >> 0x10 | (dividend_upper_bits - temp4 * temp6) * 0x10000;\n      temp3 = temp8 * temp6;\n      temp5 = temp6;\n      if (temp7 <= temp3 && temp3 - temp7 != 0) {\n        carry_flag = CARRY4(temp7,divisor);\n        temp7 = temp7 + divisor;\n        temp5 = temp6 - 1;\n        if ((carry_flag == false) && (temp7 <= temp3 && temp3 - temp7 != 0)) {\n          temp5 = temp6 - 2;\n          temp7 = temp7 + divisor;\n        }\n      }\n      temp6 = (temp7 - temp3) / temp4;\n      temp4 = dividend & 0xffff | ((temp7 - temp3) - temp4 * temp6) * 0x10000;\n      temp8 = temp8 * temp6;\n      temp3 = temp6;\n      if (temp4 <= temp8 && temp8 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp8 && temp8 - temp4 != 0)) {\n          temp3 = temp6 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp8;\n      temp3 = temp3 | temp5 << 0x10;\n    }\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = temp4 >> shift_amount;\n      quotient_and_remainder[1] = 0;\n      return CONCAT44(result,temp3);\n    }\n  }\n  else if (dividend_upper_bits < remainder) {\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend_upper_bits;\n      return 0;\n    }\n    temp3 = 0;\n    result = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(remainder);\n    if (shift_amount != 0) {\n      temp7 = 0x20 - shift_amount;\n      result = divisor >> (temp7 & 0xff) | remainder << shift_amount;\n      temp8 = result >> 0x10;\n      temp3 = dividend_upper_bits >> (temp7 & 0xff);\n      temp2 = dividend >> (temp7 & 0xff) | dividend_upper_bits << shift_amount;\n      temp6 = temp3 / temp8;\n      temp5 = temp2 >> 0x10 | (temp3 - temp8 * temp6) * 0x10000;\n      temp4 = temp6 * (result & 0xffff);\n      dividend = dividend << shift_amount;\n      temp3 = temp6;\n      if (temp5 <= temp4 && temp4 - temp5 != 0) {\n        carry_flag = CARRY4(temp5,result);\n        temp5 = temp5 + result;\n        temp3 = temp6 - 1;\n        if ((carry_flag == false) && (temp5 <= temp4 && temp4 - temp5 != 0)) {\n          temp3 = temp6 - 2;\n          temp5 = temp5 + result;\n        }\n      }\n      temp6 = (temp5 - temp4) / temp8;\n      temp5 = temp2 & 0xffff | ((temp5 - temp4) - temp8 * temp6) * 0x10000;\n      temp8 = temp6 * (result & 0xffff);\n      temp4 = temp6;\n      if (temp5 <= temp8 && temp8 - temp5 != 0) {\n        carry_flag = CARRY4(temp5,result);\n        temp5 = temp5 + result;\n        temp4 = temp6 - 1;\n        if ((carry_flag == false) && (temp5 <= temp8 && temp8 - temp5 != 0)) {\n          temp4 = temp6 - 2;\n          temp5 = temp5 + result;\n        }\n      }\n      temp4 = temp4 | temp3 << 0x10;\n      temp1 = (ulonglong)temp4 * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp5 - temp8,dividend) < temp1) {\n        temp1 = temp1 - CONCAT44(result,divisor << shift_amount);\n        temp4 = temp4 - 1;\n      }\n      if (quotient_and_remainder != (uint *)0x0) {\n        temp3 = ((temp5 - temp8) - (int)(temp1 >> 0x20)) - (uint)(dividend < (uint)temp1);\n        *quotient_and_remainder = temp3 << (temp7 & 0xff) | dividend - (uint)temp1 >> shift_amount;\n        quotient_and_remainder[1] = temp3 >> shift_amount;\n      }\n      return (ulonglong)temp4;\n    }\n    if ((remainder < dividend_upper_bits) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_upper_bits = (dividend_upper_bits - remainder) - (uint)carry_flag;\n      temp3 = 1;\n    }\n    else {\n      temp3 = 0;\n    }\n    result = 0;\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend_upper_bits;\n      return (ulonglong)temp3;\n    }\n  }\n  return CONCAT44(result,temp3);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_and_mod_08000300",
                "param_1": "dividend",
                "param_2": "dividend_upper_bits",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "quotient_and_remainder",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "result",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "iVar10": "shift_amount",
                "bVar11": "carry_flag"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "trigger_software_interrupt_080005e0",
            "code": "\nvoid triggerSoftwareInterrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "trigger_software_interrupt_080005e0"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_afl_call_080005e4",
            "code": "\nundefined4 executeAflCall_080005e4(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = aflCall(1,arg1,0,0,arg4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_afl_call_080005e4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_device_08000600",
            "code": "\nvoid initializeDevice_08000600(int **device,undefined4 config)\n\n{\n  char deviceType;\n  int result;\n  \n  deviceType = *(char *)((int)device + 5);\n  if (deviceType == '\\x02') {\n    *device = &DAT_20000338;\n  }\n  else if (deviceType == '\\x03') {\n    *device = &DAT_20000338;\n  }\n  else if (deviceType == '\\x01') {\n    *device = &DAT_20000338;\n  }\n  else {\n    *device = &DAT_20000338;\n  }\n  begin(*device,config,6);\n  if (1 < *(byte *)((int)device + 6)) {\n    pinMode(*(byte *)((int)device + 6),1);\n    digitalWrite(*(undefined *)((int)device + 6),0);\n  }\n  do {\n    result = (**(code **)(**device + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)device + 0x49) = 0;\n  *(undefined *)((int)device + 0x4a) = 0;\n  *(undefined2 *)(device + 0x15) = 0;\n  *(undefined2 *)((int)device + 0x52) = 0;\n  *(undefined2 *)(device + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_device_08000600",
                "param_1": "device",
                "param_2": "config",
                "cVar1": "deviceType",
                "iVar2": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "digitalWrite",
                "pinMode",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_parameters_0800066c",
            "code": "\nvoid initializeParameters_0800066c(int baseAddress,undefined value1,int value2,undefined value3)\n\n{\n  *(undefined *)(baseAddress + 4) = value1;\n  if (3 < value2) {\n    value2 = 0;\n  }\n  *(char *)(baseAddress + 5) = (char)value2;\n  *(undefined *)(baseAddress + 6) = value3;\n  *(undefined2 *)(baseAddress + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_parameters_0800066c",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "Modbus"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_and_return_value_08000682",
            "code": "\nundefined4 initialize_and_return_value_08000682(undefined4 input_value)\n\n{\n  initialize_parameters_0800066c();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_and_return_value_08000682",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "process_modbus_request_08000690",
            "code": "\nvoid processModbusRequest_08000690(int status,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    Modbus(&DAT_20000124,1,0,0,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "process_modbus_request_08000690",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "Modbus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_data_080006b4",
            "code": "\nint processData_080006b4(int **data)\n\n{\n  bool isOverflow;\n  undefined result;\n  int returnValue;\n  byte index;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    setPinLow(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    isOverflow = false;\n    while (returnValue = (**(code **)(**data + 8))(), returnValue != 0) {\n      index = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + index + 9) = result;\n      index = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = index;\n      if (0x3f < index) {\n        isOverflow = true;\n      }\n    }\n  }\n  else {\n    isOverflow = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isOverflow) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_data_080006b4",
                "param_1": "data",
                "bVar1": "isOverflow",
                "uVar2": "result",
                "iVar3": "returnValue",
                "bVar4": "index",
                "digitalWrite": "setPinLow"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculateChecksum_08000728(int dataAddress,int dataLength)\n\n{\n  byte bitIndex;\n  uint crcValue;\n  uint bitValue;\n  uint index;\n  \n  crcValue = 0xffff;\n  for (index = 0; (int)index < dataLength; index = index + 1 & 0xff) {\n    crcValue = crcValue ^ *(byte *)(dataAddress + index + 9);\n    for (bitIndex = 1; bitIndex < 9; bitIndex = bitIndex + 1) {\n      bitValue = crcValue & 1;\n      crcValue = crcValue >> 1;\n      if (bitValue != 0) {\n        crcValue = crcValue ^ 0xa001;\n      }\n    }\n  }\n  return (crcValue & 0xff) << 8 | crcValue >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "bVar1": "bitIndex",
                "uVar2": "crcValue",
                "uVar3": "bitValue",
                "uVar4": "index"
            },
            "calling": [
                "sendTxBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "calculate_and_store_crc_0800076c",
            "code": "\nvoid calculateAndStoreCRC_0800076c(int **data,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 crcResult;\n  int tempVar;\n  uint uVar3;\n  \n  uVar3 = (uint)*(byte *)((int)data + 0x49);\n  crcResult = calcCRC(data,uVar3,param_3,param_4,param_4);\n  *(char *)((int)data + uVar3 + 9) = (char)((ushort)crcResult >> 8);\n  uVar3 = uVar3 + 1 & 0xff;\n  *(char *)((int)data + uVar3 + 9) = (char)crcResult;\n  *(char *)((int)data + 0x49) = (char)uVar3 + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      tempVar = (**(code **)(**data + 0xc))();\n    } while (-1 < tempVar);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  tempVar = millis();\n  data[0x17] = (int *)(tempVar + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "calculate_and_store_crc_0800076c",
                "param_1": "data",
                "uVar1": "crcResult",
                "iVar2": "tempVar"
            },
            "calling": [
                "process_FC3",
                "poll",
                "process_FC15",
                "process_FC6",
                "process_FC5",
                "process_FC16",
                "process_FC1"
            ],
            "called": [
                "digitalWrite",
                "calcCRC",
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_parameter_validity_080007f0",
            "code": "\nundefined4 checkParameterValidity_080007f0(int address,undefined4 value,uint data,undefined4 id)\n\n{\n  bool isValid;\n  byte result;\n  char firstByte;\n  char secondByte;\n  int firstWord;\n  uint counter;\n  int secondWord;\n  \n  counter = 0;\n  do {\n    if (7 < counter) {\n      isValid = false;\nLAB_0800080a:\n      if (!isValid) {\n        *(short *)(address + 0x54) = *(short *)(address + 0x54) + 1;\n        return 1;\n      }\n      secondWord = *(byte *)(address + 10) - 1;\n      switch(*(byte *)(address + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        firstByte = makeWord(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),data,secondWord,\n                         id);\n        secondByte = makeWord(*(undefined *)(address + 0xd),*(undefined *)(address + 0xe));\n        if (*(byte *)(address + 0x60) < (byte)(secondByte + firstByte)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        secondWord = makeWord(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),data,secondWord,\n                         id);\n        if ((uint)*(byte *)(address + 0x60) < (uint)(secondWord << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        result = makeWord(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),data,secondWord,\n                         id);\n        if (*(byte *)(address + 0x60) < result) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    data = (uint)*(byte *)(address + 10);\n    if ((byte)(&DAT_08005a10)[counter] == data) {\n      isValid = true;\n      goto LAB_0800080a;\n    }\n    counter = counter + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  secondWord = makeWord(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),data,secondWord,id\n                  );\n  firstWord = makeWord(*(undefined *)(address + 0xd),*(undefined *)(address + 0xe));\n  if ((uint)*(byte *)(address + 0x60) <\n      (((uint)(secondWord << 0xc) >> 0x10) + ((uint)(firstWord << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_parameter_validity_080007f0",
                "param_1": "address",
                "param_2": "value",
                "param_3": "data",
                "param_4": "id",
                "bVar1": "isValid",
                "bVar2": "result",
                "cVar3": "firstByte",
                "cVar4": "secondByte",
                "iVar5": "firstWord",
                "uVar6": "counter",
                "iVar7": "secondWord"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_data_and_toggle_flag_080008cc",
            "code": "\nvoid copyDataAndToggleFlag_080008cc(int buffer,undefined value)\n\n{\n  *(undefined *)(buffer + 9) = *(undefined *)(buffer + 4);\n  *(byte *)(buffer + 10) = *(byte *)(buffer + 10) ^ 0x80;\n  *(undefined *)(buffer + 0xb) = value;\n  *(undefined *)(buffer + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_data_and_toggle_flag_080008cc",
                "param_1": "buffer",
                "param_2": "value"
            },
            "calling": [
                "poll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "update_flags_and_send_buffer_080008e2",
            "code": "\nint updateFlagsAndSendBuffer_080008e2(int buffer,int data,undefined4 param3,undefined4 param4)\n\n{\n  int wordValue;\n  uint dataSize;\n  uint counter;\n  uint bitCounter;\n  char bitPosition;\n  int bytePtr;\n  \n  wordValue = makeWord(*(undefined *)(buffer + 0xb),*(undefined *)(buffer + 0xc),param3,param4,\n                   param4);\n  dataSize = makeWord(*(undefined *)(buffer + 0xd),*(undefined *)(buffer + 0xe));\n  bitPosition = (char)((dataSize << 0x15) >> 0x18);\n  if ((dataSize & 7) != 0) {\n    bitPosition = bitPosition + '\\x01';\n  }\n  *(char *)(buffer + 0xb) = bitPosition;\n  *(undefined *)(buffer + 0x49) = 3;\n  bitCounter = 0;\n  for (counter = 0; (int)counter < (int)dataSize; counter = counter + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(data + ((counter + wordValue) * 0x100000 >> 0x18) * 2) >>\n         (counter + wordValue & 0xf) & 1U) == 0) {\n      bytePtr = (uint)*(byte *)(buffer + 0x49) + buffer;\n      *(byte *)(bytePtr + 9) = *(byte *)(bytePtr + 9) & ~(byte)(1 << bitCounter);\n    }\n    else {\n      bytePtr = (uint)*(byte *)(buffer + 0x49) + buffer;\n      *(byte *)(bytePtr + 9) = *(byte *)(bytePtr + 9) | (byte)(1 << bitCounter);\n    }\n    bitCounter = bitCounter + 1 & 0xff;\n    if (7 < bitCounter) {\n      *(char *)(buffer + 0x49) = *(char *)(buffer + 0x49) + '\\x01';\n      bitCounter = 0;\n    }\n  }\n  if ((dataSize & 7) != 0) {\n    *(char *)(buffer + 0x49) = *(char *)(buffer + 0x49) + '\\x01';\n  }\n  bitPosition = *(char *)(buffer + 0x49);\n  sendTxBuffer(buffer);\n  return (int)(char)(bitPosition + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "update_flags_and_send_buffer_080008e2",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "wordValue",
                "uVar2": "dataSize",
                "uVar3": "counter",
                "uVar4": "bitCounter",
                "cVar5": "bitPosition",
                "iVar6": "bytePtr"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint processData_08000998(int dataAddress,int sourceAddress,undefined4 paramA,undefined4 paramB)\n\n{\n  byte tempByte;\n  char tempChar;\n  byte word1;\n  byte word2;\n  uint counter;\n  uint index;\n  \n  word1 = makeWord(*(undefined *)(dataAddress + 0xb),*(undefined *)(dataAddress + 0xc),paramA,paramB,\n                   paramB);\n  word2 = makeWord(*(undefined *)(dataAddress + 0xd),*(undefined *)(dataAddress + 0xe));\n  *(byte *)(dataAddress + 0xb) = word2 << 1;\n  *(undefined *)(dataAddress + 0x49) = 3;\n  for (counter = (uint)word1; counter < (uint)word1 + (uint)word2; counter = counter + 1 & 0xff) {\n    tempByte = *(byte *)(dataAddress + 0x49);\n    *(char *)(dataAddress + (uint)tempByte + 9) = (char)((ushort)*(undefined2 *)(sourceAddress + counter * 2) >> 8)\n    ;\n    index = tempByte + 1 & 0xff;\n    tempChar = (char)index;\n    *(char *)(dataAddress + 0x49) = tempChar;\n    *(undefined *)(dataAddress + index + 9) = *(undefined *)(sourceAddress + counter * 2);\n    *(char *)(dataAddress + 0x49) = tempChar + '\\x01';\n  }\n  tempChar = *(char *)(dataAddress + 0x49);\n  sendTransmissionBuffer(dataAddress);\n  return (int)(char)(tempChar + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "dataAddress",
                "param_2": "sourceAddress",
                "param_3": "paramA",
                "param_4": "paramB",
                "bVar1": "tempByte",
                "cVar2": "tempChar",
                "bVar3": "word1",
                "bVar4": "word2",
                "uVar5": "counter",
                "uVar6": "index",
                "sendTxBuffer": "sendTransmissionBuffer"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_flag_and_send_tx_buffer_08000a00",
            "code": "\nundefined4 updateFlagAndSendTxBuffer_08000a00(int bufferAddress,int txBufferAddress,undefined4 value1,undefined4 value2)\n\n{\n  uint word;\n  uint shiftedIndex;\n  \n  word = makeWord(*(undefined *)(bufferAddress + 0xb),*(undefined *)(bufferAddress + 0xc),value1,value2,\n                   value2);\n  shiftedIndex = (word << 0x14) >> 0x18;\n  if (*(char *)(bufferAddress + 0xd) == -1) {\n    *(ushort *)(txBufferAddress + shiftedIndex * 2) =\n         (ushort)(1 << (word & 0xf)) | *(ushort *)(txBufferAddress + shiftedIndex * 2);\n  }\n  else {\n    *(ushort *)(txBufferAddress + shiftedIndex * 2) =\n         *(ushort *)(txBufferAddress + shiftedIndex * 2) & ~(ushort)(1 << (word & 0xf));\n  }\n  *(undefined *)(bufferAddress + 0x49) = 6;\n  sendTxBuffer(bufferAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_flag_and_send_tx_buffer_08000a00",
                "param_1": "bufferAddress",
                "param_2": "txBufferAddress",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "word",
                "uVar2": "shiftedIndex"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_tx_buffer_08000a4e",
            "code": "\nundefined4 updateTxBuffer_08000a4e(int bufferAddress,int txBufferAddress)\n\n{\n  byte word1;\n  undefined2 word2;\n  \n  word1 = makeWord(*(undefined *)(bufferAddress + 0xb),*(undefined *)(bufferAddress + 0xc));\n  word2 = makeWord(*(undefined *)(bufferAddress + 0xd),*(undefined *)(bufferAddress + 0xe));\n  *(undefined2 *)(txBufferAddress + (uint)word1 * 2) = word2;\n  *(undefined *)(bufferAddress + 0x49) = 6;\n  sendTxBuffer(bufferAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_tx_buffer_08000a4e",
                "param_1": "bufferAddress",
                "param_2": "txBufferAddress",
                "bVar1": "word1",
                "uVar2": "word2"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_buffer_08000a7a",
            "code": "\nundefined4 updateBuffer_08000a7a(int bufferAddress,int dataAddress,undefined4 param3,undefined4 param4)\n\n{\n  int word1;\n  int word2;\n  uint index;\n  uint bitIndex;\n  uint bitOffset;\n  uint byteOffset;\n  uint byteIndex;\n  \n  word1 = makeWord(*(undefined *)(bufferAddress + 0xb),*(undefined *)(bufferAddress + 0xc),param3,param4,\n                   param4);\n  word2 = makeWord(*(undefined *)(bufferAddress + 0xd),*(undefined *)(bufferAddress + 0xe));\n  bitIndex = 0;\n  byteIndex = 7;\n  for (index = 0; (int)index < word2; index = index + 1 & 0xffff) {\n    byteOffset = (index + word1) * 0x100000 >> 0x18;\n    bitOffset = index + word1 & 0xf;\n    if (((int)(uint)*(byte *)(bufferAddress + byteIndex + 9) >> bitIndex & 1U) == 0) {\n      *(ushort *)(dataAddress + byteOffset * 2) = *(ushort *)(dataAddress + byteOffset * 2) & ~(ushort)(1 << bitOffset);\n    }\n    else {\n      *(ushort *)(dataAddress + byteOffset * 2) = (ushort)(1 << bitOffset) | *(ushort *)(dataAddress + byteOffset * 2);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      byteIndex = byteIndex + 1 & 0xff;\n      bitIndex = 0;\n    }\n  }\n  *(undefined *)(bufferAddress + 0x49) = 6;\n  sendTxBuffer(bufferAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_buffer_08000a7a",
                "param_1": "bufferAddress",
                "param_2": "dataAddress",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "word1",
                "iVar2": "word2",
                "uVar3": "index",
                "uVar4": "bitIndex",
                "uVar5": "bitOffset",
                "uVar6": "byteOffset",
                "uVar7": "byteIndex"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "extract_word_pairs_08000b04",
            "code": "\nint extractWordPairs_08000b04(int input_address,int output_address)\n\n{\n  byte byte1;\n  byte byte2;\n  char char1;\n  undefined2 word;\n  uint index;\n  \n  byte1 = *(byte *)(input_address + 0xc);\n  byte2 = *(byte *)(input_address + 0xe);\n  *(undefined *)(input_address + 0xd) = 0;\n  *(byte *)(input_address + 0xe) = byte2;\n  *(undefined *)(input_address + 0x49) = 6;\n  for (index = 0; index < byte2; index = index + 1 & 0xff) {\n    word = makeWord(*(undefined *)(index * 2 + input_address + 0x10),\n                     *(undefined *)(input_address + (index + 4) * 2 + 9));\n    *(undefined2 *)(output_address + (byte1 + index) * 2) = word;\n  }\n  char1 = *(char *)(input_address + 0x49);\n  sendTxBuffer(input_address);\n  return (int)(char)(char1 + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "extract_word_pairs_08000b04",
                "param_1": "input_address",
                "param_2": "output_address",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "cVar3": "char1",
                "uVar4": "word",
                "uVar5": "index"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_request_08000b54",
            "code": "\nint process_request_08000b54(int **request_data,int *buffer,undefined4 flag)\n\n{\n  byte result_byte;\n  int validation_result;\n  uint byte_value;\n  int return_value;\n  \n  request_data[0x13] = buffer;\n  *(char *)(request_data + 0x18) = (char)flag;\n  if (*(byte *)((int)request_data + 5) < 4) {\n    result_byte = (**(code **)(**request_data + 8))();\n    byte_value = (uint)result_byte;\n  }\n  if (byte_value == 0) {\n    return_value = 0;\n  }\n  else if ((int)byte_value < 8) {\n    return_value = 0;\n  }\n  else {\n    return_value = getRxBuffer(request_data);\n    *(char *)(request_data + 2) = (char)return_value;\n    if (*(char *)((int)request_data + 9) == *(char *)(request_data + 1)) {\n      validation_result = validateRequest(request_data);\n      if (validation_result < 1) {\n        validation_result = millis();\n        request_data[0x17] = (int *)((uint)*(ushort *)((int)request_data + 0x56) + validation_result);\n        *(undefined *)(request_data + 2) = 0;\n        switch(*(undefined *)((int)request_data + 10)) {\n        case 1:\n        case 2:\n          return_value = process_FC1(request_data,buffer,flag);\n          break;\n        case 3:\n        case 4:\n          return_value = process_FC3(request_data,buffer,flag);\n          break;\n        case 5:\n          return_value = process_FC5(request_data,buffer,flag);\n          break;\n        case 6:\n          return_value = process_FC6(request_data,buffer,flag);\n          break;\n        case 0xf:\n          return_value = process_FC15(request_data,buffer,flag);\n          break;\n        case 0x10:\n          return_value = process_FC16(request_data,buffer,flag);\n        }\n      }\n      else {\n        if (validation_result != 0xff) {\n          buildException(request_data,validation_result);\n          sendTxBuffer(request_data);\n        }\n        *(char *)(request_data + 2) = (char)validation_result;\n        return_value = (int)(char)validation_result;\n      }\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_request_08000b54",
                "param_1": "request_data",
                "param_2": "buffer",
                "param_3": "flag",
                "bVar1": "result_byte",
                "iVar2": "validation_result",
                "unaff_r5": "byte_value",
                "iVar3": "return_value"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "buildException",
                "process_FC3",
                "process_FC15",
                "getRxBuffer",
                "process_FC6",
                "validateRequest",
                "process_FC5",
                "process_FC16",
                "millis",
                "process_FC1",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_and_fork_server_08000c4c",
            "code": "\nvoid initialize_and_fork_server_08000c4c(void)\n\n{\n  start_fork_server(0);\n  initialize_device(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_and_fork_server_08000c4c",
                "startForkserver": "start_fork_server",
                "initialize_device_08000600": "initialize_device"
            },
            "calling": [
                "main"
            ],
            "called": [
                "startForkserver",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "poll_input_08000c64",
            "code": "\nvoid poll_input_08000c64(void)\n\n{\n  undefined4 unused_parameter;\n  \n  poll(&DAT_20000124,&DAT_20000004,0x10,unused_parameter,unused_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "poll_input_08000c64",
                "in_r3": "unused_parameter"
            },
            "calling": [
                "main"
            ],
            "called": [
                "poll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initializeSystem_08000c8c(void)\n\n{\n  uint hclkFreq;\n  undefined4 configParameter1;\n  undefined4 configParameter2;\n  undefined4 configParameter3;\n  undefined4 configParameter4;\n  undefined4 configParameter5;\n  undefined4 configParameter6;\n  undefined4 configParameter7;\n  undefined4 configParameter8;\n  undefined4 clockConfigParameter1;\n  undefined4 clockConfigParameter2;\n  undefined4 clockConfigParameter3;\n  undefined4 clockConfigParameter4;\n  undefined4 clockConfigParameter5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  configParameter1 = 1;\n  configParameter2 = 0x50000;\n  configParameter3 = 2;\n  configParameter4 = 0x400000;\n  configParameter5 = 8;\n  configParameter6 = 0x150;\n  configParameter7 = 2;\n  configParameter8 = 7;\n  HAL_RCC_OscConfig(&configParameter1);\n  HAL_PWREx_EnableOverDrive();\n  clockConfigParameter1 = 0xf;\n  clockConfigParameter2 = 2;\n  clockConfigParameter3 = 0;\n  clockConfigParameter4 = 0x1400;\n  clockConfigParameter5 = 0x1000;\n  HAL_RCC_ClockConfig(&clockConfigParameter1,5);\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFreq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "configParameter1",
                "local_50": "configParameter2",
                "local_3c": "configParameter3",
                "local_38": "configParameter4",
                "local_34": "configParameter5",
                "local_30": "configParameter6",
                "local_2c": "configParameter7",
                "local_28": "configParameter8",
                "local_24": "clockConfigParameter1",
                "local_20": "clockConfigParameter2",
                "local_1c": "clockConfigParameter3",
                "local_18": "clockConfigParameter4",
                "local_14": "clockConfigParameter5",
                "uVar1": "hclkFreq"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "HAL_PWREx_EnableOverDrive",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d3c": {
            "entrypoint": "0x08000d3c",
            "current_name": "initialize_memory_08000d3c",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initializeMemory_08000d3c(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_20000104; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8006034);\n  }\n  for (ptr = &DAT_20000104; ptr < &DAT_20000678; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x8000d72;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d3c": "initialize_memory_08000d3c",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_hardware_configuration_08000d8e",
            "code": "\nvoid initializeHardwareConfiguration_08000d8e(void)\n\n{\n  hw_config_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_hardware_configuration_08000d8e"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "configure_sys_tick_and_nvic_08000d98",
            "code": "\nundefined4 configureSysTickAndNVIC_08000d98(uint priorityLevel)\n\n{\n  int configResult;\n  \n  configResult = HAL_SYSTICK_Config(DAT_2000002c / (1000 / DAT_20000024));\n  if (configResult != 0) {\n    return 1;\n  }\n  if (0xf < priorityLevel) {\n    return 1;\n  }\n  HAL_NVIC_SetPriority(0xffffffff,priorityLevel,0);\n  DAT_20000028 = priorityLevel;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "configure_sys_tick_and_nvic_08000d98",
                "param_1": "priorityLevel",
                "iVar1": "configResult"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_hardware_08000de4",
            "code": "\n\n\nundefined4 initializeHardware_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  setInterruptPriority(3);\n  initializeTick(0xf);\n  initializeHardware_08000de4Specific();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_hardware_08000de4",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriority",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializeHardwareSpecific"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "add_value_to_sum_08000e18",
            "code": "\nvoid addValueToSum_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "add_value_to_sum_08000e18"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_08000e30",
            "code": "\nundefined4 get_data_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_08000e30"
            },
            "calling": [
                "UART_WaitOnFlagUntilTimeout",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_PWREx_EnableOverDrive",
                "GetCurrentMilli"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_config_08000e3c",
            "code": "\n\n\nvoid updateConfig_08000e3c(uint configValue)\n\n{\n  _DAT_e000ed0c = (configValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_config_08000e3c",
                "param_1": "configValue"
            },
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "apply_bitwise_operations_08000e60",
            "code": "\n\n\nvoid applyBitwiseOperations_08000e60(uint input,uint mask,uint data)\n\n{\n  uint shiftCount;\n  uint shiftAmount;\n  \n  shiftCount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - shiftCount;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (shiftCount + 4 < 7) {\n    shiftCount = 0;\n  }\n  else {\n    shiftCount = shiftCount - 3;\n  }\n  shiftCount = (mask & (1 << (shiftAmount & 0xff)) - 1U) << (shiftCount & 0xff) |\n          (1 << (shiftCount & 0xff)) - 1U & data;\n  if ((int)input < 0) {\n    *(char *)((input & 0xf) + 0xe000ed14) = (char)(shiftCount << 4);\n  }\n  else {\n    *(char *)(input + 0xe000e400) = (char)(shiftCount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "apply_bitwise_operations_08000e60",
                "param_1": "input",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shiftCount",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "uart_attach_rx_callback",
                "HAL_InitTick",
                "uart_attach_tx_callback",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_08000ec4",
            "code": "\nvoid setBit_08000ec4(uint input)\n\n{\n  if (-1 < (int)input) {\n    *(int *)((input >> 5) * 4 + -0x1fff1f00) = 1 << (input & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_08000ec4",
                "param_1": "input"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_parameter_08000ee0",
            "code": "\n\n\nundefined4 initializeParameter_08000ee0(int inputParam)\n\n{\n  if (inputParam - 1U < 0x1000000) {\n    _DAT_e000e014 = inputParam - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_parameter_08000ee0",
                "param_1": "inputParam"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_08000f0c",
            "code": "\nvoid setBit_08000f0c(uinteger num)\n\n{\n  if (-1 < (integer)num) {\n    *(integer *)(((num >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (num & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_08000f0c",
                "param_1": "num",
                "int": "integer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_flag_08000f2c",
            "code": "\n\n\nvoid updateFlag_08000f2c(int status)\n\n{\n  if (status != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_flag_08000f2c",
                "param_1": "status"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_system_tick_callback_08000f4e",
            "code": "\nvoid executeSystemTickCallback_08000f4e(void)\n\n{\n  systemTickCallback();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_system_tick_callback_08000f4e",
                "HAL_SYSTICK_Callback": "systemTickCallback"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "init_dac_08000f56",
            "code": "\nundefined4 initDac_08000f56(int inputValue)\n\n{\n  if (inputValue != 0) {\n    *(undefined *)(inputValue + 4) = 2;\n    deinitializeDac();\n    *(undefined4 *)(inputValue + 0x10) = 0;\n    *(undefined *)(inputValue + 4) = 0;\n    *(undefined *)(inputValue + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "init_dac_08000f56",
                "param_1": "inputValue",
                "HAL_DAC_MspDeInit": "deinitializeDac"
            },
            "calling": [
                "dac_stop"
            ],
            "called": [
                "HAL_DAC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **ptr,uint bitIndex)\n\n{\n  **ptr = **ptr & ~(1 << (bitIndex & 0xff));\n  *(undefined *)(ptr + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "ptr",
                "param_2": "bitIndex"
            },
            "calling": [
                "dac_stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_value_08000f8c",
            "code": "\nundefined4 updateParamValue_08000f8c(UInt **param)\n\n{\n  if (*(char *)((int)param + 0x35) != '\\x02') {\n    param_1_15 = (UInt *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)param + 0x35) = 5;\n  **param = **param & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_value_08000f8c",
                "param_1": "param",
                "param_1[0x15]": "param_1_15",
                "uint": "UInt"
            },
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "set_bit_values_08000fb4",
            "code": "\n\n\nvoid setBitValues_08000fb4(uint *output,uint *input)\n\n{\n  uint temp1;\n  uint temp2;\n  uint bitIndex;\n  uint bitMask;\n  uint temp3;\n  int index1;\n  uint temp4;\n  int index2;\n  \n  for (bitIndex = 0; bitIndex < 0x10; bitIndex = bitIndex + 1) {\n    temp2 = 1 << (bitIndex & 0xff);\n    bitMask = temp2 & *input;\n    temp1 = _DAT_40013c0c;\n    if (temp2 == bitMask) {\n      if ((input[1] == 2) || (input[1] == 0x12)) {\n        index1 = (bitIndex >> 3) + 8;\n        index2 = (bitIndex & 7) << 2;\n        output[index1] = output[index1] & ~(0xf << index2) | input[4] << index2;\n      }\n      temp4 = bitIndex << 1;\n      temp1 = ~(3 << (temp4 & 0xff));\n      *output = *output & temp1 | (input[1] & 3) << (temp4 & 0xff);\n      temp3 = input[1];\n      if (((temp3 - 1 < 2) || (temp3 == 0x11)) || (temp3 == 0x12)) {\n        output[2] = output[2] & temp1 | input[3] << (temp4 & 0xff);\n        output[1] = output[1] & ~temp2 | ((input[1] << 0x1b) >> 0x1f) << (bitIndex & 0xff);\n      }\n      output[3] = temp1 & output[3] | input[2] << (temp4 & 0xff);\n      temp1 = _DAT_40013c0c;\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index2 = (bitIndex & 3) << 2;\n        if (output == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (output == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (output == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (output == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (output == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (output == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (output == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (output == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (output == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (output == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index2) | index1 << index2;\n        temp1 = ~bitMask;\n        temp2 = _DAT_40013c00 & temp1;\n        if ((input[1] & 0x10000) != 0) {\n          temp2 = bitMask | _DAT_40013c00;\n        }\n        temp3 = temp1 & _DAT_40013c04;\n        if ((input[1] & 0x20000) != 0) {\n          temp3 = bitMask | _DAT_40013c04;\n        }\n        temp4 = temp1 & _DAT_40013c08;\n        if ((input[1] & 0x100000) != 0) {\n          temp4 = bitMask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = temp2;\n        _DAT_40013c04 = temp3;\n        _DAT_40013c08 = temp4;\n        temp1 = temp1 & _DAT_40013c0c;\n        if ((input[1] & 0x200000) != 0) {\n          temp1 = bitMask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = temp1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "set_bit_values_08000fb4",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "bitIndex",
                "uVar4": "bitMask",
                "uVar5": "temp3",
                "iVar6": "index1",
                "uVar7": "temp4",
                "iVar8": "index2"
            },
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "update_param_value_08001198",
            "code": "\nvoid updateParamValue_08001198(int objectAddress,int newValue,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(objectAddress + 0x18) = newValue << 0x10;\n    return;\n  }\n  *(int *)(objectAddress + 0x18) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "update_param_value_08001198",
                "param_1": "objectAddress",
                "param_2": "newValue",
                "param_3": "isShifted"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "check_and_update_gpio_080011a4",
            "code": "\n\n\nvoid checkAndUpdateGPIO_080011a4(uint inputValue)\n\n{\n  if ((_DAT_40013c14 & inputValue) != 0) {\n    _DAT_40013c14 = inputValue;\n    handleGPIOInterrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "check_and_update_gpio_080011a4",
                "param_1": "inputValue",
                "HAL_GPIO_EXTI_Callback": "handleGPIOInterrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_flag_value_080011c0",
            "code": "\nundefined4 updateFlagValue_080011c0(int *inputArray)\n\n{\n  if (*(char *)((int)inputArray + 0x3e) == '@') {\n    if (valueAtIndex20 == 0) {\n      *(uint *)(*inputArray + 0x10) = valueAtIndex17 & 0xfe;\n    }\n    else {\n      *(uint *)(*inputArray + 0x10) = valueAtIndex17 & 0xffU | 1;\n    }\n  }\n  else if (valueAtIndex4 == 0x4000) {\n    if (*(char *)((int)inputArray + 0x3d) == '!') {\n      *(uint *)(*inputArray + 0x10) = valueAtIndex17 & 0xfe;\n    }\n    else {\n      *(uint *)(*inputArray + 0x10) = valueAtIndex17 & 0xffU | 1;\n    }\n  }\n  else if (valueAtIndex20 == 0) {\n    *(uint *)(*inputArray + 0x10) = (uint)(valueAtIndex17 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (valueAtIndex20 == 1) {\n    *(uint *)(*inputArray + 0x10) = (uint)(valueAtIndex17 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_flag_value_080011c0",
                "param_1": "inputArray",
                "param_1[0x14]": "valueAtIndex20",
                "param_1[0x11]": "valueAtIndex17",
                "param_1[4]": "valueAtIndex4"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "copy_to_address_0800124a",
            "code": "\nundefined4 copyToAddress_0800124a(int *address)\n\n{\n  *(uint *)(*address + 0x10) = sourceValue & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "copy_to_address_0800124a",
                "param_1": "address",
                "param_1[0x11]": "sourceValue"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "update_flags_and_values_08001256",
            "code": "\nundefined4 updateFlagsAndValues_08001256(uint **parameterArray)\n\n{\n  uint *pointerVar1;\n  \n  pointerVar1 = parameterArray[0xb];\n  if ((*(char *)((int)parameterArray + 0x3d) == '\\\"') &&\n     ((arrayElement0x14 != (uint *)0x0 || (*(char *)((int)parameterArray + 0x3e) != '@')))) {\n    if ((arrayElement0x14 == (uint *)0x0) && (arrayElement4 == (uint *)0xc000)) {\n      **parameterArray = **parameterArray | 0x100;\n      arrayElement0x14 = (uint *)((int)arrayElement0x14 + 1);\n    }\n    else {\n      if (*(short *)((int)parameterArray + 0x2a) == 0) {\n        **parameterArray = **parameterArray | 0x200;\n      }\n      else if (*(short *)((int)parameterArray + 0x2a) == 1) {\n        if (pointerVar1 == (uint *)0xffff0000) {\n          **parameterArray = **parameterArray & 0xfffffbff;\n          pointerVar1 = *parameterArray;\n          if ((pointerVar1[1] & 0x800) == 0) {\n            *pointerVar1 = *pointerVar1 | 0x200;\n          }\n          else {\n            *pointerVar1 = *pointerVar1 & 0xfffffbff;\n          }\n        }\n        else if (((pointerVar1 == (uint *)0x4) || (pointerVar1 == (uint *)0x8)) ||\n                (arrayElement0xC == (uint *)0x12)) {\n          **parameterArray = **parameterArray & 0xfffffbff;\n          **parameterArray = **parameterArray | 0x200;\n        }\n        else if (parameterArray[0xb] == (uint *)0x2) {\n          **parameterArray = **parameterArray | 0x400;\n        }\n        else {\n          **parameterArray = **parameterArray & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameterArray + 0x2a) == 2) {\n        if (parameterArray[0xb] == (uint *)0x2) {\n          **parameterArray = **parameterArray | 0x400;\n        }\n        else {\n          **parameterArray = **parameterArray & 0xfffffbff;\n          **parameterArray = **parameterArray | 0x800;\n        }\n        pointerVar1 = *parameterArray;\n        if ((pointerVar1[1] & 0x800) != 0) {\n          pointerVar1[1] = pointerVar1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameterArray = **parameterArray | 0x400;\n        pointerVar1 = *parameterArray;\n        if ((pointerVar1[1] & 0x800) != 0) {\n          pointerVar1[1] = pointerVar1[1] | 0x1000;\n        }\n      }\n      arrayElement0x14 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "update_flags_and_values_08001256",
                "param_1": "parameterArray",
                "puVar1": "pointerVar1",
                "param_1[0x14]": "arrayElement0x14",
                "param_1[4]": "arrayElement4",
                "param_1[0xc]": "arrayElement0xC"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_data_08001420",
            "code": "\nundefined4 updateData_08001420(int *data)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtr = (byte *)dataArray;\n    dataArray = (int)(bytePtr + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePtr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_data_08001420",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "param_1[9]": "dataArray"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_value_08001440",
            "code": "\nundefined4 updateValue_08001440(int *data)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_value_08001440",
                "param_1": "data",
                "puVar1": "ptr",
                "param_1[9]": "data[9]"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "process_data_08001460",
            "code": "\nundefined4 process_data_08001460(uint **data,uint *input1,int length,uint *input2)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)data + 0x3d) == '(') {\n    if (input1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      ptr = *data;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x29;\n      *(undefined *)((int)data + 0x3e) = 0x20;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = input1;\n      *(short *)((int)data + 0x2a) = (short)length;\n      data[0xb] = input2;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "process_data_08001460",
                "param_1": "data",
                "param_2": "input1",
                "param_3": "length",
                "param_4": "input2",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "FUNC_080014ec",
            "code": "\nundefined4 FUNC_080014ec(uint **param_1,uint *param_2,int param_3,uint *param_4)\n\n{\n  undefined4 uVar1;\n  uint *puVar2;\n  \n  if (*(char *)((int)param_1 + 0x3d) == '(') {\n    if (param_2 == (uint *)0x0) {\n      uVar1 = 1;\n    }\n    else if (param_3 == 0) {\n      uVar1 = 1;\n    }\n    else if (*(char *)(param_1 + 0xf) == '\\x01') {\n      uVar1 = 2;\n    }\n    else {\n      *(undefined *)(param_1 + 0xf) = 1;\n      puVar2 = *param_1;\n      if ((*puVar2 & 1) == 0) {\n        *puVar2 = *puVar2 | 1;\n      }\n      **param_1 = **param_1 & 0xfffff7ff;\n      *(undefined *)((int)param_1 + 0x3d) = 0x2a;\n      *(undefined *)((int)param_1 + 0x3e) = 0x20;\n      uVar1 = 0;\n      param_1[0x10] = (uint *)0x0;\n      param_1[9] = param_2;\n      *(short *)((int)param_1 + 0x2a) = (short)param_3;\n      param_1[0xb] = param_4;\n      *(undefined2 *)(param_1 + 10) = *(undefined2 *)((int)param_1 + 0x2a);\n      *(undefined *)(param_1 + 0xf) = 0;\n      (*param_1)[1] = (*param_1)[1] | 0x700;\n    }\n  }\n  else {\n    uVar1 = 2;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "FUNC_080014ec"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_data_08001578",
            "code": "\nundefined4 initializeData_08001578(uint **dataPointer)\n\n{\n  uint *firstElement;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  firstElement = *dataPointer;\n  if ((*firstElement & 1) == 0) {\n    *firstElement = *firstElement | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_data_08001578",
                "param_1": "dataPointer",
                "puVar1": "firstElement"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_input_080015bc",
            "code": "\nundefined4 processInput_080015bc(int *input)\n\n{\n  char charVar1;\n  byte *bytePtr2;\n  \n  charVar1 = *(char *)((int)input + 0x3d);\n  if (*(short *)((int)input + 0x2a) != 0) {\n    bytePtr2 = (byte *)input[9];\n    input[9] = (int)(bytePtr2 + 1);\n    *(uint *)(*input + 0x10) = (uint)*bytePtr2;\n    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    if ((*(short *)((int)input + 0x2a) == 0) && (charVar1 == ')')) {\n      *(uint *)(*input + 4) = *(uint *)(*input + 4) & 0xfffffbff;\n      input[0xc] = 0x21;\n      *(undefined *)((int)input + 0x3d) = 0x28;\n      HAL_I2C_SlaveTxCpltCallback();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_input_080015bc",
                "param_1": "input",
                "cVar1": "charVar1",
                "pbVar2": "bytePtr2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "handle_i2_c_data_0800160e",
            "code": "\nundefined4 handleI2CData_0800160e(int *data)\n\n{\n  char currentChar;\n  undefined *nextBytePtr;\n  \n  currentChar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    nextBytePtr = (undefined *)data[9];\n    data[9] = (int)(nextBytePtr + 1);\n    *nextBytePtr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (currentChar == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "handle_i2_c_data_0800160e",
                "param_1": "data",
                "cVar1": "currentChar",
                "puVar2": "nextBytePtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "i2c_callback_function_0800165a",
            "code": "\nundefined4 i2cCallbackFunction_0800165a(int *inputArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 callbackValue;\n  uint addressValue;\n  \n  addressValue = *(uint *)(*inputArray + 0x18);\n  if ((addressValue & 0x80) == 0) {\n    callbackValue = *(undefined2 *)(inputArray + 3);\n  }\n  else {\n    callbackValue = *(undefined2 *)(inputArray + 6);\n  }\n  HAL_I2C_AddrCallback(inputArray,(*(uint *)(*inputArray + 0x18) & 4) == 0,callbackValue,addressValue,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "i2c_callback_function_0800165a",
                "param_1": "inputArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "callbackValue",
                "uVar2": "addressValue"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "handle_i2_c_event_08001684",
            "code": "\nundefined4 handleI2CEvent_08001684(uint **eventData)\n\n{\n  if (((eventData[11] == (uint *)0x4) || (eventData[11] == (uint *)0x8)) &&\n     (*(char *)((int)eventData + 0x3d) == '(')) {\n    eventData[11] = (uint *)0xffff0000;\n    (*eventData)[1] = (*eventData)[1] & 0xfffff8ff;\n    (*eventData)[5] = 0xfffffbff;\n    **eventData = **eventData & 0xfffffbff;\n    eventData[12] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback();\n  }\n  else if (*(char *)((int)eventData + 0x3d) == '!') {\n    eventData[11] = (uint *)0xffff0000;\n    eventData[12] = (uint *)0x21;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    (*eventData)[1] = (*eventData)[1] & 0xfffff8ff;\n    (*eventData)[5] = 0xfffffbff;\n    **eventData = **eventData & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback();\n  }\n  else {\n    (*eventData)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "handle_i2_c_event_08001684",
                "param_1": "eventData",
                "param_1[0xb]": "eventData[11]",
                "param_1[0xc]": "eventData[12]"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_data_0800171a",
            "code": "\nundefined4 processData_0800171a(uint **data)\n\n{\n  char char1;\n  uint *ptrVar2;\n  \n  char1 = *(char *)((int)data + 0x3d);\n  ptrVar2 = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (char1 == '!')) {\n    if ((ptrVar2 == (uint *)0x4) || ((ptrVar2 == (uint *)0x8 || (ptrVar2 == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        HAL_I2C_MemTxCpltCallback();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      HAL_I2C_MasterTxCpltCallback();\n    }\n  }\n  else if ((char1 == '!') || ((*(char *)((int)data + 0x3e) == '@' && (char1 == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptrVar2 = data[9];\n          data[9] = (uint *)((int)ptrVar2 + 1);\n          (*data)[4] = (uint)*(byte *)ptrVar2;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptrVar2 = data[9];\n      data[9] = (uint *)((int)ptrVar2 + 1);\n      (*data)[4] = (uint)*(byte *)ptrVar2;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_data_0800171a",
                "param_1": "data",
                "cVar1": "char1",
                "puVar2": "ptrVar2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_data_08001864",
            "code": "\nundefined4 processData_08001864(uint **data)\n\n{\n  uint *ptr;\n  \n  ptr = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) || (ptr == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handleMemTxCplt();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          handleMasterTxCplt();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        data[0xc] = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        handleMasterTxCplt();\n      }\n    }\n    else {\n      ptr = data[9];\n      data[9] = (uint *)((int)ptr + 1);\n      (*data)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_data_08001864",
                "param_1": "data",
                "puVar1": "ptr",
                "HAL_I2C_MemTxCpltCallback": "handleMemTxCplt",
                "HAL_I2C_MasterTxCpltCallback": "handleMasterTxCplt"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_input_08001904",
            "code": "\nundefined4 processInput_08001904(uint **input)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)input + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)input + 0x2a) < 4) {\n      if (*(ushort *)((int)input + 0x2a) < 2) {\n        **input = **input & 0xfffffbff;\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        tempPtr = counterPtr1;\n        counterPtr1 = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*input)[4];\n        *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        tempPtrNull = (uint *)0x0;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(undefined *)((int)input + 0x3e) = 0;\n          HAL_I2C_MemRxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)input + 0x3e) = 0;\n          HAL_I2C_MasterRxCpltCallback();\n        }\n      }\n    }\n    else {\n      tempPtr = counterPtr1;\n      counterPtr1 = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*input)[4];\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n      if (*(short *)((int)input + 0x2a) == 3) {\n        (*input)[1] = (*input)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_input_08001904",
                "param_1": "input",
                "puVar1": "tempPtr",
                "param_1[9]": "counterPtr1",
                "param_1[0xc]": "tempPtrNull"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_data_080019a0",
            "code": "\nundefined4 processData_080019a0(uint **data)\n\n{\n  uint *tempPtr;\n  \n  if (*(short *)((int)data + 0x2a) == 4) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    tempPtr = ptr;\n    ptr = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 3) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    tempPtr = ptr;\n    ptr = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if ((int)data[0xb] - 1U < 2) {\n      **data = **data & 0xfffffbff;\n      **data = **data | 0x100;\n    }\n    else {\n      **data = **data | 0x200;\n    }\n    tempPtr = ptr;\n    ptr = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    tempPtr = ptr;\n    ptr = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    (*data)[1] = (*data)[1] & 0xfffffcff;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    counter = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      callback1;\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      callback2;\n    }\n  }\n  else {\n    tempPtr = ptr;\n    ptr = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "tempPtr",
                "param_1[9]": "ptr",
                "param_1[0xc]": "counter",
                "HAL_I2C_MemRxCpltCallback()": "callback1",
                "HAL_I2C_MasterRxCpltCallback()": "callback2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_i2_c_data_08001ab0",
            "code": "\nvoid processI2CData_08001ab0(uint **data)\n\n{\n  int result;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      HAL_I2C_ErrorCallback(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x35) == '\\x01') {\n      data[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = HAL_DMA_Abort_IT(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0x14])();\n      }\n    }\n    else {\n      data[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = HAL_DMA_Abort_IT(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_i2_c_data_08001ab0",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_i2_c_data_08001bfc",
            "code": "\nundefined4 processI2CData_08001bfc(uint **data)\n\n{\n  char firstChar;\n  uint *ptr1;\n  uint *ptr2;\n  \n  firstChar = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((firstChar == '(') || (firstChar == '*')) || (firstChar == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_ListenCpltCallback();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (firstChar == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  else {\n    I2C_ITError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_i2_c_data_08001bfc",
                "param_1": "data",
                "cVar1": "firstChar",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "I2C_ITError",
                "HAL_I2C_SlaveRxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "handle_i2_c_interrupt_08001d00",
            "code": "\nvoid handleI2CInterrupt_08001d00(int *interruptData)\n\n{\n  int data;\n  uint statusFlags;\n  uint controlFlags;\n  uint miscFlags;\n  \n  data = *interruptData;\n  miscFlags = *(uint *)(data + 0x18);\n  statusFlags = *(uint *)(data + 0x14);\n  controlFlags = *(uint *)(data + 4);\n  if ((*(char *)((int)interruptData + 0x3e) == '\\x10') || (*(char *)((int)interruptData + 0x3e) == '@')) {\n    if (((statusFlags & 0x10001) == 0) || ((controlFlags & 0x200) == 0)) {\n      if (((statusFlags & 0x10008) == 0) || ((controlFlags & 0x200) == 0)) {\n        if (((statusFlags & 0x10002) != 0) && ((controlFlags & 0x200) != 0)) {\n          I2C_Master_ADDR(interruptData);\n        }\n      }\n      else {\n        I2C_Master_ADD10(interruptData);\n      }\n    }\n    else {\n      I2C_Master_SB(interruptData);\n    }\n    if ((miscFlags & 0x100004) == 0) {\n      if ((((statusFlags & 0x10040) != 0) && ((controlFlags & 0x400) != 0)) && ((statusFlags & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(interruptData);\n        return;\n      }\n      if (((statusFlags & 0x10004) != 0) && ((controlFlags & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(interruptData);\n        return;\n      }\n    }\n    else {\n      if ((((statusFlags & 0x10080) != 0) && ((controlFlags & 0x400) != 0)) && ((statusFlags & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(interruptData);\n        return;\n      }\n      if (((statusFlags & 0x10004) != 0) && ((controlFlags & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(interruptData);\n        return;\n      }\n    }\n  }\n  else {\n    if (((statusFlags & 0x10002) != 0) && ((controlFlags & 0x200) != 0)) {\n      I2C_Slave_ADDR();\n      return;\n    }\n    if (((statusFlags & 0x10010) != 0) && ((controlFlags & 0x200) != 0)) {\n      I2C_Slave_STOPF(interruptData);\n      return;\n    }\n    if ((miscFlags & 0x100004) == 0) {\n      if ((((statusFlags & 0x10040) != 0) && ((controlFlags & 0x400) != 0)) && ((statusFlags & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(interruptData);\n        return;\n      }\n      if (((statusFlags & 0x10004) != 0) && ((controlFlags & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(interruptData);\n      }\n    }\n    else {\n      if ((((statusFlags & 0x10080) != 0) && ((controlFlags & 0x400) != 0)) && ((statusFlags & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(interruptData);\n        return;\n      }\n      if (((statusFlags & 0x10004) != 0) && ((controlFlags & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(interruptData);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "handle_i2_c_interrupt_08001d00",
                "param_1": "interruptData",
                "iVar1": "data",
                "uVar2": "statusFlags",
                "uVar3": "controlFlags",
                "uVar4": "miscFlags"
            },
            "calling": [],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_SB",
                "I2C_SlaveReceive_RXNE",
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_ADDR",
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF",
                "I2C_Master_ADD10",
                "I2C_Slave_STOPF",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "update_i2_c_status_08001e68",
            "code": "\nvoid updateI2CStatus_08001e68(uint **param)\n\n{\n  char char1;\n  uint *ptrParam;\n  uint status1;\n  uint status2;\n  \n  ptrParam = *param;\n  status1 = ptrParam[5];\n  status2 = ptrParam[1];\n  if (((status1 & 0x10100) != 0) && ((status2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 1);\n    ptrParam[5] = 0xfffffeff;\n  }\n  if (((status1 & 0x10200) != 0) && ((status2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 2);\n    (*param)[5] = 0xfffffdff;\n  }\n  if (((status1 & 0x10400) != 0) && ((status2 & 0x100) != 0)) {\n    char1 = *(char *)((int)param + 0x3d);\n    if (((*(char *)((int)param + 0x3e) == ' ') && (*(short *)((int)param + 0x2a) == 0)) &&\n       (((char1 == '!' || (char1 == ')')) || ((char1 == '(' && (param[0xc] == (uint *)0x21)))))) {\n      I2C_Slave_AF(param);\n    }\n    else {\n      param[0x10] = (uint *)((uint)param[0x10] | 4);\n      if (*(char *)((int)param + 0x3e) == '\\x10') {\n        **param = **param | 0x200;\n      }\n      (*param)[5] = 0xfffffbff;\n    }\n  }\n  if (((status1 & 0x10800) != 0) && ((status2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 8);\n    (*param)[5] = 0xfffff7ff;\n  }\n  if (param[0x10] != (uint *)0x0) {\n    I2C_ITError(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "update_i2_c_status_08001e68",
                "param_1": "param",
                "cVar1": "char1",
                "puVar2": "ptrParam",
                "uVar3": "status1",
                "uVar4": "status2"
            },
            "calling": [],
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_and_wait_08001f9c",
            "code": "\n\n\nundefined4 check_and_wait_08001f9c(void)\n\n{\n  int start_time;\n  int current_time;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  start_time = HAL_GetTick();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      start_time = HAL_GetTick();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        current_time = HAL_GetTick();\n      } while ((uint)(current_time - start_time) < 0x3e9);\n      return 3;\n    }\n    current_time = HAL_GetTick();\n  } while ((uint)(current_time - start_time) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_and_wait_08001f9c",
                "iVar1": "start_time",
                "iVar2": "current_time"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_and_control_devices_0800201c",
            "code": "\n\n\nundefined4 checkAndControlDevices_0800201c(uint *deviceSettings)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isModifiedSetting;\n  \n  if (deviceSettings == (uint *)0x0) {\n    return 1;\n  }\n  if ((*deviceSettings & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (deviceSettings[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (deviceSettings[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (deviceSettings[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (deviceSettings[1] == 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*deviceSettings & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (deviceSettings[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | deviceSettings[4] << 3;\n    }\n    else if (deviceSettings[3] == 0) {\n      _DAT_42470000 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | deviceSettings[4] << 3;\n    }\n  }\n  if ((*deviceSettings & 8) != 0) {\n    if (deviceSettings[5] == 0) {\n      _DAT_42470e80 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*deviceSettings & 4) != 0) {\n    isModifiedSetting = (_DAT_40023840 & 0x10000000) == 0;\n    if (isModifiedSetting) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (deviceSettings[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (deviceSettings[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (deviceSettings[2] == 0) {\n      startTime = HAL_GetTick();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isModifiedSetting) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (deviceSettings[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (deviceSettings[6] == 2) {\n    _DAT_42470060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             deviceSettings[7] | deviceSettings[8] | deviceSettings[9] << 6 | ((deviceSettings[10] >> 1) - 1) * 0x10000 |\n             deviceSettings[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startTime = HAL_GetTick();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = HAL_GetTick();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_and_control_devices_0800201c",
                "param_1": "deviceSettings",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isModifiedSetting"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_clock_speed_080023b4",
            "code": "\n\n\nuint calculateClockSpeed_080023b4(void)\n\n{\n  undefined4 inputValue;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = __aeabi_uldivmod(result * 16000000,\n                             (((uint)(result * 0x20 < result) * -0x3f -\n                              (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                             (uint)carryCheck(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                             _DAT_40023804 & 0x3f,0,inputValue);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = __aeabi_uldivmod(result * 8000000,\n                             (((uint)(result * 0x20 < result) * -0x3f -\n                              (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                             (uint)carryCheck(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,\n                             inputValue);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_clock_speed_080023b4",
                "in_r3": "inputValue",
                "uVar1": "result",
                "CARRY4": "carryCheck"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "__aeabi_uldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "initialize_system_08002488",
            "code": "\n\n\nundefined4 initializeSystem_08002488(uint *configFlags,uint numConfigFlags)\n\n{\n  int startTime;\n  int currentTime;\n  uint sysClockFrequency;\n  \n  if (configFlags == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < numConfigFlags) {\n    _DAT_40023c00 = concatenateBytes(DAT_40023c00_1,(char)numConfigFlags);\n    if (numConfigFlags != (numConfigFlags & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configFlags & 2) != 0) {\n    if ((*configFlags & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*configFlags & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | configFlags[2];\n  }\n  if ((*configFlags & 1) != 0) {\n    sysClockFrequency = configFlags[1];\n    if (sysClockFrequency == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (sysClockFrequency - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = sysClockFrequency | _DAT_40023808 & 0xfffffffc;\n    startTime = getCurrentTime();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == configFlags[1] * 4) break;\n      currentTime = getCurrentTime();\n      if (5000 < (uint)(currentTime - startTime)) {\n        return 3;\n      }\n    }\n  }\n  if (numConfigFlags < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = concatenateBytes(DAT_40023c00_1,(char)numConfigFlags);\n    if (numConfigFlags != (numConfigFlags & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configFlags & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | configFlags[3];\n  }\n  if ((*configFlags & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | configFlags[4] << 3;\n  }\n  sysClockFrequency = getSysClockFreq();\n  DAT_2000002c = sysClockFrequency >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "initialize_system_08002488",
                "param_1": "configFlags",
                "param_2": "numConfigFlags",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "sysClockFrequency",
                "CONCAT31": "concatenateBytes",
                "HAL_GetTick": "getCurrentTime",
                "HAL_RCC_GetSysClockFreq": "getSysClockFreq",
                "HAL_InitTick": "initTick"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_value_080025e0",
            "code": "\nundefined4 get_data_value_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_value_080025e0"
            },
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "calculate_hclk_frequency_080025ec",
            "code": "\n\n\nuint calculateHCLKFrequency_080025ec(void)\n\n{\n  uint hclkFrequency;\n  \n  hclkFrequency = getHCLKFrequency();\n  return hclkFrequency >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "calculate_hclk_frequency_080025ec",
                "uVar1": "hclkFrequency",
                "HAL_RCC_GetHCLKFreq": "getHCLKFrequency"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_hclk_frequency_0800260c",
            "code": "\n\n\nuint getHCLKFrequency_0800260c(void)\n\n{\n  uint frequency;\n  \n  frequency = getHCLKFreq();\n  return frequency >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_hclk_frequency_0800260c",
                "uVar1": "frequency",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "handle_alarm_events_0800262c",
            "code": "\n\n\nvoid handleAlarmEvents_0800262c(int *alarmData)\n\n{\n  if (((*(uint *)(*alarmData + 0xc) & 0x100) != 0) && ((*(uint *)(*alarmData + 8) & 0x1000) != 0)) {\n    handleAlarmACallback();\n    *(uint *)(*alarmData + 0xc) = *(uint *)(*alarmData + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*alarmData + 0xc) & 0x200) != 0) && ((*(uint *)(*alarmData + 8) & 0x2000) != 0)) {\n    handleAlarmBCallback(alarmData);\n    *(uint *)(*alarmData + 0xc) = *(uint *)(*alarmData + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)alarmData + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "handle_alarm_events_0800262c",
                "param_1": "alarmData",
                "HAL_RTC_AlarmAEventCallback": "handleAlarmACallback",
                "HAL_RTCEx_AlarmBEventCallback": "handleAlarmBCallback"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmAEventCallback",
                "HAL_RTCEx_AlarmBEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "disable_pwm_0800268e",
            "code": "\nvoid disablePWM_0800268e(uint **param)\n\n{\n  uint *var1;\n  \n  *(undefined *)((int)param + 0x39) = 2;\n  var1 = *param;\n  if ((var1[8] & 0x1111) == 0) {\n    if ((var1[8] & 0x444) == 0) {\n      *var1 = *var1 & 0xfffffffe;\n    }\n  }\n  HAL_TIM_PWM_MspDeInit(param);\n  *(undefined *)((int)param + 0x39) = 0;\n  *(undefined *)(param + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "disable_pwm_0800268e",
                "param_1": "param",
                "puVar1": "var1"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "handle_tim_callbacks_080026ce",
            "code": "\nvoid handleTimCallbacks_080026ce(int *timHandle)\n\n{\n  int tempVar;\n  \n  tempVar = *timHandle;\n  if (((*(uint *)(tempVar + 0x10) & 2) != 0) && ((*(uint *)(tempVar + 0xc) & 2) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xfffffffd;\n    *(undefined *)(timHandle + 6) = 1;\n    if ((*(uint *)(*timHandle + 0x18) & 3) == 0) {\n      handleOC_DelayElapsed();\n      handlePWM_PulseFinished(timHandle);\n    }\n    else {\n      handleIC_Capture();\n    }\n    *(undefined *)(timHandle + 6) = 0;\n  }\n  tempVar = *timHandle;\n  if (((*(uint *)(tempVar + 0x10) & 4) != 0) && ((*(uint *)(tempVar + 0xc) & 4) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xfffffffb;\n    *(undefined *)(timHandle + 6) = 2;\n    if ((*(uint *)(*timHandle + 0x18) & 0x300) == 0) {\n      handleOC_DelayElapsed(timHandle);\n      handlePWM_PulseFinished(timHandle);\n    }\n    else {\n      handleIC_Capture(timHandle);\n    }\n    *(undefined *)(timHandle + 6) = 0;\n  }\n  tempVar = *timHandle;\n  if (((*(uint *)(tempVar + 0x10) & 8) != 0) && ((*(uint *)(tempVar + 0xc) & 8) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xfffffff7;\n    *(undefined *)(timHandle + 6) = 4;\n    if ((*(uint *)(*timHandle + 0x1c) & 3) == 0) {\n      handleOC_DelayElapsed(timHandle);\n      handlePWM_PulseFinished(timHandle);\n    }\n    else {\n      handleIC_Capture(timHandle);\n    }\n    *(undefined *)(timHandle + 6) = 0;\n  }\n  tempVar = *timHandle;\n  if (((*(uint *)(tempVar + 0x10) & 0x10) != 0) && ((*(uint *)(tempVar + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xffffffef;\n    *(undefined *)(timHandle + 6) = 8;\n    if ((*(uint *)(*timHandle + 0x1c) & 0x300) == 0) {\n      handleOC_DelayElapsed(timHandle);\n      handlePWM_PulseFinished(timHandle);\n    }\n    else {\n      handleIC_Capture(timHandle);\n    }\n    *(undefined *)(timHandle + 6) = 0;\n  }\n  tempVar = *timHandle;\n  if (((*(uint *)(tempVar + 0x10) & 1) != 0) && ((*(uint *)(tempVar + 0xc) & 1) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xfffffffe;\n    handlePeriodElapsed(timHandle);\n  }\n  tempVar = *timHandle;\n  if (((*(uint *)(tempVar + 0x10) & 0x80) != 0) && ((*(uint *)(tempVar + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xffffff7f;\n    handleBreak(timHandle);\n  }\n  tempVar = *timHandle;\n  if (((*(uint *)(tempVar + 0x10) & 0x40) != 0) && ((*(uint *)(tempVar + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xffffffbf;\n    handleTrigger(timHandle);\n  }\n  tempVar = *timHandle;\n  if (((*(uint *)(tempVar + 0x10) & 0x20) != 0) && ((*(uint *)(tempVar + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(tempVar + 0x10) = 0xffffffdf;\n    handleCommutation(timHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "handle_tim_callbacks_080026ce",
                "param_1": "timHandle",
                "iVar1": "tempVar",
                "HAL_TIM_OC_DelayElapsedCallback": "handleOC_DelayElapsed",
                "HAL_TIM_PWM_PulseFinishedCallback": "handlePWM_PulseFinished",
                "HAL_TIM_IC_CaptureCallback": "handleIC_Capture",
                "HAL_TIM_PeriodElapsedCallback": "handlePeriodElapsed",
                "HAL_TIMEx_BreakCallback": "handleBreak",
                "HAL_TIM_TriggerCallback": "handleTrigger",
                "HAL_TIMEx_CommutationCallback": "handleCommutation"
            },
            "calling": [
                "TIM1_UP_TIM10_IRQHandler"
            ],
            "called": [
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_value_08002848",
            "code": "\nvoid updateBitValue_08002848(int inputAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(inputAddress + 0x20) = *(uint *)(inputAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(inputAddress + 0x20) = *(uint *)(inputAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_value_08002848",
                "param_1": "inputAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "configure_timer_channel_08002864",
            "code": "\nundefined4 configureTimerChannel_08002864(uint **timerConfig,undefined4 channelConfig)\n\n{\n  bool isChannelValid;\n  uint *timerBaseAddress;\n  \n  TIM_CCxChannelCmd(*timerConfig,channelConfig,0);\n  timerBaseAddress = *timerConfig;\n  if (timerBaseAddress == (uint *)0x40010000) {\n    isChannelValid = true;\n  }\n  else if (timerBaseAddress == (uint *)0x40010400) {\n    isChannelValid = true;\n  }\n  else {\n    isChannelValid = false;\n  }\n  if (((isChannelValid) && ((timerBaseAddress[8] & 0x1111) == 0)) && ((timerBaseAddress[8] & 0x444) == 0)) {\n    timerBaseAddress[0x11] = timerBaseAddress[0x11] & 0xffff7fff;\n  }\n  timerBaseAddress = *timerConfig;\n  if (((timerBaseAddress[8] & 0x1111) == 0) && ((timerBaseAddress[8] & 0x444) == 0)) {\n    *timerBaseAddress = *timerBaseAddress & 0xfffffffe;\n  }\n  *(undefined *)((int)timerConfig + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "configure_timer_channel_08002864",
                "param_1": "timerConfig",
                "param_2": "channelConfig",
                "bVar1": "isChannelValid",
                "puVar2": "timerBaseAddress"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bitwise_value_080028d4",
            "code": "\nvoid updateBitwiseValue_080028d4(int ptrBase,uint bitPosition,int newValue)\n\n{\n  *(uint *)(ptrBase + 0x20) = *(uint *)(ptrBase + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(ptrBase + 0x20) = *(uint *)(ptrBase + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bitwise_value_080028d4",
                "param_1": "ptrBase",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "initialize_channel_080028f0",
            "code": "\nundefined4 initializeChannel_080028f0(uint **channelPtr,undefined4 channelConfig)\n\n{\n  uint *channel;\n  \n  TIM_CCxNChannelCmd(*channelPtr,channelConfig,0);\n  channel = *channelPtr;\n  if (((channel[8] & 0x1111) == 0) && ((channel[8] & 0x444) == 0)) {\n    channel[17] = channel[17] & 0xffff7fff;\n  }\n  channel = *channelPtr;\n  if (((channel[8] & 0x1111) == 0) && ((channel[8] & 0x444) == 0)) {\n    *channel = *channel & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "initialize_channel_080028f0",
                "param_1": "channelPtr",
                "param_2": "channelConfig",
                "puVar1": "channel",
                "puVar1[8]": "channel[8]",
                "puVar1[0x11]": "channel[17]"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "update_data_08002940",
            "code": "\nvoid updateData_08002940(int *data)\n\n{\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "update_data_08002940",
                "param_1": "data"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 process_data_0800295c(int *data_ptr)\n\n{\n  short count;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data_ptr + 0x39) != '!') {\n    return 2;\n  }\n  if (data_ptr[2] == 0x1000) {\n    *(uint *)(*data_ptr + 4) = *(ushort *)data_ptr[8] & 0x1ff;\n    if (data_ptr[4] == 0) {\n      data_ptr[8] = data_ptr[8] + 2;\n    }\n    else {\n      data_ptr[8] = data_ptr[8] + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)data_ptr[8];\n    data_ptr[8] = (int)(byte_ptr + 1);\n    *(uint *)(*data_ptr + 4) = (uint)*byte_ptr;\n  }\n  count = *(short *)((int)data_ptr + 0x26) + -1;\n  *(short *)((int)data_ptr + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffff7f;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data_ptr",
                "sVar1": "count",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_clock_config_080029c8",
            "code": "\nvoid calculateClockConfig_080029c8(int *inputValues)\n\n{\n  int pclk1Freq;\n  int pclk1Freq2;\n  int pclk1Freq3;\n  int pclk1Freq4;\n  int pclk1Freq5;\n  int inputValue1;\n  int inputValue2;\n  int inputValue3;\n  int inputValue4;\n  int ptr;\n  \n  *(uint *)(*inputValues + 0x10) = *(uint *)(*inputValues + 0x10) & 0xffffcfff | inputValues[3];\n  *(uint *)(*inputValues + 0xc) =\n       *(uint *)(*inputValues + 0xc) & 0xffff69f3 | inputValues[2] | inputValues[4] | inputValues[5] | inputValues[7];\n  *(uint *)(*inputValues + 0x14) = *(uint *)(*inputValues + 0x14) & 0xfffffcff | inputValues[6];\n  if (inputValues[7] == 0x8000) {\n    ptr = *inputValues;\n    if ((ptr != 0x40011000) && (ptr != 0x40011400)) {\n      pclk1Freq = getPCLK1Frequency();\n      inputValue1 = inputValues[1];\n      pclk1Freq2 = getPCLK1Frequency();\n      inputValue2 = inputValues[1];\n      pclk1Freq3 = getPCLK1Frequency();\n      inputValue3 = inputValues[1];\n      pclk1Freq4 = getPCLK1Frequency();\n      inputValue4 = inputValues[1];\n      pclk1Freq5 = getPCLK1Frequency();\n      *(uint *)(ptr + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(pclk1Freq4 * 0x19) / (uint)(inputValue4 << 1) +\n                          (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) /\n                                (ulonglong)(uint)(inputValues[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(pclk1Freq2 * 0x19) / (uint)(inputValue2 << 1) +\n             (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(inputValue3 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(pclk1Freq * 0x19) / (ulonglong)(uint)(inputValue1 << 1)) / 100) * 0x10;\n      return;\n    }\n    pclk1Freq = getPCLK2Frequency();\n    inputValue1 = inputValues[1];\n    pclk1Freq2 = getPCLK2Frequency();\n    inputValue2 = inputValues[1];\n    pclk1Freq3 = getPCLK2Frequency();\n    inputValue3 = inputValues[1];\n    pclk1Freq4 = getPCLK2Frequency();\n    inputValue4 = inputValues[1];\n    pclk1Freq5 = getPCLK2Frequency();\n    *(uint *)(ptr + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1Freq4 * 0x19) / (uint)(inputValue4 << 1) +\n                        (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) / (ulonglong)(uint)(inputValues[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(pclk1Freq2 * 0x19) / (uint)(inputValue2 << 1) +\n           (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(inputValue3 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(pclk1Freq * 0x19) / (ulonglong)(uint)(inputValue1 << 1)) / 100) * 0x10;\n    return;\n  }\n  ptr = *inputValues;\n  if ((ptr != 0x40011000) && (ptr != 0x40011400)) {\n    pclk1Freq = getPCLK1Frequency();\n    inputValue1 = inputValues[1];\n    pclk1Freq2 = getPCLK1Frequency();\n    inputValue2 = inputValues[1];\n    pclk1Freq3 = getPCLK1Frequency();\n    inputValue3 = inputValues[1];\n    pclk1Freq4 = getPCLK1Frequency();\n    inputValue4 = inputValues[1];\n    pclk1Freq5 = getPCLK1Frequency();\n    *(uint *)(ptr + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1Freq4 * 0x19) / (uint)(inputValue4 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) / (ulonglong)(uint)(inputValues[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1Freq2 * 0x19) / (uint)(inputValue2 << 2) +\n           (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(inputValue3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1Freq * 0x19) / (ulonglong)(uint)(inputValue1 << 2)) / 100) * 0x10;\n    return;\n  }\n  pclk1Freq = getPCLK2Frequency();\n  inputValue1 = inputValues[1];\n  pclk1Freq2 = getPCLK2Frequency();\n  inputValue2 = inputValues[1];\n  pclk1Freq3 = getPCLK2Frequency();\n  inputValue3 = inputValues[1];\n  pclk1Freq4 = getPCLK2Frequency();\n  inputValue4 = inputValues[1];\n  pclk1Freq5 = getPCLK2Frequency();\n  *(uint *)(ptr + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(pclk1Freq4 * 0x19) / (uint)(inputValue4 << 2) +\n                      (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) / (ulonglong)(uint)(inputValues[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(pclk1Freq2 * 0x19) / (uint)(inputValue2 << 2) +\n         (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(inputValue3 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(pclk1Freq * 0x19) / (ulonglong)(uint)(inputValue1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_clock_config_080029c8",
                "param_1": "inputValues",
                "iVar1": "pclk1Freq",
                "iVar2": "pclk1Freq2",
                "iVar3": "pclk1Freq3",
                "iVar4": "pclk1Freq4",
                "iVar5": "pclk1Freq5",
                "iVar6": "inputValue1",
                "iVar7": "inputValue2",
                "iVar8": "inputValue3",
                "iVar9": "inputValue4",
                "iVar10": "ptr",
                "HAL_RCC_GetPCLK1Freq": "getPCLK1Frequency",
                "HAL_RCC_GetPCLK2Freq": "getPCLK2Frequency"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_and_modify_flags_08002d0c",
            "code": "\nundefined4 check_and_modify_flags_08002d0c(uint **flags,uint mask,uint expected_result,int start_time,uint time_limit)\n\n{\n  int current_time;\n  \n  do {\n    if (((mask & ~**flags) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((time_limit == 0xffffffff) ||\n          ((time_limit != 0 && (current_time = HAL_GetTick(), (uint)(current_time - start_time) <= time_limit))));\n  (*flags)[3] = (*flags)[3] & 0xfffffe5f;\n  (*flags)[5] = (*flags)[5] & 0xfffffffe;\n  *(undefined *)((int)flags + 0x39) = 0x20;\n  *(undefined *)((int)flags + 0x3a) = 0x20;\n  *(undefined *)(flags + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_and_modify_flags_08002d0c",
                "param_1": "flags",
                "param_2": "mask",
                "param_3": "expected_result",
                "param_4": "start_time",
                "param_5": "time_limit",
                "iVar1": "current_time"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_uart_08002d72",
            "code": "\nundefined4 initializeUART_08002d72(int *uartConfig)\n\n{\n  if (uartConfig != (int *)0x0) {\n    if (*(char *)((int)uartConfig + 0x39) == '\\0') {\n      *(undefined *)(uartConfig + 0xe) = 0;\n      initializeUartPeripheral;\n    }\n    *(undefined *)((int)uartConfig + 0x39) = 0x24;\n    *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) & 0xffffdfff;\n    setUartConfig;\n    *(uint *)(*uartConfig + 0x10) = *(uint *)(*uartConfig + 0x10) & 0xffffb7ff;\n    *(uint *)(*uartConfig + 0x14) = *(uint *)(*uartConfig + 0x14) & 0xffffffd5;\n    *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) | 0x2000;\n    uartPeripheralConfig4 = 0;\n    *(undefined *)((int)uartConfig + 0x39) = 0x20;\n    *(undefined *)((int)uartConfig + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_uart_08002d72",
                "param_1": "uartConfig",
                "HAL_UART_MspInit()": "initializeUartPeripheral",
                "UART_SetConfig(param_1)": "setUartConfig",
                "param_1[0xf]": "uartPeripheralConfig4"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 processData_08002dd0(int *dataBuffer,ushort *inputData,int inputSize,undefined4 timeout)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataBuffer + 0x39) == ' ') {\n    if (inputData == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (inputSize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataBuffer + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataBuffer + 0xe) = 1;\n      dataBuffer[0xf] = 0;\n      *(undefined *)((int)dataBuffer + 0x39) = 0x21;\n      returnValue = HAL_GetTick();\n      *(short *)(dataBuffer + 9) = (short)inputSize;\n      *(short *)((int)dataBuffer + 0x26) = (short)inputSize;\n      while (*(short *)((int)dataBuffer + 0x26) != 0) {\n        *(short *)((int)dataBuffer + 0x26) = *(short *)((int)dataBuffer + 0x26) + -1;\n        if (dataBuffer[2] == 0x1000) {\n          result = UART_WaitOnFlagUntilTimeout(dataBuffer,0x80,0,returnValue,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataBuffer + 4) = *inputData & 0x1ff;\n          if (dataBuffer[4] == 0) {\n            inputData = inputData + 1;\n          }\n          else {\n            inputData = (ushort *)((int)inputData + 1);\n          }\n        }\n        else {\n          result = UART_WaitOnFlagUntilTimeout(dataBuffer,0x80,0,returnValue,timeout);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*dataBuffer + 4) = (uint)*(byte *)inputData;\n          inputData = (ushort *)((int)inputData + 1);\n        }\n      }\n      result = UART_WaitOnFlagUntilTimeout(dataBuffer,0x40,0,returnValue,timeout);\n      if (result == 0) {\n        *(undefined *)((int)dataBuffer + 0x39) = 0x20;\n        *(undefined *)(dataBuffer + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "dataBuffer",
                "param_2": "inputData",
                "param_3": "inputSize",
                "param_4": "timeout",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "check_and_modify_data_08002eb2",
            "code": "\nundefined4 checkAndModifyData_08002eb2(int *data,int length,int value)\n\n{\n  if (*(char *)((int)data + 0x39) != ' ') {\n    return 2;\n  }\n  if (length == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (*(char *)(data + 0xe) != '\\x01') {\n    lengthValue = length;\n    *(short *)(data + 9) = (short)value;\n    *(short *)((int)data + 0x26) = (short)value;\n    counter = 0;\n    *(undefined *)((int)data + 0x39) = 0x21;\n    *(undefined *)(data + 0xe) = 0;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "check_and_modify_data_08002eb2",
                "param_1": "data",
                "param_2": "length",
                "param_3": "value",
                "param_1[8]": "lengthValue",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_input_08002efa",
            "code": "\nundefined4 validate_input_08002efa(int *input_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array_element_10 = value_1;\n    *(short *)(input_array + 0xb) = (short)value_2;\n    *(short *)((int)input_array + 0x2e) = (short)value_2;\n    input_array_element_15 = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[10]": "input_array_element_10",
                "param_1[0xf]": "input_array_element_15"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "update_uart_configuration_08002f4c",
            "code": "\nundefined4 update_uart_configuration_08002f4c(int *configuration_info)\n\n{\n  *(uint *)(*configuration_info + 0xc) = *(uint *)(*configuration_info + 0xc) & 0xffffffbf;\n  *(undefined *)((int)configuration_info + 0x39) = 0x20;\n  handle_uart_transmission_completion();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "update_uart_configuration_08002f4c",
                "param_1": "configuration_info",
                "HAL_UART_TxCpltCallback": "handle_uart_transmission_completion"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_binary_data_08002f66",
            "code": "\nundefined4 processBinaryData_08002f66(int *binaryData)\n\n{\n  byte *bytePointer;\n  short tempShort;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)binaryData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (binaryData[2] == 0x1000) {\n    if (binaryData[4] == 0) {\n      *(ushort *)binaryData[10] = (ushort)((uint)(*(int *)(*binaryData + 4) << 0x17) >> 0x17);\n      binaryData[10] = binaryData[10] + 2;\n    }\n    else {\n      *(ushort *)binaryData[10] = (ushort)*(undefined4 *)(*binaryData + 4) & 0xff;\n      binaryData[10] = binaryData[10] + 1;\n    }\n  }\n  else if (binaryData[4] == 0) {\n    undefinedPointer = (undefined *)binaryData[10];\n    binaryData[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*binaryData + 4);\n  }\n  else {\n    bytePointer = (byte *)binaryData[10];\n    binaryData[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*binaryData + 4) & 0x7f;\n  }\n  tempShort = *(short *)((int)binaryData + 0x2e) + -1;\n  *(short *)((int)binaryData + 0x2e) = tempShort;\n  if (tempShort != 0) {\n    return 0;\n  }\n  *(uint *)(*binaryData + 0xc) = *(uint *)(*binaryData + 0xc) & 0xfffffedf;\n  *(uint *)(*binaryData + 0x14) = *(uint *)(*binaryData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)binaryData + 0x3a) = 0x20;\n  HAL_UART_RxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_binary_data_08002f66",
                "param_1": "binaryData",
                "pbVar1": "bytePointer",
                "sVar2": "tempShort",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "check_and_handle_uart_status_08002ffc",
            "code": "\nvoid checkAndHandleUARTStatus_08002ffc(uint **packetPtr)\n\n{\n  int dmaError;\n  uint statusReg;\n  uint *ptrPacket;\n  uint isTransferCancelled;\n  uint configReg;\n  \n  ptrPacket = *packetPtr;\n  configReg = *ptrPacket;\n  statusReg = ptrPacket[3];\n  if ((((configReg & 0xf) == 0) && ((configReg & 0x20) != 0)) && ((statusReg & 0x20) != 0)) {\n    UART_Receive_IT(packetPtr);\n    return;\n  }\n  if (((configReg & 0xf) == 0) || ((isTransferCancelled = ptrPacket[5] & 1, isTransferCancelled == 0 && ((statusReg & 0x120) == 0)))) {\n    if (((configReg & 0x80) != 0) && ((statusReg & 0x80) != 0)) {\n      UART_Transmit_IT(packetPtr);\n      return;\n    }\n    if (((configReg & 0x40) != 0) && ((statusReg & 0x40) != 0)) {\n      UART_EndTransmit_IT(packetPtr);\n    }\n  }\n  else {\n    if (((configReg & 1) != 0) && ((statusReg & 0x100) != 0)) {\n      packetPtr[0xf] = (uint *)((uint)packetPtr[0xf] | 1);\n    }\n    if (((configReg & 4) != 0) && (isTransferCancelled != 0)) {\n      packetPtr[0xf] = (uint *)((uint)packetPtr[0xf] | 2);\n    }\n    if (((configReg & 2) != 0) && (isTransferCancelled != 0)) {\n      packetPtr[0xf] = (uint *)((uint)packetPtr[0xf] | 4);\n    }\n    if (((configReg & 8) != 0) && (isTransferCancelled != 0)) {\n      packetPtr[0xf] = (uint *)((uint)packetPtr[0xf] | 8);\n    }\n    if (packetPtr[0xf] != (uint *)0x0) {\n      if (((configReg & 0x20) != 0) && ((statusReg & 0x20) != 0)) {\n        UART_Receive_IT(packetPtr);\n      }\n      if ((((uint)packetPtr[0xf] & 8) == 0) && (((*packetPtr)[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(packetPtr);\n        packetPtr[0xf] = (uint *)0x0;\n        return;\n      }\n      UART_EndRxTransfer(packetPtr);\n      ptrPacket = *packetPtr;\n      if ((ptrPacket[5] & 0x40) == 0) {\n        HAL_UART_ErrorCallback(packetPtr);\n        return;\n      }\n      ptrPacket[5] = ptrPacket[5] & 0xffffffbf;\n      if (packetPtr[0xd] == (uint *)0x0) {\n        HAL_UART_ErrorCallback(packetPtr);\n        return;\n      }\n      packetPtr[0xd][0x14] = (uint)&LAB_0800311c_1;\n      dmaError = HAL_DMA_Abort_IT(packetPtr[0xd]);\n      if (dmaError != 0) {\n        (*(code *)packetPtr[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "check_and_handle_uart_status_08002ffc",
                "param_1": "packetPtr",
                "iVar1": "dmaError",
                "uVar2": "statusReg",
                "puVar3": "ptrPacket",
                "uVar4": "isTransferCancelled",
                "uVar5": "configReg"
            },
            "calling": [],
            "called": [
                "UART_Transmit_IT",
                "HAL_DMA_Abort_IT",
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT",
                "UART_EndTransmit_IT",
                "UART_EndRxTransfer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int baseAddress)\n\n{\n  return *(byte *)(baseAddress + 0x3a) | *(byte *)(baseAddress + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "baseAddress"
            },
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "extract_bit_08003138",
            "code": "\nuint extractBit_08003138(uint value,int baseAddress)\n\n{\n  return *(uint *)(baseAddress + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "extract_bit_08003138",
                "param_1": "value",
                "param_2": "baseAddress"
            },
            "calling": [
                "pinMode",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_0800314e",
            "code": "\nvoid setBit_0800314e(uint bitPosition,int data)\n\n{\n  uint shiftAmount;\n  \n  shiftAmount = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(data + shiftAmount * 4) = *(uint *)(data + shiftAmount * 4) | 1 << (bitPosition & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_0800314e",
                "param_1": "bitPosition",
                "param_2": "data",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_bit_value_0800316c",
            "code": "\nvoid updateBitValue_0800316c(uint bitPosition,int dataPtr)\n\n{\n  uint shiftedPosition;\n  \n  shiftedPosition = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(dataPtr + shiftedPosition * 4) = *(uint *)(dataPtr + shiftedPosition * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_bit_value_0800316c",
                "param_1": "bitPosition",
                "param_2": "dataPtr",
                "uVar1": "shiftedPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 inputIndex)\n\n{\n  switch(inputIndex) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "inputIndex"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_memory_region_permission_080031fc",
            "code": "\n\n\nundefined4 setMemoryRegionPermission_080031fc(undefined4 regionIndex)\n\n{\n  undefined4 baseAddress;\n  \n  switch(regionIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    baseAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    baseAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    baseAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    baseAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    baseAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    baseAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    baseAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    baseAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    baseAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    baseAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    baseAddress = 0x40022800;\n    break;\n  default:\n    baseAddress = 0;\n  }\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_memory_region_permission_080031fc",
                "param_1": "regionIndex",
                "uVar1": "baseAddress"
            },
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_pinmap_function_08003380",
            "code": "\nundefined4 check_pinmap_function_08003380(undefined4 pinmap_param_1,undefined4 pinmap_param_2,undefined4 pinmap_param_3,undefined4 pinmap_param_4)\n\n{\n  int pinmap_result;\n  \n  pinmap_result = pinmap_function(pinmap_param_1,&DAT_08005a18,pinmap_param_3,pinmap_param_4,pinmap_param_4);\n  if ((uint)(pinmap_result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_pinmap_function_08003380",
                "param_1": "pinmap_param_1",
                "param_2": "pinmap_param_2",
                "param_3": "pinmap_param_3",
                "param_4": "pinmap_param_4",
                "iVar1": "pinmap_result"
            },
            "calling": [
                "dac_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "map_pin_function_0800339c",
            "code": "\nundefined4 map_pin_function_0800339c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = pinmap_function(input_1,&DAT_08005a3c,input_3,input_4,input_4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "map_pin_function_0800339c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_higher_bit_080033c8",
            "code": "\n\n\nvoid clearHigherBit_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_higher_bit_080033c8"
            },
            "calling": [
                "HAL_DAC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "stop_and_de_init_dac_080033d8",
            "code": "\nvoid stopAndDeInitDAC_080033d8(undefined4 peripheral)\n\n{\n  int dacChannel;\n  int peripheralArray [5];\n  \n  peripheralArray[0] = pinmap_peripheral(peripheral,&DAT_08005a18);\n  if ((peripheralArray[0] != 0) && ((dacChannel = get_dac_channel(peripheral), dacChannel == 0 || (dacChannel == 0x10)))) {\n    HAL_DAC_Stop(peripheralArray,dacChannel);\n    HAL_DAC_DeInit(peripheralArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "stop_and_de_init_dac_080033d8",
                "param_1": "peripheral",
                "local_1c": "peripheralArray",
                "iVar1": "dacChannel"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_DAC_DeInit",
                "pinmap_peripheral",
                "HAL_DAC_Stop",
                "get_dac_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "disable_timer_clock_0800340c",
            "code": "\nvoid disable_timer_clock_0800340c(void)\n\n{\n  timer_disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "disable_timer_clock_0800340c"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "stop_pwm_peripheral_08003414",
            "code": "\nvoid stopPwmPeripheral_08003414(undefined4 peripheral)\n\n{\n  int pwmChannel;\n  uint functionPin;\n  int peripheralMap [16];\n  \n  peripheralMap[0] = pinmap_peripheral(peripheral,&DAT_08005a3c);\n  if ((peripheralMap[0] != 0) &&\n     ((((pwmChannel = get_pwm_channel(peripheral), pwmChannel == 0 || (pwmChannel == 4)) || (pwmChannel == 8)) ||\n      ((pwmChannel == 0xc || (pwmChannel == 0x18)))))) {\n    functionPin = pinmap_function(peripheral,&DAT_08005a3c);\n    if ((functionPin & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(peripheralMap,pwmChannel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(peripheralMap,pwmChannel);\n    }\n    HAL_TIM_PWM_DeInit(peripheralMap);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "stop_pwm_peripheral_08003414",
                "param_1": "peripheral",
                "iVar1": "pwmChannel",
                "uVar2": "functionPin",
                "local_4c": "peripheralMap"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "pinmap_peripheral",
                "pinmap_function",
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "get_system_time_0800346c",
            "code": "\nvoid get_system_time_0800346c(void)\n\n{\n  system_timer();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "get_system_time_0800346c",
                "HAL_GetTick": "system_timer"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "handle_system_tick_08003476",
            "code": "\nvoid handleSystemTick_08003476(void)\n\n{\n  incrementSystemTick();\n  handleSystemTick_08003476IRQ();\n  handleNoOsSystemTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "handle_system_tick_08003476",
                "HAL_IncTick": "incrementSystemTick",
                "HAL_SYSTICK_IRQHandler": "handleSystemTickIRQ",
                "noOsSystickHandler": "handleNoOsSystemTick"
            },
            "calling": [],
            "called": [
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "initialize_gpio_08003486",
            "code": "\nvoid initialize_GPIO_08003486(uint pin_number,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpio_port;\n  uint pin_mask;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_constant;\n  \n  gpio_port = set_GPIO_Port_Clock((pin_number << 0x18) >> 0x1c);\n  pin_mask = 1 << (pin_number & 0xf) & 0xffff;\n  local_constant = 2;\n  local_param2 = param2;\n  local_param3 = param3;\n  HAL_GPIO_Init(gpio_port,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "initialize_gpio_08003486",
                "param_1": "pin_number",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "gpio_port",
                "local_24": "pin_mask",
                "local_20": "local_param2",
                "local_1c": "local_param3",
                "local_18": "local_constant"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "set_gpio_state_080034b6",
            "code": "\nvoid setGPIOState_080034b6(undefined4 port,undefined2 pin,int state,undefined4 data)\n\n{\n  if (state == 0) {\n    writePin(port,pin,0,data,data);\n    return;\n  }\n  writePin(port,pin,1,data,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "set_gpio_state_080034b6",
                "param_1": "port",
                "param_2": "pin",
                "param_3": "state",
                "param_4": "data",
                "HAL_GPIO_WritePin": "writePin"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_080034ce",
            "code": "\nvoid initializeSystem_080034ce(void)\n\n{\n  initializeHardware();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce",
                "HAL_Init": "initializeHardware",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_index_080034da",
            "code": "\nundefined4 find_value_index_080034da(int target_value,short *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (*array_ptr == target_value) break;\n    array_ptr = array_ptr + 6;\n  }\n  return *(undefined4 *)(array_ptr + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_index_080034da",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "find_peripheral_080034f4",
            "code": "\nundefined4 find_peripheral_080034f4(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value != -1) {\n    result = pinmap_find_peripheral_080034f4();\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "find_peripheral_080034f4",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "dac_stop",
                "pwm_stop",
                "uart_debug_write",
                "uart_debug_init",
                "uart_init"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_with_id_08003506",
            "code": "\nint findValueWithId_08003506(int targetId,short *data)\n\n{\n  while( true ) {\n    if (*(int *)(data + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(data + 2) == targetId) break;\n    data = data + 6;\n  }\n  return (int)*data;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_with_id_08003506",
                "param_1": "targetId",
                "param_2": "data"
            },
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_pin_0800351e",
            "code": "\nundefined4 find_pin_0800351e(int pin)\n\n{\n  undefined4 result;\n  \n  if (pin != 0) {\n    result = pinmap_find_pin_0800351e();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_pin_0800351e",
                "param_1": "pin",
                "uVar1": "result"
            },
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_index_0800352e",
            "code": "\nundefined4 find_index_0800352e(int target_value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == target_value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_index_0800352e",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "find_pinmap_function_0800354a",
            "code": "\nundefined4 find_pinmap_function_0800354a(int input_value)\n\n{\n  undefined4 result;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  result = pinmap_find_function();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "find_pinmap_function_0800354a",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "calling": [
                "pwm_stop",
                "get_dac_channel",
                "get_pwm_channel",
                "uart_init"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_in_array_0800355e",
            "code": "\nundefined4 findValueInArray_0800355e(int valueToFind,short *array)\n\n{\n  if (valueToFind == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (valueToFind == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "param_1": "valueToFind",
                "param_2": "array"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_non_zero_08003582",
            "code": "\nint compareAndReturnNonZero_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_non_zero_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_08003594",
            "code": "\nvoid executeCallback_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_08003594"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_memory_080035bc",
            "code": "\n\n\nvoid initializeMemory_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_memory_080035bc"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "update_flags_080035fc",
            "code": "\n\n\nvoid updateFlags_080035fc(int *flag)\n\n{\n  if (*flag == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*flag == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*flag == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*flag == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*flag == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*flag == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*flag == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*flag == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*flag == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*flag == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*flag == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*flag == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*flag == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*flag == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "update_flags_080035fc",
                "param_1": "flag"
            },
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtractFour_08003750(int num)\n\n{\n  return num + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "num"
            },
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_timer_callback_08003754",
            "code": "\nvoid executeTimerCallback_08003754(int timerIndex)\n\n{\n  int timerObject;\n  \n  timerObject = getTimerObject();\n  if ((*(functionPointer **)(timerObject + 0x48) != (functionPointer *)0x0) && (*(char *)(timerIndex + 0x18) == '\\x01')) {\n    (**(functionPointer **)(timerObject + 0x48))(timerObject,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_timer_callback_08003754",
                "param_1": "timerIndex",
                "iVar1": "timerObject",
                "get_timer_obj": "getTimerObject",
                "code": "functionPointer"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_timer_callback_0800376e",
            "code": "\nvoid execute_timer_callback_0800376e(void)\n\n{\n  int timerObj;\n  \n  timerObj = getTimerObject();\n  if (*(functionPointer **)(timerObj + 0x44) != (functionPointer *)0x0) {\n    (**(functionPointer **)(timerObj + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_timer_callback_0800376e",
                "iVar1": "timerObj",
                "get_timer_obj": "getTimerObject",
                "code": "functionPointer"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "handle_timers_0800377c",
            "code": "\nvoid handleTimers_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    HAL_TIM_IRQHandler();\n  }\n  if (DAT_200001d4 != 0) {\n    HAL_TIM_IRQHandler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "handle_timers_0800377c"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtractFour_0800387c(int number)\n\n{\n  return number + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "number"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "perform_i2_c_sequential_transfer_08003880",
            "code": "\nvoid performI2CSequentialTransfer_08003880(int deviceAddress,int isReceive,int expectedAddress,undefined4 userCallback)\n\n{\n  int i2cObject;\n  \n  i2cObject = getI2CObject();\n  if (expectedAddress == *(int *)(deviceAddress + 0xc)) {\n    if (isReceive == 0) {\n      *(undefined *)(i2cObject + 0x88) = 0;\n      *(undefined *)(i2cObject + 0x5e) = 0;\n      if (*(code **)(i2cObject + 100) != (code *)0x0) {\n        (**(code **)(i2cObject + 100))();\n      }\n      performSequentialTransmit(deviceAddress,i2cObject + 0x68,*(undefined *)(i2cObject + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2cObject + 0x5e) = 1;\n    performSequentialReceive(deviceAddress,i2cObject + 0x68,0x20,8,userCallback);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "perform_i2_c_sequential_transfer_08003880",
                "param_1": "deviceAddress",
                "param_2": "isReceive",
                "param_3": "expectedAddress",
                "param_4": "userCallback",
                "iVar1": "i2cObject",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "performSequentialTransmit",
                "HAL_I2C_Slave_Sequential_Receive_IT": "performSequentialReceive"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "enable_i2_c_and_start_listening_080038d0",
            "code": "\nvoid enableI2CAndStartListening_080038d0(undefined4 listenParam)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (((*(code **)(i2cObj + 0x60) != (code *)0x0) && (*(char *)(i2cObj + 0x5e) == '\\x01')) &&\n     (*(char *)(i2cObj + 0x2c) != ' ')) {\n    (**(code **)(i2cObj + 0x60))(i2cObj + 0x68);\n  }\n  enableI2CListenInterrupt(listenParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "enable_i2_c_and_start_listening_080038d0",
                "param_1": "listenParam",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_ITError",
                "I2C_Slave_STOPF",
                "I2C_Slave_AF"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "enable_i2_c_listen_interrupt_08003900",
            "code": "\nvoid enableI2CListenInterrupt_08003900(undefined4 i2cObject)\n\n{\n  int i2cObjIndex;\n  \n  i2cObjIndex = get_i2c_obj();\n  if (*(char *)(i2cObjIndex + 0x5f) == '\\0') {\n    HAL_I2C_EnableListen_IT(i2cObject);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "enable_i2_c_listen_interrupt_08003900",
                "param_1": "i2cObject",
                "iVar1": "i2cObjIndex"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pins_08003978",
            "code": "\n\n\nvoid configureUARTPins_08003978(int *pins)\n\n{\n  int pin1_peripheral;\n  int pin2_peripheral;\n  undefined4 gpio_portClock;\n  uint pin_function;\n  uint pin1_mask;\n  uint pin2_info;\n  uint pin2_phase;\n  undefined4 gpio_Init;\n  uint pin2_af;\n  \n  if (pins != (int *)0x0) {\n    pin1_peripheral = pinmap_peripheral((int)*(short *)(pins + 0x16),&DAT_08005ca0);\n    pin2_peripheral = pinmap_peripheral((int)*(short *)((int)pins + 0x5a),&DAT_08005c10);\n    if ((pin2_peripheral == 0) || (pin1_peripheral == 0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\",pin2_peripheral);\n    }\n    else {\n      pin1_peripheral = pinmap_merge_peripheral(pin1_peripheral);\n      *pins = pin1_peripheral;\n      if (pin1_peripheral == 0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (pin1_peripheral == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(pins + 0x11) = 0;\n          *(undefined *)(pins + 0x17) = 0x25;\n        }\n        else if (pin1_peripheral == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(pins + 0x11) = 1;\n          *(undefined *)(pins + 0x17) = 0x26;\n        }\n        else if (pin1_peripheral == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(pins + 0x11) = 2;\n          *(undefined *)(pins + 0x17) = 0x27;\n        }\n        else if (pin1_peripheral == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(pins + 0x11) = 3;\n          *(undefined *)(pins + 0x17) = 0x34;\n        }\n        else if (pin1_peripheral == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(pins + 0x11) = 4;\n          *(undefined *)(pins + 0x17) = 0x35;\n        }\n        else if (pin1_peripheral == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(pins + 0x11) = 5;\n          *(undefined *)(pins + 0x17) = 0x47;\n        }\n        else if (pin1_peripheral == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(pins + 0x11) = 6;\n          *(undefined *)(pins + 0x17) = 0x52;\n        }\n        else if (pin1_peripheral == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(pins + 0x11) = 7;\n          *(undefined *)(pins + 0x17) = 0x53;\n        }\n        gpio_portClock = set_GPIO_Port_Clock((uint)((int)*(short *)((int)pins + 0x5a) << 0x18) >> 0x1c);\n        pin_function = pinmap_function((int)*(short *)((int)pins + 0x5a),&DAT_08005c10);\n        pin1_mask = 1 << (*(ushort *)((int)pins + 0x5a) & 0xf) & 0xffff;\n        pin2_info = (pin_function >> 3 & 1) << 4 | pin_function & 7;\n        pin2_phase = (pin_function << 0x1a) >> 0x1e;\n        pin2_af = (pin_function << 0x11) >> 0x19;\n        gpio_Init = 3;\n        initialize_GPIO(gpio_portClock,&pin1_mask);\n        gpio_portClock = set_GPIO_Port_Clock((uint)((int)*(short *)(pins + 0x16) << 0x18) >> 0x1c);\n        pin_function = pinmap_function((int)*(short *)(pins + 0x16),&DAT_08005ca0);\n        pin1_mask = 1 << (*(ushort *)(pins + 0x16) & 0xf) & 0xffff;\n        pin2_info = (pin_function >> 3 & 1) << 4 | pin_function & 7;\n        pin2_phase = (pin_function << 0x1a) >> 0x1e;\n        initialize_GPIO(gpio_portClock,&pin1_mask);\n        (&DAT_200002b4)[*(byte *)(pins + 0x11)] = pins + 1;\n        pins[1] = *pins;\n        pins[2] = pins[0x12];\n        pins[3] = pins[0x13];\n        pins[4] = pins[0x14];\n        pins[5] = pins[0x15];\n        pins[6] = 0xc;\n        pins[7] = 0;\n        pins[8] = 0;\n        initialize_UART(pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "param_1": "pins",
                "iVar1": "pin1_peripheral",
                "iVar2": "pin2_peripheral",
                "uVar3": "gpio_portClock",
                "uVar4": "pin_function",
                "local_2c": "pin1_mask",
                "local_28": "pin2_info",
                "local_24": "pin2_phase",
                "local_20": "gpio_Init",
                "local_1c": "pin2_af",
                "HAL_GPIO_Init": "initialize_GPIO",
                "HAL_UART_Init": "initialize_UART"
            },
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_peripheral",
                "pinmap_function",
                "HAL_UART_Init",
                "HAL_GPIO_Init",
                "pinmap_merge_peripheral",
                "iprintf",
                "set_GPIO_Port_Clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initialize_uart_08003cc8(void)\n\n{\n  int pin_result;\n  undefined4 pin_result2;\n  \n  pin_result = pinmap_peripheral(0x38,&DAT_08005ca0);\n  if (pin_result != 0) {\n    pin_result2 = pinmap_peripheral(0x38,&DAT_08005ca0);\n    DAT_2000008a = pinmap_pin(pin_result2,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    uart_init(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "pin_result",
                "uVar2": "pin_result2"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "pinmap_peripheral",
                "pinmap_pin",
                "uart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "transmit_data_08003d18",
            "code": "\nuint transmitData_08003d18(undefined4 data,uint length)\n\n{\n  int startTime;\n  int peripheral;\n  uint index;\n  \n  startTime = HAL_GetTick();\n  peripheral = pinmap_peripheral(0x38,&DAT_08005ca0);\n  if (peripheral == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (peripheral = pinmap_peripheral(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != peripheral))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (uart_debug_init(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    peripheral = HAL_UART_Transmit((&DAT_200002b4)[index],data,length & 0xffff,1000);\n    if (peripheral == 0) {\n      return length;\n    }\n    peripheral = HAL_GetTick();\n  } while ((uint)(peripheral - startTime) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "transmit_data_08003d18",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "startTime",
                "iVar2": "peripheral",
                "uVar3": "index"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "pinmap_peripheral",
                "HAL_GetTick",
                "HAL_UART_Transmit",
                "uart_debug_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "is_uart_state_error_08003dd0",
            "code": "\nbool is_uart_state_error_08003dd0(int device_index)\n\n{\n  uint uart_state;\n  \n  uart_state = HAL_UART_GetState((&DAT_200002b4)[*(byte *)(device_index + 0x44)]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "is_uart_state_error_08003dd0",
                "param_1": "device_index",
                "uVar1": "uart_state"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "check_uart_state_08003df4",
            "code": "\nbool check_uart_state_08003df4(int data)\n\n{\n  uint uart_state;\n  \n  uart_state = HAL_UART_GetState((&DAT_200002b4)[*(byte *)(data + 0x44)]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "check_uart_state_08003df4",
                "param_1": "data",
                "uVar1": "uart_state"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "receive_data_08003e18",
            "code": "\nundefined4 receiveData_08003e18(int errorCode,undefined *buffer,undefined4 param3,undefined4 param4)\n\n{\n  int isRxActive;\n  \n  if (errorCode == 0) {\n    return 0xffffffff;\n  }\n  isRxActive = serial_rx_active();\n  if (isRxActive == 0) {\n    *buffer = *(undefined *)(errorCode + 0x45);\n    HAL_UART_Receive_IT((&DAT_200002b4)[*(byte *)(errorCode + 0x44)],errorCode + 0x45,1,&DAT_200002b4,\n                        param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "receive_data_08003e18",
                "param_1": "errorCode",
                "param_2": "buffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "isRxActive"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "configure_serial_port_08003e54",
            "code": "\nvoid configureSerialPort_08003e54(int serialPortAddress,undefined4 baudRate,undefined4 dataBits,undefined4 stopBits)\n\n{\n  int serialRxActive;\n  uint serialPortIndex;\n  \n  if (serialPortAddress != 0) {\n    serialRxActive = serial_rx_active();\n    if (serialRxActive == 0) {\n      serialPortIndex = (uint)*(byte *)(serialPortAddress + 0x44);\n      *(undefined4 *)(&DAT_20000214 + serialPortIndex * 4) = baudRate;\n      *(int *)(&DAT_2000023c + serialPortIndex * 4) = serialPortAddress;\n      HAL_NVIC_SetPriority((int)*(char *)(serialPortAddress + 0x5c),0,1,serialPortIndex,stopBits);\n      HAL_NVIC_EnableIRQ((int)*(char *)(serialPortAddress + 0x5c));\n      HAL_UART_Receive_IT((&DAT_200002b4)[*(byte *)(serialPortAddress + 0x44)],serialPortAddress + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "configure_serial_port_08003e54",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "dataBits",
                "param_4": "stopBits",
                "iVar1": "serialRxActive",
                "uVar2": "serialPortIndex"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "initialize_peripheral_08003eac",
            "code": "\nvoid initializePeripheral_08003eac(int peripheralAddress,undefined4 priority)\n\n{\n  byte peripheralIndex;\n  \n  if (peripheralAddress != 0) {\n    peripheralIndex = *(byte *)(peripheralAddress + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)peripheralIndex * 4) = priority;\n    *(int *)(&DAT_2000028c + (uint)peripheralIndex * 4) = peripheralAddress;\n    HAL_NVIC_SetPriority((int)*(char *)(peripheralAddress + 0x5c),0,2);\n    HAL_NVIC_EnableIRQ((int)*(char *)(peripheralAddress + 0x5c));\n    HAL_UART_Transmit_IT\n              ((&DAT_200002b4)[*(byte *)(peripheralAddress + 0x44)],\n               *(int *)(peripheralAddress + 0x68) + (uint)*(ushort *)(peripheralAddress + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "initialize_peripheral_08003eac",
                "param_1": "peripheralAddress",
                "param_2": "priority",
                "bVar1": "peripheralIndex"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_number_index_08003f00",
            "code": "\nuint findNumberIndex_08003f00(int number)\n\n{\n  uint index;\n  \n  if (number == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (number == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_number_index_08003f00",
                "param_1": "number",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_uart_function_08003f24",
            "code": "\nvoid execute_uart_function_08003f24(void)\n\n{\n  uint uart_index;\n  \n  uart_index = uart_index();\n  if (uart_index < 10) {\n    (**(code **)(&DAT_20000214 + uart_index * 4))(*(undefined4 *)(&DAT_2000023c + uart_index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_uart_function_08003f24",
                "uVar1": "uart_index"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "transmit_uart_data_08003f48",
            "code": "\nvoid transmitUARTData_08003f48(void)\n\n{\n  uint uartIndex;\n  int functionResult;\n  int uartPtr;\n  \n  uartIndex = uart_index();\n  uartPtr = *(int *)(&DAT_2000028c + uartIndex * 4);\n  if ((uartIndex < 10) && (functionResult = (**(code **)(&DAT_20000264 + uartIndex * 4))(uartPtr), functionResult != -1)) {\n    transmitDataInterrupt\n              ((&DAT_200002b4)[*(byte *)(uartPtr + 0x44)],\n               *(int *)(uartPtr + 0x68) + (uint)*(ushort *)(uartPtr + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "transmit_uart_data_08003f48",
                "uVar1": "uartIndex",
                "iVar2": "functionResult",
                "iVar3": "uartPtr",
                "HAL_UART_Transmit_IT": "transmitDataInterrupt"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocate_memory_08004094(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocated_memory = DAT_200002dc;\n  if (DAT_200002dc + size <= &stack0x00000000) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocated_memory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocated_memory"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_default_value_080040d0",
            "code": "\nundefined4 get_default_value_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_default_value_080040d0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "initialize_memory_block_080040d6",
            "code": "\nundefined4 initializeMemoryBlock_080040d6(undefined4 memoryBlock,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "initialize_memory_block_080040d6",
                "param_1": "memoryBlock",
                "param_2": "address"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "check_return_value_080040e0",
            "code": "\nint check_return_value_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "check_return_value_080040e0",
                "undefined4": "int"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_application_080040e4",
            "code": "\nvoid initializeApplication_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_application_080040e4",
                "undefined4": "void"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_program_080040e8",
            "code": "\nundefined4 initializeProgram_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_program_080040e8"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "uart_debug_write_wrapper_080040ec",
            "code": "\nvoid uart_debug_write_wrapper_080040ec(undefined4 function_param_1,undefined4 uart_param_1,undefined4 uart_param_2,undefined4 uart_param_3)\n\n{\n  uart_debug_write(uart_param_1,uart_param_2,uart_param_2,uart_param_3,uart_param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "uart_debug_write_wrapper_080040ec",
                "param_1": "function_param_1",
                "param_2": "uart_param_1",
                "param_3": "uart_param_2",
                "param_4": "uart_param_3"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infiniteLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "_exit",
                "abort"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "set_initial_value_080040fc",
            "code": "\nundefined4 set_initial_value_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "set_initial_value_080040fc"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "initialize_application_0800410c",
            "code": "\nundefined4 initializeApplication_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "initialize_application_0800410c"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "initialize_pin_and_check_config_08004110",
            "code": "\nvoid initializePinAndCheckConfig_08004110(uint pinIndex,undefined4 configMode,undefined4 someParameter,undefined *configData)\n\n{\n  int result;\n  undefined *pinConfigData;\n  int pinConfigIndex;\n  \n  if (pinIndex < 0x60) {\n    pinConfigIndex = (int)*(short *)(&DAT_08005d3c + pinIndex * 2);\n    pinConfigData = &DAT_08005d3c;\n  }\n  else {\n    pinConfigIndex = -1;\n    pinConfigData = configData;\n  }\n  if (pinConfigIndex != -1) {\n    result = is_pin_configured(pinConfigIndex,&DAT_200002e0,someParameter,pinConfigData,configData);\n    if (result != 0) {\n      result = pin_in_pinmap(pinConfigIndex,&DAT_08005a18);\n      if (result == 0) {\n        result = pin_in_pinmap(pinConfigIndex,&DAT_08005a3c);\n        if (result != 0) {\n          pwm_stop(pinConfigIndex);\n        }\n      }\n      else {\n        dac_stop(pinConfigIndex);\n      }\n      reset_pin_configured(pinConfigIndex,&DAT_200002e0);\n    }\n    switch(configMode) {\n    case 0:\n      digital_io_init(pinConfigIndex,0);\n      break;\n    case 1:\n      digital_io_init(pinConfigIndex,1,0);\n      break;\n    case 2:\n      digital_io_init(pinConfigIndex,0,1);\n      break;\n    case 3:\n      digital_io_init(pinConfigIndex,0,2);\n    }\n    set_pin_configured(pinConfigIndex,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "initialize_pin_and_check_config_08004110",
                "param_1": "pinIndex",
                "param_2": "configMode",
                "param_3": "someParameter",
                "param_4": "configData",
                "iVar1": "result",
                "puVar2": "pinConfigData",
                "iVar3": "pinConfigIndex"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "dac_stop",
                "reset_pin_configured",
                "pwm_stop",
                "digital_io_init",
                "set_pin_configured",
                "is_pin_configured",
                "pin_in_pinmap"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "write_pin_data_080041bc",
            "code": "\nvoid writePinData_080041bc(uint pinIndex,undefined4 outputValue,undefined4 configValue,undefined *pinData)\n\n{\n  int pinConfigured;\n  undefined4 gpioPort;\n  undefined *pinConfigPtr;\n  uint pinConfig;\n  \n  if (pinIndex < 0x60) {\n    pinConfig = (uint)*(short *)(&DAT_08005d3c + pinIndex * 2);\n    pinConfigPtr = &DAT_08005d3c;\n  }\n  else {\n    pinConfig = 0xffffffff;\n    pinConfigPtr = pinData;\n  }\n  if ((pinConfig != 0xffffffff) &&\n     (pinConfigured = isPinConfigured(pinConfig,&DAT_2000030c,configValue,pinConfigPtr,pinData), pinConfigured != 0)) {\n    gpioPort = getGPIOPort((pinConfig << 0x18) >> 0x1c);\n    writeDigitalIO(gpioPort,1 << (pinConfig & 0xf) & 0xffff,outputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "write_pin_data_080041bc",
                "param_1": "pinIndex",
                "param_2": "outputValue",
                "param_3": "configValue",
                "param_4": "pinData",
                "iVar1": "pinConfigured",
                "uVar2": "gpioPort",
                "puVar3": "pinConfigPtr",
                "uVar4": "pinConfig",
                "is_pin_configured": "isPinConfigured",
                "get_GPIO_Port": "getGPIOPort",
                "digital_io_write": "writeDigitalIO"
            },
            "calling": [
                "FUN_08000600",
                "getRxBuffer",
                "sendTxBuffer"
            ],
            "called": [
                "digital_io_write",
                "is_pin_configured",
                "get_GPIO_Port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "get_current_milliseconds_08004204",
            "code": "\nvoid get_current_milliseconds_08004204(void)\n\n{\n  GetCurrentMilli();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "get_current_milliseconds_08004204"
            },
            "calling": [
                "poll",
                "sendTxBuffer"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_ushort_offset_08004240",
            "code": "\nushort calculate_ushort_offset_08004240(int base_address)\n\n{\n  return (*(short *)(base_address + 0x138) + 0x40) - *(short *)(base_address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_ushort_offset_08004240",
                "param_1": "base_address"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "process_uart_input_080042ac",
            "code": "\nvoid processUARTInput_080042ac(int uartHandle)\n\n{\n  int inputStatus;\n  ushort newIndex;\n  undefined receivedChar;\n  \n  inputStatus = uart_getc(uartHandle,&receivedChar);\n  if ((inputStatus == 0) &&\n     (newIndex = *(short *)(uartHandle + 100) + 1U & 0x3f, newIndex != *(ushort *)(uartHandle + 0x66))) {\n    *(undefined *)(*(int *)(uartHandle + 0x60) + (uint)*(ushort *)(uartHandle + 100)) = receivedChar;\n    *(ushort *)(uartHandle + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "process_uart_input_080042ac",
                "param_1": "uartHandle",
                "iVar1": "inputStatus",
                "uVar2": "newIndex",
                "local_9": "receivedChar"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "set_and_transmit_data_080042e8",
            "code": "\nundefined4 setAndTransmitData_080042e8(int dataPointer,undefined dataValue)\n\n{\n  byte currentValue;\n  byte modifiedValue;\n  int offset;\n  \n  *(undefined *)(dataPointer + 0x10) = 1;\n  offset = *(ushort *)(dataPointer + 0x140) + 1;\n  currentValue = (byte)offset;\n  modifiedValue = currentValue & 0x7f;\n  if (offset == 0) {\n    modifiedValue = -(-currentValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(dataPointer + 0x142) == (ushort)modifiedValue);\n  *(undefined *)(*(int *)(dataPointer + 0x13c) + (uint)*(ushort *)(dataPointer + 0x140)) = dataValue;\n  *(ushort *)(dataPointer + 0x140) = (ushort)modifiedValue;\n  offset = serial_tx_active(dataPointer + 0xd4);\n  if (offset == 0) {\n    uart_attach_tx_callback(dataPointer + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "set_and_transmit_data_080042e8",
                "param_1": "dataPointer",
                "param_2": "dataValue",
                "bVar1": "currentValue",
                "bVar2": "modifiedValue",
                "iVar3": "offset"
            },
            "calling": [],
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_data_08004364",
            "code": "\nvoid initializeData_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_data_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_serial_08004388",
            "code": "\nvoid initializeSerial_08004388(int serialPort,undefined4 baudRate,byte serialFlags)\n\n{\n  uint errorCode;\n  byte maskedFlags;\n  int numComPorts;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x144) = serialFlags;\n  maskedFlags = serialFlags & 7;\n  if (maskedFlags == 4) {\n    numComPorts = 7;\n  }\n  else if (maskedFlags == 6) {\n    numComPorts = 8;\n  }\n  else if (maskedFlags == 2) {\n    numComPorts = 6;\n  }\n  else {\n    numComPorts = 0;\n  }\n  if ((serialFlags & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    numComPorts = numComPorts + 1;\n  }\n  else if ((serialFlags & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    numComPorts = numComPorts + 1;\n  }\n  if ((serialFlags & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (numComPorts == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (numComPorts == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    numComPorts = 0;\n  }\n  if (numComPorts != 0) {\n    uart_init(serialPort + 0xd4);\n    uart_attach_rx_callback(serialPort + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTable = (code *)0x8004432;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (errorCode < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + errorCode * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_serial_08004388",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "serialFlags",
                "extraout_r1": "errorCode",
                "bVar1": "maskedFlags",
                "iVar2": "numComPorts",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "uart_attach_rx_callback",
                "uart_init",
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "initialize_data_08004444",
            "code": "\nvoid initializeData_08004444(int baseAddress,uint offset)\n\n{\n  undefined2 value;\n  code *jumpTable;\n  \n  if (offset < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + offset * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(baseAddress + 0x12e) = value;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "initialize_data_08004444",
                "param_1": "baseAddress",
                "param_2": "offset",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_param_value_08004460",
            "code": "\nvoid setParamValue_08004460(int baseAddress,uint offset)\n\n{\n  undefined2 value;\n  \n  if (offset < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + offset * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(baseAddress + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_param_value_08004460",
                "param_1": "baseAddress",
                "param_2": "offset",
                "uVar1": "value"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_device_0800447c",
            "code": "\nundefined4 *\ninitializeDevice_0800447c(undefined4 *deviceConfig,undefined4 pinNumber,undefined4 rxConfig,undefined4 txConfig)\n\n{\n  undefined2 pinMappingResult;\n  \n  deviceConfig[1] = 0;\n  deviceConfig[2] = 1000;\n  *deviceConfig = &PTR_set_and_transmit_data_080042e8_1_08005ed4;\n  if (deviceConfig == &DAT_20000338) {\n    setRx(&DAT_20000338,0x4c,rxConfig,&DAT_20000338,txConfig);\n    setTx(&DAT_20000338,0x4d);\n  }\n  else {\n    pinMappingResult = pinmap_pin(pinNumber,&DAT_08005c10);\n    *(undefined2 *)((int)deviceConfig + 0x12e) = pinMappingResult;\n    pinMappingResult = pinmap_pin(pinNumber,&DAT_08005ca0);\n    *(undefined2 *)(deviceConfig + 0x4b) = pinMappingResult;\n  }\n  init(deviceConfig);\n  return deviceConfig;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_device_0800447c",
                "param_1": "deviceConfig",
                "param_2": "pinNumber",
                "param_3": "rxConfig",
                "param_4": "txConfig",
                "uVar1": "pinMappingResult"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "setRx",
                "init",
                "pinmap_pin",
                "setTx"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_hardware_serial_080044d8",
            "code": "\nvoid initializeHardwareSerial_080044d8(int flag,int value,undefined4 parameter1,undefined4 parameter2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    createSerialConnection(&DAT_20000338,0x40004800,parameter1,0xffff,parameter2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_hardware_serial_080044d8",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "parameter1",
                "param_4": "parameter2",
                "HardwareSerial": "createSerialConnection"
            },
            "calling": [],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_function_08004544",
            "code": "\nvoid initializeFunction_08004544(undefined4 *outputPointer,undefined inputParam1,undefined inputParam2,undefined inputParam3,\n                 undefined inputParam4)\n\n{\n  *outputPointer = &DAT_08005f28;\n  *(undefined *)(outputPointer + 1) = inputParam1;\n  *(undefined *)((int)outputPointer + 5) = inputParam2;\n  *(undefined *)((int)outputPointer + 6) = inputParam3;\n  *(undefined *)((int)outputPointer + 7) = inputParam4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_function_08004544",
                "param_1": "outputPointer",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "param_5": "inputParam4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_ip_address_08004560",
            "code": "\nvoid initializeIPAddress_08004560(int flag,int value)\n\n{\n  if ((flag == 1) && (value == 0xffff)) {\n    IPAddress(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_ip_address_08004560",
                "param_1": "flag",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "IPAddress"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_values_08004640",
            "code": "\nuint combineValues_08004640(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "process_FC3",
                "process_FC15",
                "validateRequest",
                "process_FC6",
                "process_FC5",
                "process_FC16",
                "process_FC1"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_hardware_08004648",
            "code": "\nvoid initialize_hardware_08004648(void)\n\n{\n  set_priority_grouping(3);\n  initialize_hardware_08004648_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_hardware_08004648",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "initialize_hardware_configuration_08000d8e": "initialize_hardware_configuration"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "FUN_08000d8e",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "initialize_and_run_08004658",
            "code": "\nvoid initializeAndRun_08004658(void)\n\n{\n  initializeVariant();\n  performSetup();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "initialize_and_run_08004658",
                "initVariant": "initializeVariant",
                "setup": "performSetup",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "setup",
                "serialEventRun",
                "initVariant",
                "loop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint input)\n\n{\n  char count;\n  \n  count = '\\0';\n  for (; input != 1; input = input >> 1) {\n    count = count + '\\x01';\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "input",
                "cVar1": "count"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_settings_080046b4",
            "code": "\nvoid initializeSettings_080046b4(int flag,int value,undefined4 ptr1,undefined4 ptr2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    __aeabi_atexit(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,ptr2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_settings_080046b4",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "ptr1",
                "param_4": "ptr2"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "handle_function_call_080047c0",
            "code": "\nvoid handleFunctionCall_080047c0(int functionPtr)\n\n{\n  int pinId;\n  \n  if (*(int *)(functionPtr + 8) != 0) {\n    (**(code **)(functionPtr + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  pinId = get_pin_id();\n  if ((&DAT_20000494)[pinId * 5] != 0) {\n    handleFunctionCall_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "handle_function_call_080047c0",
                "param_1": "functionPtr",
                "iVar1": "pinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_execute_operator_080047d0",
            "code": "\nvoid checkAndExecuteOperator_080047d0(void)\n\n{\n  int pinId;\n  \n  pinId = getPinId();\n  if ((&DAT_20000494)[pinId * 5] != 0) {\n    operator()();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_execute_operator_080047d0",
                "iVar1": "pinId",
                "get_pin_id": "getPinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "register_exit_handler_080047fe",
            "code": "\nvoid registerExitHandler_080047fe(undefined4 exitHandlerFunction,undefined4 exitHandlerPtr)\n\n{\n  __cxa_atexit(exitHandlerPtr,exitHandlerFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "register_exit_handler_080047fe",
                "param_1": "exitHandlerFunction",
                "param_2": "exitHandlerPtr"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "log_assertion_failure_08004808",
            "code": "\nvoid logAssertionFailure_08004808(undefined4 fileName,undefined4 lineNumber,char *condition,undefined4 functionName)\n\n{\n  undefined4 file;\n  char *message;\n  undefined8 result;\n  undefined4 extraInfo;\n  \n  file = *(undefined4 *)(DAT_200000a0 + 0xc);\n  extraInfo = functionName;\n  if (condition == (char *)0x0) goto LAB_0800482c;\n  message = \", function: \";\n  do {\n    fiprintf(file,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,fileName,lineNumber,\n             message,condition,extraInfo);\n    result = abort();\n    lineNumber = (undefined4)((ulonglong)result >> 0x20);\n    file = (undefined4)result;\nLAB_0800482c:\n    condition = \"\";\n    message = condition;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "log_assertion_failure_08004808",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "condition",
                "param_4": "functionName",
                "uVar1": "file",
                "uVar3": "result",
                "uVar4": "extraInfo",
                "pcVar2": "message"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "fiprintf",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_parameter_to_long_long_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shiftParameterToLongLong_08004844(undefined4 param1,uint param2)\n\n{\n  return (ulonglong)param2 << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_parameter_to_long_long_08004844",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "print_formatted_argument_08004860",
            "code": "\nvoid print_formatted_argument_08004860(undefined4 format_string,undefined4 argument_1,undefined4 argument_2,undefined4 argument_3)\n\n{\n  undefined4 formatted_argument;\n  undefined4 argument_placeholder;\n  \n  formatted_argument = argument_2;\n  argument_placeholder = argument_3;\n  _vfiprintf_r(DAT_200000a0,format_string,argument_1,&formatted_argument,format_string,&formatted_argument);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "print_formatted_argument_08004860",
                "param_1": "format_string",
                "param_2": "argument_1",
                "param_3": "argument_2",
                "param_4": "argument_3",
                "uStack_8": "formatted_argument",
                "uStack_4": "argument_placeholder"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  _init();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(code *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "premain",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_with_080048cc",
            "code": "\nvoid fillMemoryWith_080048cc(undefined *memory,undefined value,int length)\n\n{\n  undefined *endMemory;\n  \n  endMemory = memory + length;\n  for (; memory != endMemory; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_with_080048cc",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endMemory"
            },
            "calling": [
                "__sfp",
                "__sfmoreglue",
                "std.isra.0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_linked_list_080048dc",
            "code": "\nvoid updateLinkedList_080048dc(undefined4 *lockStatus,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int *tmp1;\n  int **tmp2;\n  int **tmp3;\n  int **tmp4;\n  int **tmp5;\n  int **tmp6;\n  bool isConditionMet;\n  \n  if (size == 0) {\n    return;\n  }\n  tmp6 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    tmp6 = (int **)((int)tmp6 + *(int *)(size + -4));\n  }\n  acquireLock();\n  tmp4 = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    tmp6[1] = (int *)0x0;\n    tmp3 = tmp2;\n    DAT_200005c8 = tmp6;\n  }\n  else {\n    tmp4 = DAT_200005c8;\n    if (tmp6 < DAT_200005c8) {\n      tmp3 = (int **)*tmp6;\n      tmp4 = (int **)((int)tmp6 + (int)tmp3);\n      isConditionMet = DAT_200005c8 == tmp4;\n      if (isConditionMet) {\n        tmp4 = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      tmp6[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = tmp6;\n      if (isConditionMet) {\n        tmp4 = (int **)((int)tmp4 + (int)tmp3);\n        *tmp6 = (int *)tmp4;\n      }\n    }\n    else {\n      do {\n        tmp5 = tmp4;\n        tmp4 = (int **)tmp5[1];\n        if (tmp4 == (int **)0x0) break;\n      } while (tmp4 <= tmp6);\n      tmp3 = (int **)*tmp5;\n      if ((int **)((int)tmp5 + (int)tmp3) == tmp6) {\n        tmp3 = (int **)((int)tmp3 + (int)*tmp6);\n        *tmp5 = (int *)tmp3;\n        if (tmp4 == (int **)((int)tmp5 + (int)tmp3)) {\n          tmp1 = *tmp4;\n          tmp4 = (int **)tmp4[1];\n          tmp5[1] = (int *)tmp4;\n          tmp3 = (int **)((int)tmp3 + (int)tmp1);\n          *tmp5 = (int *)tmp3;\n        }\n      }\n      else if (tmp6 < (int **)((int)tmp5 + (int)tmp3)) {\n        *lockStatus = 0xc;\n      }\n      else {\n        tmp3 = (int **)((int)tmp6 + (int)*tmp6);\n        isConditionMet = tmp4 == tmp3;\n        if (isConditionMet) {\n          tmp3 = (int **)*tmp4;\n          tmp4 = (int **)tmp4[1];\n        }\n        tmp6[1] = (int *)tmp4;\n        if (isConditionMet) {\n          tmp3 = (int **)((int)tmp3 + (int)*tmp6);\n          *tmp6 = (int *)tmp3;\n        }\n        tmp5[1] = (int *)tmp6;\n      }\n    }\n  }\n  releaseLock(lockStatus,tmp3,tmp4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_linked_list_080048dc",
                "param_1": "lockStatus",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar1": "tmp1",
                "extraout_r1": "tmp2",
                "ppiVar2": "tmp3",
                "ppiVar3": "tmp4",
                "ppiVar4": "tmp5",
                "ppiVar5": "tmp6",
                "bVar6": "isConditionMet",
                "__malloc_lock": "acquireLock",
                "__malloc_unlock": "releaseLock"
            },
            "calling": [
                "__swsetup_r",
                "abort"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_08004978",
            "code": "\nuint allocate_memory_08004978(undefined4 *ptr_size,uint size)\n\n{\n  uint *previous_block;\n  int remaining_size;\n  uint *current_block;\n  uint size_difference;\n  uint *previous_allocated_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *ptr_size = 0xc;\n  }\n  else {\n    __malloc_lock();\n    previous_block = DAT_200005c8;\n    previous_allocated_block = DAT_200005c8;\n    while (current_block = previous_block, current_block != (uint *)0x0) {\n      size_difference = *current_block - allocated_size;\n      if (-1 < (int)size_difference) {\n        if (size_difference < 0xc) {\n          if (previous_allocated_block == current_block) {\n            previous_block = (uint *)previous_allocated_block[1];\n          }\n          else {\n            previous_block = (uint *)current_block[1];\n          }\n          if (previous_allocated_block != current_block) {\n            previous_allocated_block[1] = (uint)previous_block;\n            previous_allocated_block = current_block;\n            previous_block = DAT_200005c8;\n          }\n        }\n        else {\n          *current_block = size_difference;\n          *(uint *)((int)current_block + size_difference) = allocated_size;\n          previous_allocated_block = (uint *)((int)current_block + size_difference);\n          previous_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      previous_allocated_block = current_block;\n      previous_block = (uint *)current_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = _sbrk_r(ptr_size);\n    }\n    previous_block = (uint *)_sbrk_r(ptr_size,allocated_size);\n    if ((previous_block != (uint *)0xffffffff) &&\n       ((previous_allocated_block = (uint *)((int)previous_block + 3U & 0xfffffffc), previous_block == previous_allocated_block ||\n        (remaining_size = _sbrk_r(ptr_size,(int)previous_allocated_block - (int)previous_block), remaining_size != -1)))) {\n      *previous_allocated_block = allocated_size;\n      previous_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = previous_block;\n      __malloc_unlock(ptr_size);\n      allocated_size = (int)previous_allocated_block + 0xbU & 0xfffffff8;\n      remaining_size = allocated_size - (int)(previous_allocated_block + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)previous_allocated_block + remaining_size) = -remaining_size;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *ptr_size = 0xc;\n    __malloc_unlock(ptr_size);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_08004978",
                "param_1": "ptr_size",
                "param_2": "size",
                "puVar1": "previous_block",
                "iVar2": "remaining_size",
                "puVar3": "current_block",
                "uVar4": "size_difference",
                "puVar5": "previous_allocated_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_byte_08004a34",
            "code": "\nuint processByte_08004a34(int input1,byte byteValue,byte **bytePtrPtr)\n\n{\n  int tempVar;\n  byte *tempVar2;\n  byte *tempVar3;\n  uint returnValue;\n  \n  tempVar2 = bytePtrPtr[2] + -1;\n  bytePtrPtr[2] = tempVar2;\n  if ((-1 < (int)tempVar2) ||\n     (((int)bytePtrPtr[6] <= (int)tempVar2 && (tempVar2 = (byte *)(uint)byteValue, tempVar2 != (byte *)0xa))))\n  {\n    tempVar2 = *bytePtrPtr;\n    *bytePtrPtr = tempVar2 + 1;\n    *tempVar2 = byteValue;\n    return (uint)byteValue;\n  }\n  if ((input1 != 0) && (*(int *)(input1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (bytePtrPtr == (byte **)&DAT_08005fc0) {\n    bytePtrPtr = *(byte ***)(input1 + 4);\n  }\n  else if (bytePtrPtr == (byte **)&DAT_08005fe0) {\n    bytePtrPtr = *(byte ***)(input1 + 8);\n  }\n  else if (bytePtrPtr == (byte **)&DAT_08005fa0) {\n    bytePtrPtr = *(byte ***)(input1 + 0xc);\n  }\n  bytePtrPtr[2] = bytePtrPtr[6];\n  tempVar3 = (byte *)(uint)*(ushort *)(bytePtrPtr + 3);\n  tempVar = (int)tempVar3 << 0x1c;\n  if (((tempVar < 0) && (tempVar3 = bytePtrPtr[4], tempVar3 != (byte *)0x0)) ||\n     (tempVar = __swsetup_r(input1,bytePtrPtr,tempVar,tempVar3,tempVar2), tempVar == 0)) {\n    tempVar = (int)*bytePtrPtr - (int)bytePtrPtr[4];\n    returnValue = (uint)byteValue;\n    if ((tempVar < (int)bytePtrPtr[5]) || (tempVar = _fflush_r(input1,bytePtrPtr), tempVar == 0)) {\n      bytePtrPtr[2] = bytePtrPtr[2] + -1;\n      tempVar2 = *bytePtrPtr;\n      *bytePtrPtr = tempVar2 + 1;\n      *tempVar2 = byteValue;\n      if ((byte *)(tempVar + 1) != bytePtrPtr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(bytePtrPtr + 3) << 0x1f)) {\n          return returnValue;\n        }\n        if (returnValue != 10) {\n          return returnValue;\n        }\n      }\n      tempVar = _fflush_r(input1,bytePtrPtr);\n      if (tempVar == 0) {\n        return returnValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_byte_08004a34",
                "param_1": "input1",
                "param_2": "byteValue",
                "param_3": "bytePtrPtr",
                "iVar1": "tempVar",
                "pbVar2": "tempVar2",
                "pbVar3": "tempVar3",
                "uVar4": "returnValue"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "write_to_stream_08004a60",
            "code": "\nint write_to_stream_08004a60(undefined4 stream,undefined4 param,undefined *buffer,int length)\n\n{\n  int result;\n  undefined *buffer_end;\n  int current_length;\n  \n  buffer_end = buffer + length;\n  current_length = length;\n  do {\n    if (buffer == buffer_end) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*buffer,param,length,current_length);\n    length = result + 1;\n    buffer = buffer + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "write_to_stream_08004a60",
                "param_1": "stream",
                "param_2": "param",
                "param_3": "buffer",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "buffer_end",
                "iVar3": "current_length"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "print_formatted_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint printFormatted_08004a84(int stream,undefined4 *format,byte *str,int *args)\n\n{\n  int result;\n  int *argPtr;\n  bool isDigit;\n  byte *strPtr;\n  byte *currCharPtr;\n  int minFieldWidth;\n  int tempVar;\n  int *argListPtr;\n  uint flags;\n  int precision;\n  undefined4 argListIndex;\n  int fieldWidth;\n  int totalWritten;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined zeroFlag;\n  undefined4 lengthModifier;\n  \n  argListPtr = args;\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format == &DAT_08005fc0) {\n    format = *(undefined4 **)(stream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_08005fe0) {\n    format = *(undefined4 **)(stream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_08005fa0) {\n    format = *(undefined4 **)(stream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (tempVar = __swsetup_r(stream,format), tempVar != 0)) {\n    return -1;\n  }\n  totalWritten = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  strPtr = str;\nLAB_08004ac6:\n  currCharPtr = strPtr;\n  if (*currCharPtr != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  strPtr = currCharPtr + 1;\n  if (*currCharPtr != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  tempVar = (int)currCharPtr - (int)str;\n  if (tempVar != 0) {\n    result = __sfputs_r(stream,format,str,tempVar);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalWritten;\n    }\n    totalWritten = totalWritten + tempVar;\n  }\n  if (*currCharPtr == 0) goto LAB_08004c70;\n  flags = 0;\n  fieldWidth = 0;\n  precision = -1;\n  argListIndex = 0;\n  zeroFlag = 0;\n  lengthModifier = 0;\n  strPtr = currCharPtr + 1;\n  while( true ) {\n    tempVar = memchr(\"#-0+ \",*strPtr);\n    str = strPtr + 1;\n    if (tempVar == 0) break;\n    flags = 1 << (tempVar + 0xf7ffa094U & 0xff) | flags;\n    strPtr = str;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    zeroFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    zeroFlag = 0x2b;\n  }\n  if (*strPtr == 0x2a) {\n    argPtr = argListPtr + 1;\n    tempVar = *argListPtr;\n    argListPtr = argPtr;\n    if (tempVar < 0) {\n      fieldWidth = -tempVar;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    isDigit = false;\n    tempVar = fieldWidth;\n    str = strPtr;\n    while( true ) {\n      if (9 < *str - 0x30) break;\n      tempVar = tempVar * 10 + (*str - 0x30);\n      isDigit = true;\n      str = str + 1;\n    }\n    if (!isDigit) goto LAB_08004bae;\n  }\n  fieldWidth = tempVar;\nLAB_08004bae:\n  if (*str == 0x2e) {\n    if (str[1] == 0x2a) {\n      precision = *argListPtr;\n      if (precision < 0) {\n        precision = -1;\n      }\n      str = str + 2;\n      argListPtr = argListPtr + 1;\n    }\n    else {\n      isDigit = false;\n      precision = 0;\n      tempVar = 0;\n      while( true ) {\n        str = str + 1;\n        if (9 < *str - 0x30) break;\n        tempVar = tempVar * 10 + (*str - 0x30);\n        isDigit = true;\n      }\n      if (isDigit) {\n        precision = tempVar;\n      }\n    }\n  }\n  tempVar = memchr(&DAT_08005f72,*str,3);\n  if (tempVar != 0) {\n    flags = flags | 0x40 << (tempVar + 0xf7ffa08eU & 0xff);\n    str = str + 1;\n  }\n  conversionSpecifier = *str;\n  str = str + 1;\n  tempVar = memchr(\"efgEFG\",conversionSpecifier,6);\n  if (tempVar == 0) {\n    minFieldWidth = _printf_i(stream,&flags,format,0x8004a61,&argListPtr);\n    if (minFieldWidth == -1) goto LAB_08004c70;\n  }\n  else {\n    argListPtr = (int *)(((int)argListPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalWritten = totalWritten + minFieldWidth;\n  strPtr = str;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "print_formatted_08004a84",
                "param_1": "stream",
                "param_2": "format",
                "param_3": "str",
                "param_4": "args",
                "iVar1": "result",
                "piVar2": "argPtr",
                "bVar3": "isDigit",
                "pbVar4": "strPtr",
                "pbVar5": "currCharPtr",
                "unaff_r9": "minFieldWidth",
                "iVar6": "tempVar",
                "local_8c": "argListPtr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "argListIndex",
                "local_7c": "fieldWidth",
                "local_74": "totalWritten",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "zeroFlag",
                "local_30": "lengthModifier"
            },
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "called": [
                "memchr",
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "__sfputs_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocessData_08004cb0(undefined4 inputValue,uint *data,uint *outputSize,undefined4 extraParam,code *callback)\n\n{\n  int loopVariable1;\n  int loopVariable2;\n  uint maxSize;\n  uint counter;\n  bool isFlagSet;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (loopVariable1 = 0; loopVariable1 < (int)(data[3] - *outputSize); loopVariable1 = loopVariable1 + 1) {\n      loopVariable2 = (*callback)(inputValue,extraParam,(int)data + 0x19,1);\n      if (loopVariable2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n    maxSize = maxSize + 2;\n  }\n  loopVariable1 = (*callback)(inputValue,extraParam,(int)data + 0x43,maxSize);\n  if (loopVariable1 != -1) {\n    maxSize = data[3];\n    isFlagSet = (*data & 6) == 4;\n    if (isFlagSet) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (isFlagSet) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (maxSize == counter) {\n        return 0;\n      }\n      loopVariable1 = (*callback)(inputValue,extraParam,(int)data + 0x1a,1);\n      if (loopVariable1 == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "inputValue",
                "param_2": "data",
                "param_3": "outputSize",
                "param_4": "extraParam",
                "param_5": "callback",
                "iVar1": "loopVariable1",
                "iVar2": "loopVariable2",
                "uVar3": "maxSize",
                "uVar4": "counter",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "print_formatted_data_08004d9c",
            "code": "\nuint printFormattedData_08004d9c(undefined4 formatSpecifier,uint *data,undefined4 bufferSize,code *outputFunction,uint **outputArguments)\n\n{\n  byte byteValue;\n  int index;\n  uint *pointer;\n  int loopIndex;\n  char *characterPointer;\n  uint value;\n  uint **pointerPointer;\n  char **characterPointerPointer;\n  uint result;\n  uint tempValue;\n  char *tempCharacterPointer;\n  char *characterPointer2;\n  uint sizeArray [2];\n  \n  byteValue = *(byte *)(data + 6);\n  characterPointer2 = (char *)((int)data + 0x43);\n  if (byteValue != 0x6e) {\n    if (byteValue < 0x6f) {\n      if (byteValue != 99) {\n        if (byteValue < 100) {\n          if (byteValue == 0) goto LAB_08004f56;\n          if (byteValue != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          characterPointer = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          value = *data;\n          pointer = *outputArguments;\n          *outputArguments = pointer + 1;\n          if (((value & 0x80) == 0) && ((int)(value << 0x19) < 0)) {\n            result = (uint)*(ushort *)pointer;\n          }\n          else {\n            result = *pointer;\n          }\n          if ((int)(value << 0x1f) < 0) {\n            *data = value | 0x20;\n          }\n          if (result == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          value = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byteValue != 100) && (byteValue != 0x69)) goto LAB_08004dcc;\n          result = *data;\n          pointer = *outputArguments;\n          if ((result & 0x80) == 0) {\n            *outputArguments = pointer + 1;\n            if ((result & 0x40) == 0) goto LAB_08004dec;\n            result = (uint)(short)*(ushort *)pointer;\n          }\n          else {\n            *outputArguments = pointer + 1;\nLAB_08004dec:\n            result = *pointer;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          characterPointer = \"0123456789ABCDEF\";\n          value = 10;\n        }\n        tempValue = data[1];\n        data[2] = tempValue;\n        tempCharacterPointer = characterPointer2;\n        if ((int)tempValue < 0) {\n          if (result != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)data + 0x42) = *characterPointer;\n          tempCharacterPointer = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (result == 0) {\n            if (tempValue != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              tempValue = result / value;\n              tempCharacterPointer = tempCharacterPointer + -1;\n              *tempCharacterPointer = characterPointer[result - value * tempValue];\n              result = tempValue;\n            } while (tempValue != 0);\n          }\n        }\n        if (((value == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          tempCharacterPointer[-1] = '0';\n          tempCharacterPointer = tempCharacterPointer + -1;\n        }\n        data[4] = (int)characterPointer2 - (int)tempCharacterPointer;\n        characterPointer2 = tempCharacterPointer;\n        goto LAB_08004ec2;\n      }\n      pointer = *outputArguments;\n      *outputArguments = pointer + 1;\n      *(char *)((int)data + 0x42) = (char)*pointer;\nLAB_08004e2c:\n      characterPointer2 = (char *)((int)data + 0x42);\n      result = 1;\n    }\n    else {\n      if (byteValue != 0x73) {\n        if (byteValue < 0x74) {\n          if (byteValue == 0x6f) {\nLAB_08004e52:\n            result = *data;\n            pointer = *outputArguments;\n            if ((result & 0x80) == 0) {\n              *outputArguments = pointer + 1;\n              if ((result & 0x40) == 0) goto LAB_08004e60;\n              result = (uint)*(ushort *)pointer;\n            }\n            else {\n              *outputArguments = pointer + 1;\nLAB_08004e60:\n              result = *pointer;\n            }\n            characterPointer = \"0123456789ABCDEF\";\n            if (byteValue == 0x6f) {\n              value = 8;\n            }\n            else {\n              value = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byteValue == 0x70) {\n            *data = *data | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)data + 0x45) = 0x78;\n            characterPointer = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byteValue == 0x75) goto LAB_08004e52;\n          if (byteValue == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)data + 0x42) = byteValue;\n        goto LAB_08004e2c;\n      }\n      characterPointerPointer = (char **)*outputArguments;\n      *outputArguments = (uint *)(characterPointerPointer + 1);\n      characterPointer2 = *characterPointerPointer;\n      index = memchr(characterPointer2,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)characterPointer2;\n      }\n      result = data[1];\n    }\n    data[4] = result;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  result = *data;\n  pointerPointer = (uint **)*outputArguments;\n  value = data[5];\n  if ((result & 0x80) == 0) {\n    *outputArguments = (uint *)(pointerPointer + 1);\n    pointer = *pointerPointer;\n    if ((result & 0x40) == 0) goto LAB_08004f42;\n    *(short *)pointer = (short)value;\n  }\n  else {\n    *outputArguments = (uint *)(pointerPointer + 1);\n    pointer = *pointerPointer;\nLAB_08004f42:\n    *pointer = value;\n  }\nLAB_08004f56:\n  data[4] = 0;\nLAB_08004ec2:\n  index = _printf_common(formatSpecifier,data,sizeArray,bufferSize,outputFunction);\n  if ((index == -1) || (index = (*outputFunction)(formatSpecifier,bufferSize,characterPointer2,data[4]), index == -1)) {\nLAB_08004ed6:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - sizeArray[0]); index = index + 1) {\n        loopIndex = (*outputFunction)(formatSpecifier,bufferSize,(int)data + 0x19,1);\n        if (loopIndex == -1) goto LAB_08004ed6;\n      }\n    }\n    result = data[3];\n    if ((int)data[3] < (int)sizeArray[0]) {\n      result = sizeArray[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "print_formatted_data_08004d9c",
                "param_1": "formatSpecifier",
                "param_2": "data",
                "param_3": "bufferSize",
                "param_4": "outputFunction",
                "param_5": "outputArguments",
                "bVar1": "byteValue",
                "iVar2": "index",
                "puVar3": "pointer",
                "iVar4": "loopIndex",
                "pcVar5": "characterPointer",
                "uVar6": "value",
                "ppuVar7": "pointerPointer",
                "ppcVar8": "characterPointerPointer",
                "uVar9": "result",
                "uVar10": "tempValue",
                "pcVar11": "tempCharacterPointer",
                "pcVar12": "characterPointer2",
                "local_24": "sizeArray"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "memchr",
                "_printf_common"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "print_formatted_text_08004fdc",
            "code": "\nvoid printFormattedText_08004fdc(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int data;\n  undefined4 formatArg;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  data = DAT_200000a0;\n  formatArg = formatString;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    __sinit(DAT_200000a0);\n  }\n  _vfiprintf_r(data,*(undefined4 *)(data + 8),formatString,&arg1Copy,formatArg,&arg1Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "print_formatted_text_08004fdc",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "data",
                "uVar2": "formatArg",
                "uStack_c": "arg1Copy",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "allocate_memory_0800500c",
            "code": "\nvoid allocateMemory_0800500c(int *resultPointer,undefined4 allocationSize)\n\n{\n  int allocatedAddress;\n  \n  DAT_20000674 = 0;\n  allocatedAddress = _sbrk(allocationSize);\n  if ((allocatedAddress == -1) && (DAT_20000674 != 0)) {\n    *resultPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "allocate_memory_0800500c",
                "param_1": "resultPointer",
                "param_2": "allocationSize",
                "iVar1": "allocatedAddress"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint processData_080050d0(undefined4 *outputBuffer,undefined4 *inputBuffer)\n\n{\n  int dataOffset;\n  uint result;\n  ushort flags;\n  \n  dataOffset = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    __sinit(DAT_200000a0);\n  }\n  if (inputBuffer == &DAT_08005fc0) {\n    inputBuffer = *(undefined4 **)(dataOffset + 4);\n  }\n  else if (inputBuffer == (undefined4 *)&DAT_08005fe0) {\n    inputBuffer = *(undefined4 **)(dataOffset + 8);\n  }\n  else if (inputBuffer == (undefined4 *)&DAT_08005fa0) {\n    inputBuffer = *(undefined4 **)(dataOffset + 0xc);\n  }\n  flags = *(ushort *)(inputBuffer + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *outputBuffer = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)inputBuffer[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputBuffer[0xd] != inputBuffer + 0x11) {\n          _free_r(outputBuffer);\n        }\n        inputBuffer[0xd] = 0;\n      }\n      *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xffdb;\n      inputBuffer[1] = 0;\n      *inputBuffer = inputBuffer[4];\n    }\n    *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) | 8;\n  }\n  if ((inputBuffer[4] == 0) && ((*(ushort *)(inputBuffer + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputBuffer,inputBuffer);\n  }\n  flags = *(ushort *)(inputBuffer + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = inputBuffer[5];\n    }\n    inputBuffer[2] = result;\n  }\n  else {\n    inputBuffer[2] = 0;\n    inputBuffer[6] = -inputBuffer[5];\n  }\n  if (inputBuffer[4] == 0) {\n    flags = *(ushort *)(inputBuffer + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(inputBuffer + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "iVar1": "dataOffset",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "__sfputc_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "handle_error_080051ac",
            "code": "\nvoid handle_error_080051ac(void)\n\n{\n  uint *ptr;\n  int size;\n  int *params;\n  int *other_params;\n  uint flag;\n  ushort value;\n  int temp;\n  code *callback;\n  int count;\n  uint original_value;\n  code *unrecovered_jump_table;\n  bool isZero;\n  undefined8 exit_result;\n  \n  raise(6);\n  unrecovered_jump_table = (code *)0x80051bb;\n  exit_result = _exit(1);\n  params = (int *)((ulonglong)exit_result >> 0x20);\n  ptr = (uint *)exit_result;\n  value = *(ushort *)(params + 3);\n  flag = (uint)value;\n  if ((int)(flag << 0x1c) < 0) {\n    size = params[4];\n    if (size != 0) {\n      temp = flag << 0x1e;\n      isZero = temp == 0;\n      count = *params;\n      if (isZero) {\n        temp = params[5];\n      }\n      *params = size;\n      if (!isZero) {\n        temp = 0;\n      }\n      params[2] = temp;\n      for (count = count - size; 0 < count; count = count - temp) {\n        temp = (*(code *)params[10])(ptr,params[8],size,count);\n        if (temp < 1) {\n          value = *(ushort *)(params + 3);\n          goto LAB_080052b2;\n        }\n        size = size + temp;\n      }\n    }\n  }\n  else if (((0 < params[1]) || (0 < params[0x10])) &&\n          (callback = (code *)params[0xb], callback != (code *)0x0)) {\n    original_value = *ptr;\n    *ptr = 0;\n    if ((value & 0x1000) == 0) {\n      size = (*callback)(ptr,params[8],flag & 0x1000,1);\n      if ((size == -1) && (flag = *ptr, flag != 0)) {\n        if ((flag != 0x1d) && (flag != 0x16)) {\n          *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecovered_jump_table)();\n          return;\n        }\n        *ptr = original_value;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      size = params[0x15];\n    }\n    if (((int)((uint)*(ushort *)(params + 3) << 0x1d) < 0) &&\n       (size = size - params[1], params[0xd] != 0)) {\n      size = size - params[0x10];\n    }\n    size = (*(code *)params[0xb])(ptr,params[8],size,0);\n    value = *(ushort *)(params + 3);\n    if ((size == -1) &&\n       ((0x1d < *ptr || (-1 < (int)((0x20400001U >> (*ptr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(params + 3) = value | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jump_table)(0xffffffff);\n      return;\n    }\n    params[1] = 0;\n    *params = params[4];\n    if (((int)((uint)value << 0x13) < 0) && ((size != -1 || (*ptr == 0)))) {\n      params[0x15] = size;\n    }\n    other_params = (int *)params[0xd];\n    *ptr = original_value;\n    if (other_params != (int *)0x0) {\n      if (other_params != params + 0x11) {\n        _free_r(ptr);\n      }\n      params[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jump_table)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "handle_error_080051ac",
                "puVar1": "ptr",
                "iVar2": "size",
                "piVar3": "params",
                "piVar4": "other_params",
                "uVar5": "flag",
                "uVar6": "value",
                "iVar7": "temp",
                "pcVar8": "callback",
                "iVar9": "count",
                "uVar10": "original_value",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jump_table",
                "bVar11": "isZero",
                "uVar12": "exit_result"
            },
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "called": [
                "_exit",
                "_free_r",
                "raise"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 processData_080052cc(uint *dataPointer,int *paramArray)\n\n{\n  undefined4 returnValue;\n  int offset;\n  int *tempPointer;\n  uint uValue;\n  ushort uShortValue;\n  int counter;\n  undefined4 register4;\n  undefined4 register5;\n  code *functionPointer;\n  int tempVar;\n  uint tempValue;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (paramArray[4] != 0) {\n    if ((dataPointer != (uint *)0x0) && (dataPointer[6] == 0)) {\n      __sinit();\n    }\n    if (paramArray == &DAT_08005fc0) {\n      paramArray = (int *)dataPointer[1];\n    }\n    else if (paramArray == (int *)&DAT_08005fe0) {\n      paramArray = (int *)dataPointer[2];\n    }\n    else if (paramArray == (int *)&DAT_08005fa0) {\n      paramArray = (int *)dataPointer[3];\n    }\n    if (*(short *)(paramArray + 3) != 0) {\n      uShortValue = *(ushort *)(paramArray + 3);\n      uValue = (uint)uShortValue;\n      if ((int)(uValue << 0x1c) < 0) {\n        offset = paramArray[4];\n        if (offset != 0) {\n          counter = uValue << 0x1e;\n          bVar10 = counter == 0;\n          tempVar = *paramArray;\n          if (bVar10) {\n            counter = paramArray[5];\n          }\n          *paramArray = offset;\n          if (!bVar10) {\n            counter = 0;\n          }\n          paramArray[2] = counter;\n          for (tempVar = tempVar - offset; 0 < tempVar; tempVar = tempVar - counter) {\n            counter = (*(code *)paramArray[10])(dataPointer,paramArray[8],offset,tempVar,register4,register5);\n            if (counter < 1) {\n              uShortValue = *(ushort *)(paramArray + 3);\n              goto LAB_080052b2;\n            }\n            offset = offset + counter;\n          }\n        }\n      }\n      else if (((0 < paramArray[1]) || (0 < paramArray[0x10])) &&\n              (functionPointer = (code *)paramArray[0xb], functionPointer != (code *)0x0)) {\n        tempValue = *dataPointer;\n        *dataPointer = 0;\n        if ((uShortValue & 0x1000) == 0) {\n          offset = (*functionPointer)(dataPointer,paramArray[8],uValue & 0x1000,1);\n          if ((offset == -1) && (uValue = *dataPointer, uValue != 0)) {\n            if ((uValue != 0x1d) && (uValue != 0x16)) {\n              *(ushort *)(paramArray + 3) = *(ushort *)(paramArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n              return returnValue;\n            }\n            *dataPointer = tempValue;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          offset = paramArray[0x15];\n        }\n        if (((int)((uint)*(ushort *)(paramArray + 3) << 0x1d) < 0) &&\n           (offset = offset - paramArray[1], paramArray[0xd] != 0)) {\n          offset = offset - paramArray[0x10];\n        }\n        offset = (*(code *)paramArray[0xb])(dataPointer,paramArray[8],offset,0);\n        uShortValue = *(ushort *)(paramArray + 3);\n        if ((offset == -1) &&\n           ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(paramArray + 3) = uShortValue | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return returnValue;\n        }\n        paramArray[1] = 0;\n        *paramArray = paramArray[4];\n        if (((int)((uint)uShortValue << 0x13) < 0) && ((offset != -1 || (*dataPointer == 0)))) {\n          paramArray[0x15] = offset;\n        }\n        tempPointer = (int *)paramArray[0xd];\n        *dataPointer = tempValue;\n        if (tempPointer != (int *)0x0) {\n          if (tempPointer != paramArray + 0x11) {\n            _free_r(dataPointer);\n          }\n          paramArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n          return returnValue;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "dataPointer",
                "param_2": "paramArray",
                "uVar1": "returnValue",
                "iVar2": "offset",
                "piVar3": "tempPointer",
                "uVar4": "uValue",
                "uVar5": "uShortValue",
                "iVar6": "counter",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "pcVar7": "functionPointer",
                "iVar8": "tempVar",
                "uVar9": "tempValue"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_data_struct_0800532c",
            "code": "\nvoid initializeDataStruct_0800532c(undefined4 *dataStruct,undefined2 value1,undefined2 value2)\n\n{\n  *dataStruct = 0;\n  dataStruct[1] = 0;\n  dataStruct[2] = 0;\n  *(undefined2 *)(dataStruct + 3) = value1;\n  dataStruct[25] = 0;\n  *(undefined2 *)((int)dataStruct + 0xe) = value2;\n  dataStruct[4] = 0;\n  dataStruct[5] = 0;\n  dataStruct[6] = 0;\n  memset(dataStruct + 0x17,0,8);\n  dataStruct[9] = 0x8005609;\n  dataStruct[10] = 0x800562b;\n  dataStruct[11] = 0x8005663;\n  dataStruct[8] = dataStruct;\n  dataStruct[12] = &startLabel;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_data_struct_0800532c",
                "param_1": "dataStruct",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "dataStruct[1]",
                "param_1[2]": "dataStruct[2]",
                "param_1[0x19]": "dataStruct[25]",
                "param_1[4]": "dataStruct[4]",
                "param_1[5]": "dataStruct[5]",
                "param_1[6]": "dataStruct[6]",
                "param_1[9]": "dataStruct[9]",
                "param_1[10]": "dataStruct[10]",
                "param_1[0xb]": "dataStruct[11]",
                "param_1[8]": "dataStruct[8]",
                "param_1[0xc]": "dataStruct[12]",
                "&LAB_08005686_1": "&startLabel"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "allocate_memory_block_08005374",
            "code": "\nundefined4 * allocate_memory_block_08005374(undefined4 size_of_block,int number_of_instances)\n\n{\n  undefined4 *new_block_pointer;\n  int offset;\n  \n  offset = (number_of_instances + -1) * 0x68;\n  new_block_pointer = (undefined4 *)_malloc_r(size_of_block,offset + 0x74);\n  if (new_block_pointer != (undefined4 *)0x0) {\n    *new_block_pointer = 0;\n    new_block_pointer[1] = number_of_instances;\n    new_block_pointer[2] = new_block_pointer + 3;\n    memset(new_block_pointer + 3,0,offset + 0x68);\n  }\n  return new_block_pointer;\n}\n\n",
            "renaming": {
                "FUN_08005374": "allocate_memory_block_08005374",
                "param_1": "size_of_block",
                "param_2": "number_of_instances",
                "puVar1": "new_block_pointer",
                "iVar2": "offset"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_080053a0",
            "code": "\nvoid initializeData_080053a0(undefined4 *parameters)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (parameters[6] == 0) {\n    parameters[0x12] = 0;\n    parameters[0x13] = 0;\n    parameters[0x14] = 0;\n    pointer = &DAT_200000a4;\n    parameters[10] = &label;\n    if (parameters == &DAT_200000a4) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_200000a4) {\n      parameters[6] = pointer;\n    }\n    result = __sfp();\n    parameters[1] = result;\n    result = __sfp(parameters);\n    parameters[2] = result;\n    result = __sfp(parameters);\n    parameters[3] = result;\n    std_isra_0(parameters[1],4,0);\n    std_isra_0(parameters[2],9,1);\n    std_isra_0(parameters[3],0x12,2);\n    parameters[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "parameters",
                "uVar1": "result",
                "puVar2": "pointer",
                "LAB_08005320_1": "label"
            },
            "calling": [
                "__swsetup_r",
                "__sfputc_r",
                "__sfp",
                "iprintf",
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "called": [
                "__sfp",
                "std.isra.0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_08005400",
            "code": "\nint * initializeData_08005400(undefined4 *paramPointer,undefined4 paramValue2,undefined4 paramValue3,undefined4 paramValue4)\n\n{\n  int *iVar1;\n  int *iVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    __sinit(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    iVar2 = ppiVar3[2];\n    iVar1 = ppiVar3[1];\n    while (iVar1 = (int *)((int)iVar1 + -1), -1 < (int)iVar1) {\n      if (*(short *)(iVar2 + 3) == 0) {\n        *(undefined2 *)((int)iVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(iVar2 + 3) = 1;\n        iVar2[0x19] = 0;\n        *iVar2 = 0;\n        iVar2[2] = 0;\n        iVar2[1] = 0;\n        iVar2[4] = 0;\n        iVar2[5] = 0;\n        iVar2[6] = 0;\n        memset(iVar2 + 0x17,0,8,1,paramValue4);\n        iVar2[0xd] = 0;\n        iVar2[0xe] = 0;\n        iVar2[0x12] = 0;\n        iVar2[0x13] = 0;\n        return iVar2;\n      }\n      iVar2 = iVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      iVar1 = (int *)__sfmoreglue(paramPointer,4);\n      *ppiVar3 = iVar1;\n      if (iVar1 == (int *)0x0) {\n        *paramPointer = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_08005400",
                "param_1": "paramPointer",
                "param_2": "paramValue2",
                "param_3": "paramValue3",
                "param_4": "paramValue4",
                "piVar1": "iVar1",
                "piVar2": "iVar2"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset",
                "__sfmoreglue",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "get_file_permissions_080054b4",
            "code": "\nundefined4 getFilePermissions_080054b4(undefined4 param_1,int fileInfo,undefined4 *permissions,uint *isExecutable)\n\n{\n  int fileStatus;\n  undefined4 accessMode;\n  undefined statusBuffer [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileInfo + 0xe) < 0) ||\n     (fileStatus = _fstat_r(param_1,(int)*(short *)(fileInfo + 0xe),statusBuffer), fileStatus < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileInfo + 0xc) << 0x18) < 0) {\n      accessMode = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  accessMode = 0x400;\nLAB_080054f4:\n  *permissions = accessMode;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "get_file_permissions_080054b4",
                "param_2": "fileInfo",
                "param_3": "permissions",
                "param_4": "isExecutable",
                "iVar1": "fileStatus",
                "uVar2": "accessMode",
                "auStack_4c": "statusBuffer",
                "local_48": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "decode_and_allocate_memory_080054fc",
            "code": "\nvoid decode_and_allocate_memory_080054fc(int data_buffer,int *struct_ptr)\n\n{\n  ushort flags;\n  int allocated_memory;\n  int data_size;\n  int *temp_ptr;\n  \n  if (-1 < (int)((uint)*(ushort *)(struct_ptr + 3) << 0x1e)) {\n    data_size = data_buffer;\n    temp_ptr = struct_ptr;\n    flags = __swhatbuf_r(data_buffer,struct_ptr,&data_size,&temp_ptr);\n    allocated_memory = _malloc_r(data_buffer,data_size);\n    if (allocated_memory != 0) {\n      *(undefined **)(data_buffer + 0x28) = &LAB_08005320_1;\n      *struct_ptr = allocated_memory;\n      *(ushort *)(struct_ptr + 3) = *(ushort *)(struct_ptr + 3) | 0x80;\n      struct_ptr[5] = data_size;\n      struct_ptr[4] = allocated_memory;\n      if ((temp_ptr != (int *)0x0) &&\n         (allocated_memory = _isatty_r(data_buffer,(int)*(short *)((int)struct_ptr + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(struct_ptr + 3) = *(ushort *)(struct_ptr + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(struct_ptr + 3) = flags | *(ushort *)(struct_ptr + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(struct_ptr + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(struct_ptr + 3) = *(ushort *)(struct_ptr + 3) & 0xfffc | 2;\n  }\n  *struct_ptr = (int)struct_ptr + 0x47;\n  struct_ptr[4] = (int)struct_ptr + 0x47;\n  struct_ptr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "decode_and_allocate_memory_080054fc",
                "param_1": "data_buffer",
                "param_2": "struct_ptr",
                "uVar1": "flags",
                "iVar2": "allocated_memory",
                "local_18": "data_size",
                "local_14": "temp_ptr"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "__swhatbuf_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "reverse_kill_process_080055d0",
            "code": "\nint reverseKillProcess_080055d0(uint processId)\n\n{\n  int *ptrErrorCode;\n  undefined4 pid;\n  int ptrValue;\n  code *functionPointer;\n  undefined4 unusedParameter1;\n  undefined4 unusedParameter2;\n  undefined4 unusedParameter3;\n  undefined4 *ptrVariable;\n  \n  ptrErrorCode = DAT_200000a0;\n  ptrVariable = &DAT_200000a0;\n  if (0x1f < processId) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  ptrValue = DAT_200000a0[0x11];\n  if ((ptrValue != 0) && (functionPointer = *(code **)(ptrValue + processId * 4), functionPointer != (code *)0x0)) {\n    if (functionPointer != (code *)0x1) {\n      if (functionPointer == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(ptrValue + processId * 4) = 0;\n      (*functionPointer)(processId);\n    }\n    return 0;\n  }\n  pid = _getpid_r(DAT_200000a0);\n  DAT_20000674 = 0;\n  ptrValue = _kill(pid,processId,processId,0,ptrVariable,unusedParameter1,unusedParameter2,unusedParameter3);\n  if ((ptrValue == -1) && (DAT_20000674 != 0)) {\n    *ptrErrorCode = DAT_20000674;\n  }\n  return ptrValue;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "reverse_kill_process_080055d0",
                "param_1": "processId",
                "piVar1": "ptrErrorCode",
                "uVar2": "pid",
                "iVar3": "ptrValue",
                "pcVar4": "functionPointer",
                "unaff_r4": "unusedParameter1",
                "unaff_r5": "unusedParameter2",
                "in_lr": "unusedParameter3",
                "puVar5": "ptrVariable"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_kill",
                "_getpid_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "FUN_08005604",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_reading_08005608",
            "code": "\nvoid updateReading_08005608(undefined4 fileDescriptor,int dataBlockAddress)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool isSuccessful;\n  \n  readResult = _read_r(fileDescriptor,(int)*(short *)(dataBlockAddress + 0xe));\n  isSuccessful = -1 < readResult;\n  if (isSuccessful) {\n    updatedValue = *(int *)(dataBlockAddress + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(dataBlockAddress + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(dataBlockAddress + 0x54) = updatedValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(dataBlockAddress + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_reading_08005608",
                "param_1": "fileDescriptor",
                "param_2": "dataBlockAddress",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "write_to_file_0800562a",
            "code": "\nvoid writeToFile_0800562a(int *fileDescriptor,int buffer,undefined4 data,undefined4 size)\n\n{\n  int writeStatus;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  \n  if ((int)((uint)*(ushort *)(buffer + 0xc) << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(buffer + 0xe),0,2);\n  }\n  *(ushort *)(buffer + 0xc) = *(ushort *)(buffer + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  writeStatus = _write((int)*(short *)(buffer + 0xe),data,size,size,size,unaff_r4,unaff_r5,\n                 in_lr);\n  if ((writeStatus == -1) && (DAT_20000674 != 0)) {\n    *fileDescriptor = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "write_to_file_0800562a",
                "param_1": "fileDescriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "writeStatus"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "update_file_pointer_08005662",
            "code": "\nvoid updateFilePointer_08005662(undefined4 fileDescriptor,int dataStruct)\n\n{\n  int seekResult;\n  ushort modifiedFlags;\n  bool isSeekError;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(dataStruct + 0xe));\n  isSeekError = seekResult == -1;\n  if (isSeekError) {\n    modifiedFlags = *(ushort *)(dataStruct + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataStruct + 0x54) = seekResult;\n    modifiedFlags = *(ushort *)(dataStruct + 0xc) | 0x1000;\n  }\n  if (isSeekError) {\n    *(ushort *)(dataStruct + 0xc) = modifiedFlags;\n  }\n  if (!isSeekError) {\n    *(ushort *)(dataStruct + 0xc) = modifiedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "update_file_pointer_08005662",
                "param_1": "fileDescriptor",
                "param_2": "dataStruct",
                "iVar1": "seekResult",
                "uVar2": "modifiedFlags",
                "bVar3": "isSeekError"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "update_file_info_080056d4",
            "code": "\nvoid updateFileInfo_080056d4(int *result,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 bufferSize)\n\n{\n  int fileStatus;\n  \n  DAT_20000674 = 0;\n  fileStatus = _fstat(fileDescriptor,statBuffer,statBuffer,0,bufferSize);\n  if ((fileStatus == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "update_file_info_080056d4",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "bufferSize",
                "iVar1": "fileStatus"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "check_and_assign_value_080056f8",
            "code": "\nvoid checkAndAssignValue_080056f8(int *result,undefined4 input)\n\n{\n  int isTTY;\n  \n  DAT_20000674 = 0;\n  isTTY = _isatty(input);\n  if ((isTTY == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "check_and_assign_value_080056f8",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "isTTY"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "seek_and_assign_value_08005718",
            "code": "\nvoid seekAndAssignValue_08005718(int *result,undefined4 fileDescriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seekResult;\n  \n  DAT_20000674 = 0;\n  seekResult = _lseek(fileDescriptor,offset,whence,whence,whence);\n  if ((seekResult == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "seek_and_assign_value_08005718",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seekResult"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "read_and_store_error_0800573c",
            "code": "\nvoid readAndStoreError_0800573c(int *errorPointer,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_20000674 = 0;\n  readResult = _read(fileDescriptor,buffer,count,count,count);\n  if ((readResult == -1) && (DAT_20000674 != 0)) {\n    *errorPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "read_and_store_error_0800573c",
                "param_1": "errorPointer",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "set_flags_and_terminate_08005760",
            "code": "\nvoid setFlagsAndTerminate_08005760(void)\n\n{\n  code *jumptable;\n  \n  jumptable = setFlagsAndTerminate_08005760;\n  abort();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "set_flags_and_terminate_08005760",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 116531,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_080002d0",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_08000600",
            "FUN_0800066c",
            "FUN_08000690",
            "FUN_080006b4",
            "FUN_08000728",
            "FUN_0800076c",
            "FUN_080007f0",
            "FUN_080008cc",
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000b54",
            "FUN_08000c64",
            "FUN_08000c8c",
            "FUN_08000d3c",
            "FUN_08000d8e",
            "FUN_08000d98",
            "FUN_08000de4",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f56",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011a4",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_08001ab0",
            "FUN_08001bfc",
            "FUN_08001d00",
            "FUN_08001e68",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080023b4",
            "FUN_08002488",
            "FUN_080025e0",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_08002848",
            "FUN_08002864",
            "FUN_080028d4",
            "FUN_080028f0",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_080029c8",
            "FUN_08002d0c",
            "FUN_08002d72",
            "FUN_08002dd0",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08002ffc",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_080033c8",
            "FUN_080033d8",
            "FUN_0800340c",
            "FUN_08003414",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034ce",
            "FUN_080034da",
            "FUN_080034f4",
            "FUN_08003506",
            "FUN_0800351e",
            "FUN_0800352e",
            "FUN_0800354a",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_0800377c",
            "FUN_0800387c",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003978",
            "FUN_08003cc8",
            "FUN_08003d18",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_08003eac",
            "FUN_08003f00",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040ec",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004110",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_08004240",
            "FUN_080042ac",
            "FUN_080042e8",
            "FUN_08004364",
            "FUN_08004388",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_0800447c",
            "FUN_080044d8",
            "FUN_08004544",
            "FUN_08004560",
            "FUN_08004640",
            "FUN_08004658",
            "FUN_08004678",
            "FUN_080046b4",
            "FUN_080047d0",
            "FUN_080047fe",
            "FUN_08004808",
            "FUN_08004844",
            "FUN_08004860",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004978",
            "FUN_08004a34",
            "FUN_08004a60",
            "FUN_08004a84",
            "FUN_08004cb0",
            "FUN_08004d9c",
            "FUN_08004fdc",
            "FUN_0800500c",
            "FUN_080050d0",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_0800532c",
            "FUN_08005374",
            "FUN_080053a0",
            "FUN_08005400",
            "FUN_080054b4",
            "FUN_080054fc",
            "FUN_080055d0",
            "FUN_08005608",
            "FUN_0800562a",
            "FUN_08005662",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000682",
            "FUN_08000c4c",
            "FUN_08004648"
        ],
        [
            "FUN_080047c0",
            "FUN_08005760"
        ]
    ],
    "locked_functions": []
}