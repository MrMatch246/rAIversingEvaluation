{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 input)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *data,uint target_byte,uint data_length)\n\n{\n  byte byte_value;\n  char cond_1;\n  char cond_2;\n  char cond_3;\n  char cond_4;\n  byte *result;\n  uint *pointer;\n  byte *next_byte;\n  uint byte_offset;\n  uint aligned_length;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool xor_cond_1;\n  bool xor_cond_2;\n  bool xor_cond_3;\n  bool xor_cond_4;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)data_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n      pointer = (uint *)((int)data + 1);\n      byte_value = *(byte *)data;\n      data_length = data_length - 1;\n      data = pointer;\n    } while (byte_value != target_byte);\n  }\n  else {\n    byte_offset = (uint)data & 7;\n    while( true ) {\n      if (byte_offset == 0) {\n        byte_offset = target_byte | target_byte << 8;\n        byte_offset = byte_offset | byte_offset << 0x10;\n        aligned_length = data_length & 0xfffffff8;\n        do {\n          pointer = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result_1 = *data ^ byte_offset;\n          xor_result_2 = data[1] ^ byte_offset;\n          cond_1 = -((char)xor_result_1 == '\\0');\n          cond_2 = -((char)(xor_result_1 >> 8) == '\\0');\n          cond_3 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          cond_4 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(cond_4,CONCAT12(cond_3,CONCAT11(cond_2,cond_1)));\n          xor_cond_1 = (char)xor_result_2 != '\\0';\n          xor_cond_2 = (char)(xor_result_2 >> 8) != '\\0';\n          xor_cond_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          xor_cond_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(xor_cond_4 * cond_4 - !xor_cond_4,\n                            CONCAT12(xor_cond_3 * cond_3 - !xor_cond_3,\n                                     CONCAT11(xor_cond_2 * cond_2 - !xor_cond_2,xor_cond_1 * cond_1 - !xor_cond_1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              next_byte = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              next_byte = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              xor_cond_1 = (xor_result_1 & 0x100) == 0;\n              result = next_byte + 1;\n              if (xor_cond_1) {\n                xor_cond_1 = (xor_result_1 & 0x18000) == 0;\n                result = next_byte + 2;\n              }\n              next_byte = result;\n              if (xor_cond_1) {\n                next_byte = next_byte + 1;\n              }\n            }\n            return next_byte + -1;\n          }\n          data = pointer;\n        } while (aligned_length != 0);\n        data_length = data_length & 7;\n        goto joined_r0x08000290;\n      }\n      pointer = (uint *)((int)data + 1);\n      data_length = data_length - 1;\n      if (*(byte *)data == target_byte) break;\n      byte_offset = (uint)pointer & 7;\n      data = pointer;\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)pointer + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "data_length",
                "bVar1": "byte_value",
                "cVar2": "cond_1",
                "cVar3": "cond_2",
                "cVar4": "cond_3",
                "cVar5": "cond_4",
                "pbVar6": "result",
                "puVar7": "pointer",
                "pbVar8": "next_byte",
                "uVar9": "byte_offset",
                "uVar10": "aligned_length",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "xor_cond_1",
                "bVar14": "xor_cond_2",
                "bVar15": "xor_cond_3",
                "bVar16": "xor_cond_4"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "calculate_result_080002d0",
            "code": "\nundefined8 calculateResult_080002d0(int input1,int input2,int flag1,int flag2)\n\n{\n  undefined8 result;\n  \n  if ((flag2 == 0) && (flag1 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = divide_and_remainder_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "calculate_result_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag1",
                "param_4": "flag2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_and_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divide_and_remainder_08000300(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder_ptr)\n\n{\n  ulonglong quotient_high;\n  uint quotient_low;\n  uint quotient_high_temp;\n  uint quotient_low_temp;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int shift;\n  bool carry;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift = leading_zero_count(divisor);\n      if (shift != 0) {\n        divisor = divisor << shift;\n        dividend_high = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        dividend = dividend << shift;\n      }\n      temp_4 = divisor >> 0x10;\n      temp_2 = dividend_high / temp_4;\n      temp_1 = dividend >> 0x10 | (dividend_high - temp_4 * temp_2) * 0x10000;\n      quotient_low_temp = temp_2 * (divisor & 0xffff);\n      quotient_high_temp = temp_2;\n      if (temp_1 <= quotient_low_temp && quotient_low_temp - temp_1 != 0) {\n        carry = carry_4_bits(temp_1,divisor);\n        temp_1 = temp_1 + divisor;\n        quotient_high_temp = temp_2 - 1;\n        if ((carry == false) && (temp_1 <= quotient_low_temp && quotient_low_temp - temp_1 != 0)) {\n          quotient_high_temp = temp_2 - 2;\n          temp_1 = temp_1 + divisor;\n        }\n      }\n      temp_2 = (temp_1 - quotient_low_temp) / temp_4;\n      temp_1 = dividend & 0xffff | ((temp_1 - quotient_low_temp) - temp_4 * temp_2) * 0x10000;\n      temp_4 = temp_2 * (divisor & 0xffff);\n      quotient_low_temp = temp_2;\n      if (temp_1 <= temp_4 && temp_4 - temp_1 != 0) {\n        carry = carry_4_bits(temp_1,divisor);\n        temp_1 = temp_1 + divisor;\n        quotient_low_temp = temp_2 - 1;\n        if ((carry == false) && (temp_1 <= temp_4 && temp_4 - temp_1 != 0)) {\n          quotient_low_temp = temp_2 - 2;\n          temp_1 = temp_1 + divisor;\n        }\n      }\n      temp_1 = temp_1 - temp_4;\n      quotient_low_temp = quotient_low_temp | quotient_high_temp << 0x10;\n      quotient_high_temp = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift = leading_zero_count(divisor);\n      if (shift == 0) {\n        dividend_high = dividend_high - divisor;\n        temp_1 = divisor >> 0x10;\n        temp_5 = divisor & 0xffff;\n        quotient_high_temp = 1;\n      }\n      else {\n        divisor = divisor << shift;\n        temp_1 = divisor >> 0x10;\n        quotient_low_temp = dividend_high >> (0x20U - shift & 0xff);\n        temp_3 = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        quotient_high_temp = quotient_low_temp / temp_1;\n        temp_5 = divisor & 0xffff;\n        temp_4 = temp_3 >> 0x10 | (quotient_low_temp - temp_1 * quotient_high_temp) * 0x10000;\n        temp_2 = quotient_high_temp * temp_5;\n        dividend = dividend << shift;\n        quotient_low_temp = quotient_high_temp;\n        if (temp_4 <= temp_2 && temp_2 - temp_4 != 0) {\n          carry = carry_4_bits(temp_4,divisor);\n          temp_4 = temp_4 + divisor;\n          quotient_low_temp = quotient_high_temp - 1;\n          if ((carry == false) && (temp_4 <= temp_2 && temp_2 - temp_4 != 0)) {\n            quotient_low_temp = quotient_high_temp - 2;\n            temp_4 = temp_4 + divisor;\n          }\n        }\n        quotient_low = (temp_4 - temp_2) / temp_1;\n        dividend_high = temp_3 & 0xffff | ((temp_4 - temp_2) - temp_1 * quotient_low) * 0x10000;\n        temp_2 = quotient_low * temp_5;\n        quotient_high_temp = quotient_low;\n        if (dividend_high <= temp_2 && temp_2 - dividend_high != 0) {\n          carry = carry_4_bits(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high_temp = quotient_low - 1;\n          if ((carry == false) && (dividend_high <= temp_2 && temp_2 - dividend_high != 0)) {\n            quotient_high_temp = quotient_low - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - temp_2;\n        quotient_high_temp = quotient_high_temp | quotient_low_temp << 0x10;\n      }\n      temp_3 = dividend_high / temp_1;\n      temp_4 = dividend >> 0x10 | (dividend_high - temp_1 * temp_3) * 0x10000;\n      quotient_low_temp = temp_5 * temp_3;\n      temp_2 = temp_3;\n      if (temp_4 <= quotient_low_temp && quotient_low_temp - temp_4 != 0) {\n        carry = carry_4_bits(temp_4,divisor);\n        temp_4 = temp_4 + divisor;\n        temp_2 = temp_3 - 1;\n        if ((carry == false) && (temp_4 <= quotient_low_temp && quotient_low_temp - temp_4 != 0)) {\n          temp_2 = temp_3 - 2;\n          temp_4 = temp_4 + divisor;\n        }\n      }\n      temp_3 = (temp_4 - quotient_low_temp) / temp_1;\n      temp_1 = dividend & 0xffff | ((temp_4 - quotient_low_temp) - temp_1 * temp_3) * 0x10000;\n      temp_5 = temp_5 * temp_3;\n      quotient_low_temp = temp_3;\n      if (temp_1 <= temp_5 && temp_5 - temp_1 != 0) {\n        carry = carry_4_bits(temp_1,divisor);\n        temp_1 = temp_1 + divisor;\n        quotient_low_temp = temp_3 - 1;\n        if ((carry == false) && (temp_1 <= temp_5 && temp_5 - temp_1 != 0)) {\n          quotient_low_temp = temp_3 - 2;\n          temp_1 = temp_1 + divisor;\n        }\n      }\n      temp_1 = temp_1 - temp_5;\n      quotient_low_temp = quotient_low_temp | temp_2 << 0x10;\n    }\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = temp_1 >> shift;\n      remainder_ptr[1] = 0;\n      return CONCAT44(quotient_high_temp,quotient_low_temp);\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = dividend;\n      remainder_ptr[1] = dividend_high;\n      return 0;\n    }\n    quotient_low_temp = 0;\n    quotient_high_temp = 0;\n  }\n  else {\n    shift = leading_zero_count(divisor_high);\n    if (shift != 0) {\n      temp_4 = 0x20 - shift;\n      quotient_high_temp = divisor >> (temp_4 & 0xff) | divisor_high << shift;\n      temp_5 = quotient_high_temp >> 0x10;\n      quotient_low_temp = dividend_high >> (temp_4 & 0xff);\n      quotient_low = dividend >> (temp_4 & 0xff) | dividend_high << shift;\n      temp_3 = quotient_low_temp / temp_5;\n      temp_2 = quotient_low >> 0x10 | (quotient_low_temp - temp_5 * temp_3) * 0x10000;\n      temp_1 = temp_3 * (quotient_high_temp & 0xffff);\n      dividend = dividend << shift;\n      quotient_low_temp = temp_3;\n      if (temp_2 <= temp_1 && temp_1 - temp_2 != 0) {\n        carry = carry_4_bits(temp_2,quotient_high_temp);\n        temp_2 = temp_2 + quotient_high_temp;\n        quotient_low_temp = temp_3 - 1;\n        if ((carry == false) && (temp_2 <= temp_1 && temp_1 - temp_2 != 0)) {\n          quotient_low_temp = temp_3 - 2;\n          temp_2 = temp_2 + quotient_high_temp;\n        }\n      }\n      temp_3 = (temp_2 - temp_1) / temp_5;\n      temp_2 = quotient_low & 0xffff | ((temp_2 - temp_1) - temp_5 * temp_3) * 0x10000;\n      temp_5 = temp_3 * (quotient_high_temp & 0xffff);\n      temp_1 = temp_3;\n      if (temp_2 <= temp_5 && temp_5 - temp_2 != 0) {\n        carry = carry_4_bits(temp_2,quotient_high_temp);\n        temp_2 = temp_2 + quotient_high_temp;\n        temp_1 = temp_3 - 1;\n        if ((carry == false) && (temp_2 <= temp_5 && temp_5 - temp_2 != 0)) {\n          temp_1 = temp_3 - 2;\n          temp_2 = temp_2 + quotient_high_temp;\n        }\n      }\n      temp_1 = temp_1 | quotient_low_temp << 0x10;\n      quotient_high = (ulonglong)temp_1 * (ulonglong)(divisor << shift);\n      if (CONCAT44(temp_2 - temp_5,dividend) < quotient_high) {\n        quotient_high = quotient_high - CONCAT44(quotient_high_temp,divisor << shift);\n        temp_1 = temp_1 - 1;\n      }\n      if (remainder_ptr != (uint *)0x0) {\n        quotient_low_temp = ((temp_2 - temp_5) - (int)(quotient_high >> 0x20)) - (uint)(dividend < (uint)quotient_high);\n        *remainder_ptr = quotient_low_temp << (temp_4 & 0xff) | dividend - (uint)quotient_high >> shift;\n        remainder_ptr[1] = quotient_low_temp >> shift;\n      }\n      return (ulonglong)temp_1;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry;\n      quotient_low_temp = 1;\n    }\n    else {\n      quotient_low_temp = 0;\n    }\n    quotient_high_temp = 0;\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = dividend;\n      remainder_ptr[1] = dividend_high;\n      return (ulonglong)quotient_low_temp;\n    }\n  }\n  return CONCAT44(quotient_high_temp,quotient_low_temp);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_and_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder_ptr",
                "uVar1": "quotient_high",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high_temp",
                "uVar4": "quotient_low_temp",
                "uVar5": "temp_1",
                "uVar6": "temp_2",
                "uVar7": "temp_3",
                "uVar8": "temp_4",
                "uVar9": "temp_5",
                "iVar10": "shift",
                "bVar11": "carry",
                "LZCOUNT": "leading_zero_count",
                "CARRY4": "carry_4_bits"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "execute_software_interrupt_080005e0",
            "code": "\nvoid executeSoftwareInterrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "execute_software_interrupt_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_interrupt_080005e4",
            "code": "\nundefined4 execute_interrupt_080005e4(undefined4 input_value_1,undefined4 input_value_2,undefined4 input_value_3,undefined4 input_value_4)\n\n{\n  undefined4 interrupt_result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  interrupt_result = execute_software_interrupt_080005e0(1,input_value_1,0,0,input_value_4);\n  return interrupt_result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_interrupt_080005e4",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "uVar1": "interrupt_result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_and_process_data_08000600",
            "code": "\nvoid initialize_and_process_data_08000600(int **data_ptr,undefined4 param_value)\n\n{\n  char data_char;\n  int loop_condition;\n  \n  data_char = *(char *)((int)data_ptr + 5);\n  if (data_char == '\\x02') {\n    *data_ptr = &DAT_20000338;\n  }\n  else if (data_char == '\\x03') {\n    *data_ptr = &DAT_20000338;\n  }\n  else if (data_char == '\\x01') {\n    *data_ptr = &DAT_20000338;\n  }\n  else {\n    *data_ptr = &DAT_20000338;\n  }\n  initialize_serial(*data_ptr,param_value,6);\n  if (1 < *(byte *)((int)data_ptr + 6)) {\n    process_data(*(byte *)((int)data_ptr + 6),1);\n    apply_conditional_param_value(*(undefined *)((int)data_ptr + 6),0);\n  }\n  do {\n    loop_condition = (**(code **)(**data_ptr + 0xc))();\n  } while (-1 < loop_condition);\n  *(undefined *)((int)data_ptr + 0x49) = 0;\n  *(undefined *)((int)data_ptr + 0x4a) = 0;\n  *(undefined2 *)(data_ptr + 0x15) = 0;\n  *(undefined2 *)((int)data_ptr + 0x52) = 0;\n  *(undefined2 *)(data_ptr + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_and_process_data_08000600",
                "param_1": "data_ptr",
                "param_2": "param_value",
                "cVar1": "data_char",
                "iVar2": "loop_condition",
                "initialize_serial_08004388": "initialize_serial",
                "process_data_08004110": "process_data",
                "apply_conditional_param_value_080041bc": "apply_conditional_param_value"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataPointer,undefined value,int limit,undefined param)\n\n{\n  *(undefined *)(dataPointer + 4) = value;\n  if (3 < limit) {\n    limit = 0;\n  }\n  *(char *)(dataPointer + 5) = (char)limit;\n  *(undefined *)(dataPointer + 6) = param;\n  *(undefined2 *)(dataPointer + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "limit",
                "param_4": "param"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_data_08000682",
            "code": "\nundefined4 initialize_data_08000682(undefined4 input_parameter)\n\n{\n  initialize_data_08000682_0800066c();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_data_08000682",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "initialize_if_param_is_one_08000690",
            "code": "\nvoid initialize_if_param_is_one_08000690(int is_param_one,int param_two,undefined4 param_three,undefined4 param_four)\n\n{\n  if (is_param_one != 1) {\n    return;\n  }\n  if (param_two == 0xffff) {\n    initialize_data(&DAT_20000124,1,0,0,param_four);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "initialize_if_param_is_one_08000690",
                "param_1": "is_param_one",
                "param_2": "param_two",
                "param_3": "param_three",
                "param_4": "param_four",
                "initialize_data_08000682": "initialize_data"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_data_080006b4",
            "code": "\nint process_data_080006b4(int **data)\n\n{\n  bool exceedLimit;\n  undefined result;\n  int returnValue;\n  byte currentIndex;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    apply_conditional_param_value_080041bc(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    exceedLimit = false;\n    while (returnValue = (**(code **)(**data + 8))(), returnValue != 0) {\n      currentIndex = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + currentIndex + 9) = result;\n      currentIndex = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = currentIndex;\n      if (0x3f < currentIndex) {\n        exceedLimit = true;\n      }\n    }\n  }\n  else {\n    exceedLimit = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (exceedLimit) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_data_080006b4",
                "param_1": "data",
                "bVar1": "exceedLimit",
                "uVar2": "result",
                "iVar3": "returnValue",
                "bVar4": "currentIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculateChecksum_08000728(int data,int length)\n\n{\n  byte bitIndex;\n  uint checksum;\n  uint bitValue;\n  uint index;\n  \n  checksum = 0xffff;\n  for (index = 0; (int)index < length; index = index + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(data + index + 9);\n    for (bitIndex = 1; bitIndex < 9; bitIndex = bitIndex + 1) {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "data",
                "param_2": "length",
                "bVar1": "bitIndex",
                "uVar2": "checksum",
                "uVar3": "bitValue",
                "uVar4": "index"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_checksum_and_apply_param_0800076c",
            "code": "\nvoid updateChecksumAndApplyParam_0800076c(int **paramArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 checksum;\n  int loopCounter;\n  uint byteIndex;\n  \n  byteIndex = (uint)*(byte *)((int)paramArray + 0x49);\n  checksum = calculate_checksum_08000728(paramArray,byteIndex,param3,param4,param4);\n  *(char *)((int)paramArray + byteIndex + 9) = (char)((ushort)checksum >> 8);\n  byteIndex = byteIndex + 1 & 0xff;\n  *(char *)((int)paramArray + byteIndex + 9) = (char)checksum;\n  *(char *)((int)paramArray + 0x49) = (char)byteIndex + '\\x01';\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    apply_conditional_param_value_080041bc(*(byte *)((int)paramArray + 6),1);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    (**(code **)(**paramArray + 4))(*paramArray,(int)paramArray + 9,*(undefined *)((int)paramArray + 0x49));\n  }\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    apply_conditional_param_value_080041bc(*(byte *)((int)paramArray + 6),0);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    do {\n      loopCounter = (**(code **)(**paramArray + 0xc))();\n    } while (-1 < loopCounter);\n  }\n  *(undefined *)((int)paramArray + 0x49) = 0;\n  loopCounter = initialize_data_08004204();\n  paramArray[0x17] = (int *)(loopCounter + (uint)*(ushort *)((int)paramArray + 0x56));\n  *(short *)((int)paramArray + 0x52) = *(short *)((int)paramArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_checksum_and_apply_param_0800076c",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "checksum",
                "iVar2": "loopCounter",
                "uVar3": "byteIndex"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_conditions_080007f0",
            "code": "\nundefined4 check_conditions_080007f0(int input_value,undefined4 param2,uint param3,undefined4 param4)\n\n{\n  bool is_valid;\n  byte combined_value;\n  char shifted_value1;\n  char shifted_value2;\n  int combined_value1;\n  uint counter;\n  int combined_value2;\n  \n  counter = 0;\n  do {\n    if (7 < counter) {\n      is_valid = false;\nLAB_0800080a:\n      if (!is_valid) {\n        *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n        return 1;\n      }\n      combined_value2 = *(byte *)(input_value + 10) - 1;\n      switch(*(byte *)(input_value + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        shifted_value1 = combine_value_with_shift_08004640(*(undefined *)(input_value + 0xb),*(undefined *)(input_value + 0xc),param3,\n                             combined_value2,param4);\n        shifted_value2 = combine_value_with_shift_08004640(*(undefined *)(input_value + 0xd),*(undefined *)(input_value + 0xe));\n        if (*(byte *)(input_value + 0x60) < (byte)(shifted_value2 + shifted_value1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        combined_value2 = combine_value_with_shift_08004640(*(undefined *)(input_value + 0xb),*(undefined *)(input_value + 0xc),param3,\n                             combined_value2,param4);\n        if ((uint)*(byte *)(input_value + 0x60) < (uint)(combined_value2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        combined_value = combine_value_with_shift_08004640(*(undefined *)(input_value + 0xb),*(undefined *)(input_value + 0xc),param3,\n                             combined_value2,param4);\n        if (*(byte *)(input_value + 0x60) < combined_value) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    param3 = (uint)*(byte *)(input_value + 10);\n    if ((byte)(&DAT_08005a10)[counter] == param3) {\n      is_valid = true;\n      goto LAB_0800080a;\n    }\n    counter = counter + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  combined_value2 = combine_value_with_shift_08004640(*(undefined *)(input_value + 0xb),*(undefined *)(input_value + 0xc),param3,combined_value2,\n                       param4);\n  combined_value1 = combine_value_with_shift_08004640(*(undefined *)(input_value + 0xd),*(undefined *)(input_value + 0xe));\n  if ((uint)*(byte *)(input_value + 0x60) <\n      (((uint)(combined_value2 << 0xc) >> 0x10) + ((uint)(combined_value1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_conditions_080007f0",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "is_valid",
                "bVar2": "combined_value",
                "cVar3": "shifted_value1",
                "cVar4": "shifted_value2",
                "iVar5": "combined_value1",
                "uVar6": "counter",
                "iVar7": "combined_value2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_and_modify_data_080008cc",
            "code": "\nvoid copyAndModifyData_080008cc(int dataPointer,undefined newData)\n\n{\n  *(undefined *)(dataPointer + 9) = *(undefined *)(dataPointer + 4);\n  *(byte *)(dataPointer + 10) = *(byte *)(dataPointer + 10) ^ 0x80;\n  *(undefined *)(dataPointer + 0xb) = newData;\n  *(undefined *)(dataPointer + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "param_1": "dataPointer",
                "param_2": "newData"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "combine_and_shift_values_080008e2",
            "code": "\nint combineAndShiftValues_080008e2(int inputArray,int comparisonArray,undefined4 param3,undefined4 param4)\n\n{\n  int combinedValue;\n  uint shiftedValue;\n  uint count;\n  uint bitCount;\n  char shiftedChar;\n  int temp;\n  \n  combinedValue = combine_value_with_shift_08004640(*(undefined *)(inputArray + 0xb),*(undefined *)(inputArray + 0xc),param3,param4,\n                       param4);\n  shiftedValue = combine_value_with_shift_08004640(*(undefined *)(inputArray + 0xd),*(undefined *)(inputArray + 0xe));\n  shiftedChar = (char)((shiftedValue << 0x15) >> 0x18);\n  if ((shiftedValue & 7) != 0) {\n    shiftedChar = shiftedChar + '\\x01';\n  }\n  *(char *)(inputArray + 0xb) = shiftedChar;\n  *(undefined *)(inputArray + 0x49) = 3;\n  bitCount = 0;\n  for (count = 0; (int)count < (int)shiftedValue; count = count + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(comparisonArray + ((count + combinedValue) * 0x100000 >> 0x18) * 2) >>\n         (count + combinedValue & 0xf) & 1U) == 0) {\n      temp = (uint)*(byte *)(inputArray + 0x49) + inputArray;\n      *(byte *)(temp + 9) = *(byte *)(temp + 9) & ~(byte)(1 << bitCount);\n    }\n    else {\n      temp = (uint)*(byte *)(inputArray + 0x49) + inputArray;\n      *(byte *)(temp + 9) = *(byte *)(temp + 9) | (byte)(1 << bitCount);\n    }\n    bitCount = bitCount + 1 & 0xff;\n    if (7 < bitCount) {\n      *(char *)(inputArray + 0x49) = *(char *)(inputArray + 0x49) + '\\x01';\n      bitCount = 0;\n    }\n  }\n  if ((shiftedValue & 7) != 0) {\n    *(char *)(inputArray + 0x49) = *(char *)(inputArray + 0x49) + '\\x01';\n  }\n  shiftedChar = *(char *)(inputArray + 0x49);\n  updateChecksumAndApplyParam(inputArray);\n  return (int)(char)(shiftedChar + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "combine_and_shift_values_080008e2",
                "param_1": "inputArray",
                "param_2": "comparisonArray",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "combinedValue",
                "uVar2": "shiftedValue",
                "uVar3": "count",
                "uVar4": "bitCount",
                "cVar5": "shiftedChar",
                "iVar6": "temp",
                "update_checksum_and_apply_param_0800076c": "updateChecksumAndApplyParam"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "update_and_shift_values_08000998",
            "code": "\nint update_and_shift_values_08000998(int input_ptr,int data_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  byte temp_byte;\n  char temp_char;\n  byte result_1;\n  byte result_2;\n  uint counter_1;\n  uint counter_2;\n  \n  result_1 = combine_value_with_shift_08004640(*(undefined *)(input_ptr + 0xb),*(undefined *)(input_ptr + 0xc),param_3,param_4,\n                       param_4);\n  result_2 = combine_value_with_shift_08004640(*(undefined *)(input_ptr + 0xd),*(undefined *)(input_ptr + 0xe));\n  *(byte *)(input_ptr + 0xb) = result_2 << 1;\n  *(undefined *)(input_ptr + 0x49) = 3;\n  for (counter_1 = (uint)result_1; counter_1 < (uint)result_1 + (uint)result_2; counter_1 = counter_1 + 1 & 0xff) {\n    temp_byte = *(byte *)(input_ptr + 0x49);\n    *(char *)(input_ptr + (uint)temp_byte + 9) = (char)((ushort)*(undefined2 *)(data_ptr + counter_1 * 2) >> 8)\n    ;\n    counter_2 = temp_byte + 1 & 0xff;\n    temp_char = (char)counter_2;\n    *(char *)(input_ptr + 0x49) = temp_char;\n    *(undefined *)(input_ptr + counter_2 + 9) = *(undefined *)(data_ptr + counter_1 * 2);\n    *(char *)(input_ptr + 0x49) = temp_char + '\\x01';\n  }\n  temp_char = *(char *)(input_ptr + 0x49);\n  update_checksum_and_apply_param_0800076c(input_ptr);\n  return (int)(char)(temp_char + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "update_and_shift_values_08000998",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "bVar1": "temp_byte",
                "cVar2": "temp_char",
                "bVar3": "result_1",
                "bVar4": "result_2",
                "uVar5": "counter_1",
                "uVar6": "counter_2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_value_in_array_08000a00",
            "code": "\nundefined4 update_value_in_array_08000a00(int address,int array,undefined4 value,undefined4 mask)\n\n{\n  uint combined_value;\n  uint shifted_value;\n  \n  combined_value = combine_value_with_shift_08004640(*(undefined *)(address + 0xb),*(undefined *)(address + 0xc),value,mask,\n                       mask);\n  shifted_value = (combined_value << 0x14) >> 0x18;\n  if (*(char *)(address + 0xd) == -1) {\n    *(ushort *)(array + shifted_value * 2) =\n         (ushort)(1 << (combined_value & 0xf)) | *(ushort *)(array + shifted_value * 2);\n  }\n  else {\n    *(ushort *)(array + shifted_value * 2) =\n         *(ushort *)(array + shifted_value * 2) & ~(ushort)(1 << (combined_value & 0xf));\n  }\n  *(undefined *)(address + 0x49) = 6;\n  update_checksum_and_apply_param(address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_value_in_array_08000a00",
                "param_1": "address",
                "param_2": "array",
                "param_3": "value",
                "param_4": "mask",
                "uVar1": "combined_value",
                "uVar2": "shifted_value",
                "update_checksum_and_apply_param_0800076c": "update_checksum_and_apply_param"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "combine_and_store_values_08000a4e",
            "code": "\nundefined4 combineAndStoreValues_08000a4e(int inputPointer,int outputPointer)\n\n{\n  byte combinedShiftedValue;\n  undefined2 combinedShiftedValue2;\n  \n  combinedShiftedValue = combine_value_with_shift_08004640(*(undefined *)(inputPointer + 0xb),*(undefined *)(inputPointer + 0xc));\n  combinedShiftedValue2 = combine_value_with_shift_08004640(*(undefined *)(inputPointer + 0xd),*(undefined *)(inputPointer + 0xe));\n  *(undefined2 *)(outputPointer + (uint)combinedShiftedValue * 2) = combinedShiftedValue2;\n  *(undefined *)(inputPointer + 0x49) = 6;\n  update_checksum_and_apply_param_0800076c(inputPointer);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "combine_and_store_values_08000a4e",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "bVar1": "combinedShiftedValue",
                "uVar2": "combinedShiftedValue2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "combine_and_shift_values_08000a7a",
            "code": "\nundefined4 combineAndShiftValues_08000a7a(int inputBuffer,int outputBuffer,undefined4 param3,undefined4 param4)\n\n{\n  int combinedShiftedValue1;\n  int combinedShiftedValue2;\n  uint loopCounter;\n  uint bitShiftCounter;\n  uint bitPosition;\n  uint bufferIndex;\n  uint byteIndex;\n  \n  combinedShiftedValue1 = combine_value_with_shift_08004640(*(undefined *)(inputBuffer + 0xb),*(undefined *)(inputBuffer + 0xc),param3,param4,\n                       param4);\n  combinedShiftedValue2 = combine_value_with_shift_08004640(*(undefined *)(inputBuffer + 0xd),*(undefined *)(inputBuffer + 0xe));\n  bitShiftCounter = 0;\n  byteIndex = 7;\n  for (loopCounter = 0; (int)loopCounter < combinedShiftedValue2; loopCounter = loopCounter + 1 & 0xffff) {\n    bufferIndex = (loopCounter + combinedShiftedValue1) * 0x100000 >> 0x18;\n    bitPosition = loopCounter + combinedShiftedValue1 & 0xf;\n    if (((int)(uint)*(byte *)(inputBuffer + byteIndex + 9) >> bitShiftCounter & 1U) == 0) {\n      *(ushort *)(outputBuffer + bufferIndex * 2) = *(ushort *)(outputBuffer + bufferIndex * 2) & ~(ushort)(1 << bitPosition);\n    }\n    else {\n      *(ushort *)(outputBuffer + bufferIndex * 2) = (ushort)(1 << bitPosition) | *(ushort *)(outputBuffer + bufferIndex * 2);\n    }\n    bitShiftCounter = bitShiftCounter + 1 & 0xff;\n    if (7 < bitShiftCounter) {\n      byteIndex = byteIndex + 1 & 0xff;\n      bitShiftCounter = 0;\n    }\n  }\n  *(undefined *)(inputBuffer + 0x49) = 6;\n  update_checksum_and_apply_param_0800076c(inputBuffer);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "combine_and_shift_values_08000a7a",
                "param_1": "inputBuffer",
                "param_2": "outputBuffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "combinedShiftedValue1",
                "iVar2": "combinedShiftedValue2",
                "uVar3": "loopCounter",
                "uVar4": "bitShiftCounter",
                "uVar5": "bitPosition",
                "uVar6": "bufferIndex",
                "uVar7": "byteIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "process_data_08000b04",
            "code": "\nint processData_08000b04(int inputOffset,int outputOffset)\n\n{\n  byte byte1;\n  byte byte2;\n  char char1;\n  undefined2 combinedValue;\n  uint index;\n  \n  byte1 = *(byte *)(inputOffset + 0xc);\n  byte2 = *(byte *)(inputOffset + 0xe);\n  *(undefined *)(inputOffset + 0xd) = 0;\n  *(byte *)(inputOffset + 0xe) = byte2;\n  *(undefined *)(inputOffset + 0x49) = 6;\n  for (index = 0; index < byte2; index = index + 1 & 0xff) {\n    combinedValue = combine_value_with_shift_08004640(*(undefined *)(index * 2 + inputOffset + 0x10),\n                         *(undefined *)(inputOffset + (index + 4) * 2 + 9));\n    *(undefined2 *)(outputOffset + (byte1 + index) * 2) = combinedValue;\n  }\n  char1 = *(char *)(inputOffset + 0x49);\n  update_checksum_and_apply_param_0800076c(inputOffset);\n  return (int)(char)(char1 + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "process_data_08000b04",
                "param_1": "inputOffset",
                "param_2": "outputOffset",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "cVar3": "char1",
                "uVar4": "combinedValue",
                "uVar5": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_data_08000b54",
            "code": "\nint process_data_08000b54(int **parameter_array,int *data_array,undefined4 param_3)\n\n{\n  byte byte_value;\n  int result;\n  uint condition_value;\n  int returnValue;\n  \n  parameter_array[0x13] = data_array;\n  *(char *)(parameter_array + 0x18) = (char)param_3;\n  if (*(byte *)((int)parameter_array + 5) < 4) {\n    byte_value = (**(code **)(**parameter_array + 8))();\n    condition_value = (uint)byte_value;\n  }\n  if (condition_value == 0) {\n    returnValue = 0;\n  }\n  else if ((int)condition_value < 8) {\n    returnValue = 0;\n  }\n  else {\n    returnValue = process_data_08000b54_080006b4(parameter_array);\n    *(char *)(parameter_array + 2) = (char)returnValue;\n    if (*(char *)((int)parameter_array + 9) == *(char *)(parameter_array + 1)) {\n      result = check_conditions_080007f0(parameter_array);\n      if (result < 1) {\n        result = initialize_data_08004204();\n        parameter_array[0x17] = (int *)((uint)*(ushort *)((int)parameter_array + 0x56) + result);\n        *(undefined *)(parameter_array + 2) = 0;\n        switch(*(undefined *)((int)parameter_array + 10)) {\n        case 1:\n        case 2:\n          returnValue = combine_and_shift_values_080008e2(parameter_array,data_array,param_3);\n          break;\n        case 3:\n        case 4:\n          returnValue = update_and_shift_values_08000998(parameter_array,data_array,param_3);\n          break;\n        case 5:\n          returnValue = update_value_in_array_08000a00(parameter_array,data_array,param_3);\n          break;\n        case 6:\n          returnValue = combine_and_store_values_08000a4e(parameter_array,data_array,param_3);\n          break;\n        case 0xf:\n          returnValue = combine_and_shift_values_08000a7a(parameter_array,data_array,param_3);\n          break;\n        case 0x10:\n          returnValue = process_data_08000b54_08000b04(parameter_array,data_array,param_3);\n        }\n      }\n      else {\n        if (result != 0xff) {\n          copy_and_modify_data_080008cc(parameter_array,result);\n          update_checksum_and_apply_param_0800076c(parameter_array);\n        }\n        *(char *)(parameter_array + 2) = (char)result;\n        returnValue = (int)(char)result;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "param_1": "parameter_array",
                "param_2": "data_array",
                "bVar1": "byte_value",
                "iVar2": "result",
                "unaff_r5": "condition_value",
                "iVar3": "returnValue"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_and_execute_data_processing_08000c4c",
            "code": "\nvoid initialize_and_execute_data_processing_08000c4c(void)\n\n{\n  execute_interrupt(0);\n  initialize_and_process_data(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_and_execute_data_processing_08000c4c",
                "execute_interrupt_080005e4": "execute_interrupt",
                "initialize_and_process_data_08000600": "initialize_and_process_data"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "process_data_08000c64",
            "code": "\nvoid process_data_08000c64(void)\n\n{\n  undefined4 unused_parameter;\n  \n  process_data_08000c64_08000b54(&DAT_20000124,&DAT_20000004,0x10,unused_parameter,unused_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "process_data_08000c64",
                "in_r3": "unused_parameter"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_application_08000c8c",
            "code": "\n\n\nvoid initialize_application_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 flag;\n  undefined4 memory_size;\n  undefined4 config_parameter_1;\n  undefined4 config_parameter_2;\n  undefined4 config_parameter_3;\n  undefined4 config_parameter_4;\n  undefined4 config_parameter_5;\n  undefined4 config_parameter_6;\n  undefined4 update_settings_param_1;\n  undefined4 update_settings_param_2;\n  undefined4 update_settings_param_3;\n  undefined4 update_settings_param_4;\n  undefined4 update_settings_param_5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag = 1;\n  memory_size = 0x50000;\n  config_parameter_1 = 2;\n  config_parameter_2 = 0x400000;\n  config_parameter_3 = 8;\n  config_parameter_4 = 0x150;\n  config_parameter_5 = 2;\n  config_parameter_6 = 7;\n  validate_configuration(&flag);\n  check_memory_data_validity();\n  update_settings_param_1 = 0xf;\n  update_settings_param_2 = 2;\n  update_settings_param_3 = 0;\n  update_settings_param_4 = 0x1400;\n  update_settings_param_5 = 0x1000;\n  update_settings(&update_settings_param_1,5);\n  uVar1 = get_data_value();\n  initialize_data(uVar1 / 1000);\n  set_flag_for_parameter(4);\n  update_data_entry(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_application_08000c8c",
                "local_54": "flag",
                "local_50": "memory_size",
                "local_3c": "config_parameter_1",
                "local_38": "config_parameter_2",
                "local_34": "config_parameter_3",
                "local_30": "config_parameter_4",
                "local_2c": "config_parameter_5",
                "local_28": "config_parameter_6",
                "local_24": "update_settings_param_1",
                "local_20": "update_settings_param_2",
                "local_1c": "update_settings_param_3",
                "local_18": "update_settings_param_4",
                "local_14": "update_settings_param_5",
                "validate_configuration_0800201c": "validate_configuration",
                "check_memory_data_validity_08001f9c": "check_memory_data_validity",
                "update_settings_08002488": "update_settings",
                "get_data_value_080025e0": "get_data_value",
                "initialize_data_08000ee0": "initialize_data",
                "set_flag_for_parameter_08000f2c": "set_flag_for_parameter",
                "update_data_entry_08000e60": "update_data_entry"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_080035bc();\n  execute_functions_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  execute_data_processing_loop_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_application_08000d8e",
            "code": "\nvoid initialize_application_08000d8e(void)\n\n{\n  initialize_application_08000d8e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_application_08000d8e",
                "initialize_application_080034ce": "initialize_application"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "initialize_and_update_data_08000d98",
            "code": "\nundefined4 initializeAndUpdateData_08000d98(uint entryValue)\n\n{\n  int dataInitializationResult;\n  \n  dataInitializationResult = initialize_data_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (dataInitializationResult != 0) {\n    return 1;\n  }\n  if (0xf < entryValue) {\n    return 1;\n  }\n  update_data_entry_08000e60(0xffffffff,entryValue,0);\n  DAT_20000028 = entryValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "initialize_and_update_data_08000d98",
                "param_1": "entryValue",
                "iVar1": "dataInitializationResult"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_and_update_08000de4",
            "code": "\n\n\nundefined4 initialize_and_update_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  update_data(3);\n  initialize_and_update_08000de4_data(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_and_update_08000de4",
                "update_data_08000e3c": "update_data",
                "initialize_and_update_data_08000d98": "initialize_and_update_data"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "addition_operation_08000e18",
            "code": "\nvoid additionOperation_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "addition_operation_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_from_memory_08000e30",
            "code": "\nundefined4 get_data_from_memory_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_from_memory_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_data_08000e3c",
            "code": "\n\n\nvoid updateData_08000e3c(uint input)\n\n{\n  _DAT_e000ed0c = (input & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_data_08000e3c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_data_entry_08000e60",
            "code": "\n\n\nvoid updateDataEntry_08000e60(uint entryPointerLocation,uint dataValue1,uint dataValue2)\n\n{\n  uint shiftCount;\n  uint counter;\n  \n  shiftCount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  counter = 7 - shiftCount;\n  if (3 < counter) {\n    counter = 4;\n  }\n  if (shiftCount + 4 < 7) {\n    shiftCount = 0;\n  }\n  else {\n    shiftCount = shiftCount - 3;\n  }\n  shiftCount = (dataValue1 & (1 << (counter & 0xff)) - 1U) << (shiftCount & 0xff) |\n          (1 << (shiftCount & 0xff)) - 1U & dataValue2;\n  if ((int)entryPointerLocation < 0) {\n    *(char *)((entryPointerLocation & 0xf) + 0xe000ed14) = (char)(shiftCount << 4);\n  }\n  else {\n    *(char *)(entryPointerLocation + 0xe000e400) = (char)(shiftCount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_data_entry_08000e60",
                "param_1": "entryPointerLocation",
                "param_2": "dataValue1",
                "param_3": "dataValue2",
                "uVar1": "shiftCount",
                "uVar2": "counter"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_at_position_08000ec4",
            "code": "\nvoid setBitAtPosition_08000ec4(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_at_position_08000ec4",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_data_08000ee0",
            "code": "\n\n\nundefined4 initializeData_08000ee0(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_data_08000ee0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_in_memory_08000f0c",
            "code": "\nvoid setBitInMemory_08000f0c(uint inputNum)\n\n{\n  if (-1 < signedInputNum) {\n    *(int *)(((inputNum >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputNum & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_in_memory_08000f0c",
                "param_1": "inputNum",
                "(int)param_1": "signedInputNum"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "set_flag_for_parameter_08000f2c",
            "code": "\n\n\nvoid setFlagForParameter_08000f2c(int parameter)\n\n{\n  if (parameter != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "set_flag_for_parameter_08000f2c",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_initialization_08000f4e",
            "code": "\nvoid executeInitialization_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_initialization_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_data_08000f56",
            "code": "\nundefined4 initializeData_08000f56(int dataPtr)\n\n{\n  if (dataPtr != 0) {\n    *(undefined *)(dataPtr + 4) = 2;\n    clearFlag();\n    *(undefined4 *)(dataPtr + 0x10) = 0;\n    *(undefined *)(dataPtr + 4) = 0;\n    *(undefined *)(dataPtr + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_data_08000f56",
                "param_1": "dataPtr",
                "clear_data_flag_080033c8": "clearFlag"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **inputData,uint bitPosition)\n\n{\n  **inputData = **inputData & ~(1 << (bitPosition & 0xff));\n  *(undefined *)(inputData + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "inputData",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_08000f8c",
            "code": "\nundefined4 updateParam_08000f8c(uint **param)\n\n{\n  if (*(char *)((int)param + 0x35) != '\\x02') {\n    param[0x15] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)param + 0x35) = 5;\n  **param = **param & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_08000f8c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "FUNC_08000fb4",
            "code": "\n\n\nvoid FUNC_08000fb4(uint *param_1,uint *param_2)\n\n{\n  uint uVar1;\n  uint uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  int iVar8;\n  \n  for (uVar3 = 0; uVar3 < 0x10; uVar3 = uVar3 + 1) {\n    uVar2 = 1 << (uVar3 & 0xff);\n    uVar4 = uVar2 & *param_2;\n    uVar1 = _DAT_40013c0c;\n    if (uVar2 == uVar4) {\n      if ((param_2[1] == 2) || (param_2[1] == 0x12)) {\n        iVar6 = (uVar3 >> 3) + 8;\n        iVar8 = (uVar3 & 7) << 2;\n        param_1[iVar6] = param_1[iVar6] & ~(0xf << iVar8) | param_2[4] << iVar8;\n      }\n      uVar7 = uVar3 << 1;\n      uVar1 = ~(3 << (uVar7 & 0xff));\n      *param_1 = *param_1 & uVar1 | (param_2[1] & 3) << (uVar7 & 0xff);\n      uVar5 = param_2[1];\n      if (((uVar5 - 1 < 2) || (uVar5 == 0x11)) || (uVar5 == 0x12)) {\n        param_1[2] = param_1[2] & uVar1 | param_2[3] << (uVar7 & 0xff);\n        param_1[1] = param_1[1] & ~uVar2 | ((param_2[1] << 0x1b) >> 0x1f) << (uVar3 & 0xff);\n      }\n      param_1[3] = uVar1 & param_1[3] | param_2[2] << (uVar7 & 0xff);\n      uVar1 = _DAT_40013c0c;\n      if ((param_2[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        iVar8 = (uVar3 & 3) << 2;\n        if (param_1 == (uint *)0x40020000) {\n          iVar6 = 0;\n        }\n        else if (param_1 == (uint *)0x40020400) {\n          iVar6 = 1;\n        }\n        else if (param_1 == (uint *)0x40020800) {\n          iVar6 = 2;\n        }\n        else if (param_1 == (uint *)0x40020c00) {\n          iVar6 = 3;\n        }\n        else if (param_1 == (uint *)0x40021000) {\n          iVar6 = 4;\n        }\n        else if (param_1 == (uint *)0x40021400) {\n          iVar6 = 5;\n        }\n        else if (param_1 == (uint *)0x40021800) {\n          iVar6 = 6;\n        }\n        else if (param_1 == (uint *)0x40021c00) {\n          iVar6 = 7;\n        }\n        else if (param_1 == (uint *)0x40022000) {\n          iVar6 = 8;\n        }\n        else if (param_1 == (uint *)0x40022400) {\n          iVar6 = 9;\n        }\n        else {\n          iVar6 = 10;\n        }\n        *(uint *)(((uVar3 >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((uVar3 >> 2) + 2) * 4 + 0x40013800) & ~(0xf << iVar8) | iVar6 << iVar8;\n        uVar1 = ~uVar4;\n        uVar2 = _DAT_40013c00 & uVar1;\n        if ((param_2[1] & 0x10000) != 0) {\n          uVar2 = uVar4 | _DAT_40013c00;\n        }\n        uVar5 = uVar1 & _DAT_40013c04;\n        if ((param_2[1] & 0x20000) != 0) {\n          uVar5 = uVar4 | _DAT_40013c04;\n        }\n        uVar7 = uVar1 & _DAT_40013c08;\n        if ((param_2[1] & 0x100000) != 0) {\n          uVar7 = uVar4 | _DAT_40013c08;\n        }\n        _DAT_40013c00 = uVar2;\n        _DAT_40013c04 = uVar5;\n        _DAT_40013c08 = uVar7;\n        uVar1 = uVar1 & _DAT_40013c0c;\n        if ((param_2[1] & 0x200000) != 0) {\n          uVar1 = uVar4 | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = uVar1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "FUNC_08000fb4"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid setParamValue_08001198(int objectPtr,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    *(int *)(objectPtr + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(objectPtr + 0x18) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "objectPtr",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_and_process_if_bits_set_080011a4",
            "code": "\n\n\nvoid update_and_process_if_bits_set_080011a4(uint bits_to_update)\n\n{\n  if ((_DAT_40013c14 & bits_to_update) != 0) {\n    _DAT_40013c14 = bits_to_update;\n    process_if_bits_set_080047d0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_and_process_if_bits_set_080011a4",
                "param_1": "bits_to_update"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_parameter_value_080011c0",
            "code": "\nundefined4 updateParameterValue_080011c0(int *paramArray)\n\n{\n  if (*(char *)((int)paramArray + 0x3e) == '@') {\n    if (paramArray[0x14] == 0) {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xffU | 1;\n    }\n  }\n  else if (paramArray[4] == 0x4000) {\n    if (*(char *)((int)paramArray + 0x3d) == '!') {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xfe;\n    }\n    else {\n      *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xffU | 1;\n    }\n  }\n  else if (paramArray[0x14] == 0) {\n    *(uint *)(*paramArray + 0x10) = (uint)(paramArray[0x11] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (paramArray[0x14] == 1) {\n    *(uint *)(*paramArray + 0x10) = (uint)(paramArray[0x11] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_parameter_value_080011c0",
                "param_1": "paramArray",
                "param_1[0x14]": "paramArray[0x14]",
                "param_1[0x11]": "paramArray[0x11]",
                "param_1[4]": "paramArray[4]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "update_memory_with_param_0800124a",
            "code": "\nundefined4 updateMemoryWithParam_0800124a(int *memoryPtr)\n\n{\n  *(uint *)(*memoryPtr + 0x10) = paramValue & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "update_memory_with_param_0800124a",
                "param_1": "memoryPtr",
                "param_1[0x11]": "paramValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "check_input_and_modify_flags_08001256",
            "code": "\nundefined4 checkInputAndModifyFlags_08001256(uint **input)\n\n{\n  uint *flagAddress;\n  \n  flagAddress = input[0xb];\n  if ((*(char *)((int)input + 0x3d) == '\\\"') &&\n     ((flag1 != (uint *)0x0 || (*(char *)((int)input + 0x3e) != '@')))) {\n    if ((flag1 == (uint *)0x0) && (flag2 == (uint *)0xc000)) {\n      **input = **input | 0x100;\n      flag1 = (uint *)((int)flag1 + 1);\n    }\n    else {\n      if (*(short *)((int)input + 0x2a) == 0) {\n        **input = **input | 0x200;\n      }\n      else if (*(short *)((int)input + 0x2a) == 1) {\n        if (flagAddress == (uint *)0xffff0000) {\n          **input = **input & 0xfffffbff;\n          flagAddress = *input;\n          if ((flagAddress[1] & 0x800) == 0) {\n            *flagAddress = *flagAddress | 0x200;\n          }\n          else {\n            *flagAddress = *flagAddress & 0xfffffbff;\n          }\n        }\n        else if (((flagAddress == (uint *)0x4) || (flagAddress == (uint *)0x8)) ||\n                (flag3 == (uint *)0x12)) {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x200;\n        }\n        else if (input[0xb] == (uint *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)input + 0x2a) == 2) {\n        if (input[0xb] == (uint *)0x2) {\n          **input = **input | 0x400;\n        }\n        else {\n          **input = **input & 0xfffffbff;\n          **input = **input | 0x800;\n        }\n        flagAddress = *input;\n        if ((flagAddress[1] & 0x800) != 0) {\n          flagAddress[1] = flagAddress[1] | 0x1000;\n        }\n      }\n      else {\n        **input = **input | 0x400;\n        flagAddress = *input;\n        if ((flagAddress[1] & 0x800) != 0) {\n          flagAddress[1] = flagAddress[1] | 0x1000;\n        }\n      }\n      flag1 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "check_input_and_modify_flags_08001256",
                "param_1": "input",
                "puVar1": "flagAddress",
                "param_1[0x14]": "flag1",
                "param_1[4]": "flag2",
                "param_1[0xc]": "flag3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "process_data_08001420",
            "code": "\nundefined4 processData_08001420(int *data)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtr = (byte *)data[9];\n    data[9] = (int)(bytePtr + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePtr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "process_data_08001420",
                "param_1": "data",
                "pbVar1": "bytePtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "modify_array_08001440",
            "code": "\nundefined4 modifyArray_08001440(int *array)\n\n{\n  undefined *ptrToElement;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptrToElement = (undefined *)array[9];\n    array[9] = (int)(ptrToElement + 1);\n    *ptrToElement = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "modify_array_08001440",
                "param_1": "array",
                "puVar1": "ptrToElement"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "process_params_08001460",
            "code": "\nundefined4 processParams_08001460(uint **parameter,uint *inputArray,int arraySize,uint *outputArray)\n\n{\n  undefined4 returnValue;\n  uint *pointerVar;\n  \n  if (*(char *)((int)parameter + 0x3d) == '(') {\n    if (inputArray == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (arraySize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(parameter + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(parameter + 0xf) = 1;\n      pointerVar = *parameter;\n      if ((*pointerVar & 1) == 0) {\n        *pointerVar = *pointerVar | 1;\n      }\n      **parameter = **parameter & 0xfffff7ff;\n      *(undefined *)((int)parameter + 0x3d) = 0x29;\n      *(undefined *)((int)parameter + 0x3e) = 0x20;\n      returnValue = 0;\n      parameter[0x10] = (uint *)0x0;\n      parameter[9] = inputArray;\n      *(short *)((int)parameter + 0x2a) = (short)arraySize;\n      parameter[0xb] = outputArray;\n      *(undefined2 *)(parameter + 10) = *(undefined2 *)((int)parameter + 0x2a);\n      *(undefined *)(parameter + 0xf) = 0;\n      (*parameter)[1] = (*parameter)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001460": "process_params_08001460",
                "param_1": "parameter",
                "param_2": "inputArray",
                "param_3": "arraySize",
                "param_4": "outputArray",
                "uVar1": "returnValue",
                "puVar2": "pointerVar"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "initialize_parameter_080014ec",
            "code": "\nundefined4 initializeParameter_080014ec(uint **parameter1,uint *parameter2,int parameter3,uint *parameter4)\n\n{\n  undefined4 returnValue;\n  uint *pointerVar;\n  \n  if (*(char *)((int)parameter1 + 0x3d) == '(') {\n    if (parameter2 == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (parameter3 == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(parameter1 + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(parameter1 + 0xf) = 1;\n      pointerVar = *parameter1;\n      if ((*pointerVar & 1) == 0) {\n        *pointerVar = *pointerVar | 1;\n      }\n      **parameter1 = **parameter1 & 0xfffff7ff;\n      *(undefined *)((int)parameter1 + 0x3d) = 0x2a;\n      *(undefined *)((int)parameter1 + 0x3e) = 0x20;\n      returnValue = 0;\n      parameter1[0x10] = (uint *)0x0;\n      parameter1[9] = parameter2;\n      *(short *)((int)parameter1 + 0x2a) = (short)parameter3;\n      parameter1[0xb] = parameter4;\n      *(undefined2 *)(parameter1 + 10) = *(undefined2 *)((int)parameter1 + 0x2a);\n      *(undefined *)(parameter1 + 0xf) = 0;\n      (*parameter1)[1] = (*parameter1)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "initialize_parameter_080014ec",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "uVar1": "returnValue",
                "puVar2": "pointerVar"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_param_08001578",
            "code": "\nundefined4 initializeParam_08001578(uint **paramList)\n\n{\n  uint *paramPtr;\n  \n  if (*(char *)((int)paramList + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)paramList + 0x3d) = 0x28;\n  paramPtr = *paramList;\n  if ((*paramPtr & 1) == 0) {\n    *paramPtr = *paramPtr | 1;\n  }\n  **paramList = **paramList | 0x400;\n  (*paramList)[1] = (*paramList)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_param_08001578",
                "param_1": "paramList",
                "puVar1": "paramPtr"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_input_080015bc",
            "code": "\nundefined4 processInput_080015bc(int *inputArray)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)inputArray + 0x3d);\n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    bytePointer = (byte *)inputArray[9];\n    inputArray[9] = (int)(bytePointer + 1);\n    *(uint *)(*inputArray + 0x10) = (uint)*bytePointer;\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    if ((*(short *)((int)inputArray + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xfffffbff;\n      inputArray[0xc] = 0x21;\n      *(undefined *)((int)inputArray + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_input_080015bc",
                "param_1": "inputArray",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "update_data_0800160e",
            "code": "\nundefined4 updateData_0800160e(int *dataPointer)\n\n{\n  char character;\n  undefined *dataPointer2;\n  \n  character = *(char *)((int)dataPointer + 0x3d);\n  if (*(short *)((int)dataPointer + 0x2a) != 0) {\n    dataPointer2 = (undefined *)dataPointer[9];\n    dataPointer[9] = (int)(dataPointer2 + 1);\n    *dataPointer2 = (char)*(undefined4 *)(*dataPointer + 0x10);\n    *(short *)((int)dataPointer + 0x2a) = *(short *)((int)dataPointer + 0x2a) + -1;\n    if ((*(short *)((int)dataPointer + 0x2a) == 0) && (character == '*')) {\n      *(uint *)(*dataPointer + 4) = *(uint *)(*dataPointer + 4) & 0xfffffbff;\n      dataPointer[0xc] = 0x22;\n      *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "update_data_0800160e",
                "param_1": "dataPointer",
                "cVar1": "character",
                "puVar2": "dataPointer2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_params_0800165a",
            "code": "\nundefined4 processParams_0800165a(int *inputParams,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined2 result;\n  uint shiftedValue;\n  \n  shiftedValue = *(uint *)(*inputParams + 0x18);\n  if ((shiftedValue & 0x80) == 0) {\n    result = *(undefined2 *)(inputParams + 3);\n  }\n  else {\n    result = *(undefined2 *)(inputParams + 6);\n  }\n  process_params_08003880(inputParams,(*(uint *)(*inputParams + 0x18) & 4) == 0,result,shiftedValue,param3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_params_0800165a",
                "param_1": "inputParams",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "handle_parameter_08001684",
            "code": "\nundefined4 handleParameter_08001684(uint **parameters)\n\n{\n  if (((parameter11 == (uint *)0x4) || (parameter11 == (uint *)0x8)) &&\n     (*(char *)((int)parameters + 0x3d) == '(')) {\n    parameter11 = (uint *)0xffff0000;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    parameters[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    executeRelevantCode();\n  }\n  else if (*(char *)((int)parameters + 0x3d) == 'exclamation') {\n    parameter11 = (uint *)0xffff0000;\n    parameters[0xc] = (uint *)0x21;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*parameters)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "handle_parameter_08001684",
                "param_1": "parameters",
                "execute_relevant_code_080038d0": "executeRelevantCode",
                "param_1[0xb]": "parameter11",
                "!": "exclamation"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "decode_and_process_data_0800171a",
            "code": "\nundefined4 decode_and_process_data_0800171a(uint **decode_data)\n\n{\n  char char_1;\n  uint *pointer_2;\n  \n  char_1 = *(char *)((int)decode_data + 0x3d);\n  pointer_2 = decode_data[0xb];\n  if ((*(short *)(decode_data + 10) == 0) && (char_1 == '!')) {\n    if ((pointer_2 == (uint *)0x4) || ((pointer_2 == (uint *)0x8 || (pointer_2 == (uint *)0xffff0000)))) {\n      (*decode_data)[1] = (*decode_data)[1] & 0xfffff8ff;\n      **decode_data = **decode_data | 0x200;\n      decode_data[0xc] = (uint *)0x0;\n      *(undefined *)((int)decode_data + 0x3d) = 0x20;\n      if (*(char *)((int)decode_data + 0x3e) == '@') {\n        *(undefined *)((int)decode_data + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)decode_data + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*decode_data)[1] = (*decode_data)[1] & 0xfffff8ff;\n      decode_data[0xc] = (uint *)0x11;\n      *(undefined *)((int)decode_data + 0x3e) = 0;\n      *(undefined *)((int)decode_data + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((char_1 == '!') || ((*(char *)((int)decode_data + 0x3e) == '@' && (char_1 == '\\\"')))) {\n    if (*(short *)((int)decode_data + 0x2a) == 0) {\n      (*decode_data)[1] = (*decode_data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)decode_data + 0x3e) == '@') {\n      if (decode_data[0x14] == (uint *)0x0) {\n        if (decode_data[0x13] == (uint *)0x1) {\n          (*decode_data)[4] = (uint)decode_data[0x12] & 0xff;\n          decode_data[0x14] = (uint *)((int)decode_data[0x14] + 2);\n        }\n        else {\n          (*decode_data)[4] = (uint)((int)decode_data[0x12] << 0x10) >> 0x18;\n          decode_data[0x14] = (uint *)((int)decode_data[0x14] + 1);\n        }\n      }\n      else if (decode_data[0x14] == (uint *)0x1) {\n        (*decode_data)[4] = (uint)decode_data[0x12] & 0xff;\n        decode_data[0x14] = (uint *)((int)decode_data[0x14] + 1);\n      }\n      else if (decode_data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)decode_data + 0x3d) == '\\\"') {\n          **decode_data = **decode_data | 0x100;\n        }\n        else if (*(char *)((int)decode_data + 0x3d) == '!') {\n          pointer_2 = decode_data[9];\n          decode_data[9] = (uint *)((int)pointer_2 + 1);\n          (*decode_data)[4] = (uint)*(byte *)pointer_2;\n          *(short *)((int)decode_data + 0x2a) = *(short *)((int)decode_data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer_2 = decode_data[9];\n      decode_data[9] = (uint *)((int)pointer_2 + 1);\n      (*decode_data)[4] = (uint)*(byte *)pointer_2;\n      *(short *)((int)decode_data + 0x2a) = *(short *)((int)decode_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "decode_and_process_data_0800171a",
                "param_1": "decode_data",
                "cVar1": "char_1",
                "puVar2": "pointer_2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_function_08001864",
            "code": "\nundefined4 processFunction_08001864(uint **arguments)\n\n{\n  uint *tempPointer;\n  \n  tempPointer = pointerArrayElement;\n  if (*(char *)((int)arguments + 0x3d) == '!') {\n    if (*(short *)((int)arguments + 0x2a) == 0) {\n      if (((tempPointer == (uint *)0x4) || (tempPointer == (uint *)0x8)) || (tempPointer == (uint *)0xffff0000)) {\n        (*arguments)[1] = (*arguments)[1] & 0xfffff8ff;\n        **arguments = **arguments | 0x200;\n        value3 = (uint *)0x0;\n        *(undefined *)((int)arguments + 0x3d) = 0x20;\n        if (*(char *)((int)arguments + 0x3e) == '@') {\n          *(undefined *)((int)arguments + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)arguments + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*arguments)[1] = (*arguments)[1] & 0xfffff8ff;\n        value3 = (uint *)0x11;\n        *(undefined *)((int)arguments + 0x3e) = 0;\n        *(undefined *)((int)arguments + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      tempPointer = pointerArrayElement;\n      pointerArrayElement = (uint *)((int)tempPointer + 1);\n      (*arguments)[4] = (uint)*(byte *)tempPointer;\n      *(short *)((int)arguments + 0x2a) = *(short *)((int)arguments + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_function_08001864",
                "param_1": "arguments",
                "puVar1": "tempPointer",
                "param_1[0xb]": "pointerArrayElement",
                "param_1[0xc]": "value3",
                "param_1[9]": "pointerArrayElement"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_param_08001904",
            "code": "\nundefined4 processParam_08001904(uint **paramArr)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)paramArr + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)paramArr + 0x2a) < 4) {\n      if (*(ushort *)((int)paramArr + 0x2a) < 2) {\n        **paramArr = **paramArr & 0xfffffbff;\n        (*paramArr)[1] = (*paramArr)[1] & 0xfffff8ff;\n        tempPtr = paramArr[9];\n        paramArr[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*paramArr)[4];\n        *(short *)((int)paramArr + 0x2a) = *(short *)((int)paramArr + 0x2a) + -1;\n        *(undefined *)((int)paramArr + 0x3d) = 0x20;\n        paramArr[0xc] = (uint *)0x0;\n        if (*(char *)((int)paramArr + 0x3e) == '@') {\n          *(undefined *)((int)paramArr + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)paramArr + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      tempPtr = paramArr[9];\n      paramArr[9] = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*paramArr)[4];\n      *(short *)((int)paramArr + 0x2a) = *(short *)((int)paramArr + 0x2a) + -1;\n      if (*(short *)((int)paramArr + 0x2a) == 3) {\n        (*paramArr)[1] = (*paramArr)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_param_08001904",
                "param_1": "paramArr",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "update_flags_and_process_data_080019a0",
            "code": "\nundefined4 updateFlagsAndProcessData_080019a0(uint **funcParams)\n\n{\n  uint *tempPtr;\n  \n  if (*(short *)((int)funcParams + 0x2a) == 4) {\n    (*funcParams)[1] = (*funcParams)[1] & 0xfffffbff;\n    tempPtr = ptrArray;\n    ptrArray = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*funcParams)[4];\n    *(short *)((int)funcParams + 0x2a) = *(short *)((int)funcParams + 0x2a) + -1;\n  }\n  else if (*(short *)((int)funcParams + 0x2a) == 3) {\n    (*funcParams)[1] = (*funcParams)[1] & 0xfffffbff;\n    **funcParams = **funcParams & 0xfffffbff;\n    tempPtr = ptrArray;\n    ptrArray = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*funcParams)[4];\n    *(short *)((int)funcParams + 0x2a) = *(short *)((int)funcParams + 0x2a) + -1;\n  }\n  else if (*(short *)((int)funcParams + 0x2a) == 2) {\n    if ((int)ptrArray2 - 1U < 2) {\n      **funcParams = **funcParams & 0xfffffbff;\n      **funcParams = **funcParams | 0x100;\n    }\n    else {\n      **funcParams = **funcParams | 0x200;\n    }\n    tempPtr = ptrArray;\n    ptrArray = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*funcParams)[4];\n    *(short *)((int)funcParams + 0x2a) = *(short *)((int)funcParams + 0x2a) + -1;\n    tempPtr = ptrArray;\n    ptrArray = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*funcParams)[4];\n    *(short *)((int)funcParams + 0x2a) = *(short *)((int)funcParams + 0x2a) + -1;\n    (*funcParams)[1] = (*funcParams)[1] & 0xfffffcff;\n    *(undefined *)((int)funcParams + 0x3d) = 0x20;\n    ptrArray3 = (uint *)0x0;\n    if (*(char *)((int)funcParams + 0x3e) == '@') {\n      *(undefined *)((int)funcParams + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)funcParams + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    tempPtr = ptrArray;\n    ptrArray = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*funcParams)[4];\n    *(short *)((int)funcParams + 0x2a) = *(short *)((int)funcParams + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "update_flags_and_process_data_080019a0",
                "param_1": "funcParams",
                "puVar1": "tempPtr",
                "param_1[9]": "ptrArray",
                "param_1[0xb]": "ptrArray2",
                "param_1[0xc]": "ptrArray3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_param_08001ab0",
            "code": "\nvoid processParam_08001ab0(uint **paramArray)\n\n{\n  int returnValue;\n  uint *ptrVar1;\n  uint *ptrVar2;\n  \n  if (*(byte *)((int)paramArray + 0x3d) - 0x29 < 2) {\n    paramArray[0xc] = (uint *)0x0;\n    *(undefined *)((int)paramArray + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)paramArray + 0x3d) != '`') && (((*paramArray)[1] & 0x800) == 0)) {\n      *(undefined *)((int)paramArray + 0x3d) = 0x20;\n    }\n    paramArray[0xc] = (uint *)0x0;\n    *(undefined *)((int)paramArray + 0x3e) = 0;\n  }\n  **paramArray = **paramArray & 0xfffff7ff;\n  ptrVar2 = *paramArray;\n  if ((ptrVar2[1] & 0x800) == 0) {\n    if (*(char *)((int)paramArray + 0x3d) == '`') {\n      *(undefined *)((int)paramArray + 0x3d) = 0x20;\n      paramArray[0x10] = (uint *)0x0;\n      if ((ptrVar2[5] & 0x40) != 0) {\n        ptrVar1 = paramArray[9];\n        paramArray[9] = (uint *)((int)ptrVar1 + 1);\n        *(char *)ptrVar1 = (char)ptrVar2[4];\n      }\n      **paramArray = **paramArray & 0xfffffffe;\n      FUNC_08001aac(paramArray);\n    }\n    else {\n      if ((ptrVar2[5] & 0x40) != 0) {\n        ptrVar1 = paramArray[9];\n        paramArray[9] = (uint *)((int)ptrVar1 + 1);\n        *(char *)ptrVar1 = (char)ptrVar2[4];\n      }\n      check_and_initialize_param_08003900(paramArray);\n    }\n  }\n  else {\n    ptrVar2[1] = ptrVar2[1] & 0xfffff7ff;\n    if (*(char *)((int)paramArray[0xd] + 0x35) == '\\x01') {\n      paramArray[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      returnValue = update_param_08000f8c(paramArray[0xe]);\n      if (returnValue != 0) {\n        if (((*paramArray)[5] & 0x40) != 0) {\n          ptrVar2 = paramArray[9];\n          paramArray[9] = (uint *)((int)ptrVar2 + 1);\n          *(char *)ptrVar2 = (char)(*paramArray)[4];\n        }\n        **paramArray = **paramArray & 0xfffffffe;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        (*(code *)paramArray[0xe][0x14])();\n      }\n    }\n    else {\n      paramArray[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      returnValue = update_param_08000f8c(paramArray[0xd]);\n      if (returnValue != 0) {\n        **paramArray = **paramArray & 0xfffffffe;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        (*(code *)paramArray[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)paramArray + 0x3d) == '(') && (((uint)paramArray[0x10] & 4) != 0)) {\n    paramArray[0xb] = (uint *)0xffff0000;\n    paramArray[0xc] = (uint *)0x0;\n    *(undefined *)((int)paramArray + 0x3d) = 0x20;\n    *(undefined *)((int)paramArray + 0x3e) = 0;\n    execute_relevant_code_080038d0(paramArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_param_08001ab0",
                "param_1": "paramArray",
                "iVar1": "returnValue",
                "puVar2": "ptrVar1",
                "puVar3": "ptrVar2"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_param_and_execute_code_08001bfc",
            "code": "\nundefined4 process_param_and_execute_code_08001bfc(uint **param_array)\n\n{\n  char char_var1;\n  uint *ptr_var2;\n  uint *ptr_var3;\n  \n  char_var1 = *(char *)((int)param_array + 0x3d);\n  (*param_array)[1] = (*param_array)[1] & 0xfffff8ff;\n  **param_array = **param_array | 1;\n  **param_array = **param_array & 0xfffffbff;\n  ptr_var2 = *param_array;\n  if ((ptr_var2[1] & 0x800) != 0) {\n    if ((*(char *)((int)param_array + 0x3d) == '\\\"') || (*(char *)((int)param_array + 0x3d) == '*')) {\n      *(short *)((int)param_array + 0x2a) = (short)*(undefined4 *)(*param_array[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param_array + 0x2a) = (short)*(undefined4 *)(*param_array[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param_array + 0x2a) != 0) {\n    if ((ptr_var2[5] & 4) != 0) {\n      ptr_var3 = param_array[9];\n      param_array[9] = (uint *)((int)ptr_var3 + 1);\n      *(char *)ptr_var3 = (char)ptr_var2[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n    if (((*param_array)[5] & 0x40) != 0) {\n      ptr_var2 = param_array[9];\n      param_array[9] = (uint *)((int)ptr_var2 + 1);\n      *(char *)ptr_var2 = (char)(*param_array)[4];\n      *(short *)((int)param_array + 0x2a) = *(short *)((int)param_array + 0x2a) + -1;\n    }\n    param_array[0x10] = (uint *)((uint)param_array[0x10] | 4);\n  }\n  if (param_array[0x10] == (uint *)0x0) {\n    if (((char_var1 == '(') || (char_var1 == '*')) || (char_var1 == ')')) {\n      param_array[0xb] = (uint *)0xffff0000;\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      execute_relevant_code_080038d0();\n    }\n    else if ((param_array[0xc] == (uint *)0x22) || (char_var1 == '\\\"')) {\n      param_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)param_array + 0x3d) = 0x20;\n      *(undefined *)((int)param_array + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    process_param_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_param_and_execute_code_08001bfc",
                "param_1": "param_array",
                "cVar1": "char_var1",
                "puVar2": "ptr_var2",
                "puVar3": "ptr_var3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_input_08001d00",
            "code": "\nvoid process_input_08001d00(int *input_data)\n\n{\n  int current_value;\n  uint flags_1;\n  uint flags_2;\n  uint flags_3;\n  \n  current_value = *input_data;\n  flags_3 = *(uint *)(current_value + 0x18);\n  flags_1 = *(uint *)(current_value + 0x14);\n  flags_2 = *(uint *)(current_value + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((flags_1 & 0x10001) == 0) || ((flags_2 & 0x200) == 0)) {\n      if (((flags_1 & 0x10008) == 0) || ((flags_2 & 0x200) == 0)) {\n        if (((flags_1 & 0x10002) != 0) && ((flags_2 & 0x200) != 0)) {\n          check_input_and_modify_flags_08001256(input_data);\n        }\n      }\n      else {\n        update_memory_with_param_0800124a(input_data);\n      }\n    }\n    else {\n      update_parameter_value_080011c0(input_data);\n    }\n    if ((flags_3 & 0x100004) == 0) {\n      if ((((flags_1 & 0x10040) != 0) && ((flags_2 & 0x400) != 0)) && ((flags_1 & 0x10004) == 0)) {\n        process_param_08001904(input_data);\n        return;\n      }\n      if (((flags_1 & 0x10004) != 0) && ((flags_2 & 0x200) != 0)) {\n        update_flags_and_process_data_080019a0(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((flags_1 & 0x10080) != 0) && ((flags_2 & 0x400) != 0)) && ((flags_1 & 0x10004) == 0)) {\n        decode_and_process_data_0800171a(input_data);\n        return;\n      }\n      if (((flags_1 & 0x10004) != 0) && ((flags_2 & 0x200) != 0)) {\n        process_function_08001864(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags_1 & 0x10002) != 0) && ((flags_2 & 0x200) != 0)) {\n      process_params_0800165a();\n      return;\n    }\n    if (((flags_1 & 0x10010) != 0) && ((flags_2 & 0x200) != 0)) {\n      process_param_and_execute_code_08001bfc(input_data);\n      return;\n    }\n    if ((flags_3 & 0x100004) == 0) {\n      if ((((flags_1 & 0x10040) != 0) && ((flags_2 & 0x400) != 0)) && ((flags_1 & 0x10004) == 0)) {\n        update_data_0800160e(input_data);\n        return;\n      }\n      if (((flags_1 & 0x10004) != 0) && ((flags_2 & 0x200) != 0)) {\n        modify_array_08001440(input_data);\n      }\n    }\n    else {\n      if ((((flags_1 & 0x10080) != 0) && ((flags_2 & 0x400) != 0)) && ((flags_1 & 0x10004) == 0)) {\n        process_input_08001d00_080015bc(input_data);\n        return;\n      }\n      if (((flags_1 & 0x10004) != 0) && ((flags_2 & 0x200) != 0)) {\n        process_data_08001420(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_input_08001d00",
                "param_1": "input_data",
                "iVar1": "current_value",
                "uVar2": "flags_1",
                "uVar3": "flags_2",
                "uVar4": "flags_3"
            },
            "calling": [],
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "process_flags_08001e68",
            "code": "\nvoid process_flags_08001e68(uint **parameters)\n\n{\n  char char_a;\n  uint *pointer;\n  uint flag_1;\n  uint flag_2;\n  \n  pointer = *parameters;\n  flag_1 = pointer[5];\n  flag_2 = pointer[1];\n  if (((flag_1 & 0x10100) != 0) && ((flag_2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n  }\n  if (((flag_1 & 0x10200) != 0) && ((flag_2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 2);\n    (*parameters)[5] = 0xfffffdff;\n  }\n  if (((flag_1 & 0x10400) != 0) && ((flag_2 & 0x100) != 0)) {\n    char_a = *(char *)((int)parameters + 0x3d);\n    if (((*(char *)((int)parameters + 0x3e) == ' ') && (*(short *)((int)parameters + 0x2a) == 0)) &&\n       (((char_a == '!' || (char_a == ')')) || ((char_a == '(' && (parameters[0xc] == (uint *)0x21)))))) {\n      handle_parameter_08001684(parameters);\n    }\n    else {\n      parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n      if (*(char *)((int)parameters + 0x3e) == '\\x10') {\n        **parameters = **parameters | 0x200;\n      }\n      (*parameters)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag_1 & 0x10800) != 0) && ((flag_2 & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 8);\n    (*parameters)[5] = 0xfffff7ff;\n  }\n  if (parameters[0x10] != (uint *)0x0) {\n    process_param_08001ab0(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "process_flags_08001e68",
                "param_1": "parameters",
                "cVar1": "char_a",
                "puVar2": "pointer",
                "uVar3": "flag_1",
                "uVar4": "flag_2"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_memory_data_validity_08001f9c",
            "code": "\n\n\nundefined4 check_memory_data_validity_08001f9c(void)\n\n{\n  int prev_data;\n  int current_data;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  prev_data = get_data_from_memory_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      prev_data = get_data_from_memory_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        current_data = get_data_from_memory_08000e30();\n      } while ((uint)(current_data - prev_data) < 0x3e9);\n      return 3;\n    }\n    current_data = get_data_from_memory_08000e30();\n  } while ((uint)(current_data - prev_data) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_memory_data_validity_08001f9c",
                "iVar1": "prev_data",
                "iVar2": "current_data"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "validate_configuration_0800201c",
            "code": "\n\n\nundefined4 validateConfiguration_0800201c(uint *configuration)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool flag;\n  \n  if (configuration == (uint *)0x0) {\n    return 1;\n  }\n  if ((*configuration & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (configuration[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (configuration[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (configuration[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (configuration[1] == 0) {\n        startTime = getDataFromMemory();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = getDataFromMemory();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = getDataFromMemory();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = getDataFromMemory();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*configuration & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (configuration[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | configuration[4] << 3;\n    }\n    else if (configuration[3] == 0) {\n      _DAT_42470000 = 0;\n      startTime = getDataFromMemory();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = getDataFromMemory();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTime = getDataFromMemory();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = getDataFromMemory();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | configuration[4] << 3;\n    }\n  }\n  if ((*configuration & 8) != 0) {\n    if (configuration[5] == 0) {\n      _DAT_42470e80 = 0;\n      startTime = getDataFromMemory();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = getDataFromMemory();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTime = getDataFromMemory();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = getDataFromMemory();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*configuration & 4) != 0) {\n    flag = (_DAT_40023840 & 0x10000000) == 0;\n    if (flag) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = getDataFromMemory();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = getDataFromMemory();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (configuration[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (configuration[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (configuration[2] == 0) {\n      startTime = getDataFromMemory();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = getDataFromMemory();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = getDataFromMemory();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = getDataFromMemory();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (configuration[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (configuration[6] == 2) {\n    _DAT_42470060 = 0;\n    startTime = getDataFromMemory();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             configuration[7] | configuration[8] | configuration[9] << 6 | ((configuration[10] >> 1) - 1) * 0x10000 |\n             configuration[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startTime = getDataFromMemory();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = getDataFromMemory();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = getDataFromMemory();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startTime = getDataFromMemory();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = getDataFromMemory();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "validate_configuration_0800201c",
                "param_1": "configuration",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "flag",
                "get_data_from_memory_08000e30": "getDataFromMemory"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_frequency_080023b4",
            "code": "\n\n\nuint calculate_frequency_080023b4(void)\n\n{\n  undefined4 input_value;\n  uint frequency;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    frequency = (_DAT_40023804 << 0x11) >> 0x17;\n    frequency = calculate_result(frequency * 16000000,\n                         (((uint)(frequency * 0x20 < frequency) * -0x3f -\n                          (uint)(frequency * 0x7c0 < frequency * 0x1f)) * 8 +\n                         (uint)has_carry(frequency * 0x3d08,frequency)) * 0x400 | frequency * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,input_value);\n  }\n  else {\n    frequency = (_DAT_40023804 << 0x11) >> 0x17;\n    frequency = calculate_result(frequency * 8000000,\n                         (((uint)(frequency * 0x20 < frequency) * -0x3f -\n                          (uint)(frequency * 0x7c0 < frequency * 0x1f)) * 8 +\n                         (uint)has_carry(frequency * 0x3d08,frequency)) * 0x200,_DAT_40023804 & 0x3f,0,input_value);\n  }\n  return frequency / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "in_r3": "input_value",
                "uVar1": "frequency",
                "CARRY4": "has_carry",
                "calculate_result_080002d0": "calculate_result"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "update_settings_08002488",
            "code": "\n\n\nundefined4 updateSettings_08002488(uint *settings_flags,uint num_settings)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  if (settings_flags == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < num_settings) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)num_settings);\n    if (num_settings != (num_settings & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*settings_flags & 2) != 0) {\n    if ((*settings_flags & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*settings_flags & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | settings_flags[2];\n  }\n  if ((*settings_flags & 1) != 0) {\n    uVar3 = settings_flags[1];\n    if (uVar3 == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (uVar3 - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = uVar3 | _DAT_40023808 & 0xfffffffc;\n    iVar1 = getElapsedTime();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == settings_flags[1] * 4) break;\n      iVar2 = getElapsedTime();\n      if (5000 < (uint)(iVar2 - iVar1)) {\n        return 3;\n      }\n    }\n  }\n  if (num_settings < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)num_settings);\n    if (num_settings != (num_settings & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*settings_flags & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | settings_flags[3];\n  }\n  if ((*settings_flags & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | settings_flags[4] << 3;\n  }\n  uVar3 = calculateFrequency();\n  DAT_2000002c = uVar3 >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initializeAndUpdateData(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "update_settings_08002488",
                "param_1": "settings_flags",
                "param_2": "num_settings",
                "get_data_from_memory_08000e30": "getElapsedTime",
                "calculate_frequency_080023b4": "calculateFrequency",
                "initialize_and_update_data_08000d98": "initializeAndUpdateData"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_value_080025e0",
            "code": "\nundefined4 get_data_value_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_value_080025e0"
            },
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "get_data_value_shifted_080025ec",
            "code": "\n\n\nuint getDataValueShifted_080025ec(void)\n\n{\n  uint dataValue;\n  \n  dataValue = get_data_value_080025e0();\n  return dataValue >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "get_data_value_shifted_080025ec",
                "uVar1": "dataValue"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_shifted_data_value_0800260c",
            "code": "\n\n\nuint get_shifted_data_value_0800260c(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_shifted_data_value_0800260c",
                "uVar1": "data_value",
                "get_data_value_080025e0": "get_data_value"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "check_and_execute_callbacks_0800262c",
            "code": "\n\n\nvoid checkAndExecuteCallbacks_0800262c(int *pParam)\n\n{\n  if (((*(uint *)(*pParam + 0xc) & 0x100) != 0) && ((*(uint *)(*pParam + 8) & 0x1000) != 0)) {\n    executeCallbacks();\n    *(uint *)(*pParam + 0xc) = *(uint *)(*pParam + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*pParam + 0xc) & 0x200) != 0) && ((*(uint *)(*pParam + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(pParam);\n    *(uint *)(*pParam + 0xc) = *(uint *)(*pParam + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)pParam + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "check_and_execute_callbacks_0800262c",
                "param_1": "pParam",
                "execute_callback_function_08003594": "executeCallbacks"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "update_data_0800268e",
            "code": "\nvoid updateData_0800268e(uint **dataPointer)\n\n{\n  uint *valuePointer;\n  \n  *(undefined *)((int)dataPointer + 0x39) = 2;\n  valuePointer = *dataPointer;\n  if ((valueAtIndex_8 & 0x1111) == 0) {\n    if ((valueAtIndex_8 & 0x444) == 0) {\n      *valuePointer = *valuePointer & 0xfffffffe;\n    }\n  }\n  updateData_0800268eBasedOnValue(dataPointer);\n  *(undefined *)((int)dataPointer + 0x39) = 0;\n  *(undefined *)(dataPointer + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "update_data_0800268e",
                "param_1": "dataPointer",
                "puVar1": "valuePointer",
                "update_data_based_on_value_0800340c": "updateDataBasedOnValue",
                "puVar1[8]": "valueAtIndex_8"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "execute_conditions_080026ce",
            "code": "\nvoid execute_conditions_080026ce(int *input_param)\n\n{\n  int temp_var;\n  \n  temp_var = *input_param;\n  if (((*(uint *)(temp_var + 0x10) & 2) != 0) && ((*(uint *)(temp_var + 0xc) & 2) != 0)) {\n    *(undefined4 *)(temp_var + 0x10) = 0xfffffffd;\n    *(undefined *)(input_param + 6) = 1;\n    if ((*(uint *)(*input_param + 0x18) & 3) == 0) {\n      execute_if_condition_met();\n      FUNC_080026ca(input_param);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(input_param + 6) = 0;\n  }\n  temp_var = *input_param;\n  if (((*(uint *)(temp_var + 0x10) & 4) != 0) && ((*(uint *)(temp_var + 0xc) & 4) != 0)) {\n    *(undefined4 *)(temp_var + 0x10) = 0xfffffffb;\n    *(undefined *)(input_param + 6) = 2;\n    if ((*(uint *)(*input_param + 0x18) & 0x300) == 0) {\n      execute_if_condition_met(input_param);\n      FUNC_080026ca(input_param);\n    }\n    else {\n      FUNC_080026c8(input_param);\n    }\n    *(undefined *)(input_param + 6) = 0;\n  }\n  temp_var = *input_param;\n  if (((*(uint *)(temp_var + 0x10) & 8) != 0) && ((*(uint *)(temp_var + 0xc) & 8) != 0)) {\n    *(undefined4 *)(temp_var + 0x10) = 0xfffffff7;\n    *(undefined *)(input_param + 6) = 4;\n    if ((*(uint *)(*input_param + 0x1c) & 3) == 0) {\n      execute_if_condition_met(input_param);\n      FUNC_080026ca(input_param);\n    }\n    else {\n      FUNC_080026c8(input_param);\n    }\n    *(undefined *)(input_param + 6) = 0;\n  }\n  temp_var = *input_param;\n  if (((*(uint *)(temp_var + 0x10) & 0x10) != 0) && ((*(uint *)(temp_var + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(temp_var + 0x10) = 0xffffffef;\n    *(undefined *)(input_param + 6) = 8;\n    if ((*(uint *)(*input_param + 0x1c) & 0x300) == 0) {\n      execute_if_condition_met(input_param);\n      FUNC_080026ca(input_param);\n    }\n    else {\n      FUNC_080026c8(input_param);\n    }\n    *(undefined *)(input_param + 6) = 0;\n  }\n  temp_var = *input_param;\n  if (((*(uint *)(temp_var + 0x10) & 1) != 0) && ((*(uint *)(temp_var + 0xc) & 1) != 0)) {\n    *(undefined4 *)(temp_var + 0x10) = 0xfffffffe;\n    subtract_four(input_param);\n  }\n  temp_var = *input_param;\n  if (((*(uint *)(temp_var + 0x10) & 0x80) != 0) && ((*(uint *)(temp_var + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(temp_var + 0x10) = 0xffffff7f;\n    FUNC_0800293e(input_param);\n  }\n  temp_var = *input_param;\n  if (((*(uint *)(temp_var + 0x10) & 0x40) != 0) && ((*(uint *)(temp_var + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(temp_var + 0x10) = 0xffffffbf;\n    FUNC_080026cc(input_param);\n  }\n  temp_var = *input_param;\n  if (((*(uint *)(temp_var + 0x10) & 0x20) != 0) && ((*(uint *)(temp_var + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(temp_var + 0x10) = 0xffffffdf;\n    FUNC_0800293c(input_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "execute_conditions_080026ce",
                "param_1": "input_param",
                "iVar1": "temp_var",
                "execute_function_if_condition_met_08003754": "execute_if_condition_met",
                "execute_subtract_four_function_0800376e": "subtract_four"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_value_08002848",
            "code": "\nvoid updateBitValue_08002848(int memoryAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_value_08002848",
                "param_1": "memoryAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_bit_values_08002864",
            "code": "\nundefined4 update_bit_values_08002864(uint **ptr_to_data,undefined4 value)\n\n{\n  bool is_address_valid;\n  uint *ptr_to_data_value;\n  \n  update_bit_value(*ptr_to_data,value,0);\n  ptr_to_data_value = *ptr_to_data;\n  if (ptr_to_data_value == (uint *)0x40010000) {\n    is_address_valid = true;\n  }\n  else if (ptr_to_data_value == (uint *)0x40010400) {\n    is_address_valid = true;\n  }\n  else {\n    is_address_valid = false;\n  }\n  if (((is_address_valid) && ((ptr_to_data_value[8] & 0x1111) == 0)) && ((ptr_to_data_value[8] & 0x444) == 0)) {\n    ptr_to_data_value[0x11] = ptr_to_data_value[0x11] & 0xffff7fff;\n  }\n  ptr_to_data_value = *ptr_to_data;\n  if (((ptr_to_data_value[8] & 0x1111) == 0) && ((ptr_to_data_value[8] & 0x444) == 0)) {\n    *ptr_to_data_value = *ptr_to_data_value & 0xfffffffe;\n  }\n  *(undefined *)((int)ptr_to_data + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_bit_values_08002864",
                "param_1": "ptr_to_data",
                "param_2": "value",
                "bVar1": "is_address_valid",
                "puVar2": "ptr_to_data_value",
                "update_bit_value_08002848": "update_bit_value"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bitwise_operator_080028d4",
            "code": "\nvoid updateBitwiseOperator_080028d4(int ptr1,uint paramIndex,int value)\n\n{\n  *(uint *)(ptr1 + 0x20) = *(uint *)(ptr1 + 0x20) & ~(4 << (paramIndex & 0xff));\n  *(uint *)(ptr1 + 0x20) = *(uint *)(ptr1 + 0x20) | value << (paramIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bitwise_operator_080028d4",
                "param_1": "ptr1",
                "param_2": "paramIndex",
                "param_3": "value"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_and_clear_bitwise_flags_080028f0",
            "code": "\nundefined4 update_and_clear_bitwise_flags_080028f0(uint **function_parameters,undefined4 flag_value)\n\n{\n  uint *temp_ptr;\n  \n  update_bitwise_operator_080028d4(*function_parameters,flag_value,0);\n  temp_ptr = *function_parameters;\n  if (((temp_ptr[8] & 0x1111) == 0) && ((temp_ptr[8] & 0x444) == 0)) {\n    temp_ptr[0x11] = temp_ptr[0x11] & 0xffff7fff;\n  }\n  temp_ptr = *function_parameters;\n  if (((temp_ptr[8] & 0x1111) == 0) && ((temp_ptr[8] & 0x444) == 0)) {\n    *temp_ptr = *temp_ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_and_clear_bitwise_flags_080028f0",
                "param_1": "function_parameters",
                "param_2": "flag_value",
                "puVar1": "temp_ptr"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "clear_flags_08002940",
            "code": "\nvoid clearFlags_08002940(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xfffffedf;\n  *(uint *)(*ptr + 0x14) = *(uint *)(*ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "clear_flags_08002940",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 processData_0800295c(int *data)\n\n{\n  short count;\n  byte *ptrByte;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (constantValue == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)ptrInt & 0x1ff;\n    if (condition == 0) {\n      ptrInt = ptrInt + 2;\n    }\n    else {\n      ptrInt = ptrInt + 1;\n    }\n  }\n  else {\n    ptrByte = (byte *)ptrInt;\n    ptrInt = (int)(ptrByte + 1);\n    *(uint *)(*data + 4) = (uint)*ptrByte;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "count",
                "pbVar2": "ptrByte",
                "param_1[2]": "constantValue",
                "param_1[4]": "condition",
                "param_1[8]": "ptrInt"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_values_080029c8",
            "code": "\nvoid calculateValues_080029c8(int *inputArray)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int param1Value1;\n  int param1Value2;\n  int param1Value3;\n  int param1Value4;\n  int ptrValue;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       *(uint *)(*inputArray + 0xc) & 0xffff69f3 | inputArray[2] | inputArray[4] | inputArray[5] | inputArray[7];\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  if (inputArray[7] == 0x8000) {\n    ptrValue = *inputArray;\n    if ((ptrValue != 0x40011000) && (ptrValue != 0x40011400)) {\n      shiftedValue1 = getDataValueShifted1();\n      param1Value1 = inputArray[1];\n      shiftedValue2 = getDataValueShifted1();\n      param1Value2 = inputArray[1];\n      shiftedValue3 = getDataValueShifted1();\n      param1Value3 = inputArray[1];\n      shiftedValue4 = getDataValueShifted1();\n      param1Value4 = inputArray[1];\n      shiftedValue5 = getDataValueShifted1();\n      *(uint *)(ptrValue + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 1) +\n                          (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) /\n                                (ulonglong)(uint)(inputArray[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 1) +\n             (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 1)) / 100) * 0x10;\n      return;\n    }\n    shiftedValue1 = getShiftedDataValue1();\n    param1Value1 = inputArray[1];\n    shiftedValue2 = getShiftedDataValue1();\n    param1Value2 = inputArray[1];\n    shiftedValue3 = getShiftedDataValue1();\n    param1Value3 = inputArray[1];\n    shiftedValue4 = getShiftedDataValue1();\n    param1Value4 = inputArray[1];\n    shiftedValue5 = getShiftedDataValue1();\n    *(uint *)(ptrValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 1) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 1) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 1)) / 100) * 0x10;\n    return;\n  }\n  ptrValue = *inputArray;\n  if ((ptrValue != 0x40011000) && (ptrValue != 0x40011400)) {\n    shiftedValue1 = getDataValueShifted1();\n    param1Value1 = inputArray[1];\n    shiftedValue2 = getDataValueShifted1();\n    param1Value2 = inputArray[1];\n    shiftedValue3 = getDataValueShifted1();\n    param1Value3 = inputArray[1];\n    shiftedValue4 = getDataValueShifted1();\n    param1Value4 = inputArray[1];\n    shiftedValue5 = getDataValueShifted1();\n    *(uint *)(ptrValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedValue1 = getShiftedDataValue1();\n  param1Value1 = inputArray[1];\n  shiftedValue2 = getShiftedDataValue1();\n  param1Value2 = inputArray[1];\n  shiftedValue3 = getShiftedDataValue1();\n  param1Value3 = inputArray[1];\n  shiftedValue4 = getShiftedDataValue1();\n  param1Value4 = inputArray[1];\n  shiftedValue5 = getShiftedDataValue1();\n  *(uint *)(ptrValue + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                      (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n         (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_values_080029c8",
                "param_1": "inputArray",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "param1Value1",
                "iVar7": "param1Value2",
                "iVar8": "param1Value3",
                "iVar9": "param1Value4",
                "iVar10": "ptrValue",
                "get_data_value_shifted_080025ec": "getDataValueShifted1",
                "get_shifted_data_value_0800260c": "getShiftedDataValue1"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "verify_flags_08002d0c",
            "code": "\nundefined4 verifyFlags_08002d0c(uint **flagPtr,uint flagMask,uint expectedValue,int dataBase,uint maxOffset)\n\n{\n  int dataOffset;\n  \n  do {\n    if (((flagMask & ~**flagPtr) == 0) != expectedValue) {\n      return 0;\n    }\n  } while ((maxOffset == 0xffffffff) ||\n          ((maxOffset != 0 && (dataOffset = get_data_from_memory_08000e30(), (uint)(dataOffset - dataBase) <= maxOffset))));\n  (*flagPtr)[3] = (*flagPtr)[3] & 0xfffffe5f;\n  (*flagPtr)[5] = (*flagPtr)[5] & 0xfffffffe;\n  *(undefined *)((int)flagPtr + 0x39) = 0x20;\n  *(undefined *)((int)flagPtr + 0x3a) = 0x20;\n  *(undefined *)(flagPtr + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "verify_flags_08002d0c",
                "param_1": "flagPtr",
                "param_2": "flagMask",
                "param_3": "expectedValue",
                "param_4": "dataBase",
                "param_5": "maxOffset",
                "iVar1": "dataOffset"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_data_08002d72",
            "code": "\nundefined4 initializeData_08002d72(int *data)\n\n{\n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    calculateValues(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    value4 = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_data_08002d72",
                "param_1": "data",
                "calculate_values_080029c8": "calculateValues",
                "param_1[0xf]": "value4"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 process_data_08002dd0(int *data_array,ushort *flags_array,int flags_length,undefined4 additional_param)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (*(char *)((int)data_array + 0x39) == ' ') {\n    if (flags_array == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (flags_length == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data_array + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_array + 0xe) = 1;\n      data_array[0xf] = 0;\n      *(undefined *)((int)data_array + 0x39) = 0x21;\n      status = get_data_from_memory_08000e30();\n      *(short *)(data_array + 9) = (short)flags_length;\n      *(short *)((int)data_array + 0x26) = (short)flags_length;\n      while (*(short *)((int)data_array + 0x26) != 0) {\n        *(short *)((int)data_array + 0x26) = *(short *)((int)data_array + 0x26) + -1;\n        if (data_array[2] == 0x1000) {\n          result = verify_flags_08002d0c(data_array,0x80,0,status,additional_param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_array + 4) = *flags_array & 0x1ff;\n          if (data_array[4] == 0) {\n            flags_array = flags_array + 1;\n          }\n          else {\n            flags_array = (ushort *)((int)flags_array + 1);\n          }\n        }\n        else {\n          result = verify_flags_08002d0c(data_array,0x80,0,status,additional_param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_array + 4) = (uint)*(byte *)flags_array;\n          flags_array = (ushort *)((int)flags_array + 1);\n        }\n      }\n      result = verify_flags_08002d0c(data_array,0x40,0,status,additional_param);\n      if (result == 0) {\n        *(undefined *)((int)data_array + 0x39) = 0x20;\n        *(undefined *)(data_array + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_array",
                "param_2": "flags_array",
                "param_3": "flags_length",
                "param_4": "additional_param",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "check_parameters_08002eb2",
            "code": "\nundefined4 checkParameters_08002eb2(int *inputArray,int value1,int value2)\n\n{\n  if (*(char *)((int)inputArray + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(inputArray + 0xe) != '\\x01') {\n    inputArray[8] = value1;\n    *(short *)(inputArray + 9) = (short)value2;\n    *(short *)((int)inputArray + 0x26) = (short)value2;\n    inputArray[0xf] = 0;\n    *(undefined *)((int)inputArray + 0x39) = 0x21;\n    *(undefined *)(inputArray + 0xe) = 0;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "check_parameters_08002eb2",
                "param_1": "inputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "inputArray[8]",
                "param_1[0xf]": "inputArray[0xf]"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_input_08002efa",
            "code": "\nundefined4 validate_input_08002efa(int *array,int value1,int value2)\n\n{\n  if (*(char *)((int)array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(array + 0xe) != '\\x01') {\n    array[10] = value1;\n    *(short *)(array + 0xb) = (short)value2;\n    *(short *)((int)array + 0x2e) = (short)value2;\n    array[0xf] = 0;\n    *(undefined *)((int)array + 0x3a) = 0x22;\n    *(undefined *)(array + 0xe) = 0;\n    *(uint *)(*array + 0x14) = *(uint *)(*array + 0x14) | 1;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "array[10]",
                "param_1[0xf]": "array[0xf]"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "update_value_08002f4c",
            "code": "\nundefined4 updateValue_08002f4c(int *param)\n\n{\n  *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xffffffbf;\n  *(undefined *)((int)param + 0x39) = 0x20;\n  find_and_check_value_08003f48();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "update_value_08002f4c",
                "param_1": "param"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_binary_data_08002f66",
            "code": "\nundefined4 processBinaryData_08002f66(int *inputData)\n\n{\n  byte *bytePtr1;\n  short counter;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)inputData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (inputData[2] == 0x1000) {\n    if (inputData[4] == 0) {\n      *(ushort *)inputData[10] = (ushort)((uint)(*(int *)(*inputData + 4) << 0x17) >> 0x17);\n      inputData[10] = inputData[10] + 2;\n    }\n    else {\n      *(ushort *)inputData[10] = (ushort)*(undefined4 *)(*inputData + 4) & 0xff;\n      inputData[10] = inputData[10] + 1;\n    }\n  }\n  else if (inputData[4] == 0) {\n    undefinedPtr = (undefined *)inputData[10];\n    inputData[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*inputData + 4);\n  }\n  else {\n    bytePtr1 = (byte *)inputData[10];\n    inputData[10] = (int)(bytePtr1 + 1);\n    *bytePtr1 = (byte)*(undefined4 *)(*inputData + 4) & 0x7f;\n  }\n  counter = *(short *)((int)inputData + 0x2e) + -1;\n  *(short *)((int)inputData + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xfffffedf;\n  *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputData + 0x3a) = 0x20;\n  performActionBasedOnValue();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_binary_data_08002f66",
                "param_1": "inputData",
                "pbVar1": "bytePtr1",
                "sVar2": "counter",
                "puVar3": "undefinedPtr",
                "perform_action_based_on_value_08003f24": "performActionBasedOnValue"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_data_08002ffc",
            "code": "\nvoid process_data_08002ffc(uint **input_data)\n\n{\n  int result;\n  uint second_value;\n  uint *data_pointer;\n  uint flag;\n  uint first_value;\n  \n  data_pointer = *input_data;\n  first_value = *data_pointer;\n  second_value = data_pointer[3];\n  if ((((first_value & 0xf) == 0) && ((first_value & 0x20) != 0)) && ((second_value & 0x20) != 0)) {\n    process_binary_data_08002f66(input_data);\n    return;\n  }\n  if (((first_value & 0xf) == 0) || ((flag = data_pointer[5] & 1, flag == 0 && ((second_value & 0x120) == 0)))) {\n    if (((first_value & 0x80) != 0) && ((second_value & 0x80) != 0)) {\n      process_data_08002ffc_0800295c(input_data);\n      return;\n    }\n    if (((first_value & 0x40) != 0) && ((second_value & 0x40) != 0)) {\n      update_value_08002f4c(input_data);\n    }\n  }\n  else {\n    if (((first_value & 1) != 0) && ((second_value & 0x100) != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 1);\n    }\n    if (((first_value & 4) != 0) && (flag != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n    }\n    if (((first_value & 2) != 0) && (flag != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n    }\n    if (((first_value & 8) != 0) && (flag != 0)) {\n      input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n    }\n    if (input_data[0xf] != (uint *)0x0) {\n      if (((first_value & 0x20) != 0) && ((second_value & 0x20) != 0)) {\n        process_binary_data_08002f66(input_data);\n      }\n      if ((((uint)input_data[0xf] & 8) == 0) && (((*input_data)[5] & 0x40) == 0)) {\n        FUNC_08003f94(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_flags_08002940(input_data);\n      data_pointer = *input_data;\n      if ((data_pointer[5] & 0x40) == 0) {\n        FUNC_08003f94(input_data);\n        return;\n      }\n      data_pointer[5] = data_pointer[5] & 0xffffffbf;\n      if (input_data[0xd] == (uint *)0x0) {\n        FUNC_08003f94(input_data);\n        return;\n      }\n      input_data[0xd][0x14] = (uint)&LAB_0800311c_1;\n      result = update_param_08000f8c(input_data[0xd]);\n      if (result != 0) {\n        (*(code *)input_data[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "second_value",
                "puVar3": "data_pointer",
                "uVar4": "flag",
                "uVar5": "first_value"
            },
            "calling": [],
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "get_bit_value_08003138",
            "code": "\nuint getBitValue_08003138(uint inputValue,int arrayPointer)\n\n{\n  return *(uint *)(arrayPointer + ((inputValue << 0x18) >> 0x1c) * 4) >> (inputValue & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "inputValue",
                "param_2": "arrayPointer"
            },
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_in_array_0800314e",
            "code": "\nvoid setBitInArray_0800314e(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_value_in_array_0800316c",
            "code": "\nvoid updateValueInArray_0800316c(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_value_in_array_0800316c",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "map_param_to_value_0800318c",
            "code": "\nundefined4 mapParamToValue_0800318c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "map_param_to_value_0800318c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_flag_and_get_address_080031fc",
            "code": "\n\n\nundefined4 setFlagAndGetAddress_080031fc(undefined4 flagIndex)\n\n{\n  undefined4 baseAddress;\n  \n  switch(flagIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    baseAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    baseAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    baseAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    baseAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    baseAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    baseAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    baseAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    baseAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    baseAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    baseAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    baseAddress = 0x40022800;\n    break;\n  default:\n    baseAddress = 0;\n  }\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_flag_and_get_address_080031fc",
                "param_1": "flagIndex",
                "uVar1": "baseAddress"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_value_08003380",
            "code": "\nundefined4 check_value_08003380(undefined4 input_value,undefined4 unused_param,undefined4 data_array,undefined4 size)\n\n{\n  int value_index;\n  \n  value_index = get_value_index_0800354a(input_value,&DAT_08005a18,data_array,size,size);\n  if ((uint)(value_index << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_value_08003380",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "data_array",
                "param_4": "size",
                "iVar1": "value_index"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "get_value_index_0800339c",
            "code": "\nundefined4 getValueIndex_0800339c(undefined4 inputValue,undefined4 unusedParam,undefined4 dataPtr,undefined4 ptrA)\n\n{\n  int valueIndex;\n  uint shiftedValue;\n  \n  valueIndex = get_value_index_0800354a(inputValue,&DAT_08005a3c,dataPtr,ptrA,ptrA);\n  shiftedValue = (uint)(valueIndex << 0xc) >> 0x1b;\n  if (shiftedValue == 3) {\n    return 8;\n  }\n  if (shiftedValue != 4) {\n    if (shiftedValue != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "get_value_index_0800339c",
                "param_1": "inputValue",
                "param_2": "unusedParam",
                "param_3": "dataPtr",
                "param_4": "ptrA",
                "iVar1": "valueIndex",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_data_flag_080033c8",
            "code": "\n\n\nvoid clearDataFlag_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_data_flag_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "process_data_080033d8",
            "code": "\nvoid processData_080033d8(undefined4 input)\n\n{\n  int valueCheckResult;\n  int valueArray [5];\n  \n  valueArray[0] = find_value_or_default_080034f4(input,&DAT_08005a18);\n  if ((valueArray[0] != 0) && ((valueCheckResult = check_value_08003380(input), valueCheckResult == 0 || (valueCheckResult == 0x10)))) {\n    clear_bit_and_set_flag_08000f72(valueArray,valueCheckResult);\n    initialize_data_08000f56(valueArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "process_data_080033d8",
                "param_1": "input",
                "iVar1": "valueCheckResult",
                "local_1c": "valueArray"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "update_data_based_on_value_0800340c",
            "code": "\nvoid update_data_based_on_value_0800340c(void)\n\n{\n  update_data_based_on_value_0800340c_080035fc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "update_data_based_on_value_0800340c"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "update_bitwise_flags_08003414",
            "code": "\nvoid update_bitwise_flags_08003414(undefined4 arg)\n\n{\n  int iVar1;\n  uint uVar2;\n  int values [16];\n  \n  values[0] = find_value_or_default_080034f4(arg,&DAT_08005a3c);\n  if ((values[0] != 0) &&\n     ((((iVar1 = get_value_index_0800339c(arg), iVar1 == 0 || (iVar1 == 4)) || (iVar1 == 8)) ||\n      ((iVar1 == 0xc || (iVar1 == 0x18)))))) {\n    uVar2 = get_value_index_0800354a(arg,&DAT_08005a3c);\n    if ((uVar2 & 0x100000) == 0) {\n      update_bit_values_08002864(values,iVar1);\n    }\n    else {\n      update_and_clear_bitwise_flags_080028f0(values,iVar1);\n    }\n    update_data_0800268e(values);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "update_bitwise_flags_08003414",
                "param_1": "arg",
                "local_4c": "values"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_data_0800346c",
            "code": "\nvoid initialize_data_0800346c(void)\n\n{\n  fetch_data_from_memory();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_data_0800346c",
                "get_data_from_memory_08000e30": "fetch_data_from_memory"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "execute_main_function_08003476",
            "code": "\nvoid execute_main_function_08003476(void)\n\n{\n  perform_addition_operation();\n  initialize_execution();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "execute_main_function_08003476",
                "addition_operation_08000e18": "perform_addition_operation",
                "execute_initialization_08000f4e": "initialize_execution"
            },
            "calling": [],
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "set_flag_and_get_address_08003486",
            "code": "\nvoid set_flag_and_get_address_08003486(uint flag,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 address;\n  uint bitmask;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  \n  address = set_flag_and_get_address_08003486_080031fc((flag << 0x18) >> 0x1c);\n  bitmask = 1 << (flag & 0xf) & 0xffff;\n  local_param4 = 2;\n  local_param2 = param2;\n  local_param3 = param3;\n  FUNC_08000fb4(address,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "set_flag_and_get_address_08003486",
                "param_1": "flag",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "address",
                "local_24": "bitmask",
                "local_20": "local_param2",
                "local_1c": "local_param3",
                "local_18": "local_param4"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "set_param_value_based_on_condition_080034b6",
            "code": "\nvoid setParamValueBasedOnCondition_080034b6(undefined4 param1,undefined2 param2,int condition,undefined4 value)\n\n{\n  if (condition == 0) {\n    set_param_value_08001198(param1,param2,0,value,value);\n    return;\n  }\n  set_param_value_08001198(param1,param2,1,value,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "set_param_value_based_on_condition_080034b6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "condition",
                "param_4": "value"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_application_080034ce",
            "code": "\nvoid initialize_application_080034ce(void)\n\n{\n  initialize_and_update();\n  initialize_application_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_application_080034ce",
                "initialize_and_update_08000de4": "initialize_and_update",
                "initialize_application_08000c8c": "initialize_application"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_in_array_080034da",
            "code": "\nundefined4 find_value_in_array_080034da(int search_value,short *array_ptr)\n\n{\n  while( true ) {\n    if (*array_ptr == -1) {\n      return 0;\n    }\n    if (*array_ptr == search_value) break;\n    array_ptr = array_ptr + 6;\n  }\n  return *(undefined4 *)(array_ptr + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "search_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "find_value_or_default_080034f4",
            "code": "\nundefined4 find_value_or_default_080034f4(int value)\n\n{\n  undefined4 found_value;\n  \n  if (value != -1) {\n    found_value = find_value_in_array_080034da();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "find_value_or_default_080034f4",
                "param_1": "value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_in_array_08003506",
            "code": "\nint find_value_in_array_08003506(int value,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 2) == value) break;\n    array = array + 6;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_in_array_08003506",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_value_or_default_0800351e",
            "code": "\nundefined4 find_value_or_default_0800351e(int value)\n\n{\n  undefined4 result;\n  \n  if (value != 0) {\n    result = find_value_in_array_08003506();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_value_or_default_0800351e",
                "param_1": "value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int value,short *values)\n\n{\n  while( true ) {\n    if (*values == -1) {\n      return 0xffffffff;\n    }\n    if (*values == value) break;\n    values = values + 6;\n  }\n  return *(undefined4 *)(values + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "value",
                "param_2": "values"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "get_value_index_0800354a",
            "code": "\nundefined4 get_value_index_0800354a(int input_value)\n\n{\n  undefined4 value_index;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  value_index = find_value_index_0800352e();\n  return value_index;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "get_value_index_0800354a",
                "param_1": "input_value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_value_in_array_0800355e",
            "code": "\nundefined4 find_value_in_array_0800355e(int value,short *array)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_value_in_array_0800355e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_smaller_08003582",
            "code": "\nint compareAndReturnSmaller_08003582(int firstNumber,int secondNumber)\n\n{\n  if (firstNumber != secondNumber) {\n    if (firstNumber == 0) {\n      return secondNumber;\n    }\n    if (secondNumber == 0) {\n      return firstNumber;\n    }\n    firstNumber = 0;\n  }\n  return firstNumber;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_smaller_08003582",
                "param_1": "firstNumber",
                "param_2": "secondNumber"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_function_08003594",
            "code": "\nvoid executeCallbackFunction_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_function_08003594"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_system_080035bc",
            "code": "\n\n\nvoid initializeSystem_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_system_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "update_data_based_on_value_080035fc",
            "code": "\n\n\nvoid updateDataBasedOnValue_080035fc(int *dataPointer)\n\n{\n  if (*dataPointer == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*dataPointer == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*dataPointer == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*dataPointer == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*dataPointer == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*dataPointer == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*dataPointer == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*dataPointer == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*dataPointer == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*dataPointer == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*dataPointer == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*dataPointer == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*dataPointer == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*dataPointer == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "update_data_based_on_value_080035fc",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtractFour_08003750(int inputValue)\n\n{\n  return inputValue + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_function_if_condition_met_08003754",
            "code": "\nvoid executeFunctionIfConditionMet_08003754(int functionParameter)\n\n{\n  int result;\n  \n  result = getFunctionAddress();\n  if ((*(functionPointer **)(result + 0x48) != (functionPointer *)0x0) && (*(char *)(functionParameter + 0x18) == '\\x01')) {\n    (**(functionPointer **)(result + 0x48))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_function_if_condition_met_08003754",
                "param_1": "functionParameter",
                "iVar1": "result",
                "subtract_four_08003750": "getFunctionAddress",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_subtract_four_function_0800376e",
            "code": "\nvoid executeSubtractFourFunction_0800376e(void)\n\n{\n  int result;\n  \n  result = getSubtractFourFunction();\n  if (*(code **)(result + 0x44) != (code *)0x0) {\n    (**(code **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_subtract_four_function_0800376e",
                "iVar1": "result",
                "subtract_four_08003750": "getSubtractFourFunction"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "execute_conditions_0800377c",
            "code": "\nvoid execute_conditions_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    execute_conditions_0800377c_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    execute_conditions_0800377c_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "execute_conditions_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtractFour_0800387c(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_params_08003880",
            "code": "\nvoid processParams_08003880(int inputParam1,int inputParam2,int inputParam3,undefined4 inputParam4)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (inputParam3 == *(int *)(inputParam1 + 0xc)) {\n    if (inputParam2 == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      processParams_08003880Func1(inputParam1,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    initParameter(inputParam1,result + 0x68,0x20,8,inputParam4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_params_08003880",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "process_params_08001460": "processParamsFunc1",
                "initialize_parameter_080014ec": "initParameter"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "execute_relevant_code_080038d0",
            "code": "\nvoid executeRelevantCode_080038d0(undefined4 input)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initializeParameter(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "execute_relevant_code_080038d0",
                "param_1": "input",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "initialize_param_08001578": "initializeParameter"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "check_and_initialize_param_08003900",
            "code": "\nvoid checkAndInitializeParam_08003900(undefined4 inputParam)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    initializeParam(inputParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "check_and_initialize_param_08003900",
                "param_1": "inputParam",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "initialize_param_08001578": "initializeParam"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pins_08003978",
            "code": "\n\n\nvoid configureUARTPins_08003978(int *pinConfig)\n\n{\n  int uartPin1;\n  int uartPin2;\n  undefined4 address;\n  uint valueIndex;\n  uint pinMask;\n  uint shiftedValue;\n  uint shiftedValue2;\n  undefined4 constant;\n  uint shiftedValue3;\n  \n  if (pinConfig != (int *)0x0) {\n    uartPin1 = find_value_or_default_080034f4((int)*(short *)(pinConfig + 0x16),&DAT_08005ca0);\n    uartPin2 = find_value_or_default_080034f4((int)*(short *)((int)pinConfig + 0x5a),&DAT_08005c10);\n    if ((uartPin2 == 0) || (uartPin1 == 0)) {\n      initialize_and_process_input_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2);\n    }\n    else {\n      uartPin1 = compare_and_return_smaller_08003582(uartPin1);\n      *pinConfig = uartPin1;\n      if (uartPin1 == 0) {\n        initialize_and_process_input_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(pinConfig + 0x11) = 0;\n          *(undefined *)(pinConfig + 0x17) = 0x25;\n        }\n        else if (uartPin1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(pinConfig + 0x11) = 1;\n          *(undefined *)(pinConfig + 0x17) = 0x26;\n        }\n        else if (uartPin1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(pinConfig + 0x11) = 2;\n          *(undefined *)(pinConfig + 0x17) = 0x27;\n        }\n        else if (uartPin1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(pinConfig + 0x11) = 3;\n          *(undefined *)(pinConfig + 0x17) = 0x34;\n        }\n        else if (uartPin1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(pinConfig + 0x11) = 4;\n          *(undefined *)(pinConfig + 0x17) = 0x35;\n        }\n        else if (uartPin1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(pinConfig + 0x11) = 5;\n          *(undefined *)(pinConfig + 0x17) = 0x47;\n        }\n        else if (uartPin1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(pinConfig + 0x11) = 6;\n          *(undefined *)(pinConfig + 0x17) = 0x52;\n        }\n        else if (uartPin1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(pinConfig + 0x11) = 7;\n          *(undefined *)(pinConfig + 0x17) = 0x53;\n        }\n        address = set_flag_and_get_address_080031fc((uint)((int)*(short *)((int)pinConfig + 0x5a) << 0x18) >> 0x1c);\n        valueIndex = get_value_index_0800354a((int)*(short *)((int)pinConfig + 0x5a),&DAT_08005c10);\n        pinMask = 1 << (*(ushort *)((int)pinConfig + 0x5a) & 0xf) & 0xffff;\n        shiftedValue = (valueIndex >> 3 & 1) << 4 | valueIndex & 7;\n        shiftedValue2 = (valueIndex << 0x1a) >> 0x1e;\n        shiftedValue3 = (valueIndex << 0x11) >> 0x19;\n        constant = 3;\n        FUNC_08000fb4(address,&pinMask);\n        address = set_flag_and_get_address_080031fc((uint)((int)*(short *)(pinConfig + 0x16) << 0x18) >> 0x1c);\n        valueIndex = get_value_index_0800354a((int)*(short *)(pinConfig + 0x16),&DAT_08005ca0);\n        pinMask = 1 << (*(ushort *)(pinConfig + 0x16) & 0xf) & 0xffff;\n        shiftedValue = (valueIndex >> 3 & 1) << 4 | valueIndex & 7;\n        shiftedValue2 = (valueIndex << 0x1a) >> 0x1e;\n        FUNC_08000fb4(address,&pinMask);\n        (&DAT_200002b4)[*(byte *)(pinConfig + 0x11)] = pinConfig + 1;\n        pinConfig[1] = *pinConfig;\n        pinConfig[2] = pinConfig[0x12];\n        pinConfig[3] = pinConfig[0x13];\n        pinConfig[4] = pinConfig[0x14];\n        pinConfig[5] = pinConfig[0x15];\n        pinConfig[6] = 0xc;\n        pinConfig[7] = 0;\n        pinConfig[8] = 0;\n        initialize_data_08002d72(pinConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "param_1": "pinConfig",
                "iVar1": "uartPin1",
                "iVar2": "uartPin2",
                "uVar3": "address",
                "uVar4": "valueIndex",
                "local_2c": "pinMask",
                "local_28": "shiftedValue",
                "local_24": "shiftedValue2",
                "local_20": "constant",
                "local_1c": "shiftedValue3"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initializeUART_08003cc8(void)\n\n{\n  int value1;\n  undefined4 value2;\n  \n  value1 = find_value_or_default_080034f4(0x38,&DAT_08005ca0);\n  if (value1 != 0) {\n    value2 = find_value_or_default_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = find_value_or_default_0800351e(value2,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    configureUARTPins(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "value1",
                "uVar2": "value2",
                "configure_uart_pins_08003978": "configureUARTPins"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "process_data_08003d18",
            "code": "\nuint process_data_08003d18(undefined4 input_param,uint input_value)\n\n{\n  int memory_data;\n  int default_value;\n  uint counter;\n  \n  memory_data = get_data_from_memory_08000e30();\n  default_value = find_value_or_default_080034f4(0x38,&DAT_08005ca0);\n  if (default_value == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 10 &&\n      (((&DAT_200002b4)[counter] == 0 ||\n       (default_value = find_value_or_default_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[counter] != default_value))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (9 < counter) {\n    if ((9 < DAT_20000074) && (initialize_uart(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    counter = (uint)DAT_20000074;\n  }\n  do {\n    default_value = process_data_08003d18_iteration((&DAT_200002b4)[counter],input_param,input_value & 0xffff,1000);\n    if (default_value == 0) {\n      return input_value;\n    }\n    default_value = get_data_from_memory_08000e30();\n  } while ((uint)(default_value - memory_data) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "process_data_08003d18",
                "param_1": "input_param",
                "param_2": "input_value",
                "iVar1": "memory_data",
                "iVar2": "default_value",
                "uVar3": "counter",
                "initialize_uart_08003cc8": "initialize_uart",
                "process_data_08002dd0": "process_data_iteration"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "check_flag_08003dd0",
            "code": "\nbool check_flag_08003dd0(int input_value)\n\n{\n  uint combined_value;\n  \n  combined_value = combine_bytes_0800312c((&DAT_200002b4)[*(byte *)(input_value + 0x44)]);\n  return (combined_value & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "check_flag_08003dd0",
                "param_1": "input_value",
                "uVar1": "combined_value"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_high_priority_08003df4",
            "code": "\nbool isHighPriority_08003df4(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_200002b4)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_high_priority_08003df4",
                "param_1": "inputValue",
                "uVar1": "combinedBytes",
                "combine_bytes_0800312c": "combineBytes"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "validate_and_extract_flag_08003e18",
            "code": "\nundefined4 validate_and_extract_flag_08003e18(int input_length,undefined *output_value,undefined4 constant_value_1,undefined4 constant_value_2)\n\n{\n  int result;\n  \n  if (input_length == 0) {\n    return 0xffffffff;\n  }\n  result = check_flag();\n  if (result == 0) {\n    *output_value = *(undefined *)(input_length + 0x45);\n    validate_input((&DAT_200002b4)[*(byte *)(input_length + 0x44)],input_length + 0x45,1,&DAT_200002b4,constant_value_2);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "validate_and_extract_flag_08003e18",
                "param_1": "input_length",
                "param_2": "output_value",
                "param_3": "constant_value_1",
                "param_4": "constant_value_2",
                "iVar1": "result",
                "check_flag_08003dd0": "check_flag",
                "validate_input_08002efa": "validate_input"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_data_entry_08003e54",
            "code": "\nvoid updateDataEntry_08003e54(int dataEntry,undefined4 newValue,undefined4 param_3,undefined4 param_4)\n\n{\n  int flagResult;\n  uint flagIndex;\n  \n  if (dataEntry != 0) {\n    flagResult = check_flag_08003dd0();\n    if (flagResult == 0) {\n      flagIndex = (uint)*(byte *)(dataEntry + 0x44);\n      *(undefined4 *)(&DAT_20000214 + flagIndex * 4) = newValue;\n      *(int *)(&DAT_2000023c + flagIndex * 4) = dataEntry;\n      update_data_entry_08000e60((int)*(char *)(dataEntry + 0x5c),0,1,flagIndex,param_4);\n      set_bit_at_position_08000ec4((int)*(char *)(dataEntry + 0x5c));\n      validate_input_08002efa((&DAT_200002b4)[*(byte *)(dataEntry + 0x44)],dataEntry + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_data_entry_08003e54",
                "param_1": "dataEntry",
                "param_2": "newValue",
                "iVar1": "flagResult",
                "uVar2": "flagIndex"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "FUNC_08003eac",
            "code": "\nvoid FUNC_08003eac(int param_1,undefined4 param_2)\n\n{\n  byte bVar1;\n  \n  if (param_1 != 0) {\n    bVar1 = *(byte *)(param_1 + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)bVar1 * 4) = param_2;\n    *(int *)(&DAT_2000028c + (uint)bVar1 * 4) = param_1;\n    update_data_entry_08000e60((int)*(char *)(param_1 + 0x5c),0,2);\n    set_bit_at_position_08000ec4((int)*(char *)(param_1 + 0x5c));\n    check_parameters_08002eb2((&DAT_200002b4)[*(byte *)(param_1 + 0x44)],\n                 *(int *)(param_1 + 0x68) + (uint)*(ushort *)(param_1 + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "FUNC_08003eac"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_index_of_value_08003f00",
            "code": "\nuint find_index_of_value_08003f00(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_index_of_value_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "perform_action_based_on_value_08003f24",
            "code": "\nvoid performActionBasedOnValue_08003f24(void)\n\n{\n  uint valueIndex;\n  \n  valueIndex = find_index_of_value_08003f00();\n  if (valueIndex < 10) {\n    (**(code **)(&DAT_20000214 + valueIndex * 4))(*(undefined4 *)(&DAT_2000023c + valueIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "perform_action_based_on_value_08003f24",
                "uVar1": "valueIndex"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "find_and_check_value_08003f48",
            "code": "\nvoid find_and_check_value_08003f48(void)\n\n{\n  uint index;\n  int returnValue;\n  int value;\n  \n  index = find_index_of_value();\n  value = *(int *)(&DAT_2000028c + index * 4);\n  if ((index < 10) && (returnValue = (**(code **)(&DAT_20000264 + index * 4))(value), returnValue != -1)) {\n    check_parameters((&DAT_200002b4)[*(byte *)(value + 0x44)],\n                 *(int *)(value + 0x68) + (uint)*(ushort *)(value + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "find_and_check_value_08003f48",
                "uVar1": "index",
                "iVar2": "returnValue",
                "iVar3": "value",
                "find_index_of_value_08003f00": "find_index_of_value",
                "check_parameters_08002eb2": "check_parameters"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "FUNC_08004094",
            "code": "\nundefined * FUNC_08004094(int param_1)\n\n{\n  undefined *puVar1;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  puVar1 = DAT_200002dc;\n  if (DAT_200002dc + param_1 <= &stack0x00000000) {\n    DAT_200002dc = DAT_200002dc + param_1;\n    return puVar1;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "FUNC_08004094"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_default_value_080040d0",
            "code": "\nundefined4 get_default_value_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_default_value_080040d0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "set_memory_size_080040d6",
            "code": "\nundefined4 setMemorySize_080040d6(undefined4 returnValue,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "set_memory_size_080040d6",
                "param_1": "returnValue",
                "param_2": "address"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "initialize_return_value_080040e0",
            "code": "\nundefined4 initializeReturnValue_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "initialize_return_value_080040e0"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_080040e4",
            "code": "\nundefined4 initialize_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_080040e4"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_application_080040e8",
            "code": "\nundefined4 initializeApplication_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_application_080040e8"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "process_data_080040ec",
            "code": "\nvoid process_data_080040ec(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_data_080040ec_08003d18(input_param_2,input_param_3,input_param_3,input_param_4,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "process_data_080040ec",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "run_infinite_loop_080040f8",
            "code": "\nvoid run_infinite_loop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "run_infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "initialize_0800410c",
            "code": "\nundefined4 initialize_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "initialize_0800410c"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_data_08004110",
            "code": "\nvoid processData_08004110(uint inputIndex,undefined4 flagType,undefined4 paramData,undefined *array)\n\n{\n  int bitValue;\n  undefined *arrayPtr;\n  int dataIndex;\n  \n  if (inputIndex < 0x60) {\n    dataIndex = (int)*(short *)(&DAT_08005d3c + inputIndex * 2);\n    arrayPtr = &DAT_08005d3c;\n  }\n  else {\n    dataIndex = -1;\n    arrayPtr = array;\n  }\n  if (dataIndex != -1) {\n    bitValue = get_bit_value_08003138(dataIndex,&DAT_200002e0,paramData,arrayPtr,array);\n    if (bitValue != 0) {\n      bitValue = find_value_in_array_0800355e(dataIndex,&DAT_08005a18);\n      if (bitValue == 0) {\n        bitValue = find_value_in_array_0800355e(dataIndex,&DAT_08005a3c);\n        if (bitValue != 0) {\n          update_bitwise_flags_08003414(dataIndex);\n        }\n      }\n      else {\n        process_data_080033d8(dataIndex);\n      }\n      update_value_in_array_0800316c(dataIndex,&DAT_200002e0);\n    }\n    switch(flagType) {\n    case 0:\n      set_flag_and_get_address_08003486(dataIndex,0);\n      break;\n    case 1:\n      set_flag_and_get_address_08003486(dataIndex,1,0);\n      break;\n    case 2:\n      set_flag_and_get_address_08003486(dataIndex,0,1);\n      break;\n    case 3:\n      set_flag_and_get_address_08003486(dataIndex,0,2);\n    }\n    set_bit_in_array_0800314e(dataIndex,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "inputIndex",
                "param_2": "flagType",
                "param_3": "paramData",
                "param_4": "array",
                "iVar1": "bitValue",
                "puVar2": "arrayPtr",
                "iVar3": "dataIndex"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "apply_conditional_param_value_080041bc",
            "code": "\nvoid applyConditionalParamValue_080041bc(uint index,undefined4 flag,undefined4 value,undefined *data)\n\n{\n  int result;\n  undefined4 mappedValue;\n  undefined *pointer;\n  uint bitValue;\n  \n  if (index < 0x60) {\n    bitValue = (uint)*(short *)(&DAT_08005d3c + index * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    bitValue = 0xffffffff;\n    pointer = data;\n  }\n  if ((bitValue != 0xffffffff) &&\n     (result = get_bit_value_08003138(bitValue,&DAT_2000030c,value,pointer,data), result != 0)) {\n    mappedValue = map_param_to_value_0800318c((bitValue << 0x18) >> 0x1c);\n    set_param_value_based_on_condition_080034b6(mappedValue,1 << (bitValue & 0xf) & 0xffff,flag);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "apply_conditional_param_value_080041bc",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "mappedValue",
                "puVar3": "pointer",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_data_08004204",
            "code": "\nvoid initialize_data_08004204(void)\n\n{\n  initialize_data_08004204_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_data_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_offset_08004240",
            "code": "\nushort calculate_offset_08004240(int base_address)\n\n{\n  return (*(short *)(base_address + 0x138) + 0x40) - *(short *)(base_address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_flag_080042ac",
            "code": "\nvoid updateFlag_080042ac(int inputValue)\n\n{\n  int validationResult;\n  ushort updatedValue;\n  undefined flagCharacter;\n  \n  validationResult = validate_and_extract_flag_08003e18(inputValue,&flagCharacter);\n  if ((validationResult == 0) &&\n     (updatedValue = *(short *)(inputValue + 100) + 1U & 0x3f, updatedValue != *(ushort *)(inputValue + 0x66))) {\n    *(undefined *)(*(int *)(inputValue + 0x60) + (uint)*(ushort *)(inputValue + 100)) = flagCharacter;\n    *(ushort *)(inputValue + 100) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_flag_080042ac",
                "param_1": "inputValue",
                "iVar1": "validationResult",
                "uVar2": "updatedValue",
                "local_9": "flagCharacter"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "set_flag_080042e8",
            "code": "\nundefined4 setFlag_080042e8(int objAddress,undefined newValue)\n\n{\n  byte byteValue;\n  byte processedByte;\n  int incrementedValue;\n  \n  *(undefined *)(objAddress + 0x10) = 1;\n  incrementedValue = *(ushort *)(objAddress + 0x140) + 1;\n  byteValue = (byte)incrementedValue;\n  processedByte = byteValue & 0x7f;\n  if (incrementedValue == 0) {\n    processedByte = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(objAddress + 0x142) == (ushort)processedByte);\n  *(undefined *)(*(int *)(objAddress + 0x13c) + (uint)*(ushort *)(objAddress + 0x140)) = newValue;\n  *(ushort *)(objAddress + 0x140) = (ushort)processedByte;\n  incrementedValue = is_high_priority_08003df4(objAddress + 0xd4);\n  if (incrementedValue == 0) {\n    FUNC_08003eac(objAddress + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "set_flag_080042e8",
                "param_1": "objAddress",
                "param_2": "newValue",
                "bVar1": "byteValue",
                "bVar2": "processedByte",
                "iVar3": "incrementedValue"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_data_structures_08004364",
            "code": "\nvoid initializeDataStructures_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_data_structures_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_serial_08004388",
            "code": "\nvoid initializeSerial_08004388(int serialPort,undefined4 baudRate,byte serialOptions)\n\n{\n  uint jumpTableIndex;\n  byte serialOptionMask;\n  int configurationIndex;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x144) = serialOptions;\n  serialOptionMask = serialOptions & 7;\n  if (serialOptionMask == 4) {\n    configurationIndex = 7;\n  }\n  else if (serialOptionMask == 6) {\n    configurationIndex = 8;\n  }\n  else if (serialOptionMask == 2) {\n    configurationIndex = 6;\n  }\n  else {\n    configurationIndex = 0;\n  }\n  if ((serialOptions & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    configurationIndex = configurationIndex + 1;\n  }\n  else if ((serialOptions & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    configurationIndex = configurationIndex + 1;\n  }\n  if ((serialOptions & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (configurationIndex == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (configurationIndex == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    configurationIndex = 0;\n  }\n  if (configurationIndex != 0) {\n    configure_uart_pins_08003978(serialPort + 0xd4);\n    update_data_entry_08003e54(serialPort + 0xd4,0x80042ad);\n    return;\n  }\n  UNRECOVERED_JUMPTABLE = (code *)0x8004432;\n  process_failed_assertion_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (jumpTableIndex < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + jumpTableIndex * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_serial_08004388",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "serialOptions",
                "extraout_r1": "jumpTableIndex",
                "bVar1": "serialOptionMask",
                "iVar2": "configurationIndex"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "set_result_based_on_threshold_08004444",
            "code": "\nvoid setResultBasedOnThreshold_08004444(int resultAddress,uint threshold)\n\n{\n  undefined2 resultValue;\n  code *jumpTable;\n  \n  if (threshold < 0x60) {\n    resultValue = *(undefined2 *)(&DAT_08005d3c + threshold * 2);\n  }\n  else {\n    resultValue = 0xffff;\n  }\n  *(undefined2 *)(resultAddress + 0x12e) = resultValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "set_result_based_on_threshold_08004444",
                "param_1": "resultAddress",
                "param_2": "threshold",
                "uVar1": "resultValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "update_value_based_on_threshold_08004460",
            "code": "\nvoid updateValueBasedOnThreshold_08004460(int baseAddress,uint offset)\n\n{\n  undefined2 updatedValue;\n  \n  if (offset < 0x60) {\n    updatedValue = *(undefined2 *)(&DAT_08005d3c + offset * 2);\n  }\n  else {\n    updatedValue = 0xffff;\n  }\n  *(undefined2 *)(baseAddress + 300) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "update_value_based_on_threshold_08004460",
                "param_1": "baseAddress",
                "param_2": "offset",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_data_structures_0800447c",
            "code": "\nundefined4 *\ninitialize_data_structures_0800447c(undefined4 *output_array,undefined4 input_value,undefined4 threshold_1,undefined4 threshold_2)\n\n{\n  undefined2 value_1;\n  \n  output_array[1] = 0;\n  output_array[2] = 1000;\n  *output_array = &PTR_FUN_080042e8_1_08005ed4;\n  if (output_array == &DAT_20000338) {\n    set_result_based_on_threshold(&DAT_20000338,0x4c,threshold_1,&DAT_20000338,threshold_2);\n    update_value_based_on_threshold(&DAT_20000338,0x4d);\n  }\n  else {\n    value_1 = find_value_or_default(input_value,&DAT_08005c10);\n    *(undefined2 *)((int)output_array + 0x12e) = value_1;\n    value_1 = find_value_or_default(input_value,&DAT_08005ca0);\n    *(undefined2 *)(output_array + 0x4b) = value_1;\n  }\n  initialize_data_structures_0800447c(output_array);\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_data_structures_0800447c",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "threshold_1",
                "param_4": "threshold_2",
                "uVar1": "value_1",
                "set_result_based_on_threshold_08004444": "set_result_based_on_threshold",
                "update_value_based_on_threshold_08004460": "update_value_based_on_threshold",
                "find_value_or_default_0800351e": "find_value_or_default",
                "initialize_data_structures_08004364": "initialize_data_structures"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_data_structures_080044d8",
            "code": "\nvoid initializeDataStructures_080044d8(int status,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_data_structures_0800447c(&DAT_20000338,0x40004800,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_data_structures_080044d8",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_parameters_08004544",
            "code": "\nvoid initializeParameters_08004544(undefined4 *outputPointer,undefined parameter1,undefined parameter2,undefined parameter3,\n                 undefined parameter4)\n\n{\n  *outputPointer = &DAT_08005f28;\n  *(undefined *)(outputPointer + 1) = parameter1;\n  *(undefined *)((int)outputPointer + 5) = parameter2;\n  *(undefined *)((int)outputPointer + 6) = parameter3;\n  *(undefined *)((int)outputPointer + 7) = parameter4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_parameters_08004544",
                "param_1": "outputPointer",
                "param_2": "parameter1",
                "param_3": "parameter2",
                "param_4": "parameter3",
                "param_5": "parameter4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_parameters_if_condition_met_08004560",
            "code": "\nvoid initialize_parameters_if_condition_met_08004560(int input_parameter_1,int input_parameter_2)\n\n{\n  if ((input_parameter_1 == 1) && (input_parameter_2 == 0xffff)) {\n    initialize_parameters(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_parameters_if_condition_met_08004560",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "initialize_parameters_08004544": "initialize_parameters"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_value_with_shift_08004640",
            "code": "\nuint combineValueWithShift_08004640(int value,uint shiftedValue)\n\n{\n  return shiftedValue | value << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_value_with_shift_08004640",
                "param_1": "value",
                "param_2": "shiftedValue"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_and_update_application_08004648",
            "code": "\nvoid initialize_and_update_application_08004648(void)\n\n{\n  update_data(3);\n  initialize_application();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_and_update_application_08004648",
                "update_data_08000e3c": "update_data",
                "initialize_application_08000d8e": "initialize_application"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "execute_data_processing_loop_08004658",
            "code": "\nvoid execute_data_processing_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  initialize_and_process_data();\n  do {\n    process_data();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "execute_data_processing_loop_08004658",
                "initialize_and_execute_data_processing_08000c4c": "initialize_and_process_data",
                "process_data_08000c64": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "find_number_of_bits_set_08004678",
            "code": "\nchar findNumberOfBitsSet_08004678(uint number)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "find_number_of_bits_set_08004678",
                "param_1": "number",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int flag,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    shiftDataLeft(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "shift_left_uint64_080047fe": "shiftDataLeft"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "process_data_080047c0",
            "code": "\nvoid processData_080047c0(int data)\n\n{\n  int bitCount;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  process_data_08005760();\n  bitCount = findSetBitCount();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    processData_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "process_data_080047c0",
                "param_1": "data",
                "iVar1": "bitCount",
                "find_number_of_bits_set_08004678": "findSetBitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "process_if_bits_set_080047d0",
            "code": "\nvoid process_if_bits_set_080047d0(void)\n\n{\n  int bitCount;\n  \n  bitCount = find_bit_count();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    process_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "process_if_bits_set_080047d0",
                "iVar1": "bitCount",
                "find_number_of_bits_set_08004678": "find_bit_count",
                "process_data_080047c0": "process_data"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "shift_left_uint64_080047fe",
            "code": "\nvoid shift_left_uint64_080047fe(undefined4 input_value,undefined4 shift_amount)\n\n{\n  left_shift_uint64_08004844(shift_amount,input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "shift_left_uint64_080047fe",
                "param_1": "input_value",
                "param_2": "shift_amount"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "process_failed_assertion_08004808",
            "code": "\nvoid processFailedAssertion_08004808(undefined4 fileName,undefined4 lineNumber,char *assertionMessage,undefined4 additionalMessage)\n\n{\n  undefined4 baseAddress;\n  char *delimiter;\n  undefined8 processedData;\n  undefined4 modifiedAdditionalMessage;\n  \n  baseAddress = *(undefined4 *)(DAT_200000a0 + 0xc);\n  modifiedAdditionalMessage = additionalMessage;\n  if (assertionMessage == (char *)0x0) goto LAB_0800482c;\n  delimiter = \", function: \";\n  do {\n    process_and_pass_input_08004860(baseAddress,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",additionalMessage,fileName,lineNumber\n                 ,delimiter,assertionMessage,modifiedAdditionalMessage);\n    processedData = process_data_080051ac();\n    lineNumber = (undefined4)((ulonglong)processedData >> 0x20);\n    baseAddress = (undefined4)processedData;\nLAB_0800482c:\n    assertionMessage = \"\";\n    delimiter = assertionMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "process_failed_assertion_08004808",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "assertionMessage",
                "param_4": "additionalMessage",
                "uVar1": "baseAddress",
                "pcVar2": "delimiter",
                "uVar3": "processedData",
                "uVar4": "modifiedAdditionalMessage"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "left_shift_uint64_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong leftShiftUint64_08004844(undefined4 param,uint value)\n\n{\n  return (unsignedLongLong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "left_shift_uint64_08004844",
                "param_1": "param",
                "param_2": "value",
                "ulonglong": "unsignedLongLong"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_and_pass_input_08004860",
            "code": "\nvoid process_and_pass_input_08004860(undefined4 input_param_1,undefined4 input_param_2,undefined4 stack_param_1,undefined4 stack_param_2)\n\n{\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  \n  stack_var_1 = stack_param_1;\n  stack_var_2 = stack_param_2;\n  process_input_08004a84(DAT_200000a0,input_param_1,input_param_2,&stack_var_1,input_param_1,&stack_var_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_and_pass_input_08004860",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "stack_param_1",
                "param_4": "stack_param_2",
                "uStack_8": "stack_var_1",
                "uStack_4": "stack_var_2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int counter;\n  \n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (*(code *)(&DAT_08006008)[counter])();\n  }\n  FUNC_080059f8();\n  for (counter = 0; counter != 10; counter = counter + 1) {\n    (*(code *)(&DAT_08006008)[counter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "counter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_with_value_080048cc",
            "code": "\nvoid fillMemoryWithValue_080048cc(undefined *memory,undefined value,int size)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + size;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_with_value_080048cc",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_data_structure_080048dc",
            "code": "\nvoid updateDataStructure_080048dc(undefined4 *outputArray,int inputArrayLength,undefined4 param_3,undefined4 param_4)\n\n{\n  int *tempPtr;\n  int **tempPtr2;\n  int **currentNode;\n  int **prevNode;\n  int **tempNode;\n  int **newNode;\n  bool isNewNode;\n  \n  if (inputArrayLength == 0) {\n    return;\n  }\n  newNode = (int **)(inputArrayLength + -4);\n  if (*(int *)(inputArrayLength + -4) < 0) {\n    newNode = (int **)((int)newNode + *(int *)(inputArrayLength + -4));\n  }\n  FUNC_0800557c();\n  prevNode = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    newNode[1] = (int *)0x0;\n    currentNode = tempPtr2;\n    DAT_200005c8 = newNode;\n  }\n  else {\n    prevNode = DAT_200005c8;\n    if (newNode < DAT_200005c8) {\n      currentNode = (int **)*newNode;\n      prevNode = (int **)((int)newNode + (int)currentNode);\n      isNewNode = DAT_200005c8 == prevNode;\n      if (isNewNode) {\n        prevNode = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      newNode[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = newNode;\n      if (isNewNode) {\n        prevNode = (int **)((int)prevNode + (int)currentNode);\n        *newNode = (int *)prevNode;\n      }\n    }\n    else {\n      do {\n        tempNode = prevNode;\n        prevNode = (int **)tempNode[1];\n        if (prevNode == (int **)0x0) break;\n      } while (prevNode <= newNode);\n      currentNode = (int **)*tempNode;\n      if ((int **)((int)tempNode + (int)currentNode) == newNode) {\n        currentNode = (int **)((int)currentNode + (int)*newNode);\n        *tempNode = (int *)currentNode;\n        if (prevNode == (int **)((int)tempNode + (int)currentNode)) {\n          tempPtr = *prevNode;\n          prevNode = (int **)prevNode[1];\n          tempNode[1] = (int *)prevNode;\n          currentNode = (int **)((int)currentNode + (int)tempPtr);\n          *tempNode = (int *)currentNode;\n        }\n      }\n      else if (newNode < (int **)((int)tempNode + (int)currentNode)) {\n        *outputArray = 0xc;\n      }\n      else {\n        currentNode = (int **)((int)newNode + (int)*newNode);\n        isNewNode = prevNode == currentNode;\n        if (isNewNode) {\n          currentNode = (int **)*prevNode;\n          prevNode = (int **)prevNode[1];\n        }\n        newNode[1] = (int *)prevNode;\n        if (isNewNode) {\n          currentNode = (int **)((int)currentNode + (int)*newNode);\n          *newNode = (int *)currentNode;\n        }\n        tempNode[1] = (int *)newNode;\n      }\n    }\n  }\n  FUNC_0800557e(outputArray,currentNode,prevNode,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_data_structure_080048dc",
                "param_1": "outputArray",
                "param_2": "inputArrayLength",
                "piVar1": "tempPtr",
                "extraout_r1": "tempPtr2",
                "ppiVar2": "currentNode",
                "ppiVar3": "prevNode",
                "ppiVar4": "tempNode",
                "ppiVar5": "newNode",
                "bVar6": "isNewNode"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "validate_and_update_ptr_08004978",
            "code": "\nuint validate_and_update_ptr_08004978(undefined4 *ptr_to_update,uint size_to_allocate)\n\n{\n  uint *current_ptr;\n  int difference;\n  uint *next_ptr;\n  uint calculated_difference;\n  uint *prev_ptr;\n  uint allocated_size;\n  \n  allocated_size = (size_to_allocate + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size_to_allocate)) {\n    *ptr_to_update = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_ptr = DAT_200005c8;\n    prev_ptr = DAT_200005c8;\n    while (next_ptr = current_ptr, next_ptr != (uint *)0x0) {\n      calculated_difference = *next_ptr - allocated_size;\n      if (-1 < (int)calculated_difference) {\n        if (calculated_difference < 0xc) {\n          if (prev_ptr == next_ptr) {\n            current_ptr = (uint *)prev_ptr[1];\n          }\n          else {\n            current_ptr = (uint *)next_ptr[1];\n          }\n          if (prev_ptr != next_ptr) {\n            prev_ptr[1] = (uint)current_ptr;\n            prev_ptr = next_ptr;\n            current_ptr = DAT_200005c8;\n          }\n        }\n        else {\n          *next_ptr = calculated_difference;\n          *(uint *)((int)next_ptr + calculated_difference) = allocated_size;\n          prev_ptr = (uint *)((int)next_ptr + calculated_difference);\n          current_ptr = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      prev_ptr = next_ptr;\n      current_ptr = (uint *)next_ptr[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = validate_and_update_value_0800500c(ptr_to_update);\n    }\n    current_ptr = (uint *)validate_and_update_value_0800500c(ptr_to_update,allocated_size);\n    if ((current_ptr != (uint *)0xffffffff) &&\n       ((prev_ptr = (uint *)((int)current_ptr + 3U & 0xfffffffc), current_ptr == prev_ptr ||\n        (difference = validate_and_update_value_0800500c(ptr_to_update,(int)prev_ptr - (int)current_ptr), difference != -1)))) {\n      *prev_ptr = allocated_size;\n      current_ptr = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_ptr;\n      FUNC_0800557e(ptr_to_update);\n      allocated_size = (int)prev_ptr + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(prev_ptr + 1);\n      if (difference != 0) {\n        *(int *)((int)prev_ptr + difference) = -difference;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *ptr_to_update = 0xc;\n    FUNC_0800557e(ptr_to_update);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "validate_and_update_ptr_08004978",
                "param_1": "ptr_to_update",
                "param_2": "size_to_allocate",
                "puVar1": "current_ptr",
                "iVar2": "difference",
                "puVar3": "next_ptr",
                "uVar4": "calculated_difference",
                "puVar5": "prev_ptr",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint process_input_08004a34(int input_data,byte input_byte,byte **data_array)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint result;\n  \n  temp_var2 = data_array[2] + -1;\n  data_array[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)data_array[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)input_byte, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *data_array;\n    *data_array = temp_var2 + 1;\n    *temp_var2 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_data_structure();\n  }\n  if (data_array == (byte **)&DAT_08005fc0) {\n    data_array = *(byte ***)(input_data + 4);\n  }\n  else if (data_array == (byte **)&DAT_08005fe0) {\n    data_array = *(byte ***)(input_data + 8);\n  }\n  else if (data_array == (byte **)&DAT_08005fa0) {\n    data_array = *(byte ***)(input_data + 0xc);\n  }\n  data_array[2] = data_array[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(data_array + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = data_array[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = process_data_first(input_data,data_array,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    temp_var1 = (int)*data_array - (int)data_array[4];\n    result = (uint)input_byte;\n    if ((temp_var1 < (int)data_array[5]) || (temp_var1 = process_data_second(input_data,data_array), temp_var1 == 0)) {\n      data_array[2] = data_array[2] + -1;\n      temp_var2 = *data_array;\n      *data_array = temp_var2 + 1;\n      *temp_var2 = input_byte;\n      if ((byte *)(temp_var1 + 1) != data_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var1 = process_data_second(input_data,data_array);\n      if (temp_var1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_data",
                "param_2": "input_byte",
                "param_3": "data_array",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "result",
                "initialize_data_structure_080053a0": "initialize_data_structure",
                "process_data_080050d0": "process_data_first",
                "process_data_080052cc": "process_data_second"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_input_08004a60",
            "code": "\nint process_input_08004a60(undefined4 input_param1,undefined4 input_param2,undefined *input_data,int input_length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int remaining_length;\n  \n  end_of_data = input_data + input_length;\n  remaining_length = input_length;\n  do {\n    if (input_data == end_of_data) {\n      return 0;\n    }\n    result = process_input_08004a60_08004a34(input_param1,*input_data,input_param2,input_length,remaining_length);\n    input_length = result + 1;\n    input_data = input_data + 1;\n  } while (input_length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_input_08004a60",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_data",
                "param_4": "input_length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "remaining_length"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_input_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint processInput_08004a84(int input,undefined4 *data,byte *inputString,int *count)\n\n{\n  int result;\n  int *ptr;\n  bool flag;\n  byte *ptr2;\n  byte *ptr3;\n  int var1;\n  int var2;\n  int *output;\n  uint flags;\n  int value;\n  undefined4 var3;\n  int var4;\n  int total;\n  byte byteVal;\n  undefined flag1;\n  undefined flag2;\n  undefined flag3;\n  undefined4 var5;\n  \n  output = count;\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_data_structure_080053a0();\n  }\n  if (data == &DAT_08005fc0) {\n    data = *(undefined4 **)(input + 4);\n  }\n  else if (data == (undefined4 *)&DAT_08005fe0) {\n    data = *(undefined4 **)(input + 8);\n  }\n  else if (data == (undefined4 *)&DAT_08005fa0) {\n    data = *(undefined4 **)(input + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(data + 3) << 0x1c)) || (data[4] == 0)) &&\n     (var2 = process_data_080050d0(input,data), var2 != 0)) {\n    return -1;\n  }\n  total = 0;\n  flag1 = 0x20;\n  flag2 = 0x30;\n  ptr2 = inputString;\nLAB_08004ac6:\n  ptr3 = ptr2;\n  if (*ptr3 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  ptr2 = ptr3 + 1;\n  if (*ptr3 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  var2 = (int)ptr3 - (int)inputString;\n  if (var2 != 0) {\n    result = process_input_08004a60(input,data,inputString,var2);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(data + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total;\n    }\n    total = total + var2;\n  }\n  if (*ptr3 == 0) goto LAB_08004c70;\n  flags = 0;\n  var4 = 0;\n  value = -1;\n  var3 = 0;\n  flag3 = 0;\n  var5 = 0;\n  ptr2 = ptr3 + 1;\n  while( true ) {\n    var2 = find_byte_sequence_08000230(\"#-0+ \",*ptr2);\n    inputString = ptr2 + 1;\n    if (var2 == 0) break;\n    flags = 1 << (var2 + 0xf7ffa094U & 0xff) | flags;\n    ptr2 = inputString;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag3 = 0x2b;\n  }\n  if (*ptr2 == 0x2a) {\n    ptr = output + 1;\n    var2 = *output;\n    output = ptr;\n    if (var2 < 0) {\n      var4 = -var2;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    flag = false;\n    var2 = var4;\n    inputString = ptr2;\n    while( true ) {\n      if (9 < *inputString - 0x30) break;\n      var2 = var2 * 10 + (*inputString - 0x30);\n      flag = true;\n      inputString = inputString + 1;\n    }\n    if (!flag) goto LAB_08004bae;\n  }\n  var4 = var2;\nLAB_08004bae:\n  if (*inputString == 0x2e) {\n    if (inputString[1] == 0x2a) {\n      value = *output;\n      if (value < 0) {\n        value = -1;\n      }\n      inputString = inputString + 2;\n      output = output + 1;\n    }\n    else {\n      flag = false;\n      value = 0;\n      var2 = 0;\n      while( true ) {\n        inputString = inputString + 1;\n        if (9 < *inputString - 0x30) break;\n        var2 = var2 * 10 + (*inputString - 0x30);\n        flag = true;\n      }\n      if (flag) {\n        value = var2;\n      }\n    }\n  }\n  var2 = find_byte_sequence_08000230(&DAT_08005f72,*inputString,3);\n  if (var2 != 0) {\n    flags = flags | 0x40 << (var2 + 0xf7ffa08eU & 0xff);\n    inputString = inputString + 1;\n  }\n  byteVal = *inputString;\n  inputString = inputString + 1;\n  var2 = find_byte_sequence_08000230(\"efgEFG\",byteVal,6);\n  if (var2 == 0) {\n    var1 = convert_to_hex_string_08004d9c(input,&flags,data,0x8004a61,&output);\n    if (var1 == -1) goto LAB_08004c70;\n  }\n  else {\n    output = (int *)(((int)output + 7U & 0xfffffff8) + 8);\n  }\n  total = total + var1;\n  ptr2 = inputString;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_input_08004a84",
                "param_1": "input",
                "param_2": "data",
                "param_3": "inputString",
                "param_4": "count",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "flag",
                "pbVar4": "ptr2",
                "pbVar5": "ptr3",
                "unaff_r9": "var1",
                "iVar6": "var2",
                "local_8c": "output",
                "local_88": "flags",
                "local_84": "value",
                "local_80": "var3",
                "local_7c": "var4",
                "local_74": "total",
                "local_70": "byteVal",
                "local_6f": "flag1",
                "local_6e": "flag2",
                "local_45": "flag3",
                "local_30": "var5"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "calculate_required_length_08004cb0",
            "code": "\nundefined4\ncalculateRequiredLength_08004cb0(undefined4 input,uint *array,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint maxValue;\n  uint counter;\n  bool conditionCheck;\n  \n  maxValue = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxValue = array[2];\n  }\n  *output = maxValue;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *output = maxValue + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (index = 0; index < (int)(array[3] - *output); index = index + 1) {\n      result = (*callback)(input,param,(int)array + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)array + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxValue + 0x43) = 0x30;\n    *(undefined *)((int)array + maxValue + 0x44) = *(undefined *)((int)array + 0x45);\n    maxValue = maxValue + 2;\n  }\n  index = (*callback)(input,param,(int)array + 0x43,maxValue);\n  if (index != -1) {\n    maxValue = array[3];\n    conditionCheck = (*array & 6) == 4;\n    if (conditionCheck) {\n      maxValue = maxValue - *output;\n    }\n    if (conditionCheck) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    else {\n      maxValue = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxValue = maxValue + (array[2] - array[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (maxValue == counter) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)array + 0x1a,1);\n      if (index == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "calculate_required_length_08004cb0",
                "param_1": "input",
                "param_2": "array",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "maxValue",
                "uVar4": "counter",
                "bVar5": "conditionCheck"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "convert_to_hex_string_08004d9c",
            "code": "\nuint convertToHexString_08004d9c(undefined4 inputParam,uint *number,undefined4 paramSize,code *conversionFunction,uint **outputParam)\n\n{\n  byte byteValue;\n  int index;\n  uint *pointer;\n  int tempVar;\n  char *hexCharacters;\n  uint masks;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint tempValue;\n  char *result;\n  char *inputHex;\n  uint localVariables [2];\n  \n  byteValue = *(byte *)(number + 6);\n  inputHex = (char *)((int)number + 0x43);\n  if (byteValue != 0x6e) {\n    if (byteValue < 0x6f) {\n      if (byteValue != 99) {\n        if (byteValue < 100) {\n          if (byteValue == 0) goto LAB_08004f56;\n          if (byteValue != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)number + 0x45) = 0x58;\n          hexCharacters = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          masks = *number;\n          pointer = *outputParam;\n          *outputParam = pointer + 1;\n          if (((masks & 0x80) == 0) && ((int)(masks << 0x19) < 0)) {\n            value = (uint)*(ushort *)pointer;\n          }\n          else {\n            value = *pointer;\n          }\n          if ((int)(masks << 0x1f) < 0) {\n            *number = masks | 0x20;\n          }\n          if (value == 0) {\n            *number = *number & 0xffffffdf;\n          }\n          masks = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)number + 0x43) = 0;\n        }\n        else {\n          if ((byteValue != 100) && (byteValue != 0x69)) goto LAB_08004dcc;\n          value = *number;\n          pointer = *outputParam;\n          if ((value & 0x80) == 0) {\n            *outputParam = pointer + 1;\n            if ((value & 0x40) == 0) goto LAB_08004dec;\n            value = (uint)(short)*(ushort *)pointer;\n          }\n          else {\n            *outputParam = pointer + 1;\nLAB_08004dec:\n            value = *pointer;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)number + 0x43) = 0x2d;\n          }\n          hexCharacters = \"0123456789ABCDEF\";\n          masks = 10;\n        }\n        tempValue = number[1];\n        number[2] = tempValue;\n        result = inputHex;\n        if ((int)tempValue < 0) {\n          if (value != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)number + 0x42) = *hexCharacters;\n          result = (char *)((int)number + 0x42);\n        }\n        else {\n          *number = *number & 0xfffffffb;\n          if (value == 0) {\n            if (tempValue != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              tempValue = value / masks;\n              result = result + -1;\n              *result = hexCharacters[value - masks * tempValue];\n              value = tempValue;\n            } while (tempValue != 0);\n          }\n        }\n        if (((masks == 8) && ((int)(*number << 0x1f) < 0)) && ((int)number[1] <= (int)number[4]))\n        {\n          result[-1] = '0';\n          result = result + -1;\n        }\n        number[4] = (int)inputHex - (int)result;\n        inputHex = result;\n        goto LAB_08004ec2;\n      }\n      pointer = *outputParam;\n      *outputParam = pointer + 1;\n      *(char *)((int)number + 0x42) = (char)*pointer;\nLAB_08004e2c:\n      inputHex = (char *)((int)number + 0x42);\n      value = 1;\n    }\n    else {\n      if (byteValue != 0x73) {\n        if (byteValue < 0x74) {\n          if (byteValue == 0x6f) {\nLAB_08004e52:\n            value = *number;\n            pointer = *outputParam;\n            if ((value & 0x80) == 0) {\n              *outputParam = pointer + 1;\n              if ((value & 0x40) == 0) goto LAB_08004e60;\n              value = (uint)*(ushort *)pointer;\n            }\n            else {\n              *outputParam = pointer + 1;\nLAB_08004e60:\n              value = *pointer;\n            }\n            hexCharacters = \"0123456789ABCDEF\";\n            if (byteValue == 0x6f) {\n              masks = 8;\n            }\n            else {\n              masks = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byteValue == 0x70) {\n            *number = *number | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)number + 0x45) = 0x78;\n            hexCharacters = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byteValue == 0x75) goto LAB_08004e52;\n          if (byteValue == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)number + 0x42) = byteValue;\n        goto LAB_08004e2c;\n      }\n      ppcVar8 = (char **)*outputParam;\n      *outputParam = (uint *)(ppcVar8 + 1);\n      inputHex = *ppcVar8;\n      index = find_byte_sequence_08000230(inputHex,0,number[1]);\n      if (index != 0) {\n        number[1] = index - (int)inputHex;\n      }\n      value = number[1];\n    }\n    number[4] = value;\n    *(undefined *)((int)number + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  value = *number;\n  ppuVar7 = (uint **)*outputParam;\n  masks = number[5];\n  if ((value & 0x80) == 0) {\n    *outputParam = (uint *)(ppuVar7 + 1);\n    pointer = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_08004f42;\n    *(short *)pointer = (short)masks;\n  }\n  else {\n    *outputParam = (uint *)(ppuVar7 + 1);\n    pointer = *ppuVar7;\nLAB_08004f42:\n    *pointer = masks;\n  }\nLAB_08004f56:\n  number[4] = 0;\nLAB_08004ec2:\n  index = calculate_required_length_08004cb0(inputParam,number,localVariables,paramSize,conversionFunction);\n  if ((index == -1) || (index = (*conversionFunction)(inputParam,paramSize,inputHex,number[4]), index == -1)) {\nLAB_08004ed6:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*number << 0x1e) < 0) {\n      for (index = 0; index < (int)(number[3] - localVariables[0]); index = index + 1) {\n        tempVar = (*conversionFunction)(inputParam,paramSize,(int)number + 0x19,1);\n        if (tempVar == -1) goto LAB_08004ed6;\n      }\n    }\n    value = number[3];\n    if ((int)number[3] < (int)localVariables[0]) {\n      value = localVariables[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "convert_to_hex_string_08004d9c",
                "param_1": "inputParam",
                "param_2": "number",
                "param_3": "paramSize",
                "param_4": "conversionFunction",
                "param_5": "outputParam",
                "bVar1": "byteValue",
                "iVar2": "index",
                "puVar3": "pointer",
                "iVar4": "tempVar",
                "pcVar5": "hexCharacters",
                "uVar6": "masks",
                "uVar9": "value",
                "uVar10": "tempValue",
                "pcVar11": "result",
                "pcVar12": "inputHex",
                "local_24": "localVariables"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "initialize_and_process_input_08004fdc",
            "code": "\nvoid initializeAndProcessInput_08004fdc(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int dataAddress;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  undefined4 arg4Copy;\n  \n  dataAddress = DAT_200000a0;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  arg4Copy = arg4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_structure_080053a0(DAT_200000a0);\n  }\n  process_input_08004a84(dataAddress,*(undefined4 *)(dataAddress + 8),arg1,&arg2Copy,arg1Copy,&arg2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "initialize_and_process_input_08004fdc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "dataAddress",
                "uVar2": "arg1Copy",
                "uStack_c": "arg2Copy",
                "uStack_8": "arg3Copy",
                "uStack_4": "arg4Copy"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "validate_and_update_value_0800500c",
            "code": "\nvoid validateAndUpdateValue_0800500c(int *outputValue,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = FUNC_08004094(inputValue);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *outputValue = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "validate_and_update_value_0800500c",
                "param_1": "outputValue",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint process_data_080050d0(undefined4 *output,undefined4 *input)\n\n{\n  int data_structure_ptr;\n  uint result;\n  ushort flags;\n  \n  data_structure_ptr = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_structure_080053a0(DAT_200000a0);\n  }\n  if (input == &DAT_08005fc0) {\n    input = *(undefined4 **)(data_structure_ptr + 4);\n  }\n  else if (input == (undefined4 *)&DAT_08005fe0) {\n    input = *(undefined4 **)(data_structure_ptr + 8);\n  }\n  else if (input == (undefined4 *)&DAT_08005fa0) {\n    input = *(undefined4 **)(data_structure_ptr + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          update_data_structure_080048dc(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    update_memory_status_080054fc(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "data_structure_ptr",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_data_structure_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    update_memory_status_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_data_080051ac",
            "code": "\nvoid processData_080051ac(void)\n\n{\n  uint *pointer1;\n  int variable1;\n  int *pointer2;\n  int *pointer3;\n  uint variable2;\n  ushort variable3;\n  int variable4;\n  code *functionPointer;\n  int variable5;\n  uint variable6;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bool1;\n  undefined8 result;\n  \n  process_data_080055d0(6);\n  UNRECOVERED_JUMPTABLE_00 = (code *)0x80051bb;\n  result = run_infinite_loop_080040f8(1);\n  pointer2 = (int *)((ulonglong)result >> 0x20);\n  pointer1 = (uint *)result;\n  variable3 = *(ushort *)(pointer2 + 3);\n  variable2 = (uint)variable3;\n  if ((int)(variable2 << 0x1c) < 0) {\n    variable1 = pointer2[4];\n    if (variable1 != 0) {\n      variable4 = variable2 << 0x1e;\n      bool1 = variable4 == 0;\n      variable5 = *pointer2;\n      if (bool1) {\n        variable4 = pointer2[5];\n      }\n      *pointer2 = variable1;\n      if (!bool1) {\n        variable4 = 0;\n      }\n      pointer2[2] = variable4;\n      for (variable5 = variable5 - variable1; 0 < variable5; variable5 = variable5 - variable4) {\n        variable4 = (*(code *)pointer2[10])(pointer1,pointer2[8],variable1,variable5);\n        if (variable4 < 1) {\n          variable3 = *(ushort *)(pointer2 + 3);\n          goto LAB_080052b2;\n        }\n        variable1 = variable1 + variable4;\n      }\n    }\n  }\n  else if (((0 < pointer2[1]) || (0 < pointer2[0x10])) &&\n          (functionPointer = (code *)pointer2[0xb], functionPointer != (code *)0x0)) {\n    variable6 = *pointer1;\n    *pointer1 = 0;\n    if ((variable3 & 0x1000) == 0) {\n      variable1 = (*functionPointer)(pointer1,pointer2[8],variable2 & 0x1000,1);\n      if ((variable1 == -1) && (variable2 = *pointer1, variable2 != 0)) {\n        if ((variable2 != 0x1d) && (variable2 != 0x16)) {\n          *(ushort *)(pointer2 + 3) = *(ushort *)(pointer2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*UNRECOVERED_JUMPTABLE_00)();\n          return;\n        }\n        *pointer1 = variable6;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      variable1 = pointer2[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer2 + 3) << 0x1d) < 0) &&\n       (variable1 = variable1 - pointer2[1], pointer2[0xd] != 0)) {\n      variable1 = variable1 - pointer2[0x10];\n    }\n    variable1 = (*(code *)pointer2[0xb])(pointer1,pointer2[8],variable1,0);\n    variable3 = *(ushort *)(pointer2 + 3);\n    if ((variable1 == -1) &&\n       ((0x1d < *pointer1 || (-1 < (int)((0x20400001U >> (*pointer1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(pointer2 + 3) = variable3 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n      return;\n    }\n    pointer2[1] = 0;\n    *pointer2 = pointer2[4];\n    if (((int)((uint)variable3 << 0x13) < 0) && ((variable1 != -1 || (*pointer1 == 0)))) {\n      pointer2[0x15] = variable1;\n    }\n    pointer3 = (int *)pointer2[0xd];\n    *pointer1 = variable6;\n    if (pointer3 != (int *)0x0) {\n      if (pointer3 != pointer2 + 0x11) {\n        update_data_structure_080048dc(pointer1);\n      }\n      pointer2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*UNRECOVERED_JUMPTABLE_00)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE_00)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_data_080051ac",
                "puVar1": "pointer1",
                "iVar2": "variable1",
                "piVar3": "pointer2",
                "piVar4": "pointer3",
                "uVar5": "variable2",
                "uVar6": "variable3",
                "iVar7": "variable4",
                "pcVar8": "functionPointer",
                "iVar9": "variable5",
                "uVar10": "variable6",
                "bVar11": "bool1",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 processData_080052cc(uint *dataPtr,int *infoPtr)\n\n{\n  undefined4 returnValue;\n  int index;\n  int *tempPtr;\n  uint tempValue;\n  ushort flag;\n  int tempVar;\n  undefined4 unassignedVar4;\n  undefined4 unassignedVar5;\n  code *functionPtr;\n  int counter;\n  uint originalValue;\n  code *jumpTable;\n  bool bVar10;\n  \n  if (infoPtr[4] != 0) {\n    if ((dataPtr != (uint *)0x0) && (dataPtr[6] == 0)) {\n      initialize_data_structure_080053a0();\n    }\n    if (infoPtr == &DAT_08005fc0) {\n      infoPtr = (int *)dataPtr[1];\n    }\n    else if (infoPtr == (int *)&DAT_08005fe0) {\n      infoPtr = (int *)dataPtr[2];\n    }\n    else if (infoPtr == (int *)&DAT_08005fa0) {\n      infoPtr = (int *)dataPtr[3];\n    }\n    if (*(short *)(infoPtr + 3) != 0) {\n      flag = *(ushort *)(infoPtr + 3);\n      tempValue = (uint)flag;\n      if ((int)(tempValue << 0x1c) < 0) {\n        index = infoPtr[4];\n        if (index != 0) {\n          tempVar = tempValue << 0x1e;\n          bVar10 = tempVar == 0;\n          counter = *infoPtr;\n          if (bVar10) {\n            tempVar = infoPtr[5];\n          }\n          *infoPtr = index;\n          if (!bVar10) {\n            tempVar = 0;\n          }\n          infoPtr[2] = tempVar;\n          for (counter = counter - index; 0 < counter; counter = counter - tempVar) {\n            tempVar = (*(code *)infoPtr[10])(dataPtr,infoPtr[8],index,counter,unassignedVar4,unassignedVar5);\n            if (tempVar < 1) {\n              flag = *(ushort *)(infoPtr + 3);\n              goto LAB_080052b2;\n            }\n            index = index + tempVar;\n          }\n        }\n      }\n      else if (((0 < infoPtr[1]) || (0 < infoPtr[0x10])) &&\n              (functionPtr = (code *)infoPtr[0xb], functionPtr != (code *)0x0)) {\n        originalValue = *dataPtr;\n        *dataPtr = 0;\n        if ((flag & 0x1000) == 0) {\n          index = (*functionPtr)(dataPtr,infoPtr[8],tempValue & 0x1000,1);\n          if ((index == -1) && (tempValue = *dataPtr, tempValue != 0)) {\n            if ((tempValue != 0x1d) && (tempValue != 0x16)) {\n              *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *dataPtr = originalValue;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          index = infoPtr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoPtr + 3) << 0x1d) < 0) &&\n           (index = index - infoPtr[1], infoPtr[0xd] != 0)) {\n          index = index - infoPtr[0x10];\n        }\n        index = (*(code *)infoPtr[0xb])(dataPtr,infoPtr[8],index,0);\n        flag = *(ushort *)(infoPtr + 3);\n        if ((index == -1) &&\n           ((0x1d < *dataPtr || (-1 < (int)((0x20400001U >> (*dataPtr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(infoPtr + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        infoPtr[1] = 0;\n        *infoPtr = infoPtr[4];\n        if (((int)((uint)flag << 0x13) < 0) && ((index != -1 || (*dataPtr == 0)))) {\n          infoPtr[0x15] = index;\n        }\n        tempPtr = (int *)infoPtr[0xd];\n        *dataPtr = originalValue;\n        if (tempPtr != (int *)0x0) {\n          if (tempPtr != infoPtr + 0x11) {\n            update_data_structure_080048dc(dataPtr);\n          }\n          infoPtr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "dataPtr",
                "param_2": "infoPtr",
                "uVar1": "returnValue",
                "iVar2": "index",
                "piVar3": "tempPtr",
                "uVar4": "tempValue",
                "uVar5": "flag",
                "iVar6": "tempVar",
                "unaff_r4": "unassignedVar4",
                "unaff_r5": "unassignedVar5",
                "pcVar7": "functionPtr",
                "iVar8": "counter",
                "uVar9": "originalValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_data_structure_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_memory_0800532c",
            "code": "\nvoid initializeMemory_0800532c(undefined4 *memory,undefined2 value1,undefined2 value2)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value1;\n  memory[0x19] = 0;\n  *(undefined2 *)((int)memory + 0xe) = value2;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[6] = 0;\n  fillMemoryWithValue(memory + 0x17,0,8);\n  memory[9] = 0x8005609;\n  memory[10] = 0x800562b;\n  memory[0xb] = 0x8005663;\n  memory[8] = memory;\n  memory[0xc] = &label1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_memory_0800532c",
                "param_1": "memory",
                "param_2": "value1",
                "param_3": "value2",
                "fill_memory_with_value_080048cc": "fillMemoryWithValue",
                "LAB_08005686_1": "label1"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "initialize_pointer_08005374",
            "code": "\nundefined4 * initializePointer_08005374(undefined4 inputPointer,int size)\n\n{\n  undefined4 *newPointer;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  newPointer = (undefined4 *)validate_and_update_ptr_08004978(inputPointer,offset + 0x74);\n  if (newPointer != (undefined4 *)0x0) {\n    *newPointer = 0;\n    newPointer[1] = size;\n    newPointer[2] = newPointer + 3;\n    fill_memory_with_value_080048cc(newPointer + 3,0,offset + 0x68);\n  }\n  return newPointer;\n}\n\n",
            "renaming": {
                "FUN_08005374": "initialize_pointer_08005374",
                "param_1": "inputPointer",
                "param_2": "size",
                "puVar1": "newPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_structure_080053a0",
            "code": "\nvoid initializeDataStructure_080053a0(undefined4 *dataStructure)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (dataStructure[6] == 0) {\n    dataStructure[0x12] = 0;\n    dataStructure[0x13] = 0;\n    dataStructure[0x14] = 0;\n    pointer = &DAT_200000a4;\n    dataStructure[10] = &LAB_08005320_1;\n    if (dataStructure == &DAT_200000a4) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (dataStructure == &DAT_200000a4) {\n      dataStructure[6] = pointer;\n    }\n    result = initDataStructure();\n    dataStructure[1] = result;\n    result = initDataStructure(dataStructure);\n    dataStructure[2] = result;\n    result = initDataStructure(dataStructure);\n    dataStructure[3] = result;\n    initMemory(dataStructure[1],4,0);\n    initMemory(dataStructure[2],9,1);\n    initMemory(dataStructure[3],0x12,2);\n    dataStructure[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_structure_080053a0",
                "param_1": "dataStructure",
                "uVar1": "result",
                "puVar2": "pointer",
                "initialize_data_structure_08005400": "initDataStructure",
                "initialize_memory_0800532c": "initMemory"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_structure_08005400",
            "code": "\nint * initialize_data_structure_08005400(undefined4 *result_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *current_ptr;\n  int *inner_current_ptr;\n  int **data_structure_ptr;\n  \n  if (DAT_200000bc == 0) {\n    initialize_data_structure_080053a0(&DAT_200000a4);\n  }\n  data_structure_ptr = (int **)&DAT_200000ec;\n  do {\n    inner_current_ptr = data_structure_ptr[2];\n    current_ptr = data_structure_ptr[1];\n    while (current_ptr = (int *)((int)current_ptr + -1), -1 < (int)current_ptr) {\n      if (*(short *)(inner_current_ptr + 3) == 0) {\n        *(undefined2 *)((int)inner_current_ptr + 0xe) = 0xffff;\n        *(undefined2 *)(inner_current_ptr + 3) = 1;\n        inner_current_ptr[0x19] = 0;\n        *inner_current_ptr = 0;\n        inner_current_ptr[2] = 0;\n        inner_current_ptr[1] = 0;\n        inner_current_ptr[4] = 0;\n        inner_current_ptr[5] = 0;\n        inner_current_ptr[6] = 0;\n        fill_memory_with_value(inner_current_ptr + 0x17,0,8,1,param_4);\n        inner_current_ptr[0xd] = 0;\n        inner_current_ptr[0xe] = 0;\n        inner_current_ptr[0x12] = 0;\n        inner_current_ptr[0x13] = 0;\n        return inner_current_ptr;\n      }\n      inner_current_ptr = inner_current_ptr + 0x1a;\n    }\n    if (*data_structure_ptr == (int *)0x0) {\n      current_ptr = (int *)initialize_pointer(result_ptr,4);\n      *data_structure_ptr = current_ptr;\n      if (current_ptr == (int *)0x0) {\n        *result_ptr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    data_structure_ptr = (int **)*data_structure_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_structure_08005400",
                "param_1": "result_ptr",
                "piVar1": "current_ptr",
                "piVar2": "inner_current_ptr",
                "ppiVar3": "data_structure_ptr",
                "fill_memory_with_value_080048cc": "fill_memory_with_value",
                "initialize_pointer_08005374": "initialize_pointer"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_value_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)initialize_pointer_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "improve_and_check_memory_status_080054b4",
            "code": "\nundefined4 improve_and_check_memory_status_080054b4(undefined4 input_param,int memory_data,undefined4 *status_result,uint *memory_check)\n\n{\n  int return_code;\n  undefined4 status;\n  undefined stack_var_4c [4];\n  uint temp_var_48;\n  \n  if ((*(short *)(memory_data + 0xe) < 0) ||\n     (return_code = initialize_memory_080056d4(input_param,(int)*(short *)(memory_data + 0xe),stack_var_4c), return_code < 0)) {\n    *memory_check = 0;\n    if ((int)((uint)*(ushort *)(memory_data + 0xc) << 0x18) < 0) {\n      status = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *memory_check = (uint)((temp_var_48 & 0xf000) == 0x2000);\n  }\n  status = 0x400;\nLAB_080054f4:\n  *status_result = status;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "improve_and_check_memory_status_080054b4",
                "param_1": "input_param",
                "param_2": "memory_data",
                "param_3": "status_result",
                "param_4": "memory_check",
                "iVar1": "return_code",
                "uVar2": "status",
                "auStack_4c": "stack_var_4c",
                "local_48": "temp_var_48"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "update_memory_status_080054fc",
            "code": "\nvoid updateMemoryStatus_080054fc(int pointer,int *pointerArray)\n\n{\n  ushort status;\n  int validationResult;\n  int tempPointer;\n  int *tempArray;\n  \n  if (-1 < (int)((uint)*(ushort *)(pointerArray + 3) << 0x1e)) {\n    tempPointer = pointer;\n    tempArray = pointerArray;\n    status = improve_and_check_memory_status_080054b4(pointer,pointerArray,&tempPointer,&tempArray);\n    validationResult = validate_and_update_ptr_08004978(pointer,tempPointer);\n    if (validationResult != 0) {\n      *(undefined **)(pointer + 0x28) = &LAB_08005320_1;\n      *pointerArray = validationResult;\n      *(ushort *)(pointerArray + 3) = *(ushort *)(pointerArray + 3) | 0x80;\n      pointerArray[5] = tempPointer;\n      pointerArray[4] = validationResult;\n      if ((tempArray != (int *)0x0) &&\n         (validationResult = initialize_return_value_080056f8(pointer,(int)*(short *)((int)pointerArray + 0xe)), validationResult != 0)) {\n        *(ushort *)(pointerArray + 3) = *(ushort *)(pointerArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(pointerArray + 3) = status | *(ushort *)(pointerArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(pointerArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(pointerArray + 3) = *(ushort *)(pointerArray + 3) & 0xfffc | 2;\n  }\n  *pointerArray = (int)pointerArray + 0x47;\n  pointerArray[4] = (int)pointerArray + 0x47;\n  pointerArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "update_memory_status_080054fc",
                "param_1": "pointer",
                "param_2": "pointerArray",
                "uVar1": "status",
                "iVar2": "validationResult",
                "local_18": "tempPointer",
                "local_14": "tempArray"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "process_data_080055d0",
            "code": "\nint processData_080055d0(uint inputData)\n\n{\n  int *dataPtr;\n  undefined4 result;\n  int dataValue;\n  code *callbackFunc;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 returnAddr;\n  undefined4 *dataPtrPtr;\n  \n  dataPtr = DAT_200000a0;\n  dataPtrPtr = &DAT_200000a0;\n  if (0x1f < inputData) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  dataValue = DAT_200000a0[0x11];\n  if ((dataValue != 0) && (callbackFunc = *(code **)(dataValue + inputData * 4), callbackFunc != (code *)0x0)) {\n    if (callbackFunc != (code *)0x1) {\n      if (callbackFunc == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(dataValue + inputData * 4) = 0;\n      (*callbackFunc)(inputData);\n    }\n    return 0;\n  }\n  result = initializeThunks(DAT_200000a0);\n  DAT_20000674 = 0;\n  dataValue = initializeData(result,inputData,inputData,0,dataPtrPtr,param4,param5,returnAddr);\n  if ((dataValue == -1) && (DAT_20000674 != 0)) {\n    *dataPtr = DAT_20000674;\n  }\n  return dataValue;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "process_data_080055d0",
                "param_1": "inputData",
                "piVar1": "dataPtr",
                "uVar2": "result",
                "iVar3": "dataValue",
                "pcVar4": "callbackFunc",
                "unaff_r4": "param4",
                "unaff_r5": "param5",
                "in_lr": "returnAddr",
                "puVar5": "dataPtrPtr",
                "thunk_initialize_0800410c": "initializeThunks",
                "initialize_data_080040fc": "initializeData"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "initialize_program_thunk_0800410c",
            "code": "\nundefined4 initialize_program_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "initialize_program_thunk_0800410c"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_application_data_08005608",
            "code": "\nvoid updateApplicationData_08005608(undefined4 applicationData,int binaryData)\n\n{\n  int returnValue;\n  uint newValue;\n  bool isSuccessful;\n  \n  returnValue = initialize_and_check_application_0800573c(applicationData,(int)*(short *)(binaryData + 0xe));\n  isSuccessful = -1 < returnValue;\n  if (isSuccessful) {\n    newValue = *(int *)(binaryData + 0x54) + returnValue;\n  }\n  else {\n    newValue = *(ushort *)(binaryData + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(binaryData + 0x54) = newValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(binaryData + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_application_data_08005608",
                "param_1": "applicationData",
                "param_2": "binaryData",
                "iVar1": "returnValue",
                "uVar2": "newValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "initialize_and_process_data_0800562a",
            "code": "\nvoid initializeAndProcessData_0800562a(int *outputArray,int dataPointer,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  \n  if ((int)((uint)*(ushort *)(dataPointer + 0xc) << 0x17) < 0) {\n    initialize_and_set_value_08005718(outputArray,(int)*(short *)(dataPointer + 0xe),0,2);\n  }\n  *(ushort *)(dataPointer + 0xc) = *(ushort *)(dataPointer + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = process_data_080040ec((int)*(short *)(dataPointer + 0xe),param1,param2,param2,param2,unusedVar1,\n                       unusedVar2,unusedVar3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *outputArray = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "initialize_and_process_data_0800562a",
                "param_1": "outputArray",
                "param_2": "dataPointer",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "unaff_r4": "unusedVar1",
                "unaff_r5": "unusedVar2",
                "in_lr": "unusedVar3"
            },
            "calling": [],
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "initialize_and_update_value_08005662",
            "code": "\nvoid initialize_and_update_value_08005662(undefined4 data,int offset)\n\n{\n  int result;\n  ushort flags;\n  bool error;\n  \n  result = initialize_and_set_value_08005718(data,(int)*(short *)(offset + 0xe));\n  error = result == -1;\n  if (error) {\n    flags = *(ushort *)(offset + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(offset + 0x54) = result;\n    flags = *(ushort *)(offset + 0xc) | 0x1000;\n  }\n  if (error) {\n    *(ushort *)(offset + 0xc) = flags;\n  }\n  if (!error) {\n    *(ushort *)(offset + 0xc) = flags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "initialize_and_update_value_08005662",
                "param_1": "data",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "flags",
                "bVar3": "error"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "initialize_memory_080056d4",
            "code": "\nvoid initializeMemory_080056d4(int *result,undefined4 size,undefined4 value,undefined4 flag)\n\n{\n  int iVar1;\n  \n  DAT_20000674 = 0;\n  iVar1 = setMemorySize(size,value,value,0,flag);\n  if ((iVar1 == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "initialize_memory_080056d4",
                "param_1": "result",
                "param_2": "size",
                "param_3": "value",
                "param_4": "flag",
                "set_memory_size_080040d6": "setMemorySize"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "initialize_return_value_080056f8",
            "code": "\nvoid initialize_return_value_080056f8(int *output_value,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = initialize_return_value_080056f8_080040e0(input_value);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output_value = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "initialize_return_value_080056f8",
                "param_1": "output_value",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "initialize_and_set_value_08005718",
            "code": "\nvoid initialize_and_set_value_08005718(int *output_ptr,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = initialize_080040e4(value1,value2,value3,value3,value3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output_ptr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "initialize_and_set_value_08005718",
                "param_1": "output_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "initialize_and_check_application_0800573c",
            "code": "\nvoid initializeAndCheckApplication_0800573c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int status;\n  \n  DAT_20000674 = 0;\n  status = initialize_application_080040e8(arg1,arg2,arg3,arg3,arg3);\n  if ((status == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "initialize_and_check_application_0800573c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "status"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "process_data_08005760",
            "code": "\nvoid process_data_08005760(void)\n\n{\n  code *jump_table;\n  \n  jump_table = process_data_08005760;\n  process_data_08005760_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "process_data_08005760",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 117539,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": []
}