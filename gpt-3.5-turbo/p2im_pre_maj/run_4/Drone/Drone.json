{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 returnValue)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_integers_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateIntegers_08000134(undefined4 firstInteger,undefined4 secondInteger)\n\n{\n  return CONCAT44(secondInteger,firstInteger);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "firstInteger",
                "param_2": "secondInteger"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *string)\n\n{\n  char current_char;\n  char *next_char_pointer;\n  char *current_char_pointer;\n  \n  current_char_pointer = string;\n  do {\n    next_char_pointer = current_char_pointer + 1;\n    current_char = *current_char_pointer;\n    current_char_pointer = next_char_pointer;\n  } while (current_char != '\\0');\n  return next_char_pointer + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char_pointer",
                "pcVar3": "current_char_pointer"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "reverse_bits_08000168",
            "code": "\nulonglong reverseBits_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint result1;\n  uint mask1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  int shift2;\n  uint result3;\n  uint mask2;\n  uint temp3;\n  uint temp4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp1 = input4 ^ 0x80000000;\n  result3 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (result3 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)result3 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      result3 = temp1;\n      temp3 = input3;\n      if (shift2 == -1) {\n        result3 = input2;\n        temp3 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = temp3;\n        temp1 = result3;\n      }\n      flag2 = (temp3 | result3 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result3 == temp1;\n      }\n      if (!flag2) {\n        result3 = result3 | 0x80000;\n      }\n      return CONCAT44(result3,temp3);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result3 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (result3 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,input1 << 1);\n    }\n    if (result3 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result3 = result3 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp3 = input4 - result3;\n  flag2 = temp3 != 0;\n  if (input4 < result3) {\n    temp3 = -temp3;\n  }\n  mask2 = input1;\n  temp2 = input2;\n  if (flag2 && result3 <= input4) {\n    result3 = result3 + temp3;\n    mask2 = input3;\n    temp2 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < temp3) {\n    return CONCAT44(temp2,mask2);\n  }\n  mask1 = temp2 & 0xfffff | 0x100000;\n  if ((temp2 & 0x80000000) != 0) {\n    flag2 = mask2 != 0;\n    mask2 = -mask2;\n    mask1 = -mask1 - (uint)flag2;\n  }\n  temp2 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  if (result3 == temp3) {\n    temp2 = temp2 ^ 0x100000;\n    if (result3 == 0) {\n      mask1 = mask1 ^ 0x100000;\n      result3 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = -temp3 + 0x20;\n  if ((int)temp3 < 0x21) {\n    temp4 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (temp3 & 0xff);\n    result1 = mask2 + input3;\n    result2 = temp2 << (temp1 & 0xff);\n    temp1 = result1 + result2;\n    mask1 = mask1 + CARRY4(mask2,input3) + ((int)temp2 >> (temp3 & 0xff)) +\n            (uint)CARRY4(result1,result2);\n  }\n  else {\n    temp4 = temp2 << (-temp3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    temp2 = (int)temp2 >> (temp3 - 0x20 & 0xff);\n    temp1 = mask2 + temp2;\n    mask1 = mask1 + ((int)temp2 >> 0x1f) + (uint)CARRY4(mask2,temp2);\n  }\n  input2 = mask1 & 0x80000000;\n  temp3 = mask1;\n  if ((int)mask1 < 0) {\n    flag2 = temp4 == 0;\n    temp4 = -temp4;\n    temp3 = -temp1;\n    temp1 = -(uint)!flag2 - temp1;\n    temp3 = -(uint)(flag2 <= temp3) - mask1;\n  }\n  if (0xfffff < temp3) {\n    mask2 = result3 - 1;\n    if (0x1fffff < temp3) {\n      mask2 = temp3 & 1;\n      temp3 = temp3 >> 1;\n      carry = (byte)temp1;\n      temp1 = (uint)(mask2 != 0) << 0x1f | temp1 >> 1;\n      temp4 = (uint)(carry & 1) << 0x1f | temp4 >> 1;\n      mask2 = result3;\n      if (0xffbfffff < result3 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      flag2 = (temp1 & 1) != 0;\n    }\n    return CONCAT44(temp3 + mask2 * 0x100000 + (uint)CARRY4(temp1,(uint)flag2) | input2,\n                    temp1 + flag2);\n  }\n  flag1 = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  mask2 = temp1 * 2;\n  flag2 = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)flag1;\n  temp3 = temp3 * 2 + (uint)(flag2 || CARRY4(mask2,(uint)flag1));\n  mask2 = result3 - 2;\n  if ((temp3 & 0x100000) != 0) goto LAB_08000278;\n  temp2 = temp1;\n  result3 = temp3;\n  if (temp3 == 0) {\n    temp2 = 0;\n    result3 = temp1;\n  }\n  shift2 = LZCOUNT(result3);\n  if (temp3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp3 = shift2 - 0xb;\n  flag3 = SBORROW4(temp3,0x20);\n  temp1 = shift2 - 0x2b;\n  flag2 = (int)temp1 < 0;\n  flag1 = temp1 == 0;\n  if ((int)temp3 < 0x20) {\n    flag3 = SCARRY4(temp1,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp1 = temp3;\n    if (!flag1 && flag2 == flag3) {\n      temp2 = result3 << (temp3 & 0xff);\n      result3 = result3 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp4 = 0x20 - temp1;\n  }\n  result3 = result3 << (temp1 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result3 = result3 | temp2 >> (temp4 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp2 = temp2 << (temp1 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp3 <= (int)mask2) {\n    return CONCAT44(result3 + (mask2 - temp3) * 0x100000 | input2,temp2);\n  }\n  temp1 = ~(mask2 - temp3);\n  if ((int)temp1 < 0x1f) {\n    shift2 = temp1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(mask1,temp2 >> (0x20 - (0xcU - shift2) & 0xff) | result3 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(input2 | result3 >> (temp1 & 0xff),\n                    temp2 >> (temp1 & 0xff) | result3 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(mask1,result3 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "reverse_bits_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "result1",
                "uVar4": "mask1",
                "uVar5": "result2",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "iVar8": "shift2",
                "uVar9": "result3",
                "uVar10": "mask2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_product_0800016c",
            "code": "\nulonglong calculate_product_0800016c(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int bitShift1;\n  byte carry;\n  uint value1;\n  uint temp;\n  uint value2;\n  int bitShift2;\n  uint shiftedNum2;\n  uint result;\n  uint shiftedNum4;\n  uint difference;\n  uint temp1;\n  uint temp2;\n  bool sameSign;\n  bool condition;\n  bool borrow;\n  \n  shiftedNum2 = num2 << 1;\n  shiftedNum4 = num4 << 1;\n  sameSign = ((num2 ^ num4) & 0x7fffffff) == 0;\n  condition = sameSign && num1 == num3;\n  if (!sameSign || num1 != num3) {\n    condition = (shiftedNum2 | num1) == 0;\n  }\n  if (!condition) {\n    condition = (shiftedNum4 | num3) == 0;\n  }\n  bitShift2 = (int)shiftedNum2 >> 0x15;\n  if (!condition) {\n    condition = bitShift2 == -1;\n  }\n  bitShift1 = (int)shiftedNum4 >> 0x15;\n  if (!condition) {\n    condition = bitShift1 == -1;\n  }\n  if (condition) {\n    if (bitShift2 == -1 || bitShift1 == -1) {\n      shiftedNum4 = num4;\n      shiftedNum2 = num3;\n      if (bitShift2 == -1) {\n        shiftedNum4 = num2;\n        shiftedNum2 = num1;\n      }\n      if (bitShift2 != -1 || bitShift1 != -1) {\n        num3 = shiftedNum2;\n        num4 = shiftedNum4;\n      }\n      condition = (shiftedNum2 | shiftedNum4 << 0xc) == 0;\n      if (condition) {\n        condition = (num3 | num4 << 0xc) == 0;\n      }\n      if (condition) {\n        condition = shiftedNum4 == num4;\n      }\n      if (!condition) {\n        shiftedNum4 = shiftedNum4 | 0x80000;\n      }\n      return CONCAT44(shiftedNum4,shiftedNum2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shiftedNum2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shiftedNum2 >> 0x15 == 0) {\n      condition = (num1 & 0x80000000) != 0;\n      shiftedNum4 = num2 * 2 + (uint)condition;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)condition)) {\n        shiftedNum4 = shiftedNum4 | 0x80000000;\n      }\n      return CONCAT44(shiftedNum4,num1 << 1);\n    }\n    if (shiftedNum2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shiftedNum2 = shiftedNum2 >> 0x15;\n  shiftedNum4 = shiftedNum4 >> 0x15;\n  difference = shiftedNum4 - shiftedNum2;\n  condition = difference != 0;\n  if (shiftedNum4 < shiftedNum2) {\n    difference = -difference;\n  }\n  result = num1;\n  value2 = num2;\n  if (condition && shiftedNum2 <= shiftedNum4) {\n    shiftedNum2 = shiftedNum2 + difference;\n    result = num3;\n    value2 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(value2,result);\n  }\n  shiftedNum4 = value2 & 0xfffff | 0x100000;\n  if ((value2 & 0x80000000) != 0) {\n    condition = result != 0;\n    result = -result;\n    shiftedNum4 = -shiftedNum4 - (uint)condition;\n  }\n  value2 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    condition = num3 != 0;\n    num3 = -num3;\n    value2 = -value2 - (uint)condition;\n  }\n  if (shiftedNum2 == difference) {\n    value2 = value2 ^ 0x100000;\n    if (shiftedNum2 == 0) {\n      shiftedNum4 = shiftedNum4 ^ 0x100000;\n      shiftedNum2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp2 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp1 = num3 << (temp2 & 0xff);\n    num3 = num3 >> (difference & 0xff);\n    value1 = result + num3;\n    temp = value2 << (temp2 & 0xff);\n    temp2 = value1 + temp;\n    shiftedNum4 = shiftedNum4 + CARRY4(result,num3) + ((int)value2 >> (difference & 0xff)) +\n            (uint)CARRY4(value1,temp);\n  }\n  else {\n    temp1 = value2 << (-difference + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp1 = temp1 | 2;\n    }\n    value2 = (int)value2 >> (difference - 0x20 & 0xff);\n    temp2 = result + value2;\n    shiftedNum4 = shiftedNum4 + ((int)value2 >> 0x1f) + (uint)CARRY4(result,value2);\n  }\n  num2 = shiftedNum4 & 0x80000000;\n  difference = shiftedNum4;\n  if ((int)shiftedNum4 < 0) {\n    condition = temp1 == 0;\n    temp1 = -temp1;\n    difference = -temp2;\n    temp2 = -(uint)!condition - temp2;\n    difference = -(uint)(condition <= difference) - shiftedNum4;\n  }\n  if (0xfffff < difference) {\n    result = shiftedNum2 - 1;\n    if (0x1fffff < difference) {\n      shiftedNum4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp2;\n      temp2 = (uint)(shiftedNum4 != 0) << 0x1f | temp2 >> 1;\n      temp1 = (uint)(carry & 1) << 0x1f | temp1 >> 1;\n      result = shiftedNum2;\n      if (0xffbfffff < shiftedNum2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition = 0x7fffffff < temp1;\n    if (temp1 == 0x80000000) {\n      condition = (temp2 & 1) != 0;\n    }\n    return CONCAT44(difference + result * 0x100000 + (uint)CARRY4(temp2,(uint)condition) | num2,\n                    temp2 + condition);\n  }\n  sameSign = (temp1 & 0x80000000) != 0;\n  temp1 = temp1 << 1;\n  result = temp2 * 2;\n  condition = CARRY4(temp2,temp2);\n  temp2 = temp2 * 2 + (uint)sameSign;\n  difference = difference * 2 + (uint)(condition || CARRY4(result,(uint)sameSign));\n  result = shiftedNum2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  value2 = temp2;\n  shiftedNum2 = difference;\n  if (difference == 0) {\n    value2 = 0;\n    shiftedNum2 = temp2;\n  }\n  bitShift2 = LZCOUNT(shiftedNum2);\n  if (difference == 0) {\n    bitShift2 = bitShift2 + 0x20;\n  }\n  temp2 = bitShift2 - 0xb;\n  borrow = SBORROW4(temp2,0x20);\n  difference = bitShift2 - 0x2b;\n  condition = (int)difference < 0;\n  sameSign = difference == 0;\n  if ((int)temp2 < 0x20) {\n    borrow = SCARRY4(difference,0xc);\n    bitShift2 = bitShift2 + -0x1f;\n    condition = bitShift2 < 0;\n    sameSign = bitShift2 == 0;\n    difference = temp2;\n    if (!sameSign && condition == borrow) {\n      value2 = shiftedNum2 << (temp2 & 0xff);\n      shiftedNum2 = shiftedNum2 >> (0xcU - bitShift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (sameSign || condition != borrow) {\n    temp1 = 0x20 - difference;\n  }\n  shiftedNum2 = shiftedNum2 << (difference & 0xff);\n  if (sameSign || condition != borrow) {\n    shiftedNum2 = shiftedNum2 | value2 >> (temp1 & 0xff);\n  }\n  if (sameSign || condition != borrow) {\n    value2 = value2 << (difference & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp2 <= (int)result) {\n    return CONCAT44(shiftedNum2 + (result - temp2) * 0x100000 | num2,value2);\n  }\n  difference = ~(result - temp2);\n  if ((int)difference < 0x1f) {\n    bitShift2 = difference - 0x13;\n    if (bitShift2 != 0 && bitShift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shiftedNum4,value2 >> (0x20 - (0xcU - bitShift2) & 0xff) | shiftedNum2 << (0xcU - bitShift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(num2 | shiftedNum2 >> (difference & 0xff),\n                    value2 >> (difference & 0xff) | shiftedNum2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shiftedNum4,shiftedNum2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_product_0800016c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "bitShift1",
                "bVar2": "carry",
                "uVar3": "value1",
                "uVar4": "temp",
                "uVar5": "value2",
                "iVar6": "bitShift2",
                "uVar7": "shiftedNum2",
                "uVar8": "result",
                "uVar9": "shiftedNum4",
                "uVar10": "difference",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "bVar13": "sameSign",
                "bVar14": "condition",
                "bVar15": "borrow"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "calculate_shifted_value_08000404",
            "code": "\nulonglong calculate_shifted_value_08000404(uint input_value)\n\n{\n  uint shifted_value;\n  uint abs_input_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_shift;\n  uint sign_extension;\n  uint shifted_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_extension = input_value & 0x80000000;\n  abs_input_value = input_value;\n  if ((int)sign_extension < 0) {\n    abs_input_value = -input_value;\n  }\n  shifted_value = 0;\n  leading_zeros = LZCOUNT(abs_input_value);\n  total_shift = leading_zeros + 0x15;\n  carry_flag = SBORROW4(total_shift,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_shift < 0x20) {\n    carry_flag = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_shift;\n    if (!is_zero && carry_flag == false) {\n      shifted_value = abs_input_value << total_shift;\n      abs_input_value = abs_input_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shifted_bits = 0x20 - shift_amount;\n  }\n  abs_input_value = abs_input_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input_value = abs_input_value | 0U >> (shifted_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nLAB_080002f0:\n  if (total_shift < 0x433) {\n    return CONCAT44(abs_input_value + (0x432 - total_shift) * 0x100000 | sign_extension,shifted_value);\n  }\n  shift_amount = ~(0x432 - total_shift);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_input_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_extension | abs_input_value >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | abs_input_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "abs_input_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "total_shift",
                "uVar6": "sign_extension",
                "in_r12": "shifted_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "bitwise_operation_08000428",
            "code": "\nulonglong bitwiseOperation_08000428(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint mask1;\n  uint temp1;\n  uint result1;\n  uint shifted;\n  uint shifted_double;\n  int count;\n  uint shift_amount;\n  uint shifted_amount;\n  bool is_negative;\n  bool is_zero;\n  bool is_borrow;\n  \n  shifted_double = input << 1;\n  is_zero = shifted_double == 0;\n  mask1 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted = (uint)((int)shifted_double >> 3) >> 1;\n  result1 = mask1 | shifted;\n  input = input << 0x1d;\n  if (!is_zero) {\n    param4 = shifted_double & 0xff000000;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result1,input) ^ 0x3800000000000000;\n  }\n  if (shifted_double == 0 || param4 == 0xff000000) {\n    return CONCAT44(result1,input);\n  }\n  temp1 = input;\n  shifted_double = shifted;\n  if (shifted == 0) {\n    temp1 = 0;\n    shifted_double = input;\n  }\n  count = LZCOUNT(shifted_double);\n  if (shifted == 0) {\n    count = count + 0x20;\n  }\n  shift_amount = count - 0xb;\n  is_borrow = SBORROW4(shift_amount,0x20);\n  shifted = count - 0x2b;\n  is_zero = (int)shifted < 0;\n  is_negative = shifted == 0;\n  if ((int)shift_amount < 0x20) {\n    is_borrow = SCARRY4(shifted,0xc);\n    count = count + -0x1f;\n    is_zero = count < 0;\n    is_negative = count == 0;\n    shifted = shift_amount;\n    if (!is_negative && is_zero == is_borrow) {\n      temp1 = shifted_double << (shift_amount & 0xff);\n      shifted_double = shifted_double >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_negative || is_zero != is_borrow) {\n    shifted_amount = 0x20 - shifted;\n  }\n  shifted_double = shifted_double << (shifted & 0xff);\n  if (is_negative || is_zero != is_borrow) {\n    shifted_double = shifted_double | temp1 >> (shifted_amount & 0xff);\n  }\n  if (is_negative || is_zero != is_borrow) {\n    temp1 = temp1 << (shifted & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_double + (0x380 - shift_amount) * 0x100000 | mask1,temp1);\n  }\n  shifted = ~(0x380 - shift_amount);\n  if ((int)shifted < 0x1f) {\n    count = shifted - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(shifted - 0x1f,0xc)) {\n      return CONCAT44(result1,temp1 >> (0x20 - (0xcU - count) & 0xff) | shifted_double << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted = shifted + 1;\n    return CONCAT44(mask1 | shifted_double >> (shifted & 0xff),\n                    temp1 >> (shifted & 0xff) | shifted_double << (0x20 - shifted & 0xff));\n  }\n  return CONCAT44(result1,shifted_double >> (shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "bitwise_operation_08000428",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "mask1",
                "uVar2": "temp1",
                "uVar3": "result1",
                "uVar4": "shifted",
                "uVar5": "shifted_double",
                "iVar6": "count",
                "uVar7": "shift_amount",
                "in_r12": "shifted_amount",
                "bVar8": "is_negative",
                "bVar9": "is_zero",
                "bVar10": "is_borrow"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_result_080004d0",
            "code": "\nulonglong calculateResult_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combinedInputs;\n  \n  combinedInputs = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combinedInputs = reverse_bit_pattern_080006ac();\n  }\n  temp1 = (uint)(combinedInputs >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combinedInputs | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combinedInputs | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combinedInputs & 0xffffffff) * (ulonglong)input3;\n    combinedInputs = (combinedInputs & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combinedInputs;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combinedInputs >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combinedInputs"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "reverse_bit_pattern_080006ac",
            "code": "\nulonglong reverseBitPattern_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit4;\n  uint bit2;\n  uint bit3;\n  uint bit5;\n  bool isZero;\n  \n  bit2 = bit5 & input4 >> 0x14;\n  if (bit4 != bit5 && bit2 != bit5) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit4 == 0) {\n      bit3 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit3;\n      if (bit2 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  bit3 = input2;\n  if (((!isZero) && ((bit4 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit2 != bit5 || (input1 = input3, bit3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "reverse_bit_pattern_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit4",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_double_08000724",
            "code": "\nulonglong calculate_double_08000724(undefined4 num1,uint num2,uint num3,uint num4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint unaff_r5;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(num2,num1);\n  temp13 = 0x7ff;\n  temp7 = num2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    unaff_r5 = num4 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_double_08000724_08000892();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp11 = (uint)result;\n  temp8 = temp7 - unaff_r5;\n  if ((num3 | num4 << 0xc) == 0) {\n    temp7 = (temp9 ^ num4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp13 >> 1);\n    temp9 = temp8 + (temp13 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp13,temp9);\n      flag1 = (int)(temp13 - temp9) < 0;\n      flag2 = temp13 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp11);\n    }\n    temp7 = temp7 | 0x100000;\n    temp13 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (num4 << 0xc) >> 4 | 0x10000000 | num3 >> 0x18;\n    temp13 = num3 << 8;\n    temp10 = (temp9 << 0xc) >> 4 | 0x10000000 | temp11 >> 0x18;\n    temp11 = temp11 * 0x100;\n    temp7 = (temp9 ^ num4) & 0x80000000;\n    flag1 = temp3 <= temp10;\n    if (temp10 == temp3) {\n      flag1 = temp13 <= temp11;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp13 = (uint)((num3 >> 0x18 & 1) != 0) << 0x1f | temp13 >> 1;\n    }\n    temp12 = temp11 - temp13;\n    temp10 = (temp10 - temp3) - (uint)(temp11 < temp13);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp13 >> 1;\n    temp11 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp12;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)flag1) {\n        temp12 = temp12 - temp1;\n        temp11 = temp11 | temp3;\n        temp10 = (temp10 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp10 - temp5 < (uint)flag2;\n      temp13 = temp10;\n      if (temp5 < temp10 || flag1) {\n        temp12 = temp12 - temp1;\n        temp13 = (temp10 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp10 || flag1) {\n        temp11 = temp11 | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp12;\n      flag1 = temp13 - temp10 < (uint)flag2;\n      temp5 = temp13;\n      if (temp10 < temp13 || flag1) {\n        temp12 = temp12 - temp2;\n        temp5 = (temp13 - temp10) - (uint)!flag2;\n      }\n      if (temp10 < temp13 || flag1) {\n        temp11 = temp11 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp10 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 - temp1;\n        temp10 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp11 = temp11 | temp3 >> 3;\n      }\n      temp13 = temp10 | temp12;\n      if (temp13 == 0) break;\n      temp10 = temp10 << 4 | temp12 >> 0x1c;\n      temp12 = temp12 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp11;\n        temp11 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp11;\n      temp11 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp10;\n      if (temp10 == temp6) {\n        flag1 = temp1 <= temp12;\n      }\n      if (temp10 == temp6 && temp12 == temp1) {\n        flag1 = (temp11 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp11,(uint)flag1),temp11 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp11 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp11);\n  }\n  temp3 = -temp9;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp11 >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    temp9 = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp13 | temp11 << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp10,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp11 << (temp9 & 0xff);\n    temp11 = temp11 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp11 + -((int)temp3 >> 0x1f);\n    if ((temp13 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp11,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp10 = temp11 << (temp9 + 0x20 & 0xff);\n  temp11 = temp11 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp11 + -((int)temp10 >> 0x1f);\n  if ((temp13 | temp10 << 1) == 0) {\n    temp9 = temp9 & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp11,-((int)temp10 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_double_08000724",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar13": "temp13",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculate_double_08000892",
            "code": "\nulonglong calculate_double_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint mask1;\n  uint result1;\n  uint mask2;\n  bool isZero;\n  \n  mask1 = mask2 & input4 >> 0x14;\n  result1 = input2;\n  if (bit2 != mask2 || mask1 != mask2) {\n    if (bit2 == mask2) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, result1 = input4, mask1 != mask2)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (mask1 == mask2) {\n      input1 = input3;\n      result1 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          result1 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | result1;\n          if (mask1 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          result1 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(result1 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(result1,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculate_double_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "mask1",
                "uVar3": "result1",
                "in_r12": "mask2",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_parameters_08000904",
            "code": "\nuint check_parameters_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xorResult;\n  bool isZero;\n  bool isConditionMet;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    xorResult = value2 ^ value4;\n    isZero = xorResult == 0;\n    if (-1 < (int)xorResult) {\n      isZero = value2 == value4;\n    }\n    isConditionMet = -1 < (int)xorResult && value4 <= value2;\n    if (isZero) {\n      isConditionMet = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isConditionMet) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_parameters_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "bVar2": "isZero",
                "bVar3": "isConditionMet",
                "uVar1": "xorResult"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "input_validation_08000980",
            "code": "\nvoid inputValidation_08000980(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  validate_input_08000990(input3,input4,input1,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "input_validation_08000980",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "validate_input_08000990",
            "code": "\nundefined4 validate_input_08000990(undefined4 input_value)\n\n{\n  check_parameters_08000904();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "validate_input_08000990",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "is_input_valid_080009a0",
            "code": "\nbool isInputValid_080009a0(void)\n\n{\n  char inputChar;\n  \n  validate_input_08000990();\n  return inputChar != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "is_input_valid_080009a0",
                "in_ZR": "inputChar"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_input_valid_080009b4",
            "code": "\nbool is_input_valid_080009b4(void)\n\n{\n  char input_character;\n  \n  validate_input_08000990();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_input_valid_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_zero_or_carry_080009c8",
            "code": "\nbool check_zero_or_carry_080009c8(void)\n\n{\n  undefined is_zero;\n  undefined has_carry;\n  \n  validate_input_08000990();\n  return !(bool)has_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_zero_or_carry_080009c8",
                "in_ZR": "is_zero",
                "in_CY": "has_carry"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_cy_null_080009f0",
            "code": "\nbool is_CY_null_080009f0(void)\n\n{\n  char input_character;\n  \n  input_validation_08000980();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_cy_null_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 check_parameters_08000a04(uint input_1,int value_1,uint input_2,int value_2)\n\n{\n  if ((((value_1 << 1) >> 0x15 != -1) || ((input_1 | value_1 << 0xc) == 0)) &&\n     (((value_2 << 1) >> 0x15 != -1 || ((input_2 | value_2 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "input_1",
                "param_2": "value_1",
                "param_3": "input_2",
                "param_4": "value_2"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_value_08000a30",
            "code": "\nuint calculateValue_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint doubleInput;\n  uint sum;\n  uint adjustedDoubleInput;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  doubleInput = input2 * 2;\n  isLessThanThreshold = doubleInput < 0x70000000;\n  sum = doubleInput + 0x90000000;\n  result = sum;\n  if (!isLessThanThreshold) {\n    adjustedDoubleInput = doubleInput + 0x8fe00000;\n    result = adjustedDoubleInput;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && sum >= 0x200000) {\n    isZero = adjustedDoubleInput == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || sum < 0x200000) || 0x1fc00000 < adjustedDoubleInput) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)doubleInput >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(doubleInput + 0x92e00000) < 0 != SCARRY4(sum,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    doubleInput = 0x18 - (doubleInput + 0x92e00000 >> 0x15);\n    result = input1 >> (doubleInput & 0xff);\n    if (input1 << (0x20 - doubleInput & 0xff) != 0) {\n      result = result | 1;\n    }\n    sum = input2 & 0x1fffff | 0x100000;\n    input1 = result | sum << (0x20 - doubleInput & 0xff);\n    sum = (sum >> (doubleInput & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + sum * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_value_08000a30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "doubleInput",
                "uVar3": "sum",
                "in_r12": "adjustedDoubleInput",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_floating_point_08000ad8",
            "code": "\nuint calculate_floating_point_08000ad8(uint input_value_1,uint input_value_2,undefined4 input_value_3,uint input_value_4)\n\n{\n  int int_value_1;\n  int int_value_2;\n  uint temp_value_1;\n  uint temp_value_2;\n  uint temp_value_3;\n  uint temp_value_4;\n  uint temp_value_5;\n  bool is_condition_met;\n  \n  temp_value_1 = input_value_2 ^ 0x80000000;\n  temp_value_3 = input_value_1 << 1;\n  is_condition_met = temp_value_3 == 0;\n  if (!is_condition_met) {\n    input_value_4 = input_value_2 << 1;\n    is_condition_met = input_value_4 == 0;\n  }\n  if (!is_condition_met) {\n    is_condition_met = temp_value_3 == input_value_4;\n  }\n  int_value_1 = (int)temp_value_3 >> 0x18;\n  if (!is_condition_met) {\n    is_condition_met = int_value_1 == -1;\n  }\n  if (!is_condition_met) {\n    is_condition_met = (int)input_value_4 >> 0x18 == -1;\n  }\n  if (is_condition_met) {\n    int_value_2 = (int)(input_value_2 << 1) >> 0x18;\n    if (int_value_1 == -1 || int_value_2 == -1) {\n      temp_value_3 = temp_value_1;\n      if (int_value_1 == -1) {\n        temp_value_3 = input_value_1;\n      }\n      if (int_value_1 != -1 || int_value_2 != -1) {\n        temp_value_1 = temp_value_3;\n      }\n      is_condition_met = (temp_value_3 & 0x7fffff) == 0;\n      if (is_condition_met) {\n        is_condition_met = (temp_value_1 & 0x7fffff) == 0;\n      }\n      if (is_condition_met) {\n        is_condition_met = temp_value_3 == temp_value_1;\n      }\n      if (!is_condition_met) {\n        temp_value_3 = temp_value_3 | 0x400000;\n      }\n      return temp_value_3;\n    }\n    if (((input_value_1 ^ temp_value_1) & 0x7fffffff) != 0) {\n      if (temp_value_3 == 0) {\n        input_value_1 = temp_value_1;\n      }\n      return input_value_1;\n    }\n    if (input_value_1 != temp_value_1) {\n      return 0;\n    }\n    if ((temp_value_3 & 0xff000000) == 0) {\n      temp_value_1 = input_value_1 << 1;\n      if ((input_value_1 & 0x80000000) != 0) {\n        temp_value_1 = temp_value_1 | 0x80000000;\n      }\n      return temp_value_1;\n    }\n    if (temp_value_3 < 0xfe000000) {\n      return input_value_1 + 0x800000;\n    }\n    input_value_1 = input_value_1 & 0x80000000;\nLAB_08000c12:\n    return input_value_1 | 0x7f800000;\n  }\n  temp_value_3 = temp_value_3 >> 0x18;\n  input_value_4 = input_value_4 >> 0x18;\n  temp_value_5 = input_value_4 - temp_value_3;\n  is_condition_met = temp_value_5 != 0;\n  temp_value_4 = temp_value_3;\n  if (is_condition_met && temp_value_3 <= input_value_4) {\n    temp_value_4 = temp_value_3 + temp_value_5;\n  }\n  if (is_condition_met && temp_value_3 <= input_value_4) {\n    temp_value_1 = temp_value_1 ^ input_value_1;\n  }\n  if (is_condition_met && temp_value_3 <= input_value_4) {\n    input_value_1 = input_value_1 ^ temp_value_1;\n  }\n  if (is_condition_met && temp_value_3 <= input_value_4) {\n    temp_value_1 = temp_value_1 ^ input_value_1;\n  }\n  if (input_value_4 < temp_value_3) {\n    temp_value_5 = -temp_value_5;\n  }\n  if (0x19 < temp_value_5) {\n    return input_value_1;\n  }\n  temp_value_3 = input_value_1 & 0xffffff | 0x800000;\n  if ((input_value_1 & 0x80000000) != 0) {\n    temp_value_3 = -temp_value_3;\n  }\n  temp_value_2 = temp_value_1 & 0xffffff | 0x800000;\n  if ((temp_value_1 & 0x80000000) != 0) {\n    temp_value_2 = -temp_value_2;\n  }\n  if (temp_value_4 == temp_value_5) {\n    temp_value_2 = temp_value_2 ^ 0x800000;\n    if (temp_value_4 == 0) {\n      temp_value_3 = temp_value_3 ^ 0x800000;\n      temp_value_4 = 1;\n    }\n    else {\n      temp_value_5 = temp_value_5 - 1;\n    }\n  }\n  temp_value_3 = temp_value_3 + ((int)temp_value_2 >> (temp_value_5 & 0xff));\n  temp_value_2 = temp_value_2 << (0x20 - temp_value_5 & 0xff);\n  input_value_1 = temp_value_3 & 0x80000000;\n  if ((int)temp_value_3 < 0) {\n    is_condition_met = temp_value_2 != 0;\n    temp_value_2 = -temp_value_2;\n    temp_value_3 = -temp_value_3 - (uint)is_condition_met;\n  }\n  if (temp_value_3 < 0x800000) {\n    temp_value_1 = temp_value_2 & 0x80000000;\n    temp_value_2 = temp_value_2 << 1;\n    temp_value_3 = temp_value_3 * 2 + (uint)(temp_value_1 != 0);\n    temp_value_1 = temp_value_4 - 2;\n    if ((temp_value_3 & 0x800000) == 0) {\n      temp_value_5 = LZCOUNT(temp_value_3) - 8;\n      temp_value_3 = temp_value_3 << (temp_value_5 & 0xff);\n      if ((int)temp_value_1 < (int)temp_value_5) {\n        temp_value_3 = temp_value_3 >> (-(temp_value_1 - temp_value_5) & 0xff);\n      }\n      else {\n        temp_value_3 = temp_value_3 + (temp_value_1 - temp_value_5) * 0x800000;\n      }\n      return temp_value_3 | input_value_1;\n    }\n  }\n  else {\n    temp_value_1 = temp_value_4 - 1;\n    if (0xffffff < temp_value_3) {\n      temp_value_1 = temp_value_3 & 1;\n      temp_value_3 = temp_value_3 >> 1;\n      temp_value_2 = (uint)(temp_value_1 != 0) << 0x1f | temp_value_2 >> 1;\n      temp_value_1 = temp_value_4;\n      if (0xfd < temp_value_4) goto LAB_08000c12;\n    }\n  }\n  temp_value_3 = temp_value_3 + temp_value_1 * 0x800000 + (uint)(0x7fffffff < temp_value_2);\n  if (temp_value_2 == 0x80000000) {\n    temp_value_3 = temp_value_3 & 0xfffffffe;\n  }\n  return temp_value_3 | input_value_1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_floating_point_08000ad8",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "uVar3": "temp_value_1",
                "uVar4": "temp_value_2",
                "uVar5": "temp_value_3",
                "uVar6": "temp_value_4",
                "uVar7": "temp_value_5",
                "bVar8": "is_condition_met",
                "iVar1": "int_value_1",
                "iVar2": "int_value_2"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_08000adc",
            "code": "\nuint calculateFloatingPoint_08000adc(uint value1,uint value2,undefined4 value3,uint value4)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  bool isZero;\n  \n  result2 = value1 << 1;\n  isZero = result2 == 0;\n  if (!isZero) {\n    value4 = value2 << 1;\n    isZero = value4 == 0;\n  }\n  if (!isZero) {\n    isZero = result2 == value4;\n  }\n  shiftedValue1 = (int)result2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedValue1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)value4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedValue2 = (int)(value2 << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      result2 = value2;\n      if (shiftedValue1 == -1) {\n        result2 = value1;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        value2 = result2;\n      }\n      isZero = (result2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (value2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = result2 == value2;\n      }\n      if (!isZero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((value1 ^ value2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        value1 = value2;\n      }\n      return value1;\n    }\n    if (value1 != value2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = value1 << 1;\n      if ((value1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return value1 + 0x800000;\n    }\n    value1 = value1 & 0x80000000;\nLAB_08000c12:\n    return value1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  value4 = value4 >> 0x18;\n  temp2 = value4 - result2;\n  isZero = temp2 != 0;\n  temp1 = result2;\n  if (isZero && result2 <= value4) {\n    temp1 = result2 + temp2;\n  }\n  if (isZero && result2 <= value4) {\n    value2 = value2 ^ value1;\n  }\n  if (isZero && result2 <= value4) {\n    value1 = value1 ^ value2;\n  }\n  if (isZero && result2 <= value4) {\n    value2 = value2 ^ value1;\n  }\n  if (value4 < result2) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return value1;\n  }\n  result2 = value1 & 0xffffff | 0x800000;\n  if ((value1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = value2 & 0xffffff | 0x800000;\n  if ((value2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == temp2) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (temp2 & 0xff));\n  result1 = result1 << (0x20 - temp2 & 0xff);\n  value1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)isZero;\n  }\n  if (result2 < 0x800000) {\n    temp2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(temp2 != 0);\n    temp2 = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)temp2 < (int)temp1) {\n        result2 = result2 >> (-(temp2 - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (temp2 - temp1) * 0x800000;\n      }\n      return result2 | value1;\n    }\n  }\n  else {\n    temp2 = temp1 - 1;\n    if (0xffffff < result2) {\n      temp2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(temp2 != 0) << 0x1f | result1 >> 1;\n      temp2 = temp1;\n      if (0xfd < temp1) goto LAB_08000c12;\n    }\n  }\n  result2 = result2 + temp2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | value1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_08000adc",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_result_08000c3c",
            "code": "\nuint calculateResult_08000c3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int intermediateValue;\n  uint shiftedValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  intermediateValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    shiftedValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = intermediateValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < shiftedValue);\n    if (shiftedValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = intermediateValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_result_08000c3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "intermediateValue",
                "uVar4": "shiftedValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "count_leading_zeros_08000c44",
            "code": "\nuint countLeadingZeros_08000c44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint isNegative;\n  int result;\n  \n  isNegative = input & 0x80000000;\n  if ((int)isNegative < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    isNegative = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  isNegative = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "count_leading_zeros_08000c44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "result"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint inputNum1,uint inputNum2,undefined4 unusedParam,uint unusedParam2)\n\n{\n  longlong lVar1;\n  uint result;\n  uint shift1;\n  int sum;\n  int diff;\n  uint temp;\n  int diff2;\n  uint shift2;\n  bool isZero1;\n  bool isZero2;\n  \n  shift1 = inputNum1 >> 0x17 & 0xff;\n  isZero1 = shift1 == 0;\n  if (!isZero1) {\n    unusedParam2 = inputNum2 >> 0x17 & 0xff;\n    isZero1 = unusedParam2 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = shift1 == 0xff;\n  }\n  if (!isZero1) {\n    isZero1 = unusedParam2 == 0xff;\n  }\n  if (isZero1) {\n    unusedParam2 = inputNum2 >> 0x17 & 0xff;\n    if (shift1 == 0xff || unusedParam2 == 0xff) {\n      isZero1 = inputNum1 == 0 || inputNum1 == 0x80000000;\n      result = inputNum2;\n      if (inputNum1 != 0 && inputNum1 != 0x80000000) {\n        isZero1 = inputNum2 == 0;\n        result = inputNum1;\n      }\n      if (!isZero1) {\n        isZero1 = inputNum2 == 0x80000000;\n      }\n      shift2 = result;\n      if (((isZero1) || ((shift1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((unusedParam2 == 0xff && (shift2 = inputNum2, (inputNum2 & 0x7fffff) != 0)))) {\n        return shift2 | 0x7fc00000;\n      }\n      result = result ^ inputNum2;\n      goto LAB_08000e3c;\n    }\n    isZero1 = (inputNum1 & 0x7fffffff) == 0;\n    if (!isZero1) {\n      isZero1 = (inputNum2 & 0x7fffffff) == 0;\n    }\n    if (isZero1) {\n      return (inputNum1 ^ inputNum2) & 0x80000000;\n    }\n    isZero1 = shift1 == 0;\n    result = inputNum1 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        inputNum1 = inputNum1 << 1;\n        isZero1 = (inputNum1 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      shift1 = shift1 - 1;\n    }\n    inputNum1 = inputNum1 | result;\n    isZero1 = unusedParam2 == 0;\n    result = inputNum2 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        inputNum2 = inputNum2 << 1;\n        isZero1 = (inputNum2 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      unusedParam2 = unusedParam2 - 1;\n    }\n    inputNum2 = inputNum2 | result;\n  }\n  sum = shift1 + unusedParam2;\n  shift2 = inputNum1 ^ inputNum2;\n  shift1 = inputNum1 << 9;\n  isZero1 = shift1 == 0;\n  if (!isZero1) {\n    inputNum2 = inputNum2 << 9;\n    isZero1 = inputNum2 == 0;\n  }\n  if (isZero1) {\n    if (shift1 == 0) {\n      inputNum2 = inputNum2 << 9;\n    }\n    result = shift2 & 0x80000000 | inputNum1 & 0x7fffff | inputNum2 >> 9;\n    isZero2 = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero1 = diff == 0;\n    diff2 = diff;\n    if (!isZero1 && 0x7e < sum) {\n      isZero2 = SBORROW4(0xff,diff);\n      diff2 = 0xff - diff;\n      isZero1 = diff == 0xff;\n    }\n    if (!isZero1 && diff2 < 0 == isZero2) {\n      result = result | diff * 0x800000;\n    }\n    if (!isZero1 && diff2 < 0 == isZero2) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp = 0;\n    isZero2 = SBORROW4(diff,1);\n    shift2 = sum - 0x80;\n    isZero1 = shift2 == 0;\n    shift1 = shift2;\n  }\n  else {\n    lVar1 = (ulonglong)(shift1 >> 5 | 0x8000000) * (ulonglong)(inputNum2 >> 5 | 0x8000000);\n    temp = (uint)lVar1;\n    result = (uint)((ulonglong)lVar1 >> 0x20);\n    isZero1 = result < 0x800000;\n    if (isZero1) {\n      result = result << 1;\n    }\n    if (isZero1) {\n      result = result | temp >> 0x1f;\n      temp = temp << 1;\n    }\n    result = shift2 & 0x80000000 | result;\n    shift2 = (sum + -0x7f) - (uint)isZero1;\n    isZero2 = SBORROW4(shift2,0xfd);\n    isZero1 = shift2 == 0xfd;\n    shift1 = shift2 - 0xfd;\n    if (shift2 < 0xfe) {\n      result = result + shift2 * 0x800000 + (uint)(0x7fffffff < temp);\n      if (temp == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero1 || (int)shift1 < 0 != isZero2) {\n    isZero1 = (int)(shift2 + 0x19) < 0;\n    if (shift2 == 0xffffffe7 || isZero1 != SCARRY4(shift2,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (shift2 != 0xffffffe7 && isZero1 == SCARRY4(shift2,0x19)) {\n      shift1 = (result << 1) >> (-shift2 & 0xff);\n      shift2 = result << (shift2 + 0x20 & 0xff);\n      shift1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shift1 >> 1) + (uint)((byte)shift1 & 1);\n      if ((temp | shift2 << 1) == 0) {\n        shift1 = shift1 & ~(shift2 >> 0x1f);\n      }\n      return shift1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "inputNum1",
                "param_2": "inputNum2",
                "param_3": "unusedParam",
                "param_4": "unusedParam2",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "diff2",
                "uVar2": "result",
                "uVar3": "shift1",
                "uVar6": "temp",
                "uVar8": "shift2",
                "bVar9": "isZero1",
                "bVar10": "isZero2"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_floating_point_08000e54",
            "code": "\nuint calculateFloatingPoint_08000e54(uint number1,uint number2,undefined4 param3,uint param4)\n\n{\n  uint exponentShifted2;\n  uint exponentShifted1;\n  int exponentDifference;\n  uint exponentShifted1Result;\n  int sumOfExponents;\n  uint result;\n  bool isZero;\n  bool isGreaterThan127;\n  bool carryFlag;\n  \n  exponentShifted1 = number1 >> 0x17 & 0xff;\n  isZero = exponentShifted1 == 0;\n  if (!isZero) {\n    param4 = number2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponentShifted1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = number2 >> 0x17 & 0xff;\n    result = number1;\n    if (exponentShifted1 == 0xff) {\n      if (((number1 & 0x7fffff) != 0) || (result = number2, param4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = number2;\n        if ((number2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (number1 ^ number2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      isZero = (number1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (number2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponentShifted1 == 0;\n        result = number1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            number1 = number1 << 1;\n            isZero = (number1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponentShifted1 = exponentShifted1 - 1;\n        }\n        number1 = number1 | result;\n        isZero = param4 == 0;\n        result = number2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            number2 = number2 << 1;\n            isZero = (number2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          param4 = param4 - 1;\n        }\n        number2 = number2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((number1 & 0x7fffffff) == 0) {\n        if ((number2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    number1 = number1 ^ number2;\n  }\n  else {\nLAB_08000e6c:\n    exponentDifference = exponentShifted1 - param4;\n    if (number2 << 9 == 0) {\n      number1 = (number1 ^ number2) & 0x80000000 | number1 & 0x7fffff;\n      carryFlag = SCARRY4(exponentDifference,0x7f);\n      sumOfExponents = exponentDifference + 0x7f;\n      isZero = sumOfExponents < 0;\n      isGreaterThan127 = sumOfExponents == 0;\n      if (!isGreaterThan127 && isZero == carryFlag) {\n        carryFlag = SBORROW4(0xff,sumOfExponents);\n        isZero = 0xff - sumOfExponents < 0;\n        isGreaterThan127 = sumOfExponents == 0xff;\n      }\n      if (!isGreaterThan127 && isZero == carryFlag) {\n        number1 = number1 | sumOfExponents * 0x800000;\n      }\n      if (!isGreaterThan127 && isZero == carryFlag) {\n        return number1;\n      }\n      number1 = number1 | 0x800000;\n      exponentShifted1 = 0;\n      isGreaterThan127 = SBORROW4(sumOfExponents,1);\n      exponentShifted1Result = exponentDifference + 0x7e;\n      isZero = exponentShifted1Result == 0;\n      result = exponentShifted1Result;\n    }\n    else {\n      exponentShifted2 = (number2 << 9) >> 4 | 0x10000000;\n      exponentShifted1 = (number1 << 9) >> 4 | 0x10000000;\n      number1 = (number1 ^ number2) & 0x80000000;\n      isZero = exponentShifted2 <= exponentShifted1;\n      if (!isZero) {\n        exponentShifted1 = exponentShifted1 << 1;\n      }\n      exponentShifted1Result = exponentDifference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (exponentShifted2 <= exponentShifted1) {\n          exponentShifted1 = exponentShifted1 - exponentShifted2;\n          number1 = number1 | result;\n        }\n        isZero = exponentShifted2 >> 1 <= exponentShifted1;\n        if (isZero) {\n          exponentShifted1 = exponentShifted1 - (exponentShifted2 >> 1);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 1;\n        }\n        isZero = exponentShifted2 >> 2 <= exponentShifted1;\n        if (isZero) {\n          exponentShifted1 = exponentShifted1 - (exponentShifted2 >> 2);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 2;\n        }\n        isZero = exponentShifted2 >> 3 <= exponentShifted1;\n        if (isZero) {\n          exponentShifted1 = exponentShifted1 - (exponentShifted2 >> 3);\n        }\n        if (isZero) {\n          number1 = number1 | result >> 3;\n        }\n        exponentShifted1 = exponentShifted1 * 0x10;\n        isZero = exponentShifted1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isGreaterThan127 = SBORROW4(exponentShifted1Result,0xfd);\n      isZero = exponentShifted1Result == 0xfd;\n      result = exponentShifted1Result - 0xfd;\n      if (exponentShifted1Result < 0xfe) {\n        number1 = number1 + exponentShifted1Result * 0x800000 + (uint)(exponentShifted2 <= exponentShifted1);\n        if (exponentShifted1 - exponentShifted2 == 0) {\n          number1 = number1 & 0xfffffffe;\n        }\n        return number1;\n      }\n    }\n    if (isZero || (int)result < 0 != isGreaterThan127) {\n      isZero = (int)(exponentShifted1Result + 0x19) < 0;\n      if (exponentShifted1Result == 0xffffffe7 || isZero != SCARRY4(exponentShifted1Result,0x19)) {\n        number1 = number1 & 0x80000000;\n      }\n      if (exponentShifted1Result == 0xffffffe7 || isZero != SCARRY4(exponentShifted1Result,0x19)) {\n        return number1;\n      }\n      result = (number1 << 1) >> (-exponentShifted1Result & 0xff);\n      exponentShifted1Result = number1 << (exponentShifted1Result + 0x20 & 0xff);\n      result = ((uint)((number1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponentShifted1 | exponentShifted1Result << 1) == 0) {\n        result = result & ~(exponentShifted1Result >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return number1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_floating_point_08000e54",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "exponentShifted2",
                "uVar2": "exponentShifted1",
                "iVar3": "exponentDifference",
                "uVar4": "exponentShifted1Result",
                "iVar5": "sumOfExponents",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isGreaterThan127",
                "bVar9": "carryFlag"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "check_overflow_08000f9c",
            "code": "\nuint check_overflow_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_shifted;\n  uint input_2_shifted;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_shifted = input_1 * 2;\n  input_2_shifted = input_2 * 2;\n  if (((int)input_1_shifted >> 0x18 == -1 || (int)input_2_shifted >> 0x18 == -1) &&\n     ((((int)input_1_shifted >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_shifted >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = input_1_shifted | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_shifted + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_shifted <= input_1_shifted) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_shifted > input_1_shifted) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "check_overflow_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_shifted",
                "uVar3": "input_2_shifted",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_params_08000ffc",
            "code": "\nvoid concatenateParams_08000ffc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_params_08001004(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_params_08000ffc",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenateParams_08001004(undefined4 firstParam,undefined4 secondParam)\n\n{\n  checkOverflow();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "check_overflow_08000f9c": "checkOverflow"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_concatenated_params_08001014",
            "code": "\nbool check_concatenated_params_08001014(void)\n\n{\n  char result;\n  \n  concatenate_params();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_concatenated_params_08001014",
                "in_ZR": "result",
                "concatenate_params_08001004": "concatenate_params"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_concatenation_result_08001028",
            "code": "\nbool check_concatenation_result_08001028(void)\n\n{\n  char concatenation_result;\n  \n  concatenate_params_08001004();\n  return concatenation_result == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_concatenation_result_08001028",
                "in_CY": "concatenation_result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenation_result_08001050",
            "code": "\nbool check_concatenation_result_08001050(void)\n\n{\n  undefined is_zero_result;\n  undefined is_concatenation_successful;\n  \n  concatenate_params_08000ffc();\n  return !(bool)is_concatenation_successful || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenation_result_08001050",
                "in_ZR": "is_zero_result",
                "in_CY": "is_concatenation_successful"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_concatenation_completed_08001064",
            "code": "\nbool check_if_concatenation_completed_08001064(void)\n\n{\n  char concatenated_string_end;\n  \n  concatenate_parameters();\n  return concatenated_string_end == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_concatenation_completed_08001064",
                "in_CY": "concatenated_string_end",
                "concatenate_params_08000ffc": "concatenate_parameters"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_to_signed_integer_08001078",
            "code": "\nuint convertToSignedInteger_08001078(uint inputValue)\n\n{\n  uint tempValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  tempValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - tempValue;\n  if (tempValue < 0x9f && difference != 0) {\n    tempValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      tempValue = -tempValue;\n    }\n    return tempValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_to_signed_integer_08001078",
                "param_1": "inputValue",
                "uVar1": "tempValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "validate_input_080010c4",
            "code": "\nuint validate_input_080010c4(uint input_value)\n\n{\n  uint shift_count;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_count = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_count) {\n    return (input_value << 8 | 0x80000000) >> (shift_count & 0xff);\n  }\n  if ((shift_count == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "validate_input_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_count"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_and_update_08001104",
            "code": "\nundefined4 initialize_and_update_08001104(undefined4 input_value)\n\n{\n  uint data;\n  \n  data = get_data();\n  init_memory(data / 1000);\n  update_register(0xffffffff,input_value,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_and_update_08001104",
                "param_1": "input_value",
                "uVar1": "data",
                "get_data_08002214": "get_data",
                "initialize_memory_08001214": "init_memory",
                "update_register_08001194": "update_register"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_08001128",
            "code": "\n\n\nundefined4 initialize_system_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_data_register(3);\n  initialize_and_update(0);\n  initialize_data_registers();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_08001128",
                "configure_data_register_08001170": "configure_data_register",
                "initialize_and_update_08001104": "initialize_and_update",
                "initialize_data_registers_08004ccc": "initialize_data_registers"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_data_register_08001170",
            "code": "\n\n\nvoid configureDataRegister_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_data_register_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_register_08001194",
            "code": "\n\n\nvoid updateRegister_08001194(uint registerValue,uint maskValue,uint updateValue)\n\n{\n  undefined updatedByte;\n  uint bitsToShift;\n  uint shiftCount;\n  uint newShiftCount;\n  \n  shiftCount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  bitsToShift = 7 - shiftCount;\n  newShiftCount = shiftCount + 4;\n  if (3 < bitsToShift) {\n    bitsToShift = 4;\n  }\n  if (newShiftCount < 7) {\n    shiftCount = 0;\n  }\n  bitsToShift = (1 << (bitsToShift & 0xff)) - 1;\n  if (6 < newShiftCount) {\n    shiftCount = shiftCount - 3;\n  }\n  updatedByte = (undefined)\n          ((updateValue & (1 << (shiftCount & 0xff)) - 1U | (maskValue & bitsToShift) << (shiftCount & 0xff)) << 4);\n  if (-1 < (int)registerValue) {\n    shiftCount = registerValue + 0xe000e100;\n  }\n  else {\n    bitsToShift = 0xe000ed14;\n    shiftCount = registerValue & 0xf;\n  }\n  if (-1 < (int)registerValue) {\n    *(undefined *)(shiftCount + 0x300) = updatedByte;\n  }\n  else {\n    *(undefined *)(bitsToShift + shiftCount) = updatedByte;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_register_08001194",
                "param_1": "registerValue",
                "param_2": "maskValue",
                "param_3": "updateValue",
                "uVar1": "updatedByte",
                "uVar2": "bitsToShift",
                "uVar3": "shiftCount",
                "uVar4": "newShiftCount"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint index)\n\n{\n  *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "index"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "initialize_memory_08001214",
            "code": "\n\n\nundefined4 initializeMemory_08001214(int valueToSet)\n\n{\n  if (valueToSet - 1U < 0x1000000) {\n    _DAT_e000e014 = valueToSet - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "initialize_memory_08001214",
                "param_1": "valueToSet"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_08001240",
            "code": "\n\n\nvoid setFlag_08001240(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_register_values_08001264",
            "code": "\n\n\nvoid updateRegisterValues_08001264(uint *registerValues,uint *inputValues)\n\n{\n  uint newValue;\n  uint mask;\n  uint opcode;\n  int registerIndex;\n  uint bitIndex;\n  uint bitMask;\n  uint checkValue;\n  uint *registerPointer;\n  int shiftAmount;\n  \n  newValue = 0;\n  bitIndex = 0;\n  do {\n    bitMask = 1 << (bitIndex & 0xff);\n    mask = bitMask & *inputValues;\n    if (bitMask == mask) {\n      opcode = inputValues[1];\n      if (opcode == 0x12) {\n        newValue = inputValues[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          newValue = inputValues[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_080013be;\n          if (opcode == 1) {\n            newValue = inputValues[3];\n          }\n        }\n        else if (opcode == 3) {\n          newValue = 0;\n        }\n        else if (opcode == 0x11) {\n          newValue = inputValues[3] + 4;\n        }\n      }\n      else {\n        if (opcode != 0x10210000) {\n          if (opcode < 0x10210001) {\n            if (opcode != 0x10110000) {\n              checkValue = 0x10120000;\nLAB_080013b8:\n              if (opcode != checkValue) goto LAB_080012a8;\n            }\n          }\n          else if ((opcode != 0x10310000) && (opcode != 0x10320000)) {\n            checkValue = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        newValue = inputValues[2];\n        if (newValue == 0) {\n          newValue = 4;\n        }\n        else {\n          if (newValue == 1) {\n            registerValues[4] = bitMask;\n          }\n          if (newValue != 1) {\n            registerValues[5] = bitMask;\n          }\n          newValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (mask < 0x100) {\n        bitMask = *registerValues;\n        opcode = bitIndex << 2;\n        registerPointer = registerValues;\n      }\n      else {\n        bitMask = registerValues[1];\n        opcode = (bitIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < mask) {\n        registerPointer = registerValues + 1;\n      }\n      *registerPointer = bitMask & ~(0xf << (opcode & 0xff)) | newValue << (opcode & 0xff);\n      registerPointer = (uint *)inputValues[1];\n      if (((uint)registerPointer & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount = (bitIndex & 3) << 2;\n        if (registerValues == (uint *)0x40010800) {\n          registerIndex = 0;\n        }\n        else if (registerValues == (uint *)0x40010c00) {\n          registerIndex = 1;\n        }\n        else if (registerValues == (uint *)0x40011000) {\n          registerIndex = 2;\n        }\n        else if (registerValues == (uint *)0x40011400) {\n          registerIndex = 3;\n        }\n        else {\n          registerIndex = 4;\n        }\n        *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) =\n             registerIndex << shiftAmount | *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) & ~(0xf << shiftAmount);\n        if (((uint)registerPointer & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~mask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | mask;\n        }\n        if (((uint)registerPointer & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~mask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | mask;\n        }\n        if (((uint)registerPointer & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~mask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | mask;\n        }\n        if (((uint)registerPointer & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~mask;\n        }\n        else {\n          _DAT_4001040c = mask | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n    if (bitIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_register_values_08001264",
                "param_1": "registerValues",
                "param_2": "inputValues",
                "uVar1": "newValue",
                "uVar2": "mask",
                "uVar3": "opcode",
                "iVar4": "registerIndex",
                "uVar5": "bitIndex",
                "uVar6": "bitMask",
                "uVar7": "checkValue",
                "unaff_r10": "registerPointer",
                "iVar8": "shiftAmount"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int flag)\n\n{\n  if (flag == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_and_update_value_0800142e",
            "code": "\nvoid xorAndUpdateValue_0800142e(int inputPointer,uint valueToXor)\n\n{\n  *(uint *)(inputPointer + 0xc) = valueToXor ^ *(uint *)(inputPointer + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_and_update_value_0800142e",
                "param_1": "inputPointer",
                "param_2": "valueToXor"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_modify_flag_08001436",
            "code": "\nundefined4 checkAndModifyFlag_08001436(int *param)\n\n{\n  int paramValue;\n  \n  paramValue = *param;\n  if ((*(uint *)(paramValue + 0x14) & 0x400) != 0) {\n    *(uint *)(paramValue + 0x14) = *(uint *)(paramValue + 0x14) & 0xfffffbff;\n    param[0xe] = 4;\n    *(undefined *)((int)param + 0x35) = 0x20;\n    *(undefined *)(param + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_modify_flag_08001436",
                "param_1": "param",
                "iVar1": "paramValue"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_validity_08001460",
            "code": "\nflagndefined4 checkDataValidity_08001460(flagint **data,flagint condition,flagint timeout)\n\n{\n  int prevData;\n  int currData;\n  flagint selectedValue;\n  flagint *pointer;\n  \n  prevData = get_data_0800115c();\n  do {\n    pointer = *data;\n    if ((condition << 8) >> 0x18 == 1) {\n      selectedValue = pointer[5];\n    }\n    else {\n      selectedValue = pointer[6];\n    }\n    if ((condition & 0xffff & ~selectedValue) == 0) {\n      retflagrn 0;\n    }\n    if ((int)(pointer[5] << 0x15) < 0) {\n      *pointer = *pointer | 0x200;\n      pointer[5] = pointer[5] & 0xfffffbff;\n      data[0xe] = (flagint *)0x4;\n      *(flagndefined *)((int)data + 0x35) = 0x20;\n      *(flagndefined *)(data + 0xd) = 0;\n      retflagrn 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currData = get_data_0800115c(), (flagint)(currData - prevData) <= timeout))));\n  *(flagndefined *)((int)data + 0x35) = 0x20;\n  *(flagndefined *)(data + 0xd) = 0;\n  retflagrn 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_validity_08001460",
                "param_1": "data",
                "param_2": "condition",
                "param_3": "timeout",
                "iVar1": "prevData",
                "iVar2": "currData",
                "uVar3": "selectedValue",
                "puVar4": "pointer",
                "u": "flag"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_flag_and_modify_080014e2",
            "code": "\nundefined4 check_flag_and_modify_080014e2(int *flag_data,uint max_diff)\n\n{\n  int initial_data;\n  int check_result;\n  \n  initial_data = get_data_0800115c();\n  while( true ) {\n    if (*(int *)(*flag_data + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    check_result = check_and_modify_flag_08001436(flag_data);\n    if (check_result != 0) break;\n    if ((max_diff != 0xffffffff) &&\n       ((max_diff == 0 || (check_result = get_data_0800115c(), max_diff < (uint)(check_result - initial_data))))) {\n      flag_data[0xe] = flag_data[0xe] | 0x20;\n      *(undefined *)((int)flag_data + 0x35) = 0x20;\n      *(undefined *)(flag_data + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_flag_and_modify_080014e2",
                "param_1": "flag_data",
                "param_2": "max_diff",
                "iVar1": "initial_data",
                "iVar2": "check_result"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_flag_08001530",
            "code": "\nundefined4 updateFlag_08001530(uint **flag,uint value1,uint value2,int mode,uint param)\n\n{\n  int startPos;\n  int endPos;\n  uint *ptr;\n  uint **flagPtr;\n  uint val1;\n  uint val2;\n  \n  **flag = **flag | 0x100;\n  flagPtr = flag;\n  val1 = value1;\n  val2 = value2;\n  startPos = get_data_0800115c();\n  do {\n    ptr = *flag;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = value1 & 0xfe;\n        startPos = check_data_validity_08001460(flag,0x10002,param,ptr,flagPtr,val1,val2);\n        if (startPos == 0) {\n          startPos = check_flag_and_modify_080014e2(flag,param,(*flag)[5],(*flag)[6]);\n          if (startPos == 0) {\n            ptr = *flag;\n            if (mode == 1) {\nLAB_080015ca:\n              ptr[4] = value2 & 0xff;\n              return 0;\n            }\n            ptr[4] = value2 >> 8;\n            startPos = check_flag_and_modify_080014e2(flag,param);\n            if (startPos == 0) {\n              ptr = *flag;\n              goto LAB_080015ca;\n            }\n          }\n          if (flag[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **flag = **flag | 0x200;\n        }\n        else if (flag[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param == 0xffffffff);\n    if ((param == 0) || (endPos = get_data_0800115c(), param < (uint)(endPos - startPos))) {\n      *(undefined *)((int)flag + 0x35) = 0x20;\n      *(undefined *)(flag + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_flag_08001530",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "mode",
                "param_5": "param",
                "iVar1": "startPos",
                "iVar2": "endPos",
                "puVar3": "ptr",
                "ppuVar4": "flagPtr",
                "uVar5": "val1",
                "uVar6": "val2"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "update_data_and_check_validity_080015e8",
            "code": "\nundefined4 updateDataAndCheckValidity_080015e8(uint **dataPointer,uint value1,uint value2,int flag,uint limit)\n\n{\n  int dataValidityCheckResult;\n  int timeDifference;\n  uint *currentData;\n  uint **dataPointerPointer;\n  uint value1Copy;\n  uint value2Copy;\n  \n  currentData = *dataPointer;\n  *currentData = *currentData | 0x400;\n  *currentData = *currentData | 0x100;\n  dataPointerPointer = dataPointer;\n  value1Copy = value1;\n  value2Copy = value2;\n  dataValidityCheckResult = get_data_0800115c();\nLAB_0800160e:\n  currentData = *dataPointer;\n  while (-1 < (int)(currentData[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  currentData[4] = value1 & 0xfe;\n  dataValidityCheckResult = check_data_validity_08001460(dataPointer,0x10002,limit,currentData,dataPointerPointer,value1Copy,value2Copy);\n  if (dataValidityCheckResult != 0) goto LAB_080016ba;\n  dataValidityCheckResult = check_flag_and_modify_080014e2(dataPointer,limit,(*dataPointer)[5],(*dataPointer)[6]);\n  if (dataValidityCheckResult == 0) {\n    currentData = *dataPointer;\n    if (flag != 1) {\n      currentData[4] = value2 >> 8;\n      dataValidityCheckResult = check_flag_and_modify_080014e2(dataPointer,limit);\n      if (dataValidityCheckResult != 0) goto LAB_08001642;\n      currentData = *dataPointer;\n    }\n    currentData[4] = value2 & 0xff;\n    dataValidityCheckResult = check_flag_and_modify_080014e2(dataPointer,limit);\n    if (dataValidityCheckResult == 0) {\n      **dataPointer = **dataPointer | 0x100;\n      dataValidityCheckResult = get_data_0800115c();\n      do {\n        do {\n          if ((int)((*dataPointer)[5] << 0x1f) < 0) {\n            (*dataPointer)[4] = value1 & 0xff | 1;\n            dataValidityCheckResult = check_data_validity_08001460(dataPointer,0x10002,limit);\n            if (dataValidityCheckResult == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (dataPointer[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (timeDifference = get_data_0800115c(), (uint)(timeDifference - dataValidityCheckResult) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (dataPointer[0xe] == (uint *)0x4) {\n    **dataPointer = **dataPointer | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (timeDifference = get_data_0800115c(), limit < (uint)(timeDifference - dataValidityCheckResult)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "update_data_and_check_validity_080015e8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "limit",
                "iVar1": "dataValidityCheckResult",
                "iVar2": "timeDifference",
                "puVar3": "currentData",
                "ppuVar4": "dataPointerPointer",
                "uVar5": "value1Copy",
                "uVar6": "value2Copy"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "process_data_080016f4",
            "code": "\nundefined4 processData_080016f4(int *data,uint length)\n\n{\n  int initialData;\n  int currentData;\n  \n  initialData = get_data_0800115c();\n  while( true ) {\n    currentData = *data;\n    if ((*(uint *)(currentData + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentData + 0x14) << 0x1b < 0) break;\n    if ((length == 0) || (currentData = get_data_0800115c(), length < (uint)(currentData - initialData))) {\n      data[0xe] = data[0xe] | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentData + 0x14) = *(uint *)(currentData + 0x14) & 0xffffffef;\n  data[0xe] = 0;\n  *(undefined *)(data + 0xd) = 0;\n  *(undefined *)((int)data + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "process_data_080016f4",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "initialData",
                "iVar2": "currentData"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_registers_08001754",
            "code": "\nundefined4 initializeRegisters_08001754(uint **registers)\n\n{\n  uint shiftedValueUpper;\n  uint shiftedValueLower;\n  uint *registerPointer;\n  uint *registerPointer2;\n  uint *registerPointer3;\n  uint uVar6;\n  undefined8 shiftedValue;\n  \n  if (registers != (uint **)0x0) {\n    if (*(char *)((int)registers + 0x35) == '\\0') {\n      *(undefined *)(registers + 0xd) = 0;\n      updateRegisterValuesIfConditionMet();\n    }\n    *(undefined *)((int)registers + 0x35) = 0x24;\n    **registers = **registers & 0xfffffffe;\n    shiftedValue = getShiftedValue();\n    shiftedValueLower = (uint)((ulonglong)shiftedValue >> 0x20);\n    shiftedValueUpper = (uint)shiftedValue;\n    registerPointer2 = registers[1];\n    uVar6 = shiftedValueUpper / 1000000;\n    if ((uint *)0x186a0 < registerPointer2) {\n      shiftedValueLower = 300;\n    }\n    registerPointer = *registers;\n    if ((uint *)0x186a0 < registerPointer2) {\n      shiftedValueLower = uVar6 * shiftedValueLower;\n    }\n    registerPointer[1] = uVar6;\n    if ((uint *)0x186a0 < registerPointer2) {\n      uVar6 = shiftedValueLower / 1000;\n    }\n    registerPointer[8] = uVar6 + 1;\n    if (registerPointer2 < (uint *)0x186a1) {\n      shiftedValueUpper = shiftedValueUpper / (uint)((int)registerPointer2 << 1);\n      if ((shiftedValueUpper & 0xfff) < 4) {\n        shiftedValueUpper = 4;\n      }\n    }\n    else {\n      if (registers[2] == (uint *)0x0) {\n        shiftedValueUpper = shiftedValueUpper / (uint)((int)registerPointer2 * 3) | 0x8000;\n      }\n      else {\n        shiftedValueUpper = shiftedValueUpper / (uint)((int)registerPointer2 * 0x19) | 0xc000;\n      }\n      if ((shiftedValueUpper & 0xfff) == 0) {\n        shiftedValueUpper = 1;\n      }\n    }\n    registerPointer2 = registers[8];\n    registerPointer3 = registers[7];\n    registerPointer[7] = shiftedValueUpper;\n    *registerPointer = (uint)registerPointer3 | (uint)registerPointer2;\n    registerPointer[2] = (uint)registers[4] | (uint)registers[3];\n    registerPointer[3] = (uint)registers[5] | (uint)registers[6];\n    *registerPointer = *registerPointer | 1;\n    registers[0xe] = (uint *)0x0;\n    *(undefined *)((int)registers + 0x35) = 0x20;\n    *(undefined *)((int)registers + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_registers_08001754",
                "param_1": "registers",
                "uVar1": "shiftedValueUpper",
                "uVar2": "shiftedValueLower",
                "puVar3": "registerPointer",
                "puVar4": "registerPointer2",
                "puVar5": "registerPointer3",
                "uVar7": "shiftedValue",
                "update_register_values_if_condition_met_08004d48": "updateRegisterValuesIfConditionMet",
                "get_shifted_value_08002220": "getShiftedValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,byte *inputData,\n            short inputSize,undefined4 param7)\n\n{\n  int startValue;\n  int currentValue;\n  uint *ptr;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (inputData == (byte *)0x0) {\n      return 1;\n    }\n    if (inputSize == 0) {\n      return 1;\n    }\n    startValue = get_data_0800115c();\n    do {\n      ptr = *data;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *ptr;\n        *(undefined *)(data + 0xd) = 1;\n        *ptr = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        startValue = updateFlag(data,param2,param3,param4,param7);\n        if (startValue != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      currentValue = get_data_0800115c();\n    } while ((uint)(currentValue - startValue) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (inputSize != 0) {\nLAB_080018e2:\n    startValue = checkAndModifyFlag(data,param7);\n    if (startValue != 0) goto LAB_080018ee;\n    ptr = *data;\n    ptr[4] = (uint)*inputData;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(inputSize + -1) == 0) break;\n      inputSize = inputSize + -2;\n      ptr[4] = (uint)inputData[1];\n      inputData = inputData + 2;\n    }\n    else {\n      inputData = inputData + 1;\n      inputSize = inputSize + -1;\n    }\n  }\n  startValue = checkAndModifyFlag(data,param7);\n  if (startValue == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "inputData",
                "param_6": "inputSize",
                "param_7": "param7",
                "iVar1": "startValue",
                "iVar2": "currentValue",
                "puVar3": "ptr",
                "uVar4": "value",
                "update_flag_08001530": "updateFlag",
                "check_flag_and_modify_080014e2": "checkAndModifyFlag"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocess_data_08001938(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *output,ushort size,uint timeout)\n\n{\n  undefined *ptr1;\n  int value1;\n  int value2;\n  uint *ptr2;\n  uint data_value;\n  undefined *ptr3;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  value1 = get_data_0800115c();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    value2 = get_data_0800115c();\n    if (10000 < (uint)(value2 - value1)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  data_value = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = data_value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  value1 = update_data_and_check_validity_080015e8(data,param2,param3,param4,timeout);\n  if (value1 != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  data_value = *ptr2;\n  if (size == 1) {\n    *ptr2 = data_value & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    value1 = process_data_08001938_080016f4(data,timeout);\n    if (value1 == 0) {\n      *output = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (size == 2) {\n    *ptr2 = data_value | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *ptr2 = data_value | 0x400;\n    while (3 < size) {\n      value1 = process_data_08001938_080016f4(data,timeout);\n      if (value1 != 0) goto LAB_08001a18;\n      *output = (char)(*data)[4];\n      ptr2 = *data;\n      flag = (int)(ptr2[5] << 0x1d) < 0;\n      if (flag) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = output + 2;\n        size = size - 2;\n      }\n      else {\n        ptr3 = output + 1;\n        size = size - 1;\n      }\n      ptr1 = output + 1;\n      output = ptr3;\n      if (flag) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (size != 2) {\n      value1 = get_data_0800115c();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disableIRQinterrupts();\n            *output = (char)(*data)[4];\n            value1 = get_data_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (value2 = get_data_0800115c(), (uint)(value2 - value1) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  value1 = get_data_0800115c();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *output = (char)ptr2[4];\n        enableIRQinterrupts();\n        output[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (value2 = get_data_0800115c(), (uint)(value2 - value1) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        output[1] = (char)ptr2[4];\n        enableIRQinterrupts();\n        output[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (value2 = get_data_0800115c(), (uint)(value2 - value1) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "param_6": "size",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "value1",
                "iVar3": "value2",
                "puVar4": "ptr2",
                "uVar5": "data_value",
                "puVar6": "ptr3",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_conditions_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_08001b58(int *input_values)\n\n{\n  int temp_var1;\n  int temp_var2;\n  \n  if (*input_values << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (input_values[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      temp_var1 = input_values[1];\n      if (temp_var1 == 0x10000) {\nlabel_1:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (temp_var1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          temp_var1 = get_data();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            temp_var2 = get_data();\n            if (100 < (uint)(temp_var2 - temp_var1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (temp_var1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto label_1;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      temp_var1 = get_data();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        temp_var2 = get_data();\n        if (100 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*input_values << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (input_values[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      memory_1 = input_values[4];\n      if (memory_1 == 0) {\n        temp_var1 = get_data();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          temp_var2 = get_data();\n          if (2 < (uint)(temp_var2 - temp_var1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      memory_1 = 1;\n      temp_var1 = get_data();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        temp_var2 = get_data();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = input_values[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*input_values << 0x1c < 0) {\n    memory_2 = input_values[6];\n    if (memory_2 == 0) {\n      temp_var1 = get_data();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        temp_var2 = get_data();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      memory_2 = 1;\n      temp_var1 = get_data();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        temp_var2 = get_data();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *input_values << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  temp_var1 = get_data();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    temp_var2 = get_data();\n    if (100 < (uint)(temp_var2 - temp_var1)) {\n      return 3;\n    }\n  }\n  temp_var1 = input_values[3];\n  if (temp_var1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (temp_var1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      temp_var1 = get_data();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        temp_var2 = get_data();\n        if (5000 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (temp_var1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  temp_var1 = get_data();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    temp_var2 = get_data();\n    if (5000 < (uint)(temp_var2 - temp_var1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (input_values[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (input_values[7] != 2) {\n      memory_3 = 0;\n      temp_var1 = get_data();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        temp_var2 = get_data();\n      } while ((uint)(temp_var2 - temp_var1) < 3);\n      return 3;\n    }\n    memory_3 = 0;\n    temp_var1 = get_data();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (input_values[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | input_values[2];\n        }\n        _DAT_40021004 = input_values[8] | input_values[9] | _DAT_40021004 & 0xffc2ffff;\n        memory_3 = 1;\n        temp_var1 = get_data();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          temp_var2 = get_data();\n        } while ((uint)(temp_var2 - temp_var1) < 3);\n        return 3;\n      }\n      temp_var2 = get_data();\n    } while ((uint)(temp_var2 - temp_var1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_conditions_08001b58",
                "param_1": "input_values",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "get_data_0800115c": "get_data",
                "LAB_08001c1e": "label_1",
                "iRam42420000": "memory_1",
                "iRam42420480": "memory_2",
                "uRam42420060": "memory_3"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu9250_clock_frequency_08002008",
            "code": "\n\n\nint calculateMPU9250ClockFrequency_08002008(void)\n\n{\n  undefined4 firstValue;\n  int clockFrequency;\n  undefined4 secondValue;\n  undefined4 *pointer1;\n  uint result;\n  undefined4 *pointer2;\n  byte byteArray [4];\n  undefined4 outputArray [5];\n  \n  pointer1 = &DAT_080072f0;\n  pointer2 = outputArray;\n  do {\n    firstValue = *pointer1;\n    secondValue = pointer1[1];\n    pointer1 = pointer1 + 2;\n    *pointer2 = firstValue;\n    pointer2[1] = secondValue;\n    pointer2 = pointer2 + 2;\n  } while (pointer1 != (undefined4 *)\"../Src/MPU9250.c\");\n  byteArray[0] = 1;\n  byteArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      result = 8000000 / byteArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      result = 4000000;\n    }\n    clockFrequency = result * *(byte *)((int)outputArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockFrequency = 8000000;\n  }\n  return clockFrequency;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_frequency_08002008",
                "uVar1": "firstValue",
                "iVar2": "clockFrequency",
                "uVar3": "secondValue",
                "puVar4": "pointer1",
                "uVar5": "result",
                "puVar6": "pointer2",
                "local_24": "byteArray",
                "local_20": "outputArray"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "check_and_initialize_mpu_0800209c",
            "code": "\n\n\nundefined4 check_and_initialize_mpu_0800209c(uint *data_ptr,uint data_length)\n\n{\n  char check_var1;\n  char check_var2;\n  int temp_var1;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  \n  if ((data_length <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_length, data_length == (data_length & 7))) {\n    if ((int)(*data_ptr << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data_ptr[2];\n    }\n    temp_var1 = *data_ptr << 0x1f;\n    if (-1 < temp_var1) {\nLAB_080020ba:\n      if ((data_length < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_length, data_length != (data_length & 7))) {\n        return 1;\n      }\n      if ((*data_ptr & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data_ptr[3];\n      }\n      if ((int)(*data_ptr << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data_ptr[4] << 3;\n      }\n      temp_var2 = calculate_mpu9250_clock_frequency_08002008();\n      DAT_200001bc = temp_var2 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_and_update_08001104(0);\n      return 0;\n    }\n    temp_var2 = data_ptr[1];\n    if (temp_var2 == 1) {\n      check_var2 = '\\x01';\n      check_var1 = '\\0';\n    }\n    else {\n      temp_var4 = _DAT_40021000;\n      if (temp_var2 == 2) goto LAB_08002176;\n      check_var2 = '\\0';\n      check_var1 = '\\x01';\n    }\n    temp_var4 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(check_var1 << 6) << 0x18 | (uint)(byte)(check_var2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)temp_var4 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | temp_var2;\n      temp_var1 = get_data_0800115c(temp_var1,temp_var4);\n      if (data_ptr[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          temp_var3 = get_data_0800115c();\n        } while ((uint)(temp_var3 - temp_var1) < 0x1389);\n      }\n      else if (data_ptr[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          temp_var3 = get_data_0800115c();\n        } while ((uint)(temp_var3 - temp_var1) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          temp_var3 = get_data_0800115c();\n        } while ((uint)(temp_var3 - temp_var1) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "check_and_initialize_mpu_0800209c",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "cVar1": "check_var1",
                "cVar2": "check_var2",
                "iVar3": "temp_var1",
                "uVar4": "temp_var2",
                "iVar5": "temp_var3",
                "uVar6": "temp_var4"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_08002214",
            "code": "\nundefined4 get_data_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_shifted_value_08002250",
            "code": "\n\n\nuint get_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_params_08002280",
            "code": "\nvoid updateParams_08002280(int address,uint *values)\n\n{\n  uint updatedFlags;\n  uint originalValue;\n  uint newValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  originalValue = *(uint *)(address + 4);\n  newValue = *values;\n  updatedFlags = *(uint *)(address + 0x20) & 0xfffffffd | values[2];\n  if (address == 0x40012c00) {\n    updatedFlags = (updatedFlags & 0xfffffff7 | values[3]) & 0xfffffffb;\n    originalValue = originalValue & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(address + 4) = originalValue;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | newValue;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = updatedFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_params_08002280",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updatedFlags",
                "uVar2": "originalValue",
                "uVar3": "newValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_parameters_080022d0",
            "code": "\nvoid updateParameters_080022d0(int address,uint *params)\n\n{\n  uint updatedVar1;\n  uint updatedVar2;\n  uint updatedVar3;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  updatedVar2 = *(uint *)(address + 4);\n  updatedVar3 = *params;\n  updatedVar1 = *(uint *)(address + 0x20) & 0xfffffdff | params[2] << 8;\n  if (address == 0x40012c00) {\n    updatedVar1 = (updatedVar1 & 0xfffff7ff | params[3] << 8) & 0xfffffbff;\n    updatedVar2 = updatedVar2 & 0xffffcfff | (params[5] | params[6]) << 4;\n  }\n  *(uint *)(address + 4) = updatedVar2;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffffff8c | updatedVar3;\n  *(uint *)(address + 0x3c) = params[1];\n  *(uint *)(address + 0x20) = updatedVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_parameters_080022d0",
                "param_1": "address",
                "param_2": "params",
                "uVar1": "updatedVar1",
                "uVar2": "updatedVar2",
                "uVar3": "updatedVar3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_settings_08002324",
            "code": "\nvoid updateSettings_08002324(int settingsAddress,int *settingsData)\n\n{\n  uint tempValue;\n  int value1;\n  int value2;\n  int constantValue;\n  \n  *(uint *)(settingsAddress + 0x20) = *(uint *)(settingsAddress + 0x20) & 0xffffefff;\n  tempValue = *(uint *)(settingsAddress + 4);\n  value1 = *settingsData;\n  value2 = settingsData[2];\n  constantValue = 0x40012c00;\n  if (settingsAddress == 0x40012c00) {\n    constantValue = settingsData[5];\n    tempValue = tempValue & 0xffffbfff;\n  }\n  if (settingsAddress == 0x40012c00) {\n    tempValue = tempValue | constantValue << 6;\n  }\n  *(uint *)(settingsAddress + 4) = tempValue;\n  *(uint *)(settingsAddress + 0x1c) = *(uint *)(settingsAddress + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(settingsAddress + 0x40) = settingsData[1];\n  *(uint *)(settingsAddress + 0x20) = *(uint *)(settingsAddress + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_settings_08002324",
                "param_1": "settingsAddress",
                "param_2": "settingsData",
                "uVar1": "tempValue",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "constantValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryAddress,uint *sourceData)\n\n{\n  uint modifiedValue;\n  \n  modifiedValue = *memoryAddress;\n  if (((((memoryAddress == (uint *)0x40012c00) || (memoryAddress == (uint *)0x40000000)) ||\n       (memoryAddress == (uint *)0x40000400)) || (memoryAddress == (uint *)0x40000800)) &&\n     (((modifiedValue = modifiedValue & 0xffffff8f | sourceData[1], memoryAddress == (uint *)0x40012c00 ||\n       (memoryAddress == (uint *)0x40000000)) ||\n      ((memoryAddress == (uint *)0x40000400 || (memoryAddress == (uint *)0x40000800)))))) {\n    modifiedValue = modifiedValue & 0xfffffcff | sourceData[3];\n  }\n  *memoryAddress = modifiedValue;\n  memoryAddress[0xb] = sourceData[2];\n  memoryAddress[10] = *sourceData;\n  modifiedValue = 0x40012c00;\n  if (memoryAddress == (uint *)0x40012c00) {\n    modifiedValue = sourceData[4];\n  }\n  if (memoryAddress == (uint *)0x40012c00) {\n    memoryAddress[0xc] = modifiedValue;\n  }\n  memoryAddress[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryAddress",
                "param_2": "sourceData",
                "uVar1": "modifiedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_parameter_080023d0",
            "code": "\nundefined4 initialize_parameter_080023d0(undefined4 *parameter)\n\n{\n  if (parameter != (undefined4 *)0x0) {\n    if (*(char *)((int)parameter + 0x39) == '\\0') {\n      *(undefined *)(parameter + 0xe) = 0;\n      update_flags();\n    }\n    *(undefined *)((int)parameter + 0x39) = 2;\n    update_memory(*parameter,parameter + 1);\n    *(undefined *)((int)parameter + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_parameter_080023d0",
                "param_1": "parameter",
                "update_flags_based_on_value_08004d8c": "update_flags",
                "update_memory_08002368": "update_memory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_data_08002404",
            "code": "\nvoid updateData_08002404(int dataAddress,int *dataArray)\n\n{\n  uint modifiedValue1;\n  uint modifiedValue2;\n  int inputValue;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffffef;\n  modifiedValue2 = *(uint *)(dataAddress + 4);\n  inputValue = *dataArray;\n  modifiedValue1 = *(uint *)(dataAddress + 0x20) & 0xffffffdf | dataArray[2] << 4;\n  if (dataAddress == 0x40012c00) {\n    modifiedValue1 = (modifiedValue1 & 0xffffff7f | dataArray[3] << 4) & 0xffffffbf;\n    modifiedValue2 = modifiedValue2 & 0xfffff3ff | (dataArray[5] | dataArray[6]) << 2;\n  }\n  *(uint *)(dataAddress + 4) = modifiedValue2;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(dataAddress + 0x38) = dataArray[1];\n  *(uint *)(dataAddress + 0x20) = modifiedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_data_08002404",
                "param_1": "dataAddress",
                "param_2": "dataArray",
                "uVar1": "modifiedValue1",
                "uVar2": "modifiedValue2",
                "iVar3": "inputValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_params_0800245c",
            "code": "\nvoid updateParams_0800245c(int *paramArray,undefined4 param2,undefined4 param3)\n\n{\n  int extraOut1;\n  int extraOut2;\n  int extraOut3;\n  int extraOut4;\n  int tempVar1;\n  uint updatedVar;\n  int tempVar3;\n  \n  if (*(char *)(paramArray + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)paramArray + 0x39) = 2;\n  *(undefined *)(paramArray + 0xe) = 1;\n  switch(param3) {\n  case 0:\n    update_params_08002280(*paramArray);\n    tempVar3 = *paramArray;\n    updatedVar = *(uint *)(extraOut1 + 0x10);\n    *(uint *)(tempVar3 + 0x18) = *(uint *)(tempVar3 + 0x18) | 8;\n    *(uint *)(tempVar3 + 0x18) = *(uint *)(tempVar3 + 0x18) & 0xfffffffb;\n    updatedVar = *(uint *)(tempVar3 + 0x18) | updatedVar;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_data_08002404(*paramArray);\n    tempVar3 = *paramArray;\n    tempVar1 = *(int *)(extraOut2 + 0x10);\n    *(uint *)(tempVar3 + 0x18) = *(uint *)(tempVar3 + 0x18) | 0x800;\n    *(uint *)(tempVar3 + 0x18) = *(uint *)(tempVar3 + 0x18) & 0xfffffbff;\n    updatedVar = *(uint *)(tempVar3 + 0x18) | tempVar1 << 8;\n    break;\n  case 8:\n    update_parameters_080022d0(*paramArray);\n    tempVar3 = *paramArray;\n    updatedVar = *(uint *)(extraOut3 + 0x10);\n    *(uint *)(tempVar3 + 0x1c) = *(uint *)(tempVar3 + 0x1c) | 8;\n    *(uint *)(tempVar3 + 0x1c) = *(uint *)(tempVar3 + 0x1c) & 0xfffffffb;\n    updatedVar = *(uint *)(tempVar3 + 0x1c) | updatedVar;\n    goto LAB_080024fa;\n  case 0xc:\n    update_settings_08002324(*paramArray);\n    tempVar3 = *paramArray;\n    tempVar1 = *(int *)(extraOut4 + 0x10);\n    *(uint *)(tempVar3 + 0x1c) = *(uint *)(tempVar3 + 0x1c) | 0x800;\n    *(uint *)(tempVar3 + 0x1c) = *(uint *)(tempVar3 + 0x1c) & 0xfffffbff;\n    updatedVar = *(uint *)(tempVar3 + 0x1c) | tempVar1 << 8;\nLAB_080024fa:\n    *(uint *)(tempVar3 + 0x1c) = updatedVar;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(tempVar3 + 0x18) = updatedVar;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)paramArray + 0x39) = 1;\n  *(undefined *)(paramArray + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_params_0800245c",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "extraout_r1": "extraOut1",
                "extraout_r1_00": "extraOut2",
                "extraout_r1_01": "extraOut3",
                "extraout_r1_02": "extraOut4",
                "iVar1": "tempVar1",
                "uVar2": "updatedVar",
                "iVar3": "tempVar3"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bitwise_and_shift_08002520",
            "code": "\nvoid updateBitwiseAndShift_08002520(int ptr,uint mask,int value)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & ~(1 << (mask & 0xff));\n  *(uint *)(ptr + 0x20) = value << (mask & 0xff) | *(uint *)(ptr + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bitwise_and_shift_08002520",
                "param_1": "ptr",
                "param_2": "mask",
                "param_3": "value"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "set_flag_and_update_value_08002538",
            "code": "\nundefined4 setFlagAndUpdateValue_08002538(uint **ptr_to_data,undefined4 input_value)\n\n{\n  uint flag_value;\n  uint *ptr_to_data_value;\n  \n  update_bitwise_and_shift_08002520(*ptr_to_data,input_value,1);\n  ptr_to_data_value = *ptr_to_data;\n  flag_value = 0x40012c00;\n  if (ptr_to_data_value == (uint *)0x40012c00) {\n    flag_value = uRam40012c44 | 0x8000;\n  }\n  if (ptr_to_data_value == (uint *)0x40012c00) {\n    ptr_to_data_value[0x11] = flag_value;\n  }\n  *ptr_to_data_value = *ptr_to_data_value | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "set_flag_and_update_value_08002538",
                "param_1": "ptr_to_data",
                "param_2": "input_value",
                "uVar1": "flag_value",
                "puVar2": "ptr_to_data_value"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "validate_and_set_value_08002564",
            "code": "\nundefined4 validate_and_set_value_08002564(int *input_array,uint *bitmask_array)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    *(undefined *)((int)input_array + 0x39) = 2;\n    *(uint *)(*input_array + 0x44) =\n         *bitmask_array | bitmask_value2 | bitmask_value3 | bitmask_value4 | bitmask_value5 | bitmask_value6 | bitmask_value7;\n    *(undefined *)((int)input_array + 0x39) = 1;\n    result = 0;\n    *(undefined *)(input_array + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "validate_and_set_value_08002564",
                "param_1": "input_array",
                "param_2": "bitmask_array",
                "uVar1": "result",
                "param_2[1]": "bitmask_value2",
                "param_2[2]": "bitmask_value3",
                "param_2[3]": "bitmask_value4",
                "param_2[4]": "bitmask_value5",
                "param_2[5]": "bitmask_value6",
                "param_2[6]": "bitmask_value7"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "validate_and_update_values_080025a4",
            "code": "\nundefined4 validate_and_update_values_080025a4(int *pointer1,uint *pointer2)\n\n{\n  uint value1;\n  undefined4 result;\n  int value2;\n  uint value3;\n  \n  result = 2;\n  if (*(char *)(pointer1 + 0xe) != '\\x01') {\n    *(undefined *)((int)pointer1 + 0x39) = 2;\n    value2 = *pointer1;\n    value3 = *pointer2;\n    value1 = pointer2[1];\n    *(uint *)(value2 + 4) = *(uint *)(value2 + 4) & 0xffffff8f;\n    *(uint *)(value2 + 4) = *(uint *)(value2 + 4) | value3;\n    *(uint *)(value2 + 8) = *(uint *)(value2 + 8) & 0xffffff7f;\n    *(uint *)(value2 + 8) = *(uint *)(value2 + 8) | value1;\n    *(undefined *)((int)pointer1 + 0x39) = 1;\n    result = 0;\n    *(undefined *)(pointer1 + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "validate_and_update_values_080025a4",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "uVar1": "value1",
                "uVar2": "result",
                "iVar3": "value2",
                "uVar4": "value3"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid updateValues_080025e8(int *inputArray)\n\n{\n  int temp1;\n  int temp2;\n  uint temp3;\n  int temp4;\n  int temp5;\n  int ptr;\n  \n  ptr = *inputArray;\n  temp3 = inputArray[4];\n  *(uint *)(ptr + 0x10) = *(uint *)(ptr + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(ptr + 0xc) = inputArray[2] | temp3 | inputArray[5] | *(uint *)(ptr + 0xc) & 0xffffe9f3;\n  *(uint *)(ptr + 0x14) = *(uint *)(ptr + 0x14) & 0xfffffcff | inputArray[6];\n  if (ptr == 0x40013800) {\n    temp1 = get_shifted_value_08002250();\n    temp4 = (int)(((ulonglong)(uint)(temp1 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100);\n    temp1 = get_shifted_value_08002250();\n    temp5 = inputArray[1];\n    temp2 = get_shifted_value_08002250();\n    temp2 = (uint)(temp1 * 0x19) / (uint)(temp5 << 2) +\n            (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100) *\n            -100;\n    temp1 = get_shifted_value_08002250();\n    temp3 = (uint)(temp1 * 0x19) / (uint)(inputArray[1] << 2);\n    temp1 = get_shifted_value_08002250();\n  }\n  else {\n    temp1 = get_shifted_value_08002220();\n    temp4 = (int)(((ulonglong)(uint)(temp1 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100);\n    temp1 = get_shifted_value_08002220();\n    temp5 = inputArray[1];\n    temp2 = get_shifted_value_08002220();\n    temp2 = (uint)(temp1 * 0x19) / (uint)(temp5 << 2) +\n            (int)(((ulonglong)(uint)(temp2 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100) *\n            -100;\n    temp1 = get_shifted_value_08002220();\n    temp3 = (uint)(temp1 * 0x19) / (uint)(inputArray[1] << 2);\n    temp1 = get_shifted_value_08002220();\n  }\n  *(uint *)(ptr + 8) =\n       (((temp3 + (int)(((ulonglong)(uint)(temp1 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (temp2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       temp4 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "inputArray",
                "iVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "temp4",
                "iVar5": "temp5",
                "iVar6": "ptr"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "update_register_values_08002724",
            "code": "\nundefined4 update_register_values_08002724(int *register_values_ptr)\n\n{\n  int register_values;\n  \n  if (register_values_ptr != (int *)0x0) {\n    if (*(char *)((int)register_values_ptr + 0x39) == '\\0') {\n      *(undefined *)(register_values_ptr + 0xe) = 0;\n      update_registers();\n    }\n    *(undefined *)((int)register_values_ptr + 0x39) = 2;\n    *(uint *)(*register_values_ptr + 0xc) = *(uint *)(*register_values_ptr + 0xc) & 0xffffdfff;\n    update_values(register_values_ptr);\n    register_values = *register_values_ptr;\n    *(uint *)(register_values + 0x10) = *(uint *)(register_values + 0x10) & 0xffffb7ff;\n    *(uint *)(register_values + 0x14) = *(uint *)(register_values + 0x14) & 0xffffffd5;\n    *(uint *)(register_values + 0xc) = *(uint *)(register_values + 0xc) | 0x2000;\n    register_values_ptr[0xf] = 0;\n    *(undefined *)((int)register_values_ptr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "update_register_values_08002724",
                "param_1": "register_values_ptr",
                "iVar1": "register_values",
                "update_register_values_08004e7c": "update_registers",
                "update_values_080025e8": "update_values"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "modify_and_check_data_0800290c",
            "code": "\nundefined4 modifyAndCheckData_0800290c(int *dataPtr)\n\n{\n  byte byteVar;\n  int intVar;\n  uint uintVar;\n  undefined4 undefinedVar;\n  short shortVar;\n  ushort *ushortPtr1;\n  ushort *ushortPtr2;\n  bool boolVar;\n  \n  if ((*(byte *)((int)dataPtr + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  intVar = *dataPtr;\n  ushortPtr1 = (ushort *)dataPtr[10];\n  if (dataPtr[2] == 0x1000) {\n    if (dataPtr[4] == 0) {\n      ushortPtr2 = ushortPtr1 + 1;\n      *ushortPtr1 = (ushort)((uint)(*(int *)(intVar + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ushortPtr2 = (ushort *)((int)ushortPtr1 + 1);\n      *ushortPtr1 = (ushort)*(int *)(intVar + 4) & 0xff;\n    }\n    dataPtr[10] = (int)ushortPtr2;\n  }\n  else {\n    if (dataPtr[4] == 0) {\n      byteVar = (byte)*(undefined4 *)(intVar + 4);\n      dataPtr[10] = (int)ushortPtr1 + 1;\n    }\n    else {\n      undefinedVar = *(undefined4 *)(intVar + 4);\n      dataPtr[10] = (int)ushortPtr1 + 1;\n      byteVar = (byte)undefinedVar & 0x7f;\n    }\n    *(byte *)ushortPtr1 = byteVar;\n  }\n  shortVar = *(short *)((int)dataPtr + 0x2e) + -1;\n  *(short *)((int)dataPtr + 0x2e) = shortVar;\n  if (shortVar == 0) {\n    intVar = *dataPtr;\n    *(uint *)(intVar + 0xc) = *(uint *)(intVar + 0xc) & 0xffffffdf;\n    boolVar = *(char *)((int)dataPtr + 0x39) != '2';\n    if (boolVar) {\n      uintVar = *(uint *)(intVar + 0xc) & 0xfffffeff;\n    }\n    else {\n      intVar = 0x12;\n      uintVar = 0x32;\n    }\n    if (boolVar) {\n      *(uint *)(intVar + 0xc) = uintVar;\n      uintVar = *(uint *)(intVar + 0x14) & 0xfffffffe;\n    }\n    if (boolVar) {\n      *(uint *)(intVar + 0x14) = uintVar;\n      intVar = 1;\n    }\n    *(char *)((int)dataPtr + 0x39) = (char)intVar;\n    check_and_increment_value_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "modify_and_check_data_0800290c",
                "param_1": "dataPtr",
                "bVar1": "byteVar",
                "iVar2": "intVar",
                "uVar3": "uintVar",
                "uVar4": "undefinedVar",
                "sVar5": "shortVar",
                "puVar6": "ushortPtr1",
                "puVar7": "ushortPtr2",
                "bVar8": "boolVar"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **data)\n\n{\n  uint value1;\n  short count;\n  uint value2;\n  uint *pointer;\n  undefined flag;\n  uint *pointer1;\n  uint flag2;\n  bool flag3;\n  \n  pointer1 = *data;\n  value2 = *pointer1;\n  value1 = pointer1[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      modify_and_check_data_0800290c();\n      return;\n    }\n  }\n  else {\n    flag2 = pointer1[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      pointer1 = (uint *)(value2 << 0x1f);\n      if ((int)pointer1 < 0) {\n        flag3 = (int)(value1 << 0x17) < 0;\n        if (flag3) {\n          pointer1 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (flag3) {\n          data[0xf] = pointer1;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        modify_and_check_data_0800290c(data);\n      }\n      pointer1 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((pointer1[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      pointer1[3] = pointer1[3] & 0xfffffedf;\n      pointer1[5] = pointer1[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer = data[8];\n      if (data[2] == (uint *)0x1000) {\n        pointer1[1] = *(ushort *)pointer & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer = (uint *)((int)pointer + 2);\n        }\n        else {\n          pointer = (uint *)((int)pointer + 1);\n        }\n        data[8] = pointer;\n      }\n      else {\n        data[8] = (uint *)((int)pointer + 1);\n        pointer1[1] = (uint)*(byte *)pointer;\n      }\n      count = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = count;\n      if (count == 0) {\n        pointer1[3] = pointer1[3] & 0xffffff7f;\n        pointer1[3] = pointer1[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    pointer1[3] = pointer1[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "count",
                "uVar3": "value2",
                "puVar4": "pointer",
                "uVar5": "flag",
                "puVar6": "pointer1",
                "uVar7": "flag2",
                "bVar8": "flag3"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  processAndHandleDataErrors(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  processAndHandleData(0xd0,0x6b,0x80,1);\n  processAndHandleData(0xd0,0x6b,1);\n  processAndHandleData(0xd0,0x6c,0,1);\n  processAndHandleData(0xd0,0x19,0,1);\n  processAndHandleData(0xd0,0x1d,3,1);\n  processAndHandleData(0xd0,0x1a,3,1);\n  processAndHandleData(0xd0,0x1b,0x10,1);\n  processAndHandleData(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "process_and_handle_data_errors_0800407c": "processAndHandleDataErrors",
                "process_and_handle_data_0800403c": "processAndHandleData"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 leadingZerosCount;\n  uint inputValue;\n  int var1;\n  int var2;\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = 0;\n  result2 = inputValue & 0xffff0000;\n  handle_and_process_data_080040e8(0xd0,0x3b,&result1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result1._2_1_,result1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result1,result1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result2,result2._1_1_);\n  var2 = (int)DAT_200002f6;\n  var1 = (int)DAT_200002f8;\n  leadingZerosCount = count_leading_zeros_08000c44();\n  leadingZerosCount = calculate_floating_point_08000cec(leadingZerosCount,0x40800000);\n  DAT_200002d0 = calculate_floating_point_08000cec(leadingZerosCount,0x38000000);\n  leadingZerosCount = count_leading_zeros_08000c44(var2);\n  leadingZerosCount = calculate_floating_point_08000cec(leadingZerosCount,0x40800000);\n  DAT_200002d4 = calculate_floating_point_08000cec(leadingZerosCount,0x38000000);\n  leadingZerosCount = count_leading_zeros_08000c44(var1);\n  leadingZerosCount = calculate_floating_point_08000cec(leadingZerosCount,0x40800000);\n  DAT_200002d8 = calculate_floating_point_08000cec(leadingZerosCount,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputValue",
                "iVar2": "var1",
                "iVar3": "var2",
                "local_18": "result1",
                "local_14": "result2",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "process_data_08002bf0",
            "code": "\nvoid processData_08002bf0(void)\n\n{\n  undefined4 leadingZeros;\n  int int2;\n  int int1;\n  undefined4 data1;\n  undefined2 data2;\n  \n  data1 = 0;\n  data2 = 0;\n  handleAndProcessData(0xd0,0x43,&data1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(data1._2_1_,data1._3_1_);\n  DAT_200002be = CONCAT11((undefined)data1,data1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)data2,data2._1_1_);\n  int1 = (int)DAT_200002c0;\n  int2 = (int)DAT_200002c2;\n  leadingZeros = countLeadingZeros();\n  leadingZeros = calculateFloatingPoint(leadingZeros,0x447a0000);\n  leadingZeros = calculateFloatingPoint(leadingZeros,0x38000000);\n  DAT_200002c4 = calculateFloatingPoint2(leadingZeros,DAT_20000000);\n  leadingZeros = countLeadingZeros(int1);\n  leadingZeros = calculateFloatingPoint(leadingZeros,0x447a0000);\n  leadingZeros = calculateFloatingPoint(leadingZeros,0x38000000);\n  DAT_200002c8 = calculateFloatingPoint2(leadingZeros,DAT_20000004);\n  leadingZeros = countLeadingZeros(int2);\n  leadingZeros = calculateFloatingPoint(leadingZeros,0x447a0000);\n  leadingZeros = calculateFloatingPoint(leadingZeros,0x38000000);\n  DAT_200002cc = calculateFloatingPoint2(leadingZeros,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "process_data_08002bf0",
                "local_20": "data1",
                "local_1c": "data2",
                "iVar3": "int1",
                "iVar2": "int2",
                "uVar1": "leadingZeros",
                "handle_and_process_data_080040e8": "handleAndProcessData",
                "count_leading_zeros_08000c44": "countLeadingZeros",
                "calculate_floating_point_08000cec": "calculateFloatingPoint",
                "calculate_floating_point_08000ad8": "calculateFloatingPoint2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "process_mpu_data_08002cb0",
            "code": "\nvoid processMPUData_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 leadingZerosCount;\n  uint dataValue;\n  \n  dataValue = param4;\n  processAndHandleData(0xd0,0x37,0x22,1,param1,param2,param3);\n  processAndHandleData(0xd0,0x6a,1);\n  processAndHandleDataErrors(0x18,0,\"../Src/MPU9250.c\",0xad);\n  processAndHandleData(0x18,0xb,1);\n  processAndHandleData(0x18,10,0,1);\n  processAndHandleData(0x18,10,0xf,1);\n  handleAndProcessData(0x18,0x10,&dataValue,3,\"../Src/MPU9250.c\",0xb6);\n  leadingZerosCount = countLeadingZeros((dataValue & 0xff) - 0x80);\n  leadingZerosCount = calculateFloatingPointA(leadingZerosCount,0x3b800000);\n  DAT_200002e8 = calculateFloatingPointB(leadingZerosCount,0x3f800000);\n  leadingZerosCount = countLeadingZeros((dataValue >> 8 & 0xff) - 0x80);\n  leadingZerosCount = calculateFloatingPointA(leadingZerosCount,0x3b800000);\n  DAT_200002ec = calculateFloatingPointB(leadingZerosCount,0x3f800000);\n  leadingZerosCount = countLeadingZeros((dataValue >> 0x10 & 0xff) - 0x80);\n  leadingZerosCount = calculateFloatingPointA(leadingZerosCount,0x3b800000);\n  DAT_200002f0 = calculateFloatingPointB(leadingZerosCount,0x3f800000);\n  processAndHandleData(0x18,10,0,1);\n  processAndHandleData(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "process_mpu_data_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "leadingZerosCount",
                "local_c": "dataValue",
                "process_and_handle_data_0800403c": "processAndHandleData",
                "process_and_handle_data_errors_0800407c": "processAndHandleDataErrors",
                "handle_and_process_data_080040e8": "handleAndProcessData",
                "count_leading_zeros_08000c44": "countLeadingZeros",
                "calculate_floating_point_08000cec": "calculateFloatingPointA",
                "calculate_floating_point_08000adc": "calculateFloatingPointB"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_mpu_data_08002d88",
            "code": "\nvoid processMpuData_08002d88(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4)\n\n{\n  int result;\n  undefined4 floatingPoint1;\n  undefined4 floatingPoint2;\n  int integerValue;\n  undefined2 errorCode;\n  undefined stackVar1;\n  undefined stackVar2;\n  undefined var1;\n  undefined var2;\n  byte byteVar;\n  undefined flagVar;\n  \n  flagVar = (undefined)((uint)data4 >> 0x18);\n  errorCode = 0;\n  stackVar1 = 0;\n  stackVar2 = 0;\n  var1 = 0;\n  var2 = 0;\n  byteVar = 0;\n  result = process_and_handle_data_errors_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,data1,data2);\n  if (result << 0x1f < 0) {\n    handle_and_process_data_080040e8(0x18,3,&errorCode,7,\"../Src/MPU9250.c\",0xda);\n    floatingPoint2 = DAT_2000001c;\n    if ((int)((uint)byteVar << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(stackVar2,stackVar1);\n      DAT_200002bc = CONCAT11(var2,var1);\n      integerValue = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = errorCode;\n      floatingPoint1 = count_leading_zeros_08000c44();\n      floatingPoint1 = calculate_floating_point_08000cec(floatingPoint1,floatingPoint2);\n      floatingPoint1 = calculate_floating_point_08000cec(floatingPoint1,DAT_200002e8);\n      floatingPoint1 = calculate_floating_point_08000ad8(floatingPoint1,DAT_20000020);\n      DAT_200002dc = calculate_floating_point_08000cec(floatingPoint1,DAT_2000002c);\n      floatingPoint1 = count_leading_zeros_08000c44(integerValue);\n      floatingPoint1 = calculate_floating_point_08000cec(floatingPoint1,floatingPoint2);\n      floatingPoint1 = calculate_floating_point_08000cec(floatingPoint1,DAT_200002ec);\n      floatingPoint1 = calculate_floating_point_08000ad8(floatingPoint1,DAT_20000024);\n      DAT_200002e0 = calculate_floating_point_08000cec(floatingPoint1,DAT_20000030);\n      floatingPoint1 = count_leading_zeros_08000c44(result);\n      floatingPoint2 = calculate_floating_point_08000cec(floatingPoint1,floatingPoint2);\n      floatingPoint2 = calculate_floating_point_08000cec(floatingPoint2,DAT_200002f0);\n      floatingPoint2 = calculate_floating_point_08000ad8(floatingPoint2,DAT_20000028);\n      DAT_200002e4 = calculate_floating_point_08000cec(floatingPoint2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_mpu_data_08002d88",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "result",
                "uVar2": "floatingPoint1",
                "uVar3": "floatingPoint2",
                "iVar4": "integerValue",
                "local_28": "errorCode",
                "uStack_26": "stackVar1",
                "uStack_25": "stackVar2",
                "local_24": "var1",
                "local_23": "var2",
                "local_22": "byteVar",
                "uStack_21": "flagVar"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_mpu_system_08002ea0",
            "code": "\nvoid initialize_mpu_system_08002ea0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 returnValue;\n  \n  initialize_mpu9250();\n  process_mpu_data();\n  initialize_some_variable(0x3f19999a);\n  initialize_global_variable(0,returnValue,param_3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_mpu_system_08002ea0",
                "extraout_r1": "returnValue",
                "initialize_mpu9250_08002ad0": "initialize_mpu9250",
                "process_mpu_data_08002cb0": "process_mpu_data",
                "initialize_variable_08003314": "initialize_some_variable",
                "initialize_global_variable_08003320": "initialize_global_variable"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_result_08002ec0",
            "code": "\nvoid calculateResult_08002ec0(void)\n\n{\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 input3;\n  \n  input2 = DAT_2000024c;\n  input3 = DAT_20000010;\n  input1 = calculate_floating_point_08000ad8(0x3f800000,DAT_20000010);\n  input2 = calculate_floating_point_08000cec(input1,input2);\n  input3 = calculate_floating_point_08000cec(input3,DAT_2000000c);\n  DAT_2000000c = calculate_floating_point_08000adc(input3,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_result_08002ec0",
                "uVar1": "input1",
                "uVar2": "input2",
                "uVar3": "input3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_and_store_value_08002ed4",
            "code": "\nvoid calculateAndStoreValue_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 constantValue1;\n  undefined4 constantValue2;\n  \n  constantValue1 = DAT_20000248;\n  constantValue2 = uRam20000018;\n  result1 = FUN_08000ad8(0x3f800000,uRam20000018);\n  constantValue1 = FUN_08000cec(result1,constantValue1);\n  constantValue2 = FUN_08000cec(constantValue2,uRam20000014);\n  uRam20000014 = FUN_08000adc(constantValue2,constantValue1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_and_store_value_08002ed4",
                "uVar1": "result1",
                "uVar2": "constantValue1",
                "uVar3": "constantValue2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "process_concatenation_08002ee8",
            "code": "\nvoid processConcatenation_08002ee8(void)\n\n{\n  undefined4 originalValue;\n  int concatenationResult;\n  \n  originalValue = DAT_20000250;\n  concatenationResult = checkConcatenation1(DAT_20000250,0xc3340000);\n  if ((concatenationResult != 0) && (concatenationResult = checkConcatenation2(originalValue,0x42b40000), concatenationResult != 0)) {\n    calculateFloat1(originalValue,0x42b40000);\n    return;\n  }\n  calculateFloat2(originalValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "process_concatenation_08002ee8",
                "uVar1": "originalValue",
                "iVar2": "concatenationResult",
                "check_concatenation_result_08001050": "checkConcatenation1",
                "check_concatenation_result_08001028": "checkConcatenation2",
                "calculate_floating_point_08000adc": "calculateFloat1",
                "calculate_floating_point_08000ad8": "calculateFloat2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "process_sensor_data_08002f28",
            "code": "\n\n\nvoid process_sensor_data_08002f28(void)\n\n{\n  undefined4 uVar1;\n  \n  initialize_mpu9250_08002b48();\n  process_data_08002bf0();\n  process_mpu_data_08002d88();\n  DAT_20000258 = thunk_get_data_0800115c();\n  uVar1 = calculate_result_08000c3c(DAT_20000258 - DAT_20000254);\n  calculate_floating_point_08000e54(uVar1,0x447a0000);\n  initialize_global_variable_08003320();\n  DAT_20000254 = DAT_20000258;\n  calculate_values_and_store_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  uVar1 = calculate_and_store_value_08002ed4();\n  calculate_floating_point_08000cec(uVar1,0x41200000);\n  DAT_20001395._0_2_ = convert_to_signed_integer_08001078();\n  uVar1 = calculate_result_08002ec0();\n  calculate_floating_point_08000cec(uVar1,0x41200000);\n  DAT_20001395._2_2_ = convert_to_signed_integer_08001078();\n  process_concatenation_08002ee8();\n  DAT_20001399 = convert_to_signed_integer_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "process_sensor_data_08002f28"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "process_and_handle_data_08003034",
            "code": "\nuint process_and_handle_data_08003034(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 output_value;\n  \n  output_value = input_param_4;\n  process_and_handle_data_08003034_080040b8(0xee,0,&output_value,3,\"../Src/MS5611.c\",0x8c,input_param_3);\n  return (uint)CONCAT12((undefined)output_value,CONCAT11(output_value._1_1_,output_value._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "process_and_handle_data_08003034",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "local_c": "output_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initializeSensorData_08003298(void)\n\n{\n  int counter;\n  undefined lowerByte;\n  undefined upperByte;\n  \n  counter = 0;\n  process_and_handle_data_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    lowerByte = 0;\n    upperByte = 0;\n    handle_and_process_data_080040e8(0xee,counter + 0xa0U & 0xffff,&lowerByte,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + counter) = CONCAT11(lowerByte,upperByte);\n    counter = counter + 2;\n  } while (counter != 0x10);\n  counter = 0;\n  do {\n    (&DAT_20000300)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "iVar1": "counter",
                "local_1c": "lowerByte",
                "local_1b": "upperByte"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_variable_08003314",
            "code": "\nvoid initializeVariable_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_variable_08003314",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_global_variable_08003320",
            "code": "\nvoid initializeGlobalVariable_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_global_variable_08003320",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_values_and_store_08003330",
            "code": "\nvoid calculate_values_and_store_08003330(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined4 input9,undefined4 *output_params)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int check_result;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  int result8;\n  undefined4 result9;\n  undefined4 result10;\n  undefined4 result11;\n  undefined4 result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined4 result16;\n  undefined4 result17;\n  undefined4 result18;\n  int result19;\n  undefined4 result20;\n  undefined4 result21;\n  undefined4 result22;\n  undefined4 result23;\n  undefined4 result24;\n  undefined4 result25;\n  int result26;\n  undefined4 result27;\n  undefined4 result28;\n  undefined4 result29;\n  int result30;\n  undefined8 calculate_result1;\n  undefined8 calculate_result2;\n  \n  result29 = DAT_20000048;\n  result28 = DAT_20000044;\n  result30 = DAT_20000040;\n  result27 = DAT_2000003c;\n  result1 = calculate_floating_point_08000cec(input1,input1);\n  result2 = calculate_floating_point_08000cec(input2);\n  result1 = calculate_floating_point_08000adc(result1,result2);\n  result2 = calculate_floating_point_08000cec(input3);\n  calculate_floating_point_08000adc(result1,result2);\n  bitwise_operation_08000428();\n  calculate_and_get_default_value_08005bc8();\n  result1 = calculate_value_08000a30();\n  check_result = check_concatenated_params_08001014(result1,0);\n  if (check_result == 0) {\n    result2 = calculate_floating_point_08000cec(input7);\n    result4 = calculate_floating_point_08000cec(input8);\n    result2 = calculate_floating_point_08000adc(result2,result4);\n    result4 = calculate_floating_point_08000cec(input9);\n    calculate_floating_point_08000adc(result2,result4);\n    bitwise_operation_08000428();\n    calculate_and_get_default_value_08005bc8();\n    result2 = calculate_value_08000a30();\n    check_result = check_concatenated_params_08001014(result2,0);\n    if (check_result == 0) {\n      calculate_result1 = bitwise_operation_08000428(input4);\n      calculate_result_080004d0((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0xa2529d39,0x3f91df46);\n      result4 = calculate_value_08000a30();\n      calculate_result1 = bitwise_operation_08000428(input5);\n      calculate_result_080004d0((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0xa2529d39,0x3f91df46);\n      result5 = calculate_value_08000a30();\n      calculate_result1 = bitwise_operation_08000428(input6);\n      calculate_result_080004d0((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0xa2529d39,0x3f91df46);\n      result6 = calculate_value_08000a30();\n      check_result = calculate_floating_point_08000adc(result27);\n      result7 = calculate_floating_point_08000adc(result30);\n      result8 = calculate_floating_point_08000adc(result28,result28);\n      result9 = calculate_floating_point_08000adc(result29,result29);\n      result10 = calculate_floating_point_08000cec(result27);\n      result11 = calculate_floating_point_08000cec(result27,result30);\n      result12 = calculate_floating_point_08000cec(result27,result28);\n      result13 = calculate_floating_point_08000cec(result30);\n      result14 = calculate_floating_point_08000cec(result30,result29);\n      result15 = calculate_floating_point_08000cec(result28,result28);\n      result16 = calculate_floating_point_08000cec(result29,result29);\n      result1 = calculate_floating_point_08000e54(0x3f800000,result1);\n      result2 = calculate_floating_point_08000e54(0x3f800000,result2);\n      result17 = calculate_floating_point_08000cec(input7,result2);\n      result18 = calculate_floating_point_08000cec(input8,result2);\n      result2 = calculate_floating_point_08000cec(input9,result2);\n      result19 = calculate_floating_point_08000cec(check_result,result17);\n      result20 = calculate_floating_point_08000cec(check_result,result18);\n      result21 = calculate_floating_point_08000cec(check_result,result2);\n      result22 = calculate_floating_point_08000cec(result7,result17);\n      result23 = calculate_floating_point_08000cec(result10,result17);\n      result24 = calculate_floating_point_08000cec(result29,result20);\n      result23 = calculate_floating_point_08000ad8(result23,result24);\n      result24 = calculate_floating_point_08000cec(result28,result21);\n      result23 = calculate_floating_point_08000adc(result23,result24);\n      result24 = calculate_floating_point_08000cec(result13,result17);\n      result23 = calculate_floating_point_08000adc(result23,result24);\n      result24 = calculate_floating_point_08000cec(result7,result18);\n      result24 = calculate_floating_point_08000cec(result24,result28);\n      result23 = calculate_floating_point_08000adc(result23,result24);\n      result24 = calculate_floating_point_08000cec(result7,result2);\n      result24 = calculate_floating_point_08000cec(result24,result29);\n      result23 = calculate_floating_point_08000adc(result23,result24);\n      result24 = calculate_floating_point_08000cec(result15,result17);\n      result23 = calculate_floating_point_08000ad8(result23,result24);\n      result24 = calculate_floating_point_08000cec(result16,result17);\n      result23 = calculate_floating_point_08000ad8(result23,result24);\n      result24 = calculate_floating_point_08000cec(result29,result19);\n      result25 = calculate_floating_point_08000cec(result10,result18);\n      result24 = calculate_floating_point_08000adc(result24,result25);\n      result21 = calculate_floating_point_08000cec(result30,result21);\n      result21 = calculate_floating_point_08000ad8(result24,result21);\n      result24 = calculate_floating_point_08000cec(result28,result22);\n      result21 = calculate_floating_point_08000adc(result21,result24);\n      result24 = calculate_floating_point_08000cec(result13,result18);\n      result21 = calculate_floating_point_08000ad8(result21,result24);\n      result24 = calculate_floating_point_08000cec(result15,result18);\n      result21 = calculate_floating_point_08000adc(result21,result24);\n      result24 = calculate_floating_point_08000cec(result8,result2);\n      result24 = calculate_floating_point_08000cec(result24,result29);\n      result21 = calculate_floating_point_08000adc(result21,result24);\n      result24 = calculate_floating_point_08000cec(result16,result18);\n      result21 = calculate_floating_point_08000ad8(result21,result24);\n      result23 = calculate_floating_point_08000cec(result23,result23);\n      result21 = calculate_floating_point_08000cec(result21,result21);\n      calculate_floating_point_08000adc(result23,result21);\n      bitwise_operation_08000428();\n      calculate_and_get_default_value_08005bc8();\n      result26 = calculate_value_08000a30();\n      result21 = calculate_floating_point_08000cec(result19 + -0x80000000,result28);\n      result20 = calculate_floating_point_08000cec(result30,result20);\n      result20 = calculate_floating_point_08000adc(result21,result20);\n      result10 = calculate_floating_point_08000cec(result10,result2);\n      result10 = calculate_floating_point_08000adc(result20,result10);\n      result20 = calculate_floating_point_08000cec(result29,result22);\n      result10 = calculate_floating_point_08000adc(result10,result20);\n      result20 = calculate_floating_point_08000cec(result13,result2);\n      result10 = calculate_floating_point_08000ad8(result10,result20);\n      result20 = calculate_floating_point_08000cec(result8,result18);\n      result20 = calculate_floating_point_08000cec(result20,result29);\n      result10 = calculate_floating_point_08000adc(result10,result20);\n      result20 = calculate_floating_point_08000cec(result15,result2);\n      result10 = calculate_floating_point_08000ad8(result10,result20);\n      result20 = calculate_floating_point_08000cec(result16,result2);\n      result10 = calculate_floating_point_08000adc(result10,result20);\n      result20 = calculate_floating_point_08000adc(result10,result10);\n      result21 = calculate_floating_point_08000adc(result14);\n      result22 = calculate_floating_point_08000cec(result28,check_result);\n      result21 = calculate_floating_point_08000ad8(result21,result22);\n      result22 = calculate_floating_point_08000cec(input1,result1);\n      result21 = calculate_floating_point_08000ad8(result21,result22);\n      result22 = calculate_floating_point_08000cec(result29,result8);\n      result23 = calculate_floating_point_08000adc(result11);\n      result22 = calculate_floating_point_08000adc(result22,result23);\n      result23 = calculate_floating_point_08000cec(input2,result1);\n      result22 = calculate_floating_point_08000ad8(result22,result23);\n      result23 = calculate_floating_point_08000cec(result28,result10);\n      result24 = calculate_floating_point_08000ad8(0x3f000000,result15);\n      result16 = calculate_floating_point_08000ad8(result24,result16);\n      result16 = calculate_floating_point_08000cec(result16,result26);\n      result24 = calculate_floating_point_08000ad8(result14,result12);\n      result24 = calculate_floating_point_08000cec(result24,result10);\n      result16 = calculate_floating_point_08000adc(result16,result24);\n      result16 = calculate_floating_point_08000ad8(result16,result17);\n      result17 = calculate_floating_point_08000cec(result30,result10);\n      result24 = calculate_floating_point_08000cec(result30,result28);\n      result25 = calculate_floating_point_08000cec(result27,result29);\n      result24 = calculate_floating_point_08000ad8(result24,result25);\n      result24 = calculate_floating_point_08000cec(result24,result26);\n      result25 = calculate_floating_point_08000cec(result28,result29);\n      result11 = calculate_floating_point_08000adc(result25,result11);\n      result11 = calculate_floating_point_08000cec(result11,result10);\n      result11 = calculate_floating_point_08000adc(result24,result11);\n      result11 = calculate_floating_point_08000ad8(result11,result18);\n      result18 = calculate_floating_point_08000cec(result28,result26);\n      result24 = calculate_floating_point_08000ad8(0x3f000000,result13);\n      result24 = calculate_floating_point_08000ad8(result24,result15);\n      result24 = calculate_floating_point_08000cec(result24,result10);\n      result12 = calculate_floating_point_08000adc(result12,result14);\n      result12 = calculate_floating_point_08000cec(result12,result26);\n      result12 = calculate_floating_point_08000adc(result24,result12);\n      result2 = calculate_floating_point_08000ad8(result12,result2);\n      result12 = calculate_floating_point_08000cec(result8 + -0x80000000,result21);\n      result14 = calculate_floating_point_08000cec(result7,result22);\n      result12 = calculate_floating_point_08000adc(result12,result14);\n      result14 = calculate_floating_point_08000cec(result23,result16);\n      result12 = calculate_floating_point_08000ad8(result12,result14);\n      result14 = calculate_floating_point_08000cec(result29,result26 + -0x80000000);\n      result14 = calculate_floating_point_08000adc(result14,result17);\n      result14 = calculate_floating_point_08000cec(result14,result11);\n      result12 = calculate_floating_point_08000adc(result12,result14);\n      result14 = calculate_floating_point_08000cec(result18,result2);\n      result12 = calculate_floating_point_08000adc(result12,result14);\n      result13 = calculate_floating_point_08000adc(result13);\n      result13 = calculate_floating_point_08000ad8(0x3f800000,result13);\n      result14 = calculate_floating_point_08000adc(result15);\n      result13 = calculate_floating_point_08000ad8(result13,result14);\n      result1 = calculate_floating_point_08000cec(input3,result1);\n      result1 = calculate_floating_point_08000ad8(result13,result1);\n      result13 = calculate_floating_point_08000cec(result29,result10);\n      result10 = calculate_floating_point_08000cec(result27,result10);\n      result14 = calculate_floating_point_08000cec(result9,result21);\n      result15 = calculate_floating_point_08000cec(check_result,result22);\n      result14 = calculate_floating_point_08000adc(result14,result15);\n      result15 = calculate_floating_point_08000cec(result30,0x40800000);\n      result15 = calculate_floating_point_08000cec(result15,result1);\n      result14 = calculate_floating_point_08000ad8(result14,result15);\n      result15 = calculate_floating_point_08000cec(result16,result13);\n      result14 = calculate_floating_point_08000adc(result14,result15);\n      result15 = calculate_floating_point_08000adc(result18,result10);\n      result15 = calculate_floating_point_08000cec(result15,result11);\n      result14 = calculate_floating_point_08000adc(result14,result15);\n      result15 = calculate_floating_point_08000cec(result29,result26);\n      result18 = calculate_floating_point_08000cec(result30,result20);\n      result15 = calculate_floating_point_08000ad8(result15,result18);\n      result15 = calculate_floating_point_08000cec(result15,result2);\n      result14 = calculate_floating_point_08000adc(result14,result15);\n      result19 = calculate_floating_point_08000adc(result26,result26);\n      result15 = calculate_floating_point_08000cec(result30,result26);\n      result18 = calculate_floating_point_08000cec(check_result + -0x80000000,result21);\n      result9 = calculate_floating_point_08000cec(result9,result22);\n      result9 = calculate_floating_point_08000adc(result18,result9);\n      result18 = calculate_floating_point_08000cec(result28,0x40800000);\n      result1 = calculate_floating_point_08000cec(result18,result1);\n      result1 = calculate_floating_point_08000ad8(result9,result1);\n      result9 = calculate_floating_point_08000cec(result28,result19 + -0x80000000);\n      result9 = calculate_floating_point_08000ad8(result9,result10);\n      result9 = calculate_floating_point_08000cec(result9,result16);\n      result1 = calculate_floating_point_08000adc(result1,result9);\n      result9 = calculate_floating_point_08000adc(result13,result15);\n      result9 = calculate_floating_point_08000cec(result9,result11);\n      result1 = calculate_floating_point_08000adc(result1,result9);\n      result9 = calculate_floating_point_08000cec(result27,result26);\n      result10 = calculate_floating_point_08000cec(result28,result20);\n      result9 = calculate_floating_point_08000ad8(result9,result10);\n      result9 = calculate_floating_point_08000cec(result9,result2);\n      result9 = calculate_floating_point_08000adc(result1,result9);\n      result1 = calculate_floating_point_08000cec(result7,result21);\n      result7 = calculate_floating_point_08000cec(result8,result22);\n      result1 = calculate_floating_point_08000adc(result1,result7);\n      result7 = calculate_floating_point_08000cec(result29,result19 + -0x80000000);\n      result7 = calculate_floating_point_08000adc(result7,result17);\n      result7 = calculate_floating_point_08000cec(result7,result16);\n      result1 = calculate_floating_point_08000adc(result1,result7);\n      result7 = calculate_floating_point_08000cec(result27,result26 + -0x80000000);\n      result7 = calculate_floating_point_08000adc(result7,result23);\n      result7 = calculate_floating_point_08000cec(result7,result11);\n      result1 = calculate_floating_point_08000adc(result1,result7);\n      result2 = calculate_floating_point_08000cec(result2,result15);\n      result7 = calculate_floating_point_08000adc(result1,result2);\n      result1 = calculate_floating_point_08000cec(result12);\n      result2 = calculate_floating_point_08000cec(result14);\n      result1 = calculate_floating_point_08000adc(result1,result2);\n      result2 = calculate_floating_point_08000cec(result9,result9);\n      result1 = calculate_floating_point_08000adc(result1,result2);\n      result2 = calculate_floating_point_08000cec(result7,result7);\n      calculate_floating_point_08000adc(result1,result2);\n      bitwise_operation_08000428();\n      calculate_and_get_default_value_08005bc8();\n      result1 = calculate_value_08000a30();\n      result10 = calculate_floating_point_08000e54(0x3f800000,result1);\n      result1 = DAT_2000035c;\n      result2 = calculate_floating_point_08000cec(result30 + -0x80000000,result4);\n      result11 = calculate_floating_point_08000cec(result28,result5);\n      result2 = calculate_floating_point_08000ad8(result2,result11);\n      result11 = calculate_floating_point_08000cec(result29,result6);\n      result2 = calculate_floating_point_08000ad8(result2,result11);\n      result11 = calculate_floating_point_08000cec(result2,0x3f000000);\n      result12 = calculate_floating_point_08000cec(result12,result10);\n      result2 = DAT_20000360;\n      result12 = calculate_floating_point_08000cec(result12,result1);\n      result11 = calculate_floating_point_08000ad8(result11,result12);\n      result2 = calculate_floating_point_08000cec(result11,result2);\n      result11 = calculate_floating_point_08000adc(result2,result27);\n      result12 = calculate_floating_point_08000cec(result27,result4);\n      result13 = calculate_floating_point_08000cec(result28,result6);\n      result2 = DAT_20000360;\n      result12 = calculate_floating_point_08000adc(result12,result13);\n      result13 = calculate_floating_point_08000cec(result29,result5);\n      result12 = calculate_floating_point_08000ad8(result12,result13);\n      result12 = calculate_floating_point_08000cec(result12,0x3f000000);\n      result13 = calculate_floating_point_08000cec(result14,result10);\n      result13 = calculate_floating_point_08000cec(result13,result1);\n      result12 = calculate_floating_point_08000ad8(result12,result13);\n      result2 = calculate_floating_point_08000cec(result12,result2);\n      result12 = calculate_floating_point_08000adc(result2,result30);\n      result2 = DAT_20000360;\n      result13 = calculate_floating_point_08000cec(result27,result5);\n      result14 = calculate_floating_point_08000cec(result30,result6);\n      result13 = calculate_floating_point_08000ad8(result13,result14);\n      result14 = calculate_floating_point_08000cec(result29,result4);\n      result13 = calculate_floating_point_08000adc(result13,result14);\n      result13 = calculate_floating_point_08000cec(result13,0x3f000000);\n      result9 = calculate_floating_point_08000cec(result9,result10);\n      result9 = calculate_floating_point_08000cec(result9,result1);\n      result9 = calculate_floating_point_08000ad8(result13,result9);\n      result2 = calculate_floating_point_08000cec(result9,result2);\n      result2 = calculate_floating_point_08000adc(result2,result28);\n      result27 = calculate_floating_point_08000cec(result27,result6);\n      result5 = calculate_floating_point_08000cec(result30,result5);\n      result27 = calculate_floating_point_08000adc(result27,result5);\n      result28 = calculate_floating_point_08000cec(result28,result4);\n      result27 = calculate_floating_point_08000ad8(result27,result28);\n      result28 = calculate_floating_point_08000cec(result27,0x3f000000);\n      result27 = calculate_floating_point_08000cec(result7,result10);\n      result1 = calculate_floating_point_08000cec(result27,result1);\n      result27 = DAT_20000360;\n      result28 = calculate_floating_point_08000ad8(result28,result1);\n      result27 = calculate_floating_point_08000cec(result28,result27);\n      result27 = calculate_floating_point_08000adc(result27,result29);\n      result28 = calculate_floating_point_08000cec(result11,result11);\n      result29 = calculate_floating_point_08000cec(result12,result12);\n      result28 = calculate_floating_point_08000adc(result28,result29);\n      result29 = calculate_floating_point_08000cec(result2,result2);\n      result28 = calculate_floating_point_08000adc(result28,result29);\n      result29 = calculate_floating_point_08000cec(result27,result27);\n      calculate_floating_point_08000adc(result28,result29);\n      bitwise_operation_08000428();\n      calculate_and_get_default_value_08005bc8();\n      result28 = calculate_value_08000a30();\n      result28 = calculate_floating_point_08000e54(0x3f800000,result28);\n      result29 = calculate_floating_point_08000cec(result11,result28);\n      DAT_2000003c = result29;\n      result30 = calculate_floating_point_08000cec(result12,result28);\n      DAT_20000040 = result30;\n      result1 = calculate_floating_point_08000cec(result2,result28);\n      DAT_20000044 = result1;\n      DAT_20000048 = calculate_floating_point_08000cec(result27,result28);\n      result27 = calculate_floating_point_08000cec(result30,DAT_20000048);\n      result28 = calculate_floating_point_08000cec(result29,result1);\n      result27 = calculate_floating_point_08000ad8(result27,result28);\n      calculate_floating_point_08000adc(result27,result27);\n      bitwise_operation_08000428();\n      calculate_result1 = calculate_and_return_result_08005854();\n      calculate_result1 = calculate_result_080004d0((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0x54442d18,0x400921fb);\n      result27 = calculate_value_08000a30();\n      *output_params = result27;\n      result30 = DAT_20000040;\n      result27 = DAT_2000003c;\n      result28 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      result29 = calculate_floating_point_08000cec(result30,result30);\n      result29 = calculate_floating_point_08000ad8(result28,result29);\n      result28 = DAT_20000044;\n      result1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result1 = calculate_floating_point_08000ad8(result29,result1);\n      result29 = DAT_20000048;\n      result2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_08000adc(result1,result2);\n      calculate_result1 = bitwise_operation_08000428();\n      result27 = calculate_floating_point_08000cec(result27,result30);\n      result28 = calculate_floating_point_08000cec(result28,result29);\n      result27 = calculate_floating_point_08000adc(result27,result28);\n      calculate_floating_point_08000adc(result27,result27);\n      calculate_result2 = bitwise_operation_08000428();\n      calculate_result1 = thunk_calculate_result_08006070((int)calculate_result2,(int)((ulonglong)calculate_result2 >> 0x20),(int)calculate_result1,\n                                  (int)((ulonglong)calculate_result1 >> 0x20));\n      calculate_result1 = calculate_result_080004d0((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0x54442d18,0x400921fb);\n      result27 = calculate_value_08000a30();\n      output_params[1] = result27;\n      result30 = DAT_20000040;\n      result27 = DAT_2000003c;\n      result28 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      result29 = calculate_floating_point_08000cec(result30,result30);\n      result29 = calculate_floating_point_08000adc(result28,result29);\n      result28 = DAT_20000044;\n      result1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      result1 = calculate_floating_point_08000ad8(result29,result1);\n      result29 = DAT_20000048;\n      result2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_08000ad8(result1,result2);\n      calculate_result1 = bitwise_operation_08000428();\n      result28 = calculate_floating_point_08000cec(result30,result28);\n      result27 = calculate_floating_point_08000cec(result27,result29);\n      result27 = calculate_floating_point_08000adc(result28,result27);\n      calculate_floating_point_08000adc(result27,result27);\n      calculate_result2 = bitwise_operation_08000428();\n      calculate_result1 = thunk_calculate_result_08006070((int)calculate_result2,(int)((ulonglong)calculate_result2 >> 0x20),(int)calculate_result1,\n                                  (int)((ulonglong)calculate_result1 >> 0x20));\n      calculate_result1 = calculate_result_080004d0((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0,0x40668000);\n      calculate_double_08000724((int)calculate_result1,(int)((ulonglong)calculate_result1 >> 0x20),0x54442d18,0x400921fb);\n      result27 = calculate_value_08000a30();\n      output_params[2] = result27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_values_and_store_08003330",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "input9",
                "param_10": "output_params",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "check_result",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "iVar8": "result8",
                "uVar9": "result9",
                "uVar10": "result10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result13",
                "uVar14": "result14",
                "uVar15": "result15",
                "uVar16": "result16",
                "uVar17": "result17",
                "uVar18": "result18",
                "iVar19": "result19",
                "uVar20": "result20",
                "uVar21": "result21",
                "uVar22": "result22",
                "uVar23": "result23",
                "uVar24": "result24",
                "uVar25": "result25",
                "iVar26": "result26",
                "uVar27": "result27",
                "uVar28": "result28",
                "uVar29": "result29",
                "iVar30": "result30",
                "uVar31": "calculate_result1",
                "uVar32": "calculate_result2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_param_or_return_value_08003eb0",
            "code": "\nlonglong shift_param_or_return_value_08003eb0(uint input_value)\n\n{\n  if (DAT_20000280 == 0) {\n    activate_interrupt(0x3f);\n    return concatenate_values(input_value,1);\n  }\n  return (ulonglong)input_value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_param_or_return_value_08003eb0",
                "param_1": "input_value",
                "software_interrupt": "activate_interrupt",
                "CONCAT44": "concatenate_values"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nundefined4 incrementAndStore_08003ec8(int baseAddress,undefined value)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = value;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_values_08003f3c",
            "code": "\nvoid setParamValues_08003f3c(int valueOne,int valueTwo,int valueThree)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,valueOne == 0);\n  set_param_value_08001424(0x40011000,0x4000,valueTwo == 0);\n  set_param_value_08001424(0x40011000,0x2000,valueThree == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "valueOne",
                "param_2": "valueTwo",
                "param_3": "valueThree"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "store_parameter_in_memory_08003fc4",
            "code": "\nvoid storeParameterInMemory_08003fc4(undefined4 inputValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "store_parameter_in_memory_08003fc4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "store_param_in_memory_08003fd0",
            "code": "\nvoid storeParamInMemory_08003fd0(undefined4 inputValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "store_param_in_memory_08003fd0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_pointer_to_parameter_08003fdc",
            "code": "\nvoid setPointerToParameter_08003fdc(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_pointer_to_parameter_08003fdc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_parameter_value_08003fe8",
            "code": "\nvoid setParameterValue_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_parameter_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "set_flags_and_update_values_08003ff4",
            "code": "\nvoid setFlagsAndUpdateValues_08003ff4(void)\n\n{\n  set_flag_and_update_value_08002538(&DAT_200015f8,4);\n  set_flag_and_update_value_08002538(&DAT_20001540,8);\n  set_flag_and_update_value_08002538(&DAT_200014c8,8);\n  set_flag_and_update_value_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "set_flags_and_update_values_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_configure_system_08004028",
            "code": "\nvoid initialize_and_configure_system_08004028(void)\n\n{\n  int counter;\n  \n  initialize_system_and_peripherals();\n  set_flags_and_update_values();\n  counter = 3;\n  do {\n    set_parameter_values(1,0);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,1);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    counter = counter + -1;\n  } while (counter != 0);\n  set_parameter_values(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_configure_system_08004028",
                "iVar1": "counter",
                "initialize_system_and_peripherals_0800458c": "initialize_system_and_peripherals",
                "set_flags_and_update_values_08003ff4": "set_flags_and_update_values",
                "set_param_values_08003f3c": "set_parameter_values"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_and_handle_data_0800403c",
            "code": "\nvoid processAndHandleData_0800403c(undefined4 dataParam1,undefined4 dataParam2,undefined inputParam,int flagParam)\n\n{\n  int result;\n  undefined localBuffer [8];\n  \n  localBuffer[0] = inputParam;\n  result = process_data_08001828(&DAT_20001504,dataParam1,dataParam2,1,localBuffer,1,200);\n  if (result != 0) {\n    continuous_error_handling_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (flagParam != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_and_handle_data_0800403c",
                "param_1": "dataParam1",
                "param_2": "dataParam2",
                "param_3": "inputParam",
                "param_4": "flagParam",
                "iVar1": "result",
                "local_14": "localBuffer"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_and_handle_data_errors_0800407c",
            "code": "\nundefined processAndHandleDataErrors_0800407c(undefined4 input_1,undefined4 input_2,undefined4 errorParam_1,undefined4 errorParam_2)\n\n{\n  int iVar1;\n  undefined returnValue [8];\n  \n  returnValue[0] = 0;\n  iVar1 = process_data_08001938(&DAT_20001504,input_1,input_2,1,returnValue,1,200);\n  if (iVar1 != 0) {\n    continuous_error_handling_08004490(errorParam_1,errorParam_2);\n  }\n  return returnValue[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_and_handle_data_errors_0800407c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "errorParam_1",
                "param_4": "errorParam_2",
                "local_14": "returnValue"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_and_handle_data_080040b8",
            "code": "\nvoid processAndHandleData_080040b8(undefined4 dataPtr,undefined4 paramPtr1,undefined4 paramPtr2,undefined4 paramPtr3,\n                 undefined4 errorPtr1,undefined4 errorPtr2)\n\n{\n  int result;\n  \n  result = process_data_08001938(&DAT_20001504,dataPtr,paramPtr1,1,paramPtr2,paramPtr3,200,paramPtr3);\n  if (result != 0) {\n    continuous_error_handling_08004490(errorPtr1,errorPtr2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_and_handle_data_080040b8",
                "param_1": "dataPtr",
                "param_2": "paramPtr1",
                "param_3": "paramPtr2",
                "param_4": "paramPtr3",
                "param_5": "errorPtr1",
                "param_6": "errorPtr2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "handle_and_process_data_080040e8",
            "code": "\nvoid handleAndProcessData_080040e8(undefined4 data,int offset,int size,int count)\n\n{\n  undefined error;\n  int index;\n  undefined *ptr;\n  int dataIndex;\n  \n  ptr = (undefined *)(size + -1);\n  dataIndex = count;\n  for (index = 0; index < count; index = index + 1) {\n    error = process_and_handle_data_errors_0800407c(data,offset + index & 0xffff,\"../Src/i2c.c\",0x4c,dataIndex);\n    ptr = ptr + 1;\n    *ptr = error;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "handle_and_process_data_080040e8",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "size",
                "param_4": "count",
                "uVar1": "error",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "dataIndex"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_sensor_data_0800411c",
            "code": "\nvoid process_sensor_data_0800411c(void)\n\n{\n  undefined4 *ptr1;\n  longlong result;\n  uint var1;\n  uint var2;\n  uint var3;\n  undefined4 float_result1;\n  undefined4 float_result2;\n  int sensor_value;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  undefined4 *ptr13;\n  undefined4 unaff_r4;\n  int temp_var1;\n  int temp_var2;\n  bool flag;\n  undefined8 bitwise_result;\n  \n  sensor_value = thunk_get_data_0800115c();\n  if (1 < (uint)(sensor_value - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_data_0800115c();\n    process_sensor_data_0800411c_08002f28();\n  }\n  sensor_value = thunk_get_data_0800115c();\n  if (2 < (uint)(sensor_value - DAT_20000294)) {\n    DAT_20000294 = thunk_get_data_0800115c();\n    initialize_and_calculate_results_08004a84();\n  }\n  sensor_value = thunk_get_data_0800115c();\n  if (3 < (uint)(sensor_value - DAT_20000290)) {\n    DAT_20000290 = thunk_get_data_0800115c();\n    initialize_data_08004348();\n    initialize_data_08004384();\n    process_string_data_080043f0();\n    process_and_display_string_08004410();\n    process_string_data_08004434();\n    copy_and_process_string_data_080043bc();\n    copy_and_process_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    temp_var2 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    uVar9 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)temp_var2) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)temp_var2) >> 0x20) << 9;\n    uVar10 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)temp_var2 >> 7);\n    uVar11 = uVar10 + (uint)DAT_20000260 * 0x10000;\n    var2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)temp_var2) >> 8);\n    sensor_value = uVar9 + 2000;\n    var3 = var2 + (uint)DAT_2000025e * 0x8000;\n    flag = (int)uVar9 < 0;\n    if (1999 < sensor_value) {\n      uVar9 = 0;\n    }\n    var1 = uVar9;\n    if (flag != SBORROW4(sensor_value,2000)) {\n      temp_var1 = uVar9 * uVar9 * 5;\n      uVar9 = temp_var1 >> 2;\n      var1 = temp_var1 >> 1;\n    }\n    uVar12 = uVar11 - var1;\n    result = (ulonglong)(var3 - uVar9) * (ulonglong)DAT_2000026c;\n    temp_var1 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)temp_var2 >> 0x28) +\n               (uint)CARRY4(var2,(uint)DAT_2000025e * 0x8000)) - ((int)uVar9 >> 0x1f)) -\n             (uint)(var3 < uVar9)) + (int)((ulonglong)result >> 0x20);\n    var2 = (uint)result >> 0x15 | temp_var1 * 0x800;\n    float_result1 = count_leading_zeros_08000c44(var2 - uVar12 >> 0xf |\n                         (((temp_var1 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)temp_var2 >> 0x27) +\n                            (uint)CARRY4(uVar10,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)var1 >> 0x1f)) - (uint)(uVar11 < var1))) - (uint)(var2 < uVar12)\n                         ) * 0x20000);\n    float_result1 = calculate_floating_point_08000e54(float_result1,0x42c80000);\n    DAT_20000354 = float_result1;\n    float_result2 = count_leading_zeros_08000c44(sensor_value);\n    DAT_20000358 = calculate_floating_point_08000e54(float_result2,0x42c80000);\n    calculate_floating_point_08000e54(float_result1,0x447d5000);\n    bitwise_result = bitwise_operation_08000428();\n    bitwise_result = improved_float_calculator_08005900((int)bitwise_result,(int)((ulonglong)bitwise_result >> 0x20),0x60000000,0x3fc85b95);\n    bitwise_result = reverse_bits_08000168(0,0x3ff00000,(int)bitwise_result,(int)((ulonglong)bitwise_result >> 0x20));\n    calculate_result_080004d0((int)bitwise_result,(int)((ulonglong)bitwise_result >> 0x20),0,0x40e5a540);\n    float_result1 = calculate_value_08000a30();\n    float_result2 = 0;\n    ptr13 = &DAT_20000300;\n    DAT_20000350 = float_result1;\n    do {\n      ptr1 = ptr13 + 1;\n      *ptr13 = *ptr1;\n      float_result2 = calculate_floating_point_08000adc(float_result2);\n      ptr13 = ptr1;\n    } while (ptr1 != &DAT_2000034c);\n    DAT_2000034c = float_result1;\n    float_result1 = calculate_floating_point_08000adc(float_result2,float_result1);\n    DAT_200002fc = calculate_floating_point_08000e54(float_result1,0x41a00000);\n    sensor_value = convert_to_signed_integer_08001078();\n    DAT_200014ab = sensor_value * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_and_handle_data_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_data_0800115c();\n  }\n  sensor_value = thunk_get_data_0800115c();\n  if (((10 < (uint)(sensor_value - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = process_and_handle_data_08003034();\n    DAT_20000275 = '\\x01';\n    process_and_handle_data_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaff_r4);\n    DAT_20000278 = thunk_get_data_0800115c();\n  }\n  sensor_value = thunk_get_data_0800115c();\n  if (((10 < (uint)(sensor_value - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = process_and_handle_data_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_sensor_data_0800411c",
                "iVar8": "sensor_value",
                "puVar1": "ptr1",
                "lVar2": "result",
                "uVar3": "var1",
                "uVar4": "var2",
                "uVar5": "var3",
                "uVar6": "float_result1",
                "uVar7": "float_result2",
                "iVar14": "temp_var1",
                "iVar15": "temp_var2",
                "bVar16": "flag",
                "uVar17": "bitwise_result"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initialize_system_08004194(void)\n\n{\n  initialize_and_configure_system();\n  initialize_settings();\n  initialize_mpu_system();\n  initialize_sensor_data();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194",
                "initialize_and_configure_system_08004028": "initialize_and_configure_system",
                "initialize_settings_08004c70": "initialize_settings",
                "initialize_mpu_system_08002ea0": "initialize_mpu_system",
                "initialize_sensor_data_08003298": "initialize_sensor_data"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "run_system_080041ae",
            "code": "\nvoid run_system_080041ae(void)\n\n{\n  shift(0);\n  initialize();\n  do {\n    increment_counter();\n    process_sensor_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "run_system_080041ae",
                "shift_param_or_return_value_08003eb0": "shift",
                "initialize_system_08004194": "initialize",
                "increment_counter_0800114c": "increment_counter",
                "process_sensor_data_0800411c": "process_sensor_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_parameters_080041c4",
            "code": "\nvoid initializeParameters_080041c4(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  \n  store_parameter_in_memory_08003fc4(0);\n  store_param_in_memory_08003fd0(0);\n  set_pointer_to_parameter_08003fdc(0);\n  set_parameter_value_08003fe8(0,result1,input3,input4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_parameters_080041c4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "extraout_r1": "result1"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_store_parameters_0800426c",
            "code": "\n\n\nvoid calculate_and_store_parameters_0800426c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint signedInt1;\n  uint signedInt2;\n  uint signedInt3;\n  uint signedInt4;\n  \n  result1 = calculate_floating_point_08000ad8();\n  result2 = calculate_floating_point_08000adc(input1,input2);\n  result3 = calculate_floating_point_08000ad8(result1,input3);\n  result3 = calculate_floating_point_08000adc(result3,input4);\n  calculate_floating_point_08000ad8(result3,0x447a0000);\n  signedInt1 = convert_to_signed_integer_08001078();\n  result3 = calculate_floating_point_08000ad8(result2,input3);\n  result3 = calculate_floating_point_08000ad8(result3,input4);\n  calculate_floating_point_08000ad8(result3,0x447a0000);\n  signedInt2 = convert_to_signed_integer_08001078();\n  result1 = calculate_floating_point_08000adc(result1,input3);\n  result1 = calculate_floating_point_08000ad8(result1,input4);\n  calculate_floating_point_08000ad8(result1,0x447a0000);\n  signedInt3 = convert_to_signed_integer_08001078();\n  result1 = calculate_floating_point_08000adc(input3,result2);\n  result1 = calculate_floating_point_08000adc(result1,input4);\n  calculate_floating_point_08000ad8(result1,0x447a0000);\n  signedInt4 = convert_to_signed_integer_08001078();\n  if (999 < (int)signedInt4) {\n    signedInt4 = 1000;\n  }\n  if (999 < (int)signedInt3) {\n    signedInt3 = 1000;\n  }\n  if (999 < (int)signedInt2) {\n    signedInt2 = 1000;\n  }\n  if (999 < (int)signedInt1) {\n    signedInt1 = 1000;\n  }\n  DAT_200002a0 = signedInt2 & ~((int)signedInt2 >> 0x1f);\n  DAT_200002a4 = signedInt1 & ~((int)signedInt1 >> 0x1f);\n  DAT_2000029c = signedInt3 & ~((int)signedInt3 >> 0x1f);\n  DAT_20000298 = signedInt4 & ~((int)signedInt4 >> 0x1f);\n  store_parameter_in_memory_08003fc4();\n  store_param_in_memory_08003fd0(DAT_2000029c);\n  set_pointer_to_parameter_08003fdc(DAT_200002a0);\n  set_parameter_value_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_store_parameters_0800426c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "signedInt1",
                "uVar5": "signedInt2",
                "uVar6": "signedInt3",
                "uVar7": "signedInt4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_string_data_08004300",
            "code": "\nvoid processStringData_08004300(uint key,byte *data,uint dataLength)\n\n{\n  uint xoredKey;\n  byte *currentByte;\n  \n  parse_and_process_strings_08004c8c(&DAT_0800732e);\n  parse_data_08004c18(dataLength & 0xff);\n  xoredKey = dataLength & 0xff ^ key;\n  parse_data_08004c18(key);\n  for (currentByte = data; (int)currentByte - (int)data < (int)dataLength; currentByte = currentByte + 1) {\n    parse_data_08004c18(*currentByte);\n    xoredKey = xoredKey ^ *currentByte;\n  }\n  parse_data_08004c18(xoredKey);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_string_data_08004300",
                "param_1": "key",
                "param_2": "data",
                "param_3": "dataLength",
                "uVar1": "xoredKey",
                "pbVar2": "currentByte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initializeData_08004348(undefined4 value1,uint value2,undefined4 value3)\n\n{\n  undefined4 address;\n  uint maskedValue;\n  undefined4 stackParam;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  address = 0x40003e9;\n  maskedValue = value2 & 0xff000000;\n  stackParam = value3;\n  process_string_data_08004300(100,&address,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "local_10": "address",
                "local_c": "maskedValue",
                "uStack_8": "stackParam"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_data_08004384",
            "code": "\n\n\nvoid initializeData_08004384(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  undefined4 dataPointer;\n  undefined4 stackPointer;\n  uint maskedParam4;\n  \n  _DAT_200013bd = 0x2a0007;\n  dataPointer = _DAT_200013b9;\n  stackPointer = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedParam4 = inputParam4 & 0xff000000;\n  process_string_data_08004300(0x65,&dataPointer,0xb,0,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_data_08004384",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_14": "dataPointer",
                "uStack_10": "stackPointer",
                "local_c": "maskedParam4"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_string_data_080043bc",
            "code": "\nvoid copyAndProcessStringData_080043bc(void)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 *destinationArrayPtr;\n  undefined4 *sourceArrayPtr;\n  undefined4 destinationArray [2];\n  undefined2 tempArray [6];\n  \n  sourceArrayPtr = (undefined4 *)&DAT_2000142a;\n  destinationArrayPtr = destinationArray;\n  do {\n    tempVar1 = *sourceArrayPtr;\n    tempVar2 = sourceArrayPtr[1];\n    sourceArrayPtr = sourceArrayPtr + 2;\n    *destinationArrayPtr = tempVar1;\n    destinationArrayPtr[1] = tempVar2;\n    destinationArrayPtr = destinationArrayPtr + 2;\n  } while (sourceArrayPtr != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destinationArrayPtr = DAT_2000143a;\n  processStringData(0x66,destinationArray,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_string_data_080043bc",
                "local_24": "destinationArray",
                "local_1c": "tempArray",
                "process_string_data_08004300": "processStringData",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "puVar3": "destinationArrayPtr",
                "puVar4": "sourceArrayPtr"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "process_string_data_080043f0",
            "code": "\n\n\nvoid process_string_data_080043f0(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  undefined4 data_1;\n  undefined4 data_2;\n  undefined4 data_array [2];\n  \n  data_1 = _DAT_200013dd;\n  data_2 = _DAT_200013e1;\n  data_array[0] = input_param_3;\n  process_string_data_080043f0_08004300(0x68,&data_1,8,data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "process_string_data_080043f0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "local_10": "data_1",
                "uStack_c": "data_2",
                "auStack_8": "data_array"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "process_and_display_string_08004410",
            "code": "\nvoid process_and_display_string_08004410(undefined4 data_start,undefined4 data_size,undefined4 string_data)\n\n{\n  undefined4 data_reference;\n  undefined4 data_info;\n  undefined4 string_length;\n  \n  data_reference = DAT_20001395;\n  data_info = CONCAT22((short)((uint)data_size >> 0x10),DAT_20001399);\n  string_length = string_data;\n  process_string_data_08004300(0x6c,&data_reference,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "process_and_display_string_08004410",
                "param_1": "data_start",
                "param_2": "data_size",
                "param_3": "string_data",
                "local_10": "data_reference",
                "local_c": "data_info",
                "uStack_8": "string_length"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "process_string_data_08004434",
            "code": "\nvoid process_string_data_08004434(undefined4 unused_param,undefined4 data_address,undefined4 data)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 stack_data;\n  \n  data1 = DAT_200014ab;\n  data2 = CONCAT22((short)((uint)data_address >> 0x10),DAT_200014af);\n  stack_data = data;\n  process_string_data_08004434_08004300(0x6d,&data1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "process_string_data_08004434",
                "param_1": "unused_param",
                "param_2": "data_address",
                "param_3": "data",
                "local_10": "data1",
                "local_c": "data2",
                "uStack_8": "stack_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_and_process_data_08004458",
            "code": "\nvoid copyAndProcessData_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 temp;\n  undefined4 *destinationPtr;\n  undefined4 *sourcePtr;\n  undefined4 dataBuffer [3];\n  undefined2 indexBuffer [10];\n  \n  destination = dataBuffer;\n  source = &DAT_2000139b;\n  do {\n    sourcePtr = source;\n    destinationPtr = destination;\n    temp = sourcePtr[1];\n    *destinationPtr = *sourcePtr;\n    destinationPtr[1] = temp;\n    destination = destinationPtr + 2;\n    source = sourcePtr + 2;\n  } while (sourcePtr + 2 != (undefined4 *)0x200013b3);\n  destinationPtr[2] = uRam200013b3;\n  *(undefined2 *)(destinationPtr + 3) = *(undefined2 *)(sourcePtr + 3);\n  process_string_data_08004300(0x70,dataBuffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_and_process_data_08004458",
                "puVar1": "destination",
                "puVar2": "source",
                "uVar3": "temp",
                "puVar4": "destinationPtr",
                "puVar5": "sourcePtr",
                "local_30": "dataBuffer",
                "local_24": "indexBuffer"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "continuous_error_handling_08004490",
            "code": "\nvoid continuousErrorHandling_08004490(undefined4 errorMessage,undefined4 errorLine)\n\n{\n  setParamValue(0x40011000,0x4000,1);\n  setParamValue(0x40011000,0x8000,0);\n  setParamValue(0x40011000,0x2000,0);\n  do {\n    xorAndUpdateValue(0x40011000,0x4000);\n    xorAndUpdateValue(0x40011000,0x8000);\n    xorAndUpdateValue(0x40011000,0x2000);\n    processErrorMessage(\"Error with \");\n    processErrorMessage(errorMessage);\n    processErrorMessage(\" at line: \");\n    processErrorLine(errorLine);\n    parseNewline(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "continuous_error_handling_08004490",
                "param_1": "errorMessage",
                "param_2": "errorLine",
                "set_param_value_08001424": "setParamValue",
                "xor_and_update_value_0800142e": "xorAndUpdateValue",
                "parse_and_process_strings_08004c8c": "processErrorMessage",
                "parse_data_08004c18": "parseNewline",
                "process_data_08004cac": "processErrorLine"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initialize_peripherals_08004514(void)\n\n{\n  int result;\n  uint data;\n  undefined4 value;\n  int iVar4;\n  undefined4 errorCode;\n  int iVar4;\n  int iVar1_1;\n  undefined4 memSize;\n  int iVar1_2;\n  undefined4 localArray [4];\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 flag5;\n  \n  flag1 = 1;\n  flag2 = 0x10;\n  iVar4 = 2;\n  flag4 = 0;\n  localArray[0] = 2;\n  flag3 = 2;\n  flag5 = 0x380000;\n  result = check_conditions_08001b58(localArray);\n  if (result == 0) goto LAB_08004540;\n  value = 0x3c;\n  while( true ) {\n    result = continuous_error_handling_08004490(\"../Src/peripherals.c\",value);\nLAB_08004540:\n    errorCode = 0xf;\n    memSize = 0x400;\n    iVar4 = iVar4;\n    iVar1_1 = result;\n    iVar1_2 = result;\n    iVar4 = check_and_initialize_mpu_0800209c(&errorCode,iVar4);\n    if (iVar4 == 0) break;\n    value = 0x49;\n  }\n  data = get_data_08002214();\n  initialize_memory_08001214(data / 1000);\n  set_flag_08001240(4);\n  update_register_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "local_44": "errorCode",
                "local_40": "iVar4",
                "local_3c": "iVar1_1",
                "local_38": "memSize",
                "local_34": "iVar1_2",
                "local_30": "localArray",
                "local_20": "flag1",
                "local_1c": "flag2",
                "local_14": "flag3",
                "local_10": "flag4",
                "local_c": "flag5",
                "iVar1": "result",
                "uVar2": "data",
                "uVar3": "value"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_system_and_peripherals_0800458c",
            "code": "\n\n\nvoid initialize_system_and_peripherals_0800458c(void)\n\n{\n  int error_code;\n  undefined4 function_code;\n  int parameter_value;\n  int value_58;\n  int value_54;\n  int value_50;\n  int value_4c;\n  int value_48;\n  int value_40;\n  int value_3c;\n  int value_38;\n  int value_34;\n  int value_30;\n  int value_2c;\n  int value_28;\n  int value_24;\n  undefined4 value_20;\n  int value_1c;\n  \n  initialize_system_08001128();\n  initialize_peripherals_08004514();\n  parameter_value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_param_value_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_param_value_08001424(0x40010800,0x20,0);\n  value_34 = 0xe000;\n  value_30 = 1;\n  value_28 = 2;\n  update_register_values_08001264(0x40011000,&value_34);\n  value_34 = 0x20;\n  value_30 = 1;\n  value_28 = 2;\n  update_register_values_08001264(0x40010800,&value_34);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  error_code = initialize_registers_08001754();\n  if (error_code == 0) goto LAB_0800463a;\n  function_code = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  error_code = continuous_error_handling_08004490(\"../Src/peripherals.c\",function_code);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = error_code;\n                                  DAT_20001588 = error_code;\n                                  DAT_2000158c = error_code;\n                                  DAT_20001594 = error_code;\n                                  DAT_20001598 = error_code;\n                                  error_code = update_register_values_08002724(&DAT_2000157c);\n                                  if (error_code == 0) break;\n                                  function_code = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = parameter_value;\n                                DAT_200015c4 = error_code;\n                                DAT_200015cc = error_code;\n                                DAT_200015d0 = error_code;\n                                error_code = initialize_parameter_080023d0(&DAT_200015bc);\n                                if (error_code == 0) break;\n                                function_code = 0x88;\n                              }\n                              value_58 = error_code;\n                              value_54 = error_code;\n                              error_code = validate_and_update_values_080025a4(&DAT_200015bc,&value_58);\n                              if (error_code == 0) break;\n                              function_code = 0x8f;\n                            }\n                            value_50 = 0x60;\n                            value_4c = error_code;\n                            value_48 = error_code;\n                            value_40 = error_code;\n                            value_3c = error_code;\n                            value_38 = error_code;\n                            error_code = update_params_0800245c(&DAT_200015bc,&value_50,0xc);\n                            if (error_code == 0) break;\n                            function_code = 0x9a;\n                          }\n                          value_20 = 0x2000;\n                          value_34 = error_code;\n                          value_30 = error_code;\n                          value_2c = error_code;\n                          value_28 = error_code;\n                          value_24 = error_code;\n                          value_1c = error_code;\n                          error_code = validate_and_set_value_08002564(&DAT_200015bc,&value_34);\n                          if (error_code == 0) break;\n                          function_code = 0xa6;\n                        }\n                        update_register_values_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = parameter_value;\n                        DAT_20001600 = error_code;\n                        DAT_20001608 = error_code;\n                        error_code = initialize_parameter_080023d0(&DAT_200015f8);\n                        if (error_code == 0) break;\n                        function_code = 0xc3;\n                      }\n                      value_50 = error_code;\n                      value_4c = error_code;\n                      error_code = validate_and_update_values_080025a4(&DAT_200015f8,&value_50);\n                      if (error_code == 0) break;\n                      function_code = 0xca;\n                    }\n                    value_34 = 0x60;\n                    value_30 = error_code;\n                    value_2c = error_code;\n                    value_24 = error_code;\n                    error_code = update_params_0800245c(&DAT_200015f8,&value_34,4);\n                    if (error_code == 0) break;\n                    function_code = 0xd3;\n                  }\n                  update_register_values_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = parameter_value;\n                  DAT_20001548 = error_code;\n                  DAT_20001550 = error_code;\n                  error_code = initialize_parameter_080023d0();\n                  if (error_code == 0) break;\n                  function_code = 0xf0;\n                }\n                value_50 = 0;\n                value_4c = 0;\n                error_code = validate_and_update_values_080025a4(&DAT_20001540,&value_50);\n                if (error_code == 0) break;\n                function_code = 0xf7;\n              }\n              value_34 = 0x60;\n              value_30 = error_code;\n              value_2c = error_code;\n              value_24 = error_code;\n              error_code = update_params_0800245c(&DAT_20001540,&value_34,8);\n              if (error_code == 0) break;\n              function_code = 0x100;\n            }\n            parameter_value = update_params_0800245c(&DAT_20001540,&value_34,0xc);\n            if (parameter_value == 0) break;\n            function_code = 0x105;\n          }\n          update_register_values_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = parameter_value;\n          DAT_200014d8 = parameter_value;\n          error_code = initialize_parameter_080023d0(&DAT_200014c8);\n          if (error_code == 0) break;\n          function_code = 0x122;\n        }\n        value_50 = error_code;\n        value_4c = error_code;\n        error_code = validate_and_update_values_080025a4(&DAT_200014c8,&value_50);\n        if (error_code == 0) break;\n        function_code = 0x129;\n      }\n      value_34 = 0x60;\n      value_30 = error_code;\n      value_2c = error_code;\n      value_24 = error_code;\n      error_code = update_params_0800245c(&DAT_200014c8,&value_34,8);\n      if (error_code == 0) break;\n      function_code = 0x132;\n    }\n    error_code = update_params_0800245c(&DAT_200014c8,&value_34,0xc);\n    if (error_code == 0) break;\n    function_code = 0x137;\n  }\n  update_register_values_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_system_and_peripherals_0800458c",
                "iVar1": "error_code",
                "uVar2": "function_code",
                "iVar3": "parameter_value",
                "local_58": "value_58",
                "local_54": "value_54",
                "local_50": "value_50",
                "local_4c": "value_4c",
                "local_48": "value_48",
                "local_40": "value_40",
                "local_3c": "value_3c",
                "local_38": "value_38",
                "local_34": "value_34",
                "local_30": "value_30",
                "local_2c": "value_2c",
                "local_28": "value_28",
                "local_24": "value_24",
                "local_20": "value_20",
                "local_1c": "value_1c"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_results_0800483c",
            "code": "\nvoid calculate_results_0800483c(int *input_array)\n\n{\n  undefined4 result_2;\n  undefined4 result_3;\n  int var_1;\n  int result_1;\n  int var_2;\n  \n  result_1 = input_array[0xc];\n  result_2 = calculate_floating_point_08000adc(input_array[7],input_array[9]);\n  result_1 = calculate_floating_point_08000ad8(result_2,result_1);\n  input_array[10] = result_1;\n  if (*input_array == 3) {\n    result_1 = check_if_concatenation_completed_08001064(input_array[10],0);\n    if (result_1 == 0) {\n      result_1 = check_concatenation_result_08001028(input_array[10],0xc3340000);\n    }\n    else {\n      result_1 = check_if_concatenation_completed_08001064(input_array[10],0x43340000);\n    }\n    if (result_1 != 0) {\n      var_2 = input_array[10];\n      result_2 = calculate_floating_point_08000cec(input_array[10],0x43b40000);\n      result_1 = check_if_concatenation_completed_08001064(input_array[10],0);\n      var_1 = input_array[10];\n      if (result_1 == 0) {\n        var_1 = var_1 + -0x80000000;\n      }\n      result_2 = calculate_floating_point_08000e54(result_2,var_1);\n      result_1 = calculate_floating_point_08000ad8(var_2,result_2);\n      input_array[10] = result_1;\n    }\n  }\n  var_2 = input_array[2];\n  var_1 = input_array[3];\n  result_1 = calculate_floating_point_08000cec(input_array[1],input_array[10]);\n  input_array[0xe] = result_1;\n  result_1 = calculate_floating_point_08000adc(input_array[10],input_array[0xf]);\n  input_array[0xf] = result_1;\n  result_1 = check_concatenation_result_08001028(input_array[0xf],0xc3fa0000);\n  if (result_1 == 0) {\n    result_1 = check_if_concatenation_completed_08001064(input_array[0xf],0x43fa0000);\n    if (result_1 == 0) {\n      result_1 = input_array[0xf];\n    }\n    else {\n      result_1 = 0x43fa0000;\n    }\n  }\n  else {\n    result_1 = -0x3c060000;\n  }\n  input_array[0xf] = result_1;\n  result_1 = calculate_floating_point_08000ad8(input_array[0xc],input_array[0xd]);\n  input_array[0x10] = result_1;\n  result_1 = input_array[0xe];\n  result_2 = calculate_floating_point_08000cec(var_2,input_array[0xf]);\n  result_2 = calculate_floating_point_08000adc(result_2,result_1);\n  result_3 = calculate_floating_point_08000cec(var_1,input_array[0x10]);\n  result_1 = calculate_floating_point_08000ad8(result_2,result_3);\n  input_array[0x12] = result_1;\n  result_2 = count_leading_zeros_08000c44(input_array[0x13]);\n  result_1 = check_concatenation_result_08001028(input_array[0x12],0xc3fa0000);\n  if (result_1 == 0) {\n    result_1 = check_if_concatenation_completed_08001064(input_array[0x12],0x43fa0000);\n    if (result_1 == 0) {\n      result_1 = input_array[0x12];\n    }\n    else {\n      result_1 = 0x43fa0000;\n    }\n  }\n  else {\n    result_1 = -0x3c060000;\n  }\n  result_1 = calculate_floating_point_08000cec(result_1,result_2);\n  input_array[0x12] = result_1;\n  input_array[0xd] = input_array[0xc];\n  input_array[0xb] = input_array[10];\n  input_array[0x15] = input_array[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_results_0800483c",
                "param_1": "input_array",
                "iVar4": "result_1",
                "uVar1": "result_2",
                "uVar2": "result_3",
                "iVar3": "var_1",
                "iVar5": "var_2"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_data_values_08004a30",
            "code": "\nvoid updateDataValues_08004a30(void)\n\n{\n  undefined4 dataValue;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      dataValue = getDataValue();\n      DAT_20000068 = calculateFloatingPoint(dataValue,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      dataValue = getDataValue();\n      DAT_2000007c = calculateFloatingPoint(dataValue,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_data_values_08004a30",
                "uVar1": "dataValue",
                "get_data_value_08003068": "getDataValue",
                "calculate_floating_point_08000cec": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_and_calculate_results_08004a84",
            "code": "\nvoid initialize_and_calculate_results_08004a84(void)\n\n{\n  int result;\n  \n  DAT_200000d8 = calculate_result();\n  DAT_20000134 = calculate_and_store_value();\n  DAT_20000190 = process_concatenation();\n  update_data_values();\n  result = check_if_concatenation_completed(DAT_200000d8,0);\n  if (result == 0) {\n    result = check_concatenation_result(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    result = check_if_concatenation_completed(DAT_200000d8,0x42a00000);\n  }\n  if (result == 0) {\n    result = check_if_concatenation_completed(DAT_20000134,0);\n    if (result == 0) {\n      result = check_concatenation_result(DAT_20000134,0xc2a00000);\n    }\n    else {\n      result = check_if_concatenation_completed(DAT_20000134,0x42a00000);\n    }\n    if (result == 0) {\n      set_param_values(1,1);\n      calculate_results(&DAT_200000a8);\n      calculate_results(&DAT_20000104);\n      calculate_results(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculate_results(&DAT_2000004c);\n        calculate_floating_point(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initialize_parameters();\n      }\n      else {\n        calculate_and_store_parameters(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculate_floating_point(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = validate_input();\n      calculate_floating_point(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = validate_input();\n      calculate_floating_point(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = validate_input();\n      calculate_floating_point(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = validate_input();\n      calculate_floating_point(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = validate_input();\n      calculate_floating_point(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = validate_input();\n      calculate_floating_point(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = validate_input();\n      calculate_floating_point(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = validate_input();\n      calculate_floating_point(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = validate_input();\n      calculate_floating_point(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = validate_input();\n      calculate_floating_point(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = validate_input();\n      return;\n    }\n  }\n  initialize_parameters();\n  set_param_values(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_and_calculate_results_08004a84",
                "iVar1": "result",
                "calculate_result_08002ec0": "calculate_result",
                "calculate_and_store_value_08002ed4": "calculate_and_store_value",
                "process_concatenation_08002ee8": "process_concatenation",
                "update_data_values_08004a30": "update_data_values",
                "check_if_concatenation_completed_08001064": "check_if_concatenation_completed",
                "check_concatenation_result_08001028": "check_concatenation_result",
                "set_param_values_08003f3c": "set_param_values",
                "calculate_results_0800483c": "calculate_results",
                "calculate_floating_point_08000adc": "calculate_floating_point",
                "initialize_parameters_080041c4": "initialize_parameters",
                "calculate_and_store_parameters_0800426c": "calculate_and_store_parameters",
                "calculate_floating_point_08000cec": "calculate_floating_point",
                "validate_input_080010c4": "validate_input"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "parse_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 parseData_08004c18(undefined input)\n\n{\n  int *ptr;\n  int data1;\n  int data2;\n  ushort *ptr2;\n  \n  DAT_20001636._0_1_ = input;\n  ptr2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      data1 = get_data_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        data2 = get_data_0800115c();\n      } while ((uint)(data2 - data1) < 6);\nLAB_0800281c:\n      ptr = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr[3] = ptr[3] & 0xffffffdf;\n      ptr[3] = ptr[3] & 0xfffffeff;\n      ptr[5] = ptr[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      data1 = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        data2 = get_data_0800115c();\n        if (5 < (uint)(data2 - data1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr2 = ptr2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      data1 = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        data2 = get_data_0800115c();\n        if (5 < (uint)(data2 - data1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr2;\n    }\n    ptr2 = (ushort *)((int)ptr2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "parse_data_08004c18",
                "param_1": "input",
                "piVar1": "ptr",
                "iVar2": "data1",
                "iVar3": "data2",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_and_increment_value_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * checkAndIncrementValue_08004c30(int *inputValue)\n\n{\n  int localVariable1;\n  \n  if (*inputValue != 0x40013800) {\n    return inputValue;\n  }\n  increment_and_store_08003ec8(&DAT_20000364,DAT_20001634);\n  localVariable1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(localVariable1 + 0x14) = *(uint *)(localVariable1 + 0x14) | 1;\n    *(uint *)(localVariable1 + 0xc) = *(uint *)(localVariable1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_and_increment_value_08004c30",
                "param_1": "inputValue",
                "iVar1": "localVariable1"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "reset_data_08004c64",
            "code": "\nvoid resetData_08004c64(void)\n\n{\n  int counter;\n  \n  counter = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "reset_data_08004c64",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_settings_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeSettings_08004c70(void)\n\n{\n  int iVar1;\n  \n  resetData();\n  iVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(iVar1 + 0x14) = *(uint *)(iVar1 + 0x14) | 1;\n    *(uint *)(iVar1 + 0xc) = *(uint *)(iVar1 + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_settings_08004c70",
                "reset_data_08004c64": "resetData"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "parse_and_process_strings_08004c8c",
            "code": "\nvoid parse_and_process_strings_08004c8c(undefined *string_array)\n\n{\n  uint end_of_string_index;\n  undefined *current_string_pointer;\n  \n  current_string_pointer = string_array;\n  while( true ) {\n    end_of_string_index = find_end_of_string_08000150(string_array);\n    if (end_of_string_index <= (uint)((int)current_string_pointer - (int)string_array)) break;\n    parse_data_08004c18(*current_string_pointer);\n    current_string_pointer = current_string_pointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "parse_and_process_strings_08004c8c",
                "param_1": "string_array",
                "uVar1": "end_of_string_index",
                "puVar2": "current_string_pointer"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "process_data_08004cac",
            "code": "\nvoid processData_08004cac(undefined4 dataParam)\n\n{\n  clearDataBuffer(&DAT_20001636,&DAT_0800735e,dataParam);\n  parseAndProcessStrings(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "process_data_08004cac",
                "param_1": "dataParam",
                "clear_data_buffer_08004ffc": "clearDataBuffer",
                "parse_and_process_strings_08004c8c": "parseAndProcessStrings"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_data_registers_08004ccc",
            "code": "\n\n\nvoid initializeDataRegisters_08004ccc(undefined4 register1,undefined4 register2,undefined4 register3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configureDataRegister(3,register2,_DAT_40021018,1,register1,1,register3);\n  updateRegister(0xfffffff4,0);\n  updateRegister(0xfffffff5,0);\n  updateRegister(0xfffffff6,0);\n  updateRegister(0xfffffffb,0);\n  updateRegister(0xfffffffc,0);\n  updateRegister(0xfffffffe,0);\n  updateRegister(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_data_registers_08004ccc",
                "param_1": "register1",
                "param_2": "register2",
                "param_3": "register3",
                "configure_data_register_08001170": "configureDataRegister",
                "update_register_08001194": "updateRegister"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "update_register_values_if_condition_met_08004d48",
            "code": "\n\n\nvoid update_register_values_if_condition_met_08004d48(int *input_ptr,undefined4 param_value)\n\n{\n  undefined4 register_value_1;\n  undefined4 register_value_2;\n  \n  if (*input_ptr == 0x40005400) {\n    register_value_1 = 0xc0;\n    register_value_2 = 0x12;\n    update_register_values(0x40010c00,&register_value_1,0x40005400,3,input_ptr,param_value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "update_register_values_if_condition_met_08004d48",
                "param_1": "input_ptr",
                "param_2": "param_value",
                "local_18": "register_value_1",
                "local_14": "register_value_2",
                "update_register_values_08001264": "update_register_values"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_flags_based_on_value_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateFlagsBasedOnValue_08004d8c(int *valueToUpdate)\n\n{\n  int currentValue;\n  \n  currentValue = *valueToUpdate;\n  if (currentValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (currentValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (currentValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (currentValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_flags_based_on_value_08004d8c",
                "param_1": "valueToUpdate",
                "iVar1": "currentValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_register_values_08004e14",
            "code": "\nvoid update_register_values_08004e14(int *input_ptr,undefined4 unused_param,undefined4 register_value)\n\n{\n  undefined4 constant_value;\n  int value_from_input_ptr;\n  undefined4 updated_value_1;\n  undefined4 updated_value_2;\n  undefined4 updated_value_3;\n  undefined4 constant_value_2;\n  \n  value_from_input_ptr = *input_ptr;\n  if (value_from_input_ptr == 0x40012c00) {\n    updated_value_1 = 0x800;\n  }\n  else {\n    if (value_from_input_ptr != 0x40000000) {\n      if (value_from_input_ptr == 0x40000400) {\n        updated_value_1 = 3;\n      }\n      else {\n        if (value_from_input_ptr != 0x40000800) {\n          return;\n        }\n        updated_value_1 = 0x300;\n      }\n      constant_value = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    updated_value_1 = 2;\n  }\n  constant_value = 0x40010800;\nLAB_08004e2e:\n  constant_value_2 = 2;\n  updated_value_2 = 2;\n  updated_value_3 = register_value;\n  update_register_values_08004e14_08001264(constant_value,&updated_value_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_register_values_08004e14",
                "param_1": "input_ptr",
                "param_2": "unused_param",
                "param_3": "register_value",
                "uVar1": "constant_value",
                "iVar2": "value_from_input_ptr",
                "local_18": "updated_value_1",
                "local_14": "updated_value_2",
                "uStack_10": "updated_value_3",
                "local_c": "constant_value_2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_register_values_08004e7c",
            "code": "\n\n\nvoid updateRegisterValues_08004e7c(int *inputParam)\n\n{\n  undefined4 registerValue1;\n  undefined4 registerValue2;\n  undefined4 registerValue3;\n  undefined4 registerValue4;\n  \n  if (*inputParam == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    registerValue1 = 0x200;\n    registerValue2 = 2;\n    registerValue4 = 3;\n    updateRegisterFunction(0x40010800,&registerValue1);\n    registerValue1 = 0x400;\n    registerValue2 = 0;\n    registerValue3 = 0;\n    updateRegisterFunction(0x40010800,&registerValue1);\n    updateRegister(0x25,0,0);\n    setBitInArray(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_register_values_08004e7c",
                "param_1": "inputParam",
                "local_18": "registerValue1",
                "local_14": "registerValue2",
                "local_10": "registerValue3",
                "local_c": "registerValue4",
                "update_register_values_08001264": "updateRegisterFunction",
                "update_register_08001194": "updateRegister",
                "set_bit_in_array_080011fc": "setBitInArray"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_memory_configuration_08004f10",
            "code": "\n\n\nvoid initializeMemoryConfiguration_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_memory_configuration_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_thunk_0800115c",
            "code": "\nundefined4 get_data_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_configuration_08004f10();\n  execute_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  run_system_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "clear_data_buffer_08004ffc",
            "code": "\nvoid clearDataBuffer_08004ffc(undefined *dataBuffer,undefined4 size,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined *bufferArray [2];\n  undefined4 maxValue;\n  undefined2 bufferSize;\n  undefined2 maxShortValue;\n  undefined *currentBuffer;\n  undefined4 maxValue2;\n  undefined4 stackParam1;\n  undefined4 stackParam2;\n  undefined4 stackParam3;\n  \n  bufferSize = 0x208;\n  maxValue = 0x7fffffff;\n  maxValue2 = 0x7fffffff;\n  maxShortValue = 0xffff;\n  bufferArray[0] = dataBuffer;\n  currentBuffer = dataBuffer;\n  stackParam1 = size;\n  stackParam2 = arg2;\n  stackParam3 = arg3;\n  process_data_080050fc(DAT_200001c0,bufferArray,size);\n  *bufferArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "clear_data_buffer_08004ffc",
                "param_1": "dataBuffer",
                "param_2": "size",
                "param_3": "arg2",
                "param_4": "arg3",
                "local_78": "bufferArray",
                "local_70": "maxValue",
                "local_6c": "bufferSize",
                "local_6a": "maxShortValue",
                "local_68": "currentBuffer",
                "local_64": "maxValue2",
                "uStack_c": "stackParam1",
                "uStack_8": "stackParam2",
                "uStack_4": "stackParam3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "copy_and_process_data_08005044",
            "code": "\nundefined4 copy_and_process_data_08005044(undefined4 *output_buffer,int *input_buffer,undefined4 destination,uint size)\n\n{\n  int memory_allocation_result;\n  uint new_size;\n  uint current_size;\n  int offset;\n  \n  current_size = input_buffer[2];\n  if ((current_size <= size) && ((*(ushort *)(input_buffer + 3) & 0x480) != 0)) {\n    offset = *input_buffer - input_buffer[4];\n    current_size = (uint)(input_buffer[5] * 3) / 2;\n    new_size = size + 1 + offset;\n    if (current_size < new_size) {\n      current_size = new_size;\n    }\n    if ((int)((uint)*(ushort *)(input_buffer + 3) << 0x15) < 0) {\n      memory_allocation_result = allocate_memory(output_buffer,current_size);\n      if (memory_allocation_result == 0) {\nLAB_0800508a:\n        *output_buffer = 0xc;\n        *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_data(memory_allocation_result,input_buffer[4],offset);\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      memory_allocation_result = process_data(output_buffer,input_buffer[4],current_size);\n      if (memory_allocation_result == 0) {\n        process_data_failed(output_buffer,input_buffer[4]);\n        goto LAB_0800508a;\n      }\n    }\n    input_buffer[4] = memory_allocation_result;\n    *input_buffer = memory_allocation_result + offset;\n    input_buffer[5] = current_size;\n    input_buffer[2] = current_size - offset;\n    current_size = size;\n  }\n  if (size <= current_size) {\n    current_size = size;\n  }\n  copy_range(*input_buffer,destination,current_size);\n  input_buffer[2] = input_buffer[2] - current_size;\n  *input_buffer = current_size + *input_buffer;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "copy_and_process_data_08005044",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "destination",
                "param_4": "size",
                "iVar1": "memory_allocation_result",
                "uVar2": "new_size",
                "uVar3": "current_size",
                "iVar4": "offset",
                "allocate_memory_08005714": "allocate_memory",
                "copy_data_08005630": "copy_data",
                "process_data_080057d0": "process_data",
                "process_data_0800567c": "process_data_failed",
                "copy_range_08005646": "copy_range"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint processData_080050fc(undefined4 *ptr_output,int *ptr_values,byte *ptr_data,int *ptr_buf)\n\n{\n  int result;\n  int copy_result;\n  int *ptr_length;\n  bool isDigit;\n  byte *ptr_byte;\n  byte *ptr_byte2;\n  int uninitialized_r9;\n  int *local_buffer;\n  uint bit_flags;\n  int int_value;\n  undefined4 result2;\n  int int_value2;\n  int total_bytes;\n  byte byte_value;\n  undefined init_value;\n  undefined init_value2;\n  undefined byte_value2;\n  undefined4 init_value3;\n  \n  local_buffer = ptr_buf;\n  if (((int)((uint)*(ushort *)(ptr_values + 3) << 0x18) < 0) && (ptr_values[4] == 0)) {\n    result = allocateMemory(ptr_output,0x40);\n    *ptr_values = result;\n    ptr_values[4] = result;\n    if (result == 0) {\n      *ptr_output = 0xc;\n      return -1;\n    }\n    ptr_values[5] = 0x40;\n  }\n  total_bytes = 0;\n  init_value = 0x20;\n  init_value2 = 0x30;\n  ptr_byte = ptr_data;\nLAB_08005146:\n  ptr_byte2 = ptr_byte;\n  if (*ptr_byte2 != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  ptr_byte = ptr_byte2 + 1;\n  if (*ptr_byte2 != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)ptr_byte2 - (int)ptr_data;\n  if (result != 0) {\n    copy_result = copyAndProcessData(ptr_output,ptr_values,ptr_data,result);\n    if (copy_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(ptr_values + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_bytes;\n    }\n    total_bytes = total_bytes + result;\n  }\n  if (*ptr_byte2 == 0) goto LAB_080052ac;\n  bit_flags = 0;\n  int_value2 = 0;\n  int_value = -1;\n  result2 = 0;\n  byte_value2 = 0;\n  init_value3 = 0;\n  ptr_byte = ptr_byte2 + 1;\n  while( true ) {\n    result = findFirstOccurrence(&DAT_08007379,*ptr_byte);\n    ptr_data = ptr_byte + 1;\n    if (result == 0) break;\n    bit_flags = 1 << (result + 0xf7ff8c87U & 0xff) | bit_flags;\n    ptr_byte = ptr_data;\n  }\n  if ((int)(bit_flags << 0x1b) < 0) {\n    byte_value2 = 0x20;\n  }\n  if ((int)(bit_flags << 0x1c) < 0) {\n    byte_value2 = 0x2b;\n  }\n  if (*ptr_byte == 0x2a) {\n    ptr_length = local_buffer + 1;\n    result = *local_buffer;\n    local_buffer = ptr_length;\n    if (result < 0) {\n      int_value2 = -result;\n      bit_flags = bit_flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    isDigit = false;\n    result = int_value2;\n    ptr_data = ptr_byte;\n    while( true ) {\n      if (9 < *ptr_data - 0x30) break;\n      result = result * 10 + (*ptr_data - 0x30);\n      isDigit = true;\n      ptr_data = ptr_data + 1;\n    }\n    if (!isDigit) goto LAB_080051fc;\n  }\n  int_value2 = result;\nLAB_080051fc:\n  if (*ptr_data == 0x2e) {\n    if (ptr_data[1] == 0x2a) {\n      ptr_data = ptr_data + 2;\n      ptr_length = local_buffer + 1;\n      int_value = *local_buffer;\n      local_buffer = ptr_length;\n      if (int_value < 0) {\n        int_value = -1;\n      }\n    }\n    else {\n      isDigit = false;\n      result = 0;\n      int_value = 0;\n      while( true ) {\n        ptr_data = ptr_data + 1;\n        if (9 < *ptr_data - 0x30) break;\n        result = result * 10 + (*ptr_data - 0x30);\n        isDigit = true;\n      }\n      if (isDigit) {\n        int_value = result;\n      }\n    }\n  }\n  result = findFirstOccurrence(&DAT_0800737f,*ptr_data,3);\n  if (result != 0) {\n    ptr_data = ptr_data + 1;\n    bit_flags = bit_flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  byte_value = *ptr_data;\n  ptr_data = ptr_data + 1;\n  result = findFirstOccurrence(\"efgEFG\",byte_value,6);\n  if (result == 0) {\n    uninitialized_r9 = convertAndProcessData(ptr_output,&bit_flags,ptr_values,0x8005045,&local_buffer);\n    if (uninitialized_r9 == -1) goto LAB_080052ac;\n  }\n  else {\n    local_buffer = (int *)(((int)local_buffer + 7U & 0xfffffff8) + 8);\n  }\n  total_bytes = total_bytes + uninitialized_r9;\n  ptr_byte = ptr_data;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_data_080050fc",
                "param_1": "ptr_output",
                "param_2": "ptr_values",
                "param_3": "ptr_data",
                "param_4": "ptr_buf",
                "iVar1": "result",
                "iVar2": "copy_result",
                "piVar3": "ptr_length",
                "bVar4": "isDigit",
                "pbVar5": "ptr_byte",
                "pbVar6": "ptr_byte2",
                "unaff_r9": "uninitialized_r9",
                "local_8c": "local_buffer",
                "local_88": "bit_flags",
                "local_84": "int_value",
                "local_80": "result2",
                "local_7c": "int_value2",
                "local_74": "total_bytes",
                "local_70": "byte_value",
                "local_6f": "init_value",
                "local_6e": "init_value2",
                "local_45": "byte_value2",
                "local_30": "init_value3",
                "allocate_memory_08005714": "allocateMemory",
                "copy_and_process_data_08005044": "copyAndProcessData",
                "find_first_occurrence_08005614": "findFirstOccurrence",
                "convert_and_process_data_080053d4": "convertAndProcessData"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 inputFlag,uint *data,uint *outputSize,undefined4 param,code *callback)\n\n{\n  int loopCounter1;\n  int loopCounter2;\n  uint maxSize;\n  uint offset;\n  bool flag;\n  \n  maxSize = currentSize;\n  if ((int)currentSize < (int)minSize) {\n    maxSize = minSize;\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (loopCounter1 = 0; loopCounter1 < (int)(totalSize - *outputSize); loopCounter1 = loopCounter1 + 1) {\n      loopCounter2 = (*callback)(inputFlag,param,(int)data + 0x19,1);\n      if (loopCounter2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  offset = maxSize;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    offset = maxSize + 2;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  loopCounter1 = (*callback)(inputFlag,param,(int)data + 0x43,offset);\n  if (loopCounter1 != -1) {\n    maxSize = totalSize;\n    flag = (*data & 6) != 4;\n    if (flag) {\n      maxSize = 0;\n    }\n    offset = 0;\n    if (!flag) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (!flag) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    if ((int)currentSize < (int)minSize) {\n      maxSize = maxSize + (minSize - currentSize);\n    }\n    while( true ) {\n      if (maxSize == offset) {\n        return 0;\n      }\n      loopCounter1 = (*callback)(inputFlag,param,(int)data + 0x1a,1);\n      if (loopCounter1 == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "inputFlag",
                "param_2": "data",
                "param_3": "outputSize",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "loopCounter1",
                "iVar2": "loopCounter2",
                "uVar3": "maxSize",
                "uVar4": "offset",
                "bVar5": "flag",
                "param_2[4]": "currentSize",
                "param_2[2]": "minSize",
                "param_2[3]": "totalSize"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "convert_and_process_data_080053d4",
            "code": "\nuint convertAndProcessData_080053d4(undefined4 input,uint *data,undefined4 length,code *converter,uint **counter)\n\n{\n  byte firstByte;\n  int result;\n  uint *ptr;\n  int temp;\n  char *hexMap;\n  uint firstVal;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint secondVal;\n  uint thirdVal;\n  char *converted;\n  char *charPtr;\n  uint localData [2];\n  \n  firstByte = *(byte *)(data + 6);\n  charPtr = (char *)((int)data + 0x43);\n  if (firstByte != 0x6e) {\n    if (firstByte < 0x6f) {\n      if (firstByte != 99) {\n        if (firstByte < 100) {\n          if (firstByte == 0) goto LAB_0800558e;\n          if (firstByte != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hexMap = \"0123456789ABCDEF\";\nLAB_0800551e:\n          firstVal = *data;\n          ptr = *counter;\n          *counter = ptr + 1;\n          if (((firstVal & 0x80) == 0) && ((int)(firstVal << 0x19) < 0)) {\n            secondVal = (uint)*(ushort *)ptr;\n          }\n          else {\n            secondVal = *ptr;\n          }\n          if ((int)(firstVal << 0x1f) < 0) {\n            *data = firstVal | 0x20;\n          }\n          if (secondVal == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          firstVal = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((firstByte != 100) && (firstByte != 0x69)) goto LAB_08005404;\n          secondVal = *data;\n          ptr = *counter;\n          if ((secondVal & 0x80) == 0) {\n            *counter = ptr + 1;\n            if ((secondVal & 0x40) == 0) goto LAB_08005424;\n            secondVal = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *counter = ptr + 1;\nLAB_08005424:\n            secondVal = *ptr;\n          }\n          if ((int)secondVal < 0) {\n            secondVal = -secondVal;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hexMap = \"0123456789ABCDEF\";\n          firstVal = 10;\n        }\n        thirdVal = data[1];\n        data[2] = thirdVal;\n        converted = charPtr;\n        if ((int)thirdVal < 0) {\n          if (secondVal != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)data + 0x42) = *hexMap;\n          converted = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (secondVal == 0) {\n            if (thirdVal != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              thirdVal = secondVal / firstVal;\n              converted = converted + -1;\n              *converted = hexMap[secondVal - firstVal * thirdVal];\n              secondVal = thirdVal;\n            } while (thirdVal != 0);\n          }\n        }\n        if (((firstVal == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          converted[-1] = '0';\n          converted = converted + -1;\n        }\n        data[4] = (int)charPtr - (int)converted;\n        charPtr = converted;\n        goto LAB_080054fa;\n      }\n      ptr = *counter;\n      *counter = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08005464:\n      charPtr = (char *)((int)data + 0x42);\n      secondVal = 1;\n    }\n    else {\n      if (firstByte != 0x73) {\n        if (firstByte < 0x74) {\n          if (firstByte == 0x6f) {\nLAB_0800548a:\n            secondVal = *data;\n            ptr = *counter;\n            if ((secondVal & 0x80) == 0) {\n              *counter = ptr + 1;\n              if ((secondVal & 0x40) == 0) goto LAB_08005498;\n              secondVal = (uint)*(ushort *)ptr;\n            }\n            else {\n              *counter = ptr + 1;\nLAB_08005498:\n              secondVal = *ptr;\n            }\n            if (firstByte == 0x6f) {\n              firstVal = 8;\n            }\n            else {\n              firstVal = 10;\n            }\n            hexMap = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (firstByte == 0x70) {\n            *data = *data | 0x20;\nLAB_0800544a:\n            hexMap = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (firstByte == 0x75) goto LAB_0800548a;\n          if (firstByte == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data + 0x42) = firstByte;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*counter;\n      *counter = (uint *)(ppcVar8 + 1);\n      charPtr = *ppcVar8;\n      result = find_first_occurrence_08005614(charPtr,0,data[1]);\n      if (result != 0) {\n        data[1] = result - (int)charPtr;\n      }\n      secondVal = data[1];\n    }\n    data[4] = secondVal;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  secondVal = *data;\n  ppuVar7 = (uint **)*counter;\n  firstVal = data[5];\n  if ((secondVal & 0x80) == 0) {\n    *counter = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((secondVal & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)firstVal;\n  }\n  else {\n    *counter = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = firstVal;\n  }\nLAB_0800558e:\n  data[4] = 0;\nLAB_080054fa:\n  result = process_data_080052e4(input,data,localData,length,converter);\n  if ((result == -1) || (result = (*converter)(input,length,charPtr,data[4]), result == -1)) {\nLAB_0800550e:\n    secondVal = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (result = 0; result < (int)(data[3] - localData[0]); result = result + 1) {\n        temp = (*converter)(input,length,(int)data + 0x19,1);\n        if (temp == -1) goto LAB_0800550e;\n      }\n    }\n    secondVal = data[3];\n    if ((int)data[3] < (int)localData[0]) {\n      secondVal = localData[0];\n    }\n  }\n  return secondVal;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "convert_and_process_data_080053d4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "length",
                "param_4": "converter",
                "param_5": "counter",
                "bVar1": "firstByte",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "temp",
                "pcVar5": "hexMap",
                "uVar6": "firstVal",
                "uVar9": "secondVal",
                "uVar10": "thirdVal",
                "pcVar11": "converted",
                "pcVar12": "charPtr",
                "local_24": "localData"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_first_occurrence_08005614",
            "code": "\nchar * findFirstOccurrence_08005614(char *string,char character,int length)\n\n{\n  char *currentChar;\n  char *nextChar;\n  \n  currentChar = string;\n  do {\n    nextChar = currentChar;\n    if (nextChar == string + length) {\n      return (char *)0x0;\n    }\n    currentChar = nextChar + 1;\n  } while (*nextChar != character);\n  return nextChar;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_first_occurrence_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "currentChar",
                "pcVar2": "nextChar"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int destinationAddr,undefined *sourceAddr,int length)\n\n{\n  undefined *endAddr;\n  undefined *currentDestAddr;\n  \n  currentDestAddr = (undefined *)(destinationAddr + -1);\n  endAddr = sourceAddr + length;\n  for (; sourceAddr != endAddr; sourceAddr = sourceAddr + 1) {\n    currentDestAddr = currentDestAddr + 1;\n    *currentDestAddr = *sourceAddr;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "destinationAddr",
                "param_2": "sourceAddr",
                "param_3": "length",
                "puVar1": "endAddr",
                "puVar2": "currentDestAddr"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_range_08005646",
            "code": "\nvoid copyRange_08005646(undefined *dest,undefined *src,int size)\n\n{\n  undefined *endPtr;\n  \n  endPtr = src + size;\n  if ((src < dest) && (dest < endPtr)) {\n    dest = dest + size;\n    size = size - (int)endPtr;\n    while (endPtr + size != (undefined *)0x0) {\n      endPtr = endPtr + -1;\n      dest = dest + -1;\n      *dest = *endPtr;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != endPtr; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_range_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "process_data_0800567c",
            "code": "\nvoid processData_0800567c(undefined4 *outputArray,int inputSize,undefined4 param3,undefined4 param4)\n\n{\n  int **tempPtr1;\n  int **tempPtr2;\n  int **tempPtr3;\n  int *tempVar1;\n  int **tempPtr4;\n  int **tempPtr5;\n  \n  if (inputSize == 0) {\n    return;\n  }\n  tempPtr5 = (int **)(inputSize + -4);\n  if (*(int *)(inputSize + -4) < 0) {\n    tempPtr5 = (int **)((int)tempPtr5 + *(int *)(inputSize + -4));\n  }\n  FUNC_0800583c();\n  tempPtr3 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    tempPtr5[1] = (int *)0x0;\n    tempPtr2 = tempPtr1;\n    DAT_200002ac = tempPtr5;\n  }\n  else {\n    tempPtr3 = DAT_200002ac;\n    if (tempPtr5 < DAT_200002ac) {\n      tempPtr2 = (int **)*tempPtr5;\n      tempPtr3 = (int **)((int)tempPtr5 + (int)tempPtr2);\n      if (DAT_200002ac == tempPtr3) {\n        tempVar1 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        tempPtr3 = (int **)((int)tempVar1 + (int)tempPtr2);\n        *tempPtr5 = (int *)tempPtr3;\n      }\n      tempPtr5[1] = (int *)DAT_200002ac;\n      DAT_200002ac = tempPtr5;\n    }\n    else {\n      do {\n        tempPtr4 = tempPtr3;\n        tempPtr3 = (int **)tempPtr4[1];\n        if (tempPtr3 == (int **)0x0) break;\n      } while (tempPtr3 <= tempPtr5);\n      tempPtr2 = (int **)*tempPtr4;\n      if ((int **)((int)tempPtr4 + (int)tempPtr2) == tempPtr5) {\n        tempPtr2 = (int **)((int)tempPtr2 + (int)*tempPtr5);\n        *tempPtr4 = (int *)tempPtr2;\n        if (tempPtr3 == (int **)((int)tempPtr4 + (int)tempPtr2)) {\n          tempVar1 = *tempPtr3;\n          tempPtr3 = (int **)tempPtr3[1];\n          tempPtr2 = (int **)((int)tempPtr2 + (int)tempVar1);\n          *tempPtr4 = (int *)tempPtr2;\n          tempPtr4[1] = (int *)tempPtr3;\n        }\n      }\n      else if (tempPtr5 < (int **)((int)tempPtr4 + (int)tempPtr2)) {\n        *outputArray = 0xc;\n      }\n      else {\n        tempPtr2 = (int **)((int)tempPtr5 + (int)*tempPtr5);\n        if (tempPtr3 == tempPtr2) {\n          tempVar1 = *tempPtr3;\n          tempPtr3 = (int **)tempPtr3[1];\n          tempPtr2 = (int **)((int)tempVar1 + (int)*tempPtr5);\n          *tempPtr5 = (int *)tempPtr2;\n        }\n        tempPtr5[1] = (int *)tempPtr3;\n        tempPtr4[1] = (int *)tempPtr5;\n      }\n    }\n  }\n  FUNC_0800583e(outputArray,tempPtr2,tempPtr3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "process_data_0800567c",
                "param_1": "outputArray",
                "param_2": "inputSize",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "tempPtr1",
                "ppiVar1": "tempPtr2",
                "ppiVar2": "tempPtr3",
                "piVar3": "tempVar1",
                "ppiVar4": "tempPtr4",
                "ppiVar5": "tempPtr5"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *output_buffer,uint buffer_size)\n\n{\n  uint *current_node;\n  int remaining_size;\n  uint *previous_node;\n  uint node_difference;\n  uint *new_node;\n  uint allocated_size;\n  \n  allocated_size = (buffer_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < buffer_size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_node = DAT_200002ac;\n    new_node = DAT_200002ac;\n    while (previous_node = current_node, previous_node != (uint *)0x0) {\n      node_difference = *previous_node - allocated_size;\n      if (-1 < (int)node_difference) {\n        if (node_difference < 0xc) {\n          if (new_node == previous_node) {\n            current_node = (uint *)new_node[1];\n            DAT_200002ac = current_node;\n          }\n          else {\n            current_node = (uint *)previous_node[1];\n          }\n          if (new_node != previous_node) {\n            new_node[1] = (uint)current_node;\n            new_node = previous_node;\n          }\n        }\n        else {\n          *previous_node = node_difference;\n          *(uint *)((int)previous_node + node_difference) = allocated_size;\n          new_node = (uint *)((int)previous_node + node_difference);\n        }\n        goto LAB_08005778;\n      }\n      new_node = previous_node;\n      current_node = (uint *)previous_node[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_pointer_if_offset_valid_0800581c(output_buffer);\n    }\n    current_node = (uint *)update_pointer_if_offset_valid_0800581c(output_buffer,allocated_size);\n    if ((current_node != (uint *)0xffffffff) &&\n       ((new_node = (uint *)((int)current_node + 3U & 0xfffffffc), current_node == new_node ||\n        (remaining_size = update_pointer_if_offset_valid_0800581c(output_buffer,(int)new_node - (int)current_node), remaining_size != -1)))) {\n      *new_node = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(output_buffer);\n      allocated_size = (int)new_node + 0xbU & 0xfffffff8;\n      remaining_size = allocated_size - (int)(new_node + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)new_node + remaining_size) = -remaining_size;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_0800583e(output_buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "output_buffer",
                "param_2": "buffer_size",
                "puVar1": "current_node",
                "iVar2": "remaining_size",
                "puVar3": "previous_node",
                "uVar4": "node_difference",
                "puVar5": "new_node",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "process_data_080057d0",
            "code": "\nint processData_080057d0(undefined4 input_data,int size,uint threshold,undefined4 extra_param)\n\n{\n  int result;\n  uint sum;\n  \n  if (size != 0) {\n    if (threshold == 0) {\n      processData_080057d0Helper();\n      result = 0;\n    }\n    else {\n      sum = calculateSum();\n      result = size;\n      if ((sum < threshold) && (result = allocateMemory(input_data,threshold), result != 0)) {\n        copyData(result,size,threshold);\n        processData_080057d0Helper(input_data,size);\n      }\n    }\n    return result;\n  }\n  result = allocateMemory(input_data,threshold,threshold,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "process_data_080057d0",
                "param_1": "input_data",
                "param_2": "size",
                "param_3": "threshold",
                "param_4": "extra_param",
                "iVar1": "result",
                "uVar2": "sum",
                "process_data_0800567c": "processDataHelper",
                "calculate_sum_08005840": "calculateSum",
                "allocate_memory_08005714": "allocateMemory",
                "copy_data_08005630": "copyData"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_pointer_if_offset_valid_0800581c",
            "code": "\nvoid updatePointerIfOffsetValid_0800581c(int *resultPointer,undefined4 offset)\n\n{\n  int offsetResult;\n  \n  DAT_2000169c = 0;\n  offsetResult = add_offset_to_pointer_080072b8(offset);\n  if ((offsetResult == -1) && (DAT_2000169c != 0)) {\n    *resultPointer = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_pointer_if_offset_valid_0800581c",
                "param_1": "resultPointer",
                "param_2": "offset",
                "iVar1": "offsetResult"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 input1,int input2)\n\n{\n  int sum;\n  \n  sum = *(int *)(input2 + -4) + -4;\n  if (*(int *)(input2 + -4) < 0) {\n    sum = sum + *(int *)(input2 + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "calculate_and_return_result_08005854",
            "code": "\nundefined8 calculateAndReturnResult_08005854(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  int result;\n  undefined4 *dataPointer;\n  int *dataPointerInt;\n  undefined8 resultVar1;\n  undefined8 resultVar2;\n  undefined4 flag;\n  undefined *dataPointerChar;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined8 positiveInfinity;\n  int parameterCheckResult;\n  \n  resultVar1 = calculate_result_08005c70();\n  if (DAT_20000224 == -1) {\n    return resultVar1;\n  }\n  parameterCheckResult = check_parameters_08000a04(inputParam1,inputParam2,inputParam1,inputParam2);\n  if (parameterCheckResult != 0) {\n    return resultVar1;\n  }\n  resultVar2 = FUNC_0800708c(inputParam1,inputParam2);\n  result = is_cy_null_080009f0((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return resultVar1;\n  }\n  flag = 1;\n  dataPointerChar = &DAT_080073ac;\n  param1 = inputParam1;\n  param2 = inputParam2;\n  param3 = inputParam1;\n  param4 = inputParam2;\n  positiveInfinity = get_positive_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = get_default_value_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  dataPointer = (undefined4 *)get_data_pointer_080072ac();\n  *dataPointer = 0x21;\nLAB_080058d0:\n  if (parameterCheckResult != 0) {\n    dataPointerInt = (int *)get_data_pointer_080072ac();\n    *dataPointerInt = parameterCheckResult;\n  }\n  return positiveInfinity;\n}\n\n",
            "renaming": {
                "FUN_08005854": "calculate_and_return_result_08005854",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "result",
                "puVar2": "dataPointer",
                "piVar3": "dataPointerInt",
                "uVar4": "resultVar1",
                "uVar5": "resultVar2",
                "local_48": "flag",
                "local_44": "dataPointerChar",
                "local_40": "param1",
                "uStack_3c": "param2",
                "local_38": "param3",
                "uStack_34": "param4",
                "local_30": "positiveInfinity",
                "local_28": "parameterCheckResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_result_thunk_08006070",
            "code": "\nundefined8 calculate_result_thunk_08006070(uint input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 final_result;\n  undefined8 temp_result;\n  \n  result5 = input_param4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-input_param3 | input_param3) >> 0x1f)) ||\n     (result3 = input_param2 & 0x7fffffff, 0x7ff00000 < (result3 | (-input_param1 | input_param1) >> 0x1f))) {\n    final_result = calculate_product_0800016c(input_param1,input_param2,input_param3,input_param4,input_param4);\n    return final_result;\n  }\n  if ((input_param4 + 0xc0100000 | input_param3) == 0) {\n    final_result = calculate_result_thunk_08006070_08006d68();\n    return final_result;\n  }\n  result2 = (int)input_param4 >> 0x1e & 2U | input_param2 >> 0x1f;\n  if ((input_param1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(input_param2,input_param1);\n    }\nLAB_0800613e:\n    final_result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_param3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)input_param4 < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            final_result = 0;\n          }\n          else {\n            calculate_double_08000724(input_param1,input_param2);\n            FUNC_0800708c();\n            final_result = calculate_result_thunk_08006070_08006d68();\n          }\n        }\n        else {\n          final_result = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)final_result >> 0x20);\n        result1 = (undefined4)final_result;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          temp_result = reverse_bits_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          final_result = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return final_result;\n          }\n          final_result = reverse_bits_08000168(result1,result4,0x33145c07,0x3ca1a626);\n          temp_result = 0x400921fb54442d18;\n        }\n        final_result = reverse_bits_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        return final_result;\n      }\n    }\n    if ((int)input_param2 < 0) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_result_thunk_08006070",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "uVar6": "final_result",
                "uVar7": "temp_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "improved_float_calculator_08005900",
            "code": "\nundefined8 improved_float_calculator_08005900(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  char flag;\n  int result;\n  int *ptr_result;\n  undefined4 *ptr_data;\n  int bit_result;\n  undefined4 low_bits;\n  undefined4 high_bits;\n  undefined8 original_result;\n  undefined8 updated_result;\n  undefined4 check_type;\n  undefined *msg_ptr;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined8 final_result;\n  int default_value;\n  \n  original_result = improved_float_calculator_08005900_08006228();\n  flag = DAT_20000224;\n  low_bits = (undefined4)((ulonglong)original_result >> 0x20);\n  high_bits = (undefined4)original_result;\n  if (DAT_20000224 == -1) {\n    return original_result;\n  }\n  result = check_parameters_08000a04(input_3,input_4,input_3,input_4);\n  if (result != 0) {\n    return original_result;\n  }\n  result = check_parameters_08000a04(input_1,input_2,input_1,input_2);\n  param_1_copy = input_1;\n  param_2_copy = input_2;\n  param_3_copy = input_3;\n  param_4_copy = input_4;\n  if (result == 0) {\n    result = is_input_valid_080009a0(input_1,input_2,0,0);\n    if (result != 0) {\n      result = is_input_valid_080009a0(input_3,input_4,0,0);\n      if (result != 0) {\n        check_type = 1;\n        msg_ptr = &DAT_080073b1;\n        final_result = 0;\n        default_value = 0;\n        if (flag != '\\0') {\n          final_result = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = get_most_significant_bit_08007092(input_3,input_4);\n      if (result == 0) {\n        return original_result;\n      }\n      result = is_input_valid_080009b4(input_3,input_4,0,0);\n      if (result == 0) {\n        return original_result;\n      }\n      check_type = 1;\n      msg_ptr = &DAT_080073b1;\n      default_value = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      final_result = 0xfff0000000000000;\n      default_value = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = get_most_significant_bit_08007092(high_bits,low_bits);\n    if (((result != 0) || (bit_result = get_most_significant_bit_08007092(input_1,input_2), bit_result == 0)) ||\n       (bit_result = get_most_significant_bit_08007092(input_3,input_4), bit_result == 0)) {\n      result = is_input_valid_080009a0(high_bits,low_bits,0,0);\n      if (result == 0) {\n        return original_result;\n      }\n      result = get_most_significant_bit_08007092(input_1,input_2);\n      if (result == 0) {\n        return original_result;\n      }\n      result = get_most_significant_bit_08007092(input_3,input_4);\n      if (result == 0) {\n        return original_result;\n      }\n      check_type = 4;\n      msg_ptr = &DAT_080073b1;\n      default_value = 0;\n      final_result._0_4_ = 0;\n      final_result._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    default_value = check_parameters_08000a04(high_bits,low_bits);\n    flag = DAT_20000224;\n    if (default_value != 0) {\n      msg_ptr = &DAT_080073b1;\n      check_type = 1;\n      default_value = result;\n      if (DAT_20000224 != '\\0') {\n        final_result = calculate_double_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      msg_ptr = &DAT_080073b1;\n      check_type = 1;\n      final_result = 0;\n      goto LAB_08005978;\n    }\n    msg_ptr = &DAT_080073b1;\n    check_type = 3;\n    if (DAT_20000224 == '\\0') {\n      final_result._0_4_ = 0xe0000000;\n      final_result._4_4_ = 0x47efffff;\n      result = is_input_valid_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        original_result = calculate_result_080004d0(input_3,input_4,0,0x3fe00000);\n        updated_result = calculate_updated_result_080070b0();\n        result = is_input_valid_080009a0((int)original_result,(int)((ulonglong)original_result >> 0x20),(int)updated_result,\n                             (int)((ulonglong)updated_result >> 0x20));\n        if (result == 0) {\n          final_result._0_4_ = 0xe0000000;\n          final_result._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = get_default_value_0800709e(&check_type);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      final_result._0_4_ = 0;\n      final_result._4_4_ = 0x7ff00000;\n      result = is_input_valid_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        original_result = calculate_result_080004d0(input_3,input_4,0,0x3fe00000);\n        updated_result = calculate_updated_result_080070b0();\n        result = is_input_valid_080009a0((int)original_result,(int)((ulonglong)original_result >> 0x20),(int)updated_result,\n                             (int)((ulonglong)updated_result >> 0x20));\n        if (result == 0) {\n          final_result._0_4_ = 0;\n          final_result._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    ptr_data = (undefined4 *)get_data_pointer_080072ac();\n    high_bits = 0x22;\n  }\n  else {\n    result = is_input_valid_080009a0(input_3,input_4,0,0);\n    if (result == 0) {\n      return original_result;\n    }\n    check_type = 1;\n    msg_ptr = &DAT_080073b1;\n    final_result = 0x3ff0000000000000;\n    default_value = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = get_default_value_0800709e(&check_type);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    ptr_data = (undefined4 *)get_data_pointer_080072ac();\n    high_bits = 0x21;\n  }\n  *ptr_data = high_bits;\nLAB_080059d0:\n  if (default_value != 0) {\n    ptr_result = (int *)get_data_pointer_080072ac();\n    *ptr_result = default_value;\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08005900": "improved_float_calculator_08005900",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "ptr_result",
                "puVar4": "ptr_data",
                "iVar5": "bit_result",
                "uVar6": "low_bits",
                "uVar7": "high_bits",
                "uVar8": "original_result",
                "uVar9": "updated_result",
                "local_50": "check_type",
                "local_4c": "msg_ptr",
                "local_48": "param_1_copy",
                "uStack_44": "param_2_copy",
                "local_40": "param_3_copy",
                "uStack_3c": "param_4_copy",
                "local_38": "final_result",
                "local_30": "default_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "calculate_and_get_default_value_08005bc8",
            "code": "\nundefined8 calculate_and_get_default_value_08005bc8(undefined4 input_parameter_1,undefined4 input_parameter_2)\n\n{\n  char char_value;\n  int check_result;\n  int *data_pointer_int;\n  undefined4 *data_pointer_uint;\n  undefined8 result;\n  undefined4 flag;\n  undefined *char_pointer;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 temp_param_1;\n  undefined4 temp_param_2;\n  undefined8 default_value;\n  int parameter_check_result;\n  \n  result = calculate_float_08006c0c();\n  char_value = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  parameter_check_result = check_parameters_08000a04(input_parameter_1,input_parameter_2,input_parameter_1,input_parameter_2);\n  if (parameter_check_result != 0) {\n    return result;\n  }\n  check_result = is_input_valid_080009b4(input_parameter_1,input_parameter_2,0,0);\n  if (check_result == 0) {\n    return result;\n  }\n  flag = 1;\n  char_pointer = &DAT_080073b5;\n  local_param_1 = input_parameter_1;\n  local_param_2 = input_parameter_2;\n  temp_param_1 = input_parameter_1;\n  temp_param_2 = input_parameter_2;\n  if (char_value == '\\0') {\n    default_value = 0;\nLAB_08005c26:\n    check_result = get_default_value_0800709e(&flag);\n    if (check_result != 0) goto LAB_08005c2e;\n  }\n  else {\n    default_value = calculate_double_08000724(0,0,0,0);\n    if (char_value != '\\x02') goto LAB_08005c26;\n  }\n  data_pointer_uint = (undefined4 *)get_data_pointer_080072ac();\n  *data_pointer_uint = 0x21;\nLAB_08005c2e:\n  if (parameter_check_result != 0) {\n    data_pointer_int = (int *)get_data_pointer_080072ac();\n    *data_pointer_int = parameter_check_result;\n  }\n  return default_value;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "calculate_and_get_default_value_08005bc8",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "cVar1": "char_value",
                "iVar2": "check_result",
                "piVar3": "data_pointer_int",
                "puVar4": "data_pointer_uint",
                "uVar5": "result",
                "local_50": "flag",
                "local_4c": "char_pointer",
                "local_48": "local_param_1",
                "uStack_44": "local_param_2",
                "local_40": "temp_param_1",
                "uStack_3c": "temp_param_2",
                "local_38": "default_value",
                "local_30": "parameter_check_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_result_08005c70",
            "code": "\nundefined8 calculate_result_08005c70(uint input_1,uint input_2)\n\n{\n  int isCyNull;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  uint temp_input_2;\n  undefined8 result_1;\n  undefined8 result_2;\n  undefined8 result_3;\n  \n  result_1 = CONCAT44(input_2,input_1);\n  temp_input_2 = input_2 & 0x7fffffff;\n  if (temp_input_2 < 0x3ff00000) {\n    if (temp_input_2 < 0x3fe00000) {\n      if (0x3e3fffff < temp_input_2) {\n        result_2 = calculate_result_08005c70_080004d0(input_1,input_2,input_1,input_2);\n        temp_6 = (undefined4)((ulonglong)result_2 >> 0x20);\n        temp_5 = (undefined4)result_2;\n        result_2 = calculate_result_08005c70_080004d0(temp_5,temp_6,0xdfdf709,0x3f023de1);\n        result_2 = calculate_product_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x7501b288,0x3f49efe0);\n        result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),temp_5,temp_6);\n        result_2 = reverse_bits_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0xb5688f3b,0x3fa48228);\n        result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),temp_5,temp_6);\n        result_2 = calculate_product_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0xe884455,0x3fc9c155);\n        result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),temp_5,temp_6);\n        result_2 = reverse_bits_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),temp_5,temp_6);\n        result_2 = calculate_product_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x55555555,0x3fc55555);\n        result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),temp_5,temp_6);\n        result_3 = calculate_result_08005c70_080004d0(temp_5,temp_6,0xb12e9282,0x3fb3b8c5);\n        result_3 = reverse_bits_08000168((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x1b8d0159,0x3fe6066c);\n        result_3 = calculate_result_08005c70_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),temp_5,temp_6);\n        result_3 = calculate_product_0800016c((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x9c598ac8,0x40002ae5);\n        result_3 = calculate_result_08005c70_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),temp_5,temp_6);\n        result_3 = reverse_bits_08000168((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x1c8a2d4b,0x40033a27);\n        result_3 = calculate_result_08005c70_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),temp_5,temp_6);\n        result_3 = calculate_product_0800016c((int)result_3,(int)((ulonglong)result_3 >> 0x20),0,0x3ff00000);\n        result_2 = calculate_double_08000724((int)result_2,(int)((ulonglong)result_2 >> 0x20),(int)result_3,\n                              (int)((ulonglong)result_3 >> 0x20));\n        result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      result_2 = calculate_product_0800016c(input_1,input_2,0x8800759c,0x7e37e43c);\n      isCyNull = is_cy_null_080009f0((int)result_2,(int)((ulonglong)result_2 >> 0x20),0,0x3ff00000);\n      if (isCyNull != 0) {\n        return result_1;\n      }\n    }\n    result_1 = FUNC_0800708c(input_1,input_2);\n    result_1 = reverse_bits_08000168(0,0x3ff00000,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n    result_1 = calculate_result_08005c70_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x3fe00000);\n    temp_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n    temp_5 = (undefined4)result_1;\n    result_1 = calculate_result_08005c70_080004d0(temp_5,temp_1,0xdfdf709,0x3f023de1);\n    result_1 = calculate_product_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x7501b288,0x3f49efe0);\n    result_1 = calculate_result_08005c70_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),temp_5,temp_1);\n    result_1 = reverse_bits_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xb5688f3b,0x3fa48228);\n    result_1 = calculate_result_08005c70_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),temp_5,temp_1);\n    result_1 = calculate_product_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xe884455,0x3fc9c155);\n    result_1 = calculate_result_08005c70_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),temp_5,temp_1);\n    result_1 = reverse_bits_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result_1 = calculate_result_08005c70_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),temp_5,temp_1);\n    result_1 = calculate_product_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x55555555,0x3fc55555);\n    result_1 = calculate_result_08005c70_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),temp_5,temp_1);\n    temp_2 = (undefined4)((ulonglong)result_1 >> 0x20);\n    result_2 = calculate_result_08005c70_080004d0(temp_5,temp_1,0xb12e9282,0x3fb3b8c5);\n    result_2 = reverse_bits_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x1b8d0159,0x3fe6066c);\n    result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),temp_5,temp_1);\n    result_2 = calculate_product_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x9c598ac8,0x40002ae5);\n    result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),temp_5,temp_1);\n    result_2 = reverse_bits_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x1c8a2d4b,0x40033a27);\n    result_2 = calculate_result_08005c70_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),temp_5,temp_1);\n    result_2 = calculate_product_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0,0x3ff00000);\n    temp_3 = (undefined4)((ulonglong)result_2 >> 0x20);\n    result_3 = calculate_float_08006c0c(temp_5,temp_1);\n    temp_4 = (undefined4)((ulonglong)result_3 >> 0x20);\n    temp_6 = (undefined4)result_3;\n    if (temp_input_2 < 0x3fef3333) {\n      result_1 = calculate_double_08000724((int)result_1,temp_2,(int)result_2,temp_3);\n      result_2 = calculate_product_0800016c(temp_6,temp_4,temp_6,temp_4);\n      result_1 = calculate_result_08005c70_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      result_2 = calculate_result_08005c70_080004d0(0,temp_4,0,temp_4);\n      result_2 = reverse_bits_08000168(temp_5,temp_1,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_3 = calculate_product_0800016c(temp_6,temp_4,0,temp_4);\n      result_2 = calculate_double_08000724((int)result_2,(int)((ulonglong)result_2 >> 0x20),(int)result_3,\n                            (int)((ulonglong)result_3 >> 0x20));\n      temp_5 = (undefined4)((ulonglong)result_2 >> 0x20);\n      result_2 = calculate_product_0800016c((int)result_2,temp_5,(int)result_2,temp_5);\n      result_2 = reverse_bits_08000168(0x33145c07,0x3c91a626,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_1 = reverse_bits_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      result_2 = calculate_product_0800016c(0,temp_4,0,temp_4);\n      result_2 = reverse_bits_08000168(0x54442d18,0x3fe921fb,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_1 = reverse_bits_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      temp_5 = 0x3fe921fb;\n    }\n    else {\n      result_1 = calculate_double_08000724((int)result_1,temp_2,(int)result_2,temp_3);\n      result_1 = calculate_result_08005c70_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),temp_6,temp_4);\n      result_1 = calculate_product_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),temp_6,temp_4);\n      temp_5 = (undefined4)((ulonglong)result_1 >> 0x20);\n      result_1 = calculate_product_0800016c((int)result_1,temp_5,(int)result_1,temp_5);\n      result_1 = reverse_bits_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x33145c07,0x3c91a626);\n      temp_5 = 0x3ff921fb;\n    }\n    result_1 = reverse_bits_08000168(0x54442d18,temp_5,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n    if ((int)input_2 < 1) {\n      result_1 = CONCAT44((int)((ulonglong)result_1 >> 0x20) + -0x80000000,(int)result_1);\n    }\n  }\n  else {\n    if ((temp_input_2 + 0xc0100000 | input_1) != 0) {\n      result_1 = reverse_bits_08000168(input_1,input_2,input_1,input_2);\n      temp_5 = (undefined4)((ulonglong)result_1 >> 0x20);\n      result_1 = calculate_double_08000724((int)result_1,temp_5,(int)result_1,temp_5);\n      return result_1;\n    }\n    result_1 = calculate_result_08005c70_080004d0(input_1,input_2,0x54442d18,0x3ff921fb);\n    result_2 = calculate_result_08005c70_080004d0(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result_1 = calculate_product_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                         (int)((ulonglong)result_2 >> 0x20));\n  }\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_result_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "isCyNull",
                "uVar2": "temp_1",
                "uVar3": "temp_2",
                "uVar4": "temp_3",
                "uVar5": "temp_4",
                "uVar6": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "temp_input_2",
                "uVar9": "result_1",
                "uVar10": "result_2",
                "uVar11": "result_3"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculate_result_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint bitShift;\n  uint temp1;\n  int temp2;\n  uint temp3;\n  undefined8 result2;\n  undefined8 result3;\n  \n  temp3 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp3 | (-input3 | input3) >> 0x1f)) ||\n     (temp1 = input2 & 0x7fffffff, 0x7ff00000 < (temp1 | (-input1 | input1) >> 0x1f))) {\n    result2 = calculate_product_0800016c(input1,input2,input3,input4,input4);\n    return result2;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result2 = calculate_result_08006070_08006d68();\n    return result2;\n  }\n  bitShift = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | temp1) == 0) {\n    if (bitShift == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (bitShift != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result2 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | temp3) != 0) {\n      if (temp3 == 0x7ff00000) {\n        if (temp1 == 0x7ff00000) {\n          if (bitShift == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (bitShift == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (bitShift != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (bitShift == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (bitShift != 3) {\n          if (bitShift != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp1 != 0x7ff00000) {\n        temp2 = (int)(temp1 - temp3) >> 0x14;\n        if (temp2 < 0x3d) {\n          if (((int)input4 < 0) && (temp2 + 0x3c < 0 != SCARRY4(temp2,0x3c))) {\n            result2 = 0;\n          }\n          else {\n            calculate_double_08000724(input1,input2);\n            FUNC_0800708c();\n            result2 = calculate_result_08006070_08006d68();\n          }\n        }\n        else {\n          result2 = 0x3ff921fb54442d18;\n        }\n        temp2 = (int)((ulonglong)result2 >> 0x20);\n        result1 = (undefined4)result2;\n        if (bitShift == 1) {\n          return CONCAT44(temp2 + -0x80000000,result1);\n        }\n        if (bitShift == 2) {\n          result3 = reverse_bits_08000168(result1,temp2,0x33145c07,0x3ca1a626);\n          result2 = 0x400921fb54442d18;\n        }\n        else {\n          if (bitShift == 0) {\n            return result2;\n          }\n          result2 = reverse_bits_08000168(result1,temp2,0x33145c07,0x3ca1a626);\n          result3 = 0x400921fb54442d18;\n        }\n        result2 = reverse_bits_08000168((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n        return result2;\n      }\n    }\n    if ((int)input2 < 0) {\n      result2 = 0xbff921fb54442d18;\n    }\n    else {\n      result2 = 0x3ff921fb54442d18;\n    }\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "bitShift",
                "uVar3": "temp1",
                "iVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "result2",
                "uVar7": "result3"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "improved_float_calculator_08006228",
            "code": "\nuint improved_float_calculator_08006228(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint result8;\n  undefined4 result9;\n  int temp1;\n  int temp2;\n  undefined4 temp3;\n  uint temp4;\n  undefined4 temp5;\n  int temp6;\n  uint temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  longlong temp14;\n  ulonglong temp15;\n  undefined8 temp16;\n  uint flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  int flag4;\n  \n  temp11 = CONCAT44(input2,input1);\n  temp7 = input4 & 0x7fffffff;\n  if ((temp7 | input3) == 0) {\n    return 0;\n  }\n  temp4 = input2 & 0x7fffffff;\n  if (temp4 < 0x7ff00001) {\n    if (temp4 == 0x7ff00000) {\n      if (input1 == 0) {\n        if (0x7ff00000 < temp7) goto LAB_08006278;\nLAB_08006262:\n        if ((temp7 != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)input2) goto LAB_0800632a;\n          if (temp7 < 0x43400000) {\n            if (temp7 < 0x3ff00000) {\nLAB_0800632a:\n              flag1 = 0;\n              goto LAB_080062ba;\n            }\n            temp1 = ((int)temp7 >> 0x14) + -0x3ff;\n            if (0x14 < temp1) {\n              result2 = input3 >> (0x34U - temp1 & 0xff);\n              if (input3 == result2 << (0x34U - temp1 & 0xff)) {\n                flag1 = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              result2 = (int)temp7 >> (0x14U - temp1 & 0xff);\n              if (temp7 == result2 << (0x14U - temp1 & 0xff)) {\n                flag1 = 2 - (result2 & 1);\n              }\n              else {\n                flag1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            flag1 = 0;\n          }\n          else {\n            flag1 = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (temp7 == 0x7ff00000) {\n                if ((temp4 + 0xc0100000 | input1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp4) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (temp7 == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return input1;\n                }\n                temp10 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)input2)) {\n                temp7 = calculate_float_08006c0c(input1,input2);\n                return temp7;\n              }\n            }\n          }\n          temp10 = FUNC_0800708c(input1,input2);\n          temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n          result1 = (undefined4)temp10;\n          temp15 = CONCAT44(input2,result1) & 0x7fffffffffffffff;\n          if ((input1 == 0) && ((temp4 == 0 || ((input2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              temp10 = calculate_double_08000724(0,0x3ff00000,result1,temp8);\n            }\n            if (-1 < (int)input2) {\n              return (uint)temp10;\n            }\n            if ((flag1 | temp4 + 0xc0100000) != 0) {\n              return (uint)temp10;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)input2 >> 0x1f);\n            temp10 = temp11;\n            if ((flag1 | result2) != 0) {\n              if (temp7 < 0x41e00001) {\n                flag4 = 0;\n                if (temp4 < 0x100000) {\n                  temp15 = calculate_result_080004d0();\n                  flag4 = -0x35;\n                }\n                temp7 = (uint)(temp15 >> 0x20);\n                result1 = (undefined4)temp15;\n                flag4 = ((int)temp7 >> 0x14) + -0x3ff + flag4;\n                temp7 = temp7 & 0xfffff;\n                temp4 = temp7 | 0x3ff00000;\n                if (temp7 < 0x3988f) {\nLAB_08006628:\n                  temp1 = 0;\n                }\n                else {\n                  if (0xbb679 < temp7) {\n                    temp4 = temp4 - 0x100000;\n                    flag4 = flag4 + 1;\n                    goto LAB_08006628;\n                  }\n                  temp1 = 1;\n                }\n                temp2 = temp1 * 8;\n                temp3 = (&DAT_080073c0)[temp1 * 2];\n                temp5 = (&DAT_080073c4)[temp1 * 2];\n                temp11 = reverse_bits_08000168(result1,temp4,temp3,temp5);\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_product_0800016c(result1,temp4,temp3,temp5);\n                temp10 = calculate_double_08000724(0,0x3ff00000,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                result4 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0((int)temp11,temp9,(int)temp10,result4);\n                result5 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = (undefined4)temp12;\n                temp12 = calculate_result_080004d0(0,result5);\n                temp11 = reverse_bits_08000168((int)temp11,temp9,(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = reverse_bits_08000168(0,((int)temp4 >> 1 | 0x20000000U) + 0x80000 + temp1 * 0x40000,\n                                      temp3,temp5);\n                temp12 = reverse_bits_08000168(result1,temp4,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),0,result5);\n                temp11 = reverse_bits_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp11 = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,result4\n                                     );\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_result_080004d0(temp8,result5);\n                result4 = (undefined4)((ulonglong)temp10 >> 0x20);\n                result1 = (undefined4)temp10;\n                temp10 = calculate_result_080004d0(result1,result4,0x4a454eef,0x3fca7e28);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp12 = calculate_result_080004d0(result1,result4,result1,result4);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_product_0800016c(temp8,result5,0,result5);\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp10 = calculate_product_0800016c((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0(0,result5,0,result5);\n                result4 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp13 = calculate_product_0800016c((int)temp12,result4,0,0x40080000);\n                calculate_product_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp10,result1);\n                temp13 = calculate_result_080004d0(0,result5,0,result6);\n                temp3 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp16 = reverse_bits_08000168(0,result6,0,0x40080000);\n                temp12 = reverse_bits_08000168((int)temp16,(int)((ulonglong)temp16 >> 0x20),(int)temp12,result4\n                                     );\n                temp10 = reverse_bits_08000168((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                     );\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp11 = calculate_result_080004d0((int)temp11,temp9,0,result6);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                calculate_product_0800016c((int)temp13,temp3,(int)temp10,result1);\n                temp11 = calculate_result_080004d0(0,result7,0xe0000000,0x3feec709);\n                temp12 = reverse_bits_08000168(0,result7,(int)temp13,temp3);\n                temp10 = reverse_bits_08000168((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                     );\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp12 = calculate_result_080004d0(0,result7,0x145b01f5,0xbe3e2fe0);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp2),\n                                      *(undefined4 *)(&DAT_080073e4 + temp2));\n                temp12 = calculate_shifted_value_08000404(flag4);\n                result1 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = *(undefined4 *)(&DAT_080073d0 + temp2);\n                temp9 = *(undefined4 *)(&DAT_080073d4 + temp2);\n                temp13 = calculate_product_0800016c((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp13 = calculate_product_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp8,temp9);\n                calculate_product_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp12,result1);\n                temp12 = reverse_bits_08000168(0,result8,(int)temp12,result1);\n                temp14 = reverse_bits_08000168((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp8,temp9);\n                temp7 = result8;\n              }\n              else {\n                if (0x43f00000 < temp7) {\n                  if (temp4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input1 = 0x8800759c;\n                  input2 = 0x7e37e43c;\n                  temp11 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp4) goto LAB_08006418;\n                temp11 = reverse_bits_08000168(result1,temp8,0,0x3ff00000);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                result1 = (undefined4)temp11;\n                temp11 = calculate_result_080004d0(result1,temp8,0x60000000,0x3ff71547);\n                temp10 = calculate_result_080004d0(result1,temp8,0xf85ddf44,0x3e54ae0b);\n                temp12 = calculate_result_080004d0(result1,temp8,0,0x3fd00000);\n                temp12 = reverse_bits_08000168(0x55555555,0x3fd55555,(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),result1,temp8);\n                temp12 = reverse_bits_08000168(0,0x3fe00000,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp13 = calculate_result_080004d0(result1,temp8,result1,temp8);\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                      (int)((ulonglong)temp13 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp10 = reverse_bits_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                calculate_product_0800016c((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                             (int)((ulonglong)temp10 >> 0x20));\n                temp14 = (ulonglong)result3 << 0x20;\n                temp7 = result3;\n              }\n              temp11 = reverse_bits_08000168((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp11 = reverse_bits_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              if ((flag1 - 1 | result2) == 0) {\n                input2 = 0xbff00000;\n              }\n              else {\n                input2 = 0x3ff00000;\n              }\n              flag1 = 0;\n              temp10 = reverse_bits_08000168(input3,input4,0,input4);\n              temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp7);\n              temp11 = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),input3,input4);\n              temp11 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n              result1 = (undefined4)temp11;\n              temp11 = calculate_result_080004d0(0,temp7,0,input4);\n              result4 = (undefined4)((ulonglong)temp11 >> 0x20);\n              temp8 = (undefined4)temp11;\n              temp14 = calculate_product_0800016c(result1,temp9,temp8,result4);\n              temp4 = (uint)((ulonglong)temp14 >> 0x20);\n              temp7 = (uint)temp14;\n              if (0x408fffffffffffff < temp14) {\n                if ((temp4 + 0xbf700000 | temp7) == 0) {\n                  temp10 = calculate_product_0800016c(result1,temp9,0x652b82fe,0x3c971547);\n                  temp12 = reverse_bits_08000168(temp7,temp4,temp8,result4);\n                  temp1 = is_cy_null_080009f0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                       (int)((ulonglong)temp12 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                temp11 = calculate_result_080004d0(0,input2,0x8800759c,0x7e37e43c);\n                input1 = 0x8800759c;\n                input2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp4 & 0x7fffffff) < 0x3fe00001) {\n                  temp1 = 0;\n                }\n                else {\n                  temp4 = (0x100000 >> (((int)(temp4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp4;\n                  temp7 = (temp4 * 2 >> 0x15) - 0x3ff;\n                  temp1 = (int)(temp4 & 0xfffff | 0x100000) >> (0x14 - temp7 & 0xff);\n                  if (temp14 < 0) {\n                    temp1 = -temp1;\n                  }\n                  temp11 = reverse_bits_08000168(temp8,result4,0,temp4 & ~(0xfffff >> (temp7 & 0xff)));\n                }\n                flag3 = (undefined4)((ulonglong)temp11 >> 0x20);\n                flag2 = (undefined4)temp11;\n                calculate_product_0800016c(flag2,flag3,result1,temp9);\n                temp11 = calculate_result_080004d0(0,result9,0,0x3fe62e43);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = reverse_bits_08000168(0,result9,flag2,flag3);\n                temp10 = reverse_bits_08000168(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp12 = calculate_result_080004d0(0,result9,0xca86c39,0xbe205c61);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_product_0800016c((int)temp11,temp8,(int)temp10,temp9);\n                result4 = (undefined4)((ulonglong)temp12 >> 0x20);\n                result1 = (undefined4)temp12;\n                temp11 = reverse_bits_08000168(result1,result4,(int)temp11,temp8);\n                temp11 = reverse_bits_08000168((int)temp10,temp9,(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_result_080004d0(result1,result4,result1,result4);\n                result5 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp8 = (undefined4)temp10;\n                temp10 = calculate_result_080004d0(temp8,result5,0x72bea4d0,0x3e663769);\n                temp10 = reverse_bits_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = reverse_bits_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = calculate_product_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = reverse_bits_08000168(result1,result4,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0(result1,result4,(int)temp10,temp8);\n                temp10 = reverse_bits_08000168((int)temp10,temp8,0,0x40000000);\n                temp10 = calculate_double_08000724((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp12 = calculate_result_080004d0(result1,result4,(int)temp11,temp9);\n                temp11 = calculate_product_0800016c((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp11 = reverse_bits_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                temp11 = reverse_bits_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),result1,result4);\n                temp10 = reverse_bits_08000168(0,0x3ff00000,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n                temp2 = (int)((ulonglong)temp10 >> 0x20);\n                temp6 = temp2 + temp1 * 0x100000;\n                temp11 = CONCAT44(temp6,(int)temp10);\n                input1 = flag1;\n                if (temp6 < 0x100000) {\n                  temp11 = calculate_result_with_conditions_080071c0((int)temp10,temp2,temp1);\n                }\n              }\n              else {\n                if ((temp4 + 0x3f6f3400 | temp7) == 0) {\n                  temp10 = reverse_bits_08000168(temp7,temp4,temp8,result4);\n                  temp1 = check_zero_or_carry_080009c8(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                temp11 = calculate_result_080004d0(0,input2,0xc2f8f359,0x1a56e1f);\n                input1 = 0xc2f8f359;\n                input2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              temp7 = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),input1,input2);\n              return temp7;\n            }\n          }\n          result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n          temp10 = reverse_bits_08000168((int)temp10,result1,(int)temp10,result1);\n          temp11 = temp10;\nLAB_08006320:\n          temp7 = calculate_double_08000724((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                (int)((ulonglong)temp11 >> 0x20));\n          return temp7;\n        }\n      }\n    }\n    else if (temp7 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp4 + 0xc0100000 | input1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  temp7 = get_positive_infinity_080070a4(&DAT_0800737e);\n  return temp7;\n}\n\n",
            "renaming": {
                "FUN_08006228": "improved_float_calculator_08006228",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "extraout_r1": "result3",
                "uVar3": "result4",
                "uVar4": "result5",
                "extraout_r1_00": "result6",
                "extraout_r1_01": "result7",
                "extraout_r1_02": "result8",
                "extraout_r1_03": "result9",
                "iVar5": "temp1",
                "iVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5",
                "iVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "temp13",
                "lVar18": "temp14",
                "uVar19": "temp15",
                "uVar20": "temp16",
                "local_70": "flag1",
                "local_68": "flag2",
                "local_64": "flag3",
                "local_54": "flag4"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_08006c0c",
            "code": "\nundefined8 calculate_float_08006c0c(uint input_a,uint input_b)\n\n{\n  undefined4 temp_1;\n  uint temp_2;\n  int shift_count;\n  int temp_3;\n  uint temp_4;\n  uint temp_5;\n  int result_int;\n  uint result_float_part;\n  uint mask;\n  int bit;\n  uint temp_6;\n  undefined8 result;\n  \n  if ((~input_b & 0x7ff00000) == 0) {\n    result = calculate_result(input_a,input_b,input_a,input_b);\n    result = calculate_product(input_a,input_b,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)input_b < 1) {\n    if ((input_b & 0x7fffffff | input_a) == 0) {\n      return CONCAT44(input_b,input_a);\n    }\n    if (input_b != 0) {\n      result = reverse_bits(input_a,input_b,input_a,input_b);\n      temp_1 = (undefined4)((ulonglong)result >> 0x20);\n      result = calculate_double((int)result,temp_1,(int)result,temp_1);\n      return result;\n    }\n  }\n  shift_count = (int)input_b >> 0x14;\n  if (shift_count == 0) {\n    while (input_b == 0) {\n      shift_count = shift_count + -0x15;\n      input_b = input_a >> 0xb;\n      input_a = input_a << 0x15;\n    }\n    temp_2 = 0;\n    for (; -1 < (int)(input_b << 0xb); input_b = input_b << 1) {\n      temp_2 = temp_2 + 1;\n    }\n    shift_count = shift_count - (temp_2 - 1);\n    input_b = input_b | input_a >> (0x20 - temp_2 & 0xff);\n    input_a = input_a << (temp_2 & 0xff);\n  }\n  result_int = 0;\n  temp_2 = input_b & 0xfffff | 0x100000;\n  if ((shift_count + -0x3ff) * -0x80000000 < 0) {\n    temp_2 = temp_2 * 2 - ((int)input_a >> 0x1f);\n    input_a = input_a << 1;\n  }\n  temp_2 = temp_2 * 2 - ((int)input_a >> 0x1f);\n  temp_3 = 0x16;\n  temp_4 = 0;\n  result_float_part = 0x200000;\n  input_a = input_a << 1;\n  do {\n    bit = temp_4 + result_float_part;\n    if (bit <= (int)temp_2) {\n      temp_2 = temp_2 - bit;\n      temp_4 = bit + result_float_part;\n      result_int = result_int + result_float_part;\n    }\n    temp_3 = temp_3 + -1;\n    temp_2 = temp_2 * 2 - ((int)input_a >> 0x1f);\n    result_float_part = result_float_part >> 1;\n    input_a = input_a << 1;\n  } while (temp_3 != 0);\n  bit = 0x20;\n  mask = 0x80000000;\n  result_float_part = 0;\n  temp_3 = 0;\n  do {\n    temp_6 = mask + temp_3;\n    temp_5 = temp_4;\n    if (((int)temp_4 < (int)temp_2) || ((temp_2 == temp_4 && (temp_6 <= input_a)))) {\n      temp_3 = temp_6 + mask;\n      if (((int)temp_6 < 0) && (-1 < temp_3)) {\n        temp_5 = temp_4 + 1;\n      }\n      temp_2 = temp_2 - temp_4;\n      if (input_a < temp_6) {\n        temp_2 = temp_2 - 1;\n      }\n      input_a = input_a - temp_6;\n      result_float_part = result_float_part + mask;\n    }\n    temp_2 = temp_2 * 2 - ((int)input_a >> 0x1f);\n    bit = bit + -1;\n    input_a = input_a << 1;\n    mask = mask >> 1;\n    temp_4 = temp_5;\n  } while (bit != 0);\n  if ((input_a | temp_2) != 0) {\n    if (result_float_part == 0xffffffff) {\n      result_int = result_int + 1;\n      result_float_part = 0;\n    }\n    else {\n      result_float_part = result_float_part + 1 & 0xfffffffe;\n    }\n  }\n  result_float_part = result_float_part >> 1;\n  if (result_int << 0x1f < 0) {\n    result_float_part = result_float_part | 0x80000000;\n  }\n  return CONCAT44((result_int >> 1) + 0x3fe00000 + (shift_count + -0x3ff >> 1) * 0x100000,result_float_part);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_08006c0c",
                "param_1": "input_a",
                "param_2": "input_b",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "shift_count",
                "iVar4": "temp_3",
                "uVar5": "temp_4",
                "uVar6": "temp_5",
                "iVar7": "result_int",
                "uVar8": "result_float_part",
                "uVar9": "mask",
                "iVar10": "bit",
                "uVar11": "temp_6",
                "uVar12": "result",
                "calculate_result_080004d0": "calculate_result",
                "calculate_product_0800016c": "calculate_product",
                "reverse_bits_08000168": "reverse_bits",
                "calculate_double_08000724": "calculate_double"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculate_result_08006d68(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int status;\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  uint masked_input_2;\n  undefined8 final_result_1;\n  undefined8 final_result_2;\n  \n  final_result_1 = CONCAT44(input_2,input_1);\n  masked_input_2 = input_2 & 0x7fffffff;\n  if (masked_input_2 < 0x44100000) {\n    if (masked_input_2 < 0x3fdc0000) {\n      if (masked_input_2 < 0x3e200000) {\n        final_result_2 = calculate_product_0800016c(input_1,input_2,0x8800759c,0x7e37e43c,input_4);\n        status = is_cy_null_080009f0((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),0,0x3ff00000);\n        if (status != 0) {\n          return final_result_1;\n        }\n      }\n      status = -1;\n    }\n    else {\n      final_result_1 = FUNC_0800708c();\n      result_2 = (undefined4)((ulonglong)final_result_1 >> 0x20);\n      result_1 = (undefined4)final_result_1;\n      if (masked_input_2 < 0x3ff30000) {\n        if (masked_input_2 < 0x3fe60000) {\n          final_result_1 = calculate_product_0800016c(result_1,result_2,result_1,result_2);\n          final_result_1 = reverse_bits_08000168((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),0,0x3ff00000);\n          final_result_2 = calculate_product_0800016c(result_1,result_2,0,0x40000000);\n          final_result_1 = calculate_double_08000724((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),(int)final_result_2,\n                               (int)((ulonglong)final_result_2 >> 0x20));\n          status = 0;\n        }\n        else {\n          final_result_1 = reverse_bits_08000168(result_1,result_2,0,0x3ff00000);\n          final_result_2 = calculate_product_0800016c(result_1,result_2,0,0x3ff00000);\n          final_result_1 = calculate_double_08000724((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),(int)final_result_2,\n                               (int)((ulonglong)final_result_2 >> 0x20));\n          status = 1;\n        }\n      }\n      else if (masked_input_2 < 0x40038000) {\n        final_result_1 = reverse_bits_08000168(result_1,result_2,0,0x3ff80000);\n        final_result_2 = calculate_result_08006d68_080004d0(result_1,result_2,0,0x3ff80000);\n        final_result_2 = calculate_product_0800016c((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),0,0x3ff00000);\n        final_result_1 = calculate_double_08000724((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),(int)final_result_2,\n                             (int)((ulonglong)final_result_2 >> 0x20));\n        status = 2;\n      }\n      else {\n        final_result_1 = calculate_double_08000724(0,0xbff00000,result_1,result_2);\n        status = 3;\n      }\n    }\n    temp_2 = (undefined4)((ulonglong)final_result_1 >> 0x20);\n    temp_1 = (undefined4)final_result_1;\n    final_result_1 = calculate_result_08006d68_080004d0(temp_1,temp_2,temp_1,temp_2);\n    result_3 = (undefined4)((ulonglong)final_result_1 >> 0x20);\n    result_1 = (undefined4)final_result_1;\n    final_result_1 = calculate_result_08006d68_080004d0(result_1,result_3,result_1,result_3);\n    result_4 = (undefined4)((ulonglong)final_result_1 >> 0x20);\n    result_2 = (undefined4)final_result_1;\n    final_result_1 = calculate_result_08006d68_080004d0(result_2,result_4,0xe322da11,0x3f90ad3a);\n    final_result_1 = calculate_product_0800016c((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result_1 = calculate_result_08006d68_080004d0((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),result_2,result_4);\n    final_result_1 = calculate_product_0800016c((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result_1 = calculate_result_08006d68_080004d0((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),result_2,result_4);\n    final_result_1 = calculate_product_0800016c((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result_1 = calculate_result_08006d68_080004d0((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),result_2,result_4);\n    final_result_1 = calculate_product_0800016c((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),0x920083ff,0x3fc24924);\n    final_result_1 = calculate_result_08006d68_080004d0((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),result_2,result_4);\n    final_result_1 = calculate_product_0800016c((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),0x5555550d,0x3fd55555);\n    final_result_1 = calculate_result_08006d68_080004d0((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),result_1,result_3);\n    result_1 = (undefined4)((ulonglong)final_result_1 >> 0x20);\n    final_result_2 = calculate_result_08006d68_080004d0(result_2,result_4,0x2c6a6c2f,0xbfa2b444);\n    final_result_2 = reverse_bits_08000168((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),0x52defd9a,0x3fadde2d);\n    final_result_2 = calculate_result_08006d68_080004d0((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),result_2,result_4);\n    final_result_2 = reverse_bits_08000168((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    final_result_2 = calculate_result_08006d68_080004d0((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),result_2,result_4);\n    final_result_2 = reverse_bits_08000168((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),0xfe231671,0x3fbc71c6);\n    final_result_2 = calculate_result_08006d68_080004d0((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),result_2,result_4);\n    final_result_2 = reverse_bits_08000168((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),0x9998ebc4,0x3fc99999);\n    final_result_2 = calculate_result_08006d68_080004d0((int)final_result_2,(int)((ulonglong)final_result_2 >> 0x20),result_2,result_4);\n    result_2 = (undefined4)((ulonglong)final_result_2 >> 0x20);\n    if (status == -1) {\n      final_result_1 = calculate_product_0800016c((int)final_result_1,result_1,(int)final_result_2,result_2);\n      final_result_1 = calculate_result_08006d68_080004d0((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),temp_1,temp_2);\n      final_result_1 = reverse_bits_08000168(temp_1,temp_2,(int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20));\n    }\n    else {\n      final_result_1 = calculate_product_0800016c((int)final_result_1,result_1,(int)final_result_2,result_2);\n      final_result_1 = calculate_result_08006d68_080004d0((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),temp_1,temp_2);\n      status = status * 8;\n      final_result_1 = reverse_bits_08000168((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + status),\n                           *(undefined4 *)(&UNK_08007414 + status));\n      final_result_1 = reverse_bits_08000168((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),temp_1,temp_2);\n      final_result_1 = reverse_bits_08000168(*(undefined4 *)(&UNK_080073f0 + status),\n                           *(undefined4 *)(&UNK_080073f4 + status),(int)final_result_1,\n                           (int)((ulonglong)final_result_1 >> 0x20));\n      if ((int)input_2 < 0) {\n        final_result_1 = CONCAT44((int)((ulonglong)final_result_1 >> 0x20) + -0x80000000,(int)final_result_1);\n      }\n    }\n  }\n  else if ((masked_input_2 < 0x7ff00001) && ((masked_input_2 != 0x7ff00000 || (input_1 == 0)))) {\n    if ((int)input_2 < 1) {\n      final_result_1 = 0xbff921fb54442d18;\n    }\n    else {\n      final_result_1 = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    final_result_1 = calculate_product_0800016c(input_1,input_2,input_1,input_2,input_4);\n  }\n  return final_result_1;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "status",
                "uVar2": "result_1",
                "uVar3": "result_2",
                "uVar4": "result_3",
                "uVar5": "result_4",
                "uVar6": "temp_1",
                "uVar7": "temp_2",
                "uVar8": "masked_input_2",
                "uVar9": "final_result_1",
                "uVar10": "final_result_2"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "get_most_significant_bit_08007092",
            "code": "\nuint getMostSignificantBit_08007092(undefined4 result,uint input)\n\n{\n  return (input | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "get_most_significant_bit_08007092",
                "param_1": "result",
                "param_2": "input"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "get_default_value_0800709e",
            "code": "\nint get_default_value_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "get_default_value_0800709e",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_positive_infinity_080070a4",
            "code": "\nlong_double get_positive_infinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4",
                "undefined8": "long_double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_updated_result_080070b0",
            "code": "\nundefined8 calculate_updated_result_080070b0(uint input_1,uint input_2,undefined4 input_3)\n\n{\n  int index;\n  undefined4 ptr_1;\n  uint updated_input2;\n  undefined4 ptr_2;\n  uint updated_input1;\n  uint shifted_input2_diff;\n  uint shifted_input2;\n  undefined8 result;\n  \n  shifted_input2 = (input_2 << 1) >> 0x15;\n  shifted_input2_diff = shifted_input2 - 0x3ff;\n  updated_input2 = input_2;\n  if ((int)shifted_input2_diff < 0x14) {\n    if ((int)shifted_input2_diff < 0) {\n      if ((input_2 & 0x7fffffff | input_1) == 0) {\n        return CONCAT44(input_2,input_1);\n      }\n      updated_input2 = input_2 & 0xfffff | input_1;\n      index = ((int)input_2 >> 0x1f) * -8;\n      ptr_1 = *(undefined4 *)(&DAT_08007430 + index);\n      ptr_2 = *(undefined4 *)(&DAT_08007434 + index);\n      result = calculate_product_0800016c(input_1,(-updated_input2 | updated_input2) >> 0xc & 0x80000 | input_2 & 0xfffe0000,ptr_1,\n                           ptr_2,input_1,input_2,input_3);\n      result = reverse_bits_08000168((int)result,(int)((ulonglong)result >> 0x20),ptr_1,ptr_2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input_2 & 0x80000000,\n                      (int)result);\n    }\n    shifted_input2 = 0xfffff >> (shifted_input2_diff & 0xff);\n    if ((input_2 & shifted_input2 | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    shifted_input2 = shifted_input2 >> 1;\n    updated_input1 = input_2 & shifted_input2 | input_1;\n    if (updated_input1 != 0) {\n      if (shifted_input2_diff == 0x13) {\n        updated_input1 = 0x80000000;\n      }\n      else {\n        updated_input1 = 0;\n      }\n      updated_input2 = 0x40000 >> (shifted_input2_diff & 0xff) | input_2 & ~shifted_input2;\n    }\n  }\n  else {\n    if (0x33 < (int)shifted_input2_diff) {\n      if (shifted_input2_diff != 0x400) {\n        return CONCAT44(input_2,input_1);\n      }\n      result = calculate_product_0800016c();\n      return result;\n    }\n    shifted_input2 = shifted_input2 - 0x413;\n    shifted_input2_diff = 0xffffffff >> (shifted_input2 & 0xff);\n    if ((input_1 & shifted_input2_diff) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    shifted_input2_diff = shifted_input2_diff >> 1;\n    updated_input1 = input_1;\n    if ((input_1 & shifted_input2_diff) != 0) {\n      updated_input1 = 0x40000000 >> (shifted_input2 & 0xff) | input_1 & ~shifted_input2_diff;\n    }\n  }\n  index = ((int)input_2 >> 0x1f) * -8;\n  ptr_1 = *(undefined4 *)(&DAT_08007430 + index);\n  ptr_2 = *(undefined4 *)(&DAT_08007434 + index);\n  result = calculate_product_0800016c(updated_input1,updated_input2,ptr_1,ptr_2,input_1,input_2,input_3);\n  result = reverse_bits_08000168((int)result,(int)((ulonglong)result >> 0x20),ptr_1,ptr_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_updated_result_080070b0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar7": "shifted_input2",
                "uVar6": "shifted_input2_diff",
                "uVar3": "updated_input2",
                "iVar1": "index",
                "uVar2": "ptr_1",
                "uVar4": "ptr_2",
                "uVar5": "updated_input1",
                "uVar8": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_result_with_conditions_080071c0",
            "code": "\nundefined8 calculate_result_with_conditions_080071c0(uint input_value_1,uint input_value_2,int additional_value,undefined4 constant_value)\n\n{\n  uint shifted_value;\n  undefined4 result_var_1;\n  int updated_value;\n  undefined4 result_var_2;\n  uint high_bits;\n  undefined8 final_result;\n  \n  final_result = CONCAT44(input_value_2,input_value_1);\n  shifted_value = (input_value_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_value_2 & 0x7fffffff | input_value_1) == 0) {\n      return final_result;\n    }\n    final_result = calculate_result_080004d0(input_value_1,input_value_2,0,0x43500000);\n    if (-0xc351 < additional_value) {\n      shifted_value = ((uint)((int)((ulonglong)final_result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result_var_1 = 0xc2f8f359;\n    result_var_2 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_value == 0x7ff) {\n      final_result = calculate_product_0800016c(input_value_1,input_value_2,input_value_1,input_value_2,constant_value);\n      return final_result;\n    }\nLAB_08007210:\n    high_bits = (uint)((ulonglong)final_result >> 0x20);\n    result_var_1 = (undefined4)final_result;\n    updated_value = shifted_value + additional_value;\n    if (updated_value < 0x7ff) {\n      if (0 < updated_value) {\n        return CONCAT44(high_bits & 0x800fffff | updated_value * 0x100000,result_var_1);\n      }\n      if (updated_value + 0x35 < 0 == SCARRY4(updated_value,0x35)) {\n        final_result = CONCAT44(high_bits & 0x800fffff | (updated_value + 0x36) * 0x100000,result_var_1);\n        result_var_1 = 0;\n        result_var_2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (additional_value < 0xc351) {\n        final_result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result_var_1,high_bits);\n        goto LAB_080071ec;\n      }\n    }\n    final_result = FUNC_0800729c(0x8800759c,0x7e37e43c,result_var_1,high_bits);\n    result_var_1 = 0x8800759c;\n    result_var_2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  final_result = calculate_result_080004d0((int)final_result,(int)((ulonglong)final_result >> 0x20),result_var_1,result_var_2);\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_result_with_conditions_080071c0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "additional_value",
                "param_4": "constant_value",
                "uVar1": "shifted_value",
                "uVar2": "result_var_1",
                "iVar3": "updated_value",
                "uVar4": "result_var_2",
                "uVar5": "high_bits",
                "uVar6": "final_result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_pointer_080072ac",
            "code": "\nundefined4 get_data_pointer_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_pointer_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "add_offset_to_pointer_080072b8",
            "code": "\nvoid addOffsetToPointer_080072b8(int offset)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + offset;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "add_offset_to_pointer_080072b8",
                "param_1": "offset"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 153897,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}