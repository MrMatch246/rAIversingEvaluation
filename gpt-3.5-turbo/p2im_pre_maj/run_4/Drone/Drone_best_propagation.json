{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_params_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_params_08000134(undefined4 param_first,undefined4 param_second)\n\n{\n  return CONCAT44(param_second,param_first);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_params_08000134",
                "param_1": "param_first",
                "param_2": "param_second"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_last_character_08000150",
            "code": "\nchar * find_last_character_08000150(char *input_string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_last_character_08000150",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "serialPrint"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_result_08000168",
            "code": "\nulonglong calculateResult_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftRight1;\n  byte carry;\n  uint tmp1;\n  uint tmp2;\n  uint tmp3;\n  uint tmp4;\n  uint tmp5;\n  int shiftRight2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  tmp4 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ tmp4) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (result1 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shiftRight2 = (int)result1 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftRight2 == -1;\n  }\n  shiftRight1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftRight1 == -1;\n  }\n  if (condition2) {\n    if (shiftRight2 == -1 || shiftRight1 == -1) {\n      result1 = tmp4;\n      result3 = input3;\n      if (shiftRight2 == -1) {\n        result1 = input2;\n        result3 = input1;\n      }\n      if (shiftRight2 != -1 || shiftRight1 != -1) {\n        input3 = result3;\n        tmp4 = result1;\n      }\n      condition2 = (result3 | result1 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | tmp4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = result1 == tmp4;\n      }\n      if (!condition2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((input2 ^ tmp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = tmp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != tmp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      tmp4 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        tmp4 = tmp4 | 0x80000000;\n      }\n      return CONCAT44(tmp4,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result1;\n  condition2 = result3 != 0;\n  if (input4 < result1) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  tmp5 = input2;\n  if (condition2 && result1 <= input4) {\n    result1 = result1 + result3;\n    result2 = input3;\n    tmp5 = tmp4;\n    input3 = input1;\n    tmp4 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(tmp5,result2);\n  }\n  tmp2 = tmp5 & 0xfffff | 0x100000;\n  if ((tmp5 & 0x80000000) != 0) {\n    condition2 = result2 != 0;\n    result2 = -result2;\n    tmp2 = -tmp2 - (uint)condition2;\n  }\n  tmp5 = tmp4 & 0xfffff | 0x100000;\n  if ((tmp4 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    tmp5 = -tmp5 - (uint)condition2;\n  }\n  if (result1 == result3) {\n    tmp5 = tmp5 ^ 0x100000;\n    if (result1 == 0) {\n      tmp2 = tmp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  tmp4 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (tmp4 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    tmp1 = result2 + input3;\n    tmp3 = tmp5 << (tmp4 & 0xff);\n    tmp4 = tmp1 + tmp3;\n    tmp2 = tmp2 + CARRY4(result2,input3) + ((int)tmp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(tmp1,tmp3);\n  }\n  else {\n    result4 = tmp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    tmp5 = (int)tmp5 >> (result3 - 0x20 & 0xff);\n    tmp4 = result2 + tmp5;\n    tmp2 = tmp2 + ((int)tmp5 >> 0x1f) + (uint)CARRY4(result2,tmp5);\n  }\n  input2 = tmp2 & 0x80000000;\n  result3 = tmp2;\n  if ((int)tmp2 < 0) {\n    condition2 = result4 == 0;\n    result4 = -result4;\n    result3 = -tmp4;\n    tmp4 = -(uint)!condition2 - tmp4;\n    result3 = -(uint)(condition2 <= result3) - tmp2;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)tmp4;\n      tmp4 = (uint)(result2 != 0) << 0x1f | tmp4 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      condition2 = (tmp4 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(tmp4,(uint)condition2) | input2,\n                    tmp4 + condition2);\n  }\n  condition1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = tmp4 * 2;\n  condition2 = CARRY4(tmp4,tmp4);\n  tmp4 = tmp4 * 2 + (uint)condition1;\n  result3 = result3 * 2 + (uint)(condition2 || CARRY4(result2,(uint)condition1));\n  result2 = result1 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000278;\n  tmp5 = tmp4;\n  result1 = result3;\n  if (result3 == 0) {\n    tmp5 = 0;\n    result1 = tmp4;\n  }\n  shiftRight2 = LZCOUNT(result1);\n  if (result3 == 0) {\n    shiftRight2 = shiftRight2 + 0x20;\n  }\n  result3 = shiftRight2 - 0xb;\n  condition3 = SBORROW4(result3,0x20);\n  tmp4 = shiftRight2 - 0x2b;\n  condition2 = (int)tmp4 < 0;\n  condition1 = tmp4 == 0;\n  if ((int)result3 < 0x20) {\n    condition3 = SCARRY4(tmp4,0xc);\n    shiftRight2 = shiftRight2 + -0x1f;\n    condition2 = shiftRight2 < 0;\n    condition1 = shiftRight2 == 0;\n    tmp4 = result3;\n    if (!condition1 && condition2 == condition3) {\n      tmp5 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - shiftRight2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    result4 = 0x20 - tmp4;\n  }\n  result1 = result1 << (tmp4 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    result1 = result1 | tmp5 >> (result4 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    tmp5 = tmp5 << (tmp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | input2,tmp5);\n  }\n  tmp4 = ~(result2 - result3);\n  if ((int)tmp4 < 0x1f) {\n    shiftRight2 = tmp4 - 0x13;\n    if (shiftRight2 != 0 && shiftRight2 < 0 == SCARRY4(tmp4 - 0x1f,0xc)) {\n      return CONCAT44(tmp2,tmp5 >> (0x20 - (0xcU - shiftRight2) & 0xff) | result1 << (0xcU - shiftRight2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    tmp4 = tmp4 + 1;\n    return CONCAT44(input2 | result1 >> (tmp4 & 0xff),\n                    tmp5 >> (tmp4 & 0xff) | result1 << (0x20 - tmp4 & 0xff));\n  }\n  return CONCAT44(tmp2,result1 >> (tmp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_result_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftRight1",
                "bVar2": "carry",
                "uVar3": "tmp1",
                "uVar4": "tmp2",
                "uVar5": "tmp3",
                "uVar6": "tmp4",
                "uVar7": "tmp5",
                "iVar8": "shiftRight2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "taskScheduler",
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_result_0800016c",
            "code": "\nulonglong calculate_result_0800016c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift_2;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift_3;\n  uint input2_shifted;\n  uint result1;\n  uint input4_shifted;\n  uint difference_shifted;\n  uint partial_result;\n  uint temp_result;\n  bool are_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  input2_shifted = input2 << 1;\n  input4_shifted = input4 << 1;\n  are_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = are_equal && input1 == input3;\n  if (!are_equal || input1 != input3) {\n    is_zero = (input2_shifted | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (input4_shifted | input3) == 0;\n  }\n  shift_3 = (int)input2_shifted >> 0x15;\n  if (!is_zero) {\n    is_zero = shift_3 == -1;\n  }\n  shift_2 = (int)input4_shifted >> 0x15;\n  if (!is_zero) {\n    is_zero = shift_2 == -1;\n  }\n  if (is_zero) {\n    if (shift_3 == -1 || shift_2 == -1) {\n      input4_shifted = input4;\n      input2_shifted = input3;\n      if (shift_3 == -1) {\n        input4_shifted = input2;\n        input2_shifted = input1;\n      }\n      if (shift_3 != -1 || shift_2 != -1) {\n        input3 = input2_shifted;\n        input4 = input4_shifted;\n      }\n      is_zero = (input2_shifted | input4_shifted << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = input4_shifted == input4;\n      }\n      if (!is_zero) {\n        input4_shifted = input4_shifted | 0x80000;\n      }\n      return CONCAT44(input4_shifted,input2_shifted);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((input2_shifted | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (input2_shifted >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      input4_shifted = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        input4_shifted = input4_shifted | 0x80000000;\n      }\n      return CONCAT44(input4_shifted,input1 << 1);\n    }\n    if (input2_shifted < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  input2_shifted = input2_shifted >> 0x15;\n  input4_shifted = input4_shifted >> 0x15;\n  difference_shifted = input4_shifted - input2_shifted;\n  is_zero = difference_shifted != 0;\n  if (input4_shifted < input2_shifted) {\n    difference_shifted = -difference_shifted;\n  }\n  result1 = input1;\n  temp3 = input2;\n  if (is_zero && input2_shifted <= input4_shifted) {\n    input2_shifted = input2_shifted + difference_shifted;\n    result1 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference_shifted) {\n    return CONCAT44(temp3,result1);\n  }\n  input4_shifted = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    input4_shifted = -input4_shifted - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (input2_shifted == difference_shifted) {\n    temp3 = temp3 ^ 0x100000;\n    if (input2_shifted == 0) {\n      input4_shifted = input4_shifted ^ 0x100000;\n      input2_shifted = 1;\n    }\n    else {\n      difference_shifted = difference_shifted - 1;\n    }\n  }\n  temp_result = -difference_shifted + 0x20;\n  if ((int)difference_shifted < 0x21) {\n    partial_result = input3 << (temp_result & 0xff);\n    input3 = input3 >> (difference_shifted & 0xff);\n    temp1 = result1 + input3;\n    temp2 = temp3 << (temp_result & 0xff);\n    temp_result = temp1 + temp2;\n    input4_shifted = input4_shifted + CARRY4(result1,input3) + ((int)temp3 >> (difference_shifted & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    partial_result = temp3 << (-difference_shifted + 0x40 & 0xff);\n    if (input3 != 0) {\n      partial_result = partial_result | 2;\n    }\n    temp3 = (int)temp3 >> (difference_shifted - 0x20 & 0xff);\n    temp_result = result1 + temp3;\n    input4_shifted = input4_shifted + ((int)temp3 >> 0x1f) + (uint)CARRY4(result1,temp3);\n  }\n  input2 = input4_shifted & 0x80000000;\n  difference_shifted = input4_shifted;\n  if ((int)input4_shifted < 0) {\n    is_zero = partial_result == 0;\n    partial_result = -partial_result;\n    difference_shifted = -temp_result;\n    temp_result = -(uint)!is_zero - temp_result;\n    difference_shifted = -(uint)(is_zero <= difference_shifted) - input4_shifted;\n  }\n  if (0xfffff < difference_shifted) {\n    result1 = input2_shifted - 1;\n    if (0x1fffff < difference_shifted) {\n      input4_shifted = difference_shifted & 1;\n      difference_shifted = difference_shifted >> 1;\n      carry = (byte)temp_result;\n      temp_result = (uint)(input4_shifted != 0) << 0x1f | temp_result >> 1;\n      partial_result = (uint)(carry & 1) << 0x1f | partial_result >> 1;\n      result1 = input2_shifted;\n      if (0xffbfffff < input2_shifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < partial_result;\n    if (partial_result == 0x80000000) {\n      is_zero = (temp_result & 1) != 0;\n    }\n    return CONCAT44(difference_shifted + result1 * 0x100000 + (uint)CARRY4(temp_result,(uint)is_zero) | input2,\n                    temp_result + is_zero);\n  }\n  are_equal = (partial_result & 0x80000000) != 0;\n  partial_result = partial_result << 1;\n  result1 = temp_result * 2;\n  is_zero = CARRY4(temp_result,temp_result);\n  temp_result = temp_result * 2 + (uint)are_equal;\n  difference_shifted = difference_shifted * 2 + (uint)(is_zero || CARRY4(result1,(uint)are_equal));\n  result1 = input2_shifted - 2;\n  if ((difference_shifted & 0x100000) != 0) goto LAB_08000278;\n  temp3 = temp_result;\n  input2_shifted = difference_shifted;\n  if (difference_shifted == 0) {\n    temp3 = 0;\n    input2_shifted = temp_result;\n  }\n  shift_3 = LZCOUNT(input2_shifted);\n  if (difference_shifted == 0) {\n    shift_3 = shift_3 + 0x20;\n  }\n  temp_result = shift_3 - 0xb;\n  is_negative = SBORROW4(temp_result,0x20);\n  difference_shifted = shift_3 - 0x2b;\n  is_zero = (int)difference_shifted < 0;\n  are_equal = difference_shifted == 0;\n  if ((int)temp_result < 0x20) {\n    is_negative = SCARRY4(difference_shifted,0xc);\n    shift_3 = shift_3 + -0x1f;\n    is_zero = shift_3 < 0;\n    are_equal = shift_3 == 0;\n    difference_shifted = temp_result;\n    if (!are_equal && is_zero == is_negative) {\n      temp3 = input2_shifted << (temp_result & 0xff);\n      input2_shifted = input2_shifted >> (0xcU - shift_3 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (are_equal || is_zero != is_negative) {\n    partial_result = 0x20 - difference_shifted;\n  }\n  input2_shifted = input2_shifted << (difference_shifted & 0xff);\n  if (are_equal || is_zero != is_negative) {\n    input2_shifted = input2_shifted | temp3 >> (partial_result & 0xff);\n  }\n  if (are_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference_shifted & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_result <= (int)result1) {\n    return CONCAT44(input2_shifted + (result1 - temp_result) * 0x100000 | input2,temp3);\n  }\n  difference_shifted = ~(result1 - temp_result);\n  if ((int)difference_shifted < 0x1f) {\n    shift_3 = difference_shifted - 0x13;\n    if (shift_3 != 0 && shift_3 < 0 == SCARRY4(difference_shifted - 0x1f,0xc)) {\n      return CONCAT44(input4_shifted,temp3 >> (0x20 - (0xcU - shift_3) & 0xff) | input2_shifted << (0xcU - shift_3 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference_shifted = difference_shifted + 1;\n    return CONCAT44(input2 | input2_shifted >> (difference_shifted & 0xff),\n                    temp3 >> (difference_shifted & 0xff) | input2_shifted << (0x20 - difference_shifted & 0xff));\n  }\n  return CONCAT44(input4_shifted,input2_shifted >> (difference_shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift_2",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift_3",
                "uVar7": "input2_shifted",
                "uVar8": "result1",
                "uVar9": "input4_shifted",
                "uVar10": "difference_shifted",
                "uVar11": "partial_result",
                "uVar12": "temp_result",
                "bVar13": "are_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative"
            },
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "calculate_shifted_value_08000404",
            "code": "\nulonglong calculateShiftedValue_08000404(uint input)\n\n{\n  uint shiftedValue;\n  uint absInput;\n  uint shiftCount;\n  int leadingZeros;\n  uint shiftedValue2;\n  uint signMask;\n  uint shiftedValue3;\n  bool isNegative;\n  bool isZero;\n  bool isBorrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signMask = input & 0x80000000;\n  absInput = input;\n  if ((int)signMask < 0) {\n    absInput = -input;\n  }\n  shiftedValue = 0;\n  leadingZeros = leadingZeroCount(absInput);\n  shiftedValue2 = leadingZeros + 0x15;\n  isBorrow = signedBorrow4(shiftedValue2,0x20);\n  shiftCount = leadingZeros - 0xb;\n  isNegative = (int)shiftCount < 0;\n  isZero = shiftCount == 0;\n  if (shiftedValue2 < 0x20) {\n    isBorrow = signedCarry4(shiftCount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftCount = shiftedValue2;\n    if (!isZero && isBorrow == false) {\n      shiftedValue = absInput << shiftedValue2;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto shiftValue;\n    }\n  }\n  if (isZero || isNegative != isBorrow) {\n    shiftedValue3 = 0x20 - shiftCount;\n  }\n  absInput = absInput << (shiftCount & 0xff);\n  if (isZero || isNegative != isBorrow) {\n    absInput = absInput | 0U >> (shiftedValue3 & 0xff);\n  }\n  if (isZero || isNegative != isBorrow) {\n    shiftedValue = 0 << (shiftCount & 0xff);\n  }\nshiftValue:\n  if (shiftedValue2 < 0x433) {\n    return concatenateValues(absInput + (0x432 - shiftedValue2) * 0x100000 | signMask,shiftedValue);\n  }\n  shiftCount = ~(0x432 - shiftedValue2);\n  if (0x1e < (int)shiftCount) {\n    return concatenateValues(input,absInput >> (shiftCount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftCount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != signedCarry4(shiftCount - 0x1f,0xc)) {\n    shiftCount = shiftCount + 1;\n    return concatenateValues(signMask | absInput >> (shiftCount & 0xff),\n                    shiftedValue >> (shiftCount & 0xff) | absInput << (0x20 - shiftCount & 0xff));\n  }\n  return concatenateValues(input,shiftedValue >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input",
                "uVar1": "shiftedValue",
                "uVar2": "absInput",
                "uVar3": "shiftCount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedValue2",
                "uVar6": "signMask",
                "in_r12": "shiftedValue3",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isBorrow",
                "LZCOUNT": "leadingZeroCount",
                "SBORROW4": "signedBorrow4",
                "SCARRY4": "signedCarry4",
                "LAB_080002f0": "shiftValue",
                "CONCAT44": "concatenateValues"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "extracted_function_08000428",
            "code": "\nulonglong extractedFunction_08000428(uint inputParam1,undefined4 inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  uint flag;\n  uint tempVar1;\n  uint combinedFlag;\n  uint shiftedInput;\n  uint shiftedInputTimes2;\n  int index;\n  uint shiftAmount;\n  uint tempRegister;\n  bool isEqual;\n  bool isZero;\n  bool signedFlag;\n  \n  shiftedInputTimes2 = inputParam1 << 1;\n  isZero = shiftedInputTimes2 == 0;\n  flag = (uint)((inputParam1 & 0x80000000) != 0) << 0x1f;\n  shiftedInput = (uint)((int)shiftedInputTimes2 >> 3) >> 1;\n  combinedFlag = flag | shiftedInput;\n  inputParam1 = inputParam1 << 0x1d;\n  if (!isZero) {\n    inputParam4 = shiftedInputTimes2 & 0xff000000;\n    isZero = inputParam4 == 0;\n  }\n  if (!isZero) {\n    isZero = inputParam4 == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(combinedFlag,inputParam1) ^ 0x3800000000000000;\n  }\n  if (shiftedInputTimes2 == 0 || inputParam4 == 0xff000000) {\n    return CONCAT44(combinedFlag,inputParam1);\n  }\n  tempVar1 = inputParam1;\n  shiftedInputTimes2 = shiftedInput;\n  if (shiftedInput == 0) {\n    tempVar1 = 0;\n    shiftedInputTimes2 = inputParam1;\n  }\n  index = leadingZerosCount(shiftedInputTimes2);\n  if (shiftedInput == 0) {\n    index = index + 0x20;\n  }\n  shiftAmount = index - 0xb;\n  signedFlag = signedBorrow4(shiftAmount,0x20);\n  shiftedInput = index - 0x2b;\n  isZero = (int)shiftedInput < 0;\n  isEqual = shiftedInput == 0;\n  if ((int)shiftAmount < 0x20) {\n    signedFlag = signedCarry4(shiftedInput,0xc);\n    index = index + -0x1f;\n    isZero = index < 0;\n    isEqual = index == 0;\n    shiftedInput = shiftAmount;\n    if (!isEqual && isZero == signedFlag) {\n      tempVar1 = shiftedInputTimes2 << (shiftAmount & 0xff);\n      shiftedInputTimes2 = shiftedInputTimes2 >> (0xcU - index & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isEqual || isZero != signedFlag) {\n    tempRegister = 0x20 - shiftedInput;\n  }\n  shiftedInputTimes2 = shiftedInputTimes2 << (shiftedInput & 0xff);\n  if (isEqual || isZero != signedFlag) {\n    shiftedInputTimes2 = shiftedInputTimes2 | tempVar1 >> (tempRegister & 0xff);\n  }\n  if (isEqual || isZero != signedFlag) {\n    tempVar1 = tempVar1 << (shiftedInput & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(shiftedInputTimes2 + (0x380 - shiftAmount) * 0x100000 | flag,tempVar1);\n  }\n  shiftedInput = ~(0x380 - shiftAmount);\n  if ((int)shiftedInput < 0x1f) {\n    index = shiftedInput - 0x13;\n    if (index != 0 && index < 0 == signedCarry4(shiftedInput - 0x1f,0xc)) {\n      return CONCAT44(combinedFlag,tempVar1 >> (0x20 - (0xcU - index) & 0xff) | shiftedInputTimes2 << (0xcU - index & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedInput = shiftedInput + 1;\n    return CONCAT44(flag | shiftedInputTimes2 >> (shiftedInput & 0xff),\n                    tempVar1 >> (shiftedInput & 0xff) | shiftedInputTimes2 << (0x20 - shiftedInput & 0xff));\n  }\n  return CONCAT44(combinedFlag,shiftedInputTimes2 >> (shiftedInput - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "extracted_function_08000428",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "flag",
                "uVar2": "tempVar1",
                "uVar3": "combinedFlag",
                "uVar4": "shiftedInput",
                "uVar5": "shiftedInputTimes2",
                "uVar7": "shiftAmount",
                "iVar6": "index",
                "bVar8": "isEqual",
                "bVar9": "isZero",
                "bVar10": "signedFlag",
                "in_r12": "tempRegister",
                "LZCOUNT": "leadingZerosCount",
                "SBORROW4": "signedBorrow4",
                "SCARRY4": "signedCarry4"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "perform_calculation_080004d0",
            "code": "\nulonglong performCalculation_080004d0(undefined4 input1,uint input2,uint operand1,uint operand2)\n\n{\n  ulonglong resultLow;\n  longlong temp;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool isConditionMet1;\n  bool isConditionMet2;\n  bool isConditionMet3;\n  ulonglong inputConcat;\n  \n  inputConcat = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  isConditionMet1 = temp2 == 0;\n  if (!isConditionMet1) {\n    temp5 = operand2 >> 0x14 & 0x7ff;\n    isConditionMet1 = temp5 == 0;\n  }\n  if (!isConditionMet1) {\n    isConditionMet1 = temp2 == 0x7ff;\n  }\n  if (!isConditionMet1) {\n    isConditionMet1 = temp5 == 0x7ff;\n  }\n  if (isConditionMet1) {\n    inputConcat = calculate_bitwise_operation_080006ac();\n  }\n  temp1 = (uint)(inputConcat >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ operand2;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  operand2 = operand2 & ~(temp6 << 0x15);\n  isConditionMet1 = ((uint)inputConcat | temp1 << 0xc) == 0;\n  if (!isConditionMet1) {\n    isConditionMet1 = (operand1 | operand2 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  operand2 = operand2 | 0x100000;\n  if (isConditionMet1) {\n    operand1 = (uint)inputConcat | operand1;\n    operand2 = (temp2 & 0x80000000 | temp1) ^ operand2;\n    temp2 = temp6 >> 1;\n    isConditionMet3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    isConditionMet1 = temp4 == 0;\n    temp1 = temp4;\n    if (!isConditionMet1 && (int)temp2 <= temp3) {\n      isConditionMet3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      isConditionMet1 = temp6 == temp4;\n    }\n    if (!isConditionMet1 && (int)temp1 < 0 == isConditionMet3) {\n      operand2 = operand2 | temp4 * 0x100000;\n    }\n    if (!isConditionMet1 && (int)temp1 < 0 == isConditionMet3) {\n      return CONCAT44(operand2,operand1);\n    }\n    operand2 = operand2 | 0x100000;\n    temp6 = 0;\n    isConditionMet3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    isConditionMet1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    resultLow = (inputConcat & 0xffffffff) * (ulonglong)operand1;\n    inputConcat = (inputConcat & 0xffffffff) * (ulonglong)operand2 +\n             (ulonglong)temp1 * (ulonglong)operand1 + (resultLow >> 0x20);\n    temp7 = (uint)inputConcat;\n    temp = (ulonglong)temp1 * (ulonglong)operand2 + (inputConcat >> 0x20);\n    temp6 = (uint)temp;\n    temp1 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)resultLow != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      isConditionMet1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      temp = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)isConditionMet1)),\n                       temp6 * 2 + (uint)isConditionMet1);\n    }\n    operand2 = temp2 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    operand1 = (uint)temp << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    isConditionMet2 = 0xfc < temp4;\n    isConditionMet3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    isConditionMet1 = temp1 == 0;\n    temp2 = temp1;\n    if (isConditionMet2 && !isConditionMet1) {\n      isConditionMet2 = 0x6ff < temp1;\n      isConditionMet3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      isConditionMet1 = temp1 == 0x700;\n    }\n    if (!isConditionMet2 || isConditionMet1) {\n      isConditionMet1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        isConditionMet1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(operand2 + temp4 * 0x100000 + (uint)CARRY4(operand1,(uint)isConditionMet1),operand1 + isConditionMet1\n                     );\n    }\n  }\n  if (!isConditionMet1 && (int)temp2 < 0 == isConditionMet3) {\n    return (ulonglong)(operand2 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isConditionMet2 = SCARRY4(temp4,0x36);\n  isConditionMet1 = (int)(temp4 + 0x36) < 0;\n  isConditionMet3 = temp4 == 0xffffffca;\n  if (isConditionMet3 || isConditionMet1 != isConditionMet2) {\n    operand1 = 0;\n  }\n  if (isConditionMet3 || isConditionMet1 != isConditionMet2) {\n    operand2 = operand2 & 0x80000000;\n  }\n  if (isConditionMet3 || isConditionMet1 != isConditionMet2) {\n    return CONCAT44(operand2,operand1);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = operand1 >> (temp1 & 0xff) | operand2 << (0x20 - temp1 & 0xff);\n    temp2 = (operand2 >> (temp1 & 0xff) & ~((operand2 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | operand1 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(operand2,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = operand1 << (temp4 + 0x20 & 0xff);\n    temp1 = operand1 >> (temp2 & 0xff) | operand2 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((operand2 & 0x80000000) +\n                    ((operand2 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = operand1 << (temp2 & 0xff);\n  temp2 = operand1 >> (0x20 - temp2 & 0xff) | operand2 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((operand2 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "perform_calculation_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "operand1",
                "param_4": "operand2",
                "uVar1": "resultLow",
                "lVar2": "temp",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "isConditionMet1",
                "bVar10": "isConditionMet2",
                "bVar11": "isConditionMet3",
                "uVar12": "inputConcat"
            },
            "calling": [
                "taskScheduler",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_operation_080006ac",
            "code": "\nulonglong calculate_bitwise_operation_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint input_1_shifted;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  bool is_zero;\n  \n  temp_2 = temp_4 & input_4 >> 0x14;\n  if (temp_1 != temp_4 && temp_2 != temp_4) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_1 == 0) {\n      temp_3 = input_2 & 0x80000000;\n      do {\n        input_1_shifted = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(input_1_shifted != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_3;\n      if (temp_2 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_2 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_2 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp_3 = input_2;\n  if (((!is_zero) && ((temp_1 != temp_4 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_2 != temp_4 || (input_1 = input_3, temp_3 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_3,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_operation_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "input_1_shifted",
                "unaff_r4": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "in_r12": "temp_4",
                "bVar4": "is_zero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_floating_point_08000724",
            "code": "\nulonglong calculateFloatingPoint_08000724(undefined4 signExponent,uint mantissa1,uint mantissa2,uint mantissa3)\n\n{\n  uint sign1;\n  uint exponent1;\n  uint mantissa4;\n  uint sign2;\n  uint exponent2;\n  uint mantissa5;\n  uint resultSign;\n  int diffExponent;\n  uint exponentDiffPlus0x3fd;\n  uint exponent3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool isEqual1;\n  bool isEqual2;\n  bool isGreaterThan0xfc;\n  undefined8 sign17;\n  \n  sign17 = CONCAT44(mantissa1,signExponent);\n  temp4 = 0x7ff;\n  resultSign = mantissa1 >> 0x14 & 0x7ff;\n  isEqual1 = resultSign == 0;\n  if (!isEqual1) {\n    exponent3 = mantissa3 >> 0x14 & 0x7ff;\n    isEqual1 = exponent3 == 0;\n  }\n  if (!isEqual1) {\n    isEqual1 = resultSign == 0x7ff;\n  }\n  if (!isEqual1) {\n    isEqual1 = exponent3 == 0x7ff;\n  }\n  if (isEqual1) {\n    sign17 = reverse_bits_08000892();\n  }\n  exponentDiffPlus0x3fd = (uint)((ulonglong)sign17 >> 0x20);\n  temp2 = (uint)sign17;\n  diffExponent = resultSign - exponent3;\n  if ((mantissa2 | mantissa3 << 0xc) == 0) {\n    resultSign = (exponentDiffPlus0x3fd ^ mantissa3) & 0x80000000 | exponentDiffPlus0x3fd & 0xfffff;\n    isGreaterThan0xfc = SCARRY4(diffExponent,temp4 >> 1);\n    exponentDiffPlus0x3fd = diffExponent + (temp4 >> 1);\n    isEqual1 = (int)exponentDiffPlus0x3fd < 0;\n    isEqual2 = exponentDiffPlus0x3fd == 0;\n    if (!isEqual2 && isEqual1 == isGreaterThan0xfc) {\n      isGreaterThan0xfc = SBORROW4(temp4,exponentDiffPlus0x3fd);\n      isEqual1 = (int)(temp4 - exponentDiffPlus0x3fd) < 0;\n      isEqual2 = temp4 == exponentDiffPlus0x3fd;\n    }\n    if (!isEqual2 && isEqual1 == isGreaterThan0xfc) {\n      resultSign = resultSign | exponentDiffPlus0x3fd * 0x100000;\n    }\n    if (!isEqual2 && isEqual1 == isGreaterThan0xfc) {\n      return CONCAT44(resultSign,temp2);\n    }\n    resultSign = resultSign | 0x100000;\n    temp4 = 0;\n    isEqual2 = SBORROW4(exponentDiffPlus0x3fd,1);\n    exponentDiffPlus0x3fd = exponentDiffPlus0x3fd - 1;\n    isEqual1 = exponentDiffPlus0x3fd == 0;\n    mantissa4 = exponentDiffPlus0x3fd;\n  }\n  else {\n    mantissa4 = (mantissa3 << 0xc) >> 4 | 0x10000000 | mantissa2 >> 0x18;\n    temp4 = mantissa2 << 8;\n    temp1 = (exponentDiffPlus0x3fd << 0xc) >> 4 | 0x10000000 | temp2 >> 0x18;\n    temp2 = temp2 * 0x100;\n    resultSign = (exponentDiffPlus0x3fd ^ mantissa3) & 0x80000000;\n    isEqual1 = mantissa4 <= temp1;\n    if (temp1 == mantissa4) {\n      isEqual1 = temp4 <= temp2;\n    }\n    diffExponent = diffExponent + (uint)isEqual1;\n    exponentDiffPlus0x3fd = diffExponent + 0x3fd;\n    if (isEqual1 == false) {\n      mantissa4 = mantissa4 >> 1;\n      temp4 = (uint)((mantissa2 >> 0x18 & 1) != 0) << 0x1f | temp4 >> 1;\n    }\n    temp3 = temp2 - temp4;\n    temp1 = (temp1 - mantissa4) - (uint)(temp2 < temp4);\n    sign2 = mantissa4 >> 1;\n    sign1 = (uint)((mantissa4 & 1) != 0) << 0x1f | temp4 >> 1;\n    temp2 = 0x100000;\n    mantissa4 = 0x80000;\n    while( true ) {\n      isEqual1 = sign1 <= temp3;\n      if (sign2 < temp1 || temp1 - sign2 < (uint)isEqual1) {\n        temp3 = temp3 - sign1;\n        temp2 = temp2 | mantissa4;\n        temp1 = (temp1 - sign2) - (uint)!isEqual1;\n      }\n      exponent2 = sign2 >> 1;\n      sign1 = (uint)((sign2 & 1) != 0) << 0x1f | sign1 >> 1;\n      isEqual2 = sign1 <= temp3;\n      isEqual1 = temp1 - exponent2 < (uint)isEqual2;\n      temp4 = temp1;\n      if (exponent2 < temp1 || isEqual1) {\n        temp3 = temp3 - sign1;\n        temp4 = (temp1 - exponent2) - (uint)!isEqual2;\n      }\n      if (exponent2 < temp1 || isEqual1) {\n        temp2 = temp2 | mantissa4 >> 1;\n      }\n      temp1 = sign2 >> 2;\n      exponent1 = (uint)((exponent2 & 1) != 0) << 0x1f | sign1 >> 1;\n      isEqual2 = exponent1 <= temp3;\n      isEqual1 = temp4 - temp1 < (uint)isEqual2;\n      exponent2 = temp4;\n      if (temp1 < temp4 || isEqual1) {\n        temp3 = temp3 - exponent1;\n        exponent2 = (temp4 - temp1) - (uint)!isEqual2;\n      }\n      if (temp1 < temp4 || isEqual1) {\n        temp2 = temp2 | mantissa4 >> 2;\n      }\n      mantissa5 = sign2 >> 3;\n      sign1 = (uint)((temp1 & 1) != 0) << 0x1f | exponent1 >> 1;\n      isEqual2 = sign1 <= temp3;\n      isEqual1 = exponent2 - mantissa5 < (uint)isEqual2;\n      temp1 = exponent2;\n      if (mantissa5 < exponent2 || isEqual1) {\n        temp3 = temp3 - sign1;\n        temp1 = (exponent2 - mantissa5) - (uint)!isEqual2;\n      }\n      if (mantissa5 < exponent2 || isEqual1) {\n        temp2 = temp2 | mantissa4 >> 3;\n      }\n      temp4 = temp1 | temp3;\n      if (temp4 == 0) break;\n      temp1 = temp1 << 4 | temp3 >> 0x1c;\n      temp3 = temp3 << 4;\n      sign2 = sign2 & 0xfffffff8 | sign1 >> 0x1d;\n      sign1 = (exponent1 >> 1) << 3;\n      mantissa4 = mantissa4 >> 4;\n      if (mantissa4 == 0) {\n        mantissa5 = sign2;\n        if ((resultSign & 0x100000) != 0) goto LAB_08000842;\n        resultSign = resultSign | temp2;\n        temp2 = 0;\n        mantissa4 = 0x80000000;\n      }\n    }\n    if ((resultSign & 0x100000) == 0) {\n      resultSign = resultSign | temp2;\n      temp2 = 0;\n    }\nLAB_08000842:\n    isGreaterThan0xfc = 0xfc < exponentDiffPlus0x3fd;\n    isEqual2 = SBORROW4(exponentDiffPlus0x3fd,0xfd);\n    sign2 = diffExponent + 0x300;\n    isEqual1 = sign2 == 0;\n    mantissa4 = sign2;\n    if (isGreaterThan0xfc && !isEqual1) {\n      isGreaterThan0xfc = 0x6ff < sign2;\n      isEqual2 = SBORROW4(sign2,0x700);\n      mantissa4 = diffExponent - 0x400;\n      isEqual1 = sign2 == 0x700;\n    }\n    if (!isGreaterThan0xfc || isEqual1) {\n      isEqual1 = mantissa5 <= temp1;\n      if (temp1 == mantissa5) {\n        isEqual1 = sign1 <= temp3;\n      }\n      if (temp1 == mantissa5 && temp3 == sign1) {\n        isEqual1 = (temp2 & 1) != 0;\n      }\n      return CONCAT44(resultSign + exponentDiffPlus0x3fd * 0x100000 + (uint)CARRY4(temp2,(uint)isEqual1),temp2 + isEqual1);\n    }\n  }\n  if (!isEqual1 && (int)mantissa4 < 0 == isEqual2) {\n    return (ulonglong)(resultSign & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isGreaterThan0xfc = SCARRY4(exponentDiffPlus0x3fd,0x36);\n  isEqual1 = (int)(exponentDiffPlus0x3fd + 0x36) < 0;\n  isEqual2 = exponentDiffPlus0x3fd == 0xffffffca;\n  if (isEqual2 || isEqual1 != isGreaterThan0xfc) {\n    temp2 = 0;\n  }\n  if (isEqual2 || isEqual1 != isGreaterThan0xfc) {\n    resultSign = resultSign & 0x80000000;\n  }\n  if (isEqual2 || isEqual1 != isGreaterThan0xfc) {\n    return CONCAT44(resultSign,temp2);\n  }\n  mantissa4 = -exponentDiffPlus0x3fd;\n  temp1 = mantissa4 - 0x20;\n  if (0x1f < (int)mantissa4) {\n    mantissa4 = temp2 >> (temp1 & 0xff) | resultSign << (0x20 - temp1 & 0xff);\n    exponentDiffPlus0x3fd = (resultSign >> (temp1 & 0xff) & ~((resultSign & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)mantissa4 >> 0x1f);\n    if ((temp4 | temp2 << (0x20 - temp1 & 0xff) | mantissa4 << 1) == 0) {\n      exponentDiffPlus0x3fd = exponentDiffPlus0x3fd & ~(mantissa4 >> 0x1f);\n    }\n    return CONCAT44(resultSign,exponentDiffPlus0x3fd) & 0x80000000ffffffff;\n  }\n  diffExponent = mantissa4 - 0x14;\n  if (diffExponent != 0 && diffExponent < 0 == SCARRY4(temp1,0xc)) {\n    exponentDiffPlus0x3fd = 0xc - diffExponent;\n    mantissa4 = temp2 << (exponentDiffPlus0x3fd & 0xff);\n    temp2 = temp2 >> (0x20 - exponentDiffPlus0x3fd & 0xff) | resultSign << (exponentDiffPlus0x3fd & 0xff);\n    exponentDiffPlus0x3fd = temp2 + -((int)mantissa4 >> 0x1f);\n    if ((temp4 | mantissa4 << 1) == 0) {\n      exponentDiffPlus0x3fd = exponentDiffPlus0x3fd & ~(mantissa4 >> 0x1f);\n    }\n    return CONCAT44((resultSign & 0x80000000) + (uint)CARRY4(temp2,-((int)mantissa4 >> 0x1f)),exponentDiffPlus0x3fd);\n  }\n  temp1 = temp2 << (exponentDiffPlus0x3fd + 0x20 & 0xff);\n  temp2 = temp2 >> (mantissa4 & 0xff) | resultSign << (exponentDiffPlus0x3fd + 0x20 & 0xff);\n  exponentDiffPlus0x3fd = temp2 + -((int)temp1 >> 0x1f);\n  if ((temp4 | temp1 << 1) == 0) {\n    exponentDiffPlus0x3fd = exponentDiffPlus0x3fd & ~(temp1 >> 0x1f);\n  }\n  return CONCAT44((resultSign & 0x80000000) +\n                  ((resultSign & 0x7fffffff) >> (mantissa4 & 0xff)) +\n                  (uint)CARRY4(temp2,-((int)temp1 >> 0x1f)),exponentDiffPlus0x3fd);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "param_1": "signExponent",
                "param_2": "mantissa1",
                "param_3": "mantissa2",
                "param_4": "mantissa3",
                "uVar1": "sign1",
                "uVar2": "exponent1",
                "uVar3": "mantissa4",
                "uVar4": "sign2",
                "uVar5": "exponent2",
                "uVar6": "mantissa5",
                "uVar7": "resultSign",
                "iVar8": "diffExponent",
                "uVar9": "exponentDiffPlus0x3fd",
                "unaff_r5": "exponent3",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "uVar13": "temp4",
                "bVar14": "isEqual1",
                "bVar15": "isEqual2",
                "bVar16": "isGreaterThan0xfc"
            },
            "calling": [
                "__ieee754_atan2",
                "sqrt",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "reverse_bits_08000892",
            "code": "\nulonglong reverseBits_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "reverse_bits_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_parameters_08000904",
            "code": "\nuint check_parameters_08000904(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isLessThanOrEqual;\n  \n  if (((int)(value_2 << 1) >> 0x15 == -1 || (int)(value_4 << 1) >> 0x15 == -1) &&\n     ((((int)(value_2 << 1) >> 0x15 == -1 && ((value_1 | value_2 << 0xc) != 0)) ||\n      (((int)(value_4 << 1) >> 0x15 == -1 && ((value_3 | value_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value_1 | value_2 << 1) == 0;\n  if (isZero) {\n    isZero = (value_3 | value_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value_2 == value_4;\n  }\n  if (isZero) {\n    isZero = value_1 == value_3;\n  }\n  if (!isZero) {\n    result = value_2 ^ value_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value_2 == value_4;\n    }\n    isLessThanOrEqual = -1 < (int)result && value_4 <= value_2;\n    if (isZero) {\n      isLessThanOrEqual = value_3 <= value_1;\n    }\n    value_4 = (int)value_4 >> 0x1f;\n    if (!isLessThanOrEqual) {\n      value_4 = ~value_4;\n    }\n    return value_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_parameters_08000904",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isLessThanOrEqual"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "compare_floats_08000980",
            "code": "\nvoid compareFloats_08000980(undefined4 result,undefined4 status,undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cdcmpeq(float1,float2,result,status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "compare_floats_08000980",
                "param_1": "result",
                "param_2": "status",
                "param_3": "float1",
                "param_4": "float2"
            },
            "calling": [
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "convert_to_undefined_08000990",
            "code": "\nundefined4 convertToUndefined_08000990(undefined4 result)\n\n{\n  convertToFloat();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000990": "convert_to_undefined_08000990",
                "param_1": "result",
                "__nedf2": "convertToFloat"
            },
            "calling": [
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_dcmpeq"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_if_not_null_080009a0",
            "code": "\nbool check_if_not_null_080009a0(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_if_not_null_080009a0",
                "in_ZR": "result"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_zero_080009b4",
            "code": "\nbool is_zero_080009b4(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdcmpeq();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_zero_080009b4",
                "in_CY": "input_char"
            },
            "calling": [
                "sqrt",
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_equality_080009c8",
            "code": "\nbool check_equality_080009c8(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_equality_080009c8",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_if_null_080009f0",
            "code": "\nbool check_if_null_080009f0(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_if_null_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "is_parameters_valid_08000a04",
            "code": "\nundefined4 is_parameters_valid_08000a04(uint param1,int param2,uint param3,int param4)\n\n{\n  if ((((param2 << 1) >> 0x15 != -1) || ((param1 | param2 << 0xc) == 0)) &&\n     (((param4 << 1) >> 0x15 != -1 || ((param3 | param4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "is_parameters_valid_08000a04",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan;\n  \n  temp1 = input2 * 2;\n  isLessThan = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_float_add_08000ad8",
            "code": "\nuint calculate_float_add_08000ad8(uint integer_part,uint fractional_part,undefined4 sign_bit,uint round_mode)\n\n{\n  int integer_part_shifted;\n  int fractional_part_shifted;\n  uint integer_xor;\n  uint fract_xor;\n  uint integer_temp;\n  uint fract_temp;\n  uint difference;\n  bool comparison_result;\n  \n  integer_xor = fractional_part ^ 0x80000000;\n  integer_temp = integer_part << 1;\n  comparison_result = integer_temp == 0;\n  if (!comparison_result) {\n    round_mode = fractional_part << 1;\n    comparison_result = round_mode == 0;\n  }\n  if (!comparison_result) {\n    comparison_result = integer_temp == round_mode;\n  }\n  integer_part_shifted = (int)integer_temp >> 0x18;\n  if (!comparison_result) {\n    comparison_result = integer_part_shifted == -1;\n  }\n  if (!comparison_result) {\n    comparison_result = (int)round_mode >> 0x18 == -1;\n  }\n  if (comparison_result) {\n    fractional_part_shifted = (int)(fractional_part << 1) >> 0x18;\n    if (integer_part_shifted == -1 || fractional_part_shifted == -1) {\n      integer_temp = integer_xor;\n      if (integer_part_shifted == -1) {\n        integer_temp = integer_part;\n      }\n      if (integer_part_shifted != -1 || fractional_part_shifted != -1) {\n        integer_xor = integer_temp;\n      }\n      comparison_result = (integer_temp & 0x7fffff) == 0;\n      if (comparison_result) {\n        comparison_result = (integer_xor & 0x7fffff) == 0;\n      }\n      if (comparison_result) {\n        comparison_result = integer_temp == integer_xor;\n      }\n      if (!comparison_result) {\n        integer_temp = integer_temp | 0x400000;\n      }\n      return integer_temp;\n    }\n    if (((integer_part ^ integer_xor) & 0x7fffffff) != 0) {\n      if (integer_temp == 0) {\n        integer_part = integer_xor;\n      }\n      return integer_part;\n    }\n    if (integer_part != integer_xor) {\n      return 0;\n    }\n    if ((integer_temp & 0xff000000) == 0) {\n      integer_xor = integer_part << 1;\n      if ((integer_part & 0x80000000) != 0) {\n        integer_xor = integer_xor | 0x80000000;\n      }\n      return integer_xor;\n    }\n    if (integer_temp < 0xfe000000) {\n      return integer_part + 0x800000;\n    }\n    integer_part = integer_part & 0x80000000;\nLAB_08000c12:\n    return integer_part | 0x7f800000;\n  }\n  integer_temp = integer_temp >> 0x18;\n  round_mode = round_mode >> 0x18;\n  difference = round_mode - integer_temp;\n  comparison_result = difference != 0;\n  fract_temp = integer_temp;\n  if (comparison_result && integer_temp <= round_mode) {\n    fract_temp = integer_temp + difference;\n  }\n  if (comparison_result && integer_temp <= round_mode) {\n    integer_xor = integer_xor ^ integer_part;\n  }\n  if (comparison_result && integer_temp <= round_mode) {\n    integer_part = integer_part ^ integer_xor;\n  }\n  if (comparison_result && integer_temp <= round_mode) {\n    integer_xor = integer_xor ^ integer_part;\n  }\n  if (round_mode < integer_temp) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return integer_part;\n  }\n  integer_temp = integer_part & 0xffffff | 0x800000;\n  if ((integer_part & 0x80000000) != 0) {\n    integer_temp = -integer_temp;\n  }\n  fract_xor = integer_xor & 0xffffff | 0x800000;\n  if ((integer_xor & 0x80000000) != 0) {\n    fract_xor = -fract_xor;\n  }\n  if (fract_temp == difference) {\n    fract_xor = fract_xor ^ 0x800000;\n    if (fract_temp == 0) {\n      integer_temp = integer_temp ^ 0x800000;\n      fract_temp = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  integer_temp = integer_temp + ((int)fract_xor >> (difference & 0xff));\n  fract_xor = fract_xor << (0x20 - difference & 0xff);\n  integer_part = integer_temp & 0x80000000;\n  if ((int)integer_temp < 0) {\n    comparison_result = fract_xor != 0;\n    fract_xor = -fract_xor;\n    integer_temp = -integer_temp - (uint)comparison_result;\n  }\n  if (integer_temp < 0x800000) {\n    integer_xor = fract_xor & 0x80000000;\n    fract_xor = fract_xor << 1;\n    integer_temp = integer_temp * 2 + (uint)(integer_xor != 0);\n    integer_xor = fract_temp - 2;\n    if ((integer_temp & 0x800000) == 0) {\n      difference = LZCOUNT(integer_temp) - 8;\n      integer_temp = integer_temp << (difference & 0xff);\n      if ((int)integer_xor < (int)difference) {\n        integer_temp = integer_temp >> (-(integer_xor - difference) & 0xff);\n      }\n      else {\n        integer_temp = integer_temp + (integer_xor - difference) * 0x800000;\n      }\n      return integer_temp | integer_part;\n    }\n  }\n  else {\n    integer_xor = fract_temp - 1;\n    if (0xffffff < integer_temp) {\n      integer_xor = integer_temp & 1;\n      integer_temp = integer_temp >> 1;\n      fract_xor = (uint)(integer_xor != 0) << 0x1f | fract_xor >> 1;\n      integer_xor = fract_temp;\n      if (0xfd < fract_temp) goto LAB_08000c12;\n    }\n  }\n  integer_temp = integer_temp + integer_xor * 0x800000 + (uint)(0x7fffffff < fract_xor);\n  if (fract_xor == 0x80000000) {\n    integer_temp = integer_temp & 0xfffffffe;\n  }\n  return integer_temp | integer_part;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_float_add_08000ad8",
                "param_1": "integer_part",
                "param_2": "fractional_part",
                "param_3": "sign_bit",
                "param_4": "round_mode",
                "iVar1": "integer_part_shifted",
                "iVar2": "fractional_part_shifted",
                "uVar3": "integer_xor",
                "uVar4": "fract_xor",
                "uVar5": "integer_temp",
                "uVar6": "fract_temp",
                "uVar7": "difference",
                "bVar8": "comparison_result"
            },
            "calling": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "float_addition_08000adc",
            "code": "\nuint floatAddition_08000adc(uint num1,uint num2,undefined4 var3,uint var4)\n\n{\n  int shiftedNum1;\n  int shiftedNum2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool comparisonFlag;\n  \n  temp2 = num1 << 1;\n  comparisonFlag = temp2 == 0;\n  if (!comparisonFlag) {\n    var4 = num2 << 1;\n    comparisonFlag = var4 == 0;\n  }\n  if (!comparisonFlag) {\n    comparisonFlag = temp2 == var4;\n  }\n  shiftedNum1 = (int)temp2 >> 0x18;\n  if (!comparisonFlag) {\n    comparisonFlag = shiftedNum1 == -1;\n  }\n  if (!comparisonFlag) {\n    comparisonFlag = (int)var4 >> 0x18 == -1;\n  }\n  if (comparisonFlag) {\n    shiftedNum2 = (int)(num2 << 1) >> 0x18;\n    if (shiftedNum1 == -1 || shiftedNum2 == -1) {\n      temp2 = num2;\n      if (shiftedNum1 == -1) {\n        temp2 = num1;\n      }\n      if (shiftedNum1 != -1 || shiftedNum2 != -1) {\n        num2 = temp2;\n      }\n      comparisonFlag = (temp2 & 0x7fffff) == 0;\n      if (comparisonFlag) {\n        comparisonFlag = (num2 & 0x7fffff) == 0;\n      }\n      if (comparisonFlag) {\n        comparisonFlag = temp2 == num2;\n      }\n      if (!comparisonFlag) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((num1 ^ num2) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        num1 = num2;\n      }\n      return num1;\n    }\n    if (num1 != num2) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      temp2 = num1 << 1;\n      if ((num1 & 0x80000000) != 0) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return temp2;\n    }\n    if (temp2 < 0xfe000000) {\n      return num1 + 0x800000;\n    }\n    num1 = num1 & 0x80000000;\nLAB_08000c12:\n    return num1 | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  var4 = var4 >> 0x18;\n  temp4 = var4 - temp2;\n  comparisonFlag = temp4 != 0;\n  temp3 = temp2;\n  if (comparisonFlag && temp2 <= var4) {\n    temp3 = temp2 + temp4;\n  }\n  if (comparisonFlag && temp2 <= var4) {\n    num2 = num2 ^ num1;\n  }\n  if (comparisonFlag && temp2 <= var4) {\n    num1 = num1 ^ num2;\n  }\n  if (comparisonFlag && temp2 <= var4) {\n    num2 = num2 ^ num1;\n  }\n  if (var4 < temp2) {\n    temp4 = -temp4;\n  }\n  if (0x19 < temp4) {\n    return num1;\n  }\n  temp2 = num1 & 0xffffff | 0x800000;\n  if ((num1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  temp1 = num2 & 0xffffff | 0x800000;\n  if ((num2 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp3 == temp4) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      temp4 = temp4 - 1;\n    }\n  }\n  temp2 = temp2 + ((int)temp1 >> (temp4 & 0xff));\n  temp1 = temp1 << (0x20 - temp4 & 0xff);\n  num1 = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    comparisonFlag = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)comparisonFlag;\n  }\n  if (temp2 < 0x800000) {\n    temp4 = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp2 = temp2 * 2 + (uint)(temp4 != 0);\n    temp4 = temp3 - 2;\n    if ((temp2 & 0x800000) == 0) {\n      temp3 = LZCOUNT(temp2) - 8;\n      temp2 = temp2 << (temp3 & 0xff);\n      if ((int)temp4 < (int)temp3) {\n        temp2 = temp2 >> (-(temp4 - temp3) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (temp4 - temp3) * 0x800000;\n      }\n      return temp2 | num1;\n    }\n  }\n  else {\n    temp4 = temp3 - 1;\n    if (0xffffff < temp2) {\n      temp4 = temp2 & 1;\n      temp2 = temp2 >> 1;\n      temp1 = (uint)(temp4 != 0) << 0x1f | temp1 >> 1;\n      temp4 = temp3;\n      if (0xfd < temp3) goto LAB_08000c12;\n    }\n  }\n  temp2 = temp2 + temp4 * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | num1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "float_addition_08000adc",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "var3",
                "param_4": "var4",
                "iVar1": "shiftedNum1",
                "iVar2": "shiftedNum2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "bVar7": "comparisonFlag"
            },
            "calling": [
                "taskScheduler",
                "AHRS_GetPitch",
                "AK8963_Init",
                "Motor_DistributeSpeed",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_unsigned_result_08000c3c",
            "code": "\nuint calculateUnsignedResult_08000c3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int adjustedValue;\n  uint tempValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  adjustedValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    tempValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = adjustedValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = adjustedValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_unsigned_result_08000c3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "adjustedValue",
                "uVar4": "tempValue"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_result_08000c44",
            "code": "\nuint calculateResult_08000c44(uint inputValue)\n\n{\n  uint leadingZerosCount;\n  uint shiftedValue;\n  uint signMask;\n  int result;\n  \n  signMask = inputValue & 0x80000000;\n  if ((int)signMask < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZerosCount = countLeadingZeros(inputValue);\n  shiftedValue = leadingZerosCount - 8;\n  result = ((signMask | 0x4b000000) - 0x800000) + shiftedValue * -0x800000;\n  if (7 < leadingZerosCount) {\n    leadingZerosCount = 0 << (shiftedValue & 0xff);\n    signMask = result + (inputValue << (shiftedValue & 0xff)) +\n            (0U >> (0x20 - shiftedValue & 0xff)) + (uint)(0x7fffffff < leadingZerosCount);\n    if (leadingZerosCount == 0x80000000) {\n      signMask = signMask & 0xfffffffe;\n    }\n    return signMask;\n  }\n  shiftedValue = inputValue << leadingZerosCount + 0x18;\n  signMask = result + ((inputValue >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftedValue >> 0x1f));\n  if ((shiftedValue & 0x7fffffff) == 0) {\n    signMask = signMask & ~(shiftedValue >> 0x1f);\n  }\n  return signMask;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_result_08000c44",
                "param_1": "inputValue",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftedValue",
                "uVar3": "signMask",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "taskScheduler",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_08000cec",
            "code": "\nuint calculateFloat_08000cec(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint input1Extracted;\n  int sum;\n  int diff;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  bool isZero;\n  bool isNegative;\n  \n  input1Extracted = input1 >> 0x17 & 0xff;\n  isZero = input1Extracted == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = input1Extracted == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (input1Extracted == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      uVar8 = result;\n      if (((isZero) || ((input1Extracted == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (uVar8 = input2, (input2 & 0x7fffff) != 0)))) {\n        return uVar8 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = input1Extracted == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      input1Extracted = input1Extracted - 1;\n    }\n    input1 = input1 | result;\n    isZero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = input1Extracted + param4;\n  uVar8 = input1 ^ input2;\n  input1Extracted = input1 << 9;\n  isZero = input1Extracted == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (input1Extracted == 0) {\n      input2 = input2 << 9;\n    }\n    result = uVar8 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero = diff == 0;\n    iVar7 = diff;\n    if (!isZero && 0x7e < sum) {\n      isNegative = SBORROW4(0xff,diff);\n      iVar7 = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && iVar7 < 0 == isNegative) {\n      result = result | diff * 0x800000;\n    }\n    if (!isZero && iVar7 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    uVar6 = 0;\n    isNegative = SBORROW4(diff,1);\n    uVar8 = sum - 0x80;\n    isZero = uVar8 == 0;\n    input1Extracted = uVar8;\n  }\n  else {\n    product = (ulonglong)(input1Extracted >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    uVar6 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | uVar6 >> 0x1f;\n      uVar6 = uVar6 << 1;\n    }\n    result = uVar8 & 0x80000000 | result;\n    uVar8 = (sum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(uVar8,0xfd);\n    isZero = uVar8 == 0xfd;\n    input1Extracted = uVar8 - 0xfd;\n    if (uVar8 < 0xfe) {\n      result = result + uVar8 * 0x800000 + (uint)(0x7fffffff < uVar6);\n      if (uVar6 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)input1Extracted < 0 != isNegative) {\n    isZero = (int)(uVar8 + 0x19) < 0;\n    if (uVar8 == 0xffffffe7 || isZero != SCARRY4(uVar8,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (uVar8 != 0xffffffe7 && isZero == SCARRY4(uVar8,0x19)) {\n      input1Extracted = (result << 1) >> (-uVar8 & 0xff);\n      uVar8 = result << (uVar8 + 0x20 & 0xff);\n      input1Extracted = ((uint)((result & 0x80000000) != 0) << 0x1f | input1Extracted >> 1) + (uint)((byte)input1Extracted & 1);\n      if ((uVar6 | uVar8 << 1) == 0) {\n        input1Extracted = input1Extracted & ~(uVar8 >> 0x1f);\n      }\n      return input1Extracted;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "input1Extracted",
                "iVar4": "sum",
                "iVar5": "diff",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "AHRS_GetPitch",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "PID_UpdateAltitude",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_08000e54",
            "code": "\nuint calculate_float_08000e54(uint number1,uint number2,undefined4 undefined,uint bit_value)\n\n{\n  uint shifted_num2;\n  uint shifted_num1;\n  int difference;\n  uint temp1;\n  int temp2;\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  bool carry;\n  \n  shifted_num1 = number1 >> 0x17 & 0xff;\n  is_zero = shifted_num1 == 0;\n  if (!is_zero) {\n    bit_value = number2 >> 0x17 & 0xff;\n    is_zero = bit_value == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_num1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = bit_value == 0xff;\n  }\n  if (is_zero) {\n    bit_value = number2 >> 0x17 & 0xff;\n    result = number1;\n    if (shifted_num1 == 0xff) {\n      if (((number1 & 0x7fffff) != 0) || (result = number2, bit_value == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (bit_value == 0xff) {\n        result = number2;\n        if ((number2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (number1 ^ number2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      is_zero = (number1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (number2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = shifted_num1 == 0;\n        result = number1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            number1 = number1 << 1;\n            is_zero = (number1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          shifted_num1 = shifted_num1 - 1;\n        }\n        number1 = number1 | result;\n        is_zero = bit_value == 0;\n        result = number2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            number2 = number2 << 1;\n            is_zero = (number2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          bit_value = bit_value - 1;\n        }\n        number2 = number2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((number1 & 0x7fffffff) == 0) {\n        if ((number2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    number1 = number1 ^ number2;\n  }\n  else {\nLAB_08000e6c:\n    difference = shifted_num1 - bit_value;\n    if (number2 << 9 == 0) {\n      number1 = (number1 ^ number2) & 0x80000000 | number1 & 0x7fffff;\n      carry = SCARRY4(difference,0x7f);\n      temp2 = difference + 0x7f;\n      is_zero = temp2 < 0;\n      is_negative = temp2 == 0;\n      if (!is_negative && is_zero == carry) {\n        carry = SBORROW4(0xff,temp2);\n        is_zero = 0xff - temp2 < 0;\n        is_negative = temp2 == 0xff;\n      }\n      if (!is_negative && is_zero == carry) {\n        number1 = number1 | temp2 * 0x800000;\n      }\n      if (!is_negative && is_zero == carry) {\n        return number1;\n      }\n      number1 = number1 | 0x800000;\n      shifted_num1 = 0;\n      is_negative = SBORROW4(temp2,1);\n      temp1 = difference + 0x7e;\n      is_zero = temp1 == 0;\n      result = temp1;\n    }\n    else {\n      shifted_num2 = (number2 << 9) >> 4 | 0x10000000;\n      shifted_num1 = (number1 << 9) >> 4 | 0x10000000;\n      number1 = (number1 ^ number2) & 0x80000000;\n      is_zero = shifted_num2 <= shifted_num1;\n      if (!is_zero) {\n        shifted_num1 = shifted_num1 << 1;\n      }\n      temp1 = difference + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (shifted_num2 <= shifted_num1) {\n          shifted_num1 = shifted_num1 - shifted_num2;\n          number1 = number1 | result;\n        }\n        is_zero = shifted_num2 >> 1 <= shifted_num1;\n        if (is_zero) {\n          shifted_num1 = shifted_num1 - (shifted_num2 >> 1);\n        }\n        if (is_zero) {\n          number1 = number1 | result >> 1;\n        }\n        is_zero = shifted_num2 >> 2 <= shifted_num1;\n        if (is_zero) {\n          shifted_num1 = shifted_num1 - (shifted_num2 >> 2);\n        }\n        if (is_zero) {\n          number1 = number1 | result >> 2;\n        }\n        is_zero = shifted_num2 >> 3 <= shifted_num1;\n        if (is_zero) {\n          shifted_num1 = shifted_num1 - (shifted_num2 >> 3);\n        }\n        if (is_zero) {\n          number1 = number1 | result >> 3;\n        }\n        shifted_num1 = shifted_num1 * 0x10;\n        is_zero = shifted_num1 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      is_negative = SBORROW4(temp1,0xfd);\n      is_zero = temp1 == 0xfd;\n      result = temp1 - 0xfd;\n      if (temp1 < 0xfe) {\n        number1 = number1 + temp1 * 0x800000 + (uint)(shifted_num2 <= shifted_num1);\n        if (shifted_num1 - shifted_num2 == 0) {\n          number1 = number1 & 0xfffffffe;\n        }\n        return number1;\n      }\n    }\n    if (is_zero || (int)result < 0 != is_negative) {\n      is_zero = (int)(temp1 + 0x19) < 0;\n      if (temp1 == 0xffffffe7 || is_zero != SCARRY4(temp1,0x19)) {\n        number1 = number1 & 0x80000000;\n      }\n      if (temp1 == 0xffffffe7 || is_zero != SCARRY4(temp1,0x19)) {\n        return number1;\n      }\n      result = (number1 << 1) >> (-temp1 & 0xff);\n      temp1 = number1 << (temp1 + 0x20 & 0xff);\n      result = ((uint)((number1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((shifted_num1 | temp1 << 1) == 0) {\n        result = result & ~(temp1 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return number1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_08000e54",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "undefined",
                "param_4": "bit_value",
                "uVar1": "shifted_num2",
                "uVar2": "shifted_num1",
                "iVar3": "difference",
                "uVar4": "temp1",
                "iVar5": "temp2",
                "uVar6": "result",
                "bVar7": "is_zero",
                "bVar8": "is_negative",
                "bVar9": "carry"
            },
            "calling": [
                "taskScheduler",
                "PID_Compute",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculate_result_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_inputs;\n  bool is_combined_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_times_2 | input_2 & 0x7fffffff;\n  is_combined_zero = combined_inputs == 0;\n  if (!is_combined_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_combined_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_combined_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_combined_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_inputs",
                "bVar5": "is_combined_zero",
                "return": "result"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "compare_floating_point_numbers_08000ffc",
            "code": "\nvoid compareFloatingPointNumbers_08000ffc(undefined4 firstNumber,undefined4 secondNumber)\n\n{\n  __aeabi_cfcmpeq(secondNumber,firstNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "compare_floating_point_numbers_08000ffc",
                "param_1": "firstNumber",
                "param_2": "secondNumber"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_parameters_08001004",
            "code": "\nundefined8 concatenateParameters_08001004(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_parameters_08001004",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_equality_08001014",
            "code": "\nbool check_equality_08001014(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfcmpeq();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_equality_08001014",
                "in_ZR": "input_char"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_empty_08001028",
            "code": "\nbool check_if_empty_08001028(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_empty_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "PID_Compute",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_if_leq_zero_08001050",
            "code": "\nbool check_if_leq_zero_08001050(void)\n\n{\n  undefined is_zero;\n  undefined carry_flag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)carry_flag || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_if_leq_zero_08001050",
                "in_ZR": "is_zero",
                "in_CY": "carry_flag"
            },
            "calling": [
                "AHRS_GetYaw"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "is_null_character_08001064",
            "code": "\nbool is_null_character_08001064(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "is_null_character_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "PID_Compute",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extract_number_08001078",
            "code": "\nuint extract_number_08001078(uint masked_input)\n\n{\n  uint result;\n  uint temp;\n  \n  if (masked_input << 1 < 0x7f000000) {\n    return 0;\n  }\n  result = (masked_input << 1) >> 0x18;\n  temp = 0x9e - result;\n  if (result < 0x9f && temp != 0) {\n    result = (masked_input << 8 | 0x80000000) >> (temp & 0xff);\n    if ((masked_input & 0x80000000) != 0) {\n      result = -result;\n    }\n    return result;\n  }\n  if ((temp == 0xffffff9f) && ((masked_input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  masked_input = masked_input & 0x80000000;\n  if (masked_input == 0) {\n    masked_input = 0x7fffffff;\n  }\n  return masked_input;\n}\n\n",
            "renaming": {
                "FUN_08001078": "extract_number_08001078",
                "param_1": "masked_input",
                "uVar1": "result",
                "uVar2": "temp"
            },
            "calling": [
                "taskScheduler",
                "Motor_DistributeSpeed",
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "decode_value_080010c4",
            "code": "\nuint decode_value_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "decode_value_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_system_08001104",
            "code": "\nundefined4 initializeSystem_08001104(undefined4 priority)\n\n{\n  uint sysClockFreq;\n  \n  sysClockFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(sysClockFreq / 1000);\n  HAL_NVIC_SetPriority(0xffffffff,priority,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "param_1": "priority",
                "uVar1": "sysClockFreq"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_hardware_08001128",
            "code": "\n\n\nundefined4 initializeHardware_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configureInterruptPriorityGroup(3);\n  initializeSystemTick(0);\n  initializePeripheralInterrupts();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_hardware_08001128",
                "HAL_NVIC_SetPriorityGrouping": "configureInterruptPriorityGroup",
                "HAL_InitTick": "initializeSystemTick",
                "HAL_MspInit": "initializePeripheralInterrupts"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_data_counter_0800114c",
            "code": "\nvoid incrementDataCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_data_counter_0800114c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "micros",
                "HAL_I2C_Mem_Read",
                "serialWrite",
                "HAL_RCC_OscConfig",
                "millis",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_memory_protection_08001170",
            "code": "\n\n\nvoid configureMemoryProtection_08001170(uint protectionLevel)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (protectionLevel & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_memory_protection_08001170",
                "param_1": "protectionLevel"
            },
            "calling": [
                "HAL_MspInit",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "update_memory_location_08001194",
            "code": "\n\n\nvoid updateMemoryLocation_08001194(uint memoryAddress,uint value1,uint value2)\n\n{\n  undefined shiftedValue;\n  uint shiftAmount;\n  uint leftShiftedAmount;\n  uint shiftedAmountPlusFour;\n  \n  leftShiftedAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - leftShiftedAmount;\n  shiftedAmountPlusFour = leftShiftedAmount + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (shiftedAmountPlusFour < 7) {\n    leftShiftedAmount = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < shiftedAmountPlusFour) {\n    leftShiftedAmount = leftShiftedAmount - 3;\n  }\n  shiftedValue = (undefined)\n          ((value2 & (1 << (leftShiftedAmount & 0xff)) - 1U | (value1 & shiftAmount) << (leftShiftedAmount & 0xff)) << 4);\n  if (-1 < (int)memoryAddress) {\n    leftShiftedAmount = memoryAddress + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    leftShiftedAmount = memoryAddress & 0xf;\n  }\n  if (-1 < (int)memoryAddress) {\n    *(undefined *)(leftShiftedAmount + 0x300) = shiftedValue;\n  }\n  else {\n    *(undefined *)(shiftAmount + leftShiftedAmount) = shiftedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "update_memory_location_08001194",
                "param_1": "memoryAddress",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount",
                "uVar3": "leftShiftedAmount",
                "uVar4": "shiftedAmountPlusFour"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config",
                "HAL_UART_MspInit",
                "HAL_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_value_080011fc",
            "code": "\nvoid setBitValue_080011fc(uint inputValue)\n\n{\n  *(int *)((inputValue >> 5) * 4 + -0x1fff1f00) = 1 << (inputValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_value_080011fc",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_UART_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "update_input_value_08001214",
            "code": "\n\n\nundefined4 update_input_value_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "update_input_value_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_08001240",
            "code": "\n\n\nvoid setFlag_08001240(int flagValue)\n\n{\n  if (flagValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "flagValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_bits_08001264",
            "code": "\n\n\nvoid updateBits_08001264(uint *source,uint *values)\n\n{\n  uint bitMask;\n  uint bit;\n  uint value;\n  int bitOffset;\n  uint i;\n  uint bitShift;\n  uint checkValue;\n  uint *target;\n  int registerIndex;\n  \n  bitMask = 0;\n  i = 0;\n  do {\n    bitShift = 1 << (i & 0xff);\n    bit = bitShift & *values;\n    if (bitShift == bit) {\n      value = values[1];\n      if (value == 0x12) {\n        bitMask = values[3] + 0xc;\n      }\n      else if (value < 0x13) {\n        if (value == 2) {\n          bitMask = values[3] + 8;\n        }\n        else if (value < 3) {\n          if (value == 0) goto LAB_080013be;\n          if (value == 1) {\n            bitMask = values[3];\n          }\n        }\n        else if (value == 3) {\n          bitMask = 0;\n        }\n        else if (value == 0x11) {\n          bitMask = values[3] + 4;\n        }\n      }\n      else {\n        if (value != 0x10210000) {\n          if (value < 0x10210001) {\n            if (value != 0x10110000) {\n              checkValue = 0x10120000;\nLAB_080013b8:\n              if (value != checkValue) goto LAB_080012a8;\n            }\n          }\n          else if ((value != 0x10310000) && (value != 0x10320000)) {\n            checkValue = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        bitMask = values[2];\n        if (bitMask == 0) {\n          bitMask = 4;\n        }\n        else {\n          if (bitMask == 1) {\n            source[4] = bitShift;\n          }\n          if (bitMask != 1) {\n            source[5] = bitShift;\n          }\n          bitMask = 8;\n        }\n      }\nLAB_080012a8:\n      if (bit < 0x100) {\n        bitShift = *source;\n        value = i << 2;\n        target = source;\n      }\n      else {\n        bitShift = source[1];\n        value = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bit) {\n        target = source + 1;\n      }\n      *target = bitShift & ~(0xf << (value & 0xff)) | bitMask << (value & 0xff);\n      target = (uint *)values[1];\n      if (((uint)target & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        registerIndex = (i & 3) << 2;\n        if (source == (uint *)0x40010800) {\n          bitOffset = 0;\n        }\n        else if (source == (uint *)0x40010c00) {\n          bitOffset = 1;\n        }\n        else if (source == (uint *)0x40011000) {\n          bitOffset = 2;\n        }\n        else if (source == (uint *)0x40011400) {\n          bitOffset = 3;\n        }\n        else {\n          bitOffset = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             bitOffset << registerIndex | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << registerIndex);\n        if (((uint)target & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit;\n        }\n        if (((uint)target & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit;\n        }\n        if (((uint)target & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit;\n        }\n        if (((uint)target & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit;\n        }\n        else {\n          _DAT_4001040c = bit | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_bits_08001264",
                "param_1": "source",
                "param_2": "values",
                "uVar1": "bitMask",
                "uVar2": "bit",
                "uVar3": "value",
                "iVar4": "bitOffset",
                "uVar5": "i",
                "uVar6": "bitShift",
                "uVar7": "checkValue",
                "unaff_r10": "target",
                "iVar8": "registerIndex"
            },
            "calling": [
                "Peripherals_Init",
                "HAL_UART_MspInit",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_08001424",
            "code": "\nvoid set_param_08001424(int arg1,int arg2,int arg3)\n\n{\n  if (arg3 == 0) {\n    arg2 = arg2 << 0x10;\n  }\n  *(int *)(arg1 + 0x10) = arg2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_08001424",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [
                "Peripherals_Init",
                "toggleLED",
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "apply_xor_on_parameter_0800142e",
            "code": "\nvoid applyXOROnParameter_0800142e(int inputAddress,uint xorValue)\n\n{\n  *(uint *)(inputAddress + 0xc) = xorValue ^ *(uint *)(inputAddress + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "apply_xor_on_parameter_0800142e",
                "param_1": "inputAddress",
                "param_2": "xorValue"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "update_data_08001436",
            "code": "\nundefined4 updateData_08001436(int *dataPtr)\n\n{\n  int value;\n  \n  value = *dataPtr;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)dataPtr + 0x35) = 0x20;\n    *(undefined *)(dataPtr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "update_data_08001436",
                "param_1": "dataPtr",
                "iVar1": "value",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_condition_08001460",
            "code": "\nundefined4 checkCondition_08001460(uint **paramList,uint flag,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint value;\n  uint *ptrToParam;\n  \n  startTime = HAL_GetTick();\n  do {\n    ptrToParam = *paramList;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = ptrToParam[5];\n    }\n    else {\n      value = ptrToParam[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(ptrToParam[5] << 0x15) < 0) {\n      *ptrToParam = *ptrToParam | 0x200;\n      ptrToParam[5] = ptrToParam[5] & 0xfffffbff;\n      paramList[0xe] = (uint *)0x4;\n      *(undefined *)((int)paramList + 0x35) = 0x20;\n      *(undefined *)(paramList + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout))));\n  *(undefined *)((int)paramList + 0x35) = 0x20;\n  *(undefined *)(paramList + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_condition_08001460",
                "param_1": "paramList",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "value",
                "puVar4": "ptrToParam"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_i2_c_acknowledge_080014e2",
            "code": "\nundefined4 checkI2CAcknowledge_080014e2(int *device,uint timeout)\n\n{\n  int startTime;\n  int acknowledgeFailed;\n  \n  startTime = HAL_GetTick();\n  while( true ) {\n    if (*(int *)(*device + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    acknowledgeFailed = I2C_IsAcknowledgeFailed(device);\n    if (acknowledgeFailed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (acknowledgeFailed = HAL_GetTick(), timeout < (uint)(acknowledgeFailed - startTime))))) {\n      device[0xe] = device[0xe] | 0x20;\n      *(undefined *)((int)device + 0x35) = 0x20;\n      *(undefined *)(device + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_i2_c_acknowledge_080014e2",
                "param_1": "device",
                "param_2": "timeout",
                "iVar1": "startTime",
                "iVar2": "acknowledgeFailed"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "perform_i2_c_transfer_08001530",
            "code": "\nundefined4 performI2CTransfer_08001530(uint **i2cHandle,uint devAddress,uint regAddress,int isSingleByte,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint *i2cBuffer;\n  uint **i2cPtr;\n  uint devAddressMasked;\n  uint regAddressMasked;\n  \n  **i2cHandle = **i2cHandle | 0x100;\n  i2cPtr = i2cHandle;\n  devAddressMasked = devAddress;\n  regAddressMasked = regAddress;\n  startTime = HAL_GetTick();\n  do {\n    i2cBuffer = *i2cHandle;\n    do {\n      if ((int)(i2cBuffer[5] << 0x1f) < 0) {\n        i2cBuffer[4] = devAddress & 0xfe;\n        startTime = I2C_WaitOnMasterAddressFlagUntilTimeout\n                          (i2cHandle,0x10002,timeout,i2cBuffer,i2cPtr,devAddressMasked,regAddressMasked);\n        if (startTime == 0) {\n          startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cHandle,timeout,(*i2cHandle)[5],(*i2cHandle)[6]);\n          if (startTime == 0) {\n            i2cBuffer = *i2cHandle;\n            if (isSingleByte == 1) {\nLAB_080015ca:\n              i2cBuffer[4] = regAddress & 0xff;\n              return 0;\n            }\n            i2cBuffer[4] = regAddress >> 8;\n            startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cHandle,timeout);\n            if (startTime == 0) {\n              i2cBuffer = *i2cHandle;\n              goto LAB_080015ca;\n            }\n          }\n          if (i2cHandle[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **i2cHandle = **i2cHandle | 0x200;\n        }\n        else if (i2cHandle[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (timeout == 0xffffffff);\n    if ((timeout == 0) || (currentTime = HAL_GetTick(), timeout < (uint)(currentTime - startTime))) {\n      *(undefined *)((int)i2cHandle + 0x35) = 0x20;\n      *(undefined *)(i2cHandle + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "perform_i2_c_transfer_08001530",
                "param_1": "i2cHandle",
                "param_2": "devAddress",
                "param_3": "regAddress",
                "param_4": "isSingleByte",
                "param_5": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "i2cBuffer",
                "ppuVar4": "i2cPtr",
                "uVar5": "devAddressMasked",
                "uVar6": "regAddressMasked"
            },
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "perform_i2_c_transaction_080015e8",
            "code": "\nundefined4 performI2CTransaction_080015e8(uint **i2cConfig,uint slaveAddress,uint data,int numBytes,uint timeout)\n\n{\n  int tickStart;\n  int currentTick;\n  uint *i2cState;\n  uint **ppi2cConfig;\n  uint slaveAddressMask;\n  uint dataToSend;\n  \n  i2cState = *i2cConfig;\n  *i2cState = *i2cState | 0x400;\n  *i2cState = *i2cState | 0x100;\n  ppi2cConfig = i2cConfig;\n  slaveAddressMask = slaveAddress;\n  dataToSend = data;\n  tickStart = HAL_GetTick();\nLAB_0800160e:\n  i2cState = *i2cConfig;\n  while (-1 < (int)(i2cState[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  i2cState[4] = slaveAddress & 0xfe;\n  tickStart = I2C_WaitOnMasterAddressFlagUntilTimeout\n                    (i2cConfig,0x10002,timeout,i2cState,ppi2cConfig,slaveAddressMask,dataToSend);\n  if (tickStart != 0) goto LAB_080016ba;\n  tickStart = I2C_WaitOnTXEFlagUntilTimeout(i2cConfig,timeout,(*i2cConfig)[5],(*i2cConfig)[6]);\n  if (tickStart == 0) {\n    i2cState = *i2cConfig;\n    if (numBytes != 1) {\n      i2cState[4] = data >> 8;\n      tickStart = I2C_WaitOnTXEFlagUntilTimeout(i2cConfig,timeout);\n      if (tickStart != 0) goto LAB_08001642;\n      i2cState = *i2cConfig;\n    }\n    i2cState[4] = data & 0xff;\n    tickStart = I2C_WaitOnTXEFlagUntilTimeout(i2cConfig,timeout);\n    if (tickStart == 0) {\n      **i2cConfig = **i2cConfig | 0x100;\n      tickStart = HAL_GetTick();\n      do {\n        do {\n          if ((int)((*i2cConfig)[5] << 0x1f) < 0) {\n            (*i2cConfig)[4] = slaveAddress & 0xff | 1;\n            tickStart = I2C_WaitOnMasterAddressFlagUntilTimeout(i2cConfig,0x10002,timeout);\n            if (tickStart == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (i2cConfig[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTick = HAL_GetTick(), (uint)(currentTick - tickStart) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)i2cConfig + 0x35) = 0x20;\n      *(undefined *)(i2cConfig + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (i2cConfig[0xe] == (uint *)0x4) {\n    **i2cConfig = **i2cConfig | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (currentTick = HAL_GetTick(), timeout < (uint)(currentTick - tickStart))) goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "perform_i2_c_transaction_080015e8",
                "param_1": "i2cConfig",
                "param_2": "slaveAddress",
                "param_3": "data",
                "param_4": "numBytes",
                "param_5": "timeout",
                "iVar1": "tickStart",
                "iVar2": "currentTick",
                "puVar3": "i2cState",
                "ppuVar4": "ppi2cConfig",
                "uVar5": "slaveAddressMask",
                "uVar6": "dataToSend"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_timeout_and_set_flags_080016f4",
            "code": "\nundefined4 checkTimeoutAndSetFlags_080016f4(int *data,uint timeout)\n\n{\n  int startTick;\n  int currentValue;\n  \n  startTick = HAL_GetTick();\n  while( true ) {\n    currentValue = *data;\n    if ((*(uint *)(currentValue + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentValue + 0x14) << 0x1b < 0) break;\n    if ((timeout == 0) || (currentValue = HAL_GetTick(), timeout < (uint)(currentValue - startTick))) {\n      dataFlag = dataFlag | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentValue + 0x14) = *(uint *)(currentValue + 0x14) & 0xffffffef;\n  dataFlag = 0;\n  *(undefined *)(data + 0xd) = 0;\n  *(undefined *)((int)data + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_timeout_and_set_flags_080016f4",
                "param_1": "data",
                "param_2": "timeout",
                "iVar1": "startTick",
                "iVar2": "currentValue",
                "param_1[0xe]": "dataFlag"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_i2_c_08001754",
            "code": "\nundefined4 initializeI2C_08001754(uint **parameter)\n\n{\n  uint pclk1;\n  uint pclk1_high;\n  uint *param_1_ptr;\n  uint *param_2_ptr;\n  uint *param_3_ptr;\n  uint pclk1_divided;\n  undefined8 pclk1_freq;\n  \n  if (parameter != (uint **)0x0) {\n    if (*(char *)((int)parameter + 0x35) == '\\0') {\n      *(undefined *)(parameter + 0xd) = 0;\n      initializeI2C_08001754Periph();\n    }\n    *(undefined *)((int)parameter + 0x35) = 0x24;\n    **parameter = **parameter & 0xfffffffe;\n    pclk1_freq = getPCLK1Frequency();\n    pclk1_high = (uint)((ulonglong)pclk1_freq >> 0x20);\n    pclk1 = (uint)pclk1_freq;\n    param_2_ptr = parameter[1];\n    pclk1_divided = pclk1 / 1000000;\n    if ((uint *)0x186a0 < param_2_ptr) {\n      pclk1_high = 300;\n    }\n    param_1_ptr = *parameter;\n    if ((uint *)0x186a0 < param_2_ptr) {\n      pclk1_high = pclk1_divided * pclk1_high;\n    }\n    param_1_ptr[1] = pclk1_divided;\n    if ((uint *)0x186a0 < param_2_ptr) {\n      pclk1_divided = pclk1_high / 1000;\n    }\n    param_1_ptr[8] = pclk1_divided + 1;\n    if (param_2_ptr < (uint *)0x186a1) {\n      pclk1 = pclk1 / (uint)((int)param_2_ptr << 1);\n      if ((pclk1 & 0xfff) < 4) {\n        pclk1 = 4;\n      }\n    }\n    else {\n      if (parameter[2] == (uint *)0x0) {\n        pclk1 = pclk1 / (uint)((int)param_2_ptr * 3) | 0x8000;\n      }\n      else {\n        pclk1 = pclk1 / (uint)((int)param_2_ptr * 0x19) | 0xc000;\n      }\n      if ((pclk1 & 0xfff) == 0) {\n        pclk1 = 1;\n      }\n    }\n    param_2_ptr = parameter[8];\n    param_3_ptr = parameter[7];\n    param_1_ptr[7] = pclk1;\n    *param_1_ptr = (uint)param_3_ptr | (uint)param_2_ptr;\n    param_1_ptr[2] = (uint)parameter[4] | (uint)parameter[3];\n    param_1_ptr[3] = (uint)parameter[5] | (uint)parameter[6];\n    *param_1_ptr = *param_1_ptr | 1;\n    parameter[0xe] = (uint *)0x0;\n    *(undefined *)((int)parameter + 0x35) = 0x20;\n    *(undefined *)((int)parameter + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_i2_c_08001754",
                "param_1": "parameter",
                "uVar1": "pclk1",
                "uVar2": "pclk1_high",
                "puVar3": "param_1_ptr",
                "puVar4": "param_2_ptr",
                "puVar5": "param_3_ptr",
                "uVar6": "pclk1_divided",
                "uVar7": "pclk1_freq",
                "HAL_I2C_MspInit": "initializeI2CPeriph",
                "HAL_RCC_GetPCLK1Freq": "getPCLK1Frequency"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "i2c_transfer_08001828",
            "code": "\nundefined4\ni2c_transfer_08001828(uint **device,undefined4 reg_addr,undefined4 reg_addr_size,undefined4 data,byte *data_size,\n            short timeout,undefined4 mem_block_size)\n\n{\n  int start_time;\n  int current_time;\n  uint *device_ptr;\n  uint reg_data;\n  \n  if (*(char *)((int)device + 0x35) == ' ') {\n    if (data_size == (byte *)0x0) {\n      return 1;\n    }\n    if (timeout == 0) {\n      return 1;\n    }\n    start_time = HAL_GetTick();\n    do {\n      device_ptr = *device;\n      if ((~device_ptr[6] & 2) != 0) {\n        if (*(char *)(device + 0xd) == '\\x01') {\n          return 2;\n        }\n        reg_data = *device_ptr;\n        *(undefined *)(device + 0xd) = 1;\n        *device_ptr = reg_data & 0xfffff7ff;\n        *(undefined *)((int)device + 0x35) = 0x21;\n        *(undefined *)((int)device + 0x36) = 0x40;\n        device[0xe] = (uint *)0x0;\n        start_time = request_memory_write(device,reg_addr,reg_addr_size,data,mem_block_size);\n        if (start_time != 0) {\n          *(undefined *)(device + 0xd) = 0;\n          if (device[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      current_time = HAL_GetTick();\n    } while ((uint)(current_time - start_time) < 0x2711);\n    *(undefined *)(device + 0xd) = 0;\n    *(undefined *)((int)device + 0x35) = 0x20;\n  }\n  return 2;\n  while (timeout != 0) {\nLAB_080018e2:\n    start_time = wait_on_TXE_flag_until_timeout(device,mem_block_size);\n    if (start_time != 0) goto LAB_080018ee;\n    device_ptr = *device;\n    device_ptr[4] = (uint)*data_size;\n    if ((int)(device_ptr[5] << 0x1d) < 0) {\n      if ((short)(timeout + -1) == 0) break;\n      timeout = timeout + -2;\n      device_ptr[4] = (uint)data_size[1];\n      data_size = data_size + 2;\n    }\n    else {\n      data_size = data_size + 1;\n      timeout = timeout + -1;\n    }\n  }\n  start_time = wait_on_TXE_flag_until_timeout(device,mem_block_size);\n  if (start_time == 0) {\n    **device = **device | 0x200;\n    *(undefined *)(device + 0xd) = 0;\n    *(undefined *)((int)device + 0x35) = 0x20;\n    *(undefined *)((int)device + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (device[0xe] == (uint *)0x4) {\n    **device = **device | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "i2c_transfer_08001828",
                "param_1": "device",
                "param_2": "reg_addr",
                "param_3": "reg_addr_size",
                "param_4": "data",
                "param_5": "data_size",
                "param_6": "timeout",
                "param_7": "mem_block_size",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "puVar3": "device_ptr",
                "uVar4": "reg_data",
                "I2C_RequestMemoryWrite": "request_memory_write",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_on_TXE_flag_until_timeout"
            },
            "calling": [
                "I2C_WriteByte"
            ],
            "called": [
                "I2C_RequestMemoryWrite",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "perform_i2_c_request_08001938",
            "code": "\nundefined4\nperformI2CRequest_08001938(uint **i2cData,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n            undefined *outputData,ushort numBytes,uint timeout)\n\n{\n  undefined *currentOutputData;\n  int startTime;\n  int currentTime;\n  uint *currentI2CData;\n  uint currentI2CDataValue;\n  undefined *nextOutputData;\n  bool isNextOutputDataChar;\n  \n  if (*(char *)((int)i2cData + 0x35) != ' ') {\n    return 2;\n  }\n  if (outputData == (undefined *)0x0) {\n    return 1;\n  }\n  if (numBytes == 0) {\n    return 1;\n  }\n  startTime = HAL_GetTick();\n  while (currentI2CData = *i2cData, (~currentI2CData[6] & 2) == 0) {\n    currentTime = HAL_GetTick();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(i2cData + 0xd) = 0;\n      *(undefined *)((int)i2cData + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(i2cData + 0xd) == '\\x01') {\n    return 2;\n  }\n  currentI2CDataValue = *currentI2CData;\n  *(undefined *)(i2cData + 0xd) = 1;\n  *currentI2CData = currentI2CDataValue & 0xfffff7ff;\n  *(undefined *)((int)i2cData + 0x35) = 0x22;\n  *(undefined *)((int)i2cData + 0x36) = 0x40;\n  i2cData[0xe] = (uint *)0x0;\n  startTime = I2C_RequestMemoryRead(i2cData,arg2,arg3,arg4,timeout);\n  if (startTime != 0) {\n    *(undefined *)(i2cData + 0xd) = 0;\n    if (i2cData[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  currentI2CData = *i2cData;\n  currentI2CDataValue = *currentI2CData;\n  if (numBytes == 1) {\n    *currentI2CData = currentI2CDataValue & 0xfffffbff;\n    disableIRQinterrupts();\n    **i2cData = **i2cData | 0x200;\n    enableIRQinterrupts();\n    startTime = I2C_WaitOnRXNEFlagUntilTimeout(i2cData,timeout);\n    if (startTime == 0) {\n      *outputData = (char)(*i2cData)[4];\nLAB_08001ab8:\n      *(undefined *)((int)i2cData + 0x35) = 0x20;\n      *(undefined *)((int)i2cData + 0x36) = 0;\n      *(undefined *)(i2cData + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (i2cData[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (numBytes == 2) {\n    *currentI2CData = currentI2CDataValue | 0x800;\n    disableIRQinterrupts();\n    **i2cData = **i2cData & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *currentI2CData = currentI2CDataValue | 0x400;\n    while (3 < numBytes) {\n      startTime = I2C_WaitOnRXNEFlagUntilTimeout(i2cData,timeout);\n      if (startTime != 0) goto LAB_08001a18;\n      *outputData = (char)(*i2cData)[4];\n      currentI2CData = *i2cData;\n      isNextOutputDataChar = (int)(currentI2CData[5] << 0x1d) < 0;\n      if (isNextOutputDataChar) {\n        currentI2CData = (uint *)currentI2CData[4];\n        nextOutputData = outputData + 2;\n        numBytes = numBytes - 2;\n      }\n      else {\n        nextOutputData = outputData + 1;\n        numBytes = numBytes - 1;\n      }\n      currentOutputData = outputData + 1;\n      outputData = nextOutputData;\n      if (isNextOutputDataChar) {\n        *currentOutputData = (char)currentI2CData;\n      }\n    }\n    if (numBytes != 2) {\n      startTime = HAL_GetTick();\n      do {\n        currentI2CData = *i2cData;\n        do {\n          if ((int)(currentI2CData[5] << 0x1d) < 0) {\n            *currentI2CData = *currentI2CData & 0xfffffbff;\n            disableIRQinterrupts();\n            *outputData = (char)(*i2cData)[4];\n            startTime = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = HAL_GetTick();\n  do {\n    do {\n      if ((int)((*i2cData)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        currentI2CData = *i2cData;\n        *currentI2CData = *currentI2CData | 0x200;\n        *outputData = (char)currentI2CData[4];\n        enableIRQinterrupts();\n        outputData[1] = (char)(*i2cData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)i2cData + 0x35) = 0x20;\n  *(undefined *)(i2cData + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    currentI2CData = *i2cData;\n    do {\n      if ((int)(currentI2CData[5] << 0x1d) < 0) {\n        *currentI2CData = *currentI2CData | 0x200;\n        outputData[1] = (char)currentI2CData[4];\n        enableIRQinterrupts();\n        outputData[2] = (char)(*i2cData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "perform_i2_c_request_08001938",
                "param_1": "i2cData",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "outputData",
                "param_6": "numBytes",
                "param_7": "timeout",
                "puVar1": "currentOutputData",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "currentI2CData",
                "uVar5": "currentI2CDataValue",
                "puVar6": "nextOutputData",
                "bVar7": "isNextOutputDataChar"
            },
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "HAL_GetTick",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_status_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_status_08001b58(int *input_values)\n\n{\n  int temporary_var;\n  int time_var;\n  \n  if (*input_values << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (input_values[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      temporary_var = input_values[1];\n      if (temporary_var == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (temporary_var == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          temporary_var = get_current_tick();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            time_var = get_current_tick();\n            if (100 < (uint)(time_var - temporary_var)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (temporary_var == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      temporary_var = get_current_tick();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        time_var = get_current_tick();\n        if (100 < (uint)(time_var - temporary_var)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*input_values << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (input_values[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      register_3 = input_values[4];\n      if (register_3 == 0) {\n        temporary_var = get_current_tick();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          time_var = get_current_tick();\n          if (2 < (uint)(time_var - temporary_var)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      register_3 = 1;\n      temporary_var = get_current_tick();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        time_var = get_current_tick();\n        if (2 < (uint)(time_var - temporary_var)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = input_values[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*input_values << 0x1c < 0) {\n    register_4 = input_values[6];\n    if (register_4 == 0) {\n      temporary_var = get_current_tick();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        time_var = get_current_tick();\n        if (2 < (uint)(time_var - temporary_var)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      register_4 = 1;\n      temporary_var = get_current_tick();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        time_var = get_current_tick();\n        if (2 < (uint)(time_var - temporary_var)) {\n          return 3;\n        }\n      }\n      delay(1);\n    }\n  }\n  if (-1 < *input_values << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  temporary_var = get_current_tick();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    time_var = get_current_tick();\n    if (100 < (uint)(time_var - temporary_var)) {\n      return 3;\n    }\n  }\n  temporary_var = input_values[3];\n  if (temporary_var == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (temporary_var == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      temporary_var = get_current_tick();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        time_var = get_current_tick();\n        if (5000 < (uint)(time_var - temporary_var)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (temporary_var == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  temporary_var = get_current_tick();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    time_var = get_current_tick();\n    if (5000 < (uint)(time_var - temporary_var)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (input_values[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (input_values[7] != 2) {\n      register_8 = 0;\n      temporary_var = get_current_tick();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        time_var = get_current_tick();\n      } while ((uint)(time_var - temporary_var) < 3);\n      return 3;\n    }\n    register_8 = 0;\n    temporary_var = get_current_tick();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (input_values[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | input_values[2];\n        }\n        _DAT_40021004 = input_values[8] | input_values[9] | _DAT_40021004 & 0xffc2ffff;\n        register_8 = 1;\n        temporary_var = get_current_tick();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          time_var = get_current_tick();\n        } while ((uint)(time_var - temporary_var) < 3);\n        return 3;\n      }\n      time_var = get_current_tick();\n    } while ((uint)(time_var - temporary_var) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_status_08001b58",
                "param_1": "input_values",
                "iVar1": "temporary_var",
                "iVar2": "time_var",
                "iRam42420000": "register_3",
                "HAL_GetTick": "get_current_tick",
                "iRam42420480": "register_4",
                "HAL_Delay": "delay",
                "param_1[3]": "input_values[3]",
                "param_1[7]": "input_values[7]",
                "uRam42420060": "register_8",
                "param_1[8]": "input_values[8]",
                "param_1[2]": "input_values[2]",
                "param_1[9]": "input_values[9]"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_clock_frequency_08002008",
            "code": "\n\n\nint calculateClockFrequency_08002008(void)\n\n{\n  undefined4 value;\n  int clockFrequency;\n  undefined4 nextValue;\n  undefined4 *dataArray;\n  uint divider;\n  undefined4 *resultArray;\n  byte flags [4];\n  undefined4 configArray [5];\n  \n  dataArray = &DAT_080072f0;\n  resultArray = configArray;\n  do {\n    value = *dataArray;\n    nextValue = dataArray[1];\n    dataArray = dataArray + 2;\n    *resultArray = value;\n    resultArray[1] = nextValue;\n    resultArray = resultArray + 2;\n  } while (dataArray != (undefined4 *)\"../Src/MPU9250.c\");\n  flags[0] = 1;\n  flags[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      divider = 8000000 / flags[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      divider = 4000000;\n    }\n    clockFrequency = divider * *(byte *)((int)configArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockFrequency = 8000000;\n  }\n  return clockFrequency;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_clock_frequency_08002008",
                "uVar1": "value",
                "iVar2": "clockFrequency",
                "uVar3": "nextValue",
                "puVar4": "dataArray",
                "uVar5": "divider",
                "puVar6": "resultArray",
                "local_24": "flags",
                "local_20": "configArray"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "initialize_system_0800209c",
            "code": "\n\n\nundefined4 initializeSystem_0800209c(uint *configParams,uint numParams)\n\n{\n  char isParam2Zero;\n  char isParam2One;\n  int leftShiftCount;\n  uint parameter;\n  int currentTick;\n  uint shiftedValue;\n  \n  if ((numParams <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | numParams, numParams == (numParams & 7))) {\n    if ((int)(*configParams << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configParams[2];\n    }\n    leftShiftCount = *configParams << 0x1f;\n    if (-1 < leftShiftCount) {\nLAB_080020ba:\n      if ((numParams < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | numParams, numParams != (numParams & 7))) {\n        return 1;\n      }\n      if ((*configParams & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configParams[3];\n      }\n      if ((int)(*configParams << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configParams[4] << 3;\n      }\n      parameter = HAL_RCC_GetSysClockFreq();\n      DAT_200001bc = parameter >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      HAL_InitTick(0);\n      return 0;\n    }\n    parameter = configParams[1];\n    if (parameter == 1) {\n      isParam2One = '\\x01';\n      isParam2Zero = '\\0';\n    }\n    else {\n      shiftedValue = _DAT_40021000;\n      if (parameter == 2) goto LAB_08002176;\n      isParam2One = '\\0';\n      isParam2Zero = '\\x01';\n    }\n    shiftedValue = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(isParam2Zero << 6) << 0x18 | (uint)(byte)(isParam2One << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shiftedValue < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | parameter;\n      leftShiftCount = HAL_GetTick(leftShiftCount,shiftedValue);\n      if (configParams[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - leftShiftCount) < 0x1389);\n      }\n      else if (configParams[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - leftShiftCount) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - leftShiftCount) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "initialize_system_0800209c",
                "param_1": "configParams",
                "param_2": "numParams",
                "cVar1": "isParam2Zero",
                "cVar2": "isParam2One",
                "iVar3": "leftShiftCount",
                "uVar4": "parameter",
                "iVar5": "currentTick",
                "uVar6": "shiftedValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_08002214",
            "code": "\nundefined4 get_data_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_08002214"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_data_08002220",
            "code": "\n\n\nuint get_shifted_data_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_data_08002220"
            },
            "calling": [
                "HAL_I2C_Init",
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_bit_value_08002250",
            "code": "\n\n\nuint getBitValue_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_bit_value_08002250"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_parameters_08002280",
            "code": "\nvoid updateParameters_08002280(int baseAddress,uint *values)\n\n{\n  uint newParam1;\n  uint newParam2;\n  uint newParam3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffffe;\n  newParam2 = *(uint *)(baseAddress + 4);\n  newParam3 = *values;\n  newParam1 = *(uint *)(baseAddress + 0x20) & 0xfffffffd | values[2];\n  if (baseAddress == 0x40012c00) {\n    newParam1 = (newParam1 & 0xfffffff7 | values[3]) & 0xfffffffb;\n    newParam2 = newParam2 & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(baseAddress + 4) = newParam2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffffff8c | newParam3;\n  *(uint *)(baseAddress + 0x34) = values[1];\n  *(uint *)(baseAddress + 0x20) = newParam1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_parameters_08002280",
                "param_1": "baseAddress",
                "param_2": "values",
                "uVar1": "newParam1",
                "uVar2": "newParam2",
                "uVar3": "newParam3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "initialize_parameters_080022d0",
            "code": "\nvoid initializeParameters_080022d0(int paramAddress,uint *paramValues)\n\n{\n  uint updatedParam1;\n  uint updatedParam2;\n  uint updatedParam3;\n  \n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xfffffeff;\n  updatedParam2 = *(uint *)(paramAddress + 4);\n  updatedParam3 = *paramValues;\n  updatedParam1 = *(uint *)(paramAddress + 0x20) & 0xfffffdff | paramValues[2] << 8;\n  if (paramAddress == 0x40012c00) {\n    updatedParam1 = (updatedParam1 & 0xfffff7ff | paramValues[3] << 8) & 0xfffffbff;\n    updatedParam2 = updatedParam2 & 0xffffcfff | (paramValues[5] | paramValues[6]) << 4;\n  }\n  *(uint *)(paramAddress + 4) = updatedParam2;\n  *(uint *)(paramAddress + 0x1c) = *(uint *)(paramAddress + 0x1c) & 0xffffff8c | updatedParam3;\n  *(uint *)(paramAddress + 0x3c) = paramValues[1];\n  *(uint *)(paramAddress + 0x20) = updatedParam1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "initialize_parameters_080022d0",
                "param_1": "paramAddress",
                "param_2": "paramValues",
                "uVar1": "updatedParam1",
                "uVar2": "updatedParam2",
                "uVar3": "updatedParam3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_configuration_08002324",
            "code": "\nvoid updateConfiguration_08002324(int configAddress,int *configData)\n\n{\n  uint configValue1;\n  int configValue2;\n  int configValue3;\n  int defaultConfigAddress;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffefff;\n  configValue1 = *(uint *)(configAddress + 4);\n  configValue2 = *configData;\n  configValue3 = configData[2];\n  defaultConfigAddress = 0x40012c00;\n  if (configAddress == 0x40012c00) {\n    defaultConfigAddress = configData[5];\n    configValue1 = configValue1 & 0xffffbfff;\n  }\n  if (configAddress == 0x40012c00) {\n    configValue1 = configValue1 | defaultConfigAddress << 6;\n  }\n  *(uint *)(configAddress + 4) = configValue1;\n  *(uint *)(configAddress + 0x1c) = *(uint *)(configAddress + 0x1c) & 0xffff8cff | configValue2 << 8;\n  *(int *)(configAddress + 0x40) = configData[1];\n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffdfff | configValue3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_configuration_08002324",
                "param_1": "configAddress",
                "param_2": "configData",
                "uVar1": "configValue1",
                "iVar2": "configValue2",
                "iVar3": "configValue3",
                "iVar4": "defaultConfigAddress"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_params_08002368",
            "code": "\nvoid updateParams_08002368(uint *currentParams,uint *newParams)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *currentParams;\n  if (((((currentParams == (uint *)0x40012c00) || (currentParams == (uint *)0x40000000)) ||\n       (currentParams == (uint *)0x40000400)) || (currentParams == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | newParams[1], currentParams == (uint *)0x40012c00 ||\n       (currentParams == (uint *)0x40000000)) ||\n      ((currentParams == (uint *)0x40000400 || (currentParams == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | newParams[3];\n  }\n  *currentParams = updatedValue;\n  currentParams[0xb] = newParams[2];\n  currentParams[10] = *newParams;\n  updatedValue = 0x40012c00;\n  if (currentParams == (uint *)0x40012c00) {\n    updatedValue = newParams[4];\n  }\n  if (currentParams == (uint *)0x40012c00) {\n    currentParams[0xc] = updatedValue;\n  }\n  currentParams[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_params_08002368",
                "param_1": "currentParams",
                "param_2": "newParams",
                "uVar1": "updatedValue"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_pwm_080023d0",
            "code": "\nundefined4 initializePWM_080023d0(undefined4 *config)\n\n{\n  if (config != (undefined4 *)0x0) {\n    if (*(char *)((int)config + 0x39) == '\\0') {\n      *(undefined *)(config + 0xe) = 0;\n      initializePWM_080023d0peripherals;\n    }\n    *(undefined *)((int)config + 0x39) = 2;\n    TIM_Base_SetConfig(*config,config + 1);\n    *(undefined *)((int)config + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_pwm_080023d0",
                "param_1": "config",
                "HAL_TIM_PWM_MspInit()": "initializePWMperipherals"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_config_08002404",
            "code": "\nvoid updateConfig_08002404(int configAddress,int *configValues)\n\n{\n  uint updatedConfig1;\n  uint updatedConfig2;\n  int configValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffffef;\n  updatedConfig2 = *(uint *)(configAddress + 4);\n  configValue = *configValues;\n  updatedConfig1 = *(uint *)(configAddress + 0x20) & 0xffffffdf | configValues[2] << 4;\n  if (configAddress == 0x40012c00) {\n    updatedConfig1 = (updatedConfig1 & 0xffffff7f | configValues[3] << 4) & 0xffffffbf;\n    updatedConfig2 = updatedConfig2 & 0xfffff3ff | (configValues[5] | configValues[6]) << 2;\n  }\n  *(uint *)(configAddress + 4) = updatedConfig2;\n  *(uint *)(configAddress + 0x18) = *(uint *)(configAddress + 0x18) & 0xffff8cff | configValue << 8;\n  *(int *)(configAddress + 0x38) = configValues[1];\n  *(uint *)(configAddress + 0x20) = updatedConfig1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_config_08002404",
                "param_1": "configAddress",
                "param_2": "configValues",
                "uVar1": "updatedConfig1",
                "uVar2": "updatedConfig2",
                "iVar3": "configValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "configure_output_compare_0800245c",
            "code": "\nvoid configureOutputCompare_0800245c(int *outputConfig,undefined4 param2,undefined4 param3)\n\n{\n  int extraOut1;\n  int extraOut2;\n  int extraOut3;\n  int extraOut4;\n  int temp1;\n  uint temp2;\n  int temp3;\n  \n  if (*(char *)(outputConfig + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)outputConfig + 0x39) = 2;\n  *(undefined *)(outputConfig + 0xe) = 1;\n  switch(param3) {\n  case 0:\n    TIM_OC1_SetConfig(*outputConfig);\n    temp3 = *outputConfig;\n    temp2 = *(uint *)(extraOut1 + 0x10);\n    *(uint *)(temp3 + 0x18) = *(uint *)(temp3 + 0x18) | 8;\n    *(uint *)(temp3 + 0x18) = *(uint *)(temp3 + 0x18) & 0xfffffffb;\n    temp2 = *(uint *)(temp3 + 0x18) | temp2;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    TIM_OC2_SetConfig(*outputConfig);\n    temp3 = *outputConfig;\n    temp1 = *(int *)(extraOut2 + 0x10);\n    *(uint *)(temp3 + 0x18) = *(uint *)(temp3 + 0x18) | 0x800;\n    *(uint *)(temp3 + 0x18) = *(uint *)(temp3 + 0x18) & 0xfffffbff;\n    temp2 = *(uint *)(temp3 + 0x18) | temp1 << 8;\n    break;\n  case 8:\n    TIM_OC3_SetConfig(*outputConfig);\n    temp3 = *outputConfig;\n    temp2 = *(uint *)(extraOut3 + 0x10);\n    *(uint *)(temp3 + 0x1c) = *(uint *)(temp3 + 0x1c) | 8;\n    *(uint *)(temp3 + 0x1c) = *(uint *)(temp3 + 0x1c) & 0xfffffffb;\n    temp2 = *(uint *)(temp3 + 0x1c) | temp2;\n    goto LAB_080024fa;\n  case 0xc:\n    TIM_OC4_SetConfig(*outputConfig);\n    temp3 = *outputConfig;\n    temp1 = *(int *)(extraOut4 + 0x10);\n    *(uint *)(temp3 + 0x1c) = *(uint *)(temp3 + 0x1c) | 0x800;\n    *(uint *)(temp3 + 0x1c) = *(uint *)(temp3 + 0x1c) & 0xfffffbff;\n    temp2 = *(uint *)(temp3 + 0x1c) | temp1 << 8;\nLAB_080024fa:\n    *(uint *)(temp3 + 0x1c) = temp2;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(temp3 + 0x18) = temp2;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)outputConfig + 0x39) = 1;\n  *(undefined *)(outputConfig + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "configure_output_compare_0800245c",
                "param_1": "outputConfig",
                "param_2": "param2",
                "param_3": "param3",
                "extraout_r1": "extraOut1",
                "extraout_r1_00": "extraOut2",
                "extraout_r1_01": "extraOut3",
                "extraout_r1_02": "extraOut4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_OC2_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bitwise_operation_08002520",
            "code": "\nvoid updateBitwiseOperation_08002520(int ptrResult,uint paramIndex,int newBitValue)\n\n{\n  *(uint *)(ptrResult + 0x20) = *(uint *)(ptrResult + 0x20) & ~(1 << (paramIndex & 0xff));\n  *(uint *)(ptrResult + 0x20) = newBitValue << (paramIndex & 0xff) | *(uint *)(ptrResult + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bitwise_operation_08002520",
                "param_1": "ptrResult",
                "param_2": "paramIndex",
                "param_3": "newBitValue"
            },
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_channel_08002538",
            "code": "\nundefined4 initializeChannel_08002538(uint **channelPtr,undefined4 command)\n\n{\n  uint defaultValue;\n  uint *channel;\n  \n  configureChannel(*channelPtr,command,1);\n  channel = *channelPtr;\n  defaultValue = 0x40012c00;\n  if (channel == (uint *)0x40012c00) {\n    defaultValue = registerValue | 0x8000;\n  }\n  if (channel == (uint *)0x40012c00) {\n    channel[0x11] = defaultValue;\n  }\n  *channel = *channel | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_channel_08002538",
                "param_1": "channelPtr",
                "param_2": "command",
                "uVar1": "defaultValue",
                "puVar2": "channel",
                "TIM_CCxChannelCmd": "configureChannel",
                "uRam40012c44": "registerValue"
            },
            "calling": [
                "PWM_Init"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "update_data_and_status_08002564",
            "code": "\nundefined4 updateDataAndStatus_08002564(int *dataParam,uint *inputParam)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(dataParam + 0xe) != '\\x01') {\n    *(undefined *)((int)dataParam + 0x39) = 2;\n    *(uint *)(*dataParam + 0x44) =\n         *inputParam | inputParam[1] | inputParam[2] | inputParam[3] | inputParam[4] | inputParam[5] | inputParam[6];\n    *(undefined *)((int)dataParam + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(dataParam + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "update_data_and_status_08002564",
                "param_1": "dataParam",
                "param_2": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_permissions_080025a4",
            "code": "\nundefined4 updatePermissions_080025a4(int *ptr_to_data,uint *ptr_to_permissions)\n\n{\n  uint permissions1;\n  undefined4 result;\n  int data;\n  uint permissions0;\n  \n  result = 2;\n  if (*(char *)(ptr_to_data + 0xe) != '\\x01') {\n    *(undefined *)((int)ptr_to_data + 0x39) = 2;\n    data = *ptr_to_data;\n    permissions0 = *ptr_to_permissions;\n    permissions1 = ptr_to_permissions[1];\n    *(uint *)(data + 4) = *(uint *)(data + 4) & 0xffffff8f;\n    *(uint *)(data + 4) = *(uint *)(data + 4) | permissions0;\n    *(uint *)(data + 8) = *(uint *)(data + 8) & 0xffffff7f;\n    *(uint *)(data + 8) = *(uint *)(data + 8) | permissions1;\n    *(undefined *)((int)ptr_to_data + 0x39) = 1;\n    result = 0;\n    *(undefined *)(ptr_to_data + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "param_1": "ptr_to_data",
                "param_2": "ptr_to_permissions",
                "uVar1": "permissions1",
                "uVar2": "result",
                "iVar3": "data",
                "uVar4": "permissions0"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_system_settings_080025e8",
            "code": "\nvoid updateSystemSettings_080025e8(int *settings)\n\n{\n  int pclkFreq;\n  int adjustedPclkFreq;\n  uint pclk2FreqDiv;\n  int calculatedValue1;\n  int param1Value1;\n  int baseAddress;\n  \n  baseAddress = *settings;\n  pclk2FreqDiv = settings[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | settings[3];\n  *(uint *)(baseAddress + 0xc) = settings[2] | pclk2FreqDiv | settings[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | settings[6];\n  if (baseAddress == 0x40013800) {\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    calculatedValue1 = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(settings[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    param1Value1 = settings[1];\n    adjustedPclkFreq = HAL_RCC_GetPCLK2Freq();\n    adjustedPclkFreq = (uint)(pclkFreq * 0x19) / (uint)(param1Value1 << 2) +\n            (int)(((ulonglong)(uint)(adjustedPclkFreq * 0x19) / (ulonglong)(uint)(settings[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    pclk2FreqDiv = (uint)(pclkFreq * 0x19) / (uint)(settings[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    calculatedValue1 = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(settings[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    param1Value1 = settings[1];\n    adjustedPclkFreq = HAL_RCC_GetPCLK1Freq();\n    adjustedPclkFreq = (uint)(pclkFreq * 0x19) / (uint)(param1Value1 << 2) +\n            (int)(((ulonglong)(uint)(adjustedPclkFreq * 0x19) / (ulonglong)(uint)(settings[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    pclk2FreqDiv = (uint)(pclkFreq * 0x19) / (uint)(settings[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((pclk2FreqDiv + (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(settings[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (adjustedPclkFreq * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculatedValue1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_system_settings_080025e8",
                "param_1": "settings",
                "iVar1": "pclkFreq",
                "iVar2": "adjustedPclkFreq",
                "uVar3": "pclk2FreqDiv",
                "iVar4": "calculatedValue1",
                "iVar5": "param1Value1",
                "iVar6": "baseAddress"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_uart_08002724",
            "code": "\nundefined4 initializeUART_08002724(int *uartSettings)\n\n{\n  int uartModule;\n  \n  if (uartSettings != (int *)0x0) {\n    if (*(char *)((int)uartSettings + 0x39) == '\\0') {\n      *(undefined *)(uartSettings + 0xe) = 0;\n      initializeUART_08002724Periph();\n    }\n    *(undefined *)((int)uartSettings + 0x39) = 2;\n    *(uint *)(*uartSettings + 0xc) = *(uint *)(*uartSettings + 0xc) & 0xffffdfff;\n    setUARTConfig(uartSettings);\n    uartModule = *uartSettings;\n    *(uint *)(uartModule + 0x10) = *(uint *)(uartModule + 0x10) & 0xffffb7ff;\n    *(uint *)(uartModule + 0x14) = *(uint *)(uartModule + 0x14) & 0xffffffd5;\n    *(uint *)(uartModule + 0xc) = *(uint *)(uartModule + 0xc) | 0x2000;\n    uartSettings[0xf] = 0;\n    *(undefined *)((int)uartSettings + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "param_1": "uartSettings",
                "iVar1": "uartModule",
                "HAL_UART_MspInit": "initializeUARTPeriph",
                "UART_SetConfig": "setUARTConfig"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_binary_data_0800290c",
            "code": "\nundefined4 process_binary_data_0800290c(int *data_array)\n\n{\n  byte byte_value;\n  int data_ptr;\n  uint result;\n  undefined4 temp;\n  short count;\n  ushort *ushort_ptr;\n  ushort *updated_ushort_ptr;\n  bool is_condition_true;\n  \n  if ((*(byte *)((int)data_array + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  data_ptr = *data_array;\n  ushort_ptr = (ushort *)data_array[10];\n  if (data_array[2] == 0x1000) {\n    if (data_array[4] == 0) {\n      updated_ushort_ptr = ushort_ptr + 1;\n      *ushort_ptr = (ushort)((uint)(*(int *)(data_ptr + 4) << 0x17) >> 0x17);\n    }\n    else {\n      updated_ushort_ptr = (ushort *)((int)ushort_ptr + 1);\n      *ushort_ptr = (ushort)*(int *)(data_ptr + 4) & 0xff;\n    }\n    data_array[10] = (int)updated_ushort_ptr;\n  }\n  else {\n    if (data_array[4] == 0) {\n      byte_value = (byte)*(undefined4 *)(data_ptr + 4);\n      data_array[10] = (int)ushort_ptr + 1;\n    }\n    else {\n      temp = *(undefined4 *)(data_ptr + 4);\n      data_array[10] = (int)ushort_ptr + 1;\n      byte_value = (byte)temp & 0x7f;\n    }\n    *(byte *)ushort_ptr = byte_value;\n  }\n  count = *(short *)((int)data_array + 0x2e) + -1;\n  *(short *)((int)data_array + 0x2e) = count;\n  if (count == 0) {\n    data_ptr = *data_array;\n    *(uint *)(data_ptr + 0xc) = *(uint *)(data_ptr + 0xc) & 0xffffffdf;\n    is_condition_true = *(char *)((int)data_array + 0x39) != '2';\n    if (is_condition_true) {\n      result = *(uint *)(data_ptr + 0xc) & 0xfffffeff;\n    }\n    else {\n      data_ptr = 0x12;\n      result = 0x32;\n    }\n    if (is_condition_true) {\n      *(uint *)(data_ptr + 0xc) = result;\n      result = *(uint *)(data_ptr + 0x14) & 0xfffffffe;\n    }\n    if (is_condition_true) {\n      *(uint *)(data_ptr + 0x14) = result;\n      data_ptr = 1;\n    }\n    *(char *)((int)data_array + 0x39) = (char)data_ptr;\n    HAL_UART_RxCpltCallback();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_binary_data_0800290c",
                "param_1": "data_array",
                "bVar1": "byte_value",
                "iVar2": "data_ptr",
                "uVar3": "result",
                "uVar4": "temp",
                "sVar5": "count",
                "puVar6": "ushort_ptr",
                "puVar7": "updated_ushort_ptr",
                "bVar8": "is_condition_true"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **data)\n\n{\n  uint firstValue;\n  short counter;\n  uint secondValue;\n  uint *pointer;\n  undefined newValue;\n  uint *dataPointer;\n  uint flag;\n  bool conditionFlag;\n  \n  dataPointer = *data;\n  secondValue = *dataPointer;\n  firstValue = dataPointer[3];\n  if ((secondValue & 0xf) == 0) {\n    if (((int)(secondValue << 0x1a) < 0) && ((int)(firstValue << 0x1a) < 0)) {\n      UART_Receive_IT();\n      return;\n    }\n  }\n  else {\n    flag = dataPointer[5] & 1;\n    if ((flag != 0) || ((firstValue & 0x120) != 0)) {\n      dataPointer = (uint *)(secondValue << 0x1f);\n      if ((int)dataPointer < 0) {\n        conditionFlag = (int)(firstValue << 0x17) < 0;\n        if (conditionFlag) {\n          dataPointer = (uint *)((uint)data[0xf] | 1);\n        }\n        if (conditionFlag) {\n          data[0xf] = dataPointer;\n        }\n      }\n      if (((int)(secondValue << 0x1d) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(secondValue << 0x1e) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(secondValue << 0x1c) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(secondValue << 0x1a) < 0) && ((int)(firstValue << 0x1a) < 0)) {\n        UART_Receive_IT(data);\n      }\n      dataPointer = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((dataPointer[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      dataPointer[3] = dataPointer[3] & 0xfffffedf;\n      dataPointer[5] = dataPointer[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      HAL_UART_ErrorCallback(data);\n      return;\n    }\n  }\n  if (((int)(secondValue << 0x18) < 0) && ((int)(firstValue << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer = data[8];\n      if (data[2] == (uint *)0x1000) {\n        dataPointer[1] = *(ushort *)pointer & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer = (uint *)((int)pointer + 2);\n        }\n        else {\n          pointer = (uint *)((int)pointer + 1);\n        }\n        data[8] = pointer;\n      }\n      else {\n        data[8] = (uint *)((int)pointer + 1);\n        dataPointer[1] = (uint)*(byte *)pointer;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        dataPointer[3] = dataPointer[3] & 0xffffff7f;\n        dataPointer[3] = dataPointer[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(secondValue << 0x19) < 0) && ((int)(firstValue << 0x19) < 0)) {\n    dataPointer[3] = dataPointer[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      newValue = 0x22;\n    }\n    else {\n      newValue = 1;\n    }\n    *(undefined *)((int)data + 0x39) = newValue;\n    HAL_UART_TxCpltCallback(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "firstValue",
                "sVar2": "counter",
                "uVar3": "secondValue",
                "puVar4": "pointer",
                "uVar5": "newValue",
                "puVar6": "dataPointer",
                "uVar7": "flag",
                "bVar8": "conditionFlag"
            },
            "calling": [],
            "called": [
                "UART_Receive_IT",
                "HAL_UART_TxCpltCallback",
                "HAL_UART_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  readByteFromI2C(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  writeByteToI2C(0xd0,0x6b,0x80,1);\n  writeByteToI2C(0xd0,0x6b,1);\n  writeByteToI2C(0xd0,0x6c,0,1);\n  writeByteToI2C(0xd0,0x19,0,1);\n  writeByteToI2C(0xd0,0x1d,3,1);\n  writeByteToI2C(0xd0,0x1a,3,1);\n  writeByteToI2C(0xd0,0x1b,0x10,1);\n  writeByteToI2C(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "I2C_ReadByte": "readByteFromI2C",
                "I2C_WriteByte": "writeByteToI2C"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 floatValue;\n  uint inputValue;\n  int value1;\n  int value2;\n  undefined4 buffer1;\n  undefined4 buffer2;\n  \n  buffer1 = 0;\n  buffer2 = inputValue & 0xffff0000;\n  I2C_ReadByteArray(0xd0,0x3b,&buffer1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(buffer1._2_1_,buffer1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)buffer1,buffer1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)buffer2,buffer2._1_1_);\n  value2 = (int)DAT_200002f6;\n  value1 = (int)DAT_200002f8;\n  floatValue = __floatsisf();\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d0 = __aeabi_fmul(floatValue,0x38000000);\n  floatValue = __floatsisf(value2);\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d4 = __aeabi_fmul(floatValue,0x38000000);\n  floatValue = __floatsisf(value1);\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d8 = __aeabi_fmul(floatValue,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputValue",
                "iVar2": "value1",
                "iVar3": "value2",
                "local_18": "buffer1",
                "local_14": "buffer2",
                "uVar1": "floatValue"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "read_and_process_mpu_data_08002bf0",
            "code": "\nvoid readAndProcessMPUData_08002bf0(void)\n\n{\n  undefined4 convertedValue;\n  int gyroIntValue;\n  int accelerationIntValue;\n  undefined4 accelerationData;\n  undefined2 gyroData;\n  \n  accelerationData = 0;\n  gyroData = 0;\n  readByteArrayFromI2C(0xd0,0x43,&accelerationData,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(accelerationData._2_1_,accelerationData._3_1_);\n  DAT_200002be = CONCAT11((undefined)accelerationData,accelerationData._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)gyroData,gyroData._1_1_);\n  accelerationIntValue = (int)DAT_200002c0;\n  gyroIntValue = (int)DAT_200002c2;\n  convertedValue = intToFloat();\n  convertedValue = multiplyFloats(convertedValue,0x447a0000);\n  convertedValue = multiplyFloats(convertedValue,0x38000000);\n  DAT_200002c4 = subtractFloats(convertedValue,DAT_20000000);\n  convertedValue = intToFloat(accelerationIntValue);\n  convertedValue = multiplyFloats(convertedValue,0x447a0000);\n  convertedValue = multiplyFloats(convertedValue,0x38000000);\n  DAT_200002c8 = subtractFloats(convertedValue,DAT_20000004);\n  convertedValue = intToFloat(gyroIntValue);\n  convertedValue = multiplyFloats(convertedValue,0x447a0000);\n  convertedValue = multiplyFloats(convertedValue,0x38000000);\n  DAT_200002cc = subtractFloats(convertedValue,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "read_and_process_mpu_data_08002bf0",
                "local_20": "accelerationData",
                "local_1c": "gyroData",
                "I2C_ReadByteArray": "readByteArrayFromI2C",
                "iVar3": "accelerationIntValue",
                "iVar2": "gyroIntValue",
                "uVar1": "convertedValue",
                "__floatsisf": "intToFloat",
                "__aeabi_fmul": "multiplyFloats",
                "__aeabi_fsub": "subtractFloats"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 calculatedValue;\n  uint byteArrayValue;\n  \n  byteArrayValue = param4;\n  I2C_WriteByte(0xd0,0x37,0x22,1,param1,param2,param3);\n  I2C_WriteByte(0xd0,0x6a,1);\n  I2C_ReadByte(0x18,0,\"../Src/MPU9250.c\",0xad);\n  I2C_WriteByte(0x18,0xb,1);\n  I2C_WriteByte(0x18,10,0,1);\n  I2C_WriteByte(0x18,10,0xf,1);\n  I2C_ReadByteArray(0x18,0x10,&byteArrayValue,3,\"../Src/MPU9250.c\",0xb6);\n  calculatedValue = __floatsisf((byteArrayValue & 0xff) - 0x80);\n  calculatedValue = __aeabi_fmul(calculatedValue,0x3b800000);\n  DAT_200002e8 = __addsf3(calculatedValue,0x3f800000);\n  calculatedValue = __floatsisf((byteArrayValue >> 8 & 0xff) - 0x80);\n  calculatedValue = __aeabi_fmul(calculatedValue,0x3b800000);\n  DAT_200002ec = __addsf3(calculatedValue,0x3f800000);\n  calculatedValue = __floatsisf((byteArrayValue >> 0x10 & 0xff) - 0x80);\n  calculatedValue = __aeabi_fmul(calculatedValue,0x3b800000);\n  DAT_200002f0 = __addsf3(calculatedValue,0x3f800000);\n  I2C_WriteByte(0x18,10,0,1);\n  I2C_WriteByte(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "calculatedValue",
                "local_c": "byteArrayValue"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "__floatsisf",
                "I2C_WriteByte",
                "I2C_ReadByte",
                "__addsf3",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_sensor_data_08002d88",
            "code": "\nvoid processSensorData_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 floatResult;\n  undefined4 scalingFactor;\n  int intResult;\n  undefined2 data;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  byte byte5;\n  undefined byte6;\n  \n  byte6 = (undefined)((uint)param4 >> 0x18);\n  data = 0;\n  byte1 = 0;\n  byte2 = 0;\n  byte3 = 0;\n  byte4 = 0;\n  byte5 = 0;\n  result = I2C_ReadByte(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (result << 0x1f < 0) {\n    I2C_ReadByteArray(0x18,3,&data,7,\"../Src/MPU9250.c\",0xda);\n    scalingFactor = DAT_2000001c;\n    if ((int)((uint)byte5 << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(byte2,byte1);\n      DAT_200002bc = CONCAT11(byte4,byte3);\n      intResult = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = data;\n      floatResult = __floatsisf();\n      floatResult = __aeabi_fmul(floatResult,scalingFactor);\n      floatResult = __aeabi_fmul(floatResult,DAT_200002e8);\n      floatResult = __aeabi_fsub(floatResult,DAT_20000020);\n      DAT_200002dc = __aeabi_fmul(floatResult,DAT_2000002c);\n      floatResult = __floatsisf(intResult);\n      floatResult = __aeabi_fmul(floatResult,scalingFactor);\n      floatResult = __aeabi_fmul(floatResult,DAT_200002ec);\n      floatResult = __aeabi_fsub(floatResult,DAT_20000024);\n      DAT_200002e0 = __aeabi_fmul(floatResult,DAT_20000030);\n      floatResult = __floatsisf(result);\n      scalingFactor = __aeabi_fmul(floatResult,scalingFactor);\n      scalingFactor = __aeabi_fmul(scalingFactor,DAT_200002f0);\n      scalingFactor = __aeabi_fsub(scalingFactor,DAT_20000028);\n      DAT_200002e4 = __aeabi_fmul(scalingFactor,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_sensor_data_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "floatResult",
                "uVar3": "scalingFactor",
                "iVar4": "intResult",
                "local_28": "data",
                "uStack_26": "byte1",
                "uStack_25": "byte2",
                "local_24": "byte3",
                "local_23": "byte4",
                "local_22": "byte5",
                "uStack_21": "byte6"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByte",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_sensors_08002ea0",
            "code": "\nvoid initializeSensors_08002ea0(undefined4 sensorParam1,undefined4 sensorParam2,undefined4 sensorParam3,undefined4 sensorParam4)\n\n{\n  undefined4 returnValue;\n  \n  MPU9250_Init();\n  AK8963_Init();\n  MadgwickSetBeta(0x3f19999a);\n  MadgwickSetDelta(0,returnValue,sensorParam3,sensorParam4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "param_1": "sensorParam1",
                "param_2": "sensorParam2",
                "param_3": "sensorParam3",
                "param_4": "sensorParam4",
                "extraout_r1": "returnValue"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_sum_of_products_08002ec0",
            "code": "\nvoid calculateSumOfProducts_08002ec0(void)\n\n{\n  undefined4 difference;\n  undefined4 constant;\n  undefined4 initialValue;\n  \n  constant = DAT_2000024c;\n  initialValue = DAT_20000010;\n  difference = __aeabi_fsub(0x3f800000,DAT_20000010);\n  constant = __aeabi_fmul(difference,constant);\n  initialValue = __aeabi_fmul(initialValue,DAT_2000000c);\n  DAT_2000000c = __addsf3(initialValue,constant);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_sum_of_products_08002ec0",
                "uVar1": "difference",
                "uVar2": "constant",
                "uVar3": "initialValue"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_sum_of_products_08002ed4",
            "code": "\nvoid calculate_sum_of_products_08002ed4(void)\n\n{\n  undefined4 difference;\n  undefined4 initial_value;\n  undefined4 multiplier;\n  \n  initial_value = DAT_20000248;\n  multiplier = value_1;\n  difference = subtract(0x3f800000,value_1);\n  initial_value = multiply(difference,initial_value);\n  multiplier = multiply(multiplier,result);\n  result = __addsf3(multiplier,initial_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_sum_of_products_08002ed4",
                "uVar1": "difference",
                "uVar2": "initial_value",
                "uVar3": "multiplier",
                "uRam20000018": "value_1",
                "__aeabi_fsub": "subtract",
                "__aeabi_fmul": "multiply",
                "uRam20000014": "result"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "apply_threshold_08002ee8",
            "code": "\nvoid applyThreshold_08002ee8(void)\n\n{\n  undefined4 thresholdValue;\n  int greaterOrEqual;\n  \n  thresholdValue = DAT_20000250;\n  greaterOrEqual = compareGreaterThanOrEqual(DAT_20000250,0xc3340000);\n  if ((greaterOrEqual != 0) && (greaterOrEqual = compareLessThan(thresholdValue,0x42b40000), greaterOrEqual != 0)) {\n    addThreshold(thresholdValue,0x42b40000);\n    return;\n  }\n  subtractThreshold(thresholdValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "apply_threshold_08002ee8",
                "uVar1": "thresholdValue",
                "iVar2": "greaterOrEqual",
                "__aeabi_fcmpge": "compareGreaterThanOrEqual",
                "__aeabi_fcmplt": "compareLessThan",
                "__addsf3": "addThreshold",
                "__aeabi_fsub": "subtractThreshold"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fcmplt",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "update_ahrs_08002f28",
            "code": "\n\n\nvoid updateAHRS_08002f28(void)\n\n{\n  undefined4 uVar1;\n  \n  readAccelerometerData();\n  readGyroData();\n  readMagnetometerData();\n  DAT_20000258 = micros();\n  uVar1 = __floatunsisf(DAT_20000258 - DAT_20000254);\n  __aeabi_fdiv(uVar1,0x447a0000);\n  MadgwickSetDelta();\n  DAT_20000254 = DAT_20000258;\n  MadgwickQuaternionUpdate\n            (DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n             DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n             &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  uVar1 = AHRS_GetRoll();\n  __aeabi_fmul(uVar1,0x41200000);\n  DAT_20001395._0_2_ = __aeabi_f2iz();\n  uVar1 = AHRS_GetPitch();\n  __aeabi_fmul(uVar1,0x41200000);\n  DAT_20001395._2_2_ = __aeabi_f2iz();\n  AHRS_GetYaw();\n  DAT_20001399 = __aeabi_f2iz();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "update_ahrs_08002f28",
                "MPU9250_ReadAccelData": "readAccelerometerData",
                "MPU9250_ReadGyroData": "readGyroData",
                "AK8963_ReadData": "readMagnetometerData"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MadgwickSetDelta",
                "AHRS_GetPitch",
                "MPU9250_ReadGyroData",
                "__aeabi_f2iz",
                "__floatunsisf",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "AK8963_ReadData",
                "micros",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "__aeabi_fdiv",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "read_i2_c_bytes_08003034",
            "code": "\nuint readI2CBytes_08003034(undefined4 config,undefined4 dataSize,undefined4 filePath,undefined4 data)\n\n{\n  undefined4 result;\n  \n  result = data;\n  I2C_ReadBytes(0xee,0,&result,3,\"../Src/MS5611.c\",0x8c,filePath);\n  return (uint)CONCAT12((undefined)result,CONCAT11(result._1_1_,result._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "read_i2_c_bytes_08003034",
                "param_1": "config",
                "param_2": "dataSize",
                "param_3": "filePath",
                "param_4": "data",
                "local_c": "result"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "I2C_ReadBytes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_global_data_08003068",
            "code": "\nundefined4 getGlobalData_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_global_data_08003068"
            },
            "calling": [
                "PID_UpdateAltitude"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "read_sensor_data_08003298",
            "code": "\nvoid read_sensor_data_08003298(void)\n\n{\n  int index;\n  undefined first_byte;\n  undefined second_byte;\n  \n  index = 0;\n  write_byte_to_I2C(0xee,0x1e,1);\n  delay_milliseconds(10);\n  DAT_20000038 = 8;\n  do {\n    first_byte = 0;\n    second_byte = 0;\n    read_byte_array_from_I2C(0xee,index + 0xa0U & 0xffff,&first_byte,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(first_byte,second_byte);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "read_sensor_data_08003298",
                "local_1c": "first_byte",
                "local_1b": "second_byte",
                "iVar1": "index",
                "delay_ms": "delay_milliseconds",
                "I2C_WriteByte": "write_byte_to_I2C",
                "I2C_ReadByteArray": "read_byte_array_from_I2C"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "I2C_WriteByte",
                "delay_ms",
                "I2C_ReadByteArray"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_global_data_08003314",
            "code": "\nvoid initializeGlobalData_08003314(undefined4 dataValue)\n\n{\n  DAT_2000035c = dataValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_global_data_08003314",
                "param_1": "dataValue"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_global_param_08003320",
            "code": "\nvoid setGlobalParam_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_global_param_08003320",
                "param_1": "value"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_angles_08003330",
            "code": "\nvoid calculateAngles_08003330(undefined4 length1,undefined4 length2,undefined4 length3,undefined4 angle1,\n                 undefined4 angle2,undefined4 angle3,undefined4 cosine1,undefined4 cosine2,\n                 undefined4 cosine3,undefined4 *result)\n\n{\n  undefined4 length1Square;\n  undefined4 length2Square;\n  int length3Square;\n  undefined4 cosine1Square;\n  undefined4 cosine2Square;\n  undefined4 cosine3Square;\n  undefined4 sumLengthSquare;\n  int sumCosineSquare;\n  undefined4 length1Cosine1;\n  undefined4 length1Cosine2;\n  undefined4 length1Cosine3;\n  undefined4 length2Cosine1;\n  undefined4 length2Cosine2;\n  undefined4 length2Cosine3;\n  undefined4 length3Cosine1;\n  undefined4 length3Cosine2;\n  undefined4 length3Cosine3;\n  undefined4 invertedLength1;\n  int iVar19;\n  undefined4 invertedLength3;\n  undefined4 length2Square1;\n  undefined4 length2Square2;\n  undefined4 length2Square3;\n  undefined4 product1;\n  undefined4 product2;\n  int iVar26;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  int length3Square0;\n  undefined8 sumSquare2;\n  undefined8 sumSquare3;\n  \n  result3 = DAT_20000048;\n  result2 = DAT_20000044;\n  length3Square0 = DAT_20000040;\n  result1 = DAT_2000003c;\n  length1Square = __aeabi_fmul(length1,length1);\n  length2Square = __aeabi_fmul(length2);\n  length1Square = __addsf3(length1Square,length2Square);\n  length2Square = __aeabi_fmul(length3);\n  __addsf3(length1Square,length2Square);\n  __aeabi_f2d();\n  sqrt();\n  length1Square = __truncdfsf2();\n  length3Square = __aeabi_fcmpeq(length1Square,0);\n  if (length3Square == 0) {\n    length2Square = __aeabi_fmul(cosine1);\n    cosine1Square = __aeabi_fmul(cosine2);\n    length2Square = __addsf3(length2Square,cosine1Square);\n    cosine1Square = __aeabi_fmul(cosine3);\n    __addsf3(length2Square,cosine1Square);\n    __aeabi_f2d();\n    sqrt();\n    length2Square = __truncdfsf2();\n    length3Square = __aeabi_fcmpeq(length2Square,0);\n    if (length3Square == 0) {\n      sumSquare2 = __aeabi_f2d(angle1);\n      __muldf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0xa2529d39,0x3f91df46);\n      cosine1Square = __truncdfsf2();\n      sumSquare2 = __aeabi_f2d(angle2);\n      __muldf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0xa2529d39,0x3f91df46);\n      cosine2Square = __truncdfsf2();\n      sumSquare2 = __aeabi_f2d(angle3);\n      __muldf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0xa2529d39,0x3f91df46);\n      cosine3Square = __truncdfsf2();\n      length3Square = __addsf3(result1);\n      sumLengthSquare = __addsf3(length3Square0);\n      sumCosineSquare = __addsf3(result2,result2);\n      length1Cosine1 = __addsf3(result3,result3);\n      length1Cosine2 = __aeabi_fmul(result1);\n      length1Cosine3 = __aeabi_fmul(result1,length3Square0);\n      length2Cosine1 = __aeabi_fmul(result1,result2);\n      length2Cosine2 = __aeabi_fmul(length3Square0);\n      length2Cosine3 = __aeabi_fmul(length3Square0,result3);\n      length3Cosine1 = __aeabi_fmul(result2,result2);\n      length3Cosine2 = __aeabi_fmul(result3,result3);\n      length1Square = __aeabi_fdiv(0x3f800000,length1Square);\n      length2Square = __aeabi_fdiv(0x3f800000,length2Square);\n      length3Cosine3 = __aeabi_fmul(cosine1,length2Square);\n      invertedLength1 = __aeabi_fmul(cosine2,length2Square);\n      length2Square = __aeabi_fmul(cosine3,length2Square);\n      iVar19 = __aeabi_fmul(length3Square,length3Cosine3);\n      invertedLength3 = __aeabi_fmul(length3Square,invertedLength1);\n      length2Square1 = __aeabi_fmul(length3Square,length2Square);\n      length2Square2 = __aeabi_fmul(sumLengthSquare,length3Cosine3);\n      length2Square3 = __aeabi_fmul(length1Cosine2,length3Cosine3);\n      product1 = __aeabi_fmul(result3,invertedLength3);\n      length2Square3 = __aeabi_fsub(length2Square3,product1);\n      product1 = __aeabi_fmul(result2,length2Square1);\n      length2Square3 = __addsf3(length2Square3,product1);\n      product1 = __aeabi_fmul(length2Cosine2,length3Cosine3);\n      length2Square3 = __addsf3(length2Square3,product1);\n      product1 = __aeabi_fmul(sumLengthSquare,invertedLength1);\n      product1 = __aeabi_fmul(product1,result2);\n      length2Square3 = __addsf3(length2Square3,product1);\n      product1 = __aeabi_fmul(sumLengthSquare,length2Square);\n      product1 = __aeabi_fmul(product1,result3);\n      length2Square3 = __addsf3(length2Square3,product1);\n      product1 = __aeabi_fmul(length3Cosine1,length3Cosine3);\n      length2Square3 = __aeabi_fsub(length2Square3,product1);\n      product1 = __aeabi_fmul(length3Cosine2,length3Cosine3);\n      length2Square3 = __aeabi_fsub(length2Square3,product1);\n      product1 = __aeabi_fmul(result3,iVar19);\n      product2 = __aeabi_fmul(length1Cosine2,invertedLength1);\n      product1 = __addsf3(product1,product2);\n      length2Square1 = __aeabi_fmul(length3Square0,length2Square1);\n      length2Square1 = __aeabi_fsub(product1,length2Square1);\n      product1 = __aeabi_fmul(result2,length2Square2);\n      length2Square1 = __addsf3(length2Square1,product1);\n      product1 = __aeabi_fmul(length2Cosine2,invertedLength1);\n      length2Square1 = __aeabi_fsub(length2Square1,product1);\n      product1 = __aeabi_fmul(length3Cosine1,invertedLength1);\n      length2Square1 = __addsf3(length2Square1,product1);\n      product1 = __aeabi_fmul(sumCosineSquare,length2Square);\n      product1 = __aeabi_fmul(product1,result3);\n      length2Square1 = __addsf3(length2Square1,product1);\n      product1 = __aeabi_fmul(length3Cosine2,invertedLength1);\n      length2Square1 = __aeabi_fsub(length2Square1,product1);\n      length2Square3 = __aeabi_fmul(length2Square3,length2Square3);\n      length2Square1 = __aeabi_fmul(length2Square1,length2Square1);\n      __addsf3(length2Square3,length2Square1);\n      __aeabi_f2d();\n      sqrt();\n      iVar26 = __truncdfsf2();\n      length2Square1 = __aeabi_fmul(iVar19 + -0x80000000,result2);\n      invertedLength3 = __aeabi_fmul(length3Square0,invertedLength3);\n      invertedLength3 = __addsf3(length2Square1,invertedLength3);\n      length1Cosine2 = __aeabi_fmul(length1Cosine2,length2Square);\n      length1Cosine2 = __addsf3(invertedLength3,length1Cosine2);\n      invertedLength3 = __aeabi_fmul(result3,length2Square2);\n      length1Cosine2 = __addsf3(length1Cosine2,invertedLength3);\n      invertedLength3 = __aeabi_fmul(length2Cosine2,length2Square);\n      length1Cosine2 = __aeabi_fsub(length1Cosine2,invertedLength3);\n      invertedLength3 = __aeabi_fmul(sumCosineSquare,invertedLength1);\n      invertedLength3 = __aeabi_fmul(invertedLength3,result3);\n      length1Cosine2 = __addsf3(length1Cosine2,invertedLength3);\n      invertedLength3 = __aeabi_fmul(length3Cosine1,length2Square);\n      length1Cosine2 = __aeabi_fsub(length1Cosine2,invertedLength3);\n      invertedLength3 = __aeabi_fmul(length3Cosine2,length2Square);\n      length1Cosine2 = __addsf3(length1Cosine2,invertedLength3);\n      invertedLength3 = __addsf3(length1Cosine2,length1Cosine2);\n      length2Square1 = __addsf3(length2Cosine3);\n      length2Square2 = __aeabi_fmul(result2,length3Square);\n      length2Square1 = __aeabi_fsub(length2Square1,length2Square2);\n      length2Square2 = __aeabi_fmul(length1,length1Square);\n      length2Square1 = __aeabi_fsub(length2Square1,length2Square2);\n      length2Square2 = __aeabi_fmul(result3,sumCosineSquare);\n      length2Square3 = __addsf3(length1Cosine3);\n      length2Square2 = __addsf3(length2Square2,length2Square3);\n      length2Square3 = __aeabi_fmul(length2,length1Square);\n      length2Square2 = __aeabi_fsub(length2Square2,length2Square3);\n      length2Square3 = __aeabi_fmul(result2,length1Cosine2);\n      product1 = __aeabi_fsub(0x3f000000,length3Cosine1);\n      length3Cosine2 = __aeabi_fsub(product1,length3Cosine2);\n      length3Cosine2 = __aeabi_fmul(length3Cosine2,iVar26);\n      product1 = __aeabi_fsub(length2Cosine3,length2Cosine1);\n      product1 = __aeabi_fmul(product1,length1Cosine2);\n      length3Cosine2 = __addsf3(length3Cosine2,product1);\n      length3Cosine2 = __aeabi_fsub(length3Cosine2,length3Cosine3);\n      length3Cosine3 = __aeabi_fmul(length3Square0,length1Cosine2);\n      product1 = __aeabi_fmul(length3Square0,result2);\n      product2 = __aeabi_fmul(result1,result3);\n      product1 = __aeabi_fsub(product1,product2);\n      product1 = __aeabi_fmul(product1,iVar26);\n      product2 = __aeabi_fmul(result2,result3);\n      length1Cosine3 = __addsf3(product2,length1Cosine3);\n      length1Cosine3 = __aeabi_fmul(length1Cosine3,length1Cosine2);\n      length1Cosine3 = __addsf3(product1,length1Cosine3);\n      length1Cosine3 = __aeabi_fsub(length1Cosine3,invertedLength1);\n      invertedLength1 = __aeabi_fmul(result2,iVar26);\n      product1 = __aeabi_fsub(0x3f000000,length2Cosine2);\n      product1 = __aeabi_fsub(product1,length3Cosine1);\n      product1 = __aeabi_fmul(product1,length1Cosine2);\n      length2Cosine1 = __addsf3(length2Cosine1,length2Cosine3);\n      length2Cosine1 = __aeabi_fmul(length2Cosine1,iVar26);\n      length2Cosine1 = __addsf3(product1,length2Cosine1);\n      length2Square = __aeabi_fsub(length2Cosine1,length2Square);\n      length2Cosine1 = __aeabi_fmul(sumCosineSquare + -0x80000000,length2Square1);\n      length2Cosine3 = __aeabi_fmul(sumLengthSquare,length2Square2);\n      length2Cosine1 = __addsf3(length2Cosine1,length2Cosine3);\n      length2Cosine3 = __aeabi_fmul(length2Square3,length3Cosine2);\n      length2Cosine1 = __aeabi_fsub(length2Cosine1,length2Cosine3);\n      length2Cosine3 = __aeabi_fmul(result3,iVar26 + -0x80000000);\n      length2Cosine3 = __addsf3(length2Cosine3,length3Cosine3);\n      length2Cosine3 = __aeabi_fmul(length2Cosine3,length1Cosine3);\n      length2Cosine1 = __addsf3(length2Cosine1,length2Cosine3);\n      length2Cosine3 = __aeabi_fmul(invertedLength1,length2Square);\n      length2Cosine1 = __addsf3(length2Cosine1,length2Cosine3);\n      length2Cosine2 = __addsf3(length2Cosine2);\n      length2Cosine2 = __aeabi_fsub(0x3f800000,length2Cosine2);\n      length2Cosine3 = __addsf3(length3Cosine1);\n      length2Cosine2 = __aeabi_fsub(length2Cosine2,length2Cosine3);\n      length1Square = __aeabi_fmul(length3,length1Square);\n      length1Square = __aeabi_fsub(length2Cosine2,length1Square);\n      length2Cosine2 = __aeabi_fmul(result3,length1Cosine2);\n      length1Cosine2 = __aeabi_fmul(result1,length1Cosine2);\n      length2Cosine3 = __aeabi_fmul(length1Cosine1,length2Square1);\n      length3Cosine1 = __aeabi_fmul(length3Square,length2Square2);\n      length2Cosine3 = __addsf3(length2Cosine3,length3Cosine1);\n      length3Cosine1 = __aeabi_fmul(length3Square0,0x40800000);\n      length3Cosine1 = __aeabi_fmul(length3Cosine1,length1Square);\n      length2Cosine3 = __aeabi_fsub(length2Cosine3,length3Cosine1);\n      length3Cosine1 = __aeabi_fmul(length3Cosine2,length2Cosine2);\n      length2Cosine3 = __addsf3(length2Cosine3,length3Cosine1);\n      length3Cosine1 = __addsf3(invertedLength1,length1Cosine2);\n      length3Cosine1 = __aeabi_fmul(length3Cosine1,length1Cosine3);\n      length2Cosine3 = __addsf3(length2Cosine3,length3Cosine1);\n      length3Cosine1 = __aeabi_fmul(result3,iVar26);\n      invertedLength1 = __aeabi_fmul(length3Square0,invertedLength3);\n      length3Cosine1 = __aeabi_fsub(length3Cosine1,invertedLength1);\n      length3Cosine1 = __aeabi_fmul(length3Cosine1,length2Square);\n      length2Cosine3 = __addsf3(length2Cosine3,length3Cosine1);\n      iVar19 = __addsf3(iVar26,iVar26);\n      length3Cosine1 = __aeabi_fmul(length3Square0,iVar26);\n      invertedLength1 = __aeabi_fmul(length3Square + -0x80000000,length2Square1);\n      length1Cosine1 = __aeabi_fmul(length1Cosine1,length2Square2);\n      length1Cosine1 = __addsf3(invertedLength1,length1Cosine1);\n      invertedLength1 = __aeabi_fmul(result2,0x40800000);\n      length1Square = __aeabi_fmul(invertedLength1,length1Square);\n      length1Square = __aeabi_fsub(length1Cosine1,length1Square);\n      length1Cosine1 = __aeabi_fmul(result2,iVar19 + -0x80000000);\n      length1Cosine1 = __aeabi_fsub(length1Cosine1,length1Cosine2);\n      length1Cosine1 = __aeabi_fmul(length1Cosine1,length3Cosine2);\n      length1Square = __addsf3(length1Square,length1Cosine1);\n      length1Cosine1 = __addsf3(length2Cosine2,length3Cosine1);\n      length1Cosine1 = __aeabi_fmul(length1Cosine1,length1Cosine3);\n      length1Square = __addsf3(length1Square,length1Cosine1);\n      length1Cosine1 = __aeabi_fmul(result1,iVar26);\n      length1Cosine2 = __aeabi_fmul(result2,invertedLength3);\n      length1Cosine1 = __aeabi_fsub(length1Cosine1,length1Cosine2);\n      length1Cosine1 = __aeabi_fmul(length1Cosine1,length2Square);\n      length1Cosine1 = __addsf3(length1Square,length1Cosine1);\n      length1Square = __aeabi_fmul(sumLengthSquare,length2Square1);\n      sumLengthSquare = __aeabi_fmul(sumCosineSquare,length2Square2);\n      length1Square = __addsf3(length1Square,sumLengthSquare);\n      sumLengthSquare = __aeabi_fmul(result3,iVar19 + -0x80000000);\n      sumLengthSquare = __addsf3(sumLengthSquare,length3Cosine3);\n      sumLengthSquare = __aeabi_fmul(sumLengthSquare,length3Cosine2);\n      length1Square = __addsf3(length1Square,sumLengthSquare);\n      sumLengthSquare = __aeabi_fmul(result1,iVar26 + -0x80000000);\n      sumLengthSquare = __addsf3(sumLengthSquare,length2Square3);\n      sumLengthSquare = __aeabi_fmul(sumLengthSquare,length1Cosine3);\n      length1Square = __addsf3(length1Square,sumLengthSquare);\n      length2Square = __aeabi_fmul(length2Square,length3Cosine1);\n      sumLengthSquare = __addsf3(length1Square,length2Square);\n      length1Square = __aeabi_fmul(length2Cosine1);\n      length2Square = __aeabi_fmul(length2Cosine3);\n      length1Square = __addsf3(length1Square,length2Square);\n      length2Square = __aeabi_fmul(length1Cosine1,length1Cosine1);\n      length1Square = __addsf3(length1Square,length2Square);\n      length2Square = __aeabi_fmul(sumLengthSquare,sumLengthSquare);\n      __addsf3(length1Square,length2Square);\n      __aeabi_f2d();\n      sqrt();\n      length1Square = __truncdfsf2();\n      length1Cosine2 = __aeabi_fdiv(0x3f800000,length1Square);\n      length1Square = DAT_2000035c;\n      length2Square = __aeabi_fmul(length3Square0 + -0x80000000,cosine1Square);\n      length1Cosine3 = __aeabi_fmul(result2,cosine2Square);\n      length2Square = __aeabi_fsub(length2Square,length1Cosine3);\n      length1Cosine3 = __aeabi_fmul(result3,cosine3Square);\n      length2Square = __aeabi_fsub(length2Square,length1Cosine3);\n      length1Cosine3 = __aeabi_fmul(length2Square,0x3f000000);\n      length2Cosine1 = __aeabi_fmul(length2Cosine1,length1Cosine2);\n      length2Square = DAT_20000360;\n      length2Cosine1 = __aeabi_fmul(length2Cosine1,length1Square);\n      length1Cosine3 = __aeabi_fsub(length1Cosine3,length2Cosine1);\n      length2Square = __aeabi_fmul(length1Cosine3,length2Square);\n      length1Cosine3 = __addsf3(length2Square,result1);\n      length2Cosine1 = __aeabi_fmul(result1,cosine1Square);\n      length2Cosine2 = __aeabi_fmul(result2,cosine3Square);\n      length2Square = DAT_20000360;\n      length2Cosine1 = __addsf3(length2Cosine1,length2Cosine2);\n      length2Cosine2 = __aeabi_fmul(result3,cosine2Square);\n      length2Cosine1 = __aeabi_fsub(length2Cosine1,length2Cosine2);\n      length2Cosine1 = __aeabi_fmul(length2Cosine1,0x3f000000);\n      length2Cosine2 = __aeabi_fmul(length2Cosine3,length1Cosine2);\n      length2Cosine2 = __aeabi_fmul(length2Cosine2,length1Square);\n      length2Cosine1 = __aeabi_fsub(length2Cosine1,length2Cosine2);\n      length2Square = __aeabi_fmul(length2Cosine1,length2Square);\n      length2Cosine1 = __addsf3(length2Square,length3Square0);\n      length2Square = DAT_20000360;\n      length2Cosine2 = __aeabi_fmul(result1,cosine2Square);\n      length2Cosine3 = __aeabi_fmul(length3Square0,cosine3Square);\n      length2Cosine2 = __aeabi_fsub(length2Cosine2,length2Cosine3);\n      length2Cosine3 = __aeabi_fmul(result3,cosine1Square);\n      length2Cosine2 = __addsf3(length2Cosine2,length2Cosine3);\n      length2Cosine2 = __aeabi_fmul(length2Cosine2,0x3f000000);\n      length1Cosine1 = __aeabi_fmul(length1Cosine1,length1Cosine2);\n      length1Cosine1 = __aeabi_fmul(length1Cosine1,length1Square);\n      length1Cosine1 = __aeabi_fsub(length2Cosine2,length1Cosine1);\n      length2Square = __aeabi_fmul(length1Cosine1,length2Square);\n      length2Square = __addsf3(length2Square,result2);\n      result1 = __aeabi_fmul(result1,cosine3Square);\n      cosine2Square = __aeabi_fmul(length3Square0,cosine2Square);\n      result1 = __addsf3(result1,cosine2Square);\n      result2 = __aeabi_fmul(result2,cosine1Square);\n      result1 = __aeabi_fsub(result1,result2);\n      result2 = __aeabi_fmul(result1,0x3f000000);\n      result1 = __aeabi_fmul(sumLengthSquare,length1Cosine2);\n      length1Square = __aeabi_fmul(result1,length1Square);\n      result1 = DAT_20000360;\n      result2 = __aeabi_fsub(result2,length1Square);\n      result1 = __aeabi_fmul(result2,result1);\n      result1 = __addsf3(result1,result3);\n      result2 = __aeabi_fmul(length1Cosine3,length1Cosine3);\n      result3 = __aeabi_fmul(length2Cosine1,length2Cosine1);\n      result2 = __addsf3(result2,result3);\n      result3 = __aeabi_fmul(length2Square,length2Square);\n      result2 = __addsf3(result2,result3);\n      result3 = __aeabi_fmul(result1,result1);\n      __addsf3(result2,result3);\n      __aeabi_f2d();\n      sqrt();\n      result2 = __truncdfsf2();\n      result2 = __aeabi_fdiv(0x3f800000,result2);\n      result3 = __aeabi_fmul(length1Cosine3,result2);\n      DAT_2000003c = result3;\n      length3Square0 = __aeabi_fmul(length2Cosine1,result2);\n      DAT_20000040 = length3Square0;\n      length1Square = __aeabi_fmul(length2Square,result2);\n      DAT_20000044 = length1Square;\n      DAT_20000048 = __aeabi_fmul(result1,result2);\n      result1 = __aeabi_fmul(length3Square0,DAT_20000048);\n      result2 = __aeabi_fmul(result3,length1Square);\n      result1 = __aeabi_fsub(result1,result2);\n      __addsf3(result1,result1);\n      __aeabi_f2d();\n      sumSquare2 = asin();\n      sumSquare2 = __muldf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0,0x40668000);\n      __divdf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0x54442d18,0x400921fb);\n      result1 = __truncdfsf2();\n      *result = result1;\n      length3Square0 = DAT_20000040;\n      result1 = DAT_2000003c;\n      result2 = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      result3 = __aeabi_fmul(length3Square0,length3Square0);\n      result3 = __aeabi_fsub(result2,result3);\n      result2 = DAT_20000044;\n      length1Square = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      length1Square = __aeabi_fsub(result3,length1Square);\n      result3 = DAT_20000048;\n      length2Square = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __addsf3(length1Square,length2Square);\n      sumSquare2 = __aeabi_f2d();\n      result1 = __aeabi_fmul(result1,length3Square0);\n      result2 = __aeabi_fmul(result2,result3);\n      result1 = __addsf3(result1,result2);\n      __addsf3(result1,result1);\n      sumSquare3 = __aeabi_f2d();\n      sumSquare2 = atan2((int)sumSquare3,(int)((ulonglong)sumSquare3 >> 0x20),(int)sumSquare2,\n                     (int)((ulonglong)sumSquare2 >> 0x20));\n      sumSquare2 = __muldf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0,0x40668000);\n      __divdf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0x54442d18,0x400921fb);\n      result1 = __truncdfsf2();\n      result[1] = result1;\n      length3Square0 = DAT_20000040;\n      result1 = DAT_2000003c;\n      result2 = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      result3 = __aeabi_fmul(length3Square0,length3Square0);\n      result3 = __addsf3(result2,result3);\n      result2 = DAT_20000044;\n      length1Square = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      length1Square = __aeabi_fsub(result3,length1Square);\n      result3 = DAT_20000048;\n      length2Square = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __aeabi_fsub(length1Square,length2Square);\n      sumSquare2 = __aeabi_f2d();\n      result2 = __aeabi_fmul(length3Square0,result2);\n      result1 = __aeabi_fmul(result1,result3);\n      result1 = __addsf3(result2,result1);\n      __addsf3(result1,result1);\n      sumSquare3 = __aeabi_f2d();\n      sumSquare2 = atan2((int)sumSquare3,(int)((ulonglong)sumSquare3 >> 0x20),(int)sumSquare2,\n                     (int)((ulonglong)sumSquare2 >> 0x20));\n      sumSquare2 = __muldf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0,0x40668000);\n      __divdf3((int)sumSquare2,(int)((ulonglong)sumSquare2 >> 0x20),0x54442d18,0x400921fb);\n      result1 = __truncdfsf2();\n      result[2] = result1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_angles_08003330",
                "param_1": "length1",
                "param_2": "length2",
                "param_3": "length3",
                "param_4": "angle1",
                "param_5": "angle2",
                "param_6": "angle3",
                "param_7": "cosine1",
                "param_8": "cosine2",
                "param_9": "cosine3",
                "param_10": "result",
                "uVar1": "length1Square",
                "uVar2": "length2Square",
                "iVar3": "length3Square",
                "uVar4": "cosine1Square",
                "uVar5": "cosine2Square",
                "uVar6": "cosine3Square",
                "uVar7": "sumLengthSquare",
                "iVar8": "sumCosineSquare",
                "uVar9": "length1Cosine1",
                "uVar10": "length1Cosine2",
                "uVar11": "length1Cosine3",
                "uVar12": "length2Cosine1",
                "uVar13": "length2Cosine2",
                "uVar14": "length2Cosine3",
                "uVar15": "length3Cosine1",
                "uVar16": "length3Cosine2",
                "uVar17": "length3Cosine3",
                "uVar18": "invertedLength1",
                "uVar20": "invertedLength3",
                "uVar24": "product1",
                "uVar25": "product2",
                "uVar27": "result1",
                "uVar28": "result2",
                "uVar29": "result3",
                "uVar31": "sumSquare2",
                "uVar32": "sumSquare3"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "atan2",
                "sqrt",
                "__aeabi_fcmpeq",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__addsf3",
                "__muldf3",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "__aeabi_fmul",
                "asin",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_param_left_08003eb0",
            "code": "\nlonglong shift_param_left_08003eb0(uint input_param)\n\n{\n  if (DAT_20000280 == 0) {\n    invoke_interrupt(0x3f);\n    return concatenate_values(input_param,1);\n  }\n  return (ulonglong)input_param << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_param_left_08003eb0",
                "param_1": "input_param",
                "software_interrupt": "invoke_interrupt",
                "CONCAT44": "concatenate_values"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "update_count_and_store_08003ec8",
            "code": "\nundefined4 update_count_and_store_08003ec8(int data,undefined value)\n\n{\n  *(short *)(data + 0x804) = *(short *)(data + 0x804) + 1;\n  *(undefined *)(data + (uint)*(ushort *)(data + 0x802)) = value;\n  *(ushort *)(data + 0x802) = *(short *)(data + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "update_count_and_store_08003ec8",
                "param_1": "data",
                "param_2": "value"
            },
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_gpio_flags_08003f3c",
            "code": "\nvoid setGPIOFlags_08003f3c(int inputFlag1,int inputFlag2,int inputFlag3)\n\n{\n  HAL_GPIO_WritePin(0x40011000,0x8000,inputFlag1 == 0);\n  HAL_GPIO_WritePin(0x40011000,0x4000,inputFlag2 == 0);\n  HAL_GPIO_WritePin(0x40011000,0x2000,inputFlag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_gpio_flags_08003f3c",
                "param_1": "inputFlag1",
                "param_2": "inputFlag2",
                "param_3": "inputFlag3"
            },
            "calling": [
                "PID_Update",
                "Devices_Init"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_08003fc4",
            "code": "\nvoid setParam_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_08003fd0",
            "code": "\nvoid setParam_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_memory_value_08003fdc",
            "code": "\nvoid setMemoryValue_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_memory_value_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_08003fe8",
            "code": "\nvoid setParamValue_08003fe8(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "newValue"
            },
            "calling": [
                "Motor_DistributeSpeed",
                "Motor_StopAll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_pwm_08003ff4",
            "code": "\nvoid initialize_PWM_08003ff4(void)\n\n{\n  HAL_TIM_PWM_Start(&DAT_200015f8,4);\n  HAL_TIM_PWM_Start(&DAT_20001540,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_pwm_08003ff4"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_led_sequence_08004028",
            "code": "\nvoid initializeLEDSequence_08004028(void)\n\n{\n  int iterationCount;\n  \n  Peripherals_Init();\n  PWM_Init();\n  iterationCount = 3;\n  do {\n    toggleLED(1,0);\n    delay_ms(100);\n    toggleLED(0,1);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    iterationCount = iterationCount + -1;\n  } while (iterationCount != 0);\n  toggleLED(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_led_sequence_08004028",
                "iVar1": "iterationCount"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "Peripherals_Init",
                "PWM_Init",
                "delay_ms",
                "toggleLED"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "write_data_to_i2_c_0800403c",
            "code": "\nvoid writeDataToI2C_0800403c(undefined4 deviceAddress,undefined4 memoryAddress,undefined data,int delayFlag)\n\n{\n  int writeStatus;\n  undefined localData [8];\n  \n  localData[0] = data;\n  writeStatus = HAL_I2C_Mem_Write(&DAT_20001504,deviceAddress,memoryAddress,1,localData,1,200);\n  if (writeStatus != 0) {\n    _Error_Handler(\"../Src/i2c.c\",0x1b);\n  }\n  if (delayFlag != 0) {\n    delay_ms(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "write_data_to_i2_c_0800403c",
                "param_1": "deviceAddress",
                "param_2": "memoryAddress",
                "param_3": "data",
                "param_4": "delayFlag",
                "iVar1": "writeStatus",
                "local_14": "localData"
            },
            "calling": [
                "taskScheduler",
                "MPU9250_Init",
                "AK8963_Init",
                "MS5611_Init"
            ],
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "read_i2_c_data_0800407c",
            "code": "\nundefined read_I2C_data_0800407c(undefined4 device_address,undefined4 register_address,undefined4 error_handler_param_1,undefined4 error_handler_param_2)\n\n{\n  int result;\n  undefined data_buffer [8];\n  \n  data_buffer[0] = 0;\n  result = HAL_I2C_Mem_Read(&DAT_20001504,device_address,register_address,1,data_buffer,1,200);\n  if (result != 0) {\n    _Error_Handler(error_handler_param_1,error_handler_param_2);\n  }\n  return data_buffer[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "read_i2_c_data_0800407c",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "error_handler_param_1",
                "param_4": "error_handler_param_2",
                "local_14": "data_buffer",
                "iVar1": "result"
            },
            "calling": [
                "MPU9250_Init",
                "AK8963_Init",
                "I2C_ReadByteArray",
                "AK8963_ReadData"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "read_and_handle_i2_c_data_080040b8",
            "code": "\nvoid readAndHandleI2CData_080040b8(undefined4 deviceAddress,undefined4 memoryAddress,undefined4 dataBuffer,undefined4 dataBufferSize,\n                 undefined4 errorHandler1,undefined4 errorHandler2)\n\n{\n  int readResult;\n  \n  readResult = HAL_I2C_Mem_Read(&DAT_20001504,deviceAddress,memoryAddress,1,dataBuffer,dataBufferSize,200,dataBufferSize);\n  if (readResult != 0) {\n    _Error_Handler(errorHandler1,errorHandler2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "read_and_handle_i2_c_data_080040b8",
                "param_1": "deviceAddress",
                "param_2": "memoryAddress",
                "param_3": "dataBuffer",
                "param_4": "dataBufferSize",
                "param_5": "errorHandler1",
                "param_6": "errorHandler2",
                "iVar1": "readResult"
            },
            "calling": [
                "MS5611_ReadADC"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_data_from_i2_c_buffer_080040e8",
            "code": "\nvoid copyDataFromI2CBuffer_080040e8(undefined4 i2cAddress,int baseAddress,int outputArray,int length)\n\n{\n  undefined readData;\n  int i;\n  undefined *outputPtr;\n  int lineNumber;\n  \n  outputPtr = (undefined *)(outputArray + -1);\n  lineNumber = length;\n  for (i = 0; i < length; i = i + 1) {\n    readData = I2C_ReadByte(i2cAddress,baseAddress + i & 0xffff,\"../Src/i2c.c\",0x4c,lineNumber);\n    outputPtr = outputPtr + 1;\n    *outputPtr = readData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_data_from_i2_c_buffer_080040e8",
                "param_1": "i2cAddress",
                "param_2": "baseAddress",
                "param_3": "outputArray",
                "param_4": "length",
                "uVar1": "readData",
                "iVar2": "i",
                "puVar3": "outputPtr",
                "iVar4": "lineNumber"
            },
            "calling": [
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "MS5611_Init",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "update_drone_status_0800411c",
            "code": "\nvoid updateDroneStatus_0800411c(void)\n\n{\n  undefined4 *ptr1;\n  longlong result;\n  uint var3;\n  uint var4;\n  uint var5;\n  undefined4 var6;\n  undefined4 var7;\n  int currentTime;\n  uint var9;\n  uint var10;\n  uint var11;\n  uint var12;\n  undefined4 *ptr2;\n  undefined4 unaff_r4;\n  int var14;\n  int var15;\n  bool bool16;\n  undefined8 var17;\n  \n  currentTime = millis();\n  if (1 < (uint)(currentTime - DAT_2000028c)) {\n    DAT_2000028c = millis();\n    AHRS_ComputeAngles();\n  }\n  currentTime = millis();\n  if (2 < (uint)(currentTime - DAT_20000294)) {\n    DAT_20000294 = millis();\n    PID_Update();\n  }\n  currentTime = millis();\n  if (3 < (uint)(currentTime - DAT_20000290)) {\n    DAT_20000290 = millis();\n    MSP_SendIdent();\n    MSP_SendStatus();\n    MSP_SendMotor();\n    MSP_SendAttitude();\n    MSP_SendAltitude();\n    MSP_SendRawIMU();\n    MSP_SendPID();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    var15 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    var9 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)var15) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)var15) >> 0x20) << 9;\n    var10 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)var15 >> 7);\n    var11 = var10 + (uint)DAT_20000260 * 0x10000;\n    var4 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)var15) >> 8);\n    currentTime = var9 + 2000;\n    var5 = var4 + (uint)DAT_2000025e * 0x8000;\n    bool16 = (int)var9 < 0;\n    if (1999 < currentTime) {\n      var9 = 0;\n    }\n    var3 = var9;\n    if (bool16 != SBORROW4(currentTime,2000)) {\n      var14 = var9 * var9 * 5;\n      var9 = var14 >> 2;\n      var3 = var14 >> 1;\n    }\n    var12 = var11 - var3;\n    result = (ulonglong)(var5 - var9) * (ulonglong)DAT_2000026c;\n    var14 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)var15 >> 0x28) +\n               (uint)CARRY4(var4,(uint)DAT_2000025e * 0x8000)) - ((int)var9 >> 0x1f)) -\n             (uint)(var5 < var9)) + (int)((ulonglong)result >> 0x20);\n    var4 = (uint)result >> 0x15 | var14 * 0x800;\n    var6 = __floatsisf(var4 - var12 >> 0xf |\n                        (((var14 >> 0x15) -\n                         ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)var15 >> 0x27) +\n                           (uint)CARRY4(var10,(uint)DAT_20000260 * 0x10000)) - ((int)var3 >> 0x1f)\n                          ) - (uint)(var11 < var3))) - (uint)(var4 < var12)) * 0x20000);\n    var6 = __aeabi_fdiv(var6,0x42c80000);\n    DAT_20000354 = var6;\n    var7 = __floatsisf(currentTime);\n    DAT_20000358 = __aeabi_fdiv(var7,0x42c80000);\n    __aeabi_fdiv(var6,0x447d5000);\n    var17 = __aeabi_f2d();\n    var17 = pow((int)var17,(int)((ulonglong)var17 >> 0x20),0x60000000,0x3fc85b95);\n    var17 = __subdf3(0,0x3ff00000,(int)var17,(int)((ulonglong)var17 >> 0x20));\n    __muldf3((int)var17,(int)((ulonglong)var17 >> 0x20),0,0x40e5a540);\n    var6 = __truncdfsf2();\n    var7 = 0;\n    ptr2 = &DAT_20000300;\n    DAT_20000350 = var6;\n    do {\n      ptr1 = ptr2 + 1;\n      *ptr2 = *ptr1;\n      var7 = __addsf3(var7);\n      ptr2 = ptr1;\n    } while (ptr1 != &DAT_2000034c);\n    DAT_2000034c = var6;\n    var6 = __addsf3(var7,var6);\n    DAT_200002fc = __aeabi_fdiv(var6,0x41a00000);\n    currentTime = __aeabi_f2iz();\n    DAT_200014ab = currentTime * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = millis();\n  }\n  currentTime = millis();\n  if (((10 < (uint)(currentTime - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = MS5611_ReadADC();\n    DAT_20000275 = '\\x01';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x40,1,0,unaff_r4);\n    DAT_20000278 = millis();\n  }\n  currentTime = millis();\n  if (((10 < (uint)(currentTime - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = MS5611_ReadADC();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "update_drone_status_0800411c",
                "puVar1": "ptr1",
                "lVar2": "result",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "iVar8": "currentTime",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "puVar13": "ptr2",
                "iVar14": "var14",
                "iVar15": "var15",
                "bVar16": "bool16",
                "uVar17": "var17"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MSP_SendPID",
                "I2C_WriteByte",
                "MSP_SendMotor",
                "millis",
                "MSP_SendAltitude",
                "__subdf3",
                "__addsf3",
                "AHRS_ComputeAngles",
                "__aeabi_f2iz",
                "__muldf3",
                "pow",
                "MSP_SendIdent",
                "__truncdfsf2",
                "__floatsisf",
                "MSP_SendRawIMU",
                "__aeabi_f2d",
                "MSP_SendAttitude",
                "MS5611_ReadADC",
                "PID_Update",
                "__aeabi_fdiv",
                "MSP_SendStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_hardware_08004194",
            "code": "\nvoid initializeHardware_08004194(void)\n\n{\n  initializeDevices();\n  initializeSerial();\n  initializeIMU();\n  initializeMS5611();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_hardware_08004194",
                "serialBegin": "initializeSerial",
                "Devices_Init": "initializeDevices",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MS5611_Init",
                "serialBegin",
                "IMU_Init",
                "Devices_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "run_application_080041ae",
            "code": "\nvoid run_application_080041ae(void)\n\n{\n  initialize_forkserver(0);\n  initialize_system();\n  do {\n    increment_system_tick();\n    execute_task_scheduler();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "run_application_080041ae",
                "startForkserver": "initialize_forkserver",
                "setup": "initialize_system",
                "HAL_IncTick": "increment_system_tick",
                "taskScheduler": "execute_task_scheduler"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "taskScheduler",
                "startForkserver",
                "HAL_IncTick",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "stop_all_motors_080041c4",
            "code": "\nvoid stop_all_motors_080041c4(undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3,undefined4 unused_param4)\n\n{\n  undefined4 unused_variable1;\n  \n  Motor1_SetPWM(0);\n  Motor2_SetPWM(0);\n  Motor3_SetPWM(0);\n  Motor4_SetPWM(0,unused_variable1,unused_param3,unused_param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "stop_all_motors_080041c4",
                "param_1": "unused_param1",
                "param_2": "unused_param2",
                "param_3": "unused_param3",
                "param_4": "unused_param4",
                "extraout_r1": "unused_variable1"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "improve_motor_control_0800426c",
            "code": "\n\n\nvoid improveMotorControl_0800426c(undefined4 motorInput1,undefined4 motorInput2,undefined4 motorInput3,undefined4 motorInput4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint intValue1;\n  uint intValue2;\n  uint intValue3;\n  uint intValue4;\n  \n  result1 = __aeabi_fsub();\n  result2 = __addsf3(motorInput1,motorInput2);\n  result3 = __aeabi_fsub(result1,motorInput3);\n  result3 = __addsf3(result3,motorInput4);\n  __aeabi_fsub(result3,0x447a0000);\n  intValue1 = __aeabi_f2iz();\n  result3 = __aeabi_fsub(result2,motorInput3);\n  result3 = __aeabi_fsub(result3,motorInput4);\n  __aeabi_fsub(result3,0x447a0000);\n  intValue2 = __aeabi_f2iz();\n  result1 = __addsf3(result1,motorInput3);\n  result1 = __aeabi_fsub(result1,motorInput4);\n  __aeabi_fsub(result1,0x447a0000);\n  intValue3 = __aeabi_f2iz();\n  result1 = __addsf3(motorInput3,result2);\n  result1 = __addsf3(result1,motorInput4);\n  __aeabi_fsub(result1,0x447a0000);\n  intValue4 = __aeabi_f2iz();\n  if (999 < (int)intValue4) {\n    intValue4 = 1000;\n  }\n  if (999 < (int)intValue3) {\n    intValue3 = 1000;\n  }\n  if (999 < (int)intValue2) {\n    intValue2 = 1000;\n  }\n  if (999 < (int)intValue1) {\n    intValue1 = 1000;\n  }\n  DAT_200002a0 = intValue2 & ~((int)intValue2 >> 0x1f);\n  DAT_200002a4 = intValue1 & ~((int)intValue1 >> 0x1f);\n  DAT_2000029c = intValue3 & ~((int)intValue3 >> 0x1f);\n  DAT_20000298 = intValue4 & ~((int)intValue4 >> 0x1f);\n  Motor1_SetPWM();\n  Motor2_SetPWM(DAT_2000029c);\n  Motor3_SetPWM(DAT_200002a0);\n  Motor4_SetPWM(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "improve_motor_control_0800426c",
                "param_1": "motorInput1",
                "param_2": "motorInput2",
                "param_3": "motorInput3",
                "param_4": "motorInput4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "intValue1",
                "uVar5": "intValue2",
                "uVar6": "intValue3",
                "uVar7": "intValue4"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "__addsf3",
                "__aeabi_f2iz",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "print_and_xor_checksum_08004300",
            "code": "\nvoid printAndXORChecksum_08004300(uint checksum,byte *data,uint size)\n\n{\n  uint checksumResult;\n  byte *currentByte;\n  \n  serialPrint(&DAT_0800732e);\n  serialWrite(size & 0xff);\n  checksumResult = size & 0xff ^ checksum;\n  serialWrite(checksum);\n  for (currentByte = data; (int)currentByte - (int)data < (int)size; currentByte = currentByte + 1) {\n    serialWrite(*currentByte);\n    checksumResult = checksumResult ^ *currentByte;\n  }\n  serialWrite(checksumResult);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "print_and_xor_checksum_08004300",
                "param_1": "checksum",
                "param_2": "data",
                "param_3": "size",
                "uVar1": "checksumResult",
                "pbVar2": "currentByte"
            },
            "calling": [
                "MSP_SendPID",
                "MSP_SendMotor",
                "MSP_SendAltitude",
                "MSP_SendRawIMU",
                "MSP_SendAttitude",
                "MSP_SendIdent",
                "MSP_SendStatus"
            ],
            "called": [
                "serialWrite",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "send_frame_data_08004348",
            "code": "\n\n\nvoid sendFrameData_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 frameData;\n  uint maskParam2;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  frameData = 0x40003e9;\n  maskParam2 = param2 & 0xff000000;\n  param3Copy = param3;\n  MSP_SendFrame(100,&frameData,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "send_frame_data_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "frameData",
                "local_c": "maskParam2",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "send_frame_to_msp_08004384",
            "code": "\n\n\nvoid sendFrameToMSP_08004384(undefined4 frameData,undefined4 param2,undefined4 param3,uint flags)\n\n{\n  undefined4 frameHeader;\n  undefined4 localVariable;\n  uint maskedFlags;\n  \n  _DAT_200013bd = 0x2a0007;\n  frameHeader = _DAT_200013b9;\n  localVariable = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedFlags = flags & 0xff000000;\n  MSP_SendFrame(0x65,&frameHeader,0xb,0,frameData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "send_frame_to_msp_08004384",
                "param_1": "frameData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "flags",
                "local_14": "frameHeader",
                "uStack_10": "localVariable",
                "local_c": "maskedFlags"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "send_frame_to_msp_080043bc",
            "code": "\nvoid sendFrameToMSP_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *ptrDest;\n  undefined4 *ptrData;\n  undefined4 data [2];\n  undefined2 frameTypes [6];\n  \n  ptrData = (undefined4 *)&DAT_2000142a;\n  ptrDest = data;\n  do {\n    value1 = *ptrData;\n    value2 = ptrData[1];\n    ptrData = ptrData + 2;\n    *ptrDest = value1;\n    ptrDest[1] = value2;\n    ptrDest = ptrDest + 2;\n  } while (ptrData != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)ptrDest = DAT_2000143a;\n  MSP_SendFrame(0x66,data,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "send_frame_to_msp_080043bc",
                "local_24": "data",
                "local_1c": "frameTypes",
                "puVar4": "ptrData",
                "puVar3": "ptrDest",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "send_frame_to_msp_080043f0",
            "code": "\n\n\nvoid send_frame_to_MSP_080043f0(undefined4 data_ptr,undefined4 size,undefined4 frame_ptr)\n\n{\n  undefined4 old_data;\n  undefined4 old_size;\n  undefined4 frame_data [2];\n  \n  old_data = _DAT_200013dd;\n  old_size = _DAT_200013e1;\n  frame_data[0] = frame_ptr;\n  MSP_SendFrame(0x68,&old_data,8,frame_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "send_frame_to_msp_080043f0",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "frame_ptr",
                "local_10": "old_data",
                "uStack_c": "old_size",
                "auStack_8": "frame_data"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "send_frame_data_08004410",
            "code": "\nvoid sendFrameData_08004410(undefined4 dataStart,undefined4 dataValue,undefined4 frameSize)\n\n{\n  undefined4 dataConstant;\n  undefined4 headerInfo;\n  undefined4 frameData;\n  \n  dataConstant = DAT_20001395;\n  headerInfo = CONCAT22((short)((uint)dataValue >> 0x10),DAT_20001399);\n  frameData = frameSize;\n  MSP_SendFrame(0x6c,&dataConstant,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "send_frame_data_08004410",
                "param_1": "dataStart",
                "param_2": "dataValue",
                "param_3": "frameSize",
                "local_10": "dataConstant",
                "local_c": "headerInfo",
                "uStack_8": "frameData"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "send_frame_to_msp_08004434",
            "code": "\nvoid sendFrameToMSP_08004434(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 mspData;\n  undefined4 mspConfig;\n  undefined4 frameSize;\n  \n  mspData = DAT_200014ab;\n  mspConfig = CONCAT22((short)((uint)arg2 >> 0x10),DAT_200014af);\n  frameSize = arg3;\n  MSP_SendFrame(0x6d,&mspData,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "send_frame_to_msp_08004434",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "mspData",
                "local_c": "mspConfig",
                "uStack_8": "frameSize"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "send_frame_data_08004458",
            "code": "\nvoid sendFrameData_08004458(void)\n\n{\n  undefined4 *destArray;\n  undefined4 *srcArray;\n  undefined4 tempValue;\n  undefined4 *destArrayCopy;\n  undefined4 *srcArrayCopy;\n  undefined4 data [3];\n  undefined2 tempArray [10];\n  \n  destArray = data;\n  srcArray = &DAT_2000139b;\n  do {\n    srcArrayCopy = srcArray;\n    destArrayCopy = destArray;\n    tempValue = srcArrayCopy[1];\n    *destArrayCopy = *srcArrayCopy;\n    destArrayCopy[1] = tempValue;\n    destArray = destArrayCopy + 2;\n    srcArray = srcArrayCopy + 2;\n  } while (srcArrayCopy + 2 != (undefined4 *)0x200013b3);\n  destArrayCopy[2] = uRam200013b3;\n  *(undefined2 *)(destArrayCopy + 3) = *(undefined2 *)(srcArrayCopy + 3);\n  MSP_SendFrame(0x70,data,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "send_frame_data_08004458",
                "puVar1": "destArray",
                "puVar2": "srcArray",
                "uVar3": "tempValue",
                "puVar4": "destArrayCopy",
                "puVar5": "srcArrayCopy",
                "local_30": "data",
                "local_24": "tempArray"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "error_handling_function_08004490",
            "code": "\nvoid errorHandlingFunction_08004490(undefined4 errorType,undefined4 lineNumber)\n\n{\n  setGPIOState(0x40011000,0x4000,1);\n  setGPIOState(0x40011000,0x8000,0);\n  setGPIOState(0x40011000,0x2000,0);\n  do {\n    toggleGPIOState(0x40011000,0x4000);\n    toggleGPIOState(0x40011000,0x8000);\n    toggleGPIOState(0x40011000,0x2000);\n    printErrorMessage(\"Error with \");\n    printErrorMessage(errorType);\n    printErrorMessage(\" at line: \");\n    printInteger(lineNumber);\n    writeToSerial(10);\n    delayMilliseconds(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "error_handling_function_08004490",
                "param_1": "errorType",
                "param_2": "lineNumber",
                "HAL_GPIO_WritePin": "setGPIOState",
                "HAL_GPIO_TogglePin": "toggleGPIOState",
                "serialPrint": "printErrorMessage",
                "serialInt": "printInteger",
                "serialWrite": "writeToSerial",
                "delay_ms": "delayMilliseconds"
            },
            "calling": [
                "Peripherals_Init",
                "I2C_WriteByte",
                "SystemClock_Config",
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "serialInt",
                "serialWrite",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "HAL_GPIO_TogglePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_clock_system_08004514",
            "code": "\nvoid initializeClockSystem_08004514(void)\n\n{\n  int result;\n  uint hclkFreq;\n  undefined4 errorHandlerOffset;\n  int clockConfigResult;\n  undefined4 pClkInit;\n  int pClkConfig;\n  int errorHandlerArg1;\n  undefined4 errorHandlerArg2;\n  int errorHandlerArg3;\n  undefined4 rccInitStruct [4];\n  undefined4 oscType;\n  undefined4 pllMultiplier;\n  undefined4 sysclkSource;\n  undefined4 pllDivider;\n  undefined4 hclkDivider;\n  \n  oscType = 1;\n  pllMultiplier = 0x10;\n  clockConfigResult = 2;\n  pllDivider = 0;\n  rccInitStruct[0] = 2;\n  sysclkSource = 2;\n  hclkDivider = 0x380000;\n  result = HAL_RCC_OscConfig(rccInitStruct);\n  if (result == 0) goto LAB_08004540;\n  errorHandlerOffset = 0x3c;\n  while( true ) {\n    result = _Error_Handler(\"../Src/peripherals.c\",errorHandlerOffset);\nLAB_08004540:\n    pClkInit = 0xf;\n    errorHandlerArg2 = 0x400;\n    pClkConfig = clockConfigResult;\n    errorHandlerArg1 = result;\n    errorHandlerArg3 = result;\n    clockConfigResult = HAL_RCC_ClockConfig(&pClkInit,clockConfigResult);\n    if (clockConfigResult == 0) break;\n    errorHandlerOffset = 0x49;\n  }\n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFreq / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_clock_system_08004514",
                "iVar1": "result",
                "uVar2": "hclkFreq",
                "uVar3": "errorHandlerOffset",
                "iVar4": "clockConfigResult",
                "local_44": "pClkInit",
                "local_40": "pClkConfig",
                "local_3c": "errorHandlerArg1",
                "local_38": "errorHandlerArg2",
                "local_34": "errorHandlerArg3",
                "local_30": "rccInitStruct",
                "local_20": "oscType",
                "local_1c": "pllMultiplier",
                "local_14": "sysclkSource",
                "local_10": "pllDivider",
                "local_c": "hclkDivider"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripherals_0800458c",
            "code": "\n\n\nvoid initializePeripherals_0800458c(void)\n\n{\n  int result;\n  undefined4 errorCode;\n  int var3;\n  int var58;\n  int var54;\n  int var50;\n  int var4c;\n  int var48;\n  int var40;\n  int var3c;\n  int var38;\n  int var34;\n  int var30;\n  int var2c;\n  int var28;\n  int var24;\n  undefined4 var20;\n  int var1c;\n  \n  HAL_Init();\n  SystemClock_Config();\n  var3 = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  HAL_GPIO_WritePin(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  HAL_GPIO_WritePin(0x40010800,0x20,0);\n  var34 = 0xe000;\n  var30 = 1;\n  var28 = 2;\n  HAL_GPIO_Init(0x40011000,&var34);\n  var34 = 0x20;\n  var30 = 1;\n  var28 = 2;\n  HAL_GPIO_Init(0x40010800,&var34);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = HAL_I2C_Init();\n  if (result == 0) goto LAB_0800463a;\n  errorCode = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = _Error_Handler(\"../Src/peripherals.c\",errorCode);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = HAL_UART_Init(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  errorCode = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = var3;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = HAL_TIM_PWM_Init(&DAT_200015bc);\n                                if (result == 0) break;\n                                errorCode = 0x88;\n                              }\n                              var58 = result;\n                              var54 = result;\n                              result = HAL_TIMEx_MasterConfigSynchronization(&DAT_200015bc,&var58)\n                              ;\n                              if (result == 0) break;\n                              errorCode = 0x8f;\n                            }\n                            var50 = 0x60;\n                            var4c = result;\n                            var48 = result;\n                            var40 = result;\n                            var3c = result;\n                            var38 = result;\n                            result = HAL_TIM_PWM_ConfigChannel(&DAT_200015bc,&var50,0xc);\n                            if (result == 0) break;\n                            errorCode = 0x9a;\n                          }\n                          var20 = 0x2000;\n                          var34 = result;\n                          var30 = result;\n                          var2c = result;\n                          var28 = result;\n                          var24 = result;\n                          var1c = result;\n                          result = HAL_TIMEx_ConfigBreakDeadTime(&DAT_200015bc,&var34);\n                          if (result == 0) break;\n                          errorCode = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = var3;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = HAL_TIM_PWM_Init(&DAT_200015f8);\n                        if (result == 0) break;\n                        errorCode = 0xc3;\n                      }\n                      var50 = result;\n                      var4c = result;\n                      result = HAL_TIMEx_MasterConfigSynchronization(&DAT_200015f8,&var50);\n                      if (result == 0) break;\n                      errorCode = 0xca;\n                    }\n                    var34 = 0x60;\n                    var30 = result;\n                    var2c = result;\n                    var24 = result;\n                    result = HAL_TIM_PWM_ConfigChannel(&DAT_200015f8,&var34,4);\n                    if (result == 0) break;\n                    errorCode = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = var3;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = HAL_TIM_PWM_Init();\n                  if (result == 0) break;\n                  errorCode = 0xf0;\n                }\n                var50 = 0;\n                var4c = 0;\n                result = HAL_TIMEx_MasterConfigSynchronization(&DAT_20001540,&var50);\n                if (result == 0) break;\n                errorCode = 0xf7;\n              }\n              var34 = 0x60;\n              var30 = result;\n              var2c = result;\n              var24 = result;\n              result = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&var34,8);\n              if (result == 0) break;\n              errorCode = 0x100;\n            }\n            var3 = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&var34,0xc);\n            if (var3 == 0) break;\n            errorCode = 0x105;\n          }\n          HAL_TIM_MspPostInit(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = var3;\n          DAT_200014d8 = var3;\n          result = HAL_TIM_PWM_Init(&DAT_200014c8);\n          if (result == 0) break;\n          errorCode = 0x122;\n        }\n        var50 = result;\n        var4c = result;\n        result = HAL_TIMEx_MasterConfigSynchronization(&DAT_200014c8,&var50);\n        if (result == 0) break;\n        errorCode = 0x129;\n      }\n      var34 = 0x60;\n      var30 = result;\n      var2c = result;\n      var24 = result;\n      result = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&var34,8);\n      if (result == 0) break;\n      errorCode = 0x132;\n    }\n    result = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&var34,0xc);\n    if (result == 0) break;\n    errorCode = 0x137;\n  }\n  HAL_TIM_MspPostInit(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "iVar1": "result",
                "uVar2": "errorCode",
                "iVar3": "var3",
                "local_58": "var58",
                "local_54": "var54",
                "local_50": "var50",
                "local_4c": "var4c",
                "local_48": "var48",
                "local_40": "var40",
                "local_3c": "var3c",
                "local_38": "var38",
                "local_34": "var34",
                "local_30": "var30",
                "local_2c": "var2c",
                "local_28": "var28",
                "local_24": "var24",
                "local_20": "var20",
                "local_1c": "var1c"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_I2C_Init",
                "HAL_TIM_PWM_Init",
                "HAL_UART_Init",
                "SystemClock_Config",
                "HAL_TIM_MspPostInit",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "_Error_Handler",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_GPIO_WritePin",
                "HAL_Init",
                "HAL_GPIO_Init",
                "HAL_TIMEx_MasterConfigSynchronization"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_result_0800483c",
            "code": "\nvoid calculateResult_0800483c(int *inputData)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  int value1;\n  int value2;\n  int value3;\n  \n  value2 = inputData[0xc];\n  temp1 = __addsf3(inputData[7],inputData[9]);\n  value2 = __aeabi_fsub(temp1,value2);\n  inputData[10] = value2;\n  if (*inputData == 3) {\n    value2 = __aeabi_fcmpgt(inputData[10],0);\n    if (value2 == 0) {\n      value2 = __aeabi_fcmplt(inputData[10],0xc3340000);\n    }\n    else {\n      value2 = __aeabi_fcmpgt(inputData[10],0x43340000);\n    }\n    if (value2 != 0) {\n      value3 = inputData[10];\n      temp1 = __aeabi_fmul(inputData[10],0x43b40000);\n      value2 = __aeabi_fcmpgt(inputData[10],0);\n      value1 = inputData[10];\n      if (value2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      temp1 = __aeabi_fdiv(temp1,value1);\n      value2 = __aeabi_fsub(value3,temp1);\n      inputData[10] = value2;\n    }\n  }\n  value3 = inputData[2];\n  value1 = inputData[3];\n  value2 = __aeabi_fmul(inputData[1],inputData[10]);\n  inputData[0xe] = value2;\n  value2 = __addsf3(inputData[10],inputData[0xf]);\n  inputData[0xf] = value2;\n  value2 = __aeabi_fcmplt(inputData[0xf],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = __aeabi_fcmpgt(inputData[0xf],0x43fa0000);\n    if (value2 == 0) {\n      value2 = inputData[0xf];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  inputData[0xf] = value2;\n  value2 = __aeabi_fsub(inputData[0xc],inputData[0xd]);\n  inputData[0x10] = value2;\n  value2 = inputData[0xe];\n  temp1 = __aeabi_fmul(value3,inputData[0xf]);\n  temp1 = __addsf3(temp1,value2);\n  temp2 = __aeabi_fmul(value1,inputData[0x10]);\n  value2 = __aeabi_fsub(temp1,temp2);\n  inputData[0x12] = value2;\n  temp1 = __floatsisf(inputData[0x13]);\n  value2 = __aeabi_fcmplt(inputData[0x12],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = __aeabi_fcmpgt(inputData[0x12],0x43fa0000);\n    if (value2 == 0) {\n      value2 = inputData[0x12];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value2 = __aeabi_fmul(value2,temp1);\n  inputData[0x12] = value2;\n  inputData[0xd] = inputData[0xc];\n  inputData[0xb] = inputData[10];\n  inputData[0x15] = inputData[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_result_0800483c",
                "param_1": "inputData",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fdiv",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_altitude_08004a30",
            "code": "\nvoid updateAltitude_08004a30(void)\n\n{\n  undefined4 filteredAltitude;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      filteredAltitude = MS5611_GetFilteredAltitude();\n      DAT_20000068 = __aeabi_fmul(filteredAltitude,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      filteredAltitude = MS5611_GetFilteredAltitude();\n      DAT_2000007c = __aeabi_fmul(filteredAltitude,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_altitude_08004a30",
                "uVar1": "filteredAltitude"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "MS5611_GetFilteredAltitude",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "update_flight_data_08004a84",
            "code": "\nvoid updateFlightData_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = AHRS_GetPitch();\n  DAT_20000134 = AHRS_GetRoll();\n  DAT_20000190 = AHRS_GetYaw();\n  updateAltitude();\n  iVar1 = __aeabi_fcmpgt(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = __aeabi_fcmplt(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = __aeabi_fcmpgt(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = __aeabi_fcmpgt(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = __aeabi_fcmplt(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = __aeabi_fcmpgt(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      setLEDState(1,1);\n      PID_Compute(&DAT_200000a8);\n      PID_Compute(&DAT_20000104);\n      PID_Compute(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        PID_Compute(&DAT_2000004c);\n        __addsf3(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        stopAllMotors();\n      }\n      else {\n        Motor_DistributeSpeed(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      __aeabi_fmul(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = __fixunssfsi();\n      return;\n    }\n  }\n  stopAllMotors();\n  setLEDState(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "update_flight_data_08004a84",
                "PID_UpdateAltitude": "updateAltitude",
                "Motor_StopAll": "stopAllMotors",
                "toggleLED": "setLEDState"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "Motor_StopAll",
                "PID_Compute",
                "__addsf3",
                "toggleLED",
                "__aeabi_fcmpgt",
                "__aeabi_fmul",
                "__fixunssfsi",
                "PID_UpdateAltitude",
                "AHRS_GetYaw",
                "__aeabi_fcmplt",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 processData_08004c18(undefined inputData)\n\n{\n  int *pointerVar1;\n  int indexVar1;\n  int indexVar2;\n  ushort *pointerVar2;\n  \n  DAT_20001636._0_1_ = inputData;\n  pointerVar2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      indexVar1 = HAL_GetTick();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        indexVar2 = HAL_GetTick();\n      } while ((uint)(indexVar2 - indexVar1) < 6);\nLAB_0800281c:\n      pointerVar1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      pointerVar1[3] = pointerVar1[3] & 0xffffffdf;\n      pointerVar1[3] = pointerVar1[3] & 0xfffffeff;\n      pointerVar1[5] = pointerVar1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      indexVar1 = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        indexVar2 = HAL_GetTick();\n        if (5 < (uint)(indexVar2 - indexVar1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *pointerVar2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        pointerVar2 = pointerVar2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      indexVar1 = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        indexVar2 = HAL_GetTick();\n        if (5 < (uint)(indexVar2 - indexVar1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)pointerVar2;\n    }\n    pointerVar2 = (ushort *)((int)pointerVar2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "inputData",
                "piVar1": "pointerVar1",
                "iVar2": "indexVar1",
                "iVar3": "indexVar2",
                "puVar4": "pointerVar2"
            },
            "calling": [
                "MSP_SendFrame",
                "serialPrint",
                "_Error_Handler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "initialize_communication_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * initializeCommunication_08004c30(int *communicationData)\n\n{\n  int tempVar1;\n  \n  if (*communicationData != 0x40013800) {\n    return communicationData;\n  }\n  CB_Write(&DAT_20000364,DAT_20001634);\n  tempVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar1 + 0x14) = *(uint *)(tempVar1 + 0x14) | 1;\n    *(uint *)(tempVar1 + 0xc) = *(uint *)(tempVar1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "initialize_communication_08004c30",
                "param_1": "communicationData",
                "iVar1": "tempVar1"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "CB_Write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int iterator;\n  \n  iterator = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[iterator] = 0;\n    iterator = iterator + 1;\n  } while (iterator != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "iterator"
            },
            "calling": [
                "serialBegin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "serial_communication_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 serialCommunication_08004c70(void)\n\n{\n  int dataOffset;\n  \n  flushSerialData();\n  dataOffset = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(dataOffset + 0x14) = *(uint *)(dataOffset + 0x14) | 1;\n    *(uint *)(dataOffset + 0xc) = *(uint *)(dataOffset + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "serial_communication_08004c70",
                "iVar1": "dataOffset",
                "serialFlush": "flushSerialData"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "serialFlush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "print_string_08004c8c",
            "code": "\nvoid printString_08004c8c(undefined *string)\n\n{\n  uint stringLength;\n  undefined *currentChar;\n  \n  currentChar = string;\n  while( true ) {\n    stringLength = strlen(string);\n    if (stringLength <= (uint)((int)currentChar - (int)string)) break;\n    serialWrite(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "print_string_08004c8c",
                "param_1": "string",
                "uVar1": "stringLength",
                "puVar2": "currentChar"
            },
            "calling": [
                "serialInt",
                "MSP_SendFrame",
                "_Error_Handler"
            ],
            "called": [
                "serialWrite",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "print_integer_and_serial_08004cac",
            "code": "\nvoid printIntegerAndSerial_08004cac(undefined4 value)\n\n{\n  siprintf(&DAT_20001636,&DAT_0800735e,value);\n  serialPrint(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "print_integer_and_serial_08004cac",
                "param_1": "value"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "configure_priority_settings_08004ccc",
            "code": "\n\n\nvoid configurePrioritySettings_08004ccc(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  HAL_NVIC_SetPriorityGrouping(3,arg2,_DAT_40021018,1,arg1,1,arg3);\n  HAL_NVIC_SetPriority(0xfffffff4,0);\n  HAL_NVIC_SetPriority(0xfffffff5,0);\n  HAL_NVIC_SetPriority(0xfffffff6,0);\n  HAL_NVIC_SetPriority(0xfffffffb,0);\n  HAL_NVIC_SetPriority(0xfffffffc,0);\n  HAL_NVIC_SetPriority(0xfffffffe,0);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "configure_priority_settings_08004ccc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "initialize_gpio_08004d48",
            "code": "\n\n\nvoid initializeGPIO_08004d48(int *dataPointer,undefined4 param)\n\n{\n  undefined4 gpioConfigValue;\n  undefined4 gpioConfigMode;\n  \n  if (*dataPointer == 0x40005400) {\n    gpioConfigValue = 0xc0;\n    gpioConfigMode = 0x12;\n    HAL_GPIO_Init(0x40010c00,&gpioConfigValue,0x40005400,3,dataPointer,param);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "initialize_gpio_08004d48",
                "param_1": "dataPointer",
                "param_2": "param",
                "local_18": "gpioConfigValue",
                "local_14": "gpioConfigMode"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flag_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataFlag_08004d8c(int *data)\n\n{\n  int value;\n  \n  value = *data;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flag_08004d8c",
                "param_1": "data",
                "iVar1": "value"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "init_gpio_08004e14",
            "code": "\nvoid initGPIO_08004e14(int *pin,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpioReg;\n  int pinValue;\n  undefined4 mode;\n  undefined4 param;\n  undefined4 param;\n  undefined4 param;\n  \n  pinValue = *pin;\n  if (pinValue == 0x40012c00) {\n    mode = 0x800;\n  }\n  else {\n    if (pinValue != 0x40000000) {\n      if (pinValue == 0x40000400) {\n        mode = 3;\n      }\n      else {\n        if (pinValue != 0x40000800) {\n          return;\n        }\n        mode = 0x300;\n      }\n      gpioReg = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    mode = 2;\n  }\n  gpioReg = 0x40010800;\nLAB_08004e2e:\n  param = 2;\n  param = 2;\n  param = param3;\n  HAL_GPIO_Init(gpioReg,&mode);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "init_gpio_08004e14",
                "param_1": "pin",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "gpioReg",
                "iVar2": "pinValue",
                "local_18": "mode",
                "local_14": "param",
                "uStack_10": "param",
                "local_c": "param"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_gpio_08004e7c",
            "code": "\n\n\nvoid initializeGPIO_08004e7c(int *gpioAddress)\n\n{\n  undefined4 gpioConfig1;\n  undefined4 gpioConfig2;\n  undefined4 gpioConfig3;\n  undefined4 gpioConfig4;\n  \n  if (*gpioAddress == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    gpioConfig1 = 0x200;\n    gpioConfig2 = 2;\n    gpioConfig4 = 3;\n    HAL_GPIO_Init(0x40010800,&gpioConfig1);\n    gpioConfig1 = 0x400;\n    gpioConfig2 = 0;\n    gpioConfig3 = 0;\n    HAL_GPIO_Init(0x40010800,&gpioConfig1);\n    HAL_NVIC_SetPriority(0x25,0,0);\n    HAL_NVIC_EnableIRQ(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_gpio_08004e7c",
                "param_1": "gpioAddress",
                "local_18": "gpioConfig1",
                "local_14": "gpioConfig2",
                "local_10": "gpioConfig3",
                "local_c": "gpioConfig4"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_memory_08004f10",
            "code": "\n\n\nvoid initializeMemory_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_memory_08004f10"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f5c": {
            "entrypoint": "0x08004f5c",
            "current_name": "FUN_08004f5c",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "FUN_08004f60",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f64": {
            "entrypoint": "0x08004f64",
            "current_name": "FUN_08004f64",
            "code": "\nvoid HAL_Delay(void)\n\n{\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "I2C_WriteByte",
                "MS5611_Init",
                "_Error_Handler",
                "Devices_Init"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f68": {
            "entrypoint": "0x08004f68",
            "current_name": "initialize_data_08004f68",
            "code": "\nvoid initializeData_08004f68(void)\n\n{\n  int offset;\n  undefined4 *ptr;\n  code *jmpTable;\n  \n  for (offset = 0; (undefined4 *)(offset + 0x20000000) < &DAT_20000228; offset = offset + 4) {\n    *(undefined4 *)(offset + 0x20000000) = *(undefined4 *)(offset + 0x8007448);\n  }\n  for (ptr = &DAT_20000228; ptr < &DAT_200016a0; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jmpTable = (code *)0x8004f9a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jmpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f68": "initialize_data_08004f68",
                "iVar1": "offset",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jmpTable"
            },
            "calling": [],
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  _init();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "print_and_clear_buffer_08004ffc",
            "code": "\nvoid printAndClearBuffer_08004ffc(undefined *buffer,undefined4 length,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined *bufferPtr [2];\n  undefined4 maxLength;\n  undefined2 bufferSize;\n  undefined2 constant;\n  undefined *ptrToBuffer;\n  undefined4 maxSize;\n  undefined4 stackParam_1;\n  undefined4 stackParam_2;\n  undefined4 stackParam_3;\n  \n  bufferSize = 0x208;\n  maxLength = 0x7fffffff;\n  maxSize = 0x7fffffff;\n  constant = 0xffff;\n  bufferPtr[0] = buffer;\n  ptrToBuffer = buffer;\n  stackParam_1 = length;\n  stackParam_2 = param_3;\n  stackParam_3 = param_4;\n  _svfiprintf_r(DAT_200001c0,bufferPtr,length);\n  *bufferPtr[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "print_and_clear_buffer_08004ffc",
                "param_1": "buffer",
                "param_2": "length",
                "local_78": "bufferPtr",
                "local_70": "maxLength",
                "local_6c": "bufferSize",
                "local_6a": "constant",
                "local_68": "ptrToBuffer",
                "local_64": "maxSize",
                "uStack_c": "stackParam_1",
                "uStack_8": "stackParam_2",
                "uStack_4": "stackParam_3"
            },
            "calling": [
                "serialInt"
            ],
            "called": [
                "_svfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "improve_and_copy_data_08005044",
            "code": "\nundefined4 improveAndCopyData_08005044(undefined4 *output,int *input,undefined4 data,uint length)\n\n{\n  int result;\n  uint newLength;\n  uint currentLength;\n  int offset;\n  \n  currentLength = input[2];\n  if ((currentLength <= length) && ((*(ushort *)(input + 3) & 0x480) != 0)) {\n    offset = *input - input[4];\n    currentLength = (uint)(input[5] * 3) / 2;\n    newLength = length + 1 + offset;\n    if (currentLength < newLength) {\n      currentLength = newLength;\n    }\n    if ((int)((uint)*(ushort *)(input + 3) << 0x15) < 0) {\n      result = _malloc_r(output,currentLength);\n      if (result == 0) {\nLAB_0800508a:\n        *output = 0xc;\n        *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n        return 0xffffffff;\n      }\n      memcpy(result,input[4],offset);\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      result = _realloc_r(output,input[4],currentLength);\n      if (result == 0) {\n        _free_r(output,input[4]);\n        goto LAB_0800508a;\n      }\n    }\n    input[4] = result;\n    *input = result + offset;\n    input[5] = currentLength;\n    input[2] = currentLength - offset;\n    currentLength = length;\n  }\n  if (length <= currentLength) {\n    currentLength = length;\n  }\n  memmove(*input,data,currentLength);\n  input[2] = input[2] - currentLength;\n  *input = currentLength + *input;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "improve_and_copy_data_08005044",
                "param_1": "output",
                "param_2": "input",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "uVar2": "newLength",
                "uVar3": "currentLength",
                "iVar4": "offset"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "memmove",
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "format_and_print_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint formatAndPrint_080050fc(undefined4 *error_msg,int *flags,byte *format_str,int *buffer)\n\n{\n  int size;\n  int result;\n  int *next_arg;\n  bool is_number;\n  byte *current_char;\n  byte *start_of_format;\n  int printf_result;\n  int *next_arg;\n  uint format_flags;\n  int precision;\n  undefined4 width;\n  int number;\n  int format_length;\n  byte conversion;\n  undefined flag_space;\n  undefined flag_plus;\n  undefined flag_hash;\n  undefined4 flag_zero;\n  \n  next_arg = buffer;\n  if (((int)((uint)*(ushort *)(flags + 3) << 0x18) < 0) && (flags[4] == 0)) {\n    size = _malloc_r(error_msg,0x40);\n    *flags = size;\n    flags[4] = size;\n    if (size == 0) {\n      *error_msg = 0xc;\n      return -1;\n    }\n    flags[5] = 0x40;\n  }\n  format_length = 0;\n  flag_space = 0x20;\n  flag_plus = 0x30;\n  current_char = format_str;\nLAB_08005146:\n  start_of_format = current_char;\n  if (*start_of_format != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_char = start_of_format + 1;\n  if (*start_of_format != 0x25) goto LAB_08005146;\nLAB_08005150:\n  size = (int)start_of_format - (int)format_str;\n  if (size != 0) {\n    result = __ssputs_r(error_msg,flags,format_str,size);\n    if (result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(flags + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return format_length;\n    }\n    format_length = format_length + size;\n  }\n  if (*start_of_format == 0) goto LAB_080052ac;\n  format_flags = 0;\n  number = 0;\n  precision = -1;\n  width = 0;\n  flag_hash = 0;\n  flag_zero = 0;\n  current_char = start_of_format + 1;\n  while( true ) {\n    size = memchr(&DAT_08007379,*current_char);\n    format_str = current_char + 1;\n    if (size == 0) break;\n    format_flags = 1 << (size + 0xf7ff8c87U & 0xff) | format_flags;\n    current_char = format_str;\n  }\n  if ((int)(format_flags << 0x1b) < 0) {\n    flag_hash = 0x20;\n  }\n  if ((int)(format_flags << 0x1c) < 0) {\n    flag_hash = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    next_arg = next_arg + 1;\n    size = *next_arg;\n    next_arg = next_arg;\n    if (size < 0) {\n      number = -size;\n      format_flags = format_flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_number = false;\n    size = number;\n    format_str = current_char;\n    while( true ) {\n      if (9 < *format_str - 0x30) break;\n      size = size * 10 + (*format_str - 0x30);\n      is_number = true;\n      format_str = format_str + 1;\n    }\n    if (!is_number) goto LAB_080051fc;\n  }\n  number = size;\nLAB_080051fc:\n  if (*format_str == 0x2e) {\n    if (format_str[1] == 0x2a) {\n      format_str = format_str + 2;\n      next_arg = next_arg + 1;\n      precision = *next_arg;\n      next_arg = next_arg;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_number = false;\n      size = 0;\n      precision = 0;\n      while( true ) {\n        format_str = format_str + 1;\n        if (9 < *format_str - 0x30) break;\n        size = size * 10 + (*format_str - 0x30);\n        is_number = true;\n      }\n      if (is_number) {\n        precision = size;\n      }\n    }\n  }\n  size = memchr(&DAT_0800737f,*format_str,3);\n  if (size != 0) {\n    format_str = format_str + 1;\n    format_flags = format_flags | 0x40 << (size + 0xf7ff8c81U & 0xff);\n  }\n  conversion = *format_str;\n  format_str = format_str + 1;\n  size = memchr(\"efgEFG\",conversion,6);\n  if (size == 0) {\n    printf_result = _printf_i(error_msg,&format_flags,flags,0x8005045,&next_arg);\n    if (printf_result == -1) goto LAB_080052ac;\n  }\n  else {\n    next_arg = (int *)(((int)next_arg + 7U & 0xfffffff8) + 8);\n  }\n  format_length = format_length + printf_result;\n  current_char = format_str;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "format_and_print_080050fc",
                "param_1": "error_msg",
                "param_2": "flags",
                "param_3": "format_str",
                "param_4": "buffer",
                "iVar1": "size",
                "iVar2": "result",
                "piVar3": "next_arg",
                "bVar4": "is_number",
                "pbVar5": "current_char",
                "pbVar6": "start_of_format",
                "unaff_r9": "printf_result",
                "local_8c": "next_arg",
                "local_88": "format_flags",
                "local_84": "precision",
                "local_80": "width",
                "local_7c": "number",
                "local_74": "format_length",
                "local_70": "conversion",
                "local_6f": "flag_space",
                "local_6e": "flag_plus",
                "local_45": "flag_hash",
                "local_30": "flag_zero"
            },
            "calling": [
                "siprintf"
            ],
            "called": [
                "memchr",
                "_malloc_r",
                "__ssputs_r",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "calculate_required_size_080052e4",
            "code": "\nundefined4\ncalculateRequiredSize_080052e4(undefined4 data,uint *input,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint requiredSize;\n  uint offset;\n  bool isNonZero;\n  \n  requiredSize = input[4];\n  if ((int)input[4] < (int)input[2]) {\n    requiredSize = input[2];\n  }\n  *output = requiredSize;\n  if (*(char *)((int)input + 0x43) != '\\0') {\n    *output = requiredSize + 1;\n  }\n  if ((int)(*input << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*input & 6) == 0) {\n    for (index = 0; index < (int)(input[3] - *output); index = index + 1) {\n      result = (*callback)(data,param,(int)input + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  requiredSize = (uint)*(byte *)((int)input + 0x43);\n  if (requiredSize != 0) {\n    requiredSize = 1;\n  }\n  offset = requiredSize;\n  if ((int)(*input << 0x1a) < 0) {\n    *(undefined *)((int)input + requiredSize + 0x43) = 0x30;\n    offset = requiredSize + 2;\n    *(undefined *)((int)input + requiredSize + 0x44) = *(undefined *)((int)input + 0x45);\n  }\n  index = (*callback)(data,param,(int)input + 0x43,offset);\n  if (index != -1) {\n    requiredSize = input[3];\n    isNonZero = (*input & 6) != 4;\n    if (isNonZero) {\n      requiredSize = 0;\n    }\n    offset = 0;\n    if (!isNonZero) {\n      requiredSize = requiredSize - *output;\n    }\n    if (!isNonZero) {\n      requiredSize = requiredSize & ~((int)requiredSize >> 0x1f);\n    }\n    if ((int)input[4] < (int)input[2]) {\n      requiredSize = requiredSize + (input[2] - input[4]);\n    }\n    while( true ) {\n      if (requiredSize == offset) {\n        return 0;\n      }\n      index = (*callback)(data,param,(int)input + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "calculate_required_size_080052e4",
                "param_1": "data",
                "param_2": "input",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "requiredSize",
                "uVar4": "offset",
                "bVar5": "isNonZero"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "format_and_print_080053d4",
            "code": "\nuint formatAndPrint_080053d4(undefined4 format,uint *args,undefined4 width,code *outputFunction,uint **arg_ptr)\n\n{\n  byte byteVal;\n  int intVal1;\n  uint *ptrVal1;\n  int intVal2;\n  char *charPtr1;\n  uint uintVal1;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint uintVal2;\n  uint uintVal3;\n  char *charPtr2;\n  char *charPtr3;\n  uint localArray [2];\n  \n  byteVal = *(byte *)(args + 6);\n  charPtr3 = (char *)((int)args + 0x43);\n  if (byteVal != 0x6e) {\n    if (byteVal < 0x6f) {\n      if (byteVal != 99) {\n        if (byteVal < 100) {\n          if (byteVal == 0) goto LAB_0800558e;\n          if (byteVal != 0x58) goto LAB_08005404;\n          *(undefined *)((int)args + 0x45) = 0x58;\n          charPtr1 = \"0123456789ABCDEF\";\nLAB_0800551e:\n          uintVal1 = *args;\n          ptrVal1 = *arg_ptr;\n          *arg_ptr = ptrVal1 + 1;\n          if (((uintVal1 & 0x80) == 0) && ((int)(uintVal1 << 0x19) < 0)) {\n            uintVal2 = (uint)*(ushort *)ptrVal1;\n          }\n          else {\n            uintVal2 = *ptrVal1;\n          }\n          if ((int)(uintVal1 << 0x1f) < 0) {\n            *args = uintVal1 | 0x20;\n          }\n          if (uintVal2 == 0) {\n            *args = *args & 0xffffffdf;\n          }\n          uintVal1 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)args + 0x43) = 0;\n        }\n        else {\n          if ((byteVal != 100) && (byteVal != 0x69)) goto LAB_08005404;\n          uintVal2 = *args;\n          ptrVal1 = *arg_ptr;\n          if ((uintVal2 & 0x80) == 0) {\n            *arg_ptr = ptrVal1 + 1;\n            if ((uintVal2 & 0x40) == 0) goto LAB_08005424;\n            uintVal2 = (uint)(short)*(ushort *)ptrVal1;\n          }\n          else {\n            *arg_ptr = ptrVal1 + 1;\nLAB_08005424:\n            uintVal2 = *ptrVal1;\n          }\n          if ((int)uintVal2 < 0) {\n            uintVal2 = -uintVal2;\n            *(undefined *)((int)args + 0x43) = 0x2d;\n          }\n          charPtr1 = \"0123456789ABCDEF\";\n          uintVal1 = 10;\n        }\n        uintVal3 = args[1];\n        args[2] = uintVal3;\n        charPtr2 = charPtr3;\n        if ((int)uintVal3 < 0) {\n          if (uintVal2 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)args + 0x42) = *charPtr1;\n          charPtr2 = (char *)((int)args + 0x42);\n        }\n        else {\n          *args = *args & 0xfffffffb;\n          if (uintVal2 == 0) {\n            if (uintVal3 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uintVal3 = uintVal2 / uintVal1;\n              charPtr2 = charPtr2 + -1;\n              *charPtr2 = charPtr1[uintVal2 - uintVal1 * uintVal3];\n              uintVal2 = uintVal3;\n            } while (uintVal3 != 0);\n          }\n        }\n        if (((uintVal1 == 8) && ((int)(*args << 0x1f) < 0)) && ((int)args[1] <= (int)args[4]))\n        {\n          charPtr2[-1] = '0';\n          charPtr2 = charPtr2 + -1;\n        }\n        args[4] = (int)charPtr3 - (int)charPtr2;\n        charPtr3 = charPtr2;\n        goto LAB_080054fa;\n      }\n      ptrVal1 = *arg_ptr;\n      *arg_ptr = ptrVal1 + 1;\n      *(char *)((int)args + 0x42) = (char)*ptrVal1;\nLAB_08005464:\n      charPtr3 = (char *)((int)args + 0x42);\n      uintVal2 = 1;\n    }\n    else {\n      if (byteVal != 0x73) {\n        if (byteVal < 0x74) {\n          if (byteVal == 0x6f) {\nLAB_0800548a:\n            uintVal2 = *args;\n            ptrVal1 = *arg_ptr;\n            if ((uintVal2 & 0x80) == 0) {\n              *arg_ptr = ptrVal1 + 1;\n              if ((uintVal2 & 0x40) == 0) goto LAB_08005498;\n              uintVal2 = (uint)*(ushort *)ptrVal1;\n            }\n            else {\n              *arg_ptr = ptrVal1 + 1;\nLAB_08005498:\n              uintVal2 = *ptrVal1;\n            }\n            if (byteVal == 0x6f) {\n              uintVal1 = 8;\n            }\n            else {\n              uintVal1 = 10;\n            }\n            charPtr1 = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byteVal == 0x70) {\n            *args = *args | 0x20;\nLAB_0800544a:\n            charPtr1 = \"0123456789abcdef\";\n            *(undefined *)((int)args + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byteVal == 0x75) goto LAB_0800548a;\n          if (byteVal == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)args + 0x42) = byteVal;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*arg_ptr;\n      *arg_ptr = (uint *)(ppcVar8 + 1);\n      charPtr3 = *ppcVar8;\n      intVal1 = memchr(charPtr3,0,args[1]);\n      if (intVal1 != 0) {\n        args[1] = intVal1 - (int)charPtr3;\n      }\n      uintVal2 = args[1];\n    }\n    args[4] = uintVal2;\n    *(undefined *)((int)args + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uintVal2 = *args;\n  ppuVar7 = (uint **)*arg_ptr;\n  uintVal1 = args[5];\n  if ((uintVal2 & 0x80) == 0) {\n    *arg_ptr = (uint *)(ppuVar7 + 1);\n    ptrVal1 = *ppuVar7;\n    if ((uintVal2 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptrVal1 = (short)uintVal1;\n  }\n  else {\n    *arg_ptr = (uint *)(ppuVar7 + 1);\n    ptrVal1 = *ppuVar7;\nLAB_0800557a:\n    *ptrVal1 = uintVal1;\n  }\nLAB_0800558e:\n  args[4] = 0;\nLAB_080054fa:\n  intVal1 = _printf_common(format,args,localArray,width,outputFunction);\n  if ((intVal1 == -1) || (intVal1 = (*outputFunction)(format,width,charPtr3,args[4]), intVal1 == -1)) {\nLAB_0800550e:\n    uintVal2 = 0xffffffff;\n  }\n  else {\n    if ((int)(*args << 0x1e) < 0) {\n      for (intVal1 = 0; intVal1 < (int)(args[3] - localArray[0]); intVal1 = intVal1 + 1) {\n        intVal2 = (*outputFunction)(format,width,(int)args + 0x19,1);\n        if (intVal2 == -1) goto LAB_0800550e;\n      }\n    }\n    uintVal2 = args[3];\n    if ((int)args[3] < (int)localArray[0]) {\n      uintVal2 = localArray[0];\n    }\n  }\n  return uintVal2;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "format_and_print_080053d4",
                "param_1": "format",
                "param_2": "args",
                "param_3": "width",
                "param_4": "outputFunction",
                "param_5": "arg_ptr",
                "bVar1": "byteVal",
                "iVar2": "intVal1",
                "puVar3": "ptrVal1",
                "iVar4": "intVal2",
                "pcVar5": "charPtr1",
                "uVar6": "uintVal1",
                "uVar9": "uintVal2",
                "uVar10": "uintVal3",
                "pcVar11": "charPtr2",
                "pcVar12": "charPtr3",
                "local_24": "localArray"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_in_string_08005614",
            "code": "\nchar * find_character_in_string_08005614(char *input_string,char target_character,int string_length)\n\n{\n  char *current_character;\n  char *next_character;\n  \n  current_character = input_string;\n  do {\n    next_character = current_character;\n    if (next_character == input_string + string_length) {\n      return (char *)0x0;\n    }\n    current_character = next_character + 1;\n  } while (*next_character != target_character);\n  return next_character;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_in_string_08005614",
                "param_1": "input_string",
                "param_2": "target_character",
                "param_3": "string_length",
                "pcVar1": "current_character",
                "pcVar2": "next_character"
            },
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_array_to_memory_08005630",
            "code": "\nvoid copyArrayToMemory_08005630(int arrayStartIndex,undefined *sourceArray,int arrayLength)\n\n{\n  undefined *endOfDestinationArray;\n  undefined *currentDestinationIndex;\n  \n  currentDestinationIndex = (undefined *)(arrayStartIndex + -1);\n  endOfDestinationArray = sourceArray + arrayLength;\n  for (; sourceArray != endOfDestinationArray; sourceArray = sourceArray + 1) {\n    currentDestinationIndex = currentDestinationIndex + 1;\n    *currentDestinationIndex = *sourceArray;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_array_to_memory_08005630",
                "param_1": "arrayStartIndex",
                "param_2": "sourceArray",
                "param_3": "arrayLength",
                "puVar1": "endOfDestinationArray",
                "puVar2": "currentDestinationIndex"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_reverse_08005646",
            "code": "\nvoid copyAndReverse_08005646(undefined *dest,undefined *src,int length)\n\n{\n  undefined *endPtr;\n  \n  endPtr = src + length;\n  if ((src < dest) && (dest < endPtr)) {\n    dest = dest + length;\n    length = length - (int)endPtr;\n    while (endPtr + length != (undefined *)0x0) {\n      endPtr = endPtr + -1;\n      dest = dest + -1;\n      *dest = *endPtr;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != endPtr; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_reverse_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "endPtr"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "allocate_memory_0800567c",
            "code": "\nvoid allocateMemory_0800567c(undefined4 *errorCode,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **nextPtr;\n  int **currentPtr;\n  int **nextPtr;\n  int *tempPtr;\n  int **previousPtr;\n  int **allocatedPtr;\n  \n  if (size == 0) {\n    return;\n  }\n  allocatedPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    allocatedPtr = (int **)((int)allocatedPtr + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  nextPtr = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    allocatedPtr[1] = (int *)0x0;\n    currentPtr = nextPtr;\n    DAT_200002ac = allocatedPtr;\n  }\n  else {\n    nextPtr = DAT_200002ac;\n    if (allocatedPtr < DAT_200002ac) {\n      currentPtr = (int **)*allocatedPtr;\n      nextPtr = (int **)((int)allocatedPtr + (int)currentPtr);\n      if (DAT_200002ac == nextPtr) {\n        tempPtr = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        nextPtr = (int **)((int)tempPtr + (int)currentPtr);\n        *allocatedPtr = (int *)nextPtr;\n      }\n      allocatedPtr[1] = (int *)DAT_200002ac;\n      DAT_200002ac = allocatedPtr;\n    }\n    else {\n      do {\n        previousPtr = nextPtr;\n        nextPtr = (int **)previousPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= allocatedPtr);\n      currentPtr = (int **)*previousPtr;\n      if ((int **)((int)previousPtr + (int)currentPtr) == allocatedPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*allocatedPtr);\n        *previousPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)previousPtr + (int)currentPtr)) {\n          tempPtr = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)tempPtr);\n          *previousPtr = (int *)currentPtr;\n          previousPtr[1] = (int *)nextPtr;\n        }\n      }\n      else if (allocatedPtr < (int **)((int)previousPtr + (int)currentPtr)) {\n        *errorCode = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)allocatedPtr + (int)*allocatedPtr);\n        if (nextPtr == currentPtr) {\n          tempPtr = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)tempPtr + (int)*allocatedPtr);\n          *allocatedPtr = (int *)currentPtr;\n        }\n        allocatedPtr[1] = (int *)nextPtr;\n        previousPtr[1] = (int *)allocatedPtr;\n      }\n    }\n  }\n  __malloc_unlock(errorCode,currentPtr,nextPtr,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "allocate_memory_0800567c",
                "param_1": "errorCode",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "nextPtr",
                "ppiVar1": "currentPtr",
                "ppiVar2": "nextPtr",
                "piVar3": "tempPtr",
                "ppiVar4": "previousPtr",
                "ppiVar5": "allocatedPtr"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *allocation_size,uint min_block_size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint difference;\n  uint *new_block;\n  uint block_size;\n  \n  block_size = (min_block_size + 3 & 0xfffffffc) + 8;\n  if (block_size < 0xc) {\n    block_size = 0xc;\n  }\n  if (((int)block_size < 0) || (block_size < min_block_size)) {\n    *allocation_size = 0xc;\n  }\n  else {\n    lock_malloc();\n    current_block = DAT_200002ac;\n    new_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - block_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = block_size;\n          new_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_08005778;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = request_memory(allocation_size);\n    }\n    current_block = (uint *)request_memory(allocation_size,block_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (remaining_space = request_memory(allocation_size,(int)new_block - (int)current_block), remaining_space != -1)))) {\n      *new_block = block_size;\nLAB_08005778:\n      unlock_malloc(allocation_size);\n      block_size = (int)new_block + 0xbU & 0xfffffff8;\n      remaining_space = block_size - (int)(new_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)new_block + remaining_space) = -remaining_space;\n        return block_size;\n      }\n      return block_size;\n    }\n    *allocation_size = 0xc;\n    unlock_malloc(allocation_size);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "allocation_size",
                "param_2": "min_block_size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "new_block",
                "uVar6": "block_size",
                "__malloc_lock": "lock_malloc",
                "__malloc_unlock": "unlock_malloc",
                "_sbrk_r": "request_memory"
            },
            "calling": [
                "_svfiprintf_r",
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "copy_and_free_memory_080057d0",
            "code": "\nint copy_and_free_memory_080057d0(undefined4 source_pointer,int destination_pointer,uint size,undefined4 extra_param)\n\n{\n  int result;\n  uint usable_size;\n  \n  if (destination_pointer != 0) {\n    if (size == 0) {\n      _free_r();\n      result = 0;\n    }\n    else {\n      usable_size = _malloc_usable_size_r();\n      result = destination_pointer;\n      if ((usable_size < size) && (result = _malloc_r(source_pointer,size), result != 0)) {\n        memcpy(result,destination_pointer,size);\n        _free_r(source_pointer,destination_pointer);\n      }\n    }\n    return result;\n  }\n  result = _malloc_r(source_pointer,size,size,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "copy_and_free_memory_080057d0",
                "param_1": "source_pointer",
                "param_2": "destination_pointer",
                "param_3": "size",
                "param_4": "extra_param",
                "iVar1": "result",
                "uVar2": "usable_size"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "allocate_memory_0800581c",
            "code": "\nvoid allocateMemory_0800581c(int *outputPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_2000169c = 0;\n  allocationResult = _sbrk(size);\n  if ((allocationResult == -1) && (DAT_2000169c != 0)) {\n    *outputPointer = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 param1,int param2)\n\n{\n  int sum;\n  \n  sum = *(int *)(param2 + -4) + -4;\n  if (*(int *)(param2 + -4) < 0) {\n    sum = sum + *(int *)(param2 + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "sum"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "calculate_asin_08005854",
            "code": "\nundefined8 calculate_asin_08005854(undefined4 input_x,undefined4 input_y)\n\n{\n  int comparison_result;\n  undefined4 *errno_ptr;\n  int *errno_ptr2;\n  undefined8 asin_result;\n  undefined8 absolute_value;\n  undefined4 handle_nan;\n  undefined *message_ptr;\n  undefined4 x1;\n  undefined4 y1;\n  undefined4 x2;\n  undefined4 y2;\n  undefined8 result;\n  int unordered_result;\n  \n  asin_result = __ieee754_asin();\n  if (DAT_20000224 == -1) {\n    return asin_result;\n  }\n  unordered_result = __unorddf2(input_x,input_y,input_x,input_y);\n  if (unordered_result != 0) {\n    return asin_result;\n  }\n  absolute_value = fabs(input_x,input_y);\n  comparison_result = __aeabi_dcmpgt((int)absolute_value,(int)((ulonglong)absolute_value >> 0x20),0,0x3ff00000);\n  if (comparison_result == 0) {\n    return asin_result;\n  }\n  handle_nan = 1;\n  message_ptr = &DAT_080073ac;\n  x1 = input_x;\n  y1 = input_y;\n  x2 = input_x;\n  y2 = input_y;\n  result = nan(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    comparison_result = matherr(&handle_nan);\n    if (comparison_result != 0) goto LAB_080058d0;\n  }\n  errno_ptr = (undefined4 *)__errno();\n  *errno_ptr = 0x21;\nLAB_080058d0:\n  if (unordered_result != 0) {\n    errno_ptr2 = (int *)__errno();\n    *errno_ptr2 = unordered_result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005854": "calculate_asin_08005854",
                "param_1": "input_x",
                "param_2": "input_y",
                "iVar1": "comparison_result",
                "puVar2": "errno_ptr",
                "piVar3": "errno_ptr2",
                "uVar4": "asin_result",
                "uVar5": "absolute_value",
                "local_48": "handle_nan",
                "local_44": "message_ptr",
                "local_40": "x1",
                "uStack_3c": "y1",
                "local_38": "x2",
                "uStack_34": "y2",
                "local_30": "result",
                "local_28": "unordered_result"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "fabs",
                "nan",
                "__unorddf2",
                "__errno",
                "__ieee754_asin",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058fc": {
            "entrypoint": "0x080058fc",
            "current_name": "FUN_080058fc",
            "code": "\nundefined8 __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  \n  uVar5 = param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar5 | (-param_3 | param_3) >> 0x1f)) ||\n     (uVar3 = param_2 & 0x7fffffff, 0x7ff00000 < (uVar3 | (-param_1 | param_1) >> 0x1f))) {\n    uVar6 = __aeabi_dadd(param_1,param_2,param_3,param_4,param_4);\n    return uVar6;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    uVar6 = atan();\n    return uVar6;\n  }\n  uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((param_1 | uVar3) == 0) {\n    if (uVar2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (uVar2 != 3) {\n      return CONCAT44(param_2,param_1);\n    }\nLAB_0800613e:\n    uVar6 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((param_3 | uVar5) != 0) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 0x7ff00000) {\n          if (uVar2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (uVar2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (uVar2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (uVar2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (uVar2 != 3) {\n          if (uVar2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (uVar3 != 0x7ff00000) {\n        iVar4 = (int)(uVar3 - uVar5) >> 0x14;\n        if (iVar4 < 0x3d) {\n          if (((int)param_4 < 0) && (iVar4 + 0x3c < 0 != SCARRY4(iVar4,0x3c))) {\n            uVar6 = 0;\n          }\n          else {\n            __divdf3(param_1,param_2);\n            fabs();\n            uVar6 = atan();\n          }\n        }\n        else {\n          uVar6 = 0x3ff921fb54442d18;\n        }\n        iVar4 = (int)((ulonglong)uVar6 >> 0x20);\n        uVar1 = (undefined4)uVar6;\n        if (uVar2 == 1) {\n          return CONCAT44(iVar4 + -0x80000000,uVar1);\n        }\n        if (uVar2 == 2) {\n          uVar7 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar6 = 0x400921fb54442d18;\n        }\n        else {\n          if (uVar2 == 0) {\n            return uVar6;\n          }\n          uVar6 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar7 = 0x400921fb54442d18;\n        }\n        uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                         (int)((ulonglong)uVar7 >> 0x20));\n        return uVar6;\n      }\n    }\n    if ((int)param_2 < 0) {\n      uVar6 = 0xbff921fb54442d18;\n    }\n    else {\n      uVar6 = 0x3ff921fb54442d18;\n    }\n  }\n  return uVar6;\n}\n\n",
            "renaming": {},
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_power_08005900",
            "code": "\nundefined8 calculatePower_08005900(undefined4 base1,undefined4 base2,undefined4 exp1,undefined4 exp2)\n\n{\n  char flag;\n  int result;\n  int *errnoPtr;\n  undefined4 *errnoPtr2;\n  int checkFinite;\n  undefined4 powerHigh;\n  undefined4 powerLow;\n  undefined8 result;\n  undefined8 roundedVal;\n  undefined4 eventType;\n  undefined *eventName;\n  undefined4 base1;\n  undefined4 base2;\n  undefined4 exp1;\n  undefined4 exp2;\n  undefined8 returnValue;\n  int errorNum;\n  \n  result = __ieee754_pow();\n  flag = DAT_20000224;\n  powerHigh = (undefined4)((ulonglong)result >> 0x20);\n  powerLow = (undefined4)result;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  result = __unorddf2(exp1,exp2,exp1,exp2);\n  if (result != 0) {\n    return result;\n  }\n  result = __unorddf2(base1,base2,base1,base2);\n  base1 = base1;\n  base2 = base2;\n  exp1 = exp1;\n  exp2 = exp2;\n  if (result == 0) {\n    result = __aeabi_dcmpeq(base1,base2,0,0);\n    if (result != 0) {\n      result = __aeabi_dcmpeq(exp1,exp2,0,0);\n      if (result != 0) {\n        eventType = 1;\n        eventName = &DAT_080073b1;\n        returnValue = 0;\n        errorNum = 0;\n        if (flag != '\\0') {\n          returnValue = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = finite(exp1,exp2);\n      if (result == 0) {\n        return result;\n      }\n      result = __aeabi_dcmplt(exp1,exp2,0,0);\n      if (result == 0) {\n        return result;\n      }\n      eventType = 1;\n      eventName = &DAT_080073b1;\n      errorNum = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      returnValue = 0xfff0000000000000;\n      errorNum = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = finite(powerLow,powerHigh);\n    if (((result != 0) || (checkFinite = finite(base1,base2), checkFinite == 0)) ||\n       (checkFinite = finite(exp1,exp2), checkFinite == 0)) {\n      result = __aeabi_dcmpeq(powerLow,powerHigh,0,0);\n      if (result == 0) {\n        return result;\n      }\n      result = finite(base1,base2);\n      if (result == 0) {\n        return result;\n      }\n      result = finite(exp1,exp2);\n      if (result == 0) {\n        return result;\n      }\n      eventType = 4;\n      eventName = &DAT_080073b1;\n      errorNum = 0;\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    errorNum = __unorddf2(powerLow,powerHigh);\n    flag = DAT_20000224;\n    if (errorNum != 0) {\n      eventName = &DAT_080073b1;\n      eventType = 1;\n      errorNum = result;\n      if (DAT_20000224 != '\\0') {\n        returnValue = __divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      eventName = &DAT_080073b1;\n      eventType = 1;\n      returnValue = 0;\n      goto LAB_08005978;\n    }\n    eventName = &DAT_080073b1;\n    eventType = 3;\n    if (DAT_20000224 == '\\0') {\n      returnValue._0_4_ = 0xe0000000;\n      returnValue._4_4_ = 0x47efffff;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        result = __muldf3(exp1,exp2,0,0x3fe00000);\n        roundedVal = rint();\n        result = __aeabi_dcmpeq((int)result,(int)((ulonglong)result >> 0x20),(int)roundedVal,\n                               (int)((ulonglong)roundedVal >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0xe0000000;\n          returnValue._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = matherr(&eventType);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0x7ff00000;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        result = __muldf3(exp1,exp2,0,0x3fe00000);\n        roundedVal = rint();\n        result = __aeabi_dcmpeq((int)result,(int)((ulonglong)result >> 0x20),(int)roundedVal,\n                               (int)((ulonglong)roundedVal >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0;\n          returnValue._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    errnoPtr2 = (undefined4 *)__errno();\n    powerLow = 0x22;\n  }\n  else {\n    result = __aeabi_dcmpeq(exp1,exp2,0,0);\n    if (result == 0) {\n      return result;\n    }\n    eventType = 1;\n    eventName = &DAT_080073b1;\n    returnValue = 0x3ff0000000000000;\n    errorNum = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = matherr(&eventType);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    errnoPtr2 = (undefined4 *)__errno();\n    powerLow = 0x21;\n  }\n  *errnoPtr2 = powerLow;\nLAB_080059d0:\n  if (errorNum != 0) {\n    errnoPtr = (int *)__errno();\n    *errnoPtr = errorNum;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_power_08005900",
                "param_1": "base1",
                "param_2": "base2",
                "param_3": "exp1",
                "param_4": "exp2",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "errnoPtr",
                "puVar4": "errnoPtr2",
                "iVar5": "checkFinite",
                "uVar6": "powerHigh",
                "uVar7": "powerLow",
                "uVar8": "result",
                "uVar9": "roundedVal",
                "local_50": "eventType",
                "local_4c": "eventName",
                "local_48": "base1",
                "uStack_44": "base2",
                "local_40": "exp1",
                "uStack_3c": "exp2",
                "local_38": "returnValue",
                "local_30": "errorNum"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__ieee754_pow",
                "__unorddf2",
                "finite",
                "__muldf3",
                "__errno",
                "__aeabi_dcmpeq",
                "rint",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "calculate_square_root_08005bc8",
            "code": "\nundefined8 calculateSquareRoot_08005bc8(undefined4 input_1,undefined4 input_2)\n\n{\n  char condition;\n  int comparisonResult;\n  int *errorPtr;\n  undefined4 *errnoPtr;\n  undefined8 result;\n  undefined4 flag;\n  undefined *pointer;\n  undefined4 copy_1;\n  undefined4 copy_2;\n  undefined4 copy_3;\n  undefined4 copy_4;\n  undefined8 output;\n  int error;\n  \n  result = __ieee754_sqrt();\n  condition = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  error = __unorddf2(input_1,input_2,input_1,input_2);\n  if (error != 0) {\n    return result;\n  }\n  comparisonResult = __aeabi_dcmplt(input_1,input_2,0,0);\n  if (comparisonResult == 0) {\n    return result;\n  }\n  flag = 1;\n  pointer = &DAT_080073b5;\n  copy_1 = input_1;\n  copy_2 = input_2;\n  copy_3 = input_1;\n  copy_4 = input_2;\n  if (condition == '\\0') {\n    output = 0;\nLAB_08005c26:\n    comparisonResult = matherr(&flag);\n    if (comparisonResult != 0) goto LAB_08005c2e;\n  }\n  else {\n    output = __divdf3(0,0,0,0);\n    if (condition != '\\x02') goto LAB_08005c26;\n  }\n  errnoPtr = (undefined4 *)__errno();\n  *errnoPtr = 0x21;\nLAB_08005c2e:\n  if (error != 0) {\n    errorPtr = (int *)__errno();\n    *errorPtr = error;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "calculate_square_root_08005bc8",
                "param_1": "input_1",
                "param_2": "input_2",
                "cVar1": "condition",
                "iVar2": "comparisonResult",
                "piVar3": "errorPtr",
                "puVar4": "errnoPtr",
                "uVar5": "result",
                "local_50": "flag",
                "local_4c": "pointer",
                "local_48": "copy_1",
                "uStack_44": "copy_2",
                "local_40": "copy_3",
                "uStack_3c": "copy_4",
                "local_38": "output",
                "local_30": "error"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "__errno",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_square_root_08005c70",
            "code": "\nundefined8 calculateSquareRoot_08005c70(uint input1,uint input2)\n\n{\n  int comparison;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  \n  temp2 = CONCAT44(input2,input1);\n  temp1 = input2 & 0x7fffffff;\n  if (temp1 < 0x3ff00000) {\n    if (temp1 < 0x3fe00000) {\n      if (0x3e3fffff < temp1) {\n        temp3 = __muldf3(input1,input2,input1,input2);\n        result7 = (undefined4)((ulonglong)temp3 >> 0x20);\n        result6 = (undefined4)temp3;\n        temp3 = __muldf3(result6,result7,0xdfdf709,0x3f023de1);\n        temp3 = __aeabi_dadd((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x7501b288,0x3f49efe0);\n        temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),result6,result7);\n        temp3 = __subdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),result6,result7);\n        temp3 = __aeabi_dadd((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xe884455,0x3fc9c155);\n        temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),result6,result7);\n        temp3 = __subdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),result6,result7);\n        temp3 = __aeabi_dadd((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x55555555,0x3fc55555);\n        temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),result6,result7);\n        temp4 = __muldf3(result6,result7,0xb12e9282,0x3fb3b8c5);\n        temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),result6,result7);\n        temp4 = __aeabi_dadd((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),result6,result7);\n        temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),result6,result7);\n        temp4 = __aeabi_dadd((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        temp3 = __divdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                          (int)((ulonglong)temp4 >> 0x20));\n        temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      temp3 = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c);\n      comparison = __aeabi_dcmpgt((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x3ff00000);\n      if (comparison != 0) {\n        return temp2;\n      }\n    }\n    temp2 = fabs(input1,input2);\n    temp2 = __subdf3(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n    result2 = (undefined4)((ulonglong)temp2 >> 0x20);\n    result6 = (undefined4)temp2;\n    temp2 = __muldf3(result6,result2,0xdfdf709,0x3f023de1);\n    temp2 = __aeabi_dadd((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x7501b288,0x3f49efe0);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),result6,result2);\n    temp2 = __subdf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0xb5688f3b,0x3fa48228);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),result6,result2);\n    temp2 = __aeabi_dadd((int)temp2,(int)((ulonglong)temp2 >> 0x20),0xe884455,0x3fc9c155);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),result6,result2);\n    temp2 = __subdf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),result6,result2);\n    temp2 = __aeabi_dadd((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x55555555,0x3fc55555);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),result6,result2);\n    result3 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp3 = __muldf3(result6,result2,0xb12e9282,0x3fb3b8c5);\n    temp3 = __subdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),result6,result2);\n    temp3 = __aeabi_dadd((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),result6,result2);\n    temp3 = __subdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp3 = __muldf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),result6,result2);\n    temp3 = __aeabi_dadd((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x3ff00000);\n    result4 = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp4 = __ieee754_sqrt(result6,result2);\n    result5 = (undefined4)((ulonglong)temp4 >> 0x20);\n    result7 = (undefined4)temp4;\n    if (temp1 < 0x3fef3333) {\n      temp2 = __divdf3((int)temp2,result3,(int)temp3,result4);\n      temp3 = __aeabi_dadd(result7,result5,result7,result5);\n      temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                       (int)((ulonglong)temp3 >> 0x20));\n      temp3 = __muldf3(0,result5,0,result5);\n      temp3 = __subdf3(result6,result2,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      temp4 = __aeabi_dadd(result7,result5,0,result5);\n      temp3 = __divdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                        (int)((ulonglong)temp4 >> 0x20));\n      result6 = (undefined4)((ulonglong)temp3 >> 0x20);\n      temp3 = __aeabi_dadd((int)temp3,result6,(int)temp3,result6);\n      temp3 = __subdf3(0x33145c07,0x3c91a626,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      temp2 = __subdf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                       (int)((ulonglong)temp3 >> 0x20));\n      temp3 = __aeabi_dadd(0,result5,0,result5);\n      temp3 = __subdf3(0x54442d18,0x3fe921fb,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      temp2 = __subdf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                       (int)((ulonglong)temp3 >> 0x20));\n      result6 = 0x3fe921fb;\n    }\n    else {\n      temp2 = __divdf3((int)temp2,result3,(int)temp3,result4);\n      temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),result7,result5);\n      temp2 = __aeabi_dadd((int)temp2,(int)((ulonglong)temp2 >> 0x20),result7,result5);\n      result6 = (undefined4)((ulonglong)temp2 >> 0x20);\n      temp2 = __aeabi_dadd((int)temp2,result6,(int)temp2,result6);\n      temp2 = __subdf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x33145c07,0x3c91a626);\n      result6 = 0x3ff921fb;\n    }\n    temp2 = __subdf3(0x54442d18,result6,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)input2 < 1) {\n      temp2 = CONCAT44((int)((ulonglong)temp2 >> 0x20) + -0x80000000,(int)temp2);\n    }\n  }\n  else {\n    if ((temp1 + 0xc0100000 | input1) != 0) {\n      temp2 = __subdf3(input1,input2,input1,input2);\n      result6 = (undefined4)((ulonglong)temp2 >> 0x20);\n      temp2 = __divdf3((int)temp2,result6,(int)temp2,result6);\n      return temp2;\n    }\n    temp2 = __muldf3(input1,input2,0x54442d18,0x3ff921fb);\n    temp3 = __muldf3(input1,input2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    temp2 = __aeabi_dadd((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                         (int)((ulonglong)temp3 >> 0x20));\n  }\n  return temp2;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_square_root_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "uVar8": "temp1",
                "uVar9": "temp2",
                "uVar10": "temp3",
                "uVar11": "temp4",
                "iVar1": "comparison"
            },
            "calling": [
                "asin"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculateResult_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  undefined8 result;\n  undefined8 temp6;\n  \n  temp5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp5 | (-input3 | input3) >> 0x1f)) ||\n     (temp3 = input2 & 0x7fffffff, 0x7ff00000 < (temp3 | (-input1 | input1) >> 0x1f))) {\n    result = __aeabi_dadd(input1,input2,input3,input4,input4);\n    return result;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result = atan();\n    return result;\n  }\n  temp2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | temp3) == 0) {\n    if (temp2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (temp2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | temp5) != 0) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 0x7ff00000) {\n          if (temp2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (temp2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (temp2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (temp2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (temp2 != 3) {\n          if (temp2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp3 != 0x7ff00000) {\n        temp4 = (int)(temp3 - temp5) >> 0x14;\n        if (temp4 < 0x3d) {\n          if (((int)input4 < 0) && (temp4 + 0x3c < 0 != SCARRY4(temp4,0x3c))) {\n            result = 0;\n          }\n          else {\n            __divdf3(input1,input2);\n            fabs();\n            result = atan();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        temp4 = (int)((ulonglong)result >> 0x20);\n        temp1 = (undefined4)result;\n        if (temp2 == 1) {\n          return CONCAT44(temp4 + -0x80000000,temp1);\n        }\n        if (temp2 == 2) {\n          temp6 = __subdf3(temp1,temp4,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (temp2 == 0) {\n            return result;\n          }\n          result = __subdf3(temp1,temp4,0x33145c07,0x3ca1a626);\n          temp6 = 0x400921fb54442d18;\n        }\n        result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp6,\n                         (int)((ulonglong)temp6 >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "result",
                "uVar7": "temp6"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "atan",
                "__aeabi_dadd",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculateFloatingPoint_08006228(uint significand,uint exponent,uint operand1,uint operand2)\n\n{\n  undefined4 significand1;\n  uint exponent1;\n  uint exponent2;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 extra1;\n  undefined4 extra2;\n  uint extra3;\n  undefined4 extra4;\n  int power;\n  int powerIndex;\n  undefined4 temp3;\n  uint exponentialSignificand;\n  undefined4 temp4;\n  int temp5;\n  uint result;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined8 temp8;\n  undefined8 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  longlong temp12;\n  ulonglong temp13;\n  undefined8 temp14;\n  uint specialNumType;\n  undefined4 specialNumTemp1;\n  undefined4 specialNumTemp2;\n  int powerFlag;\n  \n  temp9 = CONCAT44(exponent,significand);\n  result = operand2 & 0x7fffffff;\n  if ((result | operand1) == 0) {\n    return 0;\n  }\n  exponentialSignificand = exponent & 0x7fffffff;\n  if (exponentialSignificand < 0x7ff00001) {\n    if (exponentialSignificand == 0x7ff00000) {\n      if (significand == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (operand1 == 0)) {\n          if (-1 < (int)exponent) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              specialNumType = 0;\n              goto LAB_080062ba;\n            }\n            power = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < power) {\n              exponent1 = operand1 >> (0x34U - power & 0xff);\n              if (operand1 == exponent1 << (0x34U - power & 0xff)) {\n                specialNumType = 2 - (exponent1 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (operand1 == 0) {\n              exponent1 = (int)result >> (0x14U - power & 0xff);\n              if (result == exponent1 << (0x14U - power & 0xff)) {\n                specialNumType = 2 - (exponent1 & 1);\n              }\n              else {\n                specialNumType = 0;\n              }\n              goto LAB_0800630c;\n            }\n            specialNumType = 0;\n          }\n          else {\n            specialNumType = 2;\nLAB_080062ba:\n            if (operand1 == 0) {\n              if (result == 0x7ff00000) {\n                if ((exponentialSignificand + 0xc0100000 | significand) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < exponentialSignificand) {\n                  if ((int)operand2 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)operand2) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)operand2) {\n                  return significand;\n                }\n                temp8 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (operand2 == 0x40000000) goto LAB_0800634a;\n              if ((operand2 == 0x3fe00000) && (-1 < (int)exponent)) {\n                result = __ieee754_sqrt(significand,exponent);\n                return result;\n              }\n            }\n          }\n          temp8 = fabs(significand,exponent);\n          temp6 = (undefined4)((ulonglong)temp8 >> 0x20);\n          significand1 = (undefined4)temp8;\n          temp13 = CONCAT44(exponent,significand1) & 0x7fffffffffffffff;\n          if ((significand == 0) && ((exponentialSignificand == 0 || ((exponent & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)operand2 < 0) {\n              temp8 = __divdf3(0,0x3ff00000,significand1,temp6);\n            }\n            if (-1 < (int)exponent) {\n              return (uint)temp8;\n            }\n            if ((specialNumType | exponentialSignificand + 0xc0100000) != 0) {\n              return (uint)temp8;\n            }\n          }\n          else {\n            exponent1 = 0xffffffff - ((int)exponent >> 0x1f);\n            temp8 = temp9;\n            if ((specialNumType | exponent1) != 0) {\n              if (result < 0x41e00001) {\n                powerFlag = 0;\n                if (exponentialSignificand < 0x100000) {\n                  temp13 = __muldf3();\n                  powerFlag = -0x35;\n                }\n                result = (uint)(temp13 >> 0x20);\n                significand1 = (undefined4)temp13;\n                powerFlag = ((int)result >> 0x14) + -0x3ff + powerFlag;\n                result = result & 0xfffff;\n                exponentialSignificand = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  power = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    exponentialSignificand = exponentialSignificand - 0x100000;\n                    powerFlag = powerFlag + 1;\n                    goto LAB_08006628;\n                  }\n                  power = 1;\n                }\n                powerIndex = power * 8;\n                temp3 = (&DAT_080073c0)[power * 2];\n                temp4 = (&DAT_080073c4)[power * 2];\n                temp9 = __subdf3(significand1,exponentialSignificand,temp3,temp4);\n                temp7 = (undefined4)((ulonglong)temp9 >> 0x20);\n                temp8 = __aeabi_dadd(significand1,exponentialSignificand,temp3,temp4);\n                temp8 = __divdf3(0,0x3ff00000,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                temp1 = (undefined4)((ulonglong)temp8 >> 0x20);\n                temp10 = __muldf3((int)temp9,temp7,(int)temp8,temp1);\n                temp2 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp6 = (undefined4)temp10;\n                temp10 = __muldf3(0,temp2);\n                temp9 = __subdf3((int)temp9,temp7,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp10 = __subdf3(0,((int)exponentialSignificand >> 1 | 0x20000000U) + 0x80000 + power * 0x40000,\n                                  temp3,temp4);\n                temp10 = __subdf3(significand1,exponentialSignificand,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp2);\n                temp9 = __subdf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp10,\n                                  (int)((ulonglong)temp10 >> 0x20));\n                temp9 = __muldf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,temp1);\n                temp7 = (undefined4)((ulonglong)temp9 >> 0x20);\n                temp8 = __muldf3(temp6,temp2);\n                temp1 = (undefined4)((ulonglong)temp8 >> 0x20);\n                significand1 = (undefined4)temp8;\n                temp8 = __muldf3(significand1,temp1,0x4a454eef,0x3fca7e28);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),significand1,temp1);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),significand1,temp1);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),significand1,temp1);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),significand1,temp1);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp10 = __muldf3(significand1,temp1,significand1,temp1);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp10,\n                                  (int)((ulonglong)temp10 >> 0x20));\n                temp10 = __aeabi_dadd(temp6,temp2,0,temp2);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,temp7);\n                temp8 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp8,\n                                      (int)((ulonglong)temp8 >> 0x20));\n                significand1 = (undefined4)((ulonglong)temp8 >> 0x20);\n                temp10 = __muldf3(0,temp2,0,temp2);\n                temp1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp11 = __aeabi_dadd((int)temp10,temp1,0,0x40080000);\n                __aeabi_dadd((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp8,significand1);\n                temp11 = __muldf3(0,temp2,0,extra1);\n                temp3 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp14 = __subdf3(0,extra1,0,0x40080000);\n                temp10 = __subdf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp10,temp1);\n                temp8 = __subdf3((int)temp8,significand1,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp6,temp2);\n                temp9 = __muldf3((int)temp9,temp7,0,extra1);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                                      (int)((ulonglong)temp9 >> 0x20));\n                significand1 = (undefined4)((ulonglong)temp8 >> 0x20);\n                __aeabi_dadd((int)temp11,temp3,(int)temp8,significand1);\n                temp9 = __muldf3(0,extra2,0xe0000000,0x3feec709);\n                temp10 = __subdf3(0,extra2,(int)temp11,temp3);\n                temp8 = __subdf3((int)temp8,significand1,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xdc3a03fd,0x3feec709\n                                 );\n                temp10 = __muldf3(0,extra2,0x145b01f5,0xbe3e2fe0);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + powerIndex),\n                                      *(undefined4 *)(&DAT_080073e4 + powerIndex));\n                temp10 = __aeabi_i2d(powerFlag);\n                significand1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp6 = *(undefined4 *)(&DAT_080073d0 + powerIndex);\n                temp7 = *(undefined4 *)(&DAT_080073d4 + powerIndex);\n                temp11 = __aeabi_dadd((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                                      (int)((ulonglong)temp8 >> 0x20));\n                temp11 = __aeabi_dadd((int)temp11,(int)((ulonglong)temp11 >> 0x20),temp6,temp7);\n                __aeabi_dadd((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,significand1);\n                temp10 = __subdf3(0,extra3,(int)temp10,significand1);\n                temp12 = __subdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp6,temp7);\n                result = extra3;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (exponentialSignificand < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)operand2 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  significand = 0x8800759c;\n                  exponent = 0x7e37e43c;\n                  temp9 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (exponentialSignificand < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)operand2) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < exponentialSignificand) goto LAB_08006418;\n                temp9 = __subdf3(significand1,temp6,0,0x3ff00000);\n                temp6 = (undefined4)((ulonglong)temp9 >> 0x20);\n                significand1 = (undefined4)temp9;\n                temp9 = __muldf3(significand1,temp6,0x60000000,0x3ff71547);\n                temp8 = __muldf3(significand1,temp6,0xf85ddf44,0x3e54ae0b);\n                temp10 = __muldf3(significand1,temp6,0,0x3fd00000);\n                temp10 = __subdf3(0x55555555,0x3fd55555,(int)temp10,(int)((ulonglong)temp10 >> 0x20)\n                                 );\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),significand1,temp6);\n                temp10 = __subdf3(0,0x3fe00000,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp11 = __muldf3(significand1,temp6,significand1,temp6);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                  (int)((ulonglong)temp11 >> 0x20));\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x652b82fe,0x3ff71547\n                                 );\n                temp8 = __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp10,\n                                  (int)((ulonglong)temp10 >> 0x20));\n                __aeabi_dadd((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                             (int)((ulonglong)temp8 >> 0x20));\n                temp12 = (ulonglong)exponent2 << 0x20;\n                result = exponent2;\n              }\n              temp9 = __subdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp9,\n                                (int)((ulonglong)temp9 >> 0x20));\n              temp9 = __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                                (int)((ulonglong)temp9 >> 0x20));\n              if ((specialNumType - 1 | exponent1) == 0) {\n                exponent = 0xbff00000;\n              }\n              else {\n                exponent = 0x3ff00000;\n              }\n              specialNumType = 0;\n              temp8 = __subdf3(operand1,operand2,0,operand2);\n              temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,result);\n              temp9 = __muldf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),operand1,operand2);\n              temp9 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                                    (int)((ulonglong)temp9 >> 0x20));\n              temp7 = (undefined4)((ulonglong)temp9 >> 0x20);\n              significand1 = (undefined4)temp9;\n              temp9 = __muldf3(0,result,0,operand2);\n              temp1 = (undefined4)((ulonglong)temp9 >> 0x20);\n              temp6 = (undefined4)temp9;\n              temp12 = __aeabi_dadd(significand1,temp7,temp6,temp1);\n              exponentialSignificand = (uint)((ulonglong)temp12 >> 0x20);\n              result = (uint)temp12;\n              if (0x408fffffffffffff < temp12) {\n                if ((exponentialSignificand + 0xbf700000 | result) == 0) {\n                  temp8 = __aeabi_dadd(significand1,temp7,0x652b82fe,0x3c971547);\n                  temp10 = __subdf3(result,exponentialSignificand,temp6,temp1);\n                  power = __aeabi_dcmpgt((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp10,\n                                         (int)((ulonglong)temp10 >> 0x20));\n                  if (power == 0) goto LAB_08006968;\n                }\n                temp9 = __muldf3(0,exponent,0x8800759c,0x7e37e43c);\n                significand = 0x8800759c;\n                exponent = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((exponentialSignificand & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((exponentialSignificand & 0x7fffffff) < 0x3fe00001) {\n                  power = 0;\n                }\n                else {\n                  exponentialSignificand = (0x100000 >> (((int)(exponentialSignificand & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          exponentialSignificand;\n                  result = (exponentialSignificand * 2 >> 0x15) - 0x3ff;\n                  power = (int)(exponentialSignificand & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (temp12 < 0) {\n                    power = -power;\n                  }\n                  temp9 = __subdf3(temp6,temp1,0,exponentialSignificand & ~(0xfffff >> (result & 0xff)));\n                }\n                specialNumTemp2 = (undefined4)((ulonglong)temp9 >> 0x20);\n                specialNumTemp1 = (undefined4)temp9;\n                __aeabi_dadd(specialNumTemp1,specialNumTemp2,significand1,temp7);\n                temp9 = __muldf3(0,extra4,0,0x3fe62e43);\n                temp6 = (undefined4)((ulonglong)temp9 >> 0x20);\n                temp8 = __subdf3(0,extra4,specialNumTemp1,specialNumTemp2);\n                temp8 = __subdf3(significand1,temp7,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xfefa39ef,0x3fe62e42\n                                 );\n                temp10 = __muldf3(0,extra4,0xca86c39,0xbe205c61);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp7 = (undefined4)((ulonglong)temp8 >> 0x20);\n                temp10 = __aeabi_dadd((int)temp9,temp6,(int)temp8,temp7);\n                temp1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                significand1 = (undefined4)temp10;\n                temp9 = __subdf3(significand1,temp1,(int)temp9,temp6);\n                temp9 = __subdf3((int)temp8,temp7,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n                temp7 = (undefined4)((ulonglong)temp9 >> 0x20);\n                temp8 = __muldf3(significand1,temp1,significand1,temp1);\n                temp2 = (undefined4)((ulonglong)temp8 >> 0x20);\n                temp6 = (undefined4)temp8;\n                temp8 = __muldf3(temp6,temp2,0x72bea4d0,0x3e663769);\n                temp8 = __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xc5d26bf1,0x3ebbbd41\n                                 );\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp6,temp2);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp6,temp2);\n                temp8 = __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x16bebd93,0x3f66c16c\n                                 );\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp6,temp2);\n                temp8 = __aeabi_dadd((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp8 = __muldf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),temp6,temp2);\n                temp8 = __subdf3(significand1,temp1,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                temp6 = (undefined4)((ulonglong)temp8 >> 0x20);\n                temp10 = __muldf3(significand1,temp1,(int)temp8,temp6);\n                temp8 = __subdf3((int)temp8,temp6,0,0x40000000);\n                temp8 = __divdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp8,\n                                  (int)((ulonglong)temp8 >> 0x20));\n                temp10 = __muldf3(significand1,temp1,(int)temp9,temp7);\n                temp9 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,\n                                      temp7);\n                temp9 = __subdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                                  (int)((ulonglong)temp9 >> 0x20));\n                temp9 = __subdf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),significand1,temp1);\n                temp8 = __subdf3(0,0x3ff00000,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n                powerIndex = (int)((ulonglong)temp8 >> 0x20);\n                temp5 = powerIndex + power * 0x100000;\n                temp9 = CONCAT44(temp5,(int)temp8);\n                significand = specialNumType;\n                if (temp5 < 0x100000) {\n                  temp9 = scalbn((int)temp8,powerIndex,power);\n                }\n              }\n              else {\n                if ((exponentialSignificand + 0x3f6f3400 | result) == 0) {\n                  temp8 = __subdf3(result,exponentialSignificand,temp6,temp1);\n                  power = __aeabi_dcmple(significand1,temp7,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n                  if (power == 0) goto LAB_08006968;\n                }\n                temp9 = __muldf3(0,exponent,0xc2f8f359,0x1a56e1f);\n                significand = 0xc2f8f359;\n                exponent = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = __muldf3((int)temp9,(int)((ulonglong)temp9 >> 0x20),significand,exponent);\n              return result;\n            }\n          }\n          significand1 = (undefined4)((ulonglong)temp8 >> 0x20);\n          temp8 = __subdf3((int)temp8,significand1,(int)temp8,significand1);\n          temp9 = temp8;\nLAB_08006320:\n          result = __divdf3((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                            (int)((ulonglong)temp9 >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((exponentialSignificand + 0xc0100000 | significand) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = nan(&DAT_0800737e);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "significand",
                "param_2": "exponent",
                "param_3": "operand1",
                "param_4": "operand2",
                "uVar1": "significand1",
                "uVar2": "exponent1",
                "extraout_r1": "exponent2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "extraout_r1_00": "extra1",
                "extraout_r1_01": "extra2",
                "extraout_r1_02": "extra3",
                "extraout_r1_03": "extra4",
                "iVar5": "power",
                "iVar6": "powerIndex",
                "uVar7": "temp3",
                "uVar8": "exponentialSignificand",
                "uVar9": "temp4",
                "iVar10": "temp5",
                "uVar11": "result",
                "uVar12": "temp6",
                "uVar13": "temp7",
                "uVar14": "temp8",
                "uVar15": "temp9",
                "uVar16": "temp10",
                "uVar17": "temp11",
                "lVar18": "temp12",
                "uVar19": "temp13",
                "uVar20": "temp14",
                "local_70": "specialNumType",
                "local_68": "specialNumTemp1",
                "local_64": "specialNumTemp2",
                "local_54": "powerFlag"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan",
                "scalbn",
                "__aeabi_dadd",
                "__muldf3",
                "__aeabi_dcmple",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_sum_08006c0c",
            "code": "\nundefined8 calculate_float_sum_08006c0c(uint multiplier,uint operand)\n\n{\n  undefined4 float_sum;\n  uint temp_var1;\n  int shift_amount;\n  int loop_counter;\n  uint temp_var2;\n  uint temp_var3;\n  int sum_bits;\n  uint result_bits;\n  uint mask;\n  int inner_loop_counter;\n  uint inner_sum;\n  undefined8 result;\n  \n  if ((~operand & 0x7ff00000) == 0) {\n    result = __muldf3(multiplier,operand,multiplier,operand);\n    result = __aeabi_dadd(multiplier,operand,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)operand < 1) {\n    if ((operand & 0x7fffffff | multiplier) == 0) {\n      return CONCAT44(operand,multiplier);\n    }\n    if (operand != 0) {\n      result = __subdf3(multiplier,operand,multiplier,operand);\n      float_sum = (undefined4)((ulonglong)result >> 0x20);\n      result = __divdf3((int)result,float_sum,(int)result,float_sum);\n      return result;\n    }\n  }\n  shift_amount = (int)operand >> 0x14;\n  if (shift_amount == 0) {\n    while (operand == 0) {\n      shift_amount = shift_amount + -0x15;\n      operand = multiplier >> 0xb;\n      multiplier = multiplier << 0x15;\n    }\n    temp_var1 = 0;\n    for (; -1 < (int)(operand << 0xb); operand = operand << 1) {\n      temp_var1 = temp_var1 + 1;\n    }\n    shift_amount = shift_amount - (temp_var1 - 1);\n    operand = operand | multiplier >> (0x20 - temp_var1 & 0xff);\n    multiplier = multiplier << (temp_var1 & 0xff);\n  }\n  sum_bits = 0;\n  temp_var1 = operand & 0xfffff | 0x100000;\n  if ((shift_amount + -0x3ff) * -0x80000000 < 0) {\n    temp_var1 = temp_var1 * 2 - ((int)multiplier >> 0x1f);\n    multiplier = multiplier << 1;\n  }\n  temp_var1 = temp_var1 * 2 - ((int)multiplier >> 0x1f);\n  loop_counter = 0x16;\n  temp_var2 = 0;\n  result_bits = 0x200000;\n  multiplier = multiplier << 1;\n  do {\n    inner_loop_counter = temp_var2 + result_bits;\n    if (inner_loop_counter <= (int)temp_var1) {\n      temp_var1 = temp_var1 - inner_loop_counter;\n      temp_var2 = inner_loop_counter + result_bits;\n      sum_bits = sum_bits + result_bits;\n    }\n    loop_counter = loop_counter + -1;\n    temp_var1 = temp_var1 * 2 - ((int)multiplier >> 0x1f);\n    result_bits = result_bits >> 1;\n    multiplier = multiplier << 1;\n  } while (loop_counter != 0);\n  inner_loop_counter = 0x20;\n  mask = 0x80000000;\n  result_bits = 0;\n  loop_counter = 0;\n  do {\n    inner_sum = mask + loop_counter;\n    temp_var3 = temp_var2;\n    if (((int)temp_var2 < (int)temp_var1) || ((temp_var1 == temp_var2 && (inner_sum <= multiplier)))) {\n      loop_counter = inner_sum + mask;\n      if (((int)inner_sum < 0) && (-1 < loop_counter)) {\n        temp_var3 = temp_var2 + 1;\n      }\n      temp_var1 = temp_var1 - temp_var2;\n      if (multiplier < inner_sum) {\n        temp_var1 = temp_var1 - 1;\n      }\n      multiplier = multiplier - inner_sum;\n      result_bits = result_bits + mask;\n    }\n    temp_var1 = temp_var1 * 2 - ((int)multiplier >> 0x1f);\n    inner_loop_counter = inner_loop_counter + -1;\n    multiplier = multiplier << 1;\n    mask = mask >> 1;\n    temp_var2 = temp_var3;\n  } while (inner_loop_counter != 0);\n  if ((multiplier | temp_var1) != 0) {\n    if (result_bits == 0xffffffff) {\n      sum_bits = sum_bits + 1;\n      result_bits = 0;\n    }\n    else {\n      result_bits = result_bits + 1 & 0xfffffffe;\n    }\n  }\n  result_bits = result_bits >> 1;\n  if (sum_bits << 0x1f < 0) {\n    result_bits = result_bits | 0x80000000;\n  }\n  return CONCAT44((sum_bits >> 1) + 0x3fe00000 + (shift_amount + -0x3ff >> 1) * 0x100000,result_bits);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_sum_08006c0c",
                "param_1": "multiplier",
                "param_2": "operand",
                "uVar1": "float_sum",
                "uVar2": "temp_var1",
                "iVar3": "shift_amount",
                "iVar4": "loop_counter",
                "uVar5": "temp_var2",
                "uVar6": "temp_var3",
                "iVar7": "sum_bits",
                "uVar8": "result_bits",
                "uVar9": "mask",
                "iVar10": "inner_loop_counter",
                "uVar11": "inner_sum",
                "uVar12": "result"
            },
            "calling": [
                "sqrt",
                "__ieee754_pow",
                "__ieee754_asin"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_square_root_08006d68",
            "code": "\nundefined8 calculate_square_root_08006d68(int input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int comparison_result;\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  undefined4 temp_var_3;\n  undefined4 temp_var_4;\n  undefined4 temp_var_5;\n  undefined4 temp_var_6;\n  uint absolute_input_2;\n  undefined8 result;\n  undefined8 temp_result;\n  \n  result = CONCAT44(input_2,input_1);\n  absolute_input_2 = input_2 & 0x7fffffff;\n  if (absolute_input_2 < 0x44100000) {\n    if (absolute_input_2 < 0x3fdc0000) {\n      if (absolute_input_2 < 0x3e200000) {\n        temp_result = __aeabi_dadd(input_1,input_2,0x8800759c,0x7e37e43c,input_4);\n        comparison_result = __aeabi_dcmpgt((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (comparison_result != 0) {\n          return result;\n        }\n      }\n      comparison_result = -1;\n    }\n    else {\n      result = fabs();\n      temp_var_2 = (undefined4)((ulonglong)result >> 0x20);\n      temp_var_1 = (undefined4)result;\n      if (absolute_input_2 < 0x3ff30000) {\n        if (absolute_input_2 < 0x3fe60000) {\n          result = __aeabi_dadd(temp_var_1,temp_var_2,temp_var_1,temp_var_2);\n          result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000);\n          temp_result = __aeabi_dadd(temp_var_1,temp_var_2,0,0x40000000);\n          result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                           (int)((ulonglong)temp_result >> 0x20));\n          comparison_result = 0;\n        }\n        else {\n          result = __subdf3(temp_var_1,temp_var_2,0,0x3ff00000);\n          temp_result = __aeabi_dadd(temp_var_1,temp_var_2,0,0x3ff00000);\n          result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                           (int)((ulonglong)temp_result >> 0x20));\n          comparison_result = 1;\n        }\n      }\n      else if (absolute_input_2 < 0x40038000) {\n        result = __subdf3(temp_var_1,temp_var_2,0,0x3ff80000);\n        temp_result = __muldf3(temp_var_1,temp_var_2,0,0x3ff80000);\n        temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n        comparison_result = 2;\n      }\n      else {\n        result = __divdf3(0,0xbff00000,temp_var_1,temp_var_2);\n        comparison_result = 3;\n      }\n    }\n    temp_var_6 = (undefined4)((ulonglong)result >> 0x20);\n    temp_var_5 = (undefined4)result;\n    result = __muldf3(temp_var_5,temp_var_6,temp_var_5,temp_var_6);\n    temp_var_3 = (undefined4)((ulonglong)result >> 0x20);\n    temp_var_1 = (undefined4)result;\n    result = __muldf3(temp_var_1,temp_var_3,temp_var_1,temp_var_3);\n    temp_var_4 = (undefined4)((ulonglong)result >> 0x20);\n    temp_var_2 = (undefined4)result;\n    result = __muldf3(temp_var_2,temp_var_4,0xe322da11,0x3f90ad3a);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x24760deb,0x3fa97b4b);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_2,temp_var_4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0xa0d03d51,0x3fb10d66);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_2,temp_var_4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0xc54c206e,0x3fb745cd);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_2,temp_var_4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x920083ff,0x3fc24924);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_2,temp_var_4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x5555550d,0x3fd55555);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_1,temp_var_3);\n    temp_var_1 = (undefined4)((ulonglong)result >> 0x20);\n    temp_result = __muldf3(temp_var_2,temp_var_4,0x2c6a6c2f,0xbfa2b444);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp_var_2,temp_var_4);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp_var_2,temp_var_4);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp_var_2,temp_var_4);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp_var_2,temp_var_4);\n    temp_var_2 = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (comparison_result == -1) {\n      result = __aeabi_dadd((int)result,temp_var_1,(int)temp_result,temp_var_2);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_6);\n      result = __subdf3(temp_var_5,temp_var_6,(int)result,(int)((ulonglong)result >> 0x20));\n    }\n    else {\n      result = __aeabi_dadd((int)result,temp_var_1,(int)temp_result,temp_var_2);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_6);\n      comparison_result = comparison_result * 8;\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),\n                       *(undefined4 *)(&UNK_08007410 + comparison_result),*(undefined4 *)(&UNK_08007414 + comparison_result)\n                      );\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_6);\n      result = __subdf3(*(undefined4 *)(&UNK_080073f0 + comparison_result),*(undefined4 *)(&UNK_080073f4 + comparison_result)\n                       ,(int)result,(int)((ulonglong)result >> 0x20));\n      if ((int)input_2 < 0) {\n        result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n      }\n    }\n  }\n  else if ((absolute_input_2 < 0x7ff00001) && ((absolute_input_2 != 0x7ff00000 || (input_1 == 0)))) {\n    if ((int)input_2 < 1) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result = __aeabi_dadd(input_1,input_2,input_1,input_2,input_4);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_square_root_08006d68",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "comparison_result",
                "uVar2": "temp_var_1",
                "uVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "uVar5": "temp_var_4",
                "uVar6": "temp_var_5",
                "uVar7": "temp_var_6",
                "uVar8": "absolute_input_2",
                "uVar9": "result",
                "uVar10": "temp_result"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "sign_extend_08007092",
            "code": "\nuint signExtend_08007092(undefined4 input1,uint input2)\n\n{\n  return (input2 | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "sign_extend_08007092",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_zero_0800709e",
            "code": "\nundefined4 initialize_zero_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_zero_0800709e"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "__ieee754_pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_square_root_080070b0",
            "code": "\nundefined8 calculateSquareRoot_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int index;\n  undefined4 constant1;\n  uint temp1;\n  undefined4 constant2;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  undefined8 result;\n  \n  temp4 = (input2 << 1) >> 0x15;\n  temp3 = temp4 - 0x3ff;\n  temp1 = input2;\n  if ((int)temp3 < 0x14) {\n    if ((int)temp3 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      temp1 = input2 & 0xfffff | input1;\n      index = ((int)input2 >> 0x1f) * -8;\n      constant1 = *(undefined4 *)(&DAT_08007430 + index);\n      constant2 = *(undefined4 *)(&DAT_08007434 + index);\n      result = __aeabi_dadd(input1,(-temp1 | temp1) >> 0xc & 0x80000 | input2 & 0xfffe0000,constant1,\n                           constant2,input1,input2,input3);\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),constant1,constant2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    temp4 = 0xfffff >> (temp3 & 0xff);\n    if ((input2 & temp4 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    temp4 = temp4 >> 1;\n    temp2 = input2 & temp4 | input1;\n    if (temp2 != 0) {\n      if (temp3 == 0x13) {\n        temp2 = 0x80000000;\n      }\n      else {\n        temp2 = 0;\n      }\n      temp1 = 0x40000 >> (temp3 & 0xff) | input2 & ~temp4;\n    }\n  }\n  else {\n    if (0x33 < (int)temp3) {\n      if (temp3 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = __aeabi_dadd();\n      return result;\n    }\n    temp4 = temp4 - 0x413;\n    temp3 = 0xffffffff >> (temp4 & 0xff);\n    if ((input1 & temp3) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    temp3 = temp3 >> 1;\n    temp2 = input1;\n    if ((input1 & temp3) != 0) {\n      temp2 = 0x40000000 >> (temp4 & 0xff) | input1 & ~temp3;\n    }\n  }\n  index = ((int)input2 >> 0x1f) * -8;\n  constant1 = *(undefined4 *)(&DAT_08007430 + index);\n  constant2 = *(undefined4 *)(&DAT_08007434 + index);\n  result = __aeabi_dadd(temp2,temp1,constant1,constant2,input1,input2,input3);\n  result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),constant1,constant2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_square_root_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar2": "constant1",
                "uVar3": "temp1",
                "uVar4": "constant2",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "iVar1": "index",
                "uVar8": "result"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_exponent_080071c0",
            "code": "\nundefined8 calculateExponent_080071c0(uint number1,uint number2,int exponent,undefined4 roundingMode)\n\n{\n  uint tempVar1;\n  undefined4 tempVar2;\n  int tempVar3;\n  undefined4 tempVar4;\n  uint tempVar5;\n  undefined8 result;\n  \n  result = CONCAT44(number2,number1);\n  tempVar1 = (number2 << 1) >> 0x15;\n  if (tempVar1 == 0) {\n    if ((number2 & 0x7fffffff | number1) == 0) {\n      return result;\n    }\n    result = __muldf3(number1,number2,0,0x43500000);\n    if (-0xc351 < exponent) {\n      tempVar1 = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    tempVar2 = 0xc2f8f359;\n    tempVar4 = 0x1a56e1f;\n  }\n  else {\n    if (tempVar1 == 0x7ff) {\n      result = __aeabi_dadd(number1,number2,number1,number2,roundingMode);\n      return result;\n    }\nLAB_08007210:\n    tempVar5 = (uint)((ulonglong)result >> 0x20);\n    tempVar2 = (undefined4)result;\n    tempVar3 = tempVar1 + exponent;\n    if (tempVar3 < 0x7ff) {\n      if (0 < tempVar3) {\n        return CONCAT44(tempVar5 & 0x800fffff | tempVar3 * 0x100000,tempVar2);\n      }\n      if (tempVar3 + 0x35 < 0 == SCARRY4(tempVar3,0x35)) {\n        result = CONCAT44(tempVar5 & 0x800fffff | (tempVar3 + 0x36) * 0x100000,tempVar2);\n        tempVar2 = 0;\n        tempVar4 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (exponent < 0xc351) {\n        result = copysign(0xc2f8f359,0x1a56e1f,tempVar2,tempVar5);\n        goto LAB_080071ec;\n      }\n    }\n    result = copysign(0x8800759c,0x7e37e43c,tempVar2,tempVar5);\n    tempVar2 = 0x8800759c;\n    tempVar4 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),tempVar2,tempVar4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_exponent_080071c0",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "exponent",
                "param_4": "roundingMode",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "iVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "result"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "copysign",
                "__muldf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "scalbn"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_data_pointer_080072b8",
            "code": "\nvoid updateDataPointer_080072b8(int value)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_data_pointer_080072b8",
                "param_1": "value"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array",
                "frame_dummy"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 151975,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "FUN_08004f68",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724"
        ]
    ],
    "locked_functions": []
}