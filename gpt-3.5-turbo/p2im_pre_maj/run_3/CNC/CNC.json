{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 input)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_params_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_params_080001ac(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  return CONCAT44(input_param_2,input_param_1);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_params_080001ac",
                "param_1": "input_param_1",
                "param_2": "input_param_2"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_main_components_080001f8",
            "code": "\nvoid initialize_main_components_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_components_08000210();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_main_components_080001f8"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_components_08000210",
            "code": "\nvoid initialize_components_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_components_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "process_data_08000220",
            "code": "\nvoid processData_08000220(char data)\n\n{\n  if (data != DAT_20000468) {\n    checkValidData();\n    if (data == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = data;\n    }\n    else if (data == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = data;\n    }\n    else {\n      initializeComponents();\n      DAT_20000468 = data;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "process_data_08000220",
                "param_1": "data",
                "check_valid_data_08002fd4": "checkValidData",
                "initialize_components_08000210": "initializeComponents"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_adjusted_value_08000268",
            "code": "\n\n\nint calculateAdjustedValue_08000268(void)\n\n{\n  int dataValue;\n  \n  dataValue = getData();\n  return (dataValue + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_adjusted_value_08000268",
                "iVar1": "dataValue",
                "get_data_08005a84": "getData"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "wait_for_data_080002a0",
            "code": "\nvoid waitForData_080002a0(undefined4 data)\n\n{\n  waitForData_080002a0_08005a98(data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "wait_for_data_080002a0",
                "param_1": "data",
                "wait_for_data_08005a98": "waitForData_08005a98"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "find_adjusted_value_080002b6",
            "code": "\nvoid findAdjustedValue_080002b6(uint input)\n\n{\n  uint adjustedValueUpperBits;\n  uint adjustedValueComparison;\n  bool comparisonResult;\n  longlong adjustedValue;\n  undefined8 currentAdjustedValue;\n  \n  adjustedValue = calculate_adjusted_value_08000268();\n  adjustedValueComparison = (uint)(adjustedValue + (ulonglong)input >> 0x20);\n  do {\n    currentAdjustedValue = calculate_adjusted_value_08000268();\n    adjustedValueUpperBits = (uint)((ulonglong)currentAdjustedValue >> 0x20);\n    comparisonResult = adjustedValueComparison <= adjustedValueUpperBits;\n    if (adjustedValueUpperBits == adjustedValueComparison) {\n      comparisonResult = (uint)(adjustedValue + (ulonglong)input) <= (uint)currentAdjustedValue;\n    }\n  } while (!comparisonResult);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "find_adjusted_value_080002b6",
                "param_1": "input",
                "uVar1": "adjustedValueUpperBits",
                "uVar2": "adjustedValueComparison",
                "bVar3": "comparisonResult",
                "lVar4": "adjustedValue",
                "uVar5": "currentAdjustedValue"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_data_080002f0",
            "code": "\nvoid initializeData_080002f0(void)\n\n{\n  fill_with_byte_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_data_value_08000310",
            "code": "\nundefined get_data_value_08000310(uint input_value)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_data();\n  }\n  return (&DAT_20000470)[input_value & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_data_value_08000310",
                "param_1": "input_value",
                "initialize_data_080002f0": "initialize_data"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_08000340",
            "code": "\nvoid storeData_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeData();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "value",
                "initialize_data_080002f0": "initializeData"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "update_and_store_data_08000374",
            "code": "\nvoid updateAndStoreData_08000374(int oldData,char *inputData,int inputLength)\n\n{\n  int remainingLength;\n  char *currentInputChar;\n  int currentDataIndex;\n  char checksum;\n  \n  checksum = '\\0';\n  remainingLength = inputLength;\n  currentInputChar = inputData;\n  currentDataIndex = oldData;\n  if (DAT_2000046c == 0) {\n    initialize_data_080002f0();\n    currentInputChar = inputData;\n    currentDataIndex = oldData;\n  }\n  for (; remainingLength != 0; remainingLength = remainingLength + -1) {\n    checksum = (checksum != '\\0') + *currentInputChar;\n    store_data_08000340(currentDataIndex,*currentInputChar);\n    currentInputChar = currentInputChar + 1;\n    currentDataIndex = currentDataIndex + 1;\n  }\n  store_data_08000340(currentDataIndex,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "update_and_store_data_08000374",
                "param_1": "oldData",
                "param_2": "inputData",
                "param_3": "inputLength",
                "local_1c": "remainingLength",
                "local_18": "currentInputChar",
                "local_14": "currentDataIndex",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_data_080003ec",
            "code": "\nbool check_data_080003ec(char *data,int start_index,int length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remaining_length;\n  int current_index;\n  char *current_ptr;\n  byte sum;\n  \n  sum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_ptr = data;\n  if (DAT_2000046c == 0) {\n    initialize_data_080002f0();\n    current_index = start_index;\n    current_ptr = data;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    cVar1 = get_data_value_08000310(current_index);\n    sum = cVar1 + (sum != 0);\n    *current_ptr = cVar1;\n    current_index = current_index + 1;\n    current_ptr = current_ptr + 1;\n  }\n  uVar2 = get_data_value_08000310(current_index);\n  return sum == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_data_080003ec",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_ptr",
                "local_9": "sum"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_data_08000478",
            "code": "\nvoid initializeData_08000478(undefined data1,undefined data2,undefined data3)\n\n{\n  DAT_20000e89 = data1;\n  DAT_20000e8a = data2;\n  DAT_20000e8b = data3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_data_08000478",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_and_check_data_080004ac",
            "code": "\nvoid initialize_and_check_data_080004ac(void)\n\n{\n  int result;\n  \n  fill_buffer(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initialize_data(0,1,2);\n  DAT_20000e74 = 1;\n  result = check_and_update_data(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    display_error_message(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_and_check_data_080004ac",
                "iVar1": "result",
                "fill_with_byte_0800b430": "fill_buffer",
                "initialize_data_08000478": "initialize_data",
                "check_and_update_data_08004d7c": "check_and_update_data",
                "display_error_message_08004030": "display_error_message"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_floating_points_080004fc",
            "code": "\nvoid calculate_floating_points_080004fc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 bit_count_1;\n  \n  bit_count_1 = count_bits_and_manipulate_08008e44(input_1);\n  DAT_20000e7c = calculate_floating_point_08009054(bit_count_1,DAT_20000ebc);\n  bit_count_1 = count_bits_and_manipulate_08008e44(input_2);\n  DAT_20000e80 = calculate_floating_point_08009054(bit_count_1,DAT_20000ec0);\n  bit_count_1 = count_bits_and_manipulate_08008e44(input_3);\n  DAT_20000e84 = calculate_floating_point_08009054(bit_count_1,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_floating_points_080004fc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "bit_count_1"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "calculate_offset_0800056c",
            "code": "\nundefined4 calculate_offset_0800056c(undefined4 input)\n\n{\n  undefined8 expanded_bits;\n  \n  if (DAT_20000e73 != '\\0') {\n    expanded_bits = expand_bits(input);\n    expanded_bits = calculate_hash((int)expanded_bits,(int)((ulonglong)expanded_bits >> 0x20),0x66666666,0x40396666);\n    input = calculate_float_offset((int)expanded_bits,(int)((ulonglong)expanded_bits >> 0x20));\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "calculate_offset_0800056c",
                "param_1": "input",
                "uVar1": "expanded_bits",
                "expand_bits_08008590": "expand_bits",
                "calculate_hash_08008640": "calculate_hash",
                "calculate_float_offset_08008c30": "calculate_float_offset"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_binary_code_080005b4",
            "code": "\nchar processBinaryCode_080005b4(undefined4 input_parameter)\n\n{\n  int temp_variable1;\n  undefined4 temp_variable2;\n  char result_char;\n  uint temp_variable3;\n  undefined4 temp_variable4;\n  undefined8 temp_variable5;\n  undefined8 temp_variable6;\n  undefined8 temp_variable7;\n  undefined4 array1 [4];\n  undefined4 temp_variable8;\n  undefined4 temp_variable9;\n  undefined4 temp_variable10;\n  undefined4 temp_variable11;\n  undefined4 temp_variable12;\n  undefined4 array2 [6];\n  undefined4 temp_variable13;\n  byte current_byte;\n  undefined temp_variable14;\n  undefined4 temp_variable15;\n  undefined4 temp_variable16;\n  undefined temp_variable17;\n  uint temp_variable18;\n  byte temp_variable19;\n  byte temp_variable20;\n  byte temp_variable21;\n  byte temp_variable22;\n  char temp_variable23;\n  uint temp_variable24;\n  undefined4 temp_variable25;\n  sbyte temp_variable26;\n  char temp_variable27;\n  char temp_variable28;\n  undefined4 temp_variable29;\n  byte temp_variable30;\n  ushort temp_variable31;\n  uint temp_variable32;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    result_char = '\\f';\n  }\n  else {\n    temp_variable14 = 0;\n    temp_variable31 = 0;\n    temp_variable30 = 0;\n    temp_variable29 = 0xbf800000;\n    temp_variable28 = '\\0';\n    temp_variable27 = '\\0';\n    fill_with_byte_0800b430(array2 + 3,0,0xc);\n    fill_with_byte_0800b430(array2,0,0xc);\n    DAT_20000e70 = '\\0';\n    temp_variable26 = 0;\n    while (temp_variable1 = check_and_update_character_0800184c(&current_byte,array2 + 6,input_parameter,&temp_variable14), temp_variable1 != 0) {\n      temp_variable5 = expand_bits_08008590(temp_variable13);\n      temp_variable5 = calculate_shifted_value_08009798((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n      temp_variable32 = calculate_result_08008ba0((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n      if (current_byte == 0x47) {\n        switch(temp_variable32) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          temp_variable26 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          temp_variable26 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          temp_variable26 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          temp_variable26 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          temp_variable26 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          temp_variable26 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          temp_variable26 = 6;\n        }\n        switch(temp_variable32) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          temp_variable27 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          temp_variable27 = '\\x02';\n          break;\n        case 0x11:\n          initialize_data_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_data_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_data_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp_variable2 = calculate_floating_point_value_08008eec(temp_variable13,0x41200000);\n          temp_variable5 = expand_bits_08008590(temp_variable2);\n          temp_variable5 = calculate_shifted_value_08009798((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          temp_variable32 = calculate_result_08008ba0((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          switch(temp_variable32) {\n          case 0x118:\n            temp_variable27 = '\\x03';\n            break;\n          case 0x119:\n            temp_variable27 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            temp_variable27 = '\\x05';\n            break;\n          case 0x12d:\n            temp_variable27 = '\\x06';\n          }\n          break;\n        case 0x35:\n          temp_variable28 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)temp_variable32 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp_variable2 = calculate_floating_point_value_08008eec(temp_variable13,0x41200000);\n          temp_variable5 = expand_bits_08008590(temp_variable2);\n          temp_variable5 = calculate_shifted_value_08009798((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          temp_variable32 = calculate_result_08008ba0((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          if (temp_variable32 == 0x398) {\n            temp_variable27 = '\\a';\n          }\n          else if (temp_variable32 == 0x399) {\n            temp_variable27 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (current_byte == 0x4d) {\n        if (temp_variable32 == 0x1e) {\nLAB_08000b96:\n          temp_variable26 = 5;\n        }\n        else if ((int)temp_variable32 < 0x1f) {\n          if ((int)temp_variable32 < 3) {\n            if (-1 < (int)temp_variable32) goto LAB_08000b96;\n          }\n          else if (temp_variable32 - 3 < 3) {\n            temp_variable26 = 8;\n          }\n        }\n        switch(temp_variable32) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (temp_variable26 != 0) {\n        if (((int)(uint)temp_variable31 >> temp_variable26 & 1U) == 0) {\n          temp_variable31 = temp_variable31 | (ushort)(1 << temp_variable26);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        temp_variable26 = 0;\n      }\n    }\n    result_char = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      temp_variable25 = 0;\n      temp_variable24 = 0;\n      temp_variable23 = '\\0';\n      temp_variable14 = 0;\nswitchD_08000d18_caseD_47:\n      temp_variable1 = check_and_update_character_0800184c(&current_byte,array2 + 6,input_parameter,&temp_variable14);\n      if (temp_variable1 != 0) {\n        switch(current_byte) {\n        case 0x46:\n          temp_variable1 = check_concatenation_result_0800923c(temp_variable13,0);\n          if (temp_variable1 != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = calculate_offset_0800056c(temp_variable13);\n          }\n          else {\n            temp_variable29 = calculate_offset_0800056c(temp_variable13);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_variable3 = (uint)current_byte;\n          temp_variable2 = calculate_offset_0800056c(temp_variable13);\n          array2[temp_variable3 - 0x49] = temp_variable2;\n          break;\n        case 0x4c:\n          temp_variable5 = expand_bits_08008590(temp_variable13);\n          temp_variable5 = calculate_shifted_value_08009798((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          temp_variable23 = check_and_adjust_values_08008bf0((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          break;\n        case 0x50:\n          temp_variable25 = temp_variable13;\n          break;\n        case 0x52:\n          temp_variable24 = calculate_offset_0800056c(temp_variable13);\n          break;\n        case 0x53:\n          temp_variable1 = check_if_concatenation_empty_08009228(temp_variable13,0);\n          if (temp_variable1 != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          temp_variable1 = check_if_concatenation_empty_08009228(temp_variable13,0);\n          if (temp_variable1 != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp_variable5 = expand_bits_08008590(temp_variable13);\n          temp_variable5 = calculate_shifted_value_08009798((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          DAT_20000e88 = check_and_adjust_values_08008bf0((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          break;\n        case 0x58:\n          array2[3] = calculate_offset_0800056c(temp_variable13);\n          temp_variable30 = temp_variable30 | 1;\n          break;\n        case 0x59:\n          array2[4] = calculate_offset_0800056c(temp_variable13);\n          temp_variable30 = temp_variable30 | 2;\n          break;\n        case 0x5a:\n          array2[5] = calculate_offset_0800056c(temp_variable13);\n          temp_variable30 = temp_variable30 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      result_char = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          execute_function_0800525c((int)DAT_20000e76);\n          process_data_08000220(DAT_20000e77);\n        }\n        if ((temp_variable31 & 0x200) != 0) {\n          temp_variable1 = check_and_update_data_08004d7c(DAT_20000e8c,&temp_variable10);\n          if (temp_variable1 == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = temp_variable10;\n          DAT_20000e94 = temp_variable11;\n          DAT_20000e98 = temp_variable12;\n        }\n        switch(temp_variable27) {\n        case '\\x01':\n          temp_variable1 = check_if_concatenation_empty_08009228(temp_variable25,0);\n          if (temp_variable1 == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_08002408(temp_variable25);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp_variable5 = expand_bits_08008590(temp_variable25);\n          temp_variable5 = calculate_shifted_value_08009798((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          temp_variable32 = calculate_result_08008ba0((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n          if ((((temp_variable23 == '\\x02') || (temp_variable23 == '\\x14')) && (-1 < (int)temp_variable32)) &&\n             ((int)temp_variable32 < 7)) {\n            if ((temp_variable30 == 0) && (temp_variable23 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)temp_variable32 < 1) {\n                temp_variable32 = (uint)DAT_20000e8c;\n              }\n              else {\n                temp_variable32 = temp_variable32 - 1;\n              }\n              temp_variable1 = check_and_update_data_08004d7c(temp_variable32 & 0xff,array1);\n              if (temp_variable1 == 0) {\n                return '\\n';\n              }\n              for (temp_variable22 = 0; temp_variable22 < 3; temp_variable22 = temp_variable22 + 1) {\n                if (((int)(uint)temp_variable30 >> temp_variable22 & 1U) != 0) {\n                  if (temp_variable23 == '\\x14') {\n                    temp_variable3 = (uint)temp_variable22;\n                    temp_variable2 = calculate_pseudo_float_08008cd8(*(undefined4 *)(&DAT_20000e74 + (temp_variable22 + 2) * 4),\n                                         array2[temp_variable22 + 3]);\n                    array1[temp_variable3] = temp_variable2;\n                  }\n                  else {\n                    array1[temp_variable22] = array2[temp_variable22 + 3];\n                  }\n                }\n              }\n              update_data_and_store_08004bf4(temp_variable32 & 0xff,array1);\n              if (temp_variable32 == DAT_20000e8c) {\n                DAT_20000e90 = array1[0];\n                DAT_20000e94 = array1[1];\n                DAT_20000e98 = array1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          temp_variable30 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (temp_variable30 != 0) {\n            for (temp_variable21 = 0; temp_variable21 < 3; temp_variable21 = temp_variable21 + 1) {\n              if (((int)(uint)temp_variable30 >> temp_variable21 & 1U) == 0) {\n                array2[temp_variable21 + 3] = *(undefined4 *)(&DAT_20000e74 + (temp_variable21 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_variable3 = (uint)temp_variable21;\n                temp_variable2 = calculate_float_value_08008cdc(array2[temp_variable21 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (temp_variable21 + 2) * 4));\n                array2[temp_variable3 + 3] = temp_variable2;\n              }\n              else {\n                temp_variable4 = array2[temp_variable21 + 3];\n                temp_variable2 = calculate_float_value_08008cdc(*(undefined4 *)(&DAT_20000e70 + (temp_variable21 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (temp_variable21 + 10) * 4));\n                temp_variable3 = (uint)temp_variable21;\n                temp_variable2 = calculate_float_value_08008cdc(temp_variable4,temp_variable2);\n                array2[temp_variable3 + 3] = temp_variable2;\n              }\n            }\n            update_alarm_handler_08001e98(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n          }\n          if (temp_variable27 == '\\x05') {\n            temp_variable1 = check_and_update_data_08004d7c(7,array1 + 3);\n            if (temp_variable1 == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            temp_variable1 = check_and_update_data_08004d7c(6,array1 + 3);\n            if (temp_variable1 == 0) {\n              return '\\n';\n            }\n          }\n          update_alarm_handler_08001e98(array1[3],temp_variable8,temp_variable9,DAT_20000ed0,0);\n          DAT_20000e7c = array1[3];\n          DAT_20000e80 = temp_variable8;\n          DAT_20000e84 = temp_variable9;\n          temp_variable30 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (temp_variable27 == '\\x06') {\n            update_data_and_store_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            update_data_and_store_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (temp_variable30 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (temp_variable20 = 0; temp_variable20 < 3; temp_variable20 = temp_variable20 + 1) {\n              if (((int)(uint)temp_variable30 >> temp_variable20 & 1U) != 0) {\n                temp_variable2 = calculate_pseudo_float_08008cd8(*(undefined4 *)(&DAT_20000e74 + (temp_variable20 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (temp_variable20 + 8) * 4));\n                temp_variable3 = (uint)temp_variable20;\n                temp_variable2 = calculate_pseudo_float_08008cd8(temp_variable2,array2[temp_variable20 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_variable3 + 10) * 4) = temp_variable2;\n              }\n            }\n          }\n          temp_variable30 = 0;\n          break;\n        case '\\b':\n          fill_with_byte_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((temp_variable31 & 4) != 0) || (temp_variable30 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((temp_variable1 = check_if_concatenation_empty_08009228(temp_variable29,0), temp_variable1 != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((temp_variable28 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (temp_variable19 = 0; temp_variable19 < 3; temp_variable19 = temp_variable19 + 1) {\n            if (((int)(uint)temp_variable30 >> temp_variable19 & 1U) == 0) {\n              array2[temp_variable19 + 3] = *(undefined4 *)(&DAT_20000e74 + (temp_variable19 + 2) * 4);\n            }\n            else if (temp_variable28 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_variable3 = (uint)temp_variable19;\n                temp_variable2 = calculate_float_value_08008cdc(array2[temp_variable19 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (temp_variable19 + 2) * 4));\n                array2[temp_variable3 + 3] = temp_variable2;\n              }\n              else {\n                temp_variable4 = array2[temp_variable19 + 3];\n                temp_variable2 = calculate_float_value_08008cdc(*(undefined4 *)(&DAT_20000e70 + (temp_variable19 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (temp_variable19 + 10) * 4));\n                temp_variable3 = (uint)temp_variable19;\n                temp_variable2 = calculate_float_value_08008cdc(temp_variable4,temp_variable2);\n                array2[temp_variable3 + 3] = temp_variable2;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (temp_variable30 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              update_alarm_handler_08001e98(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (temp_variable30 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp_variable2 = temp_variable29;\n              if (DAT_20000e72 == '\\0') {\n                temp_variable2 = DAT_20000e78;\n              }\n              update_alarm_handler_08001e98(array2[3],array2[4],array2[5],temp_variable2,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            temp_variable30 = temp_variable30 & ~(byte)(1 << DAT_20000e8b);\n            if ((temp_variable30 == 0) ||\n               (((temp_variable1 = is_concatenation_successful_08009214(temp_variable24,0), temp_variable1 != 0 &&\n                 (temp_variable1 = is_concatenation_successful_08009214(array2[DAT_20000e89],0), temp_variable1 != 0)) &&\n                (temp_variable1 = is_concatenation_successful_08009214(array2[DAT_20000e8a],0), temp_variable1 != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp_variable1 = is_concatenation_successful_08009214(temp_variable24,0);\n              if (temp_variable1 == 0) {\n                temp_variable16 = calculate_pseudo_float_08008cd8(array2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                temp_variable15 = calculate_pseudo_float_08008cd8(array2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                fill_with_byte_0800b430(array2,0,0xc);\n                temp_variable2 = calculate_floating_point_value_08008eec(temp_variable24,0x40800000);\n                temp_variable2 = calculate_floating_point_value_08008eec(temp_variable2,temp_variable24);\n                temp_variable4 = calculate_floating_point_value_08008eec(temp_variable16,temp_variable16);\n                temp_variable2 = calculate_pseudo_float_08008cd8(temp_variable2,temp_variable4);\n                temp_variable4 = calculate_floating_point_value_08008eec(temp_variable15,temp_variable15);\n                temp_variable18 = calculate_pseudo_float_08008cd8(temp_variable2,temp_variable4);\n                temp_variable1 = check_if_concatenation_empty_08009228(temp_variable18,0);\n                if (temp_variable1 != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp_variable5 = expand_bits_08008590(temp_variable18);\n                temp_variable5 = process_data_080098d0((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n                temp_variable6 = expand_bits_08008590(temp_variable16);\n                temp_variable7 = expand_bits_08008590(temp_variable15);\n                temp_variable6 = calculate_and_initialize_0800981c((int)temp_variable6,(int)((ulonglong)temp_variable6 >> 0x20),(int)temp_variable7,\n                                     (int)((ulonglong)temp_variable7 >> 0x20));\n                temp_variable5 = convert_to_ieee754_08008894((int)temp_variable5,(uint)((ulonglong)temp_variable5 >> 0x20) ^ 0x80000000,\n                                     (int)temp_variable6,(int)((ulonglong)temp_variable6 >> 0x20));\n                temp_variable18 = calculate_float_offset_08008c30((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  temp_variable18 = temp_variable18 ^ 0x80000000;\n                }\n                temp_variable1 = check_if_concatenation_empty_08009228(temp_variable24,0);\n                if (temp_variable1 != 0) {\n                  temp_variable18 = temp_variable18 ^ 0x80000000;\n                  temp_variable24 = temp_variable24 ^ 0x80000000;\n                }\n                temp_variable2 = calculate_floating_point_value_08008eec(temp_variable15,temp_variable18);\n                temp_variable2 = calculate_pseudo_float_08008cd8(temp_variable16,temp_variable2);\n                temp_variable3 = (uint)DAT_20000e89;\n                temp_variable2 = calculate_floating_point_value_08008eec(temp_variable2,0x3f000000);\n                array2[temp_variable3] = temp_variable2;\n                temp_variable2 = calculate_floating_point_value_08008eec(temp_variable16,temp_variable18);\n                temp_variable2 = calculate_float_value_08008cdc(temp_variable2,temp_variable15);\n                temp_variable3 = (uint)DAT_20000e8a;\n                temp_variable2 = calculate_floating_point_value_08008eec(temp_variable2,0x3f000000);\n                array2[temp_variable3] = temp_variable2;\n              }\n              else {\n                temp_variable5 = expand_bits_08008590(array2[DAT_20000e89]);\n                temp_variable6 = expand_bits_08008590(array2[DAT_20000e8a]);\n                temp_variable5 = calculate_and_initialize_0800981c((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20),(int)temp_variable6,\n                                     (int)((ulonglong)temp_variable6 >> 0x20));\n                temp_variable24 = calculate_float_offset_08008c30((int)temp_variable5,(int)((ulonglong)temp_variable5 >> 0x20));\n              }\n              temp_variable17 = DAT_20000e71 == '\\x02';\n              temp_variable2 = temp_variable29;\n              if (DAT_20000e72 == '\\0') {\n                temp_variable2 = DAT_20000e78;\n              }\n              calculate_alarm_08001f00(&DAT_20000e7c,array2 + 3,array2,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp_variable2,DAT_20000e72,temp_variable24,temp_variable17);\n            }\n            break;\n          case '\\x04':\n            if (temp_variable30 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = array2[3];\n          DAT_20000e80 = array2[4];\n          DAT_20000e84 = array2[5];\n        }\n        result_char = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          check_valid_data_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_system_080025e8();\n            result_char = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            result_char = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return result_char;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_binary_code_080005b4",
                "param_1": "input_parameter",
                "iVar1": "temp_variable1",
                "uVar2": "temp_variable2",
                "cVar3": "result_char",
                "uVar4": "temp_variable3",
                "uVar5": "temp_variable4",
                "uVar6": "temp_variable5",
                "uVar7": "temp_variable6",
                "uVar8": "temp_variable7",
                "local_94": "array1",
                "local_84": "temp_variable8",
                "local_80": "temp_variable9",
                "local_7c": "temp_variable10",
                "uStack_78": "temp_variable11",
                "uStack_74": "temp_variable12",
                "auStack_70": "array2",
                "local_58": "temp_variable13",
                "local_52": "current_byte",
                "local_51": "temp_variable14",
                "local_50": "temp_variable15",
                "local_4c": "temp_variable16",
                "local_45": "temp_variable17",
                "local_44": "temp_variable18",
                "local_3d": "temp_variable19",
                "local_3c": "temp_variable20",
                "local_3b": "temp_variable21",
                "local_3a": "temp_variable22",
                "local_39": "temp_variable23",
                "local_38": "temp_variable24",
                "local_34": "temp_variable25",
                "local_2f": "temp_variable26",
                "local_2e": "temp_variable27",
                "local_2d": "temp_variable28",
                "local_2c": "temp_variable29",
                "local_27": "temp_variable30",
                "local_26": "temp_variable31",
                "local_24": "temp_variable32"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_update_character_0800184c",
            "code": "\nundefined4 checkAndUpdateCharacter_0800184c(byte *outputCharacter,undefined4 inputParameter,int baseAddress,byte *indexPointer)\n\n{\n  int integerResult;\n  undefined4 returnValue;\n  \n  if (*(char *)(baseAddress + (uint)*indexPointer) == '\\0') {\n    returnValue = 0;\n  }\n  else {\n    *outputCharacter = *(byte *)(baseAddress + (uint)*indexPointer);\n    if ((*outputCharacter < 0x41) || (0x5a < *outputCharacter)) {\n      DAT_20000e70 = 2;\n      returnValue = 0;\n    }\n    else {\n      *indexPointer = *indexPointer + 1;\n      integerResult = parse_integer_08002638(baseAddress,indexPointer,inputParameter);\n      if (integerResult == 0) {\n        DAT_20000e70 = 1;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 1;\n      }\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_update_character_0800184c",
                "param_1": "outputCharacter",
                "param_2": "inputParameter",
                "param_3": "baseAddress",
                "param_4": "indexPointer",
                "iVar1": "integerResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_data_080018cc",
            "code": "\n\n\nvoid updateData_080018cc(uint newData)\n\n{\n  _DAT_40021014 = newData | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_data_080018cc",
                "param_1": "newData"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_memory_value_080018fc",
            "code": "\n\n\nvoid updateMemoryValue_080018fc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_memory_value_080018fc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "extract_bit_from_value_0800192c",
            "code": "\nvoid extractBitFromValue_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "extract_bit_from_value_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_system_if_needed_0800195c",
            "code": "\nvoid initialize_system_if_needed_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_system_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_system_if_needed_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_values_08001994",
            "code": "\nvoid calculateValues_08001994(byte flag,char condition1,char condition2,undefined4 value)\n\n{\n  undefined4 result1;\n  uint result2;\n  undefined8 result3;\n  undefined8 result4;\n  byte byteVal;\n  uint var1;\n  uint var2;\n  uint var3;\n  ushort var4;\n  uint var5;\n  int var6;\n  undefined4 var7;\n  uint var8;\n  uint var9;\n  ushort var10;\n  uint var11;\n  uint var12;\n  int var13;\n  int var14;\n  int var15;\n  int var16;\n  ushort var17;\n  uint var18;\n  char charVal;\n  \n  charVal = '\\0';\n  fill_with_byte_0800b430(&var1,0,0xc);\n  if ((flag & 1) != 0) {\n    charVal = charVal + '\\x01';\n    result3 = expand_bits_08008590(DAT_20000ebc);\n    var1 = calculate_new_value_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((flag & 2) != 0) {\n    charVal = charVal + '\\x01';\n    result3 = expand_bits_08008590(DAT_20000ec0);\n    var2 = calculate_new_value_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  if ((flag & 4) != 0) {\n    charVal = charVal + '\\x01';\n    result3 = expand_bits_08008590(DAT_20000ec4);\n    var3 = calculate_new_value_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  }\n  result2 = var3;\n  if (var3 < var2) {\n    result2 = var2;\n  }\n  var8 = var1;\n  if (var1 < result2) {\n    var8 = result2;\n  }\n  result3 = decode_number_0800854c(var8);\n  result4 = decode_number_0800854c(charVal);\n  result4 = process_data_080098d0((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result3 = convert_to_ieee754_08008894((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  var7 = calculate_float_offset_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_floating_point_value_08008eec(DAT_20000edc,var7);\n  result1 = calculate_floating_point_08009054(result1,0x453b8000);\n  result3 = expand_bits_08008590(result1);\n  result3 = calculate_reversed_value_08009318((int)result3,(int)((ulonglong)result3 >> 0x20));\n  var6 = check_and_adjust_values_08008bf0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result3 = decode_number_0800854c(charVal);\n  result3 = process_data_080098d0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result4 = expand_bits_08008590(value);\n  result3 = calculate_hash_08008640((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result4,\n                       (int)((ulonglong)result4 >> 0x20));\n  result1 = calculate_float_offset_08008c30((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_floating_point_value_08008eec(var7,result1);\n  result1 = calculate_floating_point_08009054(0x4c64e1c0,result1);\n  result3 = expand_bits_08008590(result1);\n  var5 = calculate_new_value_080095b8((int)result3,(int)((ulonglong)result3 >> 0x20));\n  var18 = 75000;\n  if (var5 < 75000) {\n    var18 = var5;\n  }\n  var4 = DAT_20000ed4;\n  var17 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (condition1 == '\\0') {\n    var17 = var17 ^ 0xaa0;\n  }\n  update_memory_value_080018fc(var17);\n  update_data_080018cc(var4);\n  var14 = -(var8 >> 1);\n  var13 = var18 - DAT_20000ec9;\n  var12 = 0;\n  var11 = 10000;\n  byteVal = flag;\n  var15 = var14;\n  var16 = var14;\n  while( true ) {\n    var10 = var4;\n    var9 = calculate_combined_value_080078f4();\n    if (condition2 == '\\0') {\n      var9 = var9 ^ 0x1e;\n    }\n    if (((byteVal & 1) != 0) && (var16 = var16 + var1, 0 < var16)) {\n      if ((var9 & 0x10) == 0) {\n        byteVal = byteVal & 0xfe;\n      }\n      else {\n        var10 = var10 ^ 0x10;\n      }\n      var16 = var16 - var8;\n    }\n    if (((byteVal & 2) != 0) && (var15 = var15 + var2, 0 < var15)) {\n      if ((var9 & 8) == 0) {\n        byteVal = byteVal & 0xfd;\n      }\n      else {\n        var10 = var10 ^ 0x440;\n      }\n      var15 = var15 - var8;\n    }\n    if (((byteVal & 4) != 0) && (var14 = var14 + var3, 0 < var14)) {\n      if ((var9 & 4) == 0) {\n        byteVal = byteVal & 0xfb;\n      }\n      else {\n        var10 = var10 ^ 0x100;\n      }\n      var14 = var14 - var8;\n    }\n    if ((byteVal == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_data_080018cc(var10);\n    FUNC_08002828(DAT_20000ec9);\n    update_data_080018cc(var4);\n    FUNC_08002828(var13);\n    if ((var5 < var18) && (var11 = var18 + var11, 20000 < var11)) {\n      var11 = var11 - 20000;\n      var12 = var6 + var12;\n      var18 = 60000000 / var12;\n      if (var18 < var5) {\n        var18 = var5;\n      }\n      var13 = var18 - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_values_08001994",
                "param_1": "flag",
                "param_2": "condition1",
                "param_3": "condition2",
                "param_4": "value",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "local_61": "byteVal",
                "local_5c": "var1",
                "local_58": "var2",
                "local_54": "var3",
                "local_4e": "var4",
                "local_4c": "var5",
                "local_48": "var6",
                "local_44": "var7",
                "local_40": "var8",
                "local_3c": "var9",
                "local_36": "var10",
                "local_34": "var11",
                "local_30": "var12",
                "local_2c": "var13",
                "local_28": "var14",
                "local_24": "var15",
                "local_20": "var16",
                "local_1a": "var17",
                "local_18": "var18",
                "local_11": "charVal"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_calculate_values_08001d4c",
            "code": "\nvoid initialize_and_calculate_values_08001d4c(void)\n\n{\n  char updated_counter;\n  char counter;\n  \n  initialize_data_08005790();\n  calculate_values_08001994(4,1,0,DAT_20000eec);\n  calculate_values_08001994(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    updated_counter = counter + -1;\n    if (counter == '\\0') break;\n    calculate_values_08001994(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    counter = updated_counter;\n    if ('\\0' < updated_counter) {\n      calculate_values_08001994(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  initialize_function_080057e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_calculate_values_08001d4c",
                "local_9": "counter",
                "cVar1": "updated_counter"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_and_process_data_08001ddc",
            "code": "\nvoid initialize_and_process_data_08001ddc(void)\n\n{\n  FUNC_08008244();\n  initialize_and_check_data();\n  initialize_and_update();\n  fill_with_byte(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initialize_data();\n      initialize_and_check_data_2();\n      initialize_and_print_grbl_version();\n      initialize_data_2();\n      initialize_main_components();\n      extract_bit_from_value();\n      initialize_data_3();\n      initialize_and_calculate_floating_points();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        display_status_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        validate_and_update_data();\n      }\n    }\n    handle_alarm_update();\n    process_input_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_and_process_data_08001ddc",
                "initialize_and_check_data_080051b4": "initialize_and_check_data",
                "initialize_and_update_0800583c": "initialize_and_update",
                "fill_with_byte_0800b430": "fill_with_byte",
                "initialize_data_08002f24": "initialize_data",
                "initialize_and_check_data_080004ac": "initialize_and_check_data_2",
                "initialize_and_print_grbl_version_080039a0": "initialize_and_print_grbl_version",
                "initialize_data_08005238": "initialize_data_2",
                "initialize_main_components_080001f8": "initialize_main_components",
                "extract_bit_from_value_0800192c": "extract_bit_from_value",
                "initialize_data_08005814": "initialize_data_3",
                "initialize_and_calculate_floating_points_0800283a": "initialize_and_calculate_floating_points",
                "display_status_message_080041a0": "display_status_message",
                "validate_and_update_data_080039bc": "validate_and_update_data",
                "handle_alarm_update_08003a74": "handle_alarm_update",
                "process_input_data_08003f34": "process_input_data"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "update_alarm_handler_08001e98",
            "code": "\nvoid updateAlarmHandler_08001e98(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4,\n                 undefined value5)\n\n{\n  int isEqual;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      handle_alarm_update_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      isEqual = check_data_equality_08002fac();\n    } while (isEqual != 0);\n    process_and_adjust_values_08003004(value1,value2,value3,value4,value5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_and_update_data_0800585c();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "update_alarm_handler_08001e98",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "iVar1": "isEqual"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_alarm_08001f00",
            "code": "\nvoid calculateAlarm_08001f00(int input1,undefined4 *input2,int input3,byte byte1,byte byte2,byte byte3\n                 ,undefined4 paramA,char paramB,undefined4 paramC,char paramD)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int condition;\n  uint result3;\n  undefined8 result4;\n  undefined8 result5;\n  uint values [4];\n  undefined4 localVarA;\n  undefined4 localVarB;\n  undefined4 localVarC;\n  undefined4 localVarD;\n  undefined4 localVarE;\n  undefined4 localVarF;\n  ushort localVarG;\n  undefined4 localVarH;\n  undefined4 localVarI;\n  undefined4 localVarJ;\n  uint localVarK;\n  undefined4 localVarL;\n  undefined4 localVarM;\n  char localVarN;\n  ushort localVarO;\n  undefined4 localVarP;\n  uint localVarQ;\n  uint localVarR;\n  \n  localVarM = calculate_float_value_08008cdc(*(undefined4 *)((uint)byte1 * 4 + input1),\n                          *(undefined4 *)((uint)byte1 * 4 + input3));\n  localVarL = calculate_float_value_08008cdc(*(undefined4 *)((uint)byte2 * 4 + input1),\n                          *(undefined4 *)((uint)byte2 * 4 + input3));\n  localVarK = calculate_pseudo_float_08008cd8(input2[byte3],*(undefined4 *)((uint)byte3 * 4 + input1));\n  localVarR = *(uint *)((uint)byte1 * 4 + input3) ^ 0x80000000;\n  localVarQ = *(uint *)((uint)byte2 * 4 + input3) ^ 0x80000000;\n  localVarJ = calculate_pseudo_float_08008cd8(input2[byte1],localVarM);\n  localVarI = calculate_pseudo_float_08008cd8(input2[byte2],localVarL);\n  result1 = calculate_floating_point_value_08008eec(localVarR,localVarI);\n  result2 = calculate_floating_point_value_08008eec(localVarQ,localVarJ);\n  result1 = calculate_pseudo_float_08008cd8(result1,result2);\n  result4 = expand_bits_08008590(result1);\n  result1 = calculate_floating_point_value_08008eec(localVarR,localVarJ);\n  result2 = calculate_floating_point_value_08008eec(localVarQ,localVarI);\n  result1 = calculate_float_value_08008cdc(result1,result2);\n  result5 = expand_bits_08008590(result1);\n  result4 = calculate_float_from_params_thunk_08009990((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                             (int)((ulonglong)result5 >> 0x20));\n  localVarP = calculate_float_offset_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n  if (paramD == '\\0') {\n    condition = check_concatenation_result_0800923c(localVarP,0);\n    if (condition != 0) {\n      result4 = expand_bits_08008590(localVarP);\n      result4 = calculate_sum_product_080082d4((int)result4,(int)((ulonglong)result4 >> 0x20),0x54442d18,0x401921fb);\n      localVarP = calculate_float_offset_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n    }\n  }\n  else {\n    condition = check_concatenation_result_08009250(localVarP,0);\n    if (condition != 0) {\n      result4 = expand_bits_08008590(localVarP);\n      result4 = calculate_result_080082d0((int)result4,(int)((ulonglong)result4 >> 0x20),0x54442d18,0x401921fb);\n      localVarP = calculate_float_offset_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n    }\n  }\n  result1 = calculate_floating_point_value_08008eec(localVarP,paramC);\n  result4 = expand_bits_08008590(result1);\n  result5 = expand_bits_08008590(localVarK & 0x7fffffff);\n  result4 = calculate_and_initialize_0800981c((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                       (int)((ulonglong)result5 >> 0x20));\n  localVarH = calculate_float_offset_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n  condition = is_concatenation_successful_08009214(localVarH,0);\n  if (condition == 0) {\n    result1 = calculate_floating_point_08009054(localVarH,DAT_20000ed8);\n    result4 = expand_bits_08008590(result1);\n    result4 = calculate_result_080094c0((int)result4,(int)((ulonglong)result4 >> 0x20));\n    localVarG = check_and_adjust_values_08008bf0((int)result4,(int)((ulonglong)result4 >> 0x20));\n    if (paramB != '\\0') {\n      result1 = count_bits_and_manipulate_08008e44(localVarG);\n      paramA = calculate_floating_point_value_08008eec(paramA,result1);\n    }\n    result1 = count_bits_and_manipulate_08008e44(localVarG);\n    localVarF = calculate_floating_point_08009054(localVarP,result1);\n    result1 = count_bits_and_manipulate_08008e44(localVarG);\n    localVarE = calculate_floating_point_08009054(localVarK,result1);\n    result4 = expand_bits_08008590(localVarF);\n    result4 = calculate_hash_08008640((int)result4,(int)((ulonglong)result4 >> 0x20),0,0x3fe00000);\n    result5 = expand_bits_08008590(localVarF);\n    result4 = calculate_hash_08008640((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                         (int)((ulonglong)result5 >> 0x20));\n    result4 = calculate_result_080082d0(0,0x3ff00000,(int)result4,(int)((ulonglong)result4 >> 0x20));\n    localVarD = calculate_float_offset_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n    localVarC = localVarF;\n    localVarN = '\\0';\n    values[byte3] = *(uint *)(input1 + (uint)byte3 * 4);\n    for (localVarO = 1; localVarO < localVarG; localVarO = localVarO + 1) {\n      if ((int)localVarN < (int)(uint)DAT_20000efa) {\n        result1 = calculate_floating_point_value_08008eec(localVarR,localVarC);\n        result2 = calculate_floating_point_value_08008eec(localVarQ,localVarD);\n        values[3] = calculate_float_value_08008cdc(result1,result2);\n        result1 = calculate_floating_point_value_08008eec(localVarR,localVarD);\n        result2 = calculate_floating_point_value_08008eec(localVarQ,localVarC);\n        localVarR = calculate_pseudo_float_08008cd8(result1,result2);\n        localVarQ = values[3];\n        localVarN = localVarN + '\\x01';\n      }\n      else {\n        result1 = count_bits_and_manipulate_08008e44(localVarO);\n        result1 = calculate_floating_point_value_08008eec(result1,localVarF);\n        result4 = expand_bits_08008590(result1);\n        result4 = calculate_08009410((int)result4,(int)((ulonglong)result4 >> 0x20));\n        localVarB = calculate_float_offset_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n        result1 = count_bits_and_manipulate_08008e44(localVarO);\n        result1 = calculate_floating_point_value_08008eec(result1,localVarF);\n        result4 = expand_bits_08008590(result1);\n        result4 = calculate_result_080096e8((int)result4,(int)((ulonglong)result4 >> 0x20));\n        localVarA = calculate_float_offset_08008c30((int)result4,(int)((ulonglong)result4 >> 0x20));\n        result1 = calculate_floating_point_value_08008eec(*(uint *)((uint)byte1 * 4 + input3) ^ 0x80000000,localVarB);\n        result2 = calculate_floating_point_value_08008eec(*(undefined4 *)((uint)byte2 * 4 + input3),localVarA);\n        localVarR = calculate_float_value_08008cdc(result1,result2);\n        result1 = calculate_floating_point_value_08008eec(*(uint *)((uint)byte1 * 4 + input3) ^ 0x80000000,localVarA);\n        result2 = calculate_floating_point_value_08008eec(*(undefined4 *)((uint)byte2 * 4 + input3),localVarB);\n        localVarQ = calculate_pseudo_float_08008cd8(result1,result2);\n        localVarN = '\\0';\n      }\n      result3 = calculate_float_value_08008cdc(localVarM,localVarR);\n      values[byte1] = result3;\n      result3 = calculate_float_value_08008cdc(localVarL,localVarQ);\n      values[byte2] = result3;\n      result3 = calculate_float_value_08008cdc(values[byte3],localVarE);\n      values[byte3] = result3;\n      update_alarm_handler_08001e98(values[0],values[1],values[2],paramA,paramB);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    update_alarm_handler_08001e98(*input2,input2[1],input2[2],paramA,paramB);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_alarm_08001f00",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "byte1",
                "param_5": "byte2",
                "param_6": "byte3",
                "param_7": "paramA",
                "param_8": "paramB",
                "param_9": "paramC",
                "param_10": "paramD",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "condition",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "local_6c": "values",
                "local_5c": "localVarA",
                "local_58": "localVarB",
                "local_54": "localVarC",
                "local_50": "localVarD",
                "local_4c": "localVarE",
                "local_48": "localVarF",
                "local_42": "localVarG",
                "local_40": "localVarH",
                "local_3c": "localVarI",
                "local_38": "localVarJ",
                "local_34": "localVarK",
                "local_30": "localVarL",
                "local_2c": "localVarM",
                "local_27": "localVarN",
                "local_26": "localVarO",
                "local_24": "localVarP",
                "local_20": "localVarQ",
                "local_1c": "localVarR"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_data_08002408",
            "code": "\nvoid processData_08002408(undefined4 inputData)\n\n{\n  undefined2 result;\n  undefined4 floatValue;\n  undefined4 bitsCount;\n  undefined8 expandedValue;\n  ushort loopCount;\n  \n  floatValue = calculate_floating_point_value_08008eec(inputData,0x41a00000);\n  expandedValue = expand_bits_08008590(floatValue);\n  expandedValue = calculate_result_080094c0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n  loopCount = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n  check_valid_data_08002fd4();\n  floatValue = calculate_floating_point_value_08008eec(inputData,0x447a0000);\n  bitsCount = count_bits_and_manipulate_08008e44((uint)loopCount * 0x32);\n  floatValue = calculate_pseudo_float_08008cd8(floatValue,bitsCount);\n  expandedValue = expand_bits_08008590(floatValue);\n  expandedValue = calculate_result_080094c0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n  result = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n  FUNC_08002814(result);\n  while ((loopCount != 0 && (handle_alarm_update_08003a74(), DAT_20000ea8 == '\\0'))) {\n    wait_for_data_080002a0(0x32);\n    loopCount = loopCount - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_data_08002408",
                "param_1": "inputData",
                "uVar1": "result",
                "uVar2": "floatValue",
                "uVar3": "bitsCount",
                "uVar4": "expandedValue",
                "local_12": "loopCount"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_and_handle_alarm_080024c4",
            "code": "\nvoid initializeAndHandleAlarm_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char toggleSignal3;\n  char toggleSignal2;\n  char toggleSignal1;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initializeAndCalculateValues();\n  handleAlarmUpdate();\n  if (DAT_20000ea8 == '\\0') {\n    fillWithByte(&DAT_20000eac,0,0xc);\n    initializeAndCalculateFloatingPoints();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      toggleSignal1 = -1;\n    }\n    else {\n      toggleSignal1 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      toggleSignal2 = -1;\n    }\n    else {\n      toggleSignal2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      toggleSignal3 = -1;\n    }\n    else {\n      toggleSignal3 = '\\x01';\n    }\n    uVar1 = countBitsAndManipulate((int)toggleSignal1);\n    uVar1 = calculateFloatingPointValue(uVar1,DAT_20000ef4);\n    uVar2 = countBitsAndManipulate((int)toggleSignal2);\n    uVar2 = calculateFloatingPointValue(uVar2,DAT_20000ef4);\n    uVar3 = countBitsAndManipulate((int)toggleSignal3);\n    uVar3 = calculateFloatingPointValue(uVar3,DAT_20000ef4);\n    updateAlarmHandler(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initializeAndUpdateData();\n    checkValidData();\n    initializeAndCalculateFloatingPoints();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_and_handle_alarm_080024c4",
                "local_13": "toggleSignal3",
                "local_12": "toggleSignal2",
                "local_11": "toggleSignal1",
                "initialize_and_calculate_values_08001d4c": "initializeAndCalculateValues",
                "handle_alarm_update_08003a74": "handleAlarmUpdate",
                "fill_with_byte_0800b430": "fillWithByte",
                "initialize_and_calculate_floating_points_0800283a": "initializeAndCalculateFloatingPoints",
                "count_bits_and_manipulate_08008e44": "countBitsAndManipulate",
                "calculate_floating_point_value_08008eec": "calculateFloatingPointValue",
                "update_alarm_handler_08001e98": "updateAlarmHandler",
                "initialize_and_update_data_0800585c": "initializeAndUpdateData",
                "check_valid_data_08002fd4": "checkValidData"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_system_080025e8",
            "code": "\nvoid initializeSystem_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    executeInitialization();\n    initializeComponents();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      initializeFunction();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_system_080025e8",
                "execute_initialization_08005250": "executeInitialization",
                "initialize_components_08000210": "initializeComponents",
                "initialize_function_080057e4": "initializeFunction"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_08002638",
            "code": "\nundefined4 parseInteger_08002638(int baseAddress,byte *data,uint *result)\n\n{\n  byte digit;\n  bool isNegative;\n  bool isFloatingPoint;\n  int concatenationSuccessful;\n  char *currentChar;\n  char *nextChar;\n  undefined4 returnValue;\n  undefined8 tempValue;\n  uint intValue;\n  byte digitCount;\n  char decimalCount;\n  int parsedInteger;\n  char currentSymbol;\n  char *nextSymbol;\n  \n  nextChar = (char *)(baseAddress + (uint)*data);\n  currentChar = nextChar + 1;\n  currentSymbol = *nextChar;\n  isNegative = false;\n  if (currentSymbol == '-') {\n    isNegative = true;\n    currentSymbol = *currentChar;\n    nextSymbol = nextChar + 2;\n  }\n  else {\n    nextSymbol = currentChar;\n    if (currentSymbol == '+') {\n      nextSymbol = nextChar + 2;\n      currentSymbol = *currentChar;\n    }\n  }\n  parsedInteger = 0;\n  decimalCount = '\\0';\n  digitCount = 0;\n  isFloatingPoint = false;\n  do {\n    digit = currentSymbol - 0x30;\n    if (digit < 10) {\n      digitCount = digitCount + 1;\n      if (digitCount < 9) {\n        if (isFloatingPoint) {\n          decimalCount = decimalCount + -1;\n        }\n        parsedInteger = (uint)digit + parsedInteger * 10;\n      }\n      else if (!isFloatingPoint) {\n        decimalCount = decimalCount + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (isFloatingPoint)) {\n        if (digitCount == 0) {\n          returnValue = 0;\n        }\n        else {\n          intValue = calculate_value_08008e3c(parsedInteger);\n          concatenationSuccessful = is_concatenation_successful_08009214(intValue,0);\n          if (concatenationSuccessful == 0) {\n            for (; decimalCount < -1; decimalCount = decimalCount + '\\x02') {\n              tempValue = expand_bits_08008590(intValue);\n              tempValue = calculate_hash_08008640((int)tempValue,(int)((ulonglong)tempValue >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              intValue = calculate_float_offset_08008c30((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n            }\n            if (decimalCount < '\\0') {\n              tempValue = expand_bits_08008590(intValue);\n              tempValue = calculate_hash_08008640((int)tempValue,(int)((ulonglong)tempValue >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              intValue = calculate_float_offset_08008c30((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimalCount; decimalCount = decimalCount + -1) {\n                intValue = calculate_floating_point_value_08008eec(intValue,0x41200000);\n              }\n            }\n          }\n          if (isNegative) {\n            *result = intValue ^ 0x80000000;\n          }\n          else {\n            *result = intValue;\n          }\n          *data = ((char)nextSymbol - (char)baseAddress) - 1;\n          returnValue = 1;\n        }\n        return returnValue;\n      }\n      isFloatingPoint = true;\n    }\n    currentSymbol = *nextSymbol;\n    nextSymbol = nextSymbol + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "param_1": "baseAddress",
                "param_2": "data",
                "param_3": "result",
                "bVar1": "digit",
                "bVar2": "isNegative",
                "bVar3": "isFloatingPoint",
                "iVar4": "concatenationSuccessful",
                "pcVar5": "currentChar",
                "pcVar6": "nextChar",
                "uVar7": "returnValue",
                "uVar8": "tempValue",
                "local_1c": "intValue",
                "local_16": "digitCount",
                "local_15": "decimalCount",
                "local_14": "parsedInteger",
                "local_d": "currentSymbol",
                "local_c": "nextSymbol"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_calculate_floating_points_0800283a",
            "code": "\nvoid initialize_and_calculate_floating_points_0800283a(void)\n\n{\n  initialize_data_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_floating_points_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_floating_points_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_bound_08002870",
            "code": "\nchar increment_and_bound_08002870(char input_char)\n\n{\n  char result_char;\n  \n  result_char = input_char + '\\x01';\n  if (result_char == '\\x12') {\n    result_char = '\\0';\n  }\n  return result_char;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_bound_08002870",
                "param_1": "input_char",
                "local_9": "result_char"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "adjust_char_08002896",
            "code": "\nchar adjustChar_08002896(char inputChar)\n\n{\n  char adjustedChar;\n  \n  adjustedChar = inputChar;\n  if (inputChar == '\\0') {\n    adjustedChar = '\\x12';\n  }\n  return adjustedChar + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "adjust_char_08002896",
                "param_1": "inputChar",
                "local_9": "adjustedChar"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_combined_value_080028bc",
            "code": "\nundefined4 calculate_combined_value_080028bc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 floatValue1;\n  undefined4 floatValue2;\n  \n  floatValue1 = calculate_floating_point_value_08008eec(input2,input2);\n  floatValue2 = calculate_floating_point_value_08008eec(input1,input1);\n  floatValue1 = calculate_pseudo_float_08008cd8(floatValue1,floatValue2);\n  floatValue2 = calculate_float_value_08008cdc(input3,input3);\n  floatValue1 = calculate_floating_point_08009054(floatValue1,floatValue2);\n  return floatValue1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_combined_value_080028bc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "floatValue1",
                "uVar2": "floatValue2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_float_value_08008cdc(input_3,input_3);\n  result_1 = calculate_floating_point_value_08008eec(result_1,input_4);\n  result_2 = calculate_floating_point_value_08008eec(input_1,input_1);\n  result_1 = calculate_pseudo_float_08008cd8(result_1,result_2);\n  result_2 = calculate_floating_point_value_08008eec(input_2,input_2);\n  result_1 = calculate_float_value_08008cdc(result_1,result_2);\n  result_2 = calculate_floating_point_value_08008eec(input_3,0x40800000);\n  result_1 = calculate_floating_point_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_float_offset_08002978",
            "code": "\nundefined4 calculateFloatOffset_08002978(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 floatValue1;\n  undefined4 floatValue2;\n  undefined8 expandedBits;\n  \n  floatValue1 = calculate_floating_point_value_08008eec(input2,input2);\n  floatValue2 = calculate_float_value_08008cdc(input1,input1);\n  floatValue2 = calculate_floating_point_value_08008eec(floatValue2,input3);\n  floatValue1 = calculate_pseudo_float_08008cd8(floatValue1,floatValue2);\n  expandedBits = expand_bits_08008590(floatValue1);\n  expandedBits = process_data_080098d0((int)expandedBits,(int)((ulonglong)expandedBits >> 0x20));\n  floatValue1 = calculate_float_offset_08008c30((int)expandedBits,(int)((ulonglong)expandedBits >> 0x20));\n  return floatValue1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_float_offset_08002978",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "floatValue1",
                "uVar2": "floatValue2",
                "uVar3": "expandedBits"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "process_concatenation_080029d8",
            "code": "\nvoid processConcatenation_080029d8(undefined4 input1,int input2,int input3)\n\n{\n  int concatResult;\n  undefined4 floatOffset;\n  undefined4 concatOutput;\n  \n  if (((input2 != 0) && (input3 != 0)) &&\n     (concatResult = is_concatenation_successful_08009214(*(undefined4 *)(input2 + 0x18),*(undefined4 *)(input2 + 0x1c)),\n     concatResult == 0)) {\n    if ((*(char *)(input2 + 0x25) == '\\0') &&\n       (concatResult = is_concatenation_successful_08009264(*(undefined4 *)(input2 + 0x1c),*(undefined4 *)(input3 + 0x18)),\n       concatResult != 0)) {\n      concatOutput = *(undefined4 *)(input2 + 0x1c);\n      floatOffset = calculate_float_offset_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input3 + 0x18),\n                           *(undefined4 *)(input2 + 0x20));\n      concatResult = check_if_concatenation_empty_08009228(concatOutput,floatOffset);\n      if (concatResult == 0) {\n        floatOffset = calculate_float_offset_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input3 + 0x18),\n                             *(undefined4 *)(input2 + 0x20));\n      }\n      else {\n        floatOffset = *(undefined4 *)(input2 + 0x1c);\n      }\n      *(undefined4 *)(input2 + 0x18) = floatOffset;\n    }\n    else {\n      *(undefined4 *)(input2 + 0x18) = *(undefined4 *)(input2 + 0x1c);\n    }\n    *(undefined *)(input2 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "process_concatenation_080029d8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "concatResult",
                "uVar2": "floatOffset",
                "uVar3": "concatOutput"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "process_concatenation_08002a94",
            "code": "\nvoid processConcatenation_08002a94(void)\n\n{\n  undefined *tempPtr;\n  undefined *currentPtr;\n  undefined *previousPtr;\n  byte inputByte;\n  \n  inputByte = DAT_20000cf0;\n  currentPtr = (undefined *)0x0;\n  previousPtr = (undefined *)0x0;\n  while (tempPtr = previousPtr, inputByte != DAT_20000cf1) {\n    inputByte = adjust_char_08002896(inputByte);\n    previousPtr = currentPtr;\n    process_concatenation_080029d8(&DAT_20000870 + (uint)inputByte * 0x40,currentPtr,tempPtr);\n    currentPtr = &DAT_20000870 + (uint)inputByte * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "process_concatenation_08002a94",
                "local_9": "inputByte",
                "local_18": "currentPtr",
                "local_14": "previousPtr",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "concatenate_strings_08002afc",
            "code": "\nvoid concatenate_strings_08002afc(int string1_ptr,int string2_ptr)\n\n{\n  int concat_empty;\n  undefined4 new_string;\n  undefined4 existing_string;\n  \n  if (((string1_ptr != 0) && (*(char *)(string1_ptr + 0x25) == '\\0')) &&\n     (concat_empty = check_if_concatenation_empty_08009228(*(undefined4 *)(string1_ptr + 0x18),*(undefined4 *)(string2_ptr + 0x18)),\n     concat_empty != 0)) {\n    existing_string = *(undefined4 *)(string2_ptr + 0x18);\n    new_string = calculate_float_offset_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(string1_ptr + 0x18),\n                         *(undefined4 *)(string1_ptr + 0x20));\n    concat_empty = check_if_concatenation_empty_08009228(existing_string,new_string);\n    if (concat_empty == 0) {\n      new_string = calculate_float_offset_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(string1_ptr + 0x18),\n                           *(undefined4 *)(string1_ptr + 0x20));\n    }\n    else {\n      new_string = *(undefined4 *)(string2_ptr + 0x18);\n    }\n    concat_empty = is_concatenation_successful_08009214(new_string,*(undefined4 *)(string2_ptr + 0x18));\n    if (concat_empty == 0) {\n      *(undefined4 *)(string2_ptr + 0x18) = new_string;\n      *(undefined *)(string2_ptr + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "concatenate_strings_08002afc",
                "param_1": "string1_ptr",
                "param_2": "string2_ptr",
                "iVar1": "concat_empty",
                "uVar2": "new_string",
                "uVar3": "existing_string"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "concatenate_bound_strings_08002ba8",
            "code": "\nvoid concatenateBoundStrings_08002ba8(void)\n\n{\n  uint uVar1;\n  undefined *tempStringPointer;\n  undefined *previousStringPointer;\n  undefined *previousString;\n  undefined *currentString;\n  byte currentChar;\n  \n  previousString = (undefined *)0x0;\n  currentString = (undefined *)0x0;\n  currentChar = DAT_20000cf1;\n  previousStringPointer = (undefined *)0x0;\n  while (tempStringPointer = previousString, currentChar != DAT_20000cf0) {\n    previousString = currentString;\n    uVar1 = (uint)currentChar;\n    concatenate_strings_08002afc(tempStringPointer,currentString,&DAT_20000870 + uVar1 * 0x40);\n    currentChar = increment_and_bound_08002870(currentChar);\n    previousStringPointer = tempStringPointer;\n    currentString = &DAT_20000870 + uVar1 * 0x40;\n  }\n  concatenate_strings_08002afc(previousString,currentString,0,previousString,previousStringPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "concatenate_bound_strings_08002ba8",
                "local_14": "previousString",
                "local_10": "currentString",
                "local_9": "currentChar",
                "puVar3": "previousStringPointer",
                "puVar2": "tempStringPointer"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_values_and_adjust_08002c18",
            "code": "\nvoid calculate_values_and_adjust_08002c18(int input_data,undefined4 floating_point_param,undefined4 another_floating_point_param)\n\n{\n  undefined4 calculated_value;\n  int hash_calculation;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  uint result_1;\n  undefined8 result_2;\n  int result_3;\n  uint result_4;\n  \n  calculated_value = calculate_value_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  calculated_value = calculate_floating_point_value_08008eec(calculated_value,floating_point_param);\n  result_2 = expand_bits_08008590(calculated_value);\n  result_2 = calculate_reversed_value_08009318((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  calculated_value = check_and_adjust_values_08008bf0((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  *(undefined4 *)(input_data + 0x28) = calculated_value;\n  calculated_value = calculate_value_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  calculated_value = calculate_floating_point_value_08008eec(calculated_value,another_floating_point_param);\n  result_2 = expand_bits_08008590(calculated_value);\n  result_2 = calculate_reversed_value_08009318((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  calculated_value = check_and_adjust_values_08008bf0((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  *(undefined4 *)(input_data + 0x2c) = calculated_value;\n  result_2 = bitwise_shift_and_concat_0800856c(*(int *)(input_data + 0x30) * 0x32);\n  result_2 = calculate_hash_08008640((int)result_2,(int)((ulonglong)result_2 >> 0x20),0,0x404e0000);\n  hash_calculation = calculate_result_08008ba0((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  calculated_value = calculate_value_08008e3c(*(undefined4 *)(input_data + 0x28));\n  value_1 = calculate_value_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  value_2 = count_bits_and_manipulate_08008e44(hash_calculation);\n  calculated_value = calculate_combined_value_080028bc(calculated_value,value_1,value_2);\n  result_2 = expand_bits_08008590(calculated_value);\n  result_2 = calculate_reversed_value_08009318((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  result_4 = calculate_result_08008ba0((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  calculated_value = calculate_value_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  value_1 = calculate_value_08008e3c(*(undefined4 *)(input_data + 0x2c));\n  value_2 = count_bits_and_manipulate_08008e44(-hash_calculation);\n  calculated_value = calculate_combined_value_080028bc(calculated_value,value_1,value_2);\n  result_2 = expand_bits_08008590(calculated_value);\n  result_2 = calculate_result_080094c0((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  result_3 = calculate_result_08008ba0((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n  result_3 = (*(int *)(input_data + 0x10) - result_4) - result_3;\n  if (result_3 < 0) {\n    calculated_value = calculate_value_08008e3c(*(undefined4 *)(input_data + 0x28));\n    value_1 = calculate_value_08008e3c(*(undefined4 *)(input_data + 0x2c));\n    value_2 = count_bits_and_manipulate_08008e44(hash_calculation);\n    value_3 = count_bits_and_manipulate_08008e44(*(undefined4 *)(input_data + 0x10));\n    calculated_value = calculate_result_08002908(calculated_value,value_1,value_2,value_3);\n    result_2 = expand_bits_08008590(calculated_value);\n    result_2 = calculate_reversed_value_08009318((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n    result_1 = calculate_result_08008ba0((int)result_2,(int)((ulonglong)result_2 >> 0x20));\n    result_1 = result_1 & ~((int)result_1 >> 0x1f);\n    result_4 = *(uint *)(input_data + 0x10);\n    if ((int)result_1 <= (int)*(uint *)(input_data + 0x10)) {\n      result_4 = result_1;\n    }\n    result_3 = 0;\n  }\n  *(uint *)(input_data + 0x34) = result_4;\n  *(uint *)(input_data + 0x38) = result_3 + result_4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_values_and_adjust_08002c18",
                "param_1": "input_data",
                "param_2": "floating_point_param",
                "param_3": "another_floating_point_param",
                "uVar1": "calculated_value",
                "iVar2": "hash_calculation",
                "uVar3": "value_1",
                "uVar4": "value_2",
                "uVar5": "value_3",
                "uVar6": "result_1",
                "uVar7": "result_2",
                "local_20": "result_3",
                "local_1c": "result_4"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_and_adjust_values_08002e08",
            "code": "\nvoid calculate_and_adjust_values_08002e08(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int index;\n  undefined *ptr_data;\n  byte byte_value;\n  \n  ptr_data = (undefined *)0x0;\n  byte_value = DAT_20000cf1;\n  while (byte_value != DAT_20000cf0) {\n    index = (uint)byte_value * 0x40;\n    if ((ptr_data != (undefined *)0x0) &&\n       ((ptr_data[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      result1 = calculate_floating_point_08009054(*(undefined4 *)(ptr_data + 0x18),*(undefined4 *)(ptr_data + 0x14));\n      result2 = calculate_floating_point_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(ptr_data + 0x14));\n      calculate_values_and_adjust_08002c18(ptr_data,result1,result2);\n      ptr_data[0x24] = 0;\n    }\n    byte_value = increment_and_bound_08002870(byte_value);\n    ptr_data = &DAT_20000870 + index;\n  }\n  result1 = calculate_floating_point_08009054(*(undefined4 *)(ptr_data + 0x18),*(undefined4 *)(ptr_data + 0x14));\n  result2 = calculate_floating_point_08009054(0,*(undefined4 *)(ptr_data + 0x14));\n  calculate_values_and_adjust_08002c18(ptr_data,result1,result2);\n  ptr_data[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_and_adjust_values_08002e08",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "index",
                "local_18": "ptr_data",
                "local_11": "byte_value"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "process_and_adjust_values_08002edc",
            "code": "\nvoid process_and_adjust_values_08002edc(void)\n\n{\n  perform_string_concatenation();\n  combine_bound_strings();\n  calculate_and_adjust_values();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "process_and_adjust_values_08002edc",
                "process_concatenation_08002a94": "perform_string_concatenation",
                "concatenate_bound_strings_08002ba8": "combine_bound_strings",
                "calculate_and_adjust_values_08002e08": "calculate_and_adjust_values"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_data_08002ef0",
            "code": "\nvoid updateData_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = incrementAndBound(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_data_08002ef0",
                "increment_and_bound_08002870": "incrementAndBound"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_data_08002f24",
            "code": "\nvoid initializeData_08002f24(void)\n\n{\n  updateData();\n  fillBufferWithByte(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_data_08002f24",
                "update_data_08002ef0": "updateData",
                "fill_with_byte_0800b430": "fillBufferWithByte"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_if_needed_08002f40",
            "code": "\nvoid update_if_needed_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_bound(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_if_needed_08002f40",
                "increment_and_bound_08002870": "increment_and_bound"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_valid_data_pointer_08002f74",
            "code": "\nundefined * getValidDataPointer_08002f74(void)\n\n{\n  undefined *validDataPointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    validDataPointer = (undefined *)0x0;\n  }\n  else {\n    validDataPointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return validDataPointer;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_valid_data_pointer_08002f74",
                "puVar1": "validDataPointer"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "check_data_equality_08002fac",
            "code": "\nbool checkDataEquality_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "check_data_equality_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "check_valid_data_08002fd4",
            "code": "\nvoid check_valid_data_08002fd4(void)\n\n{\n  int dataPointer;\n  \n  while ((dataPointer = getValidDataPointer(), dataPointer != 0 || (DAT_20000ea9 == '\\x03'))) {\n    handleAlarmUpdate();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "check_valid_data_08002fd4",
                "iVar1": "dataPointer",
                "get_valid_data_pointer_08002f74": "getValidDataPointer",
                "handle_alarm_update_08003a74": "handleAlarmUpdate"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "process_and_adjust_values_08003004",
            "code": "\nvoid process_and_adjust_values_08003004(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 char flag)\n\n{\n  undefined4 value_1;\n  int new_value_1;\n  int new_value_2;\n  int new_value_3;\n  undefined4 bits_expanded_2;\n  undefined4 bits_expanded_3;\n  undefined4 floating_value_1;\n  undefined4 floating_value_2;\n  uint maximum_value;\n  int offset;\n  ushort *pointer_1;\n  int absolute_value;\n  uint maximum_value_2;\n  undefined8 bits_expanded_1;\n  undefined8 value_15;\n  undefined8 value_16;\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  offset = (uint)DAT_20000cf0 * 0x40;\n  pointer_1 = (ushort *)(&DAT_20000870 + offset);\n  value_1 = calculate_floating_point_value_08008eec(DAT_20000ebc,input_1);\n  bits_expanded_1 = expand_bits_08008590(value_1);\n  new_value_1 = calculate_new_value_080095b8((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n  value_1 = calculate_floating_point_value_08008eec(DAT_20000ec0,input_2);\n  bits_expanded_1 = expand_bits_08008590(value_1);\n  new_value_2 = calculate_new_value_080095b8((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n  value_1 = calculate_floating_point_value_08008eec(DAT_20000ec4,input_3);\n  bits_expanded_1 = expand_bits_08008590(value_1);\n  new_value_3 = calculate_new_value_080095b8((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n  *pointer_1 = 0;\n  if (new_value_1 < DAT_20000cf4) {\n    *pointer_1 = *pointer_1 | 0x20;\n  }\n  if (new_value_2 < DAT_20000cf8) {\n    *pointer_1 = *pointer_1 | 0x880;\n  }\n  if (new_value_3 < DAT_20000cfc) {\n    *pointer_1 = *pointer_1 | 0x200;\n  }\n  absolute_value = new_value_1 - DAT_20000cf4;\n  if (absolute_value < 0) {\n    absolute_value = -absolute_value;\n  }\n  *(int *)(&DAT_20000874 + offset) = absolute_value;\n  absolute_value = new_value_2 - DAT_20000cf8;\n  if (absolute_value < 0) {\n    absolute_value = -absolute_value;\n  }\n  *(int *)(&DAT_20000878 + offset) = absolute_value;\n  absolute_value = new_value_3 - DAT_20000cfc;\n  if (absolute_value < 0) {\n    absolute_value = -absolute_value;\n  }\n  *(int *)(&DAT_2000087c + offset) = absolute_value;\n  maximum_value = *(uint *)(&DAT_2000087c + offset);\n  if (*(uint *)(&DAT_2000087c + offset) < *(uint *)(&DAT_20000878 + offset)) {\n    maximum_value = *(uint *)(&DAT_20000878 + offset);\n  }\n  maximum_value_2 = *(uint *)(&DAT_20000874 + offset);\n  if (*(uint *)(&DAT_20000874 + offset) < maximum_value) {\n    maximum_value_2 = maximum_value;\n  }\n  *(uint *)(&DAT_20000880 + offset) = maximum_value_2;\n  if (*(int *)(&DAT_20000880 + offset) != 0) {\n    value_1 = count_bits_and_manipulate_08008e44(new_value_1 - DAT_20000cf4);\n    value_1 = calculate_floating_point_08009054(value_1,DAT_20000ebc);\n    bits_expanded_2 = count_bits_and_manipulate_08008e44(new_value_2 - DAT_20000cf8);\n    bits_expanded_2 = calculate_floating_point_08009054(bits_expanded_2,DAT_20000ec0);\n    bits_expanded_3 = count_bits_and_manipulate_08008e44(new_value_3 - DAT_20000cfc);\n    bits_expanded_3 = calculate_floating_point_08009054(bits_expanded_3,DAT_20000ec4);\n    floating_value_1 = calculate_floating_point_value_08008eec(value_1,value_1);\n    floating_value_2 = calculate_floating_point_value_08008eec(bits_expanded_2,bits_expanded_2);\n    floating_value_1 = calculate_float_value_08008cdc(floating_value_1,floating_value_2);\n    floating_value_2 = calculate_floating_point_value_08008eec(bits_expanded_3,bits_expanded_3);\n    floating_value_1 = calculate_float_value_08008cdc(floating_value_1,floating_value_2);\n    bits_expanded_1 = expand_bits_08008590(floating_value_1);\n    bits_expanded_1 = process_data_080098d0((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n    floating_value_1 = calculate_float_offset_08008c30((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + offset) = floating_value_1;\n    floating_value_1 = calculate_floating_point_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + offset));\n    if (flag == '\\0') {\n      result_2 = calculate_floating_point_value_08008eec(input_4,floating_value_1);\n    }\n    else {\n      result_2 = calculate_floating_point_08009054(0x3f800000,input_4);\n    }\n    floating_value_2 = calculate_floating_point_value_08008eec(*(undefined4 *)(&DAT_20000890 + offset),result_2);\n    *(undefined4 *)(&DAT_20000884 + offset) = floating_value_2;\n    floating_value_2 = count_bits_and_manipulate_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    floating_value_2 = calculate_floating_point_value_08008eec(floating_value_2,result_2);\n    bits_expanded_1 = expand_bits_08008590(floating_value_2);\n    bits_expanded_1 = calculate_reversed_value_08009318((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n    floating_value_2 = check_and_adjust_values_08008bf0((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + offset) = floating_value_2;\n    floating_value_2 = count_bits_and_manipulate_08008e44(*(undefined4 *)(&DAT_20000880 + offset));\n    floating_value_2 = calculate_floating_point_value_08008eec(floating_value_2,floating_value_1);\n    floating_value_2 = calculate_floating_point_value_08008eec(floating_value_2,DAT_20000edc);\n    floating_value_2 = calculate_floating_point_08009054(floating_value_2,0x453b8000);\n    bits_expanded_1 = expand_bits_08008590(floating_value_2);\n    bits_expanded_1 = calculate_reversed_value_08009318((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n    floating_value_2 = calculate_result_08008ba0((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + offset) = floating_value_2;\n    maximum_value = calculate_floating_point_value_08008eec(value_1,floating_value_1);\n    value_1 = calculate_floating_point_value_08008eec(bits_expanded_2,floating_value_1);\n    bits_expanded_2 = calculate_floating_point_value_08008eec(bits_expanded_3,floating_value_1);\n    result_1 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (absolute_value = is_concatenation_successful_08009264(DAT_20000d0c,0), absolute_value != 0)) {\n      bits_expanded_3 = calculate_floating_point_value_08008eec(DAT_20000d00 ^ 0x80000000,maximum_value);\n      floating_value_1 = calculate_floating_point_value_08008eec(DAT_20000d04,value_1);\n      bits_expanded_3 = calculate_pseudo_float_08008cd8(bits_expanded_3,floating_value_1);\n      floating_value_1 = calculate_floating_point_value_08008eec(DAT_20000d08,bits_expanded_2);\n      bits_expanded_3 = calculate_pseudo_float_08008cd8(bits_expanded_3,floating_value_1);\n      bits_expanded_1 = expand_bits_08008590(bits_expanded_3);\n      absolute_value = is_argument_null_08008b24((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20),0x66666666,0x3fee6666);\n      if (absolute_value != 0) {\n        absolute_value = check_if_concatenation_empty_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + offset));\n        result_1 = DAT_20000d0c;\n        if (absolute_value == 0) {\n          result_1 = *(undefined4 *)(&DAT_20000884 + offset);\n        }\n        bits_expanded_1 = expand_bits_08008590(bits_expanded_3);\n        absolute_value = check_if_null_terminate_08008b60((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20),0x66666666,0xbfee6666);\n        if (absolute_value != 0) {\n          bits_expanded_1 = expand_bits_08008590(bits_expanded_3);\n          bits_expanded_1 = calculate_result_080082d0(0,0x3ff00000,(int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n          bits_expanded_1 = calculate_hash_08008640((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20),0,0x3fe00000);\n          bits_expanded_1 = process_data_080098d0((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n          bits_expanded_3 = calculate_float_offset_08008c30((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n          bits_expanded_1 = expand_bits_08008590(result_1);\n          floating_value_1 = calculate_floating_point_value_08008eec(DAT_20000edc,DAT_20000ee0);\n          floating_value_1 = calculate_floating_point_value_08008eec(floating_value_1,bits_expanded_3);\n          value_15 = expand_bits_08008590(floating_value_1);\n          value_16 = expand_bits_08008590(bits_expanded_3);\n          value_16 = calculate_result_080082d0(0,0x3ff00000,(int)value_16,(int)((ulonglong)value_16 >> 0x20));\n          value_15 = convert_to_ieee754_08008894((int)value_15,(int)((ulonglong)value_15 >> 0x20),(int)value_16,\n                                (int)((ulonglong)value_16 >> 0x20));\n          value_15 = process_data_080098d0((int)value_15,(int)((ulonglong)value_15 >> 0x20));\n          absolute_value = is_argument_null_08008b24((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20),(int)value_15,\n                                (int)((ulonglong)value_15 >> 0x20));\n          if (absolute_value == 0) {\n            floating_value_1 = calculate_floating_point_value_08008eec(DAT_20000edc,DAT_20000ee0);\n            floating_value_1 = calculate_floating_point_value_08008eec(floating_value_1,bits_expanded_3);\n            bits_expanded_1 = expand_bits_08008590(floating_value_1);\n            value_15 = expand_bits_08008590(bits_expanded_3);\n            value_15 = calculate_result_080082d0(0,0x3ff00000,(int)value_15,(int)((ulonglong)value_15 >> 0x20));\n            bits_expanded_1 = convert_to_ieee754_08008894((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20),(int)value_15,\n                                  (int)((ulonglong)value_15 >> 0x20));\n            bits_expanded_1 = process_data_080098d0((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n            result_1 = calculate_float_offset_08008c30((int)bits_expanded_1,(int)((ulonglong)bits_expanded_1 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + offset) = result_1;\n    floating_value_1 = calculate_float_offset_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + offset));\n    absolute_value = check_if_concatenation_empty_08009228(result_1,floating_value_1);\n    bits_expanded_3 = floating_value_1;\n    if (absolute_value != 0) {\n      bits_expanded_3 = result_1;\n    }\n    *(undefined4 *)(&DAT_20000888 + offset) = bits_expanded_3;\n    absolute_value = check_concatenation_result_08009250(floating_value_1,*(undefined4 *)(&DAT_20000884 + offset));\n    if (absolute_value == 0) {\n      (&DAT_20000895)[offset] = 0;\n    }\n    else {\n      (&DAT_20000895)[offset] = 1;\n    }\n    (&DAT_20000894)[offset] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + offset);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maximum_value;\n    DAT_20000d04 = value_1;\n    DAT_20000d08 = bits_expanded_2;\n    DAT_20000cf2 = increment_and_bound_08002870(DAT_20000cf2);\n    DAT_20000cf4 = new_value_1;\n    DAT_20000cf8 = new_value_2;\n    DAT_20000cfc = new_value_3;\n    process_and_adjust_values_08003004_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "process_and_adjust_values_08003004",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "flag",
                "uVar1": "value_1",
                "iVar2": "new_value_1",
                "uVar14": "bits_expanded_1",
                "iVar3": "new_value_2",
                "uVar5": "bits_expanded_2",
                "iVar4": "new_value_3",
                "uVar6": "bits_expanded_3",
                "uVar7": "floating_value_1",
                "uVar8": "floating_value_2",
                "uVar9": "maximum_value",
                "uVar13": "maximum_value_2",
                "iVar10": "offset",
                "puVar11": "pointer_1",
                "iVar12": "absolute_value",
                "local_20": "result_1",
                "local_1c": "result_2"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_data_080035ec",
            "code": "\nvoid initializeData_080035ec(undefined4 dataParam1,undefined4 dataParam2,undefined4 dataParam3)\n\n{\n  DAT_20000cf4 = dataParam1;\n  DAT_20000cf8 = dataParam2;\n  DAT_20000cfc = dataParam3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_data_080035ec",
                "param_1": "dataParam1",
                "param_2": "dataParam2",
                "param_3": "dataParam3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_floating_point_values_08003618",
            "code": "\nvoid updateFloatingPointValues_08003618(undefined4 inputValue)\n\n{\n  undefined4 manipulatedValue;\n  int index;\n  undefined4 floatingPointValue;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  floatingPointValue = *(undefined4 *)(&DAT_20000890 + index);\n  manipulatedValue = countAndManipulateBits(inputValue);\n  manipulatedValue = calculateFloatingPointValue(floatingPointValue,manipulatedValue);\n  floatingPointValue = countAndManipulateBits(*(undefined4 *)(&DAT_20000880 + index));\n  manipulatedValue = calculateFloatingPoint(manipulatedValue,floatingPointValue);\n  *(undefined4 *)(&DAT_20000890 + index) = manipulatedValue;\n  *(undefined4 *)(&DAT_20000880 + index) = inputValue;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  processAndAdjustValues();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_floating_point_values_08003618",
                "param_1": "inputValue",
                "uVar1": "manipulatedValue",
                "iVar2": "index",
                "uVar3": "floatingPointValue",
                "count_bits_and_manipulate_08008e44": "countAndManipulateBits",
                "calculate_floating_point_value_08008eec": "calculateFloatingPointValue",
                "calculate_floating_point_08009054": "calculateFloatingPoint",
                "process_and_adjust_values_08002edc": "processAndAdjustValues"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "write_string_to_register_0800369c",
            "code": "\nvoid write_string_to_register_0800369c(char *string)\n\n{\n  char *current_character;\n  \n  current_character = string;\n  while (*current_character != '\\0') {\n    write_byte_to_register_08008250(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "write_string_to_register_0800369c",
                "param_1": "string",
                "local_c": "current_character"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "write_string_to_register_080036c6",
            "code": "\nvoid write_string_to_register_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    write_byte_to_register_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "write_string_to_register_080036c6",
                "param_1": "string",
                "local_c": "current_char"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "write_bits_from_msb_080036f0",
            "code": "\nvoid writeBitsFromMSB_080036f0(uint inputData,int bitCount)\n\n{\n  undefined4 outputBit;\n  int bitIndex;\n  uint bitMask;\n  \n  bitMask = 1 << (bitCount - 1U & 0xff);\n  for (bitIndex = 0; bitIndex < bitCount; bitIndex = bitIndex + 1) {\n    if ((bitMask & inputData) == 0) {\n      outputBit = 0x30;\n    }\n    else {\n      outputBit = 0x31;\n    }\n    write_byte_to_register_08008250(outputBit);\n    bitMask = bitMask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "write_bits_from_msb_080036f0",
                "param_1": "inputData",
                "param_2": "bitCount",
                "local_10": "bitIndex",
                "local_c": "bitMask",
                "uVar1": "outputBit"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "write_8bits_from_msb_08003740",
            "code": "\nvoid write_8bits_from_MSB_08003740(undefined input_data)\n\n{\n  write_bits_from_MSB(input_data,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "write_8bits_from_msb_08003740",
                "param_1": "input_data",
                "write_bits_from_msb_080036f0": "write_bits_from_MSB"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "write_bits_from_msb_0800375c",
            "code": "\nvoid writeBitsFromMSB_0800375c(undefined2 data)\n\n{\n  writeBitsFromMSB_0800375c(data,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "write_bits_from_msb_0800375c",
                "param_1": "data",
                "write_bits_from_msb_080036f0": "writeBitsFromMSB"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "write_number_as_string_08003778",
            "code": "\nvoid write_number_as_string_08003778(uint number)\n\n{\n  uint temp;\n  uint dividend;\n  char digits [12];\n  byte num_digits;\n  \n  num_digits = 0;\n  dividend = number;\n  if (number == 0) {\n    write_byte_to_register_08008250(0x30);\n  }\n  else {\n    for (; dividend != 0; dividend = dividend / 10) {\n      temp = (uint)num_digits;\n      num_digits = num_digits + 1;\n      digits[temp + 1] = (char)(dividend % 10) + '0';\n    }\n    for (; num_digits != 0; num_digits = num_digits - 1) {\n      write_byte_to_register_08008250(digits[num_digits]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "write_number_as_string_08003778",
                "param_1": "number",
                "uVar1": "temp",
                "local_1c": "dividend",
                "acStack_15": "digits",
                "local_9": "num_digits"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int number)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = number;\n  if (number < 0) {\n    write_byte_to_register_08008250(0x2d);\n    absoluteValue = -number;\n  }\n  write_number_as_string_08003778(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "number",
                "local_c": "absoluteValue"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "format_and_print_floating_point_08003826",
            "code": "\nvoid formatAndPrintFloatingPoint_08003826(uint value)\n\n{\n  int isEmpty;\n  undefined4 floatValue;\n  byte byteValue;\n  uint tempValue;\n  uint formattedValue;\n  char formattedString [13];\n  uint numValue;\n  byte currentPos;\n  byte loopCount;\n  \n  isEmpty = check_if_concatenation_empty_08009228(value,0);\n  formattedValue = value;\n  if (isEmpty != 0) {\n    write_byte_to_register_08008250(0x2d);\n    formattedValue = value ^ 0x80000000;\n  }\n  for (loopCount = DAT_20000ef9; 1 < loopCount; loopCount = loopCount - 2) {\n    formattedValue = calculate_floating_point_value_08008eec(formattedValue,0x42c80000);\n  }\n  if (loopCount != 0) {\n    formattedValue = calculate_floating_point_value_08008eec(formattedValue,0x41200000);\n  }\n  floatValue = calculate_float_value_08008cdc(formattedValue,0x3f000000);\n  currentPos = 0;\n  numValue = convert_to_signed_int_08009278(floatValue);\n  formattedString[DAT_20000ef9 + 1] = '.';\n  for (; numValue != 0; numValue = numValue / 10) {\n    if (currentPos == DAT_20000ef9) {\n      currentPos = currentPos + 1;\n    }\n    tempValue = (uint)currentPos;\n    currentPos = currentPos + 1;\n    formattedString[tempValue + 1] = (char)(numValue % 10) + '0';\n  }\n  while (currentPos < DAT_20000ef9) {\n    tempValue = (uint)currentPos;\n    currentPos = currentPos + 1;\n    formattedString[tempValue + 1] = '0';\n  }\n  if (currentPos == DAT_20000ef9) {\n    byteValue = currentPos + 1;\n    currentPos = currentPos + 2;\n    formattedString[byteValue + 1] = '0';\n  }\n  for (; currentPos != 0; currentPos = currentPos - 1) {\n    write_byte_to_register_08008250(formattedString[currentPos]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "format_and_print_floating_point_08003826",
                "param_1": "value",
                "iVar1": "isEmpty",
                "uVar2": "floatValue",
                "bVar3": "byteValue",
                "uVar4": "tempValue",
                "local_24": "formattedValue",
                "acStack_1d": "formattedString",
                "local_10": "numValue",
                "local_a": "currentPos",
                "local_9": "loopCount"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_and_print_grbl_version_080039a0",
            "code": "\nvoid initialize_and_print_grbl_version_080039a0(void)\n\n{\n  initialize_data();\n  print_grbl_version();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_and_print_grbl_version_080039a0",
                "initialize_data_08003980": "initialize_data",
                "print_grbl_version_08004228": "print_grbl_version"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "validate_and_update_data_080039bc",
            "code": "\nvoid validateAndUpdateData_080039bc(void)\n\n{\n  int validationResult;\n  undefined4 errorCode;\n  byte counter;\n  \n  for (counter = 0; counter < 2; counter = counter + 1) {\n    validationResult = validate_and_update_data_08004d2c(counter,&DAT_20000d10);\n    if (validationResult == 0) {\n      display_error_message_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      write_string_to_register_0800369c(&DAT_20000d10);\n      errorCode = process_binary_code_080005b4(&DAT_20000d10);\n      display_error_message_08004030(errorCode);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "validate_and_update_data_080039bc",
                "local_9": "counter",
                "iVar1": "validationResult",
                "uVar2": "errorCode"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "update_status_flags_08003a18",
            "code": "\nvoid updateStatusFlags_08003a18(uint inputFlag)\n\n{\n  if ((inputFlag & 0x80) == 0) {\n    if ((inputFlag & 0x40) == 0) {\n      if ((inputFlag & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initialize_system_080025e8();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "update_status_flags_08003a18",
                "param_1": "inputFlag"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "handle_alarm_update_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid handleAlarmUpdate_08003a74(void)\n\n{\n  byte byteValue;\n  \n  byteValue = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        displayAlarmMessage(0xffffffff);\n        displayStatusMessage(1);\n        do {\n        } while( true );\n      }\n      displayAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((byteValue & 0x10) == 0) {\n      if ((byteValue & 1) != 0) {\n        printMachineAndWorkPositionStatus();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((byteValue & 8) != 0) {\n        updateDataState();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((byteValue & 4) != 0) {\n        initializeData();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((byteValue & 2) != 0) {\n        initializeAndUpdateData();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "handle_alarm_update_08003a74",
                "bVar1": "byteValue",
                "display_alarm_message_08004148": "displayAlarmMessage",
                "display_status_message_080041a0": "displayStatusMessage",
                "print_machine_and_work_position_status_08004940": "printMachineAndWorkPositionStatus",
                "update_data_state_0800587c": "updateDataState",
                "initialize_data_080058a0": "initializeData",
                "initialize_and_update_data_0800585c": "initializeAndUpdateData"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_user_input_08003b98",
            "code": "\nuint processUserInput_08003b98(char *inputString)\n\n{\n  byte currentChar;\n  int tempVariable;\n  undefined4 uVar3;\n  uint returnValue;\n  undefined8 shiftedValue;\n  undefined4 parsedValue1;\n  undefined4 parsedValue2;\n  byte currentIndex;\n  byte isSecondInput;\n  \n  if (*inputString != '$') {\n    returnValue = process_binary_code_080005b4(inputString);\n    return returnValue;\n  }\n  currentIndex = 1;\n  isSecondInput = '\\0';\n  currentChar = inputString[1];\n  if (currentChar == 0) {\n    print_grbl_menu_0800423c();\n    return 0;\n  }\n  if ((0x58 < currentChar) || (currentChar < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(currentChar) {\n  case 0x23:\n    currentIndex = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    format_and_print_floating_points_080044e8();\n    break;\n  case 0x24:\n    currentIndex = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    print_configuration_08004250();\n    break;\n  case 0x43:\n    currentIndex = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_system_080025e8();\n      display_status_message_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_status_message_080041a0(4);\n    }\n    break;\n  case 0x47:\n    currentIndex = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    display_information_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_and_handle_alarm_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      validate_and_update_data_080039bc();\n    }\n    break;\n  case 0x4e:\n    currentIndex = 2;\n    if (inputString[2] == '\\0') {\n      for (isSecondInput = 0; isSecondInput < 2; isSecondInput = isSecondInput + 1) {\n        tempVariable = validate_and_update_data_08004d2c(isSecondInput,inputString);\n        if (tempVariable == 0) {\n          display_error_message_08004030(10);\n        }\n        else {\n          print_absolute_value_08004900(isSecondInput,inputString);\n        }\n      }\n      return 0;\n    }\n    isSecondInput = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    tempVariable = parse_integer_08002638(inputString,&currentIndex,&parsedValue2);\n    if (tempVariable == 0) {\n      return 1;\n    }\n    currentChar = currentIndex + 1;\n    if (inputString[currentIndex] != '=') {\n      return 3;\n    }\n    currentIndex = currentChar;\n    if (isSecondInput == '\\0') {\n      tempVariable = parse_integer_08002638(inputString,&currentIndex,&parsedValue1);\n      if (tempVariable == 0) {\n        return 1;\n      }\n      if (inputString[currentIndex] == '\\0') {\n        uVar3 = convert_to_signed_int_08009278(parsedValue2);\n        returnValue = process_input_08004e30(uVar3,parsedValue1);\n        return returnValue;\n      }\n      return 3;\n    }\n    do {\n      inputString[(uint)currentIndex - (uint)currentChar] = inputString[currentIndex];\n      returnValue = (uint)currentIndex;\n      currentIndex = currentIndex + 1;\n    } while (inputString[returnValue] != '\\0');\n    isSecondInput = currentChar;\n    isSecondInput = process_binary_code_080005b4(inputString);\n    if (isSecondInput != 0) {\n      return (uint)isSecondInput;\n    }\n    shiftedValue = expand_bits_08008590(parsedValue2);\n    shiftedValue = calculate_shifted_value_08009798((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20));\n    isSecondInput = check_and_adjust_values_08008bf0((int)shiftedValue,(int)((ulonglong)shiftedValue >> 0x20));\n    update_and_store_data_08004bc0(isSecondInput,inputString);\n    break;\n  case 0x58:\n    currentIndex = 2;\n    if (inputString[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_status_message_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_user_input_08003b98",
                "param_1": "inputString",
                "uVar4": "returnValue",
                "uVar5": "shiftedValue",
                "local_14": "parsedValue1",
                "local_10": "parsedValue2",
                "local_a": "currentIndex",
                "local_9": "isSecondInput",
                "bVar1": "currentChar",
                "iVar2": "tempVariable"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_input_data_08003f34",
            "code": "\nvoid process_input_data_08003f34(void)\n\n{\n  byte byteValue;\n  undefined4 errorCode;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      byteValue = checkFlagAndProcessByte();\n      if (byteValue == 0xff) {\n        return;\n      }\n      if ((byteValue == 10) || (byteValue == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < byteValue) && (byteValue != 0x2f)) {\n          if (byteValue == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            displayErrorMessage(0xd);\n            initializeData();\n          }\n          else if ((byteValue < 0x61) || (0x7a < byteValue)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byteValue;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = byteValue - 0x20;\n          }\n        }\n      }\n      else if (byteValue == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    handleAlarmUpdate();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      displayErrorMessage(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      errorCode = processUserInput(&DAT_20000d10);\n      displayErrorMessage(errorCode);\n    }\n    initializeData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_input_data_08003f34",
                "bVar1": "byteValue",
                "uVar2": "errorCode",
                "uVar3": "index",
                "check_flag_and_process_byte_08008286": "checkFlagAndProcessByte",
                "display_error_message_08004030": "displayErrorMessage",
                "initialize_data_08003980": "initializeData",
                "handle_alarm_update_08003a74": "handleAlarmUpdate",
                "process_user_input_08003b98": "processUserInput"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "display_error_message_08004030",
            "code": "\nvoid displayErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    writeErrorMessage(&DAT_0800b5c8);\n  }\n  else {\n    writeErrorMessage(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      writeErrorMessage(\"Bad number format\");\n      break;\n    case '\\x02':\n      writeErrorMessage(\"Expected command letter\");\n      break;\n    case '\\x03':\n      writeErrorMessage(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      writeErrorMessage(\"Invalid radius\");\n      break;\n    case '\\x05':\n      writeErrorMessage(\"Modal group violation\");\n      break;\n    case '\\x06':\n      writeErrorMessage(\"Invalid statement\");\n      break;\n    case '\\a':\n      writeErrorMessage(\"Setting disabled\");\n      break;\n    case '\\b':\n      writeErrorMessage(\"Value < 0.0\");\n      break;\n    case '\\t':\n      writeErrorMessage(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      writeErrorMessage(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      writeErrorMessage(\"Busy or queued\");\n      break;\n    case '\\f':\n      writeErrorMessage(\"Alarm lock\");\n      break;\n    case '\\r':\n      writeErrorMessage(\"Line overflow\");\n    }\n    writeErrorMessage(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "display_error_message_08004030",
                "param_1": "errorCode",
                "write_string_to_register_080036c6": "writeErrorMessage"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  writeToRegister(\"ALARM: \");\n  if (errorCode == -2) {\n    writeToRegister(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    writeToRegister(\"Hard limit\");\n  }\n  writeToRegister(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "write_string_to_register_080036c6": "writeToRegister"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_status_message_080041a0",
            "code": "\nvoid displayStatusMessage_080041a0(undefined status)\n\n{\n  writeMessageToRegister(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    writeMessageToRegister(\"Reset to continue\");\n    break;\n  case 2:\n    writeMessageToRegister(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    writeMessageToRegister(\"Caution: Unlocked\");\n    break;\n  case 4:\n    writeMessageToRegister(\"Enabled\");\n    break;\n  case 5:\n    writeMessageToRegister(\"Disabled\");\n  }\n  writeMessageToRegister(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "status",
                "write_string_to_register_080036c6": "writeMessageToRegister"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\nvoid printGrblVersion_08004228(void)\n\n{\n  writeToRegister(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "write_string_to_register_080036c6": "writeToRegister"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_grbl_menu_0800423c",
            "code": "\nvoid printGrblMenu_0800423c(void)\n\n{\n  writeToRegister(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_grbl_menu_0800423c",
                "write_string_to_register_080036c6": "writeToRegister"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configuration_08004250",
            "code": "\nvoid printConfiguration_08004250(void)\n\n{\n  undefined4 acceleration;\n  \n  writeStringToRegister(&DAT_0800b8b8);\n  formatAndPrintFloat(DAT_20000ebc);\n  writeStringToRegister(\" (x, step/mm)\\r\\n$1=\");\n  formatAndPrintFloat(DAT_20000ec0);\n  writeStringToRegister(\" (y, step/mm)\\r\\n$2=\");\n  formatAndPrintFloat(DAT_20000ec4);\n  writeStringToRegister(\" (z, step/mm)\\r\\n$3=\");\n  printAbsoluteValue(DAT_20000ec9);\n  writeStringToRegister(\" (step pulse, usec)\\r\\n$4=\");\n  formatAndPrintFloat(DAT_20000ecc);\n  writeStringToRegister(\" (default feed, mm/min)\\r\\n$5=\");\n  formatAndPrintFloat(DAT_20000ed0);\n  writeStringToRegister(\" (default seek, mm/min)\\r\\n$6=\");\n  printAbsoluteValue(DAT_20000ed4);\n  writeStringToRegister(\" (step port invert mask, int:\");\n  writeBitsFromMsb(DAT_20000ed4);\n  writeStringToRegister(\")\\r\\n$7=\");\n  printAbsoluteValue(DAT_20000ef8);\n  writeStringToRegister(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration = calculate_floating_point_08009054(DAT_20000edc,0x45610000);\n  formatAndPrintFloat(acceleration);\n  writeStringToRegister(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  formatAndPrintFloat(DAT_20000ee0);\n  writeStringToRegister(\" (junction deviation, mm)\\r\\n$10=\");\n  formatAndPrintFloat(DAT_20000ed8);\n  writeStringToRegister(\" (arc, mm/segment)\\r\\n$11=\");\n  printAbsoluteValue(DAT_20000efa);\n  writeStringToRegister(\" (n-arc correction, int)\\r\\n$12=\");\n  printAbsoluteValue(DAT_20000ef9);\n  writeStringToRegister(\" (n-decimals, int)\\r\\n$13=\");\n  printAbsoluteValue((DAT_20000ee4 & 1) != 0);\n  writeStringToRegister(\" (report inches, bool)\\r\\n$14=\");\n  printAbsoluteValue((DAT_20000ee4 & 2) != 0);\n  writeStringToRegister(\" (auto start, bool)\\r\\n$15=\");\n  printAbsoluteValue((DAT_20000ee4 & 4) != 0);\n  writeStringToRegister(\" (invert step enable, bool)\\r\\n$16=\");\n  printAbsoluteValue((DAT_20000ee4 & 8) != 0);\n  writeStringToRegister(\" (hard limits, bool)\\r\\n$17=\");\n  printAbsoluteValue((DAT_20000ee4 & 0x10) != 0);\n  writeStringToRegister(\" (homing cycle, bool)\\r\\n$18=\");\n  printAbsoluteValue(DAT_20000ee6);\n  writeStringToRegister(\" (homing dir invert mask, int:\");\n  writeBitsFromMsb(DAT_20000ee6);\n  writeStringToRegister(\")\\r\\n$19=\");\n  formatAndPrintFloat(DAT_20000ee8);\n  writeStringToRegister(\" (homing feed, mm/min)\\r\\n$20=\");\n  formatAndPrintFloat(DAT_20000eec);\n  writeStringToRegister(\" (homing seek, mm/min)\\r\\n$21=\");\n  printAbsoluteValue(DAT_20000ef0);\n  writeStringToRegister(\" (homing debounce, msec)\\r\\n$22=\");\n  formatAndPrintFloat(DAT_20000ef4);\n  writeStringToRegister(\" (homing pull-off, mm)\\r\\n$23=\");\n  printAbsoluteValue(DAT_20000ed6);\n  writeStringToRegister(\" (dir port invert mask, int:\");\n  writeBitsFromMsb(DAT_20000ed6);\n  writeStringToRegister(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configuration_08004250",
                "uVar1": "acceleration",
                "write_string_to_register_080036c6": "writeStringToRegister",
                "format_and_print_floating_point_08003826": "formatAndPrintFloat",
                "print_absolute_value_080037fc": "printAbsoluteValue",
                "write_bits_from_msb_0800375c": "writeBitsFromMsb"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "format_and_print_floating_points_080044e8",
            "code": "\nvoid formatAndPrintFloatingPoints_080044e8(void)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined8 uVar3;\n  undefined4 dataValues [3];\n  byte index;\n  byte loopCounter;\n  \n  loopCounter = 0;\n  while( true ) {\n    if (7 < loopCounter) {\n      writeStringToRegister(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          formatAndPrintFloatPoint(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          uVar3 = expandBits(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          uVar3 = calculateHash((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),0x57e16865,0x3fa42851);\n          uVar2 = calculateFloatOffset((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n          formatAndPrintFloatPoint(uVar2);\n        }\n        if (index < 2) {\n          writeStringToRegister(&DAT_0800bbbc);\n        }\n        else {\n          writeStringToRegister(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    iVar1 = checkAndUpdateData(loopCounter,dataValues);\n    if (iVar1 == 0) break;\n    writeStringToRegister(&DAT_0800bb98);\n    switch(loopCounter) {\n    case 0:\n      writeStringToRegister(&DAT_0800bb9c);\n      break;\n    case 1:\n      writeStringToRegister(&DAT_0800bba0);\n      break;\n    case 2:\n      writeStringToRegister(&DAT_0800bba4);\n      break;\n    case 3:\n      writeStringToRegister(&DAT_0800bba8);\n      break;\n    case 4:\n      writeStringToRegister(&DAT_0800bbac);\n      break;\n    case 5:\n      writeStringToRegister(&DAT_0800bbb0);\n      break;\n    case 6:\n      writeStringToRegister(&DAT_0800bbb4);\n      break;\n    case 7:\n      writeStringToRegister(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        formatAndPrintFloatPoint(dataValues[index]);\n      }\n      else {\n        uVar3 = expandBits(dataValues[index]);\n        uVar3 = calculateHash((int)uVar3,(int)((ulonglong)uVar3 >> 0x20),0x57e16865,0x3fa42851);\n        uVar2 = calculateFloatOffset((int)uVar3,(int)((ulonglong)uVar3 >> 0x20));\n        formatAndPrintFloatPoint(uVar2);\n      }\n      if (index < 2) {\n        writeStringToRegister(&DAT_0800bbbc);\n      }\n      else {\n        writeStringToRegister(&DAT_0800b764);\n      }\n    }\n    loopCounter = loopCounter + 1;\n  }\n  displayErrorMessage(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "format_and_print_floating_points_080044e8",
                "auStack_18": "dataValues",
                "local_a": "index",
                "local_9": "loopCounter",
                "display_error_message_08004030": "displayErrorMessage",
                "write_string_to_register_080036c6": "writeStringToRegister",
                "check_and_update_data_08004d7c": "checkAndUpdateData",
                "format_and_print_floating_point_08003826": "formatAndPrintFloatPoint",
                "expand_bits_08008590": "expandBits",
                "calculate_hash_08008640": "calculateHash",
                "calculate_float_offset_08008c30": "calculateFloatOffset"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "display_information_080046d0",
            "code": "\nvoid displayInformation_080046d0(void)\n\n{\n  undefined4 offset;\n  undefined8 hashValue;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    write_string_to_register_080036c6(&DAT_0800bbc8);\n    break;\n  case 1:\n    write_string_to_register_080036c6(&DAT_0800bbcc);\n    break;\n  case 2:\n    write_string_to_register_080036c6(&DAT_0800bbd0);\n    break;\n  case 3:\n    write_string_to_register_080036c6(&DAT_0800bbd4);\n    break;\n  case 4:\n    write_string_to_register_080036c6(&DAT_0800bbd8);\n  }\n  write_string_to_register_080036c6(&DAT_0800bbe0);\n  print_absolute_value_080037fc(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      write_string_to_register_080036c6(&DAT_0800bbe4);\n    }\n    else {\n      write_string_to_register_080036c6(&DAT_0800bbec);\n    }\n  }\n  else {\n    write_string_to_register_080036c6(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    write_string_to_register_080036c6(&DAT_0800bc04);\n  }\n  else {\n    write_string_to_register_080036c6(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    write_string_to_register_080036c6(&DAT_0800bc14);\n  }\n  else {\n    write_string_to_register_080036c6(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    write_string_to_register_080036c6(&DAT_0800bc24);\n  }\n  else {\n    write_string_to_register_080036c6(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    write_string_to_register_080036c6(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      write_string_to_register_080036c6(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      write_string_to_register_080036c6(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    write_string_to_register_080036c6(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      write_string_to_register_080036c6(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      write_string_to_register_080036c6(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    write_string_to_register_080036c6(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      write_string_to_register_080036c6(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      write_string_to_register_080036c6(&DAT_0800bc48);\n    }\n  }\n  write_string_to_register_080036c6(&DAT_0800bc50);\n  print_absolute_value_080037fc(DAT_20000e88);\n  write_string_to_register_080036c6(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    format_and_print_floating_point_08003826(DAT_20000e78);\n  }\n  else {\n    hashValue = expand_bits_08008590(DAT_20000e78);\n    hashValue = calculate_hash_08008640((int)hashValue,(int)((ulonglong)hashValue >> 0x20),0x57e16865,0x3fa42851);\n    offset = calculate_float_offset_08008c30((int)hashValue,(int)((ulonglong)hashValue >> 0x20));\n    format_and_print_floating_point_08003826(offset);\n  }\n  write_string_to_register_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "display_information_080046d0",
                "uVar1": "offset",
                "uVar2": "hashValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_absolute_value_08004900",
            "code": "\nvoid print_absolute_value_08004900(undefined value,undefined4 parameter)\n\n{\n  write_register_1(&DAT_0800bc58);\n  print_abs_value(value);\n  write_register_1(&DAT_0800bc5c);\n  write_register_2(parameter);\n  write_register_1(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_absolute_value_08004900",
                "param_1": "value",
                "param_2": "parameter",
                "write_string_to_register_080036c6": "write_register_1",
                "print_absolute_value_080037fc": "print_abs_value",
                "write_string_to_register_0800369c": "write_register_2"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_machine_and_work_position_status_08004940",
            "code": "\nvoid printMachineAndWorkPositionStatus_08004940(void)\n\n{\n  undefined4 bitsCount;\n  uint axisIndex_uint;\n  undefined4 floatValue;\n  undefined8 expandedBits;\n  undefined8 hashValue;\n  undefined4 positionDataArray [6];\n  byte axisIndex;\n  \n  positionDataArray[3] = DAT_20000eac;\n  positionDataArray[4] = DAT_20000eb0;\n  positionDataArray[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    write_string_to_register_080036c6(\"<Idle\");\n    break;\n  case 2:\n    write_string_to_register_080036c6(\"<Queue\");\n    break;\n  case 3:\n    write_string_to_register_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    write_string_to_register_080036c6(\"<Hold\");\n    break;\n  case 5:\n    write_string_to_register_080036c6(\"<Home\");\n    break;\n  case 6:\n    write_string_to_register_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    write_string_to_register_080036c6(\"<Check\");\n  }\n  write_string_to_register_080036c6(\",MPos:\");\n  for (axisIndex = 0; axisIndex < 3; axisIndex = axisIndex + 1) {\n    bitsCount = count_bits_and_manipulate_08008e44(positionDataArray[axisIndex + 3]);\n    axisIndex_uint = (uint)axisIndex;\n    bitsCount = calculate_floating_point_08009054(bitsCount,(&DAT_20000ebc)[axisIndex]);\n    positionDataArray[axisIndex_uint] = bitsCount;\n    if ((DAT_20000ee4 & 1) != 0) {\n      expandedBits = expand_bits_08008590(positionDataArray[axisIndex]);\n      expandedBits = calculate_hash_08008640((int)expandedBits,(int)((ulonglong)expandedBits >> 0x20),0x57e16865,0x3fa42851);\n      axisIndex_uint = (uint)axisIndex;\n      bitsCount = calculate_float_offset_08008c30((int)expandedBits,(int)((ulonglong)expandedBits >> 0x20));\n      positionDataArray[axisIndex_uint] = bitsCount;\n    }\n    format_and_print_floating_point_08003826(positionDataArray[axisIndex]);\n    write_string_to_register_080036c6(&DAT_0800bbbc);\n  }\n  write_string_to_register_080036c6(\"WPos:\");\n  for (axisIndex = 0; axisIndex < 3; axisIndex = axisIndex + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      floatValue = positionDataArray[axisIndex];\n      bitsCount = calculate_float_value_08008cdc(*(undefined4 *)(&DAT_20000e70 + (axisIndex + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (axisIndex + 10) * 4));\n      axisIndex_uint = (uint)axisIndex;\n      bitsCount = calculate_pseudo_float_08008cd8(floatValue,bitsCount);\n      positionDataArray[axisIndex_uint] = bitsCount;\n    }\n    else {\n      expandedBits = expand_bits_08008590(positionDataArray[axisIndex]);\n      bitsCount = calculate_float_value_08008cdc(*(undefined4 *)(&DAT_20000e70 + (axisIndex + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (axisIndex + 10) * 4));\n      hashValue = expand_bits_08008590(bitsCount);\n      hashValue = calculate_hash_08008640((int)hashValue,(int)((ulonglong)hashValue >> 0x20),0x57e16865,0x3fa42851);\n      expandedBits = calculate_result_080082d0((int)expandedBits,(int)((ulonglong)expandedBits >> 0x20),(int)hashValue,\n                           (int)((ulonglong)hashValue >> 0x20));\n      axisIndex_uint = (uint)axisIndex;\n      bitsCount = calculate_float_offset_08008c30((int)expandedBits,(int)((ulonglong)expandedBits >> 0x20));\n      positionDataArray[axisIndex_uint] = bitsCount;\n    }\n    format_and_print_floating_point_08003826(positionDataArray[axisIndex]);\n    if (axisIndex < 2) {\n      write_string_to_register_080036c6(&DAT_0800bbbc);\n    }\n  }\n  write_string_to_register_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_machine_and_work_position_status_08004940",
                "auStack_2c": "positionDataArray",
                "local_11": "axisIndex",
                "uVar1": "bitsCount",
                "uVar2": "axisIndex_uint",
                "uVar3": "floatValue",
                "uVar4": "expandedBits",
                "uVar5": "hashValue"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "update_and_store_data_08004bc0",
            "code": "\nvoid updateAndStoreData_08004bc0(byte inputByte,undefined4 param4)\n\n{\n  update_and_store_data_08000374((ushort)inputByte * 0x101 + 0x300,param4,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "update_and_store_data_08004bc0",
                "param_1": "inputByte",
                "param_2": "param4"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "update_data_and_store_08004bf4",
            "code": "\nvoid update_data_and_store_08004bf4(byte input_byte,undefined4 input_value)\n\n{\n  update_and_store_data((ushort)input_byte * 0xd + 0x200,input_value,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "update_data_and_store_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_value",
                "update_and_store_data_08000374": "update_and_store_data"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_data_08004c2a",
            "code": "\nvoid initializeData_08004c2a(void)\n\n{\n  storeData(0,5);\n  updateAndStoreData(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a",
                "store_data_08000340": "storeData",
                "update_and_store_data_08000374": "updateAndStoreData"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_config_08004c48",
            "code": "\nvoid initialize_config_08004c48(char flag)\n\n{\n  if (flag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_config_08004c48",
                "param_1": "flag"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "validate_and_update_data_08004d2c",
            "code": "\nbool validate_and_update_data_08004d2c(byte byte_value,undefined *data_pointer)\n\n{\n  int result;\n  \n  result = validate_data(data_pointer,(ushort)byte_value * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *data_pointer = 0;\n    update_and_store_data(byte_value,data_pointer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "validate_and_update_data_08004d2c",
                "param_1": "byte_value",
                "param_2": "data_pointer",
                "iVar1": "result",
                "check_data_080003ec": "validate_data",
                "update_and_store_data_08004bc0": "update_and_store_data"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "check_and_update_data_08004d7c",
            "code": "\nbool checkAndUpdateData_08004d7c(byte dataByte,undefined4 dataBuffer)\n\n{\n  int checkResult;\n  \n  checkResult = check_data_080003ec(dataBuffer,(ushort)dataByte * 0xd + 0x200,0xc);\n  if (checkResult == 0) {\n    fill_with_byte_0800b430(dataBuffer,0,0xc);\n    update_data_and_store_08004bf4(dataByte,dataBuffer);\n  }\n  return checkResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "check_and_update_data_08004d7c",
                "param_1": "dataByte",
                "param_2": "dataBuffer",
                "iVar1": "checkResult"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "initialize_configuration_08004dd2",
            "code": "\nundefined4 initialize_configuration_08004dd2(void)\n\n{\n  byte data_value;\n  int check_result;\n  \n  data_value = get_data_value_08000310(0);\n  if (data_value == 5) {\n    check_result = check_data_080003ec(&DAT_20000ebc,1,0x40);\n    if (check_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < data_value) {\n      return 0;\n    }\n    check_result = check_data_080003ec(&DAT_20000ebc,1,0x28);\n    if (check_result == 0) {\n      return 0;\n    }\n    initialize_config_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "initialize_configuration_08004dd2",
                "bVar1": "data_value",
                "iVar2": "check_result"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "process_input_08004e30",
            "code": "\nundefined4 processInput_08004e30(int inputType,uint inputValue)\n\n{\n  undefined4 floatingPointValue;\n  int result;\n  undefined8 expandedValue;\n  \n  switch(inputType) {\n  case 0:\n  case 1:\n  case 2:\n    result = check_concatenation_result_0800923c(inputValue,0);\n    if (result != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[inputType] = inputValue;\n    break;\n  case 3:\n    result = check_if_concatenation_empty_08009228(inputValue,0x40400000);\n    if (result != 0) {\n      return 9;\n    }\n    expandedValue = expand_bits_08008590(inputValue);\n    expandedValue = calculate_float_08009654((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    DAT_20000ec9 = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = inputValue;\n    break;\n  case 5:\n    DAT_20000ed0 = inputValue;\n    break;\n  case 6:\n    expandedValue = expand_bits_08008590(inputValue);\n    expandedValue = calculate_shifted_value_08009798((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    DAT_20000ed4 = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    break;\n  case 7:\n    expandedValue = expand_bits_08008590(inputValue);\n    expandedValue = calculate_float_08009654((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    DAT_20000ef8 = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    break;\n  case 8:\n    floatingPointValue = calculate_floating_point_value_08008eec(inputValue,0x42700000);\n    DAT_20000edc = calculate_floating_point_value_08008eec(floatingPointValue,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = inputValue & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = inputValue;\n    break;\n  case 0xb:\n    expandedValue = expand_bits_08008590(inputValue);\n    expandedValue = calculate_float_08009654((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    DAT_20000efa = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    break;\n  case 0xc:\n    expandedValue = expand_bits_08008590(inputValue);\n    expandedValue = calculate_float_08009654((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    DAT_20000ef9 = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    break;\n  case 0xd:\n    result = is_concatenation_successful_08009214(inputValue,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    result = is_concatenation_successful_08009214(inputValue,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    result = is_concatenation_successful_08009214(inputValue,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    result = is_concatenation_successful_08009214(inputValue,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    extract_bit_from_value_0800192c();\n    break;\n  case 0x11:\n    result = is_concatenation_successful_08009214(inputValue,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    expandedValue = expand_bits_08008590(inputValue);\n    expandedValue = calculate_shifted_value_08009798((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    DAT_20000ee6 = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = inputValue;\n    break;\n  case 0x14:\n    DAT_20000eec = inputValue;\n    break;\n  case 0x15:\n    expandedValue = expand_bits_08008590(inputValue);\n    expandedValue = calculate_float_08009654((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    DAT_20000ef0 = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = inputValue;\n    break;\n  case 0x17:\n    expandedValue = expand_bits_08008590(inputValue);\n    expandedValue = calculate_shifted_value_08009798((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    DAT_20000ed6 = check_and_adjust_values_08008bf0((int)expandedValue,(int)((ulonglong)expandedValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "process_input_08004e30",
                "param_1": "inputType",
                "param_2": "inputValue",
                "iVar2": "result",
                "uVar1": "floatingPointValue",
                "uVar3": "expandedValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "initialize_and_check_data_080051b4",
            "code": "\nvoid initialize_and_check_data_080051b4(void)\n\n{\n  int result;\n  undefined configuration [15];\n  byte index;\n  \n  result = initialize_configuration_08004dd2();\n  if (result == 0) {\n    display_error_message_08004030(10);\n    initialize_config_08004c48(1);\n    print_configuration_08004250();\n  }\n  for (index = 0; index < 8; index = index + 1) {\n    result = check_and_update_data_08004d7c(index,configuration);\n    if (result == 0) {\n      display_error_message_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "initialize_and_check_data_080051b4",
                "iVar1": "result",
                "auStack_18": "configuration",
                "local_9": "index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_data_08005238",
            "code": "\nvoid initialize_data_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  execute_initialization();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_data_08005238",
                "execute_initialization_08005250": "execute_initialization"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "execute_initialization_08005250",
            "code": "\nvoid execute_initialization_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "execute_initialization_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "execute_function_0800525c",
            "code": "\nvoid executeFunction_0800525c(byte byteValue)\n\n{\n  if ((int)(char)byteValue != (uint)DAT_20000e12) {\n    checkValidData();\n    if (byteValue == 0) {\n      executeInitialization();\n      DAT_20000e12 = byteValue;\n    }\n    else {\n      if ((char)byteValue < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = byteValue;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "execute_function_0800525c",
                "param_1": "byteValue",
                "check_valid_data_08002fd4": "checkValidData",
                "execute_initialization_08005250": "executeInitialization"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_flags_080052ac",
            "code": "\n\n\nvoid updateFlags_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_flags_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_parameter_080052dc",
            "code": "\n\n\nvoid updateParameter_080052dc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_parameter_080052dc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_and_update_min_value_08005324",
            "code": "\nvoid calculateAndUpdateMinValue_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_min_value_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_and_update_min_value_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "calculate_overflow_08005360",
            "code": "\nbool calculateOverflow_08005360(void)\n\n{\n  bool isOverflow;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isOverflow = 420000 < DAT_20000e2c;\n  if (isOverflow) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isOverflow;\n}\n\n",
            "renaming": {
                "FUN_08005360": "calculate_overflow_08005360",
                "bVar1": "isOverflow"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_data_080053a0",
            "code": "\nvoid updateData_080053a0(void)\n\n{\n  int result;\n  \n  update_parameter_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)getValidDataPointer();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      initializeFunction();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        updateMinValue(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        result = calculateOverflow();\n        if (result != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            updateMinValue(DAT_20000e30);\n          }\n          else {\n            initializeFunction();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        result = calculateOverflow();\n        if (result != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          updateMinValue(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          updateMinValue(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        result = calculateOverflow();\n        if (result != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          updateMinValue(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      updateIfNeeded();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_data_080053a0",
                "iVar1": "result",
                "get_valid_data_pointer_08002f74": "getValidDataPointer",
                "initialize_function_080057e4": "initializeFunction",
                "calculate_and_update_min_value_08005324": "updateMinValue",
                "calculate_overflow_08005360": "calculateOverflow",
                "update_if_needed_08002f40": "updateIfNeeded"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "update_flags_08005760",
            "code": "\nvoid update_flags_08005760(void)\n\n{\n  update_flags_08005760_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "update_flags_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "perform_flag_update_08005778",
            "code": "\nvoid performFlagUpdate_08005778(void)\n\n{\n  update_flags_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "perform_flag_update_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_data_08005790",
            "code": "\nvoid initialize_data_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    set_global_variable(0x69);\n    set_variable_value((DAT_20000ec9 + 5) * 0x15);\n    set_flags_based_on_conditions();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_data_08005790",
                "set_global_variable_08007c40": "set_global_variable",
                "set_variable_value_08007c5e": "set_variable_value",
                "set_flags_based_on_conditions_08007b70": "set_flags_based_on_conditions"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "initialize_function_080057e4",
            "code": "\nvoid initializeFunction_080057e4(void)\n\n{\n  clearBits();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "initialize_function_080057e4",
                "clear_bits_08007bc2": "clearBits"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initializeData_08005814(void)\n\n{\n  fillMemoryWithByte(&DAT_20000e14,0,0x24);\n  calculateAndUpdateMinValue(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "fill_with_byte_0800b430": "fillMemoryWithByte",
                "calculate_and_update_min_value_08005324": "calculateAndUpdateMinValue"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_and_update_0800583c",
            "code": "\nvoid initialize_and_update_0800583c(void)\n\n{\n  update_flags_080052ac(DAT_20000ed4);\n  initialize_data();\n  initialize_function();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_and_update_0800583c",
                "initialize_data_08005790": "initialize_data",
                "initialize_function_080057e4": "initialize_function"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_and_update_data_0800585c",
            "code": "\nvoid initialize_and_update_data_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_and_update_data_0800585c",
                "initialize_data_08005790": "initialize_data"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_data_state_0800587c",
            "code": "\nvoid updateDataState_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_data_state_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_data_080058a0",
            "code": "\nvoid initializeData_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    updateFloatingPointValues(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculateAndUpdateMinValue(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_data_080058a0",
                "update_floating_point_values_08003618": "updateFloatingPointValues",
                "calculate_and_update_min_value_08005324": "calculateAndUpdateMinValue"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_byte_08005900",
            "code": "\nundefined4 process_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        initialize_system();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "param_1": "byte_value",
                "initialize_system_080025e8": "initialize_system"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_system_interrupt_0800597c",
            "code": "\nvoid executeSystemInterrupt_0800597c(void)\n\n{\n  invokeSystemInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_system_interrupt_0800597c",
                "software_interrupt": "invokeSystemInterrupt"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_system_interrupt_08005984",
            "code": "\nundefined4 execute_system_interrupt_08005984(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = execute_system_interrupt_08005984_0800597c(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_system_interrupt_08005984",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n\nundefined4 initializeSystem_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  checkBoundary(16000);\n  setRegisterBits(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "check_boundary_08006d72": "checkBoundary",
                "set_bits_in_register_08006ce0": "setRegisterBits"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_data_counter_08005a68",
            "code": "\nvoid incrementDataCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_data_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_data_08005a84",
            "code": "\nundefined4 get_data_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_data_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "wait_for_data_08005a98",
            "code": "\nvoid waitForData_08005a98(int target)\n\n{\n  int initialValue;\n  uint currentValue;\n  \n  initialValue = get_data_08005a84();\n  do {\n    currentValue = get_data_08005a84();\n  } while (currentValue < (uint)(target + initialValue));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "wait_for_data_08005a98",
                "param_1": "target",
                "iVar1": "initialValue",
                "uVar2": "currentValue"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "set_byte_at_memory_address_08005bdc",
            "code": "\nvoid setByteAtMemoryAddress_08005bdc(byte inputValue,uint bitValue)\n\n{\n  if ((char)inputValue < '\\0') {\n    *(char *)((inputValue & 0xf) + 0xe000ed14) = (char)((bitValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputValue + -0x1fff1c00) = (char)((bitValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "set_byte_at_memory_address_08005bdc",
                "param_1": "inputValue",
                "param_2": "bitValue"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_set_data_08005c30",
            "code": "\n\n\nbool checkAndSetData_08005c30(int inputValue)\n\n{\n  bool isInputValid;\n  \n  isInputValid = inputValue - 1U < 0x1000000;\n  if (isInputValid) {\n    _DAT_e000e014 = inputValue + -1;\n    set_byte_at_memory_address_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInputValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_set_data_08005c30",
                "param_1": "inputValue",
                "bVar1": "isInputValid"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_system_status_08005cec",
            "code": "\n\n\nundefined4 checkSystemStatus_08005cec(uint *systemStatus)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  \n  if ((*systemStatus & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (systemStatus[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 5000U <= tempVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)systemStatus[1],_DAT_40023800));\n      if (systemStatus[1] == 1) {\n        tempVar1 = get_data_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          tempVar2 = get_data_08005a84();\n          if (tempVar1 + 5000U <= tempVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        tempVar1 = get_data_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          tempVar2 = get_data_08005a84();\n          if (tempVar1 + 5000U <= tempVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*systemStatus & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (systemStatus[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (systemStatus[3] == 0) {\n      _DAT_42470000 = 0;\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 100U <= tempVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 100U <= tempVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = systemStatus[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*systemStatus & 8) != 0) {\n    if (systemStatus[5] == 0) {\n      _DAT_42470e80 = 0;\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 100U <= tempVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 100U <= tempVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*systemStatus & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    tempVar1 = get_data_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      tempVar2 = get_data_08005a84();\n      if (tempVar1 + 100U <= tempVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    tempVar1 = get_data_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      tempVar2 = get_data_08005a84();\n      if (tempVar1 + 5000U <= tempVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)systemStatus[2]);\n    if (systemStatus[2] == 1) {\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 5000U <= tempVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 5000U <= tempVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (systemStatus[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (systemStatus[6] == 2) {\n      _DAT_42470060 = 0;\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 100U <= tempVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           systemStatus[0xb] << 0x18 |\n           systemStatus[8] | systemStatus[9] << 6 | ((systemStatus[10] >> 1) - 1) * 0x10000 | systemStatus[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 100U <= tempVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      tempVar1 = get_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        tempVar2 = get_data_08005a84();\n        if (tempVar1 + 100U <= tempVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_system_status_08005cec",
                "param_1": "systemStatus",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "check_and_set_clock_values_0800618c",
            "code": "\n\n\nundefined4 check_and_set_clock_values_0800618c(uint *config,uint flag)\n\n{\n  int data;\n  uint data_value;\n  uint target_value;\n  undefined8 clock_frequency;\n  \n  if ((_DAT_40023c00 & 0xf) < flag) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)flag);\n    if (flag != (flag & 0xf)) {\n      return 1;\n    }\n    if ((*config & 1) != 0) {\n      if (config[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((config[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = config[1] | _DAT_40023808 & 0xfffffffc;\n      data = get_sensor_data();\n      target_value = data + 5000;\n      if (config[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          data_value = get_sensor_data();\n          if (target_value <= data_value) {\n            return 3;\n          }\n        }\n      }\n      else if (config[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          data_value = get_sensor_data();\n          if (target_value <= data_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          data_value = get_sensor_data();\n          if (target_value <= data_value) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*config & 1) != 0) {\n      if (config[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (config[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = config[1] | _DAT_40023808 & 0xfffffffc;\n      data = get_sensor_data();\n      target_value = data + 5000;\n      if (config[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          data_value = get_sensor_data();\n          if (target_value <= data_value) {\n            return 3;\n          }\n        }\n      }\n      else if (config[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          data_value = get_sensor_data();\n          if (target_value <= data_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          data_value = get_sensor_data();\n          if (target_value <= data_value) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)flag);\n    if (flag != (flag & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 2) != 0) {\n    _DAT_40023808 = config[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*config & 4) != 0) {\n    _DAT_40023808 = config[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*config & 8) != 0) {\n    _DAT_40023808 = config[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clock_frequency = calculate_frequency();\n  check_and_set_data((uint)clock_frequency / 1000,(int)((ulonglong)clock_frequency >> 0x20),(uint)clock_frequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "check_and_set_clock_values_0800618c",
                "param_1": "config",
                "param_2": "flag",
                "iVar1": "data",
                "uVar2": "data_value",
                "uVar3": "target_value",
                "uVar4": "clock_frequency",
                "get_data_08005a84": "get_sensor_data",
                "calculate_clock_frequency_08006628": "calculate_frequency",
                "check_and_set_data_08005c30": "check_and_set_data"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_registers_0800640c",
            "code": "\n\n\nvoid update_registers_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 register1;\n  undefined4 register2;\n  undefined4 register3;\n  undefined4 register4;\n  undefined4 register5;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    register1 = 0x100;\n    register2 = 2;\n    register4 = 3;\n    register3 = 0;\n    register5 = 0;\n    update_registers_0800640c_08006e88(0x40020000,&register1);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    register1 = 0x200;\n    register2 = 2;\n    register4 = 3;\n    register3 = 0;\n    register5 = 0;\n    update_registers_0800640c_08006e88(0x40020800,&register1);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_registers_0800640c",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "local_1c": "register1",
                "local_18": "register2",
                "local_14": "register3",
                "local_10": "register4",
                "local_c": "register5"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_frequency_080064ec",
            "code": "\n\n\nuint calculateClockFrequency_080064ec(void)\n\n{\n  uint clockConfig;\n  uint result;\n  \n  clockConfig = _DAT_40023808 & 0xc;\n  if (clockConfig == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      result = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      result = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return result / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clockConfig < 9) {\n    if (clockConfig == 0) {\n      return 16000000;\n    }\n    if (clockConfig == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "uVar1": "clockConfig",
                "local_c": "result"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_clock_frequency_08006628",
            "code": "\n\n\nuint calculate_clock_frequency_08006628(void)\n\n{\n  uint clock_frequency;\n  \n  clock_frequency = calculate_clock_frequency_08006628_080064ec();\n  DAT_20000000 = clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_clock_frequency_08006628",
                "uVar1": "clock_frequency"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_clock_frequency_08006680",
            "code": "\n\n\nuint calculateClockFrequency_08006680(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculateClockFrequency_08006680();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_clock_frequency_08006680",
                "uVar1": "clockFrequency",
                "calculate_clock_frequency_08006628": "calculateClockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_clock_frequency_080066cc",
            "code": "\n\n\nuint calculateClockFrequency_080066cc(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_clock_frequency_080066cc",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_bits_in_register_08006950",
            "code": "\n\n\nvoid setBitsInRegister_08006950(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (inputValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_bits_in_register_08006950",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_shifted_value_08006998",
            "code": "\n\n\nuint getShiftedValue_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_shifted_value_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_080069b4",
            "code": "\nvoid setBit_080069b4(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_080069b4",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_in_memory_080069e4",
            "code": "\nvoid setBitInMemory_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_in_memory_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_set_08006a18",
            "code": "\nbool checkBitSet_08006a18(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_set_08006a18",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_memory_08006a58",
            "code": "\nvoid setBitInMemory_08006a58(byte byteValue)\n\n{\n  *(int *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_in_memory_08006a8c",
            "code": "\nvoid setBitInMemory_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_in_memory_08006ac0",
            "code": "\nbool checkBitInMemory_08006ac0(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_in_memory_08006ac0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "write_data_to_memory_08006b00",
            "code": "\nvoid writeDataToMemory_08006b00(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "write_data_to_memory_08006b00",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extract_data_08006b54",
            "code": "\nbyte extractData_08006b54(byte inputByte)\n\n{\n  byte outputByte;\n  \n  if ((char)inputByte < '\\0') {\n    outputByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    outputByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return outputByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extract_data_08006b54",
                "param_1": "inputByte",
                "bVar1": "outputByte"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "apply_bit_mask_08006ba0",
            "code": "\nuint applyBitMask_08006ba0(uint inputBits,uint dataBits,uint bitMask)\n\n{\n  uint remainingBits;\n  \n  inputBits = inputBits & 7;\n  remainingBits = 7 - inputBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (inputBits + 4 < 7) {\n    inputBits = 0;\n  }\n  else {\n    inputBits = inputBits - 3;\n  }\n  return bitMask & (1 << (inputBits & 0xff)) - 1U |\n         ((1 << (remainingBits & 0xff)) - 1U & dataBits) << (inputBits & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "apply_bit_mask_08006ba0",
                "param_1": "inputBits",
                "param_2": "dataBits",
                "param_3": "bitMask",
                "uVar1": "remainingBits"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "bitwise_operation_08006c04",
            "code": "\nvoid bitwiseOperation_08006c04(uint inputValue,uint bitOffset,uint *outputValue1,uint *outputValue2)\n\n{\n  uint remainingBits;\n  \n  bitOffset = bitOffset & 7;\n  remainingBits = 7 - bitOffset;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (bitOffset + 4 < 7) {\n    bitOffset = 0;\n  }\n  else {\n    bitOffset = bitOffset - 3;\n  }\n  *outputValue1 = (1 << (remainingBits & 0xff)) - 1U & inputValue >> (bitOffset & 0xff);\n  *outputValue2 = (1 << (bitOffset & 0xff)) - 1U & inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "bitwise_operation_08006c04",
                "param_1": "inputValue",
                "param_2": "bitOffset",
                "param_3": "outputValue1",
                "param_4": "outputValue2",
                "uVar1": "remainingBits"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "run_infinite_loop_08006c70",
            "code": "\nvoid runInfiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "run_infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_boundary_08006c9c",
            "code": "\n\n\nbool checkBoundary_08006c9c(int value)\n\n{\n  bool isWithinBoundary;\n  \n  isWithinBoundary = value - 1U < 0x1000000;\n  if (isWithinBoundary) {\n    _DAT_e000e014 = value + -1;\n    write_data_to_memory_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isWithinBoundary;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_boundary_08006c9c",
                "param_1": "value",
                "bVar1": "isWithinBoundary"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_bits_in_register_08006ce0",
            "code": "\nvoid setBitsInRegister_08006ce0(undefined4 value)\n\n{\n  setBitsInRegister_08006ce0Helper(value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_bits_in_register_08006ce0",
                "param_1": "value",
                "set_bits_in_register_08006950": "setBitsInRegisterHelper"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "write_shifted_data_to_memory_08006cf6",
            "code": "\nvoid writeShiftedDataToMemory_08006cf6(char dataAddress,undefined4 bitMask,undefined4 maskShift)\n\n{\n  undefined4 shiftedValue;\n  \n  shiftedValue = get_shifted_value_08006998();\n  shiftedValue = apply_bit_mask_08006ba0(shiftedValue,bitMask,maskShift);\n  write_data_to_memory_08006b00((int)dataAddress,shiftedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "write_shifted_data_to_memory_08006cf6",
                "param_1": "dataAddress",
                "param_2": "bitMask",
                "param_3": "maskShift",
                "uVar1": "shiftedValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_for_param_08006d2e",
            "code": "\nvoid set_bit_for_param_08006d2e(char input_param)\n\n{\n  set_bit_at_address((int)input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_for_param_08006d2e",
                "param_1": "input_param",
                "set_bit_080069b4": "set_bit_at_address"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_in_memory_08006d4a",
            "code": "\nvoid setBitInMemory_08006d4a(char input)\n\n{\n  setBitInMemory_08006d4aHelper((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_in_memory_08006d4a",
                "param_1": "input",
                "set_bit_in_memory_080069e4": "setBitInMemoryHelper"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "run_infinite_loop_08006d66",
            "code": "\nvoid run_infinite_loop_08006d66(void)\n\n{\n  run_infinite_loop_08006d66_08006c70();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "run_infinite_loop_08006d66"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "check_boundary_08006d72",
            "code": "\nundefined4 checkBoundary_08006d72(undefined4 inputParam)\n\n{\n  undefined4 result;\n  \n  result = check_boundary_08006c9c(inputParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "check_boundary_08006d72",
                "param_1": "inputParam",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_shifted_value_08006d8a",
            "code": "\nundefined4 get_shifted_value_08006d8a(void)\n\n{\n  undefined4 shifted_value;\n  \n  shifted_value = get_shifted_value_08006d8a_08006998();\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_shifted_value_08006d8a",
                "uVar1": "shifted_value"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "extract_and_operate_08006d98",
            "code": "\nvoid extractAndOperate_08006d98(char input,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extractedData;\n  \n  extractedData = extract_data_08006b54((int)input);\n  bitwise_operation_08006c04(extractedData,param2,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "extract_and_operate_08006d98",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "extractedData"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_in_memory_08006dc4",
            "code": "\nvoid setBitInMemory_08006dc4(char character)\n\n{\n  setBitInMemory_08006dc4((int)character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_in_memory_08006dc4",
                "param_1": "character",
                "set_bit_in_memory_08006a58": "setBitInMemory"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_bit_is_set_08006de0",
            "code": "\nundefined4 checkBitIsSet_08006de0(char inputChar)\n\n{\n  undefined4 bitSetCheckResult;\n  \n  bitSetCheckResult = check_bit_set_08006a18((int)inputChar);\n  return bitSetCheckResult;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_bit_is_set_08006de0",
                "param_1": "inputChar",
                "uVar1": "bitSetCheckResult"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_in_memory_08006dfe",
            "code": "\nvoid setBitInMemory_08006dfe(char value)\n\n{\n  setBitInMemory_08006dfeHelper((int)value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_in_memory_08006dfe",
                "param_1": "value",
                "set_bit_in_memory_08006a8c": "setBitInMemoryHelper"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_in_memory_08006e1a",
            "code": "\nundefined4 checkBitInMemory_08006e1a(char character)\n\n{\n  undefined4 result;\n  \n  result = check_bit_in_memory_08006ac0((int)character);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_in_memory_08006e1a",
                "param_1": "character",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_registers_08006e88",
            "code": "\n\n\nvoid updateRegisters_08006e88(uint *registerData,uint *inputData)\n\n{\n  uint bitMask;\n  uint bitResult;\n  int registerIndex;\n  uint bitIndex;\n  \n  for (bitIndex = 0; bitIndex < 0x10; bitIndex = bitIndex + 1) {\n    bitMask = 1 << (bitIndex & 0xff);\n    bitResult = *inputData & bitMask;\n    if (bitResult == bitMask) {\n      if ((inputData[1] == 2) || (inputData[1] == 0x12)) {\n        bitMask = inputData[4];\n        registerData[(bitIndex >> 3) + 8] = registerData[(bitIndex >> 3) + 8] & ~(0xf << ((bitIndex & 7) << 2));\n        registerData[(bitIndex >> 3) + 8] = registerData[(bitIndex >> 3) + 8] | bitMask << ((bitIndex & 7) << 2);\n      }\n      *registerData = *registerData & ~(3 << ((bitIndex & 0x7f) << 1));\n      *registerData = *registerData | (inputData[1] & 3) << ((bitIndex & 0x7f) << 1);\n      if ((((inputData[1] == 1) || (inputData[1] == 2)) || (inputData[1] == 0x11)) || (inputData[1] == 0x12)\n         ) {\n        registerData[2] = registerData[2] & ~(3 << ((bitIndex & 0x7f) << 1));\n        registerData[2] = registerData[2] | inputData[3] << ((bitIndex & 0x7f) << 1);\n        registerData[1] = registerData[1] & ~(1 << (bitIndex & 0xff));\n        registerData[1] = registerData[1] | (inputData[1] >> 4 & 1) << (bitIndex & 0xff);\n      }\n      registerData[3] = registerData[3] & ~(3 << ((bitIndex & 0x7f) << 1));\n      registerData[3] = registerData[3] | inputData[2] << ((bitIndex & 0x7f) << 1);\n      if ((inputData[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((bitIndex & 3) << 2)) & *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800);\n        if (registerData == (uint *)0x40020000) {\n          registerIndex = 0;\n        }\n        else if (registerData == (uint *)0x40020400) {\n          registerIndex = 1;\n        }\n        else if (registerData == (uint *)0x40020800) {\n          registerIndex = 2;\n        }\n        else if (registerData == (uint *)0x40020c00) {\n          registerIndex = 3;\n        }\n        else if (registerData == (uint *)0x40021000) {\n          registerIndex = 4;\n        }\n        else if (registerData == (uint *)0x40021400) {\n          registerIndex = 5;\n        }\n        else if (registerData == (uint *)0x40021800) {\n          registerIndex = 6;\n        }\n        else if (registerData == (uint *)0x40021c00) {\n          registerIndex = 7;\n        }\n        else if (registerData == (uint *)0x40022000) {\n          registerIndex = 8;\n        }\n        else if (registerData == (uint *)0x40022400) {\n          registerIndex = 9;\n        }\n        else {\n          registerIndex = 10;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800) =\n             registerIndex << ((bitIndex & 3) << 2) | *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitResult & _DAT_40013c00;\n        _DAT_40013c04 = ~bitResult & _DAT_40013c04;\n        if ((inputData[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitResult | _DAT_40013c00;\n        }\n        if ((inputData[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitResult | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitResult & _DAT_40013c08;\n        _DAT_40013c0c = ~bitResult & _DAT_40013c0c;\n        if ((inputData[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitResult | _DAT_40013c08;\n        }\n        if ((inputData[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitResult | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_registers_08006e88",
                "param_1": "registerData",
                "param_2": "inputData",
                "uVar1": "bitMask",
                "uVar2": "bitResult",
                "iVar3": "registerIndex",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "update_parameter_0800733e",
            "code": "\nvoid updateParameter_0800733e(int functionPointer,undefined2 newValue,char flag)\n\n{\n  if (flag == '\\0') {\n    *(undefined2 *)(functionPointer + 0x1a) = newValue;\n  }\n  else {\n    *(undefined2 *)(functionPointer + 0x18) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "update_parameter_0800733e",
                "param_1": "functionPointer",
                "param_2": "newValue",
                "param_3": "flag"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_and_process_value_0800738e",
            "code": "\n\n\nvoid updateAndProcessValue_0800738e(ushort inputValue)\n\n{\n  if ((inputValue & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)inputValue;\n    FUNC_080073c0(inputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_and_process_value_0800738e",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_in_memory_080073d4",
            "code": "\nvoid setBitInMemory_080073d4(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x4002001a) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid setBitInMemory_08007402(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x40020018) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "input"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initializeSystem_08007436(void)\n\n{\n  int iVar1;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 clockValue1;\n  undefined4 clockValue2;\n  undefined4 clockValue3;\n  undefined4 clockValue4;\n  undefined4 clockValue5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag1 = 1;\n  flag2 = 1;\n  value1 = 2;\n  value2 = 0x400000;\n  value3 = 8;\n  value4 = 0x150;\n  value5 = 2;\n  value6 = 7;\n  iVar1 = check_system_status_08005cec(&flag1);\n  if (iVar1 != 0) {\n    infinite_loop_08007430();\n  }\n  clockValue1 = 0xf;\n  clockValue2 = 2;\n  clockValue3 = 0;\n  clockValue4 = 0x1400;\n  clockValue5 = 0x1000;\n  iVar1 = check_and_set_clock_values_0800618c(&clockValue1,5);\n  if (iVar1 != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "flag1",
                "local_48": "flag2",
                "local_34": "value1",
                "local_30": "value2",
                "local_2c": "value3",
                "local_28": "value4",
                "local_24": "value5",
                "local_20": "value6",
                "local_1c": "clockValue1",
                "local_18": "clockValue2",
                "local_14": "clockValue3",
                "local_10": "clockValue4",
                "local_c": "clockValue5"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "handle_update_080074c8",
            "code": "\nvoid handleUpdate_080074c8(uint updateFlags)\n\n{\n  if ((updateFlags & 1) != 0) {\n    setMemoryBit(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((updateFlags & 0x1e) != 0)) {\n    initializeSystemIfNeeded();\n  }\n  if ((DAT_20000e50 != 0) && ((updateFlags & 0x80) != 0)) {\n    updateFlagsStatus(updateFlags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "handle_update_080074c8",
                "param_1": "updateFlags",
                "set_bit_in_memory_08007402": "setMemoryBit",
                "initialize_system_if_needed_0800195c": "initializeSystemIfNeeded",
                "update_status_flags_08003a18": "updateFlagsStatus"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_if_param_one_is_odd_08007520",
            "code": "\nvoid setBitIfParamOneIsOdd_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    setBitInMemory(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_if_param_one_is_odd_08007520",
                "param_1": "inputValue",
                "set_bit_in_memory_080073d4": "setBitInMemory"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_system_08007540",
            "code": "\nundefined4 initialize_system_08007540(void)\n\n{\n  initialize_system_08007540_step1();\n  initialize_system_08007540_step2();\n  initialize_registers();\n  initialize_flags();\n  initialize_data_structure();\n  initialize_system_08007540_step3();\n  execute_system_interrupt(0);\n  initialize_and_process_data();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_system_08007540",
                "initialize_system_080059b4": "initialize_system_step1",
                "initialize_system_08007436": "initialize_system_step2",
                "initialize_registers_0800778c": "initialize_registers",
                "initialize_and_set_flags_08007e08": "initialize_flags",
                "initialize_data_structure_080079c0": "initialize_data_structure",
                "initialize_system_08008190": "initialize_system_step3",
                "execute_system_interrupt_08005984": "execute_system_interrupt",
                "initialize_and_process_data_08001ddc": "initialize_and_process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_memory_0800756c",
            "code": "\n\n\nvoid initializeMemory_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_memory_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_value_080076c8",
            "code": "\nvoid updateBitValue_080076c8(uint inputValue)\n\n{\n  *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) ^ 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_value_080076c8",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "update_data_08007756",
            "code": "\nvoid updateData_08007756(void)\n\n{\n  uint dataValue;\n  \n  dataValue = getDataValue();\n  if ((dataValue & 0x1ff) == 0) {\n    updateBitValue(0x3c);\n  }\n  if ((dataValue & 0xf) == 0) {\n    updateBitFlags();\n  }\n  incrementDataCounter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "update_data_08007756",
                "uVar1": "dataValue",
                "get_data_08005a84": "getDataValue",
                "update_bit_value_080076c8": "updateBitValue",
                "update_bit_flags_08007930": "updateBitFlags",
                "increment_data_counter_08005a68": "incrementDataCounter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_registers_0800778c",
            "code": "\n\n\nvoid initializeRegisters_0800778c(void)\n\n{\n  int index;\n  int bitMask;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  uint *pointer;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    index = counter * 0x18;\n    pointer = (uint *)(&DAT_0800bcbc + index);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*pointer >> 4 & 0xff);\n    bitMask = 1 << (*pointer & 0xf);\n    data1 = *(undefined4 *)(&DAT_0800bcc0 + index);\n    data2 = *(undefined4 *)(&DAT_0800bcc4 + index);\n    data3 = *(undefined4 *)(&DAT_0800bcc8 + index);\n    data4 = *(undefined4 *)(&DAT_0800bccc + index);\n    update_registers_08006e88(((*pointer >> 4) + 0x100080) * 0x400,&bitMask);\n    if (-1 < (int)pointer[5]) {\n      update_parameter_0800733e(((*pointer >> 4) + 0x100080) * 0x400,1 << (*pointer & 0xf) & 0xffff,\n                   pointer[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_registers_0800778c",
                "iVar1": "index",
                "local_24": "bitMask",
                "local_20": "data1",
                "local_1c": "data2",
                "local_18": "data3",
                "local_14": "data4",
                "local_10": "pointer",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_08007854",
            "code": "\nuint check_bit_08007854(uint input_value)\n\n{\n  return *(uint *)((shift_amountinput_value >> 4) * 0x400 + 0x40020010) >> (input_value bit_mask 0xf) bit_mask 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "param_1": "input_value",
                "(int)": "shift_amount",
                "&": "bit_mask"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "get_bit_flags_08007884",
            "code": "\nuint get_bit_flags_08007884(void)\n\n{\n  int bit_flag_0x36;\n  int bit_flag_0x37;\n  int bit_flag_0x38;\n  int bit_flag_0x39;\n  int bit_flag_0xf;\n  uint bit_flag_0;\n  \n  bit_flag_0x36 = check_bit_flag(0x36);\n  bit_flag_0x37 = check_bit_flag(0x37);\n  bit_flag_0x38 = check_bit_flag(0x38);\n  bit_flag_0x39 = check_bit_flag(0x39);\n  bit_flag_0xf = check_bit_flag(0xf);\n  bit_flag_0 = check_bit_flag(0);\n  return bit_flag_0 | bit_flag_0x36 << 4 | bit_flag_0x37 << 3 | bit_flag_0x38 << 2 | bit_flag_0x39 << 1 | bit_flag_0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "get_bit_flags_08007884",
                "iVar1": "bit_flag_0x36",
                "iVar2": "bit_flag_0x37",
                "iVar3": "bit_flag_0x38",
                "iVar4": "bit_flag_0x39",
                "iVar5": "bit_flag_0xf",
                "uVar6": "bit_flag_0",
                "check_bit_08007854": "check_bit_flag"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_combined_value_080078f4",
            "code": "\nuint calculateCombinedValue_080078f4(void)\n\n{\n  int index;\n  uint combinedValue;\n  \n  combinedValue = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    combinedValue = *(uint *)(&DAT_20000e54 + index * 4) | combinedValue;\n  }\n  return combinedValue;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_combined_value_080078f4",
                "local_10": "index",
                "local_c": "combinedValue"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_bit_flags_08007930",
            "code": "\nvoid updateBitFlags_08007930(void)\n\n{\n  int currentIndex;\n  uint previousValue;\n  undefined4 newFlags;\n  uint combinedValue;\n  uint changedBits;\n  \n  currentIndex = DAT_20000e68;\n  previousValue = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    newFlags = get_bit_flags_08007884();\n    *(undefined4 *)(&DAT_20000e54 + currentIndex * 4) = newFlags;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    combinedValue = calculate_combined_value_080078f4();\n    previousValue = DAT_20000e64;\n    if (combinedValue != DAT_20000e64) {\n      changedBits = ~combinedValue & DAT_20000e64;\n      if ((~DAT_20000e64 & combinedValue) != 0) {\n        handle_update_080074c8(~DAT_20000e64 & combinedValue);\n      }\n      previousValue = combinedValue;\n      if (changedBits != 0) {\n        set_bit_if_param_one_is_odd_08007520(changedBits);\n      }\n    }\n  }\n  DAT_20000e64 = previousValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_bit_flags_08007930",
                "iVar1": "currentIndex",
                "uVar2": "previousValue",
                "uVar3": "newFlags",
                "uVar4": "combinedValue",
                "uVar5": "changedBits"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_data_structure_080079c0",
            "code": "\nvoid initializeDataStructure_080079c0(void)\n\n{\n  fill_with_byte_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_data_structure_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_in_array_080079e0",
            "code": "\nvoid setBitInArray_080079e0(byte byteToSet)\n\n{\n  *(int *)(((uint)(int)(char)byteToSet >> 5) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_in_array_080079e0",
                "param_1": "byteToSet"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flag_08007a10",
            "code": "\n\n\nvoid updateFlag_08007a10(undefined *input)\n\n{\n  if (input == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (input == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (input == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flag_08007a10",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "handle_memory_write_08007a70",
            "code": "\nvoid handleMemoryWrite_08007a70(undefined *address,undefined4 data1,undefined4 data2)\n\n{\n  undefined shiftOffset;\n  \n  if (address == (undefined *)0x40000000) {\n    shiftOffset = 0x1c;\n  }\n  else if (address == (undefined *)0x40000400) {\n    shiftOffset = 0x1d;\n  }\n  else {\n    if (address != &DAT_40000800) {\n      return;\n    }\n    shiftOffset = 0x1e;\n  }\n  write_shifted_data_to_memory_08006cf6(shiftOffset,data1,data2);\n  set_bit_in_array_080079e0(shiftOffset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "handle_memory_write_08007a70",
                "param_1": "address",
                "param_2": "data1",
                "param_3": "data2",
                "local_c": "shiftOffset"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  updateFlag(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  handleMemoryWrite(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "update_flag_08007a10": "updateFlag",
                "handle_memory_write_08007a70": "handleMemoryWrite"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_based_on_conditions_08007b70",
            "code": "\n\n\nvoid setFlagsBasedOnConditions_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_based_on_conditions_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_bits_08007bc2",
            "code": "\n\n\nvoid clearBits_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_bits_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_min_value_08007bf0",
            "code": "\n\n\nvoid update_min_value_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_min_value_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_global_variable_08007c40",
            "code": "\n\n\nvoid setGlobalVariable_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_global_variable_08007c40",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_variable_value_08007c5e",
            "code": "\n\n\nvoid setVariableValue_08007c5e(undefined4 newValue)\n\n{\n  _DAT_40000038 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_variable_value_08007c5e",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "update_flags_and_data_08007c7c",
            "code": "\n\n\nvoid update_flags_and_data_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    perform_flag_update();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_flags();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "update_flags_and_data_08007c7c",
                "perform_flag_update_08005778": "perform_flag_update",
                "update_flags_08005760": "update_flags",
                "update_data_080053a0": "update_data"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_flags_08007d08",
            "code": "\n\n\nvoid initializeFlags_08007d08(void)\n\n{\n  update_flag_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_flags_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_bits_08007da8",
            "code": "\n\n\nvoid setBits_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_bits_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_and_set_flags_08007e08",
            "code": "\nvoid initialize_and_set_flags_08007e08(void)\n\n{\n  initialize_memory_08007ad0();\n  initialize_flags_08007d08();\n  set_bits_08007da8();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_and_set_flags_08007e08"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "write_byte_to_register_08007e1c",
            "code": "\n\n\nvoid write_byte_to_register_08007e1c(byte data)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "write_byte_to_register_08007e1c",
                "param_1": "data"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_flag_set_08007e58",
            "code": "\n\n\nbool isFlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_flag_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_flags_based_on_param_08007ea4",
            "code": "\n\n\nvoid updateFlagsBasedOnParam_08007ea4(undefined *param)\n\n{\n  if (param == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (param == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (param == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (param == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (param == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (param == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_flags_based_on_param_08007ea4",
                "param_1": "param"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_frequency_and_set_value_08007f54",
            "code": "\nvoid calculate_clock_frequency_and_set_value_08007f54(int device_address,int frequency)\n\n{\n  ulonglong clock_frequency;\n  int result_1;\n  int result_2;\n  undefined8 clock_frequency_value;\n  \n  if ((*(uint *)(device_address + 0xc) & 0x8000) == 0) {\n    if ((device_address != 0x40011000) && (device_address != 0x40011400)) {\n      clock_frequency_value = calculate_clock_frequency_08006680();\n      clock_frequency = (ulonglong)(uint)((int)clock_frequency_value * 0x19) / (ulonglong)(uint)(frequency << 2);\n      result_1 = calculate_clock_frequency_08006680((int)clock_frequency_value,(int)((ulonglong)clock_frequency_value >> 0x20),(int)(clock_frequency * 0x51eb851f));\n      result_2 = calculate_clock_frequency_08006680();\n      *(uint *)(device_address + 8) =\n           (int)(clock_frequency / 100) << 4 |\n           (((uint)(result_1 * 0x19) / (uint)(frequency << 2) +\n            (int)(((ulonglong)(uint)(result_2 * 0x19) / (ulonglong)(uint)(frequency << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clock_frequency_value = calculate_clock_frequency_080066cc();\n    clock_frequency = (ulonglong)(uint)((int)clock_frequency_value * 0x19) / (ulonglong)(uint)(frequency << 2);\n    result_1 = calculate_clock_frequency_080066cc((int)clock_frequency_value,(int)((ulonglong)clock_frequency_value >> 0x20),(int)(clock_frequency * 0x51eb851f));\n    result_2 = calculate_clock_frequency_080066cc();\n    *(uint *)(device_address + 8) =\n         (int)(clock_frequency / 100) << 4 |\n         (((uint)(result_1 * 0x19) / (uint)(frequency << 2) +\n          (int)(((ulonglong)(uint)(result_2 * 0x19) / (ulonglong)(uint)(frequency << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((device_address != 0x40011000) && (device_address != 0x40011400)) {\n      clock_frequency_value = calculate_clock_frequency_08006680();\n      clock_frequency = (ulonglong)(uint)((int)clock_frequency_value * 0x19) / (ulonglong)(uint)(frequency << 1);\n      result_1 = calculate_clock_frequency_08006680((int)clock_frequency_value,(int)((ulonglong)clock_frequency_value >> 0x20),(int)(clock_frequency * 0x51eb851f));\n      result_2 = calculate_clock_frequency_08006680();\n      *(uint *)(device_address + 8) =\n           (int)(clock_frequency / 100) << 4 |\n           (((uint)(result_1 * 0x19) / (uint)(frequency << 1) +\n            (int)(((ulonglong)(uint)(result_2 * 0x19) / (ulonglong)(uint)(frequency << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clock_frequency_value = calculate_clock_frequency_080066cc();\n    clock_frequency = (ulonglong)(uint)((int)clock_frequency_value * 0x19) / (ulonglong)(uint)(frequency << 1);\n    result_1 = calculate_clock_frequency_080066cc((int)clock_frequency_value,(int)((ulonglong)clock_frequency_value >> 0x20),(int)(clock_frequency * 0x51eb851f));\n    result_2 = calculate_clock_frequency_080066cc();\n    *(uint *)(device_address + 8) =\n         (int)(clock_frequency / 100) << 4 |\n         (((uint)(result_1 * 0x19) / (uint)(frequency << 1) +\n          (int)(((ulonglong)(uint)(result_2 * 0x19) / (ulonglong)(uint)(frequency << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_frequency_and_set_value_08007f54",
                "param_1": "device_address",
                "param_2": "frequency",
                "uVar1": "clock_frequency",
                "iVar2": "result_1",
                "iVar3": "result_2",
                "uVar4": "clock_frequency_value"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_system_08008190",
            "code": "\n\n\nvoid initializeSystem_08008190(void)\n\n{\n  updateFlags(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  setClockFrequency(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_system_08008190",
                "update_flags_based_on_param_08007ea4": "updateFlags",
                "calculate_clock_frequency_and_set_value_08007f54": "setClockFrequency"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "write_byte_to_register_08008250",
            "code": "\nvoid writeByteToRegister_08008250(undefined inputByte)\n\n{\n  write_byte_to_register_08007e1c(inputByte);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "write_byte_to_register_08008250",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "write_param_to_register_0800826a",
            "code": "\nundefined4 writeParamToRegister_0800826a(undefined byteToWrite)\n\n{\n  write_byte_to_register_08007e1c(byteToWrite);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "write_param_to_register_0800826a",
                "param_1": "byteToWrite"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_flag_and_process_byte_08008286",
            "code": "\nundefined check_flag_and_process_byte_08008286(void)\n\n{\n  undefined lowest_byte;\n  int flag_result;\n  \n  flag_result = is_flag_set_08007e58();\n  if (flag_result != 0) {\n    lowest_byte = get_lowest_byte_08007e84();\n    flag_result = process_byte_08005900(lowest_byte);\n    if (flag_result == 0) {\n      return lowest_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_flag_and_process_byte_08008286",
                "uVar1": "lowest_byte",
                "iVar2": "flag_result"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_result_080082d0",
            "code": "\nulonglong calculateResult_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int var1;\n  byte var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  uint var7;\n  int var8;\n  uint var9;\n  uint var10;\n  uint var11;\n  uint var12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  var6 = input4 ^ 0x80000000;\n  var9 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ var6) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (var9 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  var8 = (int)var9 >> 0x15;\n  if (!flag2) {\n    flag2 = var8 == -1;\n  }\n  var1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = var1 == -1;\n  }\n  if (flag2) {\n    if (var8 == -1 || var1 == -1) {\n      var9 = var6;\n      var11 = input3;\n      if (var8 == -1) {\n        var9 = input2;\n        var11 = input1;\n      }\n      if (var8 != -1 || var1 != -1) {\n        input3 = var11;\n        var6 = var9;\n      }\n      flag2 = (var11 | var9 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | var6 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = var9 == var6;\n      }\n      if (!flag2) {\n        var9 = var9 | 0x80000;\n      }\n      return CONCAT44(var9,var11);\n    }\n    if (((input2 ^ var6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((var9 | input1) == 0) {\n        input1 = input3;\n        input2 = var6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != var6) {\n      return 0;\n    }\n    if (var9 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      var6 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        var6 = var6 | 0x80000000;\n      }\n      return CONCAT44(var6,input1 << 1);\n    }\n    if (var9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  var9 = var9 >> 0x15;\n  input4 = input4 >> 0x15;\n  var11 = input4 - var9;\n  flag2 = var11 != 0;\n  if (input4 < var9) {\n    var11 = -var11;\n  }\n  var10 = input1;\n  var7 = input2;\n  if (flag2 && var9 <= input4) {\n    var9 = var9 + var11;\n    var10 = input3;\n    var7 = var6;\n    input3 = input1;\n    var6 = input2;\n  }\n  if (0x36 < var11) {\n    return CONCAT44(var7,var10);\n  }\n  var4 = var7 & 0xfffff | 0x100000;\n  if ((var7 & 0x80000000) != 0) {\n    flag2 = var10 != 0;\n    var10 = -var10;\n    var4 = -var4 - (uint)flag2;\n  }\n  var7 = var6 & 0xfffff | 0x100000;\n  if ((var6 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    var7 = -var7 - (uint)flag2;\n  }\n  if (var9 == var11) {\n    var7 = var7 ^ 0x100000;\n    if (var9 == 0) {\n      var4 = var4 ^ 0x100000;\n      var9 = 1;\n    }\n    else {\n      var11 = var11 - 1;\n    }\n  }\n  var6 = -var11 + 0x20;\n  if ((int)var11 < 0x21) {\n    var12 = input3 << (var6 & 0xff);\n    input3 = input3 >> (var11 & 0xff);\n    var3 = var10 + input3;\n    var5 = var7 << (var6 & 0xff);\n    var6 = var3 + var5;\n    var4 = var4 + CARRY4(var10,input3) + ((int)var7 >> (var11 & 0xff)) +\n            (uint)CARRY4(var3,var5);\n  }\n  else {\n    var12 = var7 << (-var11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      var12 = var12 | 2;\n    }\n    var7 = (int)var7 >> (var11 - 0x20 & 0xff);\n    var6 = var10 + var7;\n    var4 = var4 + ((int)var7 >> 0x1f) + (uint)CARRY4(var10,var7);\n  }\n  input2 = var4 & 0x80000000;\n  var11 = var4;\n  if ((int)var4 < 0) {\n    flag2 = var12 == 0;\n    var12 = -var12;\n    var11 = -var6;\n    var6 = -(uint)!flag2 - var6;\n    var11 = -(uint)(flag2 <= var11) - var4;\n  }\n  if (0xfffff < var11) {\n    var10 = var9 - 1;\n    if (0x1fffff < var11) {\n      var10 = var11 & 1;\n      var11 = var11 >> 1;\n      var2 = (byte)var6;\n      var6 = (uint)(var10 != 0) << 0x1f | var6 >> 1;\n      var12 = (uint)(var2 & 1) << 0x1f | var12 >> 1;\n      var10 = var9;\n      if (0xffbfffff < var9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < var12;\n    if (var12 == 0x80000000) {\n      flag2 = (var6 & 1) != 0;\n    }\n    return CONCAT44(var11 + var10 * 0x100000 + (uint)CARRY4(var6,(uint)flag2) | input2,\n                    var6 + flag2);\n  }\n  flag1 = (var12 & 0x80000000) != 0;\n  var12 = var12 << 1;\n  var10 = var6 * 2;\n  flag2 = CARRY4(var6,var6);\n  var6 = var6 * 2 + (uint)flag1;\n  var11 = var11 * 2 + (uint)(flag2 || CARRY4(var10,(uint)flag1));\n  var10 = var9 - 2;\n  if (var9 - 1 != 0 && 0xfffff < var11) goto LAB_080083e0;\n  var7 = var6;\n  var9 = var11;\n  if (var11 == 0) {\n    var7 = 0;\n    var9 = var6;\n  }\n  var8 = LZCOUNT(var9);\n  if (var11 == 0) {\n    var8 = var8 + 0x20;\n  }\n  var11 = var8 - 0xb;\n  flag3 = SBORROW4(var11,0x20);\n  var6 = var8 - 0x2b;\n  flag2 = (int)var6 < 0;\n  flag1 = var6 == 0;\n  if ((int)var11 < 0x20) {\n    flag3 = SCARRY4(var6,0xc);\n    var8 = var8 + -0x1f;\n    flag2 = var8 < 0;\n    flag1 = var8 == 0;\n    var6 = var11;\n    if (!flag1 && flag2 == flag3) {\n      var7 = var9 << (var11 & 0xff);\n      var9 = var9 >> (0xcU - var8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    var12 = 0x20 - var6;\n  }\n  var9 = var9 << (var6 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    var9 = var9 | var7 >> (var12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    var7 = var7 << (var6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)var11 <= (int)var10) {\n    return CONCAT44(var9 + (var10 - var11) * 0x100000 | input2,var7);\n  }\n  var6 = ~(var10 - var11);\n  if ((int)var6 < 0x1f) {\n    var8 = var6 - 0x13;\n    if (var8 != 0 && var8 < 0 == SCARRY4(var6 - 0x1f,0xc)) {\n      return CONCAT44(var4,var7 >> (0x20 - (0xcU - var8) & 0xff) | var9 << (0xcU - var8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    var6 = var6 + 1;\n    return CONCAT44(input2 | var9 >> (var6 & 0xff),\n                    var7 >> (var6 & 0xff) | var9 << (0x20 - var6 & 0xff));\n  }\n  return CONCAT44(var4,var9 >> (var6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_result_080082d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "var1",
                "bVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "iVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_sum_product_080082d4",
            "code": "\nulonglong calculate_sum_product_080082d4(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_num2;\n  uint shifted_num4;\n  uint result_high;\n  uint result_low;\n  uint temp4;\n  uint temp5;\n  bool is_equal;\n  bool condition;\n  bool condition2;\n  \n  shifted_num2 = num2 << 1;\n  result_high = num4 << 1;\n  is_equal = ((num2 ^ num4) & 0x7fffffff) == 0;\n  condition = is_equal && num1 == num3;\n  if (!is_equal || num1 != num3) {\n    condition = (shifted_num2 | num1) == 0;\n  }\n  if (!condition) {\n    condition = (result_high | num3) == 0;\n  }\n  shift2 = (int)shifted_num2 >> 0x15;\n  if (!condition) {\n    condition = shift2 == -1;\n  }\n  shift1 = (int)result_high >> 0x15;\n  if (!condition) {\n    condition = shift1 == -1;\n  }\n  if (condition) {\n    if (shift2 == -1 || shift1 == -1) {\n      result_high = num4;\n      shifted_num2 = num3;\n      if (shift2 == -1) {\n        result_high = num2;\n        shifted_num2 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = shifted_num2;\n        num4 = result_high;\n      }\n      condition = (shifted_num2 | result_high << 0xc) == 0;\n      if (condition) {\n        condition = (num3 | num4 << 0xc) == 0;\n      }\n      if (condition) {\n        condition = result_high == num4;\n      }\n      if (!condition) {\n        result_high = result_high | 0x80000;\n      }\n      return CONCAT44(result_high,shifted_num2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shifted_num2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shifted_num2 >> 0x15 == 0) {\n      condition = (num1 & 0x80000000) != 0;\n      result_high = num2 * 2 + (uint)condition;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)condition)) {\n        result_high = result_high | 0x80000000;\n      }\n      return CONCAT44(result_high,num1 << 1);\n    }\n    if (shifted_num2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shifted_num2 = shifted_num2 >> 0x15;\n  result_high = result_high >> 0x15;\n  result_low = result_high - shifted_num2;\n  condition = result_low != 0;\n  if (result_high < shifted_num2) {\n    result_low = -result_low;\n  }\n  shifted_num4 = num1;\n  temp3 = num2;\n  if (condition && shifted_num2 <= result_high) {\n    shifted_num2 = shifted_num2 + result_low;\n    shifted_num4 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < result_low) {\n    return CONCAT44(temp3,shifted_num4);\n  }\n  result_high = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    condition = shifted_num4 != 0;\n    shifted_num4 = -shifted_num4;\n    result_high = -result_high - (uint)condition;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    condition = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)condition;\n  }\n  if (shifted_num2 == result_low) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_num2 == 0) {\n      result_high = result_high ^ 0x100000;\n      shifted_num2 = 1;\n    }\n    else {\n      result_low = result_low - 1;\n    }\n  }\n  temp5 = -result_low + 0x20;\n  if ((int)result_low < 0x21) {\n    temp4 = num3 << (temp5 & 0xff);\n    num3 = num3 >> (result_low & 0xff);\n    temp1 = shifted_num4 + num3;\n    temp2 = temp3 << (temp5 & 0xff);\n    temp5 = temp1 + temp2;\n    result_high = result_high + CARRY4(shifted_num4,num3) + ((int)temp3 >> (result_low & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp4 = temp3 << (-result_low + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    temp3 = (int)temp3 >> (result_low - 0x20 & 0xff);\n    temp5 = shifted_num4 + temp3;\n    result_high = result_high + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_num4,temp3);\n  }\n  num2 = result_high & 0x80000000;\n  result_low = result_high;\n  if ((int)result_high < 0) {\n    condition = temp4 == 0;\n    temp4 = -temp4;\n    result_low = -temp5;\n    temp5 = -(uint)!condition - temp5;\n    result_low = -(uint)(condition <= result_low) - result_high;\n  }\n  if (0xfffff < result_low) {\n    shifted_num4 = shifted_num2 - 1;\n    if (0x1fffff < result_low) {\n      result_high = result_low & 1;\n      result_low = result_low >> 1;\n      carry = (byte)temp5;\n      temp5 = (uint)(result_high != 0) << 0x1f | temp5 >> 1;\n      temp4 = (uint)(carry & 1) << 0x1f | temp4 >> 1;\n      shifted_num4 = shifted_num2;\n      if (0xffbfffff < shifted_num2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    condition = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      condition = (temp5 & 1) != 0;\n    }\n    return CONCAT44(result_low + shifted_num4 * 0x100000 + (uint)CARRY4(temp5,(uint)condition) | num2,\n                    temp5 + condition);\n  }\n  is_equal = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  shifted_num4 = temp5 * 2;\n  condition = CARRY4(temp5,temp5);\n  temp5 = temp5 * 2 + (uint)is_equal;\n  result_low = result_low * 2 + (uint)(condition || CARRY4(shifted_num4,(uint)is_equal));\n  shifted_num4 = shifted_num2 - 2;\n  if (shifted_num2 - 1 != 0 && 0xfffff < result_low) goto LAB_080083e0;\n  temp3 = temp5;\n  shifted_num2 = result_low;\n  if (result_low == 0) {\n    temp3 = 0;\n    shifted_num2 = temp5;\n  }\n  shift2 = LZCOUNT(shifted_num2);\n  if (result_low == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp5 = shift2 - 0xb;\n  condition2 = SBORROW4(temp5,0x20);\n  result_low = shift2 - 0x2b;\n  condition = (int)result_low < 0;\n  is_equal = result_low == 0;\n  if ((int)temp5 < 0x20) {\n    condition2 = SCARRY4(result_low,0xc);\n    shift2 = shift2 + -0x1f;\n    condition = shift2 < 0;\n    is_equal = shift2 == 0;\n    result_low = temp5;\n    if (!is_equal && condition == condition2) {\n      temp3 = shifted_num2 << (temp5 & 0xff);\n      shifted_num2 = shifted_num2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal || condition != condition2) {\n    temp4 = 0x20 - result_low;\n  }\n  shifted_num2 = shifted_num2 << (result_low & 0xff);\n  if (is_equal || condition != condition2) {\n    shifted_num2 = shifted_num2 | temp3 >> (temp4 & 0xff);\n  }\n  if (is_equal || condition != condition2) {\n    temp3 = temp3 << (result_low & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp5 <= (int)shifted_num4) {\n    return CONCAT44(shifted_num2 + (shifted_num4 - temp5) * 0x100000 | num2,temp3);\n  }\n  result_low = ~(shifted_num4 - temp5);\n  if ((int)result_low < 0x1f) {\n    shift2 = result_low - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(result_low - 0x1f,0xc)) {\n      return CONCAT44(result_high,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_num2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result_low = result_low + 1;\n    return CONCAT44(num2 | shifted_num2 >> (result_low & 0xff),\n                    temp3 >> (result_low & 0xff) | shifted_num2 << (0x20 - result_low & 0xff));\n  }\n  return CONCAT44(result_high,shifted_num2 >> (result_low - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_sum_product_080082d4",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shifted_num2",
                "uVar8": "shifted_num4",
                "uVar9": "result_high",
                "uVar10": "result_low",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "is_equal",
                "bVar14": "condition",
                "bVar15": "condition2"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "decode_number_0800854c",
            "code": "\nulonglong decode_number_0800854c(uint input_number)\n\n{\n  uint shift_count;\n  uint shift_remainder;\n  int leading_zeros;\n  uint shift_total;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_leading_bit_set;\n  \n  if (input_number == 0) {\n    return 0;\n  }\n  shift_count = 0;\n  leading_zeros = LZCOUNT(input_number);\n  shift_total = leading_zeros + 0x15;\n  is_leading_bit_set = SBORROW4(shift_total,0x20);\n  shift_remainder = leading_zeros - 0xb;\n  is_negative = (int)shift_remainder < 0;\n  is_zero = shift_remainder == 0;\n  if (shift_total < 0x20) {\n    is_leading_bit_set = SCARRY4(shift_remainder,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_remainder = shift_total;\n    if (!is_zero && is_leading_bit_set == false) {\n      shift_count = input_number << shift_total;\n      input_number = input_number >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != is_leading_bit_set) {\n    remaining_bits = 0x20 - shift_remainder;\n  }\n  input_number = input_number << (shift_remainder & 0xff);\n  if (is_zero || is_negative != is_leading_bit_set) {\n    input_number = input_number | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_leading_bit_set) {\n    shift_count = 0 << (shift_remainder & 0xff);\n  }\nLAB_08008458:\n  if (shift_total < 0x433) {\n    return CONCAT44(input_number + (0x432 - shift_total) * 0x100000,shift_count);\n  }\n  shift_remainder = ~(0x432 - shift_total);\n  if (0x1e < (int)shift_remainder) {\n    return (ulonglong)(input_number >> (shift_remainder - 0x1f & 0xff));\n  }\n  leading_zeros = shift_remainder - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_remainder - 0x1f,0xc)) {\n    shift_remainder = shift_remainder + 1;\n    return CONCAT44(input_number >> (shift_remainder & 0xff),\n                    shift_count >> (shift_remainder & 0xff) | input_number << (0x20 - shift_remainder & 0xff));\n  }\n  return (ulonglong)(shift_count >> (0x20 - (0xcU - leading_zeros) & 0xff) | input_number << (0xcU - leading_zeros & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "decode_number_0800854c",
                "param_1": "input_number",
                "uVar1": "shift_count",
                "uVar2": "shift_remainder",
                "iVar3": "leading_zeros",
                "uVar4": "shift_total",
                "in_r12": "remaining_bits",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_leading_bit_set"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "bitwise_shift_and_concat_0800856c",
            "code": "\nulonglong bitwise_shift_and_concat_0800856c(uint input_value)\n\n{\n  uint zero;\n  uint abs_input_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint shifted_value1;\n  uint sign_bit;\n  uint shifted_value2;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_input_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_input_value = -input_value;\n  }\n  zero = 0;\n  leading_zeros = LZCOUNT(abs_input_value);\n  shifted_value1 = leading_zeros + 0x15;\n  is_overflow = SBORROW4(shifted_value1,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shifted_value1 < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shifted_value1;\n    if (!is_zero && is_overflow == false) {\n      zero = abs_input_value << shifted_value1;\n      abs_input_value = abs_input_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    shifted_value2 = 0x20 - shift_amount;\n  }\n  abs_input_value = abs_input_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    abs_input_value = abs_input_value | 0U >> (shifted_value2 & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    zero = 0 << (shift_amount & 0xff);\n  }\nLAB_08008458:\n  if (shifted_value1 < 0x433) {\n    return CONCAT44(abs_input_value + (0x432 - shifted_value1) * 0x100000 | sign_bit,zero);\n  }\n  shift_amount = ~(0x432 - shifted_value1);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_input_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input_value >> (shift_amount & 0xff),\n                    zero >> (shift_amount & 0xff) | abs_input_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,zero >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "bitwise_shift_and_concat_0800856c",
                "param_1": "input_value",
                "uVar1": "zero",
                "uVar2": "abs_input_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "shifted_value1",
                "uVar6": "sign_bit",
                "in_r12": "shifted_value2",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_overflow"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "expand_bits_08008590",
            "code": "\nulonglong expandBits_08008590(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint mask;\n  uint result;\n  uint upperMask;\n  uint shiftedInput;\n  uint shiftedInput2;\n  int count;\n  uint shiftAmount;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isLessThan32;\n  \n  shiftedInput2 = input << 1;\n  isZero = shiftedInput2 == 0;\n  mask = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftedInput = (uint)((int)shiftedInput2 >> 3) >> 1;\n  upperMask = mask | shiftedInput;\n  input = input << 0x1d;\n  if (!isZero) {\n    param4 = shiftedInput2 & 0xff000000;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(upperMask,input) ^ 0x3800000000000000;\n  }\n  if ((shiftedInput2 & 0xffffff) == 0) {\n    return CONCAT44(upperMask,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(upperMask,input) | 0x8000000000000;\n  }\n  result = input;\n  shiftedInput2 = shiftedInput;\n  if (shiftedInput == 0) {\n    result = 0;\n    shiftedInput2 = input;\n  }\n  count = LZCOUNT(shiftedInput2);\n  if (shiftedInput == 0) {\n    count = count + 0x20;\n  }\n  shiftAmount = count - 0xb;\n  isLessThan32 = SBORROW4(shiftAmount,0x20);\n  shiftedInput = count - 0x2b;\n  isZero = (int)shiftedInput < 0;\n  isNegative = shiftedInput == 0;\n  if ((int)shiftAmount < 0x20) {\n    isLessThan32 = SCARRY4(shiftedInput,0xc);\n    count = count + -0x1f;\n    isZero = count < 0;\n    isNegative = count == 0;\n    shiftedInput = shiftAmount;\n    if (!isNegative && isZero == isLessThan32) {\n      result = shiftedInput2 << (shiftAmount & 0xff);\n      shiftedInput2 = shiftedInput2 >> (0xcU - count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isNegative || isZero != isLessThan32) {\n    remainingBits = 0x20 - shiftedInput;\n  }\n  shiftedInput2 = shiftedInput2 << (shiftedInput & 0xff);\n  if (isNegative || isZero != isLessThan32) {\n    shiftedInput2 = shiftedInput2 | result >> (remainingBits & 0xff);\n  }\n  if (isNegative || isZero != isLessThan32) {\n    result = result << (shiftedInput & 0xff);\n  }\nLAB_08008458:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(shiftedInput2 + (0x380 - shiftAmount) * 0x100000 | mask,result);\n  }\n  shiftedInput = ~(0x380 - shiftAmount);\n  if (0x1e < (int)shiftedInput) {\n    return CONCAT44(upperMask,shiftedInput2 >> (shiftedInput - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shiftedInput - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shiftedInput - 0x1f,0xc)) {\n    shiftedInput = shiftedInput + 1;\n    return CONCAT44(mask | shiftedInput2 >> (shiftedInput & 0xff),\n                    result >> (shiftedInput & 0xff) | shiftedInput2 << (0x20 - shiftedInput & 0xff));\n  }\n  return CONCAT44(upperMask,result >> (0x20 - (0xcU - count) & 0xff) | shiftedInput2 << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "expand_bits_08008590",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "mask",
                "uVar2": "result",
                "uVar3": "upperMask",
                "uVar4": "shiftedInput",
                "uVar5": "shiftedInput2",
                "iVar6": "count",
                "uVar7": "shiftAmount",
                "in_r12": "remainingBits",
                "bVar8": "isNegative",
                "bVar9": "isZero",
                "bVar10": "isLessThan32"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_hash_08008640",
            "code": "\nulonglong calculate_hash_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong temp1;\n  longlong temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_inputs;\n  \n  combined_inputs = CONCAT44(input2,input1);\n  temp8 = 0x7ff;\n  temp4 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp4 == 0;\n  if (!flag1) {\n    temp7 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp7 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp4 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (flag1) {\n    combined_inputs = reverse_bits_0800881c();\n  }\n  temp3 = (uint)(combined_inputs >> 0x20);\n  temp5 = temp4 + temp7;\n  temp4 = temp3 ^ input4;\n  temp3 = temp3 & ~(temp8 << 0x15);\n  input4 = input4 & ~(temp8 << 0x15);\n  flag1 = ((uint)combined_inputs | temp3 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp3 = temp3 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_inputs | input3;\n    input4 = (temp4 & 0x80000000 | temp3) ^ input4;\n    temp4 = temp8 >> 1;\n    flag3 = SBORROW4(temp5,temp4);\n    temp6 = temp5 - temp4;\n    flag1 = temp6 == 0;\n    temp3 = temp6;\n    if (!flag1 && (int)temp4 <= temp5) {\n      flag3 = SBORROW4(temp8,temp6);\n      temp3 = temp8 - temp6;\n      flag1 = temp8 == temp6;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      input4 = input4 | temp6 * 0x100000;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp8 = 0;\n    flag3 = SBORROW4(temp6,1);\n    temp6 = temp6 - 1;\n    flag1 = temp6 == 0;\n    temp4 = temp6;\n  }\n  else {\n    temp1 = (combined_inputs & 0xffffffff) * (ulonglong)input3;\n    combined_inputs = (combined_inputs & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp3 * (ulonglong)input3 + (temp1 >> 0x20);\n    temp9 = (uint)combined_inputs;\n    temp2 = (ulonglong)temp3 * (ulonglong)input4 + (combined_inputs >> 0x20);\n    temp8 = (uint)temp2;\n    temp3 = (uint)((ulonglong)temp2 >> 0x20);\n    if ((int)temp1 != 0) {\n      temp9 = temp9 | 1;\n    }\n    temp6 = (temp5 + -0x3ff) - (uint)(temp3 < 0x200);\n    if (temp3 < 0x200) {\n      flag1 = (temp9 & 0x80000000) != 0;\n      temp9 = temp9 << 1;\n      temp2 = CONCAT44(temp3 * 2 + (uint)(CARRY4(temp8,temp8) || CARRY4(temp8 * 2,(uint)flag1)),\n                       temp8 * 2 + (uint)flag1);\n    }\n    input4 = temp4 & 0x80000000 | (int)((ulonglong)temp2 >> 0x20) << 0xb | (uint)temp2 >> 0x15;\n    input3 = (uint)temp2 << 0xb | temp9 >> 0x15;\n    temp8 = temp9 * 0x800;\n    flag2 = 0xfc < temp6;\n    flag3 = SBORROW4(temp6,0xfd);\n    temp3 = temp6 - 0xfd;\n    flag1 = temp3 == 0;\n    temp4 = temp3;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp3;\n      flag3 = SBORROW4(temp3,0x700);\n      temp4 = temp6 - 0x7fd;\n      flag1 = temp3 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp8;\n      if (temp8 == 0x80000000) {\n        flag1 = (temp9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp6 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp4 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp6,0x36);\n  flag1 = (int)(temp6 + 0x36) < 0;\n  flag3 = temp6 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp4 = -temp6;\n  temp3 = temp4 - 0x20;\n  if (0x1f < (int)temp4) {\n    temp6 = input3 >> (temp3 & 0xff) | input4 << (0x20 - temp3 & 0xff);\n    temp4 = (input4 >> (temp3 & 0xff) & ~((input4 & 0x80000000) >> (temp3 & 0xff))) -\n            ((int)temp6 >> 0x1f);\n    if ((temp8 | input3 << (0x20 - temp3 & 0xff) | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44(input4,temp4) & 0x80000000ffffffff;\n  }\n  temp5 = temp4 - 0x14;\n  if (temp5 == 0 || temp5 < 0 != SCARRY4(temp3,0xc)) {\n    temp9 = input3 << (temp6 + 0x20 & 0xff);\n    temp3 = input3 >> (temp4 & 0xff) | input4 << (temp6 + 0x20 & 0xff);\n    temp6 = temp3 + -((int)temp9 >> 0x1f);\n    if ((temp8 | temp9 << 1) == 0) {\n      temp6 = temp6 & ~(temp9 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp4 & 0xff)) +\n                    (uint)CARRY4(temp3,-((int)temp9 >> 0x1f)),temp6);\n  }\n  temp4 = 0xc - temp5;\n  temp6 = input3 << (temp4 & 0xff);\n  temp4 = input3 >> (0x20 - temp4 & 0xff) | input4 << (temp4 & 0xff);\n  temp3 = temp4 + -((int)temp6 >> 0x1f);\n  if ((temp8 | temp6 << 1) == 0) {\n    temp3 = temp3 & ~(temp6 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp4,-((int)temp6 >> 0x1f)),temp3);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_hash_08008640",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "lVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "unaff_r5": "temp7",
                "uVar7": "temp8",
                "uVar8": "temp9",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_inputs"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "reverse_bits_0800881c",
            "code": "\nulonglong reverseBits_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint temp1;\n  uint temp2;\n  uint bit5;\n  bool isZero;\n  \n  temp1 = bit5 & input4 >> 0x14;\n  if (bit2 != bit5 && temp1 != bit5) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      temp2 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp2;\n      if (temp1 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp1 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp1 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  temp2 = input2;\n  if (((!isZero) && ((bit2 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp1 != bit5 || (input1 = input3, temp2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "reverse_bits_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "convert_to_ieee754_08008894",
            "code": "\nulonglong convertToIEEE754_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  undefined8 temp17;\n  \n  temp17 = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  bool1 = temp7 == 0;\n  if (!bool1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    bool1 = temp10 == 0;\n  }\n  if (!bool1) {\n    bool1 = temp7 == 0x7ff;\n  }\n  if (!bool1) {\n    bool1 = temp10 == 0x7ff;\n  }\n  if (bool1) {\n    temp17 = convert_to_ieee754_08008a02();\n  }\n  temp9 = (uint)((ulonglong)temp17 >> 0x20);\n  temp12 = (uint)temp17;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    bool3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    bool1 = (int)temp9 < 0;\n    bool2 = temp9 == 0;\n    if (!bool2 && bool1 == bool3) {\n      bool3 = SBORROW4(temp14,temp9);\n      bool1 = (int)(temp14 - temp9) < 0;\n      bool2 = temp14 == temp9;\n    }\n    if (!bool2 && bool1 == bool3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!bool2 && bool1 == bool3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    bool2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    bool1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    bool1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      bool1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)bool1;\n    temp9 = temp8 + 0x3fd;\n    if (bool1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      bool1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)bool1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!bool1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      bool2 = temp1 <= temp13;\n      bool1 = temp11 - temp5 < (uint)bool2;\n      temp14 = temp11;\n      if (temp5 < temp11 || bool1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!bool2;\n      }\n      if (temp5 < temp11 || bool1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      bool2 = temp2 <= temp13;\n      bool1 = temp14 - temp11 < (uint)bool2;\n      temp5 = temp14;\n      if (temp11 < temp14 || bool1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!bool2;\n      }\n      if (temp11 < temp14 || bool1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      bool2 = temp1 <= temp13;\n      bool1 = temp5 - temp6 < (uint)bool2;\n      temp11 = temp5;\n      if (temp6 < temp5 || bool1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!bool2;\n      }\n      if (temp6 < temp5 || bool1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    bool3 = 0xfc < temp9;\n    bool2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    bool1 = temp4 == 0;\n    temp3 = temp4;\n    if (bool3 && !bool1) {\n      bool3 = 0x6ff < temp4;\n      bool2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      bool1 = temp4 == 0x700;\n    }\n    if (!bool3 || bool1) {\n      bool1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        bool1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        bool1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)bool1),temp12 + bool1);\n    }\n  }\n  if (!bool1 && (int)temp3 < 0 == bool2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  bool3 = SCARRY4(temp9,0x36);\n  bool1 = (int)(temp9 + 0x36) < 0;\n  bool2 = temp9 == 0xffffffca;\n  if (bool2 || bool1 != bool3) {\n    temp12 = 0;\n  }\n  if (bool2 || bool1 != bool3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (bool2 || bool1 != bool3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "convert_to_ieee754_08008894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "bool1",
                "bVar15": "bool2",
                "bVar16": "bool3"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "convert_to_ieee754_08008a02",
            "code": "\nulonglong convertToIEEE754_08008a02(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint temp2;\n  bool isZero;\n  \n  bit2 = temp2 & value4 >> 0x14;\n  bit3 = value2;\n  if (temp1 != temp2 || bit2 != temp2) {\n    if (temp1 == temp2) {\n      if (((value1 | value2 << 0xc) == 0) && (value1 = value3, bit3 = value4, bit2 != temp2)\n         ) {\nLAB_08008874:\n        return (ulonglong)((value2 ^ value4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == temp2) {\n      value1 = value3;\n      bit3 = value4;\n      if ((value3 | value4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((value2 ^ value4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (value1 | value2 << 1) == 0;\n      if (!isZero) {\n        isZero = (value3 | value4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (temp1 == 0) {\n          bit3 = value2 & 0x80000000;\n          do {\n            bit1 = value1 & 0x80000000;\n            value1 = value1 << 1;\n            value2 = value2 * 2 + (uint)(bit1 != 0);\n          } while ((value2 & 0x100000) == 0);\n          value2 = value2 | bit3;\n          if (bit2 != 0) {\n            return CONCAT44(value2,value1);\n          }\n        }\n        do {\n          bit3 = value3 & 0x80000000;\n          value3 = value3 << 1;\n          value4 = value4 * 2 + (uint)(bit3 != 0);\n        } while ((value4 & 0x100000) == 0);\n        return CONCAT44(value2,value1);\n      }\n      if ((value1 | value2 << 1) != 0) goto LAB_08008874;\n      if ((value3 | value4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(bit3,value1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "convert_to_ieee754_08008a02",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "unaff_r4": "temp1",
                "in_r12": "temp2",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_parameters_08008a74",
            "code": "\nuint check_parameters_08008a74(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp;\n  bool is_zero_or_equal;\n  bool is_less_than;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero_or_equal = (input_1 | input_2 << 1) == 0;\n  if (is_zero_or_equal) {\n    is_zero_or_equal = (input_3 | input_4 << 1) == 0;\n  }\n  if (!is_zero_or_equal) {\n    is_zero_or_equal = input_2 == input_4;\n  }\n  if (is_zero_or_equal) {\n    is_zero_or_equal = input_1 == input_3;\n  }\n  if (!is_zero_or_equal) {\n    temp = input_2 ^ input_4;\n    is_zero_or_equal = temp == 0;\n    if (-1 < (int)temp) {\n      is_zero_or_equal = input_2 == input_4;\n    }\n    is_less_than = -1 < (int)temp && input_4 <= input_2;\n    if (is_zero_or_equal) {\n      is_less_than = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!is_less_than) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp",
                "bVar2": "is_zero_or_equal",
                "bVar3": "is_less_than"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "validate_and_return_param_08008af0",
            "code": "\nvoid validate_and_return_param_08008af0(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  validate_and_return_param_08008af0_08008b00(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "validate_and_return_param_08008af0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "validate_and_return_param_08008b00",
            "code": "\nundefined4 validate_and_return_param_08008b00(undefined4 input_param)\n\n{\n  validate_parameters();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "validate_and_return_param_08008b00",
                "param_1": "input_param",
                "check_parameters_08008a74": "validate_parameters"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "is_valid_param_08008b10",
            "code": "\nbool is_valid_param_08008b10(void)\n\n{\n  char param;\n  \n  validate_and_return_param();\n  return param != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "is_valid_param_08008b10",
                "in_ZR": "param",
                "validate_and_return_param_08008b00": "validate_and_return_param"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_argument_null_08008b24",
            "code": "\nbool is_argument_null_08008b24(void)\n\n{\n  char input_character;\n  \n  validate_and_return_param_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_argument_null_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_validation_conditions_08008b4c",
            "code": "\nbool check_validation_conditions_08008b4c(void)\n\n{\n  undefined is_zero_flag_set;\n  undefined is_carry_flag_set;\n  \n  validate_and_return_param_08008af0();\n  return !(bool)is_carry_flag_set || (bool)is_zero_flag_set;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_validation_conditions_08008b4c",
                "in_ZR": "is_zero_flag_set",
                "in_CY": "is_carry_flag_set"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "check_if_null_terminate_08008b60",
            "code": "\nbool check_if_null_terminate_08008b60(void)\n\n{\n  char input_character;\n  \n  validate_and_return_param_08008af0();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "check_if_null_terminate_08008b60",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_parameters_08008b74",
            "code": "\nundefined4 check_parameters_08008b74(uint input_value_1,int input_value_2,uint input_value_3,int input_value_4)\n\n{\n  if ((((input_value_2 << 1) >> 0x15 != -1) || ((input_value_1 | input_value_2 << 0xc) == 0)) &&\n     (((input_value_4 << 1) >> 0x15 != -1 || ((input_value_3 | input_value_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_result_08008ba0",
            "code": "\nuint calculate_result_08008ba0(uint input_1,uint input_2)\n\n{\n  uint temp_value_2;\n  int temp_value_1;\n  uint temp_value_3;\n  \n  temp_value_1 = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < temp_value_1) {\n      return 0;\n    }\n    temp_value_2 = temp_value_1 >> 0x15;\n    temp_value_3 = -temp_value_2 - 0x3e1;\n    if (temp_value_2 < 0xfffffc20 && temp_value_3 != 0) {\n      temp_value_2 = (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (temp_value_3 & 0xff);\n      if ((input_2 & 0x80000000) != 0) {\n        temp_value_2 = -temp_value_2;\n      }\n      return temp_value_2;\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_2 = input_2 & 0x80000000;\n  if (input_2 == 0) {\n    input_2 = 0x7fffffff;\n  }\n  return input_2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_result_08008ba0",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar2": "temp_value_1",
                "uVar1": "temp_value_2",
                "uVar3": "temp_value_3"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "check_and_adjust_values_08008bf0",
            "code": "\nuint check_and_adjust_values_08008bf0(uint input_value,uint modifier)\n\n{\n  int modified_value;\n  uint shift_amount;\n  \n  if ((modifier & 0x80000000) != 0) {\n    return 0;\n  }\n  modified_value = modifier * 2 + 0x200000;\n  if (modifier * 2 < 0xffe00000) {\n    if (-1 < modified_value) {\n      return 0;\n    }\n    shift_amount = -(modified_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (modifier << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | modifier << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "check_and_adjust_values_08008bf0",
                "param_1": "input_value",
                "param_2": "modifier",
                "iVar1": "modified_value",
                "uVar2": "shift_amount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_float_offset_08008c30",
            "code": "\nuint calculateFloatOffset_08008c30(uint inputNumber,uint multiplier)\n\n{\n  uint result;\n  uint offset;\n  uint adjustedOffset;\n  uint adjustedOffsetAlternative;\n  bool isZero;\n  bool isInRange;\n  \n  offset = multiplier * 2;\n  isInRange = offset < 0x70000000;\n  adjustedOffset = offset + 0x90000000;\n  result = adjustedOffset;\n  if (!isInRange) {\n    adjustedOffsetAlternative = offset + 0x8fe00000;\n    result = adjustedOffsetAlternative;\n  }\n  isZero = result == 0;\n  if (!isInRange && adjustedOffset >= 0x200000) {\n    isZero = adjustedOffsetAlternative == 0x1fc00000;\n  }\n  if (((isInRange || adjustedOffset < 0x200000) || 0x1fc00000 < adjustedOffsetAlternative) || isZero) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)offset >> 0x15 == -1) && ((inputNumber | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(offset + 0x92e00000) < 0 != SCARRY4(adjustedOffset,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    offset = 0x18 - (offset + 0x92e00000 >> 0x15);\n    result = inputNumber >> (offset & 0xff);\n    if (inputNumber << (0x20 - offset & 0xff) != 0) {\n      result = result | 1;\n    }\n    adjustedOffset = multiplier & 0x1fffff | 0x100000;\n    inputNumber = result | adjustedOffset << (0x20 - offset & 0xff);\n    adjustedOffset = (adjustedOffset >> (offset & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | inputNumber >> 0x1d) + adjustedOffset * 4 + (uint)(0x7fffffff < inputNumber * 8);\n  if (inputNumber * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_float_offset_08008c30",
                "param_1": "inputNumber",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "offset",
                "uVar3": "adjustedOffset",
                "in_r12": "adjustedOffsetAlternative",
                "bVar4": "isZero",
                "bVar5": "isInRange"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_pseudo_float_08008cd8",
            "code": "\nuint calculate_pseudo_float_08008cd8(uint input_value,uint flag,undefined4 constant,uint mask)\n\n{\n  int shifted_input;\n  int shifted_flag;\n  uint result1;\n  uint result2;\n  uint input_shifted;\n  uint output_shifted;\n  uint difference;\n  bool is_equal;\n  \n  result1 = flag ^ 0x80000000;\n  input_shifted = input_value << 1;\n  is_equal = input_shifted == 0;\n  if (!is_equal) {\n    mask = flag << 1;\n    is_equal = mask == 0;\n  }\n  if (!is_equal) {\n    is_equal = input_shifted == mask;\n  }\n  shifted_input = (int)input_shifted >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)mask >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_flag = (int)(flag << 1) >> 0x18;\n    if (shifted_input == -1 || shifted_flag == -1) {\n      input_shifted = result1;\n      if (shifted_input == -1) {\n        input_shifted = input_value;\n      }\n      if (shifted_input != -1 || shifted_flag != -1) {\n        result1 = input_shifted;\n      }\n      is_equal = (input_shifted & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (result1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = input_shifted == result1;\n      }\n      if (!is_equal) {\n        input_shifted = input_shifted | 0x400000;\n      }\n      return input_shifted;\n    }\n    if (((input_value ^ result1) & 0x7fffffff) != 0) {\n      if (input_shifted == 0) {\n        input_value = result1;\n      }\n      return input_value;\n    }\n    if (input_value != result1) {\n      return 0;\n    }\n    if ((input_shifted & 0xff000000) == 0) {\n      result1 = input_value << 1;\n      if ((input_value & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (input_shifted < 0xfe000000) {\n      return input_value + 0x800000;\n    }\n    input_value = input_value & 0x80000000;\nLAB_08008e12:\n    return input_value | 0x7f800000;\n  }\n  input_shifted = input_shifted >> 0x18;\n  mask = mask >> 0x18;\n  difference = mask - input_shifted;\n  is_equal = difference != 0;\n  output_shifted = input_shifted;\n  if (is_equal && input_shifted <= mask) {\n    output_shifted = input_shifted + difference;\n  }\n  if (is_equal && input_shifted <= mask) {\n    result1 = result1 ^ input_value;\n  }\n  if (is_equal && input_shifted <= mask) {\n    input_value = input_value ^ result1;\n  }\n  if (is_equal && input_shifted <= mask) {\n    result1 = result1 ^ input_value;\n  }\n  if (mask < input_shifted) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_value;\n  }\n  input_shifted = input_value & 0xffffff | 0x800000;\n  if ((input_value & 0x80000000) != 0) {\n    input_shifted = -input_shifted;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (output_shifted == difference) {\n    result2 = result2 ^ 0x800000;\n    if (output_shifted == 0) {\n      input_shifted = input_shifted ^ 0x800000;\n      output_shifted = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  input_shifted = input_shifted + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  input_value = input_shifted & 0x80000000;\n  if ((int)input_shifted < 0) {\n    is_equal = result2 != 0;\n    result2 = -result2;\n    input_shifted = -input_shifted - (uint)is_equal;\n  }\n  if (input_shifted < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    input_shifted = input_shifted * 2 + (uint)(result1 != 0);\n    result1 = output_shifted - 2;\n    if (output_shifted - 1 == 0 || input_shifted < 0x800000) {\n      difference = LZCOUNT(input_shifted) - 8;\n      input_shifted = input_shifted << (difference & 0xff);\n      if ((int)result1 < (int)difference) {\n        input_shifted = input_shifted >> (-(result1 - difference) & 0xff);\n      }\n      else {\n        input_shifted = input_shifted + (result1 - difference) * 0x800000;\n      }\n      return input_shifted | input_value;\n    }\n  }\n  else {\n    result1 = output_shifted - 1;\n    if (0xffffff < input_shifted) {\n      result1 = input_shifted & 1;\n      input_shifted = input_shifted >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = output_shifted;\n      if (0xfd < output_shifted) goto LAB_08008e12;\n    }\n  }\n  input_shifted = input_shifted + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    input_shifted = input_shifted & 0xfffffffe;\n  }\n  return input_shifted | input_value;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_pseudo_float_08008cd8",
                "param_1": "input_value",
                "param_2": "flag",
                "param_3": "constant",
                "param_4": "mask",
                "iVar1": "shifted_input",
                "iVar2": "shifted_flag",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "input_shifted",
                "uVar6": "output_shifted",
                "uVar7": "difference",
                "bVar8": "is_equal"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_float_value_08008cdc",
            "code": "\nuint calculateFloatValue_08008cdc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int upperByte1;\n  int upperByte2;\n  uint lowerByte1;\n  uint lowerByte2;\n  uint temp1;\n  uint temp2;\n  bool isEqual;\n  \n  lowerByte2 = input1 << 1;\n  isEqual = lowerByte2 == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = lowerByte2 == input4;\n  }\n  upperByte1 = (int)lowerByte2 >> 0x18;\n  if (!isEqual) {\n    isEqual = upperByte1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    upperByte2 = (int)(input2 << 1) >> 0x18;\n    if (upperByte1 == -1 || upperByte2 == -1) {\n      lowerByte2 = input2;\n      if (upperByte1 == -1) {\n        lowerByte2 = input1;\n      }\n      if (upperByte1 != -1 || upperByte2 != -1) {\n        input2 = lowerByte2;\n      }\n      isEqual = (lowerByte2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = lowerByte2 == input2;\n      }\n      if (!isEqual) {\n        lowerByte2 = lowerByte2 | 0x400000;\n      }\n      return lowerByte2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (lowerByte2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((lowerByte2 & 0xff000000) == 0) {\n      lowerByte2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        lowerByte2 = lowerByte2 | 0x80000000;\n      }\n      return lowerByte2;\n    }\n    if (lowerByte2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  lowerByte2 = lowerByte2 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp2 = input4 - lowerByte2;\n  isEqual = temp2 != 0;\n  temp1 = lowerByte2;\n  if (isEqual && lowerByte2 <= input4) {\n    temp1 = lowerByte2 + temp2;\n  }\n  if (isEqual && lowerByte2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && lowerByte2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && lowerByte2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < lowerByte2) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return input1;\n  }\n  lowerByte2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    lowerByte2 = -lowerByte2;\n  }\n  lowerByte1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    lowerByte1 = -lowerByte1;\n  }\n  if (temp1 == temp2) {\n    lowerByte1 = lowerByte1 ^ 0x800000;\n    if (temp1 == 0) {\n      lowerByte2 = lowerByte2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  lowerByte2 = lowerByte2 + ((int)lowerByte1 >> (temp2 & 0xff));\n  lowerByte1 = lowerByte1 << (0x20 - temp2 & 0xff);\n  input1 = lowerByte2 & 0x80000000;\n  if ((int)lowerByte2 < 0) {\n    isEqual = lowerByte1 != 0;\n    lowerByte1 = -lowerByte1;\n    lowerByte2 = -lowerByte2 - (uint)isEqual;\n  }\n  if (lowerByte2 < 0x800000) {\n    temp2 = lowerByte1 & 0x80000000;\n    lowerByte1 = lowerByte1 << 1;\n    lowerByte2 = lowerByte2 * 2 + (uint)(temp2 != 0);\n    temp2 = temp1 - 2;\n    if (temp1 - 1 == 0 || lowerByte2 < 0x800000) {\n      temp1 = LZCOUNT(lowerByte2) - 8;\n      lowerByte2 = lowerByte2 << (temp1 & 0xff);\n      if ((int)temp2 < (int)temp1) {\n        lowerByte2 = lowerByte2 >> (-(temp2 - temp1) & 0xff);\n      }\n      else {\n        lowerByte2 = lowerByte2 + (temp2 - temp1) * 0x800000;\n      }\n      return lowerByte2 | input1;\n    }\n  }\n  else {\n    temp2 = temp1 - 1;\n    if (0xffffff < lowerByte2) {\n      temp2 = lowerByte2 & 1;\n      lowerByte2 = lowerByte2 >> 1;\n      lowerByte1 = (uint)(temp2 != 0) << 0x1f | lowerByte1 >> 1;\n      temp2 = temp1;\n      if (0xfd < temp1) goto LAB_08008e12;\n    }\n  }\n  lowerByte2 = lowerByte2 + temp2 * 0x800000 + (uint)(0x7fffffff < lowerByte1);\n  if (lowerByte1 == 0x80000000) {\n    lowerByte2 = lowerByte2 & 0xfffffffe;\n  }\n  return lowerByte2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_float_value_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "upperByte1",
                "iVar2": "upperByte2",
                "uVar3": "lowerByte1",
                "uVar4": "lowerByte2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_value_08008e3c",
            "code": "\nuint calculateValue_08008e3c(uint input)\n\n{\n  uint finalValue;\n  uint tempValue;\n  int multiplier;\n  uint result;\n  \n  if (input == 0) {\n    return 0;\n  }\n  finalValue = LZCOUNT(input);\n  tempValue = finalValue - 8;\n  multiplier = tempValue * -0x800000 + 0x4a800000;\n  if (7 < finalValue) {\n    result = 0 << (tempValue & 0xff);\n    finalValue = multiplier + (input << (tempValue & 0xff)) +\n            (0U >> (0x20 - tempValue & 0xff)) + (uint)(0x7fffffff < result);\n    if (result == 0x80000000) {\n      finalValue = finalValue & 0xfffffffe;\n    }\n    return finalValue;\n  }\n  tempValue = input << finalValue + 0x18;\n  finalValue = multiplier + ((input >> (0x20 - (finalValue + 0x18) & 0xff)) - ((int)tempValue >> 0x1f));\n  if ((tempValue & 0x7fffffff) == 0) {\n    finalValue = finalValue & ~(tempValue >> 0x1f);\n  }\n  return finalValue;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_value_08008e3c",
                "param_1": "input",
                "uVar1": "finalValue",
                "uVar2": "tempValue",
                "iVar3": "multiplier",
                "uVar4": "result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "count_bits_and_manipulate_08008e44",
            "code": "\nuint countBitsAndManipulate_08008e44(uint input)\n\n{\n  uint count;\n  uint shift;\n  uint signFlag;\n  int result;\n  \n  signFlag = input & 0x80000000;\n  if ((int)signFlag < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  count = leadingZeroCount(input);\n  shift = count - 8;\n  result = ((signFlag | 0x4b000000) - 0x800000) + shift * -0x800000;\n  if (7 < count) {\n    count = 0 << (shift & 0xff);\n    signFlag = result + (input << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < count);\n    if (count == 0x80000000) {\n      signFlag = signFlag & 0xfffffffe;\n    }\n    return signFlag;\n  }\n  shift = input << count + 0x18;\n  signFlag = result + ((input >> (0x20 - (count + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    signFlag = signFlag & ~(shift >> 0x1f);\n  }\n  return signFlag;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "count_bits_and_manipulate_08008e44",
                "param_1": "input",
                "uVar1": "count",
                "uVar2": "shift",
                "uVar3": "signFlag",
                "iVar4": "result",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_value_08008eec",
            "code": "\nuint calculateFloatingPointValue_08008eec(uint inputA,uint inputB,undefined4 inputC,uint inputD)\n\n{\n  longlong result64;\n  uint result;\n  uint shiftedBitsA;\n  int sumOfShiftedBits;\n  int difference;\n  uint resultLowerPart;\n  int difference2;\n  uint resultUpperPart;\n  bool isConditionMet;\n  bool isBorrowSet;\n  \n  shiftedBitsA = inputA >> 0x17 & 0xff;\n  isConditionMet = shiftedBitsA == 0;\n  if (!isConditionMet) {\n    inputD = inputB >> 0x17 & 0xff;\n    isConditionMet = inputD == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = shiftedBitsA == 0xff;\n  }\n  if (!isConditionMet) {\n    isConditionMet = inputD == 0xff;\n  }\n  if (isConditionMet) {\n    inputD = inputB >> 0x17 & 0xff;\n    if (shiftedBitsA == 0xff || inputD == 0xff) {\n      isConditionMet = inputA == 0 || inputA == 0x80000000;\n      result = inputB;\n      if (inputA != 0 && inputA != 0x80000000) {\n        isConditionMet = inputB == 0;\n        result = inputA;\n      }\n      if (!isConditionMet) {\n        isConditionMet = inputB == 0x80000000;\n      }\n      resultUpperPart = result;\n      if (((isConditionMet) || ((shiftedBitsA == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((inputD == 0xff && (resultUpperPart = inputB, (inputB & 0x7fffff) != 0)))) {\n        return resultUpperPart | 0x7fc00000;\n      }\n      result = result ^ inputB;\n      goto LAB_0800903c;\n    }\n    isConditionMet = (inputA & 0x7fffffff) == 0;\n    if (!isConditionMet) {\n      isConditionMet = (inputB & 0x7fffffff) == 0;\n    }\n    if (isConditionMet) {\n      return (inputA ^ inputB) & 0x80000000;\n    }\n    isConditionMet = shiftedBitsA == 0;\n    result = inputA & 0x80000000;\n    while( true ) {\n      if (isConditionMet) {\n        inputA = inputA << 1;\n        isConditionMet = (inputA & 0x800000) == 0;\n      }\n      if (!isConditionMet) break;\n      shiftedBitsA = shiftedBitsA - 1;\n    }\n    inputA = inputA | result;\n    isConditionMet = inputD == 0;\n    result = inputB & 0x80000000;\n    while( true ) {\n      if (isConditionMet) {\n        inputB = inputB << 1;\n        isConditionMet = (inputB & 0x800000) == 0;\n      }\n      if (!isConditionMet) break;\n      inputD = inputD - 1;\n    }\n    inputB = inputB | result;\n  }\n  sumOfShiftedBits = shiftedBitsA + inputD;\n  resultUpperPart = inputA ^ inputB;\n  shiftedBitsA = inputA << 9;\n  isConditionMet = shiftedBitsA == 0;\n  if (!isConditionMet) {\n    inputB = inputB << 9;\n    isConditionMet = inputB == 0;\n  }\n  if (isConditionMet) {\n    if (shiftedBitsA == 0) {\n      inputB = inputB << 9;\n    }\n    result = resultUpperPart & 0x80000000 | inputA & 0x7fffff | inputB >> 9;\n    isBorrowSet = SBORROW4(sumOfShiftedBits,0x7f);\n    difference = sumOfShiftedBits + -0x7f;\n    isConditionMet = difference == 0;\n    difference2 = difference;\n    if (!isConditionMet && 0x7e < sumOfShiftedBits) {\n      isBorrowSet = SBORROW4(0xff,difference);\n      difference2 = 0xff - difference;\n      isConditionMet = difference == 0xff;\n    }\n    if (!isConditionMet && difference2 < 0 == isBorrowSet) {\n      result = result | difference * 0x800000;\n    }\n    if (!isConditionMet && difference2 < 0 == isBorrowSet) {\n      return result;\n    }\n    result = result | 0x800000;\n    resultLowerPart = 0;\n    isBorrowSet = SBORROW4(difference,1);\n    resultUpperPart = sumOfShiftedBits - 0x80;\n    isConditionMet = resultUpperPart == 0;\n    shiftedBitsA = resultUpperPart;\n  }\n  else {\n    result64 = (ulonglong)(shiftedBitsA >> 5 | 0x8000000) * (ulonglong)(inputB >> 5 | 0x8000000);\n    resultLowerPart = (uint)result64;\n    result = (uint)((ulonglong)result64 >> 0x20);\n    isConditionMet = result < 0x800000;\n    if (isConditionMet) {\n      result = result << 1;\n    }\n    if (isConditionMet) {\n      result = result | resultLowerPart >> 0x1f;\n      resultLowerPart = resultLowerPart << 1;\n    }\n    result = resultUpperPart & 0x80000000 | result;\n    resultUpperPart = (sumOfShiftedBits + -0x7f) - (uint)isConditionMet;\n    isBorrowSet = SBORROW4(resultUpperPart,0xfd);\n    isConditionMet = resultUpperPart == 0xfd;\n    shiftedBitsA = resultUpperPart - 0xfd;\n    if (resultUpperPart < 0xfe) {\n      result = result + resultUpperPart * 0x800000 + (uint)(0x7fffffff < resultLowerPart);\n      if (resultLowerPart == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isConditionMet || (int)shiftedBitsA < 0 != isBorrowSet) {\n    isConditionMet = (int)(resultUpperPart + 0x19) < 0;\n    if (resultUpperPart == 0xffffffe7 || isConditionMet != SCARRY4(resultUpperPart,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (resultUpperPart != 0xffffffe7 && isConditionMet == SCARRY4(resultUpperPart,0x19)) {\n      shiftedBitsA = (result << 1) >> (-resultUpperPart & 0xff);\n      resultUpperPart = result << (resultUpperPart + 0x20 & 0xff);\n      shiftedBitsA = ((uint)((result & 0x80000000) != 0) << 0x1f | shiftedBitsA >> 1) + (uint)((byte)shiftedBitsA & 1);\n      if ((resultLowerPart | resultUpperPart << 1) == 0) {\n        shiftedBitsA = shiftedBitsA & ~(resultUpperPart >> 0x1f);\n      }\n      return shiftedBitsA;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_value_08008eec",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputC",
                "param_4": "inputD",
                "lVar1": "result64",
                "uVar2": "result",
                "uVar3": "shiftedBitsA",
                "iVar4": "sumOfShiftedBits",
                "iVar5": "difference",
                "uVar6": "resultLowerPart",
                "iVar7": "difference2",
                "uVar8": "resultUpperPart",
                "bVar9": "isConditionMet",
                "bVar10": "isBorrowSet"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_floating_point_08009054",
            "code": "\nuint calculateFloatingPoint_08009054(uint x,uint y,undefined4 mask,uint shift)\n\n{\n  uint exponentBits;\n  uint xExponent;\n  int exponentDiff;\n  uint shiftedSignificand;\n  int yExponent;\n  uint result;\n  bool isZero;\n  bool isNegative;\n  bool isCarry;\n  \n  xExponent = x >> 0x17 & 0xff;\n  isZero = xExponent == 0;\n  if (!isZero) {\n    shift = y >> 0x17 & 0xff;\n    isZero = shift == 0;\n  }\n  if (!isZero) {\n    isZero = xExponent == 0xff;\n  }\n  if (!isZero) {\n    isZero = shift == 0xff;\n  }\n  if (isZero) {\n    shift = y >> 0x17 & 0xff;\n    result = x;\n    if (xExponent == 0xff) {\n      if (((x & 0x7fffff) != 0) || (result = y, shift == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (shift == 0xff) {\n        result = y;\n        if ((y & 0x7fffff) == 0) {\nLAB_08009000:\n          return (x ^ y) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (x & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (y & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = xExponent == 0;\n        result = x & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            x = x << 1;\n            isZero = (x & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          xExponent = xExponent - 1;\n        }\n        x = x | result;\n        isZero = shift == 0;\n        result = y & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            y = y << 1;\n            isZero = (y & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          shift = shift - 1;\n        }\n        y = y | result;\n        goto LAB_0800906c;\n      }\n      if ((x & 0x7fffffff) == 0) {\n        if ((y & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    x = x ^ y;\n  }\n  else {\nLAB_0800906c:\n    exponentDiff = xExponent - shift;\n    if (y << 9 == 0) {\n      x = (x ^ y) & 0x80000000 | x & 0x7fffff;\n      isCarry = SCARRY4(exponentDiff,0x7f);\n      yExponent = exponentDiff + 0x7f;\n      isZero = yExponent < 0;\n      isNegative = yExponent == 0;\n      if (!isNegative && isZero == isCarry) {\n        isCarry = SBORROW4(0xff,yExponent);\n        isZero = 0xff - yExponent < 0;\n        isNegative = yExponent == 0xff;\n      }\n      if (!isNegative && isZero == isCarry) {\n        x = x | yExponent * 0x800000;\n      }\n      if (!isNegative && isZero == isCarry) {\n        return x;\n      }\n      x = x | 0x800000;\n      xExponent = 0;\n      isNegative = SBORROW4(yExponent,1);\n      shiftedSignificand = exponentDiff + 0x7e;\n      isZero = shiftedSignificand == 0;\n      result = shiftedSignificand;\n    }\n    else {\n      exponentBits = (y << 9) >> 4 | 0x10000000;\n      xExponent = (x << 9) >> 4 | 0x10000000;\n      x = (x ^ y) & 0x80000000;\n      isZero = exponentBits <= xExponent;\n      if (!isZero) {\n        xExponent = xExponent << 1;\n      }\n      shiftedSignificand = exponentDiff + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (exponentBits <= xExponent) {\n          xExponent = xExponent - exponentBits;\n          x = x | result;\n        }\n        isZero = exponentBits >> 1 <= xExponent;\n        if (isZero) {\n          xExponent = xExponent - (exponentBits >> 1);\n        }\n        if (isZero) {\n          x = x | result >> 1;\n        }\n        isZero = exponentBits >> 2 <= xExponent;\n        if (isZero) {\n          xExponent = xExponent - (exponentBits >> 2);\n        }\n        if (isZero) {\n          x = x | result >> 2;\n        }\n        isZero = exponentBits >> 3 <= xExponent;\n        if (isZero) {\n          xExponent = xExponent - (exponentBits >> 3);\n        }\n        if (isZero) {\n          x = x | result >> 3;\n        }\n        xExponent = xExponent * 0x10;\n        isZero = xExponent == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(shiftedSignificand,0xfd);\n      isZero = shiftedSignificand == 0xfd;\n      result = shiftedSignificand - 0xfd;\n      if (shiftedSignificand < 0xfe) {\n        x = x + shiftedSignificand * 0x800000 + (uint)(exponentBits <= xExponent);\n        if (xExponent - exponentBits == 0) {\n          x = x & 0xfffffffe;\n        }\n        return x;\n      }\n    }\n    if (isZero || (int)result < 0 != isNegative) {\n      isZero = (int)(shiftedSignificand + 0x19) < 0;\n      if (shiftedSignificand == 0xffffffe7 || isZero != SCARRY4(shiftedSignificand,0x19)) {\n        x = x & 0x80000000;\n      }\n      if (shiftedSignificand == 0xffffffe7 || isZero != SCARRY4(shiftedSignificand,0x19)) {\n        return x;\n      }\n      result = (x << 1) >> (-shiftedSignificand & 0xff);\n      shiftedSignificand = x << (shiftedSignificand + 0x20 & 0xff);\n      result = ((uint)((x & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((xExponent | shiftedSignificand << 1) == 0) {\n        result = result & ~(shiftedSignificand >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return x & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "param_1": "x",
                "param_2": "y",
                "param_3": "mask",
                "param_4": "shift",
                "uVar1": "exponentBits",
                "uVar2": "xExponent",
                "iVar3": "exponentDiff",
                "uVar4": "shiftedSignificand",
                "iVar5": "yExponent",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "isCarry"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "check_overflow_0800919c",
            "code": "\nuint check_overflow_0800919c(uint num1,uint num2)\n\n{\n  bool is_negative_result;\n  uint num1_shifted;\n  uint num2_shifted;\n  uint combined_vars;\n  bool is_zero_result;\n  \n  num1_shifted = num1 * 2;\n  num2_shifted = num2 * 2;\n  if (((int)num1_shifted >> 0x18 == -1 || (int)num2_shifted >> 0x18 == -1) &&\n     ((((int)num1_shifted >> 0x18 == -1 && ((num1 & 0x7fffff) != 0)) ||\n      (((int)num2_shifted >> 0x18 == -1 && ((num2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_vars = num1_shifted | num2 & 0x7fffffff;\n  is_zero_result = combined_vars == 0;\n  if (!is_zero_result) {\n    combined_vars = num1 ^ num2;\n    is_zero_result = combined_vars == 0;\n  }\n  is_negative_result = -1 < (int)combined_vars;\n  if (is_negative_result) {\n    num1 = num1_shifted + num2 * -2;\n    is_zero_result = num1 == 0;\n  }\n  if ((is_negative_result && num2_shifted <= num1_shifted) && !is_zero_result) {\n    num1 = (int)num2 >> 0x1f;\n  }\n  if (!is_negative_result || num2_shifted > num1_shifted) {\n    num1 = ~((int)num2 >> 0x1f);\n  }\n  if (!is_zero_result) {\n    num1 = num1 | 1;\n  }\n  return num1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "check_overflow_0800919c",
                "param_1": "num1",
                "param_2": "num2",
                "uVar2": "num1_shifted",
                "uVar3": "num2_shifted",
                "uVar4": "combined_vars",
                "bVar1": "is_negative_result",
                "bVar5": "is_zero_result"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "concatenate_parameters_080091fc",
            "code": "\nvoid concatenateParameters_080091fc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_parameters_08009204(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "concatenate_parameters_080091fc",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_parameters_08009204",
            "code": "\nundefined8 concatenate_parameters_08009204(undefined4 parameter_1,undefined4 parameter_2)\n\n{\n  check_overflow_0800919c();\n  return CONCAT44(parameter_2,parameter_1);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_parameters_08009204",
                "param_1": "parameter_1",
                "param_2": "parameter_2"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "is_concatenation_successful_08009214",
            "code": "\nbool isConcatenationSuccessful_08009214(void)\n\n{\n  char concatenationResult;\n  \n  concatenate_parameters_08009204();\n  return concatenationResult != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "is_concatenation_successful_08009214",
                "in_ZR": "concatenationResult"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_if_concatenation_empty_08009228",
            "code": "\nbool check_if_concatenation_empty_08009228(void)\n\n{\n  char character;\n  \n  concatenate_parameters();\n  return character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_if_concatenation_empty_08009228",
                "in_CY": "character",
                "concatenate_parameters_08009204": "concatenate_parameters"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_concatenation_result_0800923c",
            "code": "\nbool check_concatenation_result_0800923c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  concatenate_parameters_08009204();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_concatenation_result_0800923c",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_concatenation_result_08009250",
            "code": "\nbool checkConcatenationResult_08009250(void)\n\n{\n  undefined isZeroResult;\n  undefined isCarrySet;\n  \n  concatenate_parameters_080091fc();\n  return !(bool)isCarrySet || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_concatenation_result_08009250",
                "in_ZR": "isZeroResult",
                "in_CY": "isCarrySet"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "is_concatenation_successful_08009264",
            "code": "\nbool isConcatenationSuccessful_08009264(void)\n\n{\n  char inputCharacter;\n  \n  concatenate_parameters_080091fc();\n  return inputCharacter == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "is_concatenation_successful_08009264",
                "in_CY": "inputCharacter"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_signed_int_08009278",
            "code": "\nuint convertToSignedInt_08009278(uint input)\n\n{\n  uint shiftedValue;\n  uint shiftDifference;\n  \n  if (input << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (input << 1) >> 0x18;\n  shiftDifference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && shiftDifference != 0) {\n    shiftedValue = (input << 8 | 0x80000000) >> (shiftDifference & 0xff);\n    if ((input & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((shiftDifference == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_signed_int_08009278",
                "param_1": "input",
                "uVar1": "shiftedValue",
                "uVar2": "shiftDifference"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_0800756c();\n  execute_multiple_functions_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_system_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_reversed_value_08009318",
            "code": "\nlonglong calculate_reversed_value_08009318(uint input_value_1,uint input_value_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int result_1;\n  uint shifted_bits;\n  uint mask;\n  bool carry_flag;\n  undefined8 calculated_value;\n  longlong reversed_value;\n  \n  mask = (input_value_2 << 1) >> 0x15;\n  shifted_bits = mask - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      calculated_value = calculate_sum_product_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n      result_1 = check_if_null_terminate_08008b60((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20),0,0);\n      reversed_value = CONCAT44(input_value_2,input_value_1);\n      if (result_1 != 0) {\n        if ((int)input_value_2 < 0) {\n          reversed_value = -0x8000000000000000;\n        }\n        else if ((input_value_1 | input_value_2) == 0) {\n          reversed_value = 0;\n        }\n        else {\n          reversed_value = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shifted_bits & 0xff);\n      reversed_value = CONCAT44(input_value_2,input_value_1);\n      if ((input_value_2 & mask | input_value_1) != 0) {\n        calculated_value = calculate_sum_product_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n        result_1 = check_if_null_terminate_08008b60((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20),0,0);\n        reversed_value = CONCAT44(input_value_2,input_value_1);\n        if (result_1 != 0) {\n          if (0 < (int)input_value_2) {\n            input_value_2 = input_value_2 + (0x100000 >> (shifted_bits & 0xff));\n          }\n          reversed_value = (ulonglong)(input_value_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_bits < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    reversed_value = CONCAT44(input_value_2,input_value_1);\n    if ((mask & input_value_1) != 0) {\n      calculated_value = calculate_sum_product_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n      result_1 = check_if_null_terminate_08008b60((int)calculated_value,(int)((ulonglong)calculated_value >> 0x20),0,0);\n      reversed_value = CONCAT44(input_value_2,input_value_1);\n      if (result_1 != 0) {\n        if (0 < (int)input_value_2) {\n          if (shifted_bits == 0x14) {\n            input_value_2 = input_value_2 + 1;\n          }\n          else {\n            shifted_bits = 1 << (0x34 - shifted_bits & 0xff);\n            carry_flag = CARRY4(shifted_bits,input_value_1);\n            input_value_1 = shifted_bits + input_value_1;\n            if (carry_flag != false) {\n              input_value_2 = input_value_2 + 1;\n            }\n          }\n        }\n        reversed_value = CONCAT44(input_value_2,input_value_1 & ~mask);\n      }\n    }\n  }\n  else {\n    reversed_value = CONCAT44(input_value_2,input_value_1);\n    if (shifted_bits == 0x400) {\n      reversed_value = calculate_sum_product_080082d4();\n    }\n  }\n  return reversed_value;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_reversed_value_08009318",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "iVar1": "result_1",
                "uVar2": "shifted_bits",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "calculated_value",
                "lVar6": "reversed_value"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_08009410",
            "code": "\nundefined4 calculate_08009410(undefined4 input_param,uint input_value)\n\n{\n  undefined4 result;\n  uint flag;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  \n  if (0x3fe921fb < (input_value & 0x7fffffff)) {\n    if ((input_value & 0x7fffffff) < 0x7ff00000) {\n      flag = calculate_08009410_result_08009d78(input_param,input_value,&temp_var1);\n      flag = flag & 3;\n      if (flag == 1) {\n        result = calculate_08009410_result_0800adf0(temp_var1,temp_var2,temp_var3,temp_var4,1);\n      }\n      else if (flag == 2) {\n        result = calculate_08009410_result_0800a348(temp_var1,temp_var2,temp_var3,temp_var4);\n      }\n      else if (flag == 0) {\n        result = calculate_08009410_result_0800a348(temp_var1,temp_var2,temp_var3,temp_var4);\n      }\n      else {\n        result = calculate_08009410_result_0800adf0(temp_var1,temp_var2,temp_var3,temp_var4,1);\n      }\n    }\n    else {\n      result = calculate_08009410_result_080082d0(input_param,input_value,input_param,input_value);\n    }\n    return result;\n  }\n  result = calculate_08009410_result_0800a348(input_param,input_value,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_08009410",
                "param_1": "input_param",
                "param_2": "input_value",
                "uVar1": "result",
                "uVar2": "flag",
                "local_28": "temp_var1",
                "uStack_24": "temp_var2",
                "local_20": "temp_var3",
                "uStack_1c": "temp_var4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_result_080094c0",
            "code": "\nlonglong calculate_result_080094c0(uint input_value_1,uint input_value_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int check_result;\n  uint shifted_value;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong final_result;\n  \n  mask = (input_value_2 << 1) >> 0x15;\n  shifted_value = mask - 0x3ff;\n  if ((int)shifted_value < 0x14) {\n    if ((int)shifted_value < 0) {\n      result = calculate_sum_product_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n      check_result = check_if_null_terminate_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input_value_2,input_value_1);\n      if (check_result != 0) {\n        if ((int)input_value_2 < 0) {\n          if ((input_value_1 | input_value_2 & 0x7fffffff) != 0) {\n            input_value_2 = 0xbff00000;\n          }\n          final_result = (ulonglong)input_value_2 << 0x20;\n        }\n        else {\n          final_result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shifted_value & 0xff);\n      final_result = CONCAT44(input_value_2,input_value_1);\n      if ((input_value_2 & mask | input_value_1) != 0) {\n        result = calculate_sum_product_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n        check_result = check_if_null_terminate_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        final_result = CONCAT44(input_value_2,input_value_1);\n        if (check_result != 0) {\n          if ((int)input_value_2 < 0) {\n            input_value_2 = input_value_2 + (0x100000 >> (shifted_value & 0xff));\n          }\n          final_result = (ulonglong)(input_value_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_value < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    final_result = CONCAT44(input_value_2,input_value_1);\n    if ((mask & input_value_1) != 0) {\n      result = calculate_sum_product_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n      check_result = check_if_null_terminate_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input_value_2,input_value_1);\n      if (check_result != 0) {\n        if ((int)input_value_2 < 0) {\n          if (shifted_value == 0x14) {\n            input_value_2 = input_value_2 + 1;\n          }\n          else {\n            shifted_value = 1 << (0x34 - shifted_value & 0xff);\n            carry_flag = CARRY4(shifted_value,input_value_1);\n            input_value_1 = shifted_value + input_value_1;\n            if (carry_flag != false) {\n              input_value_2 = input_value_2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input_value_2,input_value_1 & ~mask);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input_value_2,input_value_1);\n    if (shifted_value == 0x400) {\n      final_result = calculate_sum_product_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "iVar1": "check_result",
                "uVar2": "shifted_value",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "result",
                "lVar6": "final_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_new_value_080095b8",
            "code": "\nint calculate_new_value_080095b8(uint input_value_1,uint input_value_2)\n\n{\n  uint carry;\n  uint shifted_bits;\n  uint result;\n  int sign;\n  uint difference;\n  \n  shifted_bits = (input_value_2 << 1) >> 0x15;\n  difference = shifted_bits - 0x3ff;\n  if ((int)input_value_2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input_value_2 & 0xfffff | 0x100000;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      if (difference != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (difference & 0xff)) >> (0x14 - difference & 0xff);\n  }\n  else {\n    if (0x1e < difference) {\n      sign = calculate_result_08008ba0();\n      return sign;\n    }\n    if ((int)difference < 0x34) {\n      carry = 0x80000000 >> (shifted_bits - 0x413 & 0xff);\n      if (CARRY4(carry,input_value_1) != false) {\n        result = result + 1;\n      }\n      result = result << (shifted_bits - 0x413 & 0xff);\n      if (difference != 0x14) {\n        result = result | carry + input_value_1 >> (0x34 - difference & 0xff);\n      }\n    }\n    else {\n      result = result << (shifted_bits - 0x413 & 0xff) | input_value_1 << (shifted_bits - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_new_value_080095b8",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "carry",
                "uVar2": "shifted_bits",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "difference"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "calculate_float_08009654",
            "code": "\nlonglong calculate_float_08009654(uint input_a,uint input_b)\n\n{\n  uint temp_shift_count;\n  uint temp_shift_mask;\n  longlong result;\n  \n  result = CONCAT44(input_b,input_a);\n  temp_shift_mask = (input_b << 1) >> 0x15;\n  temp_shift_count = temp_shift_mask - 0x3ff;\n  if ((int)temp_shift_count < 0x14) {\n    if ((int)temp_shift_count < 0) {\n      input_b = input_b & 0x80000000;\n      if (temp_shift_count == 0xffffffff) {\n        input_b = input_b | 0x3ff00000;\n      }\n      result = (ulonglong)input_b << 0x20;\n    }\n    else {\n      temp_shift_mask = 0xfffff >> (temp_shift_count & 0xff);\n      result = CONCAT44(input_b,input_a);\n      if ((input_b & temp_shift_mask | input_a) != 0) {\n        result = (ulonglong)(input_b + (0x80000 >> (temp_shift_count & 0xff)) & ~temp_shift_mask) << 0x20;\n      }\n    }\n  }\n  else if ((int)temp_shift_count < 0x34) {\n    temp_shift_mask = 0xffffffff >> (temp_shift_mask - 0x413 & 0xff);\n    if ((input_a & temp_shift_mask) != 0) {\n      temp_shift_count = 1 << (0x33 - temp_shift_count & 0xff);\n      if (has_carry(input_a,temp_shift_count) != false) {\n        input_b = input_b + 1;\n      }\n      result = CONCAT44(input_b,input_a + temp_shift_count & ~temp_shift_mask);\n    }\n  }\n  else {\n    result = CONCAT44(input_b,input_a);\n    if (temp_shift_count == 0x400) {\n      result = calculate_sum_product_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "calculate_float_08009654",
                "param_1": "input_a",
                "param_2": "input_b",
                "uVar1": "temp_shift_count",
                "uVar2": "temp_shift_mask",
                "lVar3": "result",
                "CARRY4": "has_carry"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_result_080096e8",
            "code": "\nundefined4 calculate_result_080096e8(undefined4 input_param,uint input_value)\n\n{\n  undefined4 result;\n  uint calculated_result;\n  undefined4 context_1;\n  undefined4 context_2;\n  undefined4 context_3;\n  undefined4 context_4;\n  \n  if (0x3fe921fb < (input_value & 0x7fffffff)) {\n    if ((input_value & 0x7fffffff) < 0x7ff00000) {\n      calculated_result = calculate_result_080096e8_08009d78(input_param,input_value,&context_1);\n      calculated_result = calculated_result & 3;\n      if (calculated_result == 1) {\n        result = calculate_result_080096e8_0800a348(context_1,context_2,context_3,context_4);\n      }\n      else if (calculated_result == 2) {\n        result = calculate_result_080096e8_0800adf0(context_1,context_2,context_3,context_4,1);\n      }\n      else if (calculated_result == 0) {\n        result = calculate_result_080096e8_0800adf0(context_1,context_2,context_3,context_4,1);\n      }\n      else {\n        result = calculate_result_080096e8_0800a348(context_1,context_2,context_3,context_4);\n      }\n    }\n    else {\n      result = calculate_result_080096e8_080082d0(input_param,input_value,input_param,input_value);\n    }\n    return result;\n  }\n  result = calculate_result_080096e8_0800adf0(input_param,input_value,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8",
                "param_1": "input_param",
                "param_2": "input_value",
                "uVar1": "result",
                "uVar2": "calculated_result",
                "local_28": "context_1",
                "uStack_24": "context_2",
                "local_20": "context_3",
                "uStack_1c": "context_4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_shifted_value_08009798",
            "code": "\nlonglong calculate_shifted_value_08009798(uint original_value,uint shift_amount,undefined4 param_3,undefined4 param_4)\n\n{\n  uint shift_difference;\n  uint shifted_value;\n  longlong new_result;\n  \n  shifted_value = (shift_amount << 1) >> 0x15;\n  shift_difference = shifted_value - 0x3ff;\n  if ((int)shift_difference < 0x14) {\n    if ((int)shift_difference < 0) {\n      return ((ulonglong)shift_amount & 0x80000000) << 0x20;\n    }\n    new_result = (ulonglong)(shift_amount & ~(0xfffff >> (shift_difference & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shift_difference < 0x34) {\n      return CONCAT44(shift_amount,original_value & ~(0xffffffffU >> (shifted_value - 0x413 & 0xff)));\n    }\n    if (shift_difference != 0x400) {\n      return CONCAT44(shift_amount,original_value);\n    }\n    new_result = calculate_sum_product_080082d4(original_value,shift_amount,original_value,shift_amount,param_4);\n  }\n  return new_result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_shifted_value_08009798",
                "param_1": "original_value",
                "param_2": "shift_amount",
                "uVar1": "shift_difference",
                "uVar2": "shifted_value",
                "lVar3": "new_result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_float_from_params_thunk_08009990",
            "code": "\nuint calculate_float_from_params_thunk_08009990(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  int difference_iVar;\n  undefined4 converted_value_uVar;\n  uint shifted_value_uVar;\n  uint masked_param_4_uVar;\n  uint masked_param_2_uVar;\n  undefined8 calculated_result_uVar;\n  \n  masked_param_4_uVar = input_param_4 & 0x7fffffff;\n  if (((masked_param_4_uVar | (-input_param_3 | input_param_3) >> 0x1f) < 0x7ff00001) &&\n     (masked_param_2_uVar = input_param_2 & 0x7fffffff, (masked_param_2_uVar | (-input_param_1 | input_param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_param_4 + 0xc0100000 | input_param_3) == 0) {\n      masked_param_4_uVar = calculate_result_0800af78();\n      return masked_param_4_uVar;\n    }\n    shifted_value_uVar = (int)input_param_4 >> 0x1e & 2U | input_param_2 >> 0x1f;\n    if ((masked_param_2_uVar | input_param_1) == 0) {\n      if (shifted_value_uVar == 2) {\n        input_param_1 = 0x54442d18;\n      }\n      else if (shifted_value_uVar == 3) {\n        input_param_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((masked_param_4_uVar | input_param_3) != 0) {\n        if (masked_param_4_uVar == 0x7ff00000) {\n          shifted_value_uVar = shifted_value_uVar - 1;\n          if (masked_param_2_uVar == 0x7ff00000) {\n            if (shifted_value_uVar < 3) {\n              return *(uint *)(&DAT_0800be68 + shifted_value_uVar * 8);\n            }\n            return 0x54442d18;\n          }\n          if (shifted_value_uVar < 3) {\n            return *(uint *)(&DAT_0800be80 + shifted_value_uVar * 8);\n          }\n          return 0;\n        }\n        if (masked_param_2_uVar != 0x7ff00000) {\n          difference_iVar = (int)(masked_param_2_uVar - masked_param_4_uVar) >> 0x14;\n          if ((int)(masked_param_2_uVar - masked_param_4_uVar) < 0x3d00000) {\n            if (((int)input_param_4 < 0) && (difference_iVar + 0x3c < 0 != SCARRY4(difference_iVar,0x3c))) {\n              calculated_result_uVar = 0;\n            }\n            else {\n              convert_to_ieee754_08008894(input_param_1,input_param_2,input_param_3,input_param_4,input_param_4);\n              FUNC_0800b2cc();\n              calculated_result_uVar = calculate_result_0800af78();\n            }\n          }\n          else {\n            calculated_result_uVar = 0x3ff921fb54442d18;\n          }\n          converted_value_uVar = (undefined4)((ulonglong)calculated_result_uVar >> 0x20);\n          masked_param_4_uVar = (uint)calculated_result_uVar;\n          if (shifted_value_uVar == 1) {\n            return masked_param_4_uVar;\n          }\n          if (shifted_value_uVar == 2) {\n            calculated_result_uVar = calculate_result_080082d0(masked_param_4_uVar,converted_value_uVar,0x33145c07,0x3ca1a626);\n            masked_param_4_uVar = calculate_result_080082d0(0x54442d18,0x400921fb,(int)calculated_result_uVar,(int)((ulonglong)calculated_result_uVar >> 0x20));\n            return masked_param_4_uVar;\n          }\n          if (shifted_value_uVar == 0) {\n            return masked_param_4_uVar;\n          }\n          calculated_result_uVar = calculate_result_080082d0(masked_param_4_uVar,converted_value_uVar,0x33145c07,0x3ca1a626);\n          masked_param_4_uVar = calculate_result_080082d0((int)calculated_result_uVar,(int)((ulonglong)calculated_result_uVar >> 0x20),0x54442d18,0x400921fb);\n          return masked_param_4_uVar;\n        }\n      }\n      if ((int)input_param_2 < 0) {\n        input_param_1 = 0x54442d18;\n      }\n      else {\n        input_param_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_param_1 = calculate_sum_product_080082d4(input_param_3,input_param_4,input_param_1,input_param_2);\n  }\n  return input_param_1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_float_from_params_thunk_08009990",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "difference_iVar",
                "uVar2": "converted_value_uVar",
                "uVar3": "shifted_value_uVar",
                "uVar4": "masked_param_4_uVar",
                "uVar5": "masked_param_2_uVar",
                "uVar6": "calculated_result_uVar"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_and_initialize_0800981c",
            "code": "\nundefined8 calculate_and_initialize_0800981c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 *data_pointer;\n  int *data_value_pointer;\n  undefined8 final_result;\n  undefined4 constant_1;\n  char *string_constant;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  int bit_shift_result;\n  \n  final_result = calculate_result_08009b24();\n  if (DAT_20000014 == -1) {\n    return final_result;\n  }\n  bit_shift_result = clear_bit_and_shift_right_0800b2d4();\n  if (bit_shift_result != 0) {\n    return final_result;\n  }\n  result = clear_bit_and_shift_right_0800b2d4(input_1,input_2);\n  if (result == 0) {\n    return final_result;\n  }\n  result = clear_bit_and_shift_right_0800b2d4(input_3,input_4);\n  if (result == 0) {\n    return final_result;\n  }\n  constant_1 = 3;\n  string_constant = \"hypot\";\n  param_1_copy = input_1;\n  param_2_copy = input_2;\n  param_3_copy = input_3;\n  param_4_copy = input_4;\n  if (DAT_20000014 == '\\0') {\n    constant_2 = 0xe0000000;\n    constant_3 = 0x47efffff;\nLAB_080098aa:\n    result = initialize_0800b2e0(&constant_1);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    constant_2 = 0;\n    constant_3 = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  data_pointer = (undefined4 *)get_data_value_0800b3dc();\n  *data_pointer = 0x22;\nLAB_08009896:\n  final_result = CONCAT44(constant_3,constant_2);\n  if (bit_shift_result != 0) {\n    data_value_pointer = (int *)get_data_value_0800b3dc();\n    final_result = CONCAT44(constant_3,constant_2);\n    *data_value_pointer = bit_shift_result;\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_and_initialize_0800981c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "puVar2": "data_pointer",
                "piVar3": "data_value_pointer",
                "uVar4": "final_result",
                "local_50": "constant_1",
                "pcStack_4c": "string_constant",
                "local_48": "param_1_copy",
                "uStack_44": "param_2_copy",
                "local_40": "param_3_copy",
                "uStack_3c": "param_4_copy",
                "local_38": "constant_2",
                "uStack_34": "constant_3",
                "local_30": "bit_shift_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "process_data_080098d0",
            "code": "\nundefined4 processData_080098d0(undefined4 input1,undefined4 input2)\n\n{\n  char cVar1;\n  undefined4 result;\n  int paramError;\n  undefined4 *dataValuePointer;\n  int *dataValueIntPointer;\n  undefined4 flag;\n  undefined *dataPointer;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined8 conversionResult;\n  int checkResult;\n  \n  result = calculate_0800a1bc();\n  cVar1 = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (checkResult = check_parameters_08008b74(input1,input2,input1,input2), checkResult != 0)) ||\n     (paramError = is_argument_null_08008b24(input1,input2,0,0), paramError == 0)) {\n    return result;\n  }\n  flag = 1;\n  dataPointer = &DAT_0800be5c;\n  input1Copy = input1;\n  input2Copy = input2;\n  temp1 = input1;\n  temp2 = input2;\n  if (cVar1 == '\\0') {\n    conversionResult = 0;\nLAB_0800996c:\n    paramError = initialize_0800b2e0(&flag);\n    if (paramError != 0) goto joined_r0x0800997a;\n  }\n  else {\n    conversionResult = convert_to_ieee754_08008894(0,0,0,0);\n    if (cVar1 != '\\x02') goto LAB_0800996c;\n  }\n  dataValuePointer = (undefined4 *)get_data_value_0800b3dc();\n  *dataValuePointer = 0x21;\njoined_r0x0800997a:\n  if (checkResult != 0) {\n    dataValueIntPointer = (int *)get_data_value_0800b3dc();\n    *dataValueIntPointer = checkResult;\n  }\n  return (undefined4)conversionResult;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "process_data_080098d0",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "result",
                "iVar3": "paramError",
                "puVar4": "dataValuePointer",
                "piVar5": "dataValueIntPointer",
                "local_50": "flag",
                "local_4c": "dataPointer",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "temp1",
                "uStack_3c": "temp2",
                "local_38": "conversionResult",
                "local_30": "checkResult"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_floating_point_08009990",
            "code": "\nuint calculateFloatingPoint_08009990(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = value4 & 0x7fffffff;\n  if (((tempVar4 | (-value3 | value3) >> 0x1f) < 0x7ff00001) &&\n     (tempVar5 = value2 & 0x7fffffff, (tempVar5 | (-value1 | value1) >> 0x1f) < 0x7ff00001)) {\n    if ((value4 + 0xc0100000 | value3) == 0) {\n      tempVar4 = calculate_result_0800af78();\n      return tempVar4;\n    }\n    tempVar3 = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n    if ((tempVar5 | value1) == 0) {\n      if (tempVar3 == 2) {\n        value1 = 0x54442d18;\n      }\n      else if (tempVar3 == 3) {\n        value1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((tempVar4 | value3) != 0) {\n        if (tempVar4 == 0x7ff00000) {\n          tempVar3 = tempVar3 - 1;\n          if (tempVar5 == 0x7ff00000) {\n            if (tempVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + tempVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (tempVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + tempVar3 * 8);\n          }\n          return 0;\n        }\n        if (tempVar5 != 0x7ff00000) {\n          tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n          if ((int)(tempVar5 - tempVar4) < 0x3d00000) {\n            if (((int)value4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n              tempVar6 = 0;\n            }\n            else {\n              convert_to_ieee754_08008894(value1,value2,value3,value4,value4);\n              FUNC_0800b2cc();\n              tempVar6 = calculate_result_0800af78();\n            }\n          }\n          else {\n            tempVar6 = 0x3ff921fb54442d18;\n          }\n          tempVar2 = (undefined4)((ulonglong)tempVar6 >> 0x20);\n          tempVar4 = (uint)tempVar6;\n          if (tempVar3 == 1) {\n            return tempVar4;\n          }\n          if (tempVar3 == 2) {\n            tempVar6 = calculate_result_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n            tempVar4 = calculate_result_080082d0(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n            return tempVar4;\n          }\n          if (tempVar3 == 0) {\n            return tempVar4;\n          }\n          tempVar6 = calculate_result_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n          tempVar4 = calculate_result_080082d0((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n          return tempVar4;\n        }\n      }\n      if ((int)value2 < 0) {\n        value1 = 0x54442d18;\n      }\n      else {\n        value1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    value1 = calculate_sum_product_080082d4(value3,value4,value1,value2);\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_floating_point_08009990",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_result_08009b24",
            "code": "\nuint calculate_result_08009b24(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result1;\n  int isArgumentNull;\n  uint result2;\n  int result3;\n  undefined4 result4;\n  int result5;\n  uint result6;\n  undefined4 result7;\n  undefined4 result8;\n  undefined8 result9;\n  undefined8 result10;\n  undefined8 result11;\n  undefined8 result12;\n  int local_var;\n  \n  input_2 = input_2 & 0x7fffffff;\n  input_4 = input_4 & 0x7fffffff;\n  result2 = input_1;\n  result6 = input_2;\n  if (input_2 < input_4) {\n    result2 = input_3;\n    input_3 = input_1;\n    result6 = input_4;\n    input_4 = input_2;\n  }\n  if (0x3c00000 < (int)(result6 - input_4)) {\n    result2 = calculate_sum_product_080082d4(result2,result6,input_3,input_4);\n    return result2;\n  }\n  if (result6 < 0x5f300001) {\n    local_var = 0;\n  }\n  else {\n    if (0x7fefffff < result6) {\n      if ((result6 & 0xfffff | result2) != 0) {\n        result2 = calculate_sum_product_080082d4(result2,result6,input_3,input_4);\n      }\n      if ((input_4 ^ 0x7ff00000 | input_3) != 0) {\n        return result2;\n      }\n      return input_3;\n    }\n    result6 = result6 + 0xda800000;\n    input_4 = input_4 + 0xda800000;\n    local_var = 600;\n  }\n  result10 = CONCAT44(result6,result2);\n  result9 = CONCAT44(input_4,input_3);\n  if ((int)input_4 < 0x20b00000) {\n    if ((int)input_4 < 0x100000) {\n      if ((input_4 | input_3) == 0) {\n        return result2;\n      }\n      result9 = calculate_hash_08008640(input_3,input_4,0,0x7fd00000);\n      result10 = calculate_hash_08008640(result2,result6,0,0x7fd00000);\n      local_var = local_var + -0x3fe;\n    }\n    else {\n      result6 = result6 + 0x25800000;\n      result10 = CONCAT44(result6,result2);\n      input_4 = input_4 + 0x25800000;\n      result9 = CONCAT44(input_4,input_3);\n      local_var = local_var + -600;\n    }\n  }\n  result8 = (undefined4)((ulonglong)result10 >> 0x20);\n  result7 = (undefined4)result10;\n  result5 = (int)((ulonglong)result9 >> 0x20);\n  result4 = (undefined4)result9;\n  result9 = calculate_result_08009b24_080082d0(result7,result8,result4,result5);\n  result3 = (int)((ulonglong)result9 >> 0x20);\n  result1 = (undefined4)result9;\n  isArgumentNull = is_argument_null_08008b24(result4,result5,result1,result3);\n  if (isArgumentNull == 0) {\n    result9 = calculate_hash_08008640(0,input_4,0);\n    result10 = calculate_hash_08008640(result1,result3 + -0x80000000,result1,result3);\n    result11 = calculate_sum_product_080082d4(result7,result8,result7,result8);\n    result11 = calculate_result_08009b24_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),0,result6 + 0x100000);\n    result11 = calculate_hash_08008640((int)result11,(int)((ulonglong)result11 >> 0x20),result4,result5);\n    result12 = calculate_result_08009b24_080082d0(result4,result5,0,input_4);\n    result12 = calculate_hash_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),0,result6 + 0x100000);\n    result11 = calculate_sum_product_080082d4((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    result10 = calculate_result_08009b24_080082d0((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n                          (int)((ulonglong)result11 >> 0x20));\n    calculate_result_08009b24_080082d0((int)result9,(int)((ulonglong)result9 >> 0x20),(int)result10,\n                 (int)((ulonglong)result10 >> 0x20));\n    result9 = calculate_0800a1bc();\n  }\n  else {\n    result9 = calculate_hash_08008640(0,result6,0,result6);\n    result10 = calculate_hash_08008640(result4,result5 + -0x80000000,result4,result5);\n    result11 = calculate_sum_product_080082d4(result7,result8,0,result6);\n    result12 = calculate_result_08009b24_080082d0(result7,result8,0,result6);\n    result11 = calculate_hash_08008640((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    result10 = calculate_result_08009b24_080082d0((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n                          (int)((ulonglong)result11 >> 0x20));\n    calculate_result_08009b24_080082d0((int)result9,(int)((ulonglong)result9 >> 0x20),(int)result10,\n                 (int)((ulonglong)result10 >> 0x20));\n    result9 = calculate_0800a1bc();\n  }\n  result2 = (uint)result9;\n  if (local_var != 0) {\n    result2 = calculate_hash_08008640(result2,(int)((ulonglong)result9 >> 0x20),0,local_var * 0x100000 + 0x3ff00000);\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result1",
                "iVar2": "isArgumentNull",
                "uVar3": "result2",
                "iVar4": "result3",
                "uVar5": "result4",
                "iVar6": "result5",
                "uVar7": "result6",
                "uVar8": "result7",
                "uVar9": "result8",
                "uVar10": "result9",
                "uVar11": "result10",
                "uVar12": "result11",
                "uVar13": "result12",
                "local_3c": "local_var"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_result_08009d78",
            "code": "\nint calculateResult_08009d78(undefined4 input1,uint input2,undefined8 *output)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint var1;\n  int var2;\n  undefined8 var3;\n  undefined8 var4;\n  undefined8 var5;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined8 localVar3;\n  undefined8 localVar4;\n  undefined8 localVar5;\n  \n  var1 = input2 & 0x7fffffff;\n  if (var1 < 0x3fe921fc) {\n    *(undefined4 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(undefined4 *)(output + 1) = 0;\n    *(undefined4 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if (var1 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      var3 = calculate_sum_product_080082d4(input1,input2,0x54400000,0x3ff921fb);\n      result3 = (undefined4)((ulonglong)var3 >> 0x20);\n      result1 = (undefined4)var3;\n      if (var1 != 0x3ff921fb) {\n        var3 = calculate_sum_product_080082d4(result1,result3,0x1a626331,0x3dd0b461);\n        *output = var3;\n        var3 = calculate_result_080082d0(result1,result3);\n        var3 = calculate_sum_product_080082d4((int)var3,(int)((ulonglong)var3 >> 0x20),0x1a626331,0x3dd0b461);\n        output[1] = var3;\n        return -1;\n      }\n      var3 = calculate_sum_product_080082d4(result1,result3,0x1a600000,0x3dd0b461);\n      result1 = (undefined4)((ulonglong)var3 >> 0x20);\n      var4 = calculate_sum_product_080082d4((int)var3,result1,0x2e037073,0x3ba3198a);\n      *output = var4;\n      var3 = calculate_result_080082d0((int)var3,result1);\n      var3 = calculate_sum_product_080082d4((int)var3,(int)((ulonglong)var3 >> 0x20),0x2e037073,0x3ba3198a);\n      output[1] = var3;\n      return -1;\n    }\n    var3 = calculate_result_080082d0();\n    result3 = (undefined4)((ulonglong)var3 >> 0x20);\n    result1 = (undefined4)var3;\n    if (var1 != 0x3ff921fb) {\n      var3 = calculate_result_080082d0(result1,result3,0x1a626331,0x3dd0b461);\n      *output = var3;\n      var3 = calculate_result_080082d0(result1,result3);\n      var3 = calculate_result_080082d0((int)var3,(int)((ulonglong)var3 >> 0x20),0x1a626331,0x3dd0b461);\n      output[1] = var3;\n      return 1;\n    }\n    var3 = calculate_result_080082d0(result1,result3,0x1a600000,0x3dd0b461);\n    result1 = (undefined4)((ulonglong)var3 >> 0x20);\n    var4 = calculate_result_080082d0((int)var3,result1,0x2e037073,0x3ba3198a);\n    *output = var4;\n    var3 = calculate_result_080082d0((int)var3,result1);\n    var3 = calculate_result_080082d0((int)var3,(int)((ulonglong)var3 >> 0x20),0x2e037073,0x3ba3198a);\n    output[1] = var3;\n    return 1;\n  }\n  if (0x413921fb < var1) {\n    if (0x7fefffff < var1) {\n      var3 = calculate_result_080082d0(input1,input2,input1,input2);\n      output[1] = var3;\n      *output = var3;\n      return 0;\n    }\n    var2 = ((int)var1 >> 0x14) + -0x416;\n    calculate_result_08008ba0();\n    localVar3 = bitwise_shift_and_concat_0800856c();\n    var3 = calculate_result_080082d0(input1,var1 + var2 * -0x100000,(int)localVar3,\n                          (int)((ulonglong)localVar3 >> 0x20));\n    var3 = calculate_hash_08008640((int)var3,(int)((ulonglong)var3 >> 0x20),0,0x41700000);\n    calculate_result_08008ba0();\n    localVar4 = bitwise_shift_and_concat_0800856c();\n    var3 = calculate_result_080082d0((int)var3,(int)((ulonglong)var3 >> 0x20));\n    localVar5 = calculate_hash_08008640((int)var3,(int)((ulonglong)var3 >> 0x20),0,0x41700000);\n    is_valid_param_08008b10((int)localVar5,(int)((ulonglong)localVar5 >> 0x20),0,0);\n    var2 = calculate_final_result_0800a5a0(&localVar3,output,var2);\n    if (-1 < (int)input2) {\n      return var2;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -var2;\n  }\n  var3 = FUNC_0800b2cc();\n  result3 = (undefined4)((ulonglong)var3 >> 0x20);\n  var4 = calculate_hash_08008640((int)var3,result3,0x6dc9c883,0x3fe45f30);\n  calculate_sum_product_080082d4((int)var4,(int)((ulonglong)var4 >> 0x20),0,0x3fe00000);\n  var2 = calculate_result_08008ba0();\n  var4 = bitwise_shift_and_concat_0800856c();\n  result4 = (undefined4)((ulonglong)var4 >> 0x20);\n  result1 = (undefined4)var4;\n  var4 = calculate_hash_08008640(result1,result4,0x54400000,0x3ff921fb);\n  var3 = calculate_result_080082d0((int)var3,result3,(int)var4,(int)((ulonglong)var4 >> 0x20));\n  result5 = (undefined4)((ulonglong)var3 >> 0x20);\n  result3 = (undefined4)var3;\n  var4 = calculate_hash_08008640(result1,result4,0x1a626331,0x3dd0b461);\n  if ((0x1f < var2) || (*(uint *)(&DAT_0800be98 + (var2 + -1) * 4) == var1)) {\n    var5 = calculate_result_080082d0(result3,result5,(int)var4,(int)((ulonglong)var4 >> 0x20));\n    if ((int)((var1 >> 0x14) - ((uint)((int)((ulonglong)var5 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    var4 = calculate_hash_08008640(result1,result4,0x1a600000,0x3dd0b461);\n    result6 = (undefined4)((ulonglong)var4 >> 0x20);\n    var3 = calculate_result_080082d0(result3,result5,(int)var4,result6);\n    result7 = (undefined4)((ulonglong)var3 >> 0x20);\n    result2 = (undefined4)var3;\n    var5 = calculate_result_080082d0(result3,result5,result2,result7);\n    var4 = calculate_result_080082d0((int)var5,(int)((ulonglong)var5 >> 0x20),(int)var4,result6);\n    var5 = calculate_hash_08008640(result1,result4,0x2e037073,0x3ba3198a);\n    var4 = calculate_result_080082d0((int)var5,(int)((ulonglong)var5 >> 0x20),(int)var4,\n                          (int)((ulonglong)var4 >> 0x20));\n    var5 = calculate_result_080082d0(result2,result7,(int)var4,(int)((ulonglong)var4 >> 0x20));\n    if ((int)(((int)var1 >> 0x14) - ((uint)((int)((ulonglong)var5 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    var4 = calculate_hash_08008640(result1,result4,0x2e000000,0x3ba3198a);\n    result3 = (undefined4)((ulonglong)var4 >> 0x20);\n    var3 = calculate_result_080082d0(result2,result7,(int)var4,result3);\n    var5 = calculate_result_080082d0(result2,result7);\n    var4 = calculate_result_080082d0((int)var5,(int)((ulonglong)var5 >> 0x20),(int)var4,result3);\n    var5 = calculate_hash_08008640(result1,result4,0x252049c1,0x397b839a);\n    var4 = calculate_result_080082d0((int)var5,(int)((ulonglong)var5 >> 0x20),(int)var4,\n                          (int)((ulonglong)var4 >> 0x20));\n  }\n  var5 = calculate_result_080082d0((int)var3,(int)((ulonglong)var3 >> 0x20),(int)var4,\n                        (int)((ulonglong)var4 >> 0x20));\nLAB_0800a0ce:\n  localVar2 = (undefined4)((ulonglong)var3 >> 0x20);\n  localVar1 = (undefined4)var3;\n  *output = var5;\n  var3 = calculate_result_080082d0(localVar1,localVar2);\n  var3 = calculate_result_080082d0((int)var3,(int)((ulonglong)var3 >> 0x20),(int)var4,\n                        (int)((ulonglong)var4 >> 0x20));\n  output[1] = var3;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)var5;\n    *(int *)((int)output + 4) = (int)((ulonglong)var5 >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)var3;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)var3 >> 0x20) + -0x80000000;\n    var2 = -var2;\n  }\n  return var2;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "uVar8": "var1",
                "iVar9": "var2",
                "uVar10": "var3",
                "uVar11": "var4",
                "uVar12": "var5",
                "local_50": "localVar1",
                "uStack_4c": "localVar2",
                "local_40": "localVar3",
                "local_38": "localVar4",
                "local_30": "localVar5"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_0800a1bc",
            "code": "\nuint calculate_0800a1bc(uint input_1,uint input_2)\n\n{\n  uint temp_1;\n  int index;\n  uint temp_2;\n  undefined4 temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  uint temp_8;\n  int count;\n  uint temp_9;\n  uint temp_10;\n  undefined8 temp_11;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    temp_11 = calculate_0800a1bc_hash_08008640(input_1,input_2,input_1,input_2);\n    temp_6 = calculate_0800a1bc_sum_product_080082d4((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),input_1,input_2);\n    return temp_6;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return input_1;\n    }\n    if (input_2 != 0) {\n      temp_11 = calculate_0800a1bc_result_080082d0(input_1,input_2,input_1);\n      temp_3 = (undefined4)((ulonglong)temp_11 >> 0x20);\n      temp_6 = convert_to_ieee754_08008894((int)temp_11,temp_3,(int)temp_11,temp_3);\n      return temp_6;\n    }\n    do {\n      temp_8 = input_1;\n      temp_6 = temp_8 >> 0xb;\n      input_2 = input_2 - 0x15;\n      input_1 = temp_8 << 0x15;\n    } while (temp_6 == 0);\n    temp_1 = input_2;\n    if (-1 < (int)temp_8) goto LAB_0800a290;\n    temp_10 = 0x20;\n    temp_4 = 0xffffffff;\n    temp_8 = input_1;\n  }\n  else {\n    temp_1 = (int)input_2 >> 0x14;\n    temp_6 = input_2;\n    temp_8 = input_1;\n    if (temp_1 != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp_8 = 0;\n    temp_10 = temp_6;\n    do {\n      temp_4 = temp_8;\n      temp_6 = temp_10 << 1;\n      count = temp_10 << 0xc;\n      temp_8 = temp_4 + 1;\n      temp_10 = temp_6;\n    } while (-1 < count);\n    temp_10 = 0x20 - temp_8;\n    input_2 = temp_1;\n    temp_8 = input_1 << (temp_8 & 0xff);\n  }\n  temp_6 = input_1 >> (temp_10 & 0xff) | temp_6;\n  temp_1 = input_2 - temp_4;\nLAB_0800a1da:\n  temp_6 = temp_6 & 0xfffff | 0x100000;\n  if (-1 < (int)(temp_1 << 0x1f)) {\n    temp_6 = temp_6 * 2 - ((int)temp_8 >> 0x1f);\n    temp_8 = temp_8 << 1;\n  }\n  temp_10 = 0;\n  temp_6 = temp_6 * 2 - ((int)temp_8 >> 0x1f);\n  temp_8 = temp_8 << 1;\n  temp_1 = 0;\n  count = 0x16;\n  temp_4 = 0x200000;\n  do {\n    index = temp_1 + temp_4;\n    if (index <= (int)temp_6) {\n      temp_6 = temp_6 - index;\n      temp_1 = index + temp_4;\n      temp_10 = temp_10 + temp_4;\n    }\n    count = count + -1;\n    temp_6 = temp_6 * 2 - ((int)temp_8 >> 0x1f);\n    temp_4 = temp_4 >> 1;\n    temp_8 = temp_8 << 1;\n  } while (count != 0);\n  index = 0x20;\n  temp_5 = 0x80000000;\n  count = 0;\n  temp_4 = 0;\n  do {\n    temp_2 = temp_5 + count;\n    temp_9 = temp_1;\n    if ((int)temp_1 < (int)temp_6) {\n      if ((int)temp_2 < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp_2 + temp_5)) {\n          temp_9 = temp_1 + 1;\n        }\n      }\n      temp_7 = temp_6 - temp_1;\n      temp_1 = temp_9;\n      if (temp_8 < temp_2) {\n        temp_7 = temp_7 - 1;\n      }\nLAB_0800a262:\n      count = temp_2 + temp_5;\n      temp_8 = temp_8 - temp_2;\n      temp_4 = temp_4 + temp_5;\n      temp_6 = temp_7;\n    }\n    else if ((temp_6 == temp_1) && (temp_2 <= temp_8)) {\n      if ((int)temp_2 < 0) goto LAB_0800a26a;\n      temp_7 = 0;\n      temp_1 = temp_6;\n      goto LAB_0800a262;\n    }\n    index = index + -1;\n    temp_5 = temp_5 >> 1;\n    temp_6 = temp_6 * 2 - ((int)temp_8 >> 0x1f);\n    temp_8 = temp_8 << 1;\n    if (index == 0) {\n      if ((temp_6 | temp_8) == 0) {\n        temp_4 = temp_4 >> 1;\n      }\n      else if (temp_4 == 0xffffffff) {\n        temp_10 = temp_10 + 1;\n        temp_4 = 0;\n      }\n      else {\n        temp_4 = temp_4 + 1 >> 1;\n      }\n      if ((temp_10 & 1) != 0) {\n        temp_4 = temp_4 | 0x80000000;\n      }\n      return temp_4;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_1",
                "iVar2": "index",
                "uVar3": "temp_2",
                "uVar4": "temp_3",
                "uVar5": "temp_4",
                "uVar6": "temp_5",
                "uVar7": "temp_6",
                "uVar8": "temp_7",
                "uVar9": "temp_8",
                "iVar10": "count",
                "uVar11": "temp_9",
                "uVar12": "temp_10",
                "uVar13": "temp_11"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_result_0800a348",
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input_value_1,uint input_value_2,undefined4 input_value_3,undefined4 input_value_4)\n\n{\n  int result;\n  undefined4 hash_part1;\n  undefined4 hash_part2;\n  uint abs_input_value_2;\n  undefined8 hash_input_value;\n  undefined8 hash_result;\n  undefined8 hash_input_value2;\n  undefined4 hash_result_part1;\n  undefined4 hash_result_part2;\n  undefined4 hash_result2_part1;\n  undefined4 hash_result2_part2;\n  \n  abs_input_value_2 = input_value_2 & 0x7fffffff;\n  if (abs_input_value_2 < 0x3e400000) {\n    result = calculate_result_0800a348_08008ba0();\n    if (result == 0) {\n      return 0;\n    }\n    hash_input_value = calculate_hash_08008640(input_value_1,input_value_2,input_value_1,input_value_2);\n    hash_part2 = (undefined4)((ulonglong)hash_input_value >> 0x20);\n    hash_part1 = (undefined4)hash_input_value;\n    hash_result = calculate_hash_08008640(hash_part1,hash_part2,0xbe8838d4,0xbda8fae9);\n    hash_result = calculate_sum_product_080082d4((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    hash_result = calculate_result_0800a348_080082d0((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0x809c52ad,0x3e927e4f);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    hash_result = calculate_sum_product_080082d4((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0x19cb1590,0x3efa01a0);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    hash_result = calculate_result_0800a348_080082d0((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0x16c15177,0x3f56c16c);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    hash_result = calculate_sum_product_080082d4((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0x5555554c,0x3fa55555);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n  }\n  else {\n    hash_input_value = calculate_hash_08008640(input_value_1,input_value_2,input_value_1,input_value_2);\n    hash_part2 = (undefined4)((ulonglong)hash_input_value >> 0x20);\n    hash_part1 = (undefined4)hash_input_value;\n    hash_result = calculate_hash_08008640(hash_part1,hash_part2,0xbe8838d4,0xbda8fae9);\n    hash_result = calculate_sum_product_080082d4((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    hash_result = calculate_result_0800a348_080082d0((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0x809c52ad,0x3e927e4f);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    hash_result = calculate_sum_product_080082d4((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0x19cb1590,0x3efa01a0);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    hash_result = calculate_result_0800a348_080082d0((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0x16c15177,0x3f56c16c);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    hash_result = calculate_sum_product_080082d4((int)hash_result,(int)((ulonglong)hash_result >> 0x20),0x5555554c,0x3fa55555);\n    hash_result = calculate_hash_08008640((int)hash_result,(int)((ulonglong)hash_result >> 0x20),hash_part1,hash_part2);\n    if (0x3fd33332 < abs_input_value_2) {\n      if (abs_input_value_2 < 0x3fe90001) {\n        result = abs_input_value_2 - 0x200000;\n        hash_input_value = calculate_result_0800a348_080082d0(0,0x3ff00000,0,result);\n      }\n      else {\n        result = 0x3fd20000;\n        hash_input_value = 0x3fe7000000000000;\n      }\n      hash_result2_part2 = (undefined4)((ulonglong)hash_input_value >> 0x20);\n      hash_result2_part1 = (undefined4)hash_input_value;\n      hash_input_value = calculate_hash_08008640(hash_part1,hash_part2,0,0x3fe00000);\n      hash_input_value = calculate_result_0800a348_080082d0((int)hash_input_value,(int)((ulonglong)hash_input_value >> 0x20),0,result);\n      hash_result = calculate_hash_08008640(hash_part1,hash_part2,(int)hash_result,(int)((ulonglong)hash_result >> 0x20));\n      hash_input_value2 = calculate_hash_08008640(input_value_1,input_value_2,input_value_3,input_value_4);\n      hash_result = calculate_result_0800a348_080082d0((int)hash_result,(int)((ulonglong)hash_result >> 0x20),(int)hash_input_value2,\n                           (int)((ulonglong)hash_input_value2 >> 0x20));\n      hash_input_value = calculate_result_0800a348_080082d0((int)hash_input_value,(int)((ulonglong)hash_input_value >> 0x20),(int)hash_result,\n                           (int)((ulonglong)hash_result >> 0x20));\n      hash_part1 = calculate_result_0800a348_080082d0(hash_result2_part1,hash_result2_part2,(int)hash_input_value,(int)((ulonglong)hash_input_value >> 0x20));\n      return hash_part1;\n    }\n  }\n  hash_result_part2 = (undefined4)((ulonglong)hash_result >> 0x20);\n  hash_result_part1 = (undefined4)hash_result;\n  hash_part1 = (undefined4)((ulonglong)hash_input_value >> 0x20);\n  hash_result = calculate_hash_08008640((int)hash_input_value,hash_part1,0,0x3fe00000);\n  hash_input_value = calculate_hash_08008640((int)hash_input_value,hash_part1,hash_result_part1,hash_result_part2);\n  hash_input_value2 = calculate_hash_08008640(input_value_1,input_value_2,input_value_3,input_value_4);\n  hash_input_value = calculate_result_0800a348_080082d0((int)hash_input_value,(int)((ulonglong)hash_input_value >> 0x20),(int)hash_input_value2,\n                       (int)((ulonglong)hash_input_value2 >> 0x20));\n  hash_input_value = calculate_result_0800a348_080082d0((int)hash_result,(int)((ulonglong)hash_result >> 0x20),(int)hash_input_value,\n                       (int)((ulonglong)hash_input_value >> 0x20));\n  hash_part1 = calculate_result_0800a348_080082d0(0,0x3ff00000,(int)hash_input_value,(int)((ulonglong)hash_input_value >> 0x20));\n  return hash_part1;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "param_4": "input_value_4",
                "uVar4": "abs_input_value_2",
                "iVar1": "result",
                "uVar2": "hash_part1",
                "uVar3": "hash_part2",
                "uVar5": "hash_input_value",
                "uVar6": "hash_result",
                "uVar7": "hash_input_value2",
                "local_30": "hash_result_part1",
                "uStack_2c": "hash_result_part2",
                "local_28": "hash_result2_part1",
                "uStack_24": "hash_result2_part2"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_final_result_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculateFinalResult_0800a5a0(int input1,undefined8 *input2,int inputSize,int param4,int param5,int param6)\n\n{\n  undefined4 *ptr1;\n  uint result;\n  uint tempResult;\n  int index;\n  uint *ptr2;\n  undefined4 temp1;\n  uint **ptrArray;\n  undefined4 temp2;\n  int iVar9;\n  undefined4 *ptr10;\n  undefined4 temp3;\n  uint temp4;\n  uint *ptr3;\n  int count1;\n  int count2;\n  undefined8 *ptr16;\n  int count3;\n  undefined4 *ptr4;\n  undefined8 *ptr19;\n  undefined4 temp5;\n  int count4;\n  undefined8 *presult2;\n  undefined4 *presult3;\n  bool bVar24;\n  undefined8 temp6;\n  undefined8 temp7;\n  undefined8 temp8;\n  undefined8 *localPtr;\n  int localCount;\n  int localSize;\n  int localIndex;\n  uint *localArray2 [2];\n  uint localArray3 [20];\n  undefined8 stackVar1;\n  undefined8 localVar1;\n  int localArray1 [38];\n  undefined8 stackVar2;\n  \n  count2 = *(int *)(&DAT_0800c060 + param5 * 4);\n  iVar9 = param4 + -1;\n  localArray2[1] = (uint *)input2;\n  if (inputSize + 0x14 < 0 == SCARRY4(inputSize,0x14)) {\n    localIndex = (inputSize + -3) / 0x18;\n    localSize = (localIndex + 1) * -0x18;\n  }\n  else {\n    localSize = -0x18;\n    localIndex = 0;\n  }\n  localSize = inputSize + localSize;\n  count3 = localIndex - iVar9;\n  if (-1 < count2 + iVar9) {\n    count4 = count2 + iVar9 + 1 + count3;\n    ptr16 = &stackVar1;\n    do {\n      while (count3 < 0) {\n        count3 = count3 + 1;\n        *(undefined4 *)ptr16 = 0;\n        *(undefined4 *)((int)ptr16 + 4) = 0;\n        ptr16 = ptr16 + 1;\n        if (count3 == count4) goto LAB_0800a626;\n      }\n      temp7 = bitwise_shift_and_concat_0800856c(*(undefined4 *)(param6 + count3 * 4));\n      count3 = count3 + 1;\n      *ptr16 = temp7;\n      ptr16 = ptr16 + 1;\n    } while (count3 != count4);\n  }\nLAB_0800a626:\n  ptr10 = (undefined4 *)(input1 + -8);\n  if (-1 < count2) {\n    presult2 = &stackVar1 + param4;\n    count3 = iVar9;\n    ptr16 = &stackVar2;\n    do {\n      if (iVar9 < 0) {\n        temp7 = 0;\n      }\n      else {\n        temp7 = 0;\n        presult3 = ptr10;\n        ptr19 = presult2;\n        do {\n          ptr4 = presult3 + 2;\n          temp6 = calculate_hash_08008640(*ptr4,presult3[3],*(undefined4 *)(ptr19 + -1),\n                                *(undefined4 *)((int)ptr19 + -4));\n          temp7 = calculate_sum_product_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp6,\n                                (int)((ulonglong)temp6 >> 0x20));\n          presult3 = ptr4;\n          ptr19 = ptr19 + -1;\n        } while (ptr4 != ptr10 + param4 * 2);\n      }\n      count3 = count3 + 1;\n      *ptr16 = temp7;\n      presult2 = presult2 + 1;\n      ptr16 = ptr16 + 1;\n    } while (count3 != count2 + param4);\n  }\n  localArray2[0] = localArray3 + count2 + -1;\n  count3 = count2;\n  do {\n    temp7 = CONCAT44(*(undefined4 *)((int)&stackVar2 + count3 * 8 + 4),\n                      *(undefined4 *)(&stackVar2 + count3));\n    if (0 < count3) {\n      ptr16 = &stackVar2 + count3;\n      ptr2 = localArray3;\n      do {\n        temp1 = (undefined4)((ulonglong)temp7 >> 0x20);\n        calculate_hash_08008640((int)temp7,temp1,0,0x3e700000);\n        calculate_result_08008ba0();\n        temp6 = bitwise_shift_and_concat_0800856c();\n        temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n        temp8 = calculate_hash_08008640((int)temp6,temp2,0,0x41700000);\n        calculate_result_080082d0((int)temp7,temp1,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n        result = calculate_result_08008ba0();\n        presult2 = ptr16 + -1;\n        temp1 = *(undefined4 *)presult2;\n        temp3 = *(undefined4 *)((int)ptr16 + -4);\n        *ptr2 = result;\n        temp7 = calculate_sum_product_080082d4((int)temp6,temp2,temp1,temp3);\n        ptr16 = presult2;\n        ptr2 = ptr2 + 1;\n      } while (presult2 != &stackVar2);\n    }\n    temp7 = calculate_result_0800b2e8((int)temp7,(int)((ulonglong)temp7 >> 0x20),localSize);\n    temp2 = (undefined4)((ulonglong)temp7 >> 0x20);\n    calculate_hash_08008640((int)temp7,temp2,0,0x3fc00000);\n    temp6 = calculate_result_080094c0();\n    temp6 = calculate_hash_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,0x40200000);\n    temp7 = calculate_result_080082d0((int)temp7,temp2,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n    result = calculate_result_08008ba0();\n    temp6 = bitwise_shift_and_concat_0800856c();\n    temp7 = calculate_result_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp6,\n                          (int)((ulonglong)temp6 >> 0x20));\n    temp1 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp2 = (undefined4)temp7;\n    if (localSize < 1) {\n      if (localSize == 0) {\n        count4 = (int)localArray3[count3 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      count4 = check_validation_conditions_08008b4c(temp2,temp1,0,0x3fe00000);\n      if (count4 != 0) {\n        result = result + 1;\n        if (count3 < 1) {\n          temp7 = calculate_result_080082d0(0,0x3ff00000,temp2,temp1);\n          count4 = 2;\n          goto LAB_0800a7a4;\n        }\n        count4 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index = (int)localArray3[count3 + -1] >> (0x18U - localSize & 0xff);\n      temp4 = localArray3[count3 + -1] - (index << (0x18U - localSize & 0xff));\n      count4 = (int)temp4 >> (0x17U - localSize & 0xff);\n      localArray3[count3 + -1] = temp4;\n      result = result + index;\njoined_r0x0800a8b8:\n      if (0 < count4) {\n        result = result + 1;\n        if (count3 < 1) {\n          bVar24 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (localArray3[0] == 0) {\n            bVar24 = false;\n            if (count3 != 1) {\n              ptr2 = localArray3;\n              index = 1;\n              do {\n                ptr2 = ptr2 + 1;\n                if (*ptr2 != 0) {\n                  count1 = index + 1;\n                  temp4 = *ptr2;\n                  goto LAB_0800a8e2;\n                }\n                index = index + 1;\n              } while (index != count3);\n              bVar24 = false;\n            }\n          }\n          else {\n            count1 = 1;\n            index = 0;\n            temp4 = localArray3[0];\nLAB_0800a8e2:\n            localArray3[index] = 0x1000000 - temp4;\n            if (count1 < count3) {\n              temp4 = localArray3[count1];\n              ptr2 = localArray3 + count1;\n              while( true ) {\n                ptr3 = ptr2 + 1;\n                *ptr2 = 0xffffff - temp4;\n                if (ptr3 == localArray3 + count3) break;\n                temp4 = *ptr3;\n                ptr2 = ptr3;\n              }\n            }\n            bVar24 = true;\n          }\n        }\n        if (0 < localSize) {\n          if (localSize == 1) {\n            localArray3[count3 + -1] = localArray3[count3 + -1] & 0x7fffff;\n          }\n          else if (localSize == 2) {\n            localArray3[count3 + -1] = localArray3[count3 + -1] & 0x3fffff;\n          }\n        }\n        if (count4 == 2) {\n          temp7 = calculate_result_080082d0(0,0x3ff00000,temp2,temp1);\n          if (bVar24) {\n            temp6 = calculate_result_0800b2e8(0,0x3ff00000,localSize);\n            temp7 = calculate_result_080082d0((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp6,\n                                  (int)((ulonglong)temp6 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp2 = (undefined4)((ulonglong)temp7 >> 0x20);\n    index = is_valid_param_08008b10((int)temp7,temp2,0,0);\n    if (index == 0) {\n      temp7 = calculate_result_0800b2e8((int)temp7,temp2,-localSize);\n      temp1 = (undefined4)((ulonglong)temp7 >> 0x20);\n      temp2 = (undefined4)temp7;\n      iVar9 = check_validation_conditions_08008b4c(temp2,temp1,0,0x41700000);\n      if (iVar9 == 0) {\n        temp4 = calculate_result_08008ba0(temp2,temp1);\n        localArray3[count3] = temp4;\n        index = count3;\n      }\n      else {\n        calculate_hash_08008640(temp2,temp1,0,0x3e700000);\n        temp4 = calculate_result_08008ba0();\n        temp7 = bitwise_shift_and_concat_0800856c();\n        temp7 = calculate_hash_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x41700000);\n        calculate_result_080082d0(temp2,temp1,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n        tempResult = calculate_result_08008ba0();\n        localSize = localSize + 0x18;\n        localArray3[count3] = tempResult;\n        localArray3[count3 + 1] = temp4;\n        index = count3 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index = count3 + -1;\n    if (count2 <= index) {\n      temp4 = 0;\n      ptr2 = localArray3 + count3 + 0x3fffffff;\n      do {\n        ptr3 = ptr2 + -1;\n        temp4 = temp4 | *ptr2;\n        ptr2 = ptr3;\n      } while (ptr3 != localArray2[0]);\n      if (temp4 != 0) break;\n    }\n    if (localArray3[count2 + -1] == 0) {\n      localCount = 1;\n      ptrArray = localArray2 + count2;\n      do {\n        ptr2 = *ptrArray;\n        localCount = localCount + 1;\n        ptrArray = ptrArray + -1;\n      } while (ptr2 == (uint *)0x0);\n      localCount = count3 + localCount;\n    }\n    else {\n      localCount = count3 + 1;\n    }\n    count4 = count3 + 1;\n    presult3 = (undefined4 *)(param6 + (count4 + localIndex + 0x3fffffff) * 4);\n    ptr16 = &stackVar1 + count3 + param4;\n    localPtr = &stackVar2 + count4;\n    do {\n      presult3 = presult3 + 1;\n      temp7 = bitwise_shift_and_concat_0800856c(*presult3);\n      *ptr16 = temp7;\n      presult2 = ptr16 + 1;\n      if (iVar9 < 0) {\n        temp6 = 0;\n      }\n      else {\n        temp6 = 0;\n        ptr4 = ptr10;\n        while( true ) {\n          ptr16 = ptr16 + -1;\n          ptr1 = ptr4 + 2;\n          temp7 = calculate_hash_08008640((int)temp7,(int)((ulonglong)temp7 >> 0x20),*ptr1,ptr4[3]);\n          temp6 = calculate_sum_product_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                                (int)((ulonglong)temp7 >> 0x20));\n          if (ptr1 == ptr10 + param4 * 2) break;\n          temp7 = *ptr16;\n          ptr4 = ptr1;\n        }\n      }\n      *localPtr = temp6;\n      count4 = count4 + 1;\n      count3 = localCount;\n      ptr16 = presult2;\n      localPtr = localPtr + 1;\n    } while (count4 <= localCount);\n  } while( true );\n  localSize = localSize + -0x18;\n  if (localArray3[index] == 0) {\n    ptr2 = localArray3 + count3 + 0x3ffffffe;\n    do {\n      temp4 = *ptr2;\n      index = index + -1;\n      localSize = localSize + -0x18;\n      ptr2 = ptr2 + -1;\n    } while (temp4 == 0);\n  }\nLAB_0800a9f6:\n  temp7 = calculate_result_0800b2e8(0,0x3ff00000,localSize);\n  if (index < 0) {\n    if (2 < param5) {\n      if (param5 == 3) {\n        temp7 = 0;\nLAB_0800abe4:\n        if (count4 == 0) {\n          *localArray2[1] = (undefined4)localVar1;\n          *(int *)((int)localArray2[1] + 4) = localVar1._4_4_;\n          *(undefined8 *)((int)localArray2[1] + 0x10) = temp7;\n          *(int *)((int)localArray2[1] + 8) = localArray1[0];\n          *(int *)((int)localArray2[1] + 0xc) = localArray1[1];\n          return result & 7;\n        }\n        *(int *)((int)localArray2[1] + 0x10) = (int)temp7;\n        *(int *)((int)localArray2[1] + 8) = localArray1[0];\n        *(int *)((int)localArray2[1] + 0x14) = (int)((ulonglong)temp7 >> 0x20) + -0x80000000;\n        *(int *)((int)localArray2[1] + 4) = localVar1._4_4_ + -0x80000000;\n        *(int *)((int)localArray2[1] + 0xc) = localArray1[1] + -0x80000000;\n        *localArray2[1] = (undefined4)localVar1;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param5 < 1) {\n      if (param5 != 0) goto LAB_0800ab0e;\n      temp7 = 0;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)temp7 >> 0x20);\n      if (count4 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *localArray2[1] = (int)temp7;\n      *(int *)((int)localArray2[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    temp7 = 0;\n  }\n  else {\n    presult2 = &stackVar2 + index;\n    ptr2 = localArray3 + index + 1;\n    ptr16 = &stackVar2 + index + 1;\n    do {\n      temp2 = (undefined4)((ulonglong)temp7 >> 0x20);\n      ptr2 = ptr2 + -1;\n      temp6 = bitwise_shift_and_concat_0800856c(*ptr2);\n      temp6 = calculate_hash_08008640((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,temp2);\n      ptr16 = ptr16 + -1;\n      *ptr16 = temp6;\n      temp7 = calculate_hash_08008640((int)temp7,temp2,0,0x3e700000);\n    } while (ptr2 != localArray3);\n    iVar9 = 0;\n    do {\n      if (count2 < 0) {\n        temp7 = 0;\n      }\n      else {\n        temp2 = 0x40000000;\n        temp1 = 0x3ff921fb;\n        temp7 = 0;\n        count3 = 0;\n        ptr16 = presult2;\n        ptr10 = &DAT_0800c028;\n        while( true ) {\n          temp6 = calculate_hash_08008640(*(undefined4 *)ptr16,*(undefined4 *)((int)ptr16 + 4),temp2,temp1\n                               );\n          temp7 = calculate_sum_product_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),(int)temp6,\n                                (int)((ulonglong)temp6 >> 0x20));\n          count3 = count3 + 1;\n          if ((count2 < count3) || (iVar9 < count3)) break;\n          temp2 = *ptr10;\n          temp1 = ptr10[1];\n          ptr16 = ptr16 + 1;\n          ptr10 = ptr10 + 2;\n        }\n      }\n      bVar24 = iVar9 != index;\n      *(int *)(&localVar1 + iVar9) = (int)temp7;\n      *(int *)((int)&localVar1 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)temp7 >> 0x20);\n      presult2 = presult2 + -1;\n      iVar9 = iVar9 + 1;\n    } while (bVar24);\n    if (2 < param5) {\n      if (param5 == 3) {\n        if (index != 0) {\n          ptr16 = &localVar1 + index;\n          temp7 = CONCAT44(*(undefined4 *)((int)&localVar1 + (index * 2 + 1) * 4),\n                            *(undefined4 *)ptr16);\n          do {\n            temp1 = (undefined4)((ulonglong)temp7 >> 0x20);\n            temp2 = (undefined4)temp7;\n            temp3 = *(undefined4 *)(ptr16 + -1);\n            temp5 = *(undefined4 *)((int)ptr16 + -4);\n            temp7 = calculate_sum_product_080082d4(temp2,temp1,temp3,temp5);\n            temp6 = calculate_result_080082d0(temp3,temp5,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n            temp6 = calculate_sum_product_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp2,temp1);\n            *ptr16 = temp6;\n            ptr16 = ptr16 + -1;\n            *ptr16 = temp7;\n          } while (&localVar1 != ptr16);\n          if (1 < index) {\n            ptr16 = &localVar1 + index;\n            temp7 = CONCAT44(*(undefined4 *)((int)&localVar1 + (index * 2 + 1) * 4),\n                              *(undefined4 *)ptr16);\n            do {\n              temp1 = (undefined4)((ulonglong)temp7 >> 0x20);\n              temp2 = (undefined4)temp7;\n              temp3 = *(undefined4 *)(ptr16 + -1);\n              temp5 = *(undefined4 *)((int)ptr16 + -4);\n              temp7 = calculate_sum_product_080082d4(temp2,temp1,temp3,temp5);\n              temp6 = calculate_result_080082d0(temp3,temp5,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n              temp6 = calculate_sum_product_080082d4((int)temp6,(int)((ulonglong)temp6 >> 0x20),temp2,temp1);\n              *ptr16 = temp6;\n              ptr16 = ptr16 + -1;\n              *ptr16 = temp7;\n            } while (&localVar1 + 1 != ptr16);\n            temp7 = 0;\n            ptr16 = &localVar1 + index + 1;\n            do {\n              presult2 = ptr16 + -1;\n              temp7 = calculate_sum_product_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),\n                                    *(undefined4 *)presult2,*(undefined4 *)((int)ptr16 + -4));\n              ptr16 = presult2;\n            } while (&localVar1 + 2 != presult2);\n            goto LAB_0800abe4;\n          }\n        }\n        temp7 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param5 < 1) {\n      if (param5 != 0) goto LAB_0800ab0e;\n      temp7 = 0;\n      ptr16 = &localVar1 + index + 1;\n      do {\n        presult2 = ptr16 + -1;\n        temp7 = calculate_sum_product_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),*(undefined4 *)presult2,\n                              *(undefined4 *)((int)ptr16 + -4));\n        ptr16 = presult2;\n      } while (&localVar1 != presult2);\n      goto LAB_0800aafc;\n    }\n    temp7 = 0;\n    ptr16 = &localVar1 + index + 1;\n    do {\n      presult2 = ptr16 + -1;\n      temp7 = calculate_sum_product_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),*(undefined4 *)presult2,\n                            *(undefined4 *)((int)ptr16 + -4));\n      ptr16 = presult2;\n    } while (&localVar1 != presult2);\n  }\n  iVar9 = (int)((ulonglong)temp7 >> 0x20);\n  temp2 = (undefined4)temp7;\n  if (count4 == 0) {\n    *(undefined8 *)localArray2[1] = temp7;\n    temp7 = calculate_result_080082d0((undefined4)localVar1,localVar1._4_4_,temp2,iVar9);\n    if (index < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    ptr16 = &localVar1;\n    do {\n      temp7 = calculate_sum_product_080082d4((int)temp7,(int)((ulonglong)temp7 >> 0x20),\n                            *(undefined4 *)(ptr16 + 1),*(undefined4 *)((int)ptr16 + 0xc));\n      iVar9 = iVar9 + 1;\n      ptr16 = ptr16 + 1;\n    } while (iVar9 <= index);\n    if (count4 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *localArray2[1] = temp2;\n    *(int *)((int)localArray2[1] + 4) = iVar9 + -0x80000000;\n    temp7 = calculate_result_080082d0((undefined4)localVar1,localVar1._4_4_,temp2,iVar9);\n    if (0 < index) goto LAB_0800ad04;\n  }\n  temp7 = CONCAT44((int)((ulonglong)temp7 >> 0x20) + -0x80000000,(int)temp7);\nLAB_0800ad26:\n  *(undefined8 *)((int)localArray2[1] + 8) = temp7;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_final_result_0800a5a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "inputSize",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "ptr1",
                "uVar2": "result",
                "uVar3": "tempResult",
                "iVar4": "index",
                "puVar5": "ptr2",
                "uVar6": "temp1",
                "uVar8": "temp2",
                "ppuVar7": "ptrArray",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "puVar13": "ptr3",
                "iVar14": "count1",
                "iVar15": "count2",
                "uStack_208": "stackVar1",
                "local_168": "localVar1",
                "local_160": "localArray1",
                "uStack_c8": "stackVar2",
                "iVar17": "count3",
                "puVar18": "ptr4",
                "uVar20": "temp5",
                "iVar21": "count4",
                "uVar25": "temp6",
                "uVar26": "temp7",
                "uVar27": "temp8",
                "local_284": "localPtr",
                "local_280": "localCount",
                "local_270": "localSize",
                "local_26c": "localIndex",
                "local_260": "localArray2",
                "local_258": "localArray3"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_result_0800adf0",
            "code": "\nundefined4\ncalculate_result_0800adf0(undefined4 input_1,uint input_2,undefined4 input_3,undefined4 input_4,int flag)\n\n{\n  int result;\n  undefined4 hash1;\n  undefined4 hash2;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined8 digest;\n  undefined8 sum_prod;\n  \n  if (((input_2 & 0x7fffffff) < 0x3e400000) && (result = calculate_result_0800adf0_08008ba0(), result == 0)) {\n    return input_1;\n  }\n  digest = calculate_hash_08008640(input_1,input_2,input_1);\n  temp1 = (undefined4)((ulonglong)digest >> 0x20);\n  hash2 = (undefined4)digest;\n  digest = calculate_hash_08008640(input_1,input_2,hash2,temp1);\n  temp2 = (undefined4)((ulonglong)digest >> 0x20);\n  hash1 = (undefined4)digest;\n  digest = calculate_hash_08008640(hash2,temp1,0x5acfd57c,0x3de5d93a);\n  digest = calculate_result_0800adf0_080082d0((int)digest,(int)((ulonglong)digest >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  digest = calculate_hash_08008640((int)digest,(int)((ulonglong)digest >> 0x20),hash2,temp1);\n  digest = calculate_sum_product_080082d4((int)digest,(int)((ulonglong)digest >> 0x20),0x57b1fe7d,0x3ec71de3);\n  digest = calculate_hash_08008640((int)digest,(int)((ulonglong)digest >> 0x20),hash2,temp1);\n  digest = calculate_result_0800adf0_080082d0((int)digest,(int)((ulonglong)digest >> 0x20),0x19c161d5,0x3f2a01a0);\n  digest = calculate_hash_08008640((int)digest,(int)((ulonglong)digest >> 0x20),hash2,temp1);\n  digest = calculate_sum_product_080082d4((int)digest,(int)((ulonglong)digest >> 0x20),0x1110f8a6,0x3f811111);\n  temp3 = (undefined4)((ulonglong)digest >> 0x20);\n  if (flag != 0) {\n    sum_prod = calculate_hash_08008640(input_3,input_4,0,0x3fe00000);\n    digest = calculate_hash_08008640(hash1,temp2,(int)digest,temp3);\n    digest = calculate_result_0800adf0_080082d0((int)sum_prod,(int)((ulonglong)sum_prod >> 0x20),(int)digest,\n                         (int)((ulonglong)digest >> 0x20));\n    digest = calculate_hash_08008640((int)digest,(int)((ulonglong)digest >> 0x20),hash2,temp1);\n    digest = calculate_result_0800adf0_080082d0((int)digest,(int)((ulonglong)digest >> 0x20),input_3,input_4);\n    sum_prod = calculate_hash_08008640(hash1,temp2,0x55555549,0x3fc55555);\n    digest = calculate_sum_product_080082d4((int)digest,(int)((ulonglong)digest >> 0x20),(int)sum_prod,\n                         (int)((ulonglong)sum_prod >> 0x20));\n    hash2 = calculate_result_0800adf0_080082d0(input_1,input_2,(int)digest,(int)((ulonglong)digest >> 0x20));\n    return hash2;\n  }\n  digest = calculate_hash_08008640(hash2,temp1,(int)digest,temp3);\n  digest = calculate_result_0800adf0_080082d0((int)digest,(int)((ulonglong)digest >> 0x20),0x55555549,0x3fc55555);\n  digest = calculate_hash_08008640((int)digest,(int)((ulonglong)digest >> 0x20),hash1,temp2);\n  hash2 = calculate_sum_product_080082d4((int)digest,(int)((ulonglong)digest >> 0x20),input_1,input_2);\n  return hash2;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "flag",
                "iVar1": "result",
                "uVar2": "hash1",
                "uVar3": "hash2",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "digest",
                "uVar8": "sum_prod"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_result_0800af78",
            "code": "\nint calculateResult_0800af78(int input1,uint input2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int output;\n  undefined4 temp1;\n  uint temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined4 localVar;\n  \n  temp3 = CONCAT44(input2,input1);\n  temp2 = input2 & 0x7fffffff;\n  if (temp2 < 0x44100000) {\n    if (temp2 < 0x3fdc0000) {\n      if (temp2 < 0x3e200000) {\n        temp4 = calculate_sum_product_080082d4(input1,input2,0x8800759c,0x7e37e43c);\n        output = check_if_null_terminate_08008b60((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        if (output != 0) {\n          return input1;\n        }\n      }\n      output = -1;\n    }\n    else {\n      temp3 = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)temp3 >> 0x20);\n      result1 = (undefined4)temp3;\n      if (temp2 < 0x3ff30000) {\n        if (temp2 < 0x3fe60000) {\n          temp3 = calculate_sum_product_080082d4(result1,result4,result1,result4);\n          temp3 = calculate_result_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x3ff00000);\n          temp4 = calculate_sum_product_080082d4(result1,result4,0,0x40000000);\n          temp3 = convert_to_ieee754_08008894((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                               (int)((ulonglong)temp4 >> 0x20));\n          output = 0;\n        }\n        else {\n          temp3 = calculate_result_080082d0(result1,result4,0,0x3ff00000);\n          temp4 = calculate_sum_product_080082d4(result1,result4,0,0x3ff00000);\n          temp3 = convert_to_ieee754_08008894((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                               (int)((ulonglong)temp4 >> 0x20));\n          output = 1;\n        }\n      }\n      else if (temp2 < 0x40038000) {\n        temp3 = calculate_result_080082d0(result1,result4,0,0x3ff80000);\n        temp4 = calculate_hash_08008640(result1,result4,0,0x3ff80000);\n        temp4 = calculate_sum_product_080082d4((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        temp3 = convert_to_ieee754_08008894((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                             (int)((ulonglong)temp4 >> 0x20));\n        output = 2;\n      }\n      else {\n        temp3 = convert_to_ieee754_08008894(0,0xbff00000,result1,result4);\n        output = 3;\n      }\n    }\n    localVar = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp1 = (undefined4)temp3;\n    temp3 = calculate_hash_08008640(temp1,localVar,temp1);\n    result2 = (undefined4)((ulonglong)temp3 >> 0x20);\n    result1 = (undefined4)temp3;\n    temp3 = calculate_hash_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)temp3 >> 0x20);\n    result4 = (undefined4)temp3;\n    temp3 = calculate_hash_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    temp3 = calculate_sum_product_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp3 = calculate_hash_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = calculate_sum_product_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp3 = calculate_hash_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = calculate_sum_product_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp3 = calculate_hash_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = calculate_sum_product_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x920083ff,0x3fc24924);\n    temp3 = calculate_hash_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = calculate_sum_product_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x5555550d,0x3fd55555);\n    temp3 = calculate_hash_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp4 = calculate_hash_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp4 = calculate_result_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp4 = calculate_hash_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = calculate_result_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp4 = calculate_hash_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = calculate_result_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp4 = calculate_hash_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = calculate_result_080082d0((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp4 = calculate_hash_08008640((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)temp4 >> 0x20);\n    if (output == -1) {\n      temp3 = calculate_sum_product_080082d4((int)temp3,result1,(int)temp4,result4);\n      temp3 = calculate_hash_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,localVar);\n      output = calculate_result_080082d0(temp1,localVar,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      return output;\n    }\n    temp3 = calculate_sum_product_080082d4((int)temp3,result1,(int)temp4,result4);\n    temp3 = calculate_hash_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,localVar);\n    temp3 = calculate_result_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + output * 8),\n                         *(undefined4 *)(&UNK_0800c094 + output * 8));\n    temp3 = calculate_result_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,localVar);\n    output = calculate_result_080082d0(*(undefined4 *)(&UNK_0800c070 + output * 8),\n                         *(undefined4 *)(&UNK_0800c074 + output * 8),(int)temp3,\n                         (int)((ulonglong)temp3 >> 0x20));\n    if ((int)input2 < 0) {\n      return output;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp2) || ((temp2 == 0x7ff00000 && (input1 != 0)))) {\n      output = calculate_sum_product_080082d4(input1,input2,input1);\n      return output;\n    }\n    output = 0x54442d18;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_result_0800af78",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "output",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "local_2c": "localVar"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "clear_bit_and_shift_right_0800b2d4",
            "code": "\nuint clearBitAndShiftRight_0800b2d4(undefined4 inputValue,uint bitValue)\n\n{\n  return (bitValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "clear_bit_and_shift_right_0800b2d4",
                "param_1": "inputValue",
                "param_2": "bitValue"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nundefined4 initialize_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input1,uint input2,int offset,undefined4 param_4)\n\n{\n  uint shifted_input2;\n  int sum_offset;\n  uint high_bits_input2;\n  undefined8 concatenated_inputs;\n  \n  concatenated_inputs = CONCAT44(input2,input1);\n  shifted_input2 = (input2 << 1) >> 0x15;\n  if (shifted_input2 == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    concatenated_inputs = calculate_hash_08008640(input1,input2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_input2 = ((uint)((int)((ulonglong)concatenated_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input2 == 0x7ff) {\n    shifted_input2 = calculate_sum_product_080082d4(input1,input2,input1,input2,param_4);\n    return shifted_input2;\n  }\n  high_bits_input2 = (uint)((ulonglong)concatenated_inputs >> 0x20);\n  sum_offset = shifted_input2 + offset;\n  if (sum_offset < 0x7ff) {\n    if (0 < sum_offset) {\n      return (uint)concatenated_inputs;\n    }\n    if (sum_offset + 0x35 < 0 == SCARRY4(sum_offset,0x35)) {\n      shifted_input2 = calculate_hash_08008640((uint)concatenated_inputs,high_bits_input2 & 0x800fffff | (sum_offset + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input2;\n    }\n    if (offset < 0xc351) {\n      concatenated_inputs = CONCAT44(high_bits_input2 & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input2 = calculate_hash_08008640((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input2;\n    }\n  }\n  shifted_input2 = calculate_hash_08008640(0x8800759c,high_bits_input2 & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input2;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "offset",
                "uVar1": "shifted_input2",
                "iVar2": "sum_offset",
                "uVar3": "high_bits_input2",
                "uVar4": "concatenated_inputs"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_data_value_0800b3dc",
            "code": "\nundefined4 get_data_value_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_data_value_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_multiple_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeMultipleFunctions_0800b3e8(void)\n\n{\n  int counter;\n  code **functionPointerArray;\n  \n  FUNC_0800b5b0();\n  counter = 0;\n  functionPointerArray = (code **)&DAT_0800c0b4;\n  do {\n    counter = counter + 1;\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_multiple_functions_0800b3e8",
                "iVar1": "counter",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_with_byte_0800b430",
            "code": "\nvoid fillWithByte_0800b430(undefined4 *array,undefined byte,uint size)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  uint remaining;\n  undefined4 bytePattern;\n  bool isEnd;\n  \n  if (((uint)array & 3) != 0) {\n    remaining = size - 1;\n    ptr1 = array;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      array = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = byte;\n      size = remaining;\n      if (((uint)array & 3) == 0) break;\n      isEnd = remaining == 0;\n      remaining = remaining - 1;\n      ptr1 = array;\n      if (isEnd) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    bytePattern = CONCAT22(CONCAT11(byte,byte),CONCAT11(byte,byte));\n    if (0xf < size) {\n      ptr1 = array + 4;\n      do {\n        ptr1[-4] = bytePattern;\n        ptr1[-3] = bytePattern;\n        ptr1[-2] = bytePattern;\n        ptr1[-1] = bytePattern;\n        ptr1 = ptr1 + 4;\n      } while (ptr1 != (undefined4 *)((int)array + (size - 0x10 & 0xfffffff0) + 0x20));\n      remaining = size & 0xc;\n      array = array + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining == 0) goto joined_r0x0800b4a8;\n    }\n    ptr1 = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)array);\n    do {\n      ptr2 = array + 1;\n      *array = bytePattern;\n      array = ptr2;\n    } while (ptr1 != ptr2);\n    size = size & 3;\n    array = ptr1;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    ptr1 = array;\n    do {\n      ptr2 = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = byte;\n      ptr1 = ptr2;\n    } while ((undefined4 *)(size + (int)array) != ptr2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_with_byte_0800b430",
                "param_1": "array",
                "param_2": "byte",
                "param_3": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "remaining",
                "uVar4": "bytePattern",
                "bVar5": "isEnd"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 updateData_0800b524(int mode,undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  undefined *ptr;\n  undefined4 result;\n  uint bitMask;\n  uint count;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (mode != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data2;\n      bitMask = 1 << (count & 0xff);\n      *(uint *)(ptr + 0x188) = *(uint *)(ptr + 0x188) | bitMask;\n      *(undefined4 *)(ptr + count * 4 + 0x108) = data3;\n      if (mode == 2) {\n        *(uint *)(ptr + 0x18c) = bitMask | *(uint *)(ptr + 0x18c);\n      }\n    }\n    result = DAT_20000448;\n    *(uint *)(ptr + 4) = count + 1;\n    *(undefined4 *)(ptr + (count + 2) * 4) = data1;\n    FUNC_0800b520(result);\n    result = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "mode",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "puVar1": "ptr",
                "uVar2": "result",
                "uVar3": "bitMask",
                "uVar4": "count"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 201974,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}