{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 input)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_integers_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_integers_080001ac(undefined4 first_integer,undefined4 second_integer)\n\n{\n  return CONCAT44(second_integer,first_integer);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_integers_080001ac",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "disable_coolant_system_080001f8",
            "code": "\nvoid disable_coolant_system_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  coolant_stop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "disable_coolant_system_080001f8"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "turn_off_coolant_08000210",
            "code": "\nvoid turnOffCoolant_08000210(void)\n\n{\n  turnOffCoolant_08000210Mist();\n  turnOffCoolant_08000210Flood();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "turn_off_coolant_08000210",
                "coolant_mist_off": "turnOffCoolantMist",
                "coolant_flood_off": "turnOffCoolantFlood"
            },
            "calling": [
                "mc_reset",
                "coolant_run",
                "coolant_init"
            ],
            "called": [
                "coolant_flood_off",
                "coolant_mist_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "control_coolant_system_08000220",
            "code": "\nvoid controlCoolantSystem_08000220(char command)\n\n{\n  if (command != DAT_20000468) {\n    plan_synchronize();\n    if (command == '\\x01') {\n      coolant_flood_on();\n      DAT_20000468 = command;\n    }\n    else if (command == '\\x02') {\n      coolant_mist_on();\n      DAT_20000468 = command;\n    }\n    else {\n      coolant_stop();\n      DAT_20000468 = command;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "control_coolant_system_08000220",
                "param_1": "command"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "coolant_stop",
                "coolant_flood_on",
                "coolant_mist_on",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "get_adjusted_tick_08000268",
            "code": "\n\n\nint getAdjustedTick_08000268(void)\n\n{\n  int currentTick;\n  \n  currentTick = getCurrentTick();\n  return (currentTick + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "get_adjusted_tick_08000268",
                "iVar1": "currentTick",
                "HAL_GetTick": "getCurrentTick"
            },
            "calling": [
                "_delay_us"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "delay_execution_080002a0",
            "code": "\nvoid delayExecution_080002a0(undefined4 delayMs)\n\n{\n  delayMilliseconds(delayMs);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "delay_execution_080002a0",
                "param_1": "delayMs",
                "HAL_Delay": "delayMilliseconds"
            },
            "calling": [
                "mc_dwell"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "delay_execution_080002b6",
            "code": "\nvoid delayExecution_080002b6(uint delayTime)\n\n{\n  uint currentusecsUpper;\n  uint totalUpper;\n  bool isDelayCompleted;\n  longlong currentTime;\n  undefined8 currentusecs;\n  \n  currentTime = get_current_usecs();\n  totalUpper = (uint)(currentTime + (ulonglong)delayTime >> 0x20);\n  do {\n    currentusecs = get_current_usecs();\n    currentusecsUpper = (uint)((ulonglong)currentusecs >> 0x20);\n    isDelayCompleted = totalUpper <= currentusecsUpper;\n    if (currentusecsUpper == totalUpper) {\n      isDelayCompleted = (uint)(currentTime + (ulonglong)delayTime) <= (uint)currentusecs;\n    }\n  } while (!isDelayCompleted);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "delay_execution_080002b6",
                "param_1": "delayTime",
                "uVar1": "currentusecsUpper",
                "uVar2": "totalUpper",
                "bVar3": "isDelayCompleted",
                "lVar4": "currentTime",
                "uVar5": "currentusecs"
            },
            "calling": [],
            "called": [
                "get_current_usecs"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_data_080002f0",
            "code": "\nvoid initializeData_080002f0(void)\n\n{\n  memset(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "calling": [
                "eeprom_get_char",
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_eeprom_data_08000310",
            "code": "\nundefined getEepromData_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeEeprom();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_eeprom_data_08000310",
                "param_1": "index",
                "eeprom_init": "initializeEeprom"
            },
            "calling": [
                "memcpy_from_eeprom_with_checksum",
                "read_global_settings"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "write_to_eeprom_08000340",
            "code": "\nvoid writeToEEPROM_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeEEPROM();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "write_to_eeprom_08000340",
                "param_1": "index",
                "param_2": "value",
                "eeprom_init": "initializeEEPROM"
            },
            "calling": [
                "write_global_settings",
                "memcpy_to_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_data_08000374",
            "code": "\nvoid process_data_08000374(int data_length,char *data,int num_iterations)\n\n{\n  int remaining_iterations;\n  char *current_data;\n  int current_index;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_iterations = num_iterations;\n  current_data = data;\n  current_index = data_length;\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n    current_data = data;\n    current_index = data_length;\n  }\n  for (; remaining_iterations != 0; remaining_iterations = remaining_iterations + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    eeprom_put_char(current_index,*current_data);\n    current_data = current_data + 1;\n    current_index = current_index + 1;\n  }\n  eeprom_put_char(current_index,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "param_1": "data_length",
                "param_2": "data",
                "param_3": "num_iterations",
                "local_1c": "remaining_iterations",
                "local_18": "current_data",
                "local_14": "current_index",
                "local_9": "checksum"
            },
            "calling": [
                "settings_store_startup_line",
                "write_global_settings",
                "settings_write_coord_data"
            ],
            "called": [
                "eeprom_init",
                "eeprom_put_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_eeprom_data_080003ec",
            "code": "\nbool check_eeprom_data_080003ec(char *data,int start_index,int length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remaining_length;\n  int current_index;\n  char *current_data_ptr;\n  byte checksum;\n  \n  checksum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_data_ptr = data;\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n    current_index = start_index;\n    current_data_ptr = data;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    cVar1 = eeprom_get_char(current_index);\n    checksum = cVar1 + (checksum != 0);\n    *current_data_ptr = cVar1;\n    current_index = current_index + 1;\n    current_data_ptr = current_data_ptr + 1;\n  }\n  uVar2 = eeprom_get_char(current_index);\n  return checksum == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_eeprom_data_080003ec",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_data_ptr",
                "local_9": "checksum"
            },
            "calling": [
                "settings_read_coord_data",
                "settings_read_startup_line",
                "read_global_settings"
            ],
            "called": [
                "eeprom_init",
                "eeprom_get_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_data_08000478",
            "code": "\nvoid initializeData_08000478(undefined data1,undefined data2,undefined data3)\n\n{\n  DAT_20000e89 = data1;\n  DAT_20000e8a = data2;\n  DAT_20000e8b = data3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_data_08000478",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3"
            },
            "calling": [
                "gc_execute_line",
                "gc_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_settings_080004ac",
            "code": "\nvoid initializeSettings_080004ac(void)\n\n{\n  int iVar1;\n  \n  clearMemory(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  choosePlane(0,1,2);\n  DAT_20000e74 = 1;\n  iVar1 = readCoordinateData(DAT_20000e8c,&DAT_20000e90);\n  if (iVar1 == 0) {\n    displayStatusMessage(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_settings_080004ac",
                "memset": "clearMemory",
                "select_plane": "choosePlane",
                "settings_read_coord_data": "readCoordinateData",
                "report_status_message": "displayStatusMessage"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "select_plane",
                "settings_read_coord_data",
                "report_status_message",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "divide_and_store_floats_080004fc",
            "code": "\nvoid divideAndStoreFloats_080004fc(undefined4 dividend1,undefined4 dividend2,undefined4 dividend3)\n\n{\n  undefined4 tempFloat;\n  \n  tempFloat = __floatsisf(dividend1);\n  DAT_20000e7c = __aeabi_fdiv(tempFloat,DAT_20000ebc);\n  tempFloat = __floatsisf(dividend2);\n  DAT_20000e80 = __aeabi_fdiv(tempFloat,DAT_20000ec0);\n  tempFloat = __floatsisf(dividend3);\n  DAT_20000e84 = __aeabi_fdiv(tempFloat,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "divide_and_store_floats_080004fc",
                "param_1": "dividend1",
                "param_2": "dividend2",
                "param_3": "dividend3",
                "uVar1": "tempFloat"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "convert_to_float_0800056c",
            "code": "\nundefined4 convertToFloat_0800056c(undefined4 input)\n\n{\n  undefined8 floatValue;\n  \n  if (DAT_20000e73 != '\\0') {\n    floatValue = __aeabi_f2d(input);\n    floatValue = __muldf3((int)floatValue,(int)((ulonglong)floatValue >> 0x20),0x66666666,0x40396666);\n    input = __truncdfsf2((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "convert_to_float_0800056c",
                "param_1": "input",
                "uVar1": "floatValue"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__truncdfsf2",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_input_080005b4",
            "code": "\nchar processInput_080005b4(undefined4 input)\n\n{\n  int result;\n  undefined4 convertedValue;\n  char returnValue;\n  uint tempValue;\n  undefined4 tempValue2;\n  undefined8 tempDouble;\n  undefined8 tempDouble2;\n  undefined8 tempDouble3;\n  undefined4 coordData [4];\n  undefined4 planeX;\n  undefined4 planeY;\n  undefined4 planeZ;\n  undefined4 tempStackVar;\n  undefined4 tempStackVar2;\n  undefined4 tempStackArray [6];\n  undefined4 value;\n  byte statementCode;\n  undefined loopFlag;\n  undefined4 tempValue3;\n  undefined4 tempFloat;\n  undefined isFloat;\n  uint tempInt;\n  byte loopCounter1;\n  byte loopCounter2;\n  byte loopCounter3;\n  byte loopCounter4;\n  char commandType;\n  uint distance;\n  undefined4 tempFloat2;\n  sbyte commandType2;\n  char commandType3;\n  char commandType4;\n  undefined4 millimeters;\n  byte coordinateFlag;\n  ushort coordinateBitmask;\n  uint selectedCoordinate;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    returnValue = '\\f';\n  }\n  else {\n    loopFlag = 0;\n    coordinateBitmask = 0;\n    coordinateFlag = 0;\n    millimeters = 0xbf800000;\n    commandType4 = '\\0';\n    commandType3 = '\\0';\n    memset(tempStackArray + 3,0,0xc);\n    memset(tempStackArray,0,0xc);\n    DAT_20000e70 = '\\0';\n    commandType2 = 0;\n    while (result = next_statement(&statementCode,tempStackArray + 6,input,&loopFlag), result != 0) {\n      tempDouble = __aeabi_f2d(value);\n      tempDouble = trunc((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n      selectedCoordinate = __aeabi_d2iz((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n      if (statementCode == 0x47) {\n        switch(selectedCoordinate) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          commandType2 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          commandType2 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          commandType2 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          commandType2 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          commandType2 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          commandType2 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          commandType2 = 6;\n        }\n        switch(selectedCoordinate) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          commandType3 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          commandType3 = '\\x02';\n          break;\n        case 0x11:\n          select_plane(0,1,2);\n          break;\n        case 0x12:\n          select_plane(2,0,1);\n          break;\n        case 0x13:\n          select_plane(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          convertedValue = __aeabi_fmul(value,0x41200000);\n          tempDouble = __aeabi_f2d(convertedValue);\n          tempDouble = trunc((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          selectedCoordinate = __aeabi_d2iz((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          switch(selectedCoordinate) {\n          case 0x118:\n            commandType3 = '\\x03';\n            break;\n          case 0x119:\n            commandType3 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            commandType3 = '\\x05';\n            break;\n          case 0x12d:\n            commandType3 = '\\x06';\n          }\n          break;\n        case 0x35:\n          commandType4 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)selectedCoordinate - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          convertedValue = __aeabi_fmul(value,0x41200000);\n          tempDouble = __aeabi_f2d(convertedValue);\n          tempDouble = trunc((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          selectedCoordinate = __aeabi_d2iz((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          if (selectedCoordinate == 0x398) {\n            commandType3 = '\\a';\n          }\n          else if (selectedCoordinate == 0x399) {\n            commandType3 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (statementCode == 0x4d) {\n        if (selectedCoordinate == 0x1e) {\nLAB_08000b96:\n          commandType2 = 5;\n        }\n        else if ((int)selectedCoordinate < 0x1f) {\n          if ((int)selectedCoordinate < 3) {\n            if (-1 < (int)selectedCoordinate) goto LAB_08000b96;\n          }\n          else if (selectedCoordinate - 3 < 3) {\n            commandType2 = 8;\n          }\n        }\n        switch(selectedCoordinate) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (commandType2 != 0) {\n        if (((int)(uint)coordinateBitmask >> commandType2 & 1U) == 0) {\n          coordinateBitmask = coordinateBitmask | (ushort)(1 << commandType2);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        commandType2 = 0;\n      }\n    }\n    returnValue = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      tempFloat2 = 0;\n      distance = 0;\n      commandType = '\\0';\n      loopFlag = 0;\nswitchD_08000d18_caseD_47:\n      result = next_statement(&statementCode,tempStackArray + 6,input,&loopFlag);\n      if (result != 0) {\n        switch(statementCode) {\n        case 0x46:\n          result = __aeabi_fcmple(value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = to_millimeters(value);\n          }\n          else {\n            millimeters = to_millimeters(value);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          tempValue = (uint)statementCode;\n          convertedValue = to_millimeters(value);\n          tempStackArray[tempValue - 0x49] = convertedValue;\n          break;\n        case 0x4c:\n          tempDouble = __aeabi_f2d(value);\n          tempDouble = trunc((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          commandType = __aeabi_d2uiz((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          break;\n        case 0x50:\n          tempFloat2 = value;\n          break;\n        case 0x52:\n          distance = to_millimeters(value);\n          break;\n        case 0x53:\n          result = __aeabi_fcmplt(value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = __aeabi_fcmplt(value,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          tempDouble = __aeabi_f2d(value);\n          tempDouble = trunc((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          DAT_20000e88 = __aeabi_d2uiz((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          break;\n        case 0x58:\n          tempStackArray[3] = to_millimeters(value);\n          coordinateFlag = coordinateFlag | 1;\n          break;\n        case 0x59:\n          tempStackArray[4] = to_millimeters(value);\n          coordinateFlag = coordinateFlag | 2;\n          break;\n        case 0x5a:\n          tempStackArray[5] = to_millimeters(value);\n          coordinateFlag = coordinateFlag | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      returnValue = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          spindle_run((int)DAT_20000e76);\n          coolant_run(DAT_20000e77);\n        }\n        if ((coordinateBitmask & 0x200) != 0) {\n          result = settings_read_coord_data(DAT_20000e8c,&planeZ);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = planeZ;\n          DAT_20000e94 = tempStackVar;\n          DAT_20000e98 = tempStackVar2;\n        }\n        switch(commandType3) {\n        case '\\x01':\n          result = __aeabi_fcmplt(tempFloat2,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              mc_dwell(tempFloat2);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          tempDouble = __aeabi_f2d(tempFloat2);\n          tempDouble = trunc((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          selectedCoordinate = __aeabi_d2iz((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n          if ((((commandType == '\\x02') || (commandType == '\\x14')) && (-1 < (int)selectedCoordinate)) &&\n             ((int)selectedCoordinate < 7)) {\n            if ((coordinateFlag == 0) && (commandType == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)selectedCoordinate < 1) {\n                selectedCoordinate = (uint)DAT_20000e8c;\n              }\n              else {\n                selectedCoordinate = selectedCoordinate - 1;\n              }\n              result = settings_read_coord_data(selectedCoordinate & 0xff,coordData);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (loopCounter4 = 0; loopCounter4 < 3; loopCounter4 = loopCounter4 + 1) {\n                if (((int)(uint)coordinateFlag >> loopCounter4 & 1U) != 0) {\n                  if (commandType == '\\x14') {\n                    tempValue = (uint)loopCounter4;\n                    convertedValue = __aeabi_fsub(*(undefined4 *)(&DAT_20000e74 + (loopCounter4 + 2) * 4),\n                                         tempStackArray[loopCounter4 + 3]);\n                    coordData[tempValue] = convertedValue;\n                  }\n                  else {\n                    coordData[loopCounter4] = tempStackArray[loopCounter4 + 3];\n                  }\n                }\n              }\n              settings_write_coord_data(selectedCoordinate & 0xff,coordData);\n              if (selectedCoordinate == DAT_20000e8c) {\n                DAT_20000e90 = coordData[0];\n                DAT_20000e94 = coordData[1];\n                DAT_20000e98 = coordData[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          coordinateFlag = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (coordinateFlag != 0) {\n            for (loopCounter3 = 0; loopCounter3 < 3; loopCounter3 = loopCounter3 + 1) {\n              if (((int)(uint)coordinateFlag >> loopCounter3 & 1U) == 0) {\n                tempStackArray[loopCounter3 + 3] = *(undefined4 *)(&DAT_20000e74 + (loopCounter3 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                tempValue = (uint)loopCounter3;\n                convertedValue = __addsf3(tempStackArray[loopCounter3 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (loopCounter3 + 2) * 4));\n                tempStackArray[tempValue + 3] = convertedValue;\n              }\n              else {\n                tempValue2 = tempStackArray[loopCounter3 + 3];\n                convertedValue = __addsf3(*(undefined4 *)(&DAT_20000e70 + (loopCounter3 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (loopCounter3 + 10) * 4));\n                tempValue = (uint)loopCounter3;\n                convertedValue = __addsf3(tempValue2,convertedValue);\n                tempStackArray[tempValue + 3] = convertedValue;\n              }\n            }\n            mc_line(tempStackArray[3],tempStackArray[4],tempStackArray[5],DAT_20000ed0,0);\n          }\n          if (commandType3 == '\\x05') {\n            result = settings_read_coord_data(7,coordData + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = settings_read_coord_data(6,coordData + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          mc_line(coordData[3],planeX,planeY,DAT_20000ed0,0);\n          DAT_20000e7c = coordData[3];\n          DAT_20000e80 = planeX;\n          DAT_20000e84 = planeY;\n          coordinateFlag = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (commandType3 == '\\x06') {\n            settings_write_coord_data(7,&DAT_20000e7c);\n          }\n          else {\n            settings_write_coord_data(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (coordinateFlag == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (loopCounter2 = 0; loopCounter2 < 3; loopCounter2 = loopCounter2 + 1) {\n              if (((int)(uint)coordinateFlag >> loopCounter2 & 1U) != 0) {\n                convertedValue = __aeabi_fsub(*(undefined4 *)(&DAT_20000e74 + (loopCounter2 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (loopCounter2 + 8) * 4));\n                tempValue = (uint)loopCounter2;\n                convertedValue = __aeabi_fsub(convertedValue,tempStackArray[loopCounter2 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (tempValue + 10) * 4) = convertedValue;\n              }\n            }\n          }\n          coordinateFlag = 0;\n          break;\n        case '\\b':\n          memset(&DAT_20000e9c,0,0xc);\n        }\n        if (((coordinateBitmask & 4) != 0) || (coordinateFlag != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = __aeabi_fcmplt(millimeters,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((commandType4 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (loopCounter1 = 0; loopCounter1 < 3; loopCounter1 = loopCounter1 + 1) {\n            if (((int)(uint)coordinateFlag >> loopCounter1 & 1U) == 0) {\n              tempStackArray[loopCounter1 + 3] = *(undefined4 *)(&DAT_20000e74 + (loopCounter1 + 2) * 4);\n            }\n            else if (commandType4 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                tempValue = (uint)loopCounter1;\n                convertedValue = __addsf3(tempStackArray[loopCounter1 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (loopCounter1 + 2) * 4));\n                tempStackArray[tempValue + 3] = convertedValue;\n              }\n              else {\n                tempValue2 = tempStackArray[loopCounter1 + 3];\n                convertedValue = __addsf3(*(undefined4 *)(&DAT_20000e70 + (loopCounter1 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (loopCounter1 + 10) * 4));\n                tempValue = (uint)loopCounter1;\n                convertedValue = __addsf3(tempValue2,convertedValue);\n                tempStackArray[tempValue + 3] = convertedValue;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (coordinateFlag == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              mc_line(tempStackArray[3],tempStackArray[4],tempStackArray[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (coordinateFlag == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              convertedValue = millimeters;\n              if (DAT_20000e72 == '\\0') {\n                convertedValue = DAT_20000e78;\n              }\n              mc_line(tempStackArray[3],tempStackArray[4],tempStackArray[5],convertedValue,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            coordinateFlag = coordinateFlag & ~(byte)(1 << DAT_20000e8b);\n            if ((coordinateFlag == 0) ||\n               (((result = __aeabi_fcmpeq(distance,0), result != 0 &&\n                 (result = __aeabi_fcmpeq(tempStackArray[DAT_20000e89],0), result != 0)) &&\n                (result = __aeabi_fcmpeq(tempStackArray[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = __aeabi_fcmpeq(distance,0);\n              if (result == 0) {\n                tempFloat = __aeabi_fsub(tempStackArray[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                tempValue3 = __aeabi_fsub(tempStackArray[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                memset(tempStackArray,0,0xc);\n                convertedValue = __aeabi_fmul(distance,0x40800000);\n                convertedValue = __aeabi_fmul(convertedValue,distance);\n                tempValue2 = __aeabi_fmul(tempFloat,tempFloat);\n                convertedValue = __aeabi_fsub(convertedValue,tempValue2);\n                tempValue2 = __aeabi_fmul(tempValue3,tempValue3);\n                tempInt = __aeabi_fsub(convertedValue,tempValue2);\n                result = __aeabi_fcmplt(tempInt,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                tempDouble = __aeabi_f2d(tempInt);\n                tempDouble = sqrt((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n                tempDouble2 = __aeabi_f2d(tempFloat);\n                tempDouble3 = __aeabi_f2d(tempValue3);\n                tempDouble2 = hypot((int)tempDouble2,(int)((ulonglong)tempDouble2 >> 0x20),(int)tempDouble3,\n                              (int)((ulonglong)tempDouble3 >> 0x20));\n                tempDouble = __divdf3((int)tempDouble,(uint)((ulonglong)tempDouble >> 0x20) ^ 0x80000000,(int)tempDouble2\n                                 ,(int)((ulonglong)tempDouble2 >> 0x20));\n                tempInt = __truncdfsf2((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  tempInt = tempInt ^ 0x80000000;\n                }\n                result = __aeabi_fcmplt(distance,0);\n                if (result != 0) {\n                  tempInt = tempInt ^ 0x80000000;\n                  distance = distance ^ 0x80000000;\n                }\n                convertedValue = __aeabi_fmul(tempValue3,tempInt);\n                convertedValue = __aeabi_fsub(tempFloat,convertedValue);\n                tempValue = (uint)DAT_20000e89;\n                convertedValue = __aeabi_fmul(convertedValue,0x3f000000);\n                tempStackArray[tempValue] = convertedValue;\n                convertedValue = __aeabi_fmul(tempFloat,tempInt);\n                convertedValue = __addsf3(convertedValue,tempValue3);\n                tempValue = (uint)DAT_20000e8a;\n                convertedValue = __aeabi_fmul(convertedValue,0x3f000000);\n                tempStackArray[tempValue] = convertedValue;\n              }\n              else {\n                tempDouble = __aeabi_f2d(tempStackArray[DAT_20000e89]);\n                tempDouble2 = __aeabi_f2d(tempStackArray[DAT_20000e8a]);\n                tempDouble = hypot((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20),(int)tempDouble2,\n                              (int)((ulonglong)tempDouble2 >> 0x20));\n                distance = __truncdfsf2((int)tempDouble,(int)((ulonglong)tempDouble >> 0x20));\n              }\n              isFloat = DAT_20000e71 == '\\x02';\n              convertedValue = millimeters;\n              if (DAT_20000e72 == '\\0') {\n                convertedValue = DAT_20000e78;\n              }\n              mc_arc(&DAT_20000e7c,tempStackArray + 3,tempStackArray,DAT_20000e89,DAT_20000e8a,DAT_20000e8b,\n                     convertedValue,DAT_20000e72,distance,isFloat);\n            }\n            break;\n          case '\\x04':\n            if (coordinateFlag != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = tempStackArray[3];\n          DAT_20000e80 = tempStackArray[4];\n          DAT_20000e84 = tempStackArray[5];\n        }\n        returnValue = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          plan_synchronize();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            mc_reset();\n            returnValue = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            returnValue = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_input_080005b4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "convertedValue",
                "cVar3": "returnValue",
                "uVar4": "tempValue",
                "uVar5": "tempValue2",
                "uVar6": "tempDouble",
                "uVar7": "tempDouble2",
                "uVar8": "tempDouble3",
                "local_94": "coordData",
                "local_84": "planeX",
                "local_80": "planeY",
                "local_7c": "planeZ",
                "uStack_78": "tempStackVar",
                "uStack_74": "tempStackVar2",
                "auStack_70": "tempStackArray",
                "local_58": "value",
                "local_52": "statementCode",
                "local_51": "loopFlag",
                "local_50": "tempValue3",
                "local_4c": "tempFloat",
                "local_45": "isFloat",
                "local_44": "tempInt",
                "local_3d": "loopCounter1",
                "local_3c": "loopCounter2",
                "local_3b": "loopCounter3",
                "local_3a": "loopCounter4",
                "local_39": "commandType",
                "local_38": "distance",
                "local_34": "tempFloat2",
                "local_2f": "commandType2",
                "local_2e": "commandType3",
                "local_2d": "commandType4",
                "local_2c": "millimeters",
                "local_27": "coordinateFlag",
                "local_26": "coordinateBitmask",
                "local_24": "selectedCoordinate"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "mc_line",
                "mc_arc",
                "__aeabi_fsub",
                "__aeabi_d2iz",
                "__addsf3",
                "next_statement",
                "__aeabi_d2uiz",
                "__aeabi_fcmplt",
                "__divdf3",
                "memset",
                "sqrt",
                "trunc",
                "__aeabi_fmul",
                "__aeabi_fcmple",
                "mc_dwell",
                "plan_synchronize",
                "__aeabi_f2d",
                "select_plane",
                "settings_read_coord_data",
                "mc_reset",
                "spindle_run",
                "to_millimeters",
                "hypot",
                "__truncdfsf2",
                "coolant_run",
                "settings_write_coord_data",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_update_character_0800184c",
            "code": "\nundefined4 checkAndUpdateCharacter_0800184c(byte *outputBuffer,undefined4 constant,int data,byte *inputBuffer)\n\n{\n  int readResult;\n  undefined4 returnValue;\n  \n  if (*(char *)(data + (uint)*inputBuffer) == '\\0') {\n    returnValue = 0;\n  }\n  else {\n    *outputBuffer = *(byte *)(data + (uint)*inputBuffer);\n    if ((*outputBuffer < 0x41) || (0x5a < *outputBuffer)) {\n      DAT_20000e70 = 2;\n      returnValue = 0;\n    }\n    else {\n      *inputBuffer = *inputBuffer + 1;\n      readResult = read_float(data,inputBuffer,constant);\n      if (readResult == 0) {\n        DAT_20000e70 = 1;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 1;\n      }\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_update_character_0800184c",
                "param_1": "outputBuffer",
                "param_2": "constant",
                "param_3": "data",
                "param_4": "inputBuffer",
                "iVar1": "readResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "read_float"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_flag_with_param_080018cc",
            "code": "\n\n\nvoid updateFlagWithParam_080018cc(uint newParam)\n\n{\n  _DAT_40021014 = newParam | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_flag_with_param_080018cc",
                "param_1": "newParam"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_flag_with_param_080018fc",
            "code": "\n\n\nvoid updateFlagWithParam_080018fc(uint newParam)\n\n{\n  _DAT_40021014 = newParam | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_flag_with_param_080018fc",
                "param_1": "newParam"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "initialize_flag_value_0800192c",
            "code": "\nvoid initializeFlagValue_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "initialize_flag_value_0800192c"
            },
            "calling": [
                "settings_store_global_setting",
                "grbl_main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "check_and_reset_0800195c",
            "code": "\nvoid check_and_reset_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    reset_function();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "check_and_reset_0800195c",
                "mc_reset": "reset_function"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_flag_08001994",
            "code": "\nvoid calculateFlag_08001994(byte flagBits,char isBoolParam,char isInverted,undefined4 someValue)\n\n{\n  undefined4 tempVar1;\n  uint maxValue;\n  undefined8 tempVar3;\n  undefined8 tempVar4;\n  byte tempByte;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort flag1;\n  uint value4;\n  int intValue1;\n  undefined4 floatValue1;\n  uint maxValue2;\n  uint debounceValue;\n  ushort flag2;\n  uint counter;\n  uint total;\n  int difference;\n  int tempValue1;\n  int tempValue2;\n  int tempValue3;\n  ushort flag3;\n  uint limitValue;\n  char counterByte;\n  \n  counterByte = '\\0';\n  memset(&value1,0,0xc);\n  if ((flagBits & 1) != 0) {\n    counterByte = counterByte + '\\x01';\n    tempVar3 = __aeabi_f2d(DAT_20000ebc);\n    value1 = lround((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  }\n  if ((flagBits & 2) != 0) {\n    counterByte = counterByte + '\\x01';\n    tempVar3 = __aeabi_f2d(DAT_20000ec0);\n    value2 = lround((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  }\n  if ((flagBits & 4) != 0) {\n    counterByte = counterByte + '\\x01';\n    tempVar3 = __aeabi_f2d(DAT_20000ec4);\n    value3 = lround((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  }\n  maxValue = value3;\n  if (value3 < value2) {\n    maxValue = value2;\n  }\n  maxValue2 = value1;\n  if (value1 < maxValue) {\n    maxValue2 = maxValue;\n  }\n  tempVar3 = __floatunsidf(maxValue2);\n  tempVar4 = __floatunsidf(counterByte);\n  tempVar4 = sqrt((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n  tempVar3 = __divdf3((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20),(int)tempVar4,\n                   (int)((ulonglong)tempVar4 >> 0x20));\n  floatValue1 = __truncdfsf2((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  tempVar1 = __aeabi_fmul(DAT_20000edc,floatValue1);\n  tempVar1 = __aeabi_fdiv(tempVar1,0x453b8000);\n  tempVar3 = __aeabi_f2d(tempVar1);\n  tempVar3 = ceil((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  intValue1 = __aeabi_d2uiz((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  tempVar3 = __floatunsidf(counterByte);\n  tempVar3 = sqrt((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  tempVar4 = __aeabi_f2d(someValue);\n  tempVar3 = __muldf3((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20),(int)tempVar4,\n                   (int)((ulonglong)tempVar4 >> 0x20));\n  tempVar1 = __truncdfsf2((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  tempVar1 = __aeabi_fmul(floatValue1,tempVar1);\n  tempVar1 = __aeabi_fdiv(0x4c64e1c0,tempVar1);\n  tempVar3 = __aeabi_f2d(tempVar1);\n  value4 = lround((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20));\n  limitValue = 75000;\n  if (value4 < 75000) {\n    limitValue = value4;\n  }\n  flag1 = DAT_20000ed4;\n  flag3 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (isBoolParam == '\\0') {\n    flag3 = flag3 ^ 0xaa0;\n  }\n  update_flag_with_param_080018fc(flag3);\n  update_flag_with_param_080018cc(flag1);\n  tempValue1 = -(maxValue2 >> 1);\n  difference = limitValue - DAT_20000ec9;\n  total = 0;\n  counter = 10000;\n  tempByte = flagBits;\n  tempValue2 = tempValue1;\n  tempValue3 = tempValue1;\n  while( true ) {\n    flag2 = flag1;\n    debounceValue = debounce_rd();\n    if (isInverted == '\\0') {\n      debounceValue = debounceValue ^ 0x1e;\n    }\n    if (((tempByte & 1) != 0) && (tempValue3 = tempValue3 + value1, 0 < tempValue3)) {\n      if ((debounceValue & 0x10) == 0) {\n        tempByte = tempByte & 0xfe;\n      }\n      else {\n        flag2 = flag2 ^ 0x10;\n      }\n      tempValue3 = tempValue3 - maxValue2;\n    }\n    if (((tempByte & 2) != 0) && (tempValue2 = tempValue2 + value2, 0 < tempValue2)) {\n      if ((debounceValue & 8) == 0) {\n        tempByte = tempByte & 0xfd;\n      }\n      else {\n        flag2 = flag2 ^ 0x440;\n      }\n      tempValue2 = tempValue2 - maxValue2;\n    }\n    if (((tempByte & 4) != 0) && (tempValue1 = tempValue1 + value3, 0 < tempValue1)) {\n      if ((debounceValue & 4) == 0) {\n        tempByte = tempByte & 0xfb;\n      }\n      else {\n        flag2 = flag2 ^ 0x100;\n      }\n      tempValue1 = tempValue1 - maxValue2;\n    }\n    if ((tempByte == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_flag_with_param_080018cc(flag2);\n    delay_us(DAT_20000ec9);\n    update_flag_with_param_080018cc(flag1);\n    delay_us(difference);\n    if ((value4 < limitValue) && (counter = limitValue + counter, 20000 < counter)) {\n      counter = counter - 20000;\n      total = intValue1 + total;\n      limitValue = 60000000 / total;\n      if (limitValue < value4) {\n        limitValue = value4;\n      }\n      difference = limitValue - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_flag_08001994",
                "param_1": "flagBits",
                "param_2": "isBoolParam",
                "param_3": "isInverted",
                "param_4": "someValue",
                "uVar1": "tempVar1",
                "uVar2": "maxValue",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "local_61": "tempByte",
                "local_5c": "value1",
                "local_58": "value2",
                "local_54": "value3",
                "local_4e": "flag1",
                "local_4c": "value4",
                "local_48": "intValue1",
                "local_44": "floatValue1",
                "local_40": "maxValue2",
                "local_3c": "debounceValue",
                "local_36": "flag2",
                "local_34": "counter",
                "local_30": "total",
                "local_2c": "difference",
                "local_28": "tempValue1",
                "local_24": "tempValue2",
                "local_20": "tempValue3",
                "local_1a": "flag3",
                "local_18": "limitValue",
                "local_11": "counterByte"
            },
            "calling": [
                "limits_go_home"
            ],
            "called": [
                "sqrt",
                "FUN_080018cc",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "lround",
                "__floatunsidf",
                "__aeabi_f2d",
                "ceil",
                "__aeabi_d2uiz",
                "__truncdfsf2",
                "debounce_rd",
                "__divdf3",
                "FUN_080018fc",
                "memset",
                "delay_us",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "perform_homing_cycle_08001d4c",
            "code": "\nvoid performHomingCycle_08001d4c(void)\n\n{\n  char nextCounter;\n  char counter;\n  \n  wakeUp();\n  executeHomingCycle(4,1,0,DAT_20000eec);\n  executeHomingCycle(3,1,0,DAT_20000eec);\n  delayMilliseconds(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    nextCounter = counter + -1;\n    if (counter == '\\0') break;\n    executeHomingCycle(7,0,1,DAT_20000ee8);\n    delayMilliseconds(DAT_20000ef0);\n    counter = nextCounter;\n    if ('\\0' < nextCounter) {\n      executeHomingCycle(7,1,0,DAT_20000ee8);\n      delayMilliseconds(DAT_20000ef0);\n    }\n  }\n  goIdle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "perform_homing_cycle_08001d4c",
                "local_9": "counter",
                "cVar1": "nextCounter",
                "st_wake_up": "wakeUp",
                "homing_cycle": "executeHomingCycle",
                "delay_ms": "delayMilliseconds",
                "st_go_idle": "goIdle"
            },
            "calling": [
                "mc_go_home"
            ],
            "called": [
                "st_go_idle",
                "delay_ms",
                "st_wake_up",
                "homing_cycle"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_08001ddc",
            "code": "\nvoid initialize_08001ddc(void)\n\n{\n  initialize_08001ddc_serial();\n  initialize_08001ddc_settings();\n  initialize_08001ddc_st();\n  memset(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      reset_serial_read_buffer();\n      initialize_08001ddc_plan();\n      initialize_08001ddc_gc();\n      initialize_08001ddc_protocol();\n      initialize_08001ddc_spindle();\n      initialize_08001ddc_coolant();\n      initialize_08001ddc_limits();\n      reset_st();\n      synchronize_current_position();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        report_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        execute_startup_protocol();\n      }\n    }\n    execute_runtime_protocol();\n    process_protocol();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_08001ddc",
                "serial_init": "initialize_serial",
                "settings_init": "initialize_settings",
                "st_init": "initialize_st",
                "serial_reset_read_buffer": "reset_serial_read_buffer",
                "plan_init": "initialize_plan",
                "gc_init": "initialize_gc",
                "protocol_init": "initialize_protocol",
                "spindle_init": "initialize_spindle",
                "coolant_init": "initialize_coolant",
                "limits_init": "initialize_limits",
                "st_reset": "reset_st",
                "sys_sync_current_position": "synchronize_current_position",
                "report_feedback_message": "report_message",
                "protocol_execute_startup": "execute_startup_protocol",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_process": "process_protocol"
            },
            "calling": [
                "main"
            ],
            "called": [
                "protocol_process",
                "st_reset",
                "report_feedback_message",
                "serial_reset_read_buffer",
                "gc_init",
                "st_init",
                "settings_init",
                "protocol_init",
                "serial_init",
                "coolant_init",
                "protocol_execute_startup",
                "plan_init",
                "sys_sync_current_position",
                "protocol_execute_runtime",
                "spindle_init",
                "memset",
                "limits_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "execute_protocol_08001e98",
            "code": "\nvoid executeProtocol_08001e98(undefined4 buffer1,undefined4 buffer2,undefined4 buffer3,undefined4 buffer4,\n                 undefined flag)\n\n{\n  int checkResult;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      protocol_execute_runtime();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      checkResult = plan_check_full_buffer();\n    } while (checkResult != 0);\n    plan_buffer_line(buffer1,buffer2,buffer3,buffer4,flag);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      st_cycle_start();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "execute_protocol_08001e98",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "param_3": "buffer3",
                "param_4": "buffer4",
                "param_5": "flag",
                "iVar1": "checkResult"
            },
            "calling": [
                "mc_arc",
                "gc_execute_line",
                "mc_go_home"
            ],
            "called": [
                "plan_check_full_buffer",
                "protocol_execute_runtime",
                "st_cycle_start",
                "plan_buffer_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_angle_and_draw_lines_08001f00",
            "code": "\nvoid calculateAngleAndDrawLines_08001f00(int pointArray1,undefined4 *pointArray2,int pointArrayLength,byte pointIndex1,byte pointIndex2,byte pointIndex3\n                 ,undefined4 lineWidth,char isReversed,undefined4 scalingFactor,char isPositive)\n\n{\n  undefined4 subtractionResult1;\n  undefined4 subtractionResult2;\n  int comparisonResult;\n  uint lineEndPoint1;\n  undefined8 lineEndPoint2;\n  undefined8 lineEndPoint3;\n  uint lineEndPointArray [4];\n  undefined4 temp2;\n  undefined4 temp1;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  ushort angle;\n  undefined4 distance;\n  undefined4 result7;\n  undefined4 result8;\n  uint distanceSquared;\n  undefined4 additionResult1;\n  undefined4 additionResult2;\n  char counter;\n  ushort iteration;\n  undefined4 angleRounded;\n  uint distanceRounded;\n  uint negativeXCoordinate;\n  \n  additionResult2 = __addsf3(*(undefined4 *)((uint)pointIndex1 * 4 + pointArray1),\n                      *(undefined4 *)((uint)pointIndex1 * 4 + pointArrayLength));\n  additionResult1 = __addsf3(*(undefined4 *)((uint)pointIndex2 * 4 + pointArray1),\n                      *(undefined4 *)((uint)pointIndex2 * 4 + pointArrayLength));\n  distanceSquared = __aeabi_fsub(pointArray2[pointIndex3],*(undefined4 *)((uint)pointIndex3 * 4 + pointArray1));\n  negativeXCoordinate = *(uint *)((uint)pointIndex1 * 4 + pointArrayLength) ^ 0x80000000;\n  distanceRounded = *(uint *)((uint)pointIndex2 * 4 + pointArrayLength) ^ 0x80000000;\n  result8 = __aeabi_fsub(pointArray2[pointIndex1],additionResult2);\n  result7 = __aeabi_fsub(pointArray2[pointIndex2],additionResult1);\n  subtractionResult1 = __aeabi_fmul(negativeXCoordinate,result7);\n  subtractionResult2 = __aeabi_fmul(distanceRounded,result8);\n  subtractionResult1 = __aeabi_fsub(subtractionResult1,subtractionResult2);\n  lineEndPoint2 = __aeabi_f2d(subtractionResult1);\n  subtractionResult1 = __aeabi_fmul(negativeXCoordinate,result8);\n  subtractionResult2 = __aeabi_fmul(distanceRounded,result7);\n  subtractionResult1 = __addsf3(subtractionResult1,subtractionResult2);\n  lineEndPoint3 = __aeabi_f2d(subtractionResult1);\n  lineEndPoint2 = atan2((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20),(int)lineEndPoint3,\n                (int)((ulonglong)lineEndPoint3 >> 0x20));\n  angleRounded = __truncdfsf2((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n  if (isPositive == '\\0') {\n    comparisonResult = __aeabi_fcmple(angleRounded,0);\n    if (comparisonResult != 0) {\n      lineEndPoint2 = __aeabi_f2d(angleRounded);\n      lineEndPoint2 = __aeabi_dadd((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20),0x54442d18,0x401921fb);\n      angleRounded = __truncdfsf2((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n    }\n  }\n  else {\n    comparisonResult = __aeabi_fcmpge(angleRounded,0);\n    if (comparisonResult != 0) {\n      lineEndPoint2 = __aeabi_f2d(angleRounded);\n      lineEndPoint2 = __subdf3((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20),0x54442d18,0x401921fb);\n      angleRounded = __truncdfsf2((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n    }\n  }\n  subtractionResult1 = __aeabi_fmul(angleRounded,scalingFactor);\n  lineEndPoint2 = __aeabi_f2d(subtractionResult1);\n  lineEndPoint3 = __aeabi_f2d(distanceSquared & 0x7fffffff);\n  lineEndPoint2 = hypot((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20),(int)lineEndPoint3,\n                (int)((ulonglong)lineEndPoint3 >> 0x20));\n  distance = __truncdfsf2((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n  comparisonResult = __aeabi_fcmpeq(distance,0);\n  if (comparisonResult == 0) {\n    subtractionResult1 = __aeabi_fdiv(distance,DAT_20000ed8);\n    lineEndPoint2 = __aeabi_f2d(subtractionResult1);\n    lineEndPoint2 = floor((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n    angle = __aeabi_d2uiz((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n    if (isReversed != '\\0') {\n      subtractionResult1 = __floatsisf(angle);\n      lineWidth = __aeabi_fmul(lineWidth,subtractionResult1);\n    }\n    subtractionResult1 = __floatsisf(angle);\n    result6 = __aeabi_fdiv(angleRounded,subtractionResult1);\n    subtractionResult1 = __floatsisf(angle);\n    result5 = __aeabi_fdiv(distanceSquared,subtractionResult1);\n    lineEndPoint2 = __aeabi_f2d(result6);\n    lineEndPoint2 = __muldf3((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20),0,0x3fe00000);\n    lineEndPoint3 = __aeabi_f2d(result6);\n    lineEndPoint2 = __muldf3((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20),(int)lineEndPoint3,\n                     (int)((ulonglong)lineEndPoint3 >> 0x20));\n    lineEndPoint2 = __subdf3(0,0x3ff00000,(int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n    result4 = __truncdfsf2((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n    result3 = result6;\n    counter = '\\0';\n    lineEndPointArray[pointIndex3] = *(uint *)(pointArray1 + (uint)pointIndex3 * 4);\n    for (iteration = 1; iteration < angle; iteration = iteration + 1) {\n      if ((int)counter < (int)(uint)DAT_20000efa) {\n        subtractionResult1 = __aeabi_fmul(negativeXCoordinate,result3);\n        subtractionResult2 = __aeabi_fmul(distanceRounded,result4);\n        lineEndPointArray[3] = __addsf3(subtractionResult1,subtractionResult2);\n        subtractionResult1 = __aeabi_fmul(negativeXCoordinate,result4);\n        subtractionResult2 = __aeabi_fmul(distanceRounded,result3);\n        negativeXCoordinate = __aeabi_fsub(subtractionResult1,subtractionResult2);\n        distanceRounded = lineEndPointArray[3];\n        counter = counter + '\\x01';\n      }\n      else {\n        subtractionResult1 = __floatsisf(iteration);\n        subtractionResult1 = __aeabi_fmul(subtractionResult1,result6);\n        lineEndPoint2 = __aeabi_f2d(subtractionResult1);\n        lineEndPoint2 = cos((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n        temp1 = __truncdfsf2((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n        subtractionResult1 = __floatsisf(iteration);\n        subtractionResult1 = __aeabi_fmul(subtractionResult1,result6);\n        lineEndPoint2 = __aeabi_f2d(subtractionResult1);\n        lineEndPoint2 = sin((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n        temp2 = __truncdfsf2((int)lineEndPoint2,(int)((ulonglong)lineEndPoint2 >> 0x20));\n        subtractionResult1 = __aeabi_fmul(*(uint *)((uint)pointIndex1 * 4 + pointArrayLength) ^ 0x80000000,temp1);\n        subtractionResult2 = __aeabi_fmul(*(undefined4 *)((uint)pointIndex2 * 4 + pointArrayLength),temp2);\n        negativeXCoordinate = __addsf3(subtractionResult1,subtractionResult2);\n        subtractionResult1 = __aeabi_fmul(*(uint *)((uint)pointIndex1 * 4 + pointArrayLength) ^ 0x80000000,temp2);\n        subtractionResult2 = __aeabi_fmul(*(undefined4 *)((uint)pointIndex2 * 4 + pointArrayLength),temp1);\n        distanceRounded = __aeabi_fsub(subtractionResult1,subtractionResult2);\n        counter = '\\0';\n      }\n      lineEndPoint1 = __addsf3(additionResult2,negativeXCoordinate);\n      lineEndPointArray[pointIndex1] = lineEndPoint1;\n      lineEndPoint1 = __addsf3(additionResult1,distanceRounded);\n      lineEndPointArray[pointIndex2] = lineEndPoint1;\n      lineEndPoint1 = __addsf3(lineEndPointArray[pointIndex3],result5);\n      lineEndPointArray[pointIndex3] = lineEndPoint1;\n      mc_line(lineEndPointArray[0],lineEndPointArray[1],lineEndPointArray[2],lineWidth,isReversed);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    mc_line(*pointArray2,pointArray2[1],pointArray2[2],lineWidth,isReversed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_angle_and_draw_lines_08001f00",
                "param_1": "pointArray1",
                "param_2": "pointArray2",
                "param_3": "pointArrayLength",
                "param_4": "pointIndex1",
                "param_5": "pointIndex2",
                "param_6": "pointIndex3",
                "param_7": "lineWidth",
                "param_8": "isReversed",
                "param_9": "scalingFactor",
                "param_10": "isPositive",
                "uVar1": "subtractionResult1",
                "uVar2": "subtractionResult2",
                "iVar3": "comparisonResult",
                "uVar4": "lineEndPoint1",
                "uVar5": "lineEndPoint2",
                "uVar6": "lineEndPoint3",
                "local_6c": "lineEndPointArray",
                "local_5c": "temp2",
                "local_58": "temp1",
                "local_54": "result3",
                "local_50": "result4",
                "local_4c": "result5",
                "local_48": "result6",
                "local_42": "angle",
                "local_40": "distance",
                "local_3c": "result7",
                "local_38": "result8",
                "local_34": "distanceSquared",
                "local_30": "additionResult1",
                "local_2c": "additionResult2",
                "local_27": "counter",
                "local_26": "iteration",
                "local_24": "angleRounded",
                "local_20": "distanceRounded",
                "local_1c": "negativeXCoordinate"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "mc_line",
                "sin",
                "__aeabi_fsub",
                "__aeabi_dadd",
                "atan2",
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fcmpge",
                "floor",
                "__aeabi_fdiv",
                "__aeabi_fcmple",
                "__subdf3",
                "__aeabi_f2d",
                "cos",
                "__floatsisf",
                "__aeabi_d2uiz",
                "hypot",
                "__truncdfsf2",
                "__aeabi_fcmpeq",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "calculate_delay_08002408",
            "code": "\nvoid calculate_delay_08002408(undefined4 multiplier)\n\n{\n  undefined2 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 result4;\n  ushort iteration_count;\n  \n  result2 = __aeabi_fmul(multiplier,0x41a00000);\n  result4 = __aeabi_f2d(result2);\n  result4 = floor((int)result4,(int)((ulonglong)result4 >> 0x20));\n  iteration_count = __aeabi_d2uiz((int)result4,(int)((ulonglong)result4 >> 0x20));\n  plan_synchronize();\n  result2 = __aeabi_fmul(multiplier,0x447a0000);\n  result3 = __floatsisf((uint)iteration_count * 0x32);\n  result2 = __aeabi_fsub(result2,result3);\n  result4 = __aeabi_f2d(result2);\n  result4 = floor((int)result4,(int)((ulonglong)result4 >> 0x20));\n  result1 = __aeabi_d2uiz((int)result4,(int)((ulonglong)result4 >> 0x20));\n  delay_ms(result1);\n  while ((iteration_count != 0 && (protocol_execute_runtime(), DAT_20000ea8 == '\\0'))) {\n    _delay_ms(0x32);\n    iteration_count = iteration_count - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "calculate_delay_08002408",
                "param_1": "multiplier",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "local_12": "iteration_count"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__floatsisf",
                "__aeabi_d2uiz",
                "delay_ms",
                "__aeabi_fmul",
                "protocol_execute_runtime",
                "floor",
                "_delay_ms",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_080024c4",
            "code": "\nvoid initialize_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char is_movement_enabled;\n  char is_rotation_enabled;\n  char is_sync_enabled;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  limits_go_home();\n  protocol_execute_runtime();\n  if (DAT_20000ea8 == '\\0') {\n    memset(&DAT_20000eac,0,0xc);\n    sys_sync_current_position();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      is_sync_enabled = -1;\n    }\n    else {\n      is_sync_enabled = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      is_rotation_enabled = -1;\n    }\n    else {\n      is_rotation_enabled = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      is_movement_enabled = -1;\n    }\n    else {\n      is_movement_enabled = '\\x01';\n    }\n    uVar1 = __floatsisf((int)is_sync_enabled);\n    uVar1 = __aeabi_fmul(uVar1,DAT_20000ef4);\n    uVar2 = __floatsisf((int)is_rotation_enabled);\n    uVar2 = __aeabi_fmul(uVar2,DAT_20000ef4);\n    uVar3 = __floatsisf((int)is_movement_enabled);\n    uVar3 = __aeabi_fmul(uVar3,DAT_20000ef4);\n    mc_line(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    st_cycle_start();\n    plan_synchronize();\n    sys_sync_current_position();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_080024c4",
                "local_13": "is_movement_enabled",
                "local_12": "is_rotation_enabled",
                "local_11": "is_sync_enabled"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "mc_line",
                "__floatsisf",
                "limits_go_home",
                "__aeabi_fmul",
                "sys_sync_current_position",
                "protocol_execute_runtime",
                "st_cycle_start",
                "memset",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "stop_spindle_coolant_control_080025e8",
            "code": "\nvoid stop_spindle_coolant_control_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    stop_spindle();\n    stop_coolant();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      go_idle();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "stop_spindle_coolant_control_080025e8",
                "spindle_stop": "stop_spindle",
                "coolant_stop": "stop_coolant",
                "st_go_idle": "go_idle"
            },
            "calling": [
                "protocol_execute_line",
                "gc_execute_line",
                "serial_rx_hook",
                "limits_isr",
                "buttons_isr"
            ],
            "called": [
                "st_go_idle",
                "coolant_stop",
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_08002638",
            "code": "\nundefined4 parseInteger_08002638(int base_address,byte *input_string,uint *output_value)\n\n{\n  byte digit;\n  bool is_negative;\n  bool is_decimal;\n  int comparison_result;\n  char *current_char;\n  char *next_char;\n  undefined4 result;\n  undefined8 temp_variable;\n  uint integer_value;\n  byte digit_count;\n  char decimal_count;\n  int parsed_integer;\n  char current_digit;\n  char *current_position;\n  \n  next_char = (char *)(base_address + (uint)*input_string);\n  current_char = next_char + 1;\n  current_digit = *next_char;\n  is_negative = false;\n  if (current_digit == '-') {\n    is_negative = true;\n    current_digit = *current_char;\n    current_position = next_char + 2;\n  }\n  else {\n    current_position = current_char;\n    if (current_digit == '+') {\n      current_position = next_char + 2;\n      current_digit = *current_char;\n    }\n  }\n  parsed_integer = 0;\n  decimal_count = '\\0';\n  digit_count = 0;\n  is_decimal = false;\n  do {\n    digit = current_digit - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_decimal) {\n          decimal_count = decimal_count + -1;\n        }\n        parsed_integer = (uint)digit + parsed_integer * 10;\n      }\n      else if (!is_decimal) {\n        decimal_count = decimal_count + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_decimal)) {\n        if (digit_count == 0) {\n          result = 0;\n        }\n        else {\n          integer_value = __floatunsisf(parsed_integer);\n          comparison_result = __aeabi_fcmpeq(integer_value,0);\n          if (comparison_result == 0) {\n            for (; decimal_count < -1; decimal_count = decimal_count + '\\x02') {\n              temp_variable = __aeabi_f2d(integer_value);\n              temp_variable = __muldf3((int)temp_variable,(int)((ulonglong)temp_variable >> 0x20),0x47ae147b,0x3f847ae1);\n              integer_value = __truncdfsf2((int)temp_variable,(int)((ulonglong)temp_variable >> 0x20));\n            }\n            if (decimal_count < '\\0') {\n              temp_variable = __aeabi_f2d(integer_value);\n              temp_variable = __muldf3((int)temp_variable,(int)((ulonglong)temp_variable >> 0x20),0x9999999a,0x3fb99999);\n              integer_value = __truncdfsf2((int)temp_variable,(int)((ulonglong)temp_variable >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimal_count; decimal_count = decimal_count + -1) {\n                integer_value = __aeabi_fmul(integer_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *output_value = integer_value ^ 0x80000000;\n          }\n          else {\n            *output_value = integer_value;\n          }\n          *input_string = ((char)current_position - (char)base_address) - 1;\n          result = 1;\n        }\n        return result;\n      }\n      is_decimal = true;\n    }\n    current_digit = *current_position;\n    current_position = current_position + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "output_value",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "is_decimal",
                "iVar4": "comparison_result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "result",
                "uVar8": "temp_variable",
                "local_1c": "integer_value",
                "local_16": "digit_count",
                "local_15": "decimal_count",
                "local_14": "parsed_integer",
                "local_d": "current_digit",
                "local_c": "current_position"
            },
            "calling": [
                "protocol_execute_line",
                "next_statement"
            ],
            "called": [
                "__aeabi_f2d",
                "__floatunsisf",
                "__truncdfsf2",
                "__aeabi_fmul",
                "__muldf3",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "limits_go_home",
                "mc_dwell",
                "report_alarm_message"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_positions_0800283a",
            "code": "\nvoid initialize_positions_0800283a(void)\n\n{\n  plan_set_current_position(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  gc_set_current_position(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_positions_0800283a"
            },
            "calling": [
                "grbl_main",
                "mc_go_home"
            ],
            "called": [
                "plan_set_current_position",
                "gc_set_current_position"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_limit_08002870",
            "code": "\nchar incrementAndLimit_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_limit_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "planner_recalculate_trapezoids",
                "plan_discard_current_block",
                "plan_reset_buffer",
                "planner_forward_pass",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "adjust_character_08002896",
            "code": "\nchar adjustCharacter_08002896(char inputCharacter)\n\n{\n  char adjustedCharacter;\n  \n  adjustedCharacter = inputCharacter;\n  if (inputCharacter == '\\0') {\n    adjustedCharacter = '\\x12';\n  }\n  return adjustedCharacter + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "adjust_character_08002896",
                "param_1": "inputCharacter",
                "local_9": "adjustedCharacter"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_division_080028bc",
            "code": "\nundefined4 calculate_division_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 squared_input_2;\n  undefined4 doubled_input_3;\n  \n  squared_input_2 = __aeabi_fmul(input_2,input_2);\n  doubled_input_3 = __aeabi_fmul(input_1,input_1);\n  squared_input_2 = __aeabi_fsub(squared_input_2,doubled_input_3);\n  doubled_input_3 = __addsf3(input_3,input_3);\n  squared_input_2 = __aeabi_fdiv(squared_input_2,doubled_input_3);\n  return squared_input_2;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_division_080028bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "squared_input_2",
                "uVar2": "doubled_input_3"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculateResult_08002908(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = __addsf3(input3,input3);\n  temp1 = __aeabi_fmul(temp1,input4);\n  temp2 = __aeabi_fmul(input1,input1);\n  temp1 = __aeabi_fsub(temp1,temp2);\n  temp2 = __aeabi_fmul(input2,input2);\n  temp1 = __addsf3(temp1,temp2);\n  temp2 = __aeabi_fmul(input3,0x40800000);\n  temp1 = __aeabi_fdiv(temp1,temp2);\n  return temp1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_square_difference_08002978",
            "code": "\nundefined4 calculate_square_difference_08002978(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 squared_input_2;\n  undefined4 doubled_input_1;\n  undefined8 result;\n  \n  squared_input_2 = multiply_float(input_2,input_2);\n  doubled_input_1 = add_float(input_1,input_1);\n  doubled_input_1 = multiply_float(doubled_input_1,input_3);\n  squared_input_2 = subtract_float(squared_input_2,doubled_input_1);\n  result = convert_float_to_double(squared_input_2);\n  result = calculate_square_root((int)result,(int)((ulonglong)result >> 0x20));\n  squared_input_2 = truncate_double_to_float((int)result,(int)((ulonglong)result >> 0x20));\n  return squared_input_2;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_square_difference_08002978",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "squared_input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "result",
                "__aeabi_fmul": "multiply_float",
                "__addsf3": "add_float",
                "__aeabi_fsub": "subtract_float",
                "__aeabi_f2d": "convert_float_to_double",
                "sqrt": "calculate_square_root",
                "__truncdfsf2": "truncate_double_to_float"
            },
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "sqrt",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__truncdfsf2",
                "__addsf3",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_speed_if_necessary_080029d8",
            "code": "\nvoid updateSpeedIfNecessary_080029d8(undefined4 arg1,int objectPtr,int paramPtr)\n\n{\n  int compareResult;\n  undefined4 newSpeed;\n  undefined4 currentSpeed;\n  \n  if (((objectPtr != 0) && (paramPtr != 0)) &&\n     (compareResult = __aeabi_fcmpeq(*(undefined4 *)(objectPtr + 0x18),*(undefined4 *)(objectPtr + 0x1c)),\n     compareResult == 0)) {\n    if ((*(char *)(objectPtr + 0x25) == '\\0') &&\n       (compareResult = __aeabi_fcmpgt(*(undefined4 *)(objectPtr + 0x1c),*(undefined4 *)(paramPtr + 0x18)),\n       compareResult != 0)) {\n      currentSpeed = *(undefined4 *)(objectPtr + 0x1c);\n      newSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(paramPtr + 0x18),\n                                  *(undefined4 *)(objectPtr + 0x20));\n      compareResult = __aeabi_fcmplt(currentSpeed,newSpeed);\n      if (compareResult == 0) {\n        newSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(paramPtr + 0x18),\n                                    *(undefined4 *)(objectPtr + 0x20));\n      }\n      else {\n        newSpeed = *(undefined4 *)(objectPtr + 0x1c);\n      }\n      *(undefined4 *)(objectPtr + 0x18) = newSpeed;\n    }\n    else {\n      *(undefined4 *)(objectPtr + 0x18) = *(undefined4 *)(objectPtr + 0x1c);\n    }\n    *(undefined *)(objectPtr + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_speed_if_necessary_080029d8",
                "param_1": "arg1",
                "param_2": "objectPtr",
                "param_3": "paramPtr",
                "iVar1": "compareResult",
                "uVar2": "newSpeed",
                "uVar3": "currentSpeed"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpgt",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "execute_reverse_pass_08002a94",
            "code": "\nvoid executeReversePass_08002a94(void)\n\n{\n  undefined *previous_block_ptr;\n  undefined *previous_block_ptr;\n  undefined *temp_block_ptr;\n  byte current_block_index;\n  \n  current_block_index = DAT_20000cf0;\n  previous_block_ptr = (undefined *)0x0;\n  temp_block_ptr = (undefined *)0x0;\n  while (previous_block_ptr = temp_block_ptr, current_block_index != DAT_20000cf1) {\n    current_block_index = getPreviousBlockIndex(current_block_index);\n    temp_block_ptr = previous_block_ptr;\n    executePlannerReversePassKernel(&DAT_20000870 + (uint)current_block_index * 0x40,previous_block_ptr,previous_block_ptr);\n    previous_block_ptr = &DAT_20000870 + (uint)current_block_index * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "execute_reverse_pass_08002a94",
                "local_9": "current_block_index",
                "local_18": "previous_block_ptr",
                "local_14": "temp_block_ptr",
                "puVar1": "previous_block_ptr",
                "prev_block_index": "getPreviousBlockIndex",
                "planner_reverse_pass_kernel": "executePlannerReversePassKernel"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "prev_block_index",
                "planner_reverse_pass_kernel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "update_max_allowable_speed_08002afc",
            "code": "\nvoid updateMaxAllowableSpeed_08002afc(int vehicleData,int speedData)\n\n{\n  int compareResult;\n  undefined4 newMaxSpeed;\n  undefined4 currentMaxSpeed;\n  \n  if (((vehicleData != 0) && (*(char *)(vehicleData + 0x25) == '\\0')) &&\n     (compareResult = __aeabi_fcmplt(*(undefined4 *)(vehicleData + 0x18),*(undefined4 *)(speedData + 0x18)),\n     compareResult != 0)) {\n    currentMaxSpeed = *(undefined4 *)(speedData + 0x18);\n    newMaxSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(vehicleData + 0x18),\n                                *(undefined4 *)(vehicleData + 0x20));\n    compareResult = __aeabi_fcmplt(currentMaxSpeed,newMaxSpeed);\n    if (compareResult == 0) {\n      newMaxSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(vehicleData + 0x18),\n                                  *(undefined4 *)(vehicleData + 0x20));\n    }\n    else {\n      newMaxSpeed = *(undefined4 *)(speedData + 0x18);\n    }\n    compareResult = __aeabi_fcmpeq(newMaxSpeed,*(undefined4 *)(speedData + 0x18));\n    if (compareResult == 0) {\n      *(undefined4 *)(speedData + 0x18) = newMaxSpeed;\n      *(undefined *)(speedData + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "update_max_allowable_speed_08002afc",
                "param_1": "vehicleData",
                "param_2": "speedData",
                "iVar1": "compareResult",
                "uVar2": "newMaxSpeed",
                "uVar3": "currentMaxSpeed"
            },
            "calling": [
                "planner_forward_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "planner_forward_pass_08002ba8",
            "code": "\nvoid planner_forward_pass_08002ba8(void)\n\n{\n  uint converted_index;\n  undefined *current_block;\n  undefined *previous_block;\n  undefined *current_output;\n  undefined *next_output;\n  byte current_index;\n  \n  current_output = (undefined *)0x0;\n  next_output = (undefined *)0x0;\n  current_index = DAT_20000cf1;\n  previous_block = (undefined *)0x0;\n  while (current_block = current_output, current_index != DAT_20000cf0) {\n    current_output = next_output;\n    converted_index = (uint)current_index;\n    planner_forward_pass_08002ba8_kernel(current_block,next_output,&DAT_20000870 + converted_index * 0x40);\n    current_index = next_block_index(current_index);\n    previous_block = current_block;\n    next_output = &DAT_20000870 + converted_index * 0x40;\n  }\n  planner_forward_pass_08002ba8_kernel(current_output,next_output,0,current_output,previous_block);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "planner_forward_pass_08002ba8",
                "puVar2": "current_block",
                "puVar3": "previous_block",
                "local_14": "current_output",
                "local_10": "next_output",
                "local_9": "current_index",
                "uVar1": "converted_index"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "planner_forward_pass_kernel",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_acceleration_distance_08002c18",
            "code": "\nvoid calculateAccelerationDistance_08002c18(int data,undefined4 factor1,undefined4 factor2)\n\n{\n  undefined4 conversion1;\n  int conversion2;\n  undefined4 conversion3;\n  undefined4 conversion4;\n  undefined4 conversion5;\n  uint temp1;\n  undefined8 temp2;\n  int result1;\n  uint result2;\n  \n  conversion1 = __floatunsisf(*(undefined4 *)(data + 0x3c));\n  conversion1 = __aeabi_fmul(conversion1,factor1);\n  temp2 = __aeabi_f2d(conversion1);\n  temp2 = ceil((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  conversion1 = __aeabi_d2uiz((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  *(undefined4 *)(data + 0x28) = conversion1;\n  conversion1 = __floatunsisf(*(undefined4 *)(data + 0x3c));\n  conversion1 = __aeabi_fmul(conversion1,factor2);\n  temp2 = __aeabi_f2d(conversion1);\n  temp2 = ceil((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  conversion1 = __aeabi_d2uiz((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  *(undefined4 *)(data + 0x2c) = conversion1;\n  temp2 = __aeabi_i2d(*(int *)(data + 0x30) * 0x32);\n  temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x404e0000);\n  conversion2 = __aeabi_d2iz((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  conversion1 = __floatunsisf(*(undefined4 *)(data + 0x28));\n  conversion3 = __floatunsisf(*(undefined4 *)(data + 0x3c));\n  conversion4 = __floatsisf(conversion2);\n  conversion1 = estimate_acceleration_distance(conversion1,conversion3,conversion4);\n  temp2 = __aeabi_f2d(conversion1);\n  temp2 = ceil((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  result2 = __aeabi_d2iz((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  conversion1 = __floatunsisf(*(undefined4 *)(data + 0x3c));\n  conversion3 = __floatunsisf(*(undefined4 *)(data + 0x2c));\n  conversion4 = __floatsisf(-conversion2);\n  conversion1 = estimate_acceleration_distance(conversion1,conversion3,conversion4);\n  temp2 = __aeabi_f2d(conversion1);\n  temp2 = floor((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  result1 = __aeabi_d2iz((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  result1 = (*(int *)(data + 0x10) - result2) - result1;\n  if (result1 < 0) {\n    conversion1 = __floatunsisf(*(undefined4 *)(data + 0x28));\n    conversion3 = __floatunsisf(*(undefined4 *)(data + 0x2c));\n    conversion4 = __floatsisf(conversion2);\n    conversion5 = __floatsisf(*(undefined4 *)(data + 0x10));\n    conversion1 = intersection_distance(conversion1,conversion3,conversion4,conversion5);\n    temp2 = __aeabi_f2d(conversion1);\n    temp2 = ceil((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    temp1 = __aeabi_d2iz((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    temp1 = temp1 & ~((int)temp1 >> 0x1f);\n    result2 = *(uint *)(data + 0x10);\n    if ((int)temp1 <= (int)*(uint *)(data + 0x10)) {\n      result2 = temp1;\n    }\n    result1 = 0;\n  }\n  *(uint *)(data + 0x34) = result2;\n  *(uint *)(data + 0x38) = result1 + result2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_acceleration_distance_08002c18",
                "param_1": "data",
                "param_2": "factor1",
                "param_3": "factor2",
                "uVar1": "conversion1",
                "iVar2": "conversion2",
                "uVar3": "conversion3",
                "uVar4": "conversion4",
                "uVar5": "conversion5",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "local_20": "result1",
                "local_1c": "result2"
            },
            "calling": [
                "planner_recalculate_trapezoids"
            ],
            "called": [
                "__aeabi_f2d",
                "estimate_acceleration_distance",
                "__floatunsisf",
                "__aeabi_d2iz",
                "__floatsisf",
                "__aeabi_d2uiz",
                "ceil",
                "__aeabi_i2d",
                "__aeabi_fmul",
                "floor",
                "intersection_distance",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_trapezoids_08002e08",
            "code": "\nvoid calculate_trapezoids_08002e08(void)\n\n{\n  undefined4 block_ratio1;\n  undefined4 block_ratio2;\n  int block_offset;\n  undefined *block;\n  byte block_index;\n  \n  block = (undefined *)0x0;\n  block_index = DAT_20000cf1;\n  while (block_index != DAT_20000cf0) {\n    block_offset = (uint)block_index * 0x40;\n    if ((block != (undefined *)0x0) &&\n       ((block[0x24] != '\\0' || ((&DAT_20000894)[block_offset] != '\\0')))) {\n      block_ratio1 = __aeabi_fdiv(*(undefined4 *)(block + 0x18),*(undefined4 *)(block + 0x14));\n      block_ratio2 = __aeabi_fdiv(*(undefined4 *)(&DAT_20000888 + block_offset),*(undefined4 *)(block + 0x14));\n      calculate_trapezoid_for_block(block,block_ratio1,block_ratio2);\n      block[0x24] = 0;\n    }\n    block_index = next_block_index(block_index);\n    block = &DAT_20000870 + block_offset;\n  }\n  block_ratio1 = __aeabi_fdiv(*(undefined4 *)(block + 0x18),*(undefined4 *)(block + 0x14));\n  block_ratio2 = __aeabi_fdiv(0,*(undefined4 *)(block + 0x14));\n  calculate_trapezoid_for_block(block,block_ratio1,block_ratio2);\n  block[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_trapezoids_08002e08",
                "local_18": "block",
                "local_11": "block_index",
                "iVar3": "block_offset",
                "uVar1": "block_ratio1",
                "uVar2": "block_ratio2"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "next_block_index",
                "calculate_trapezoid_for_block",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "update_planner_08002edc",
            "code": "\nvoid update_planner_08002edc(void)\n\n{\n  planner_reverse_pass();\n  planner_forward_pass();\n  planner_recalculate_trapezoids();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "update_planner_08002edc"
            },
            "calling": [
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [
                "planner_recalculate_trapezoids",
                "planner_reverse_pass",
                "planner_forward_pass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "initialize_block_data_08002ef0",
            "code": "\nvoid initializeBlockData_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = getNextBlockIndex(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "initialize_block_data_08002ef0",
                "next_block_index": "getNextBlockIndex"
            },
            "calling": [
                "plan_init"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_buffer_08002f24",
            "code": "\nvoid initialize_buffer_08002f24(void)\n\n{\n  reset_buffer();\n  memset(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_buffer_08002f24",
                "plan_reset_buffer": "reset_buffer"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "plan_reset_buffer",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_block_index_08002f40",
            "code": "\nvoid update_block_index_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = next_block_index(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_block_index_08002f40"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_valid_data_pointer_08002f74",
            "code": "\nundefined * get_valid_data_pointer_08002f74(void)\n\n{\n  undefined *valid_data_pointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    valid_data_pointer = (undefined *)0x0;\n  }\n  else {\n    valid_data_pointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return valid_data_pointer;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_valid_data_pointer_08002f74",
                "puVar1": "valid_data_pointer"
            },
            "calling": [
                "step_period_isr",
                "plan_synchronize"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_data_equal_08002fac",
            "code": "\nbool areDataEqual_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_data_equal_08002fac"
            },
            "calling": [
                "mc_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "execute_protocol_runtime_08002fd4",
            "code": "\nvoid execute_protocol_runtime_08002fd4(void)\n\n{\n  int current_block;\n  \n  while ((current_block = get_current_block(), current_block != 0 || (DAT_20000ea9 == '\\x03'))) {\n    protocol_execute_runtime();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "execute_protocol_runtime_08002fd4",
                "iVar1": "current_block",
                "plan_get_current_block": "get_current_block"
            },
            "calling": [
                "spindle_run",
                "gc_execute_line",
                "coolant_run",
                "mc_dwell",
                "mc_go_home"
            ],
            "called": [
                "protocol_execute_runtime",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_block_speed_08003004",
            "code": "\nvoid calculateBlockSpeed_08003004(undefined4 velocityX,undefined4 velocityY,undefined4 velocityZ,undefined4 timeInterval,\n                 char isReversed)\n\n{\n  undefined4 velocityXFloat;\n  int velocityXInt;\n  int velocityYInt;\n  int velocityZInt;\n  undefined4 velocityYFloat;\n  undefined4 velocityZFloat;\n  undefined4 velocityXSquared;\n  undefined4 velocityYSquared;\n  uint velocityZSquared;\n  int blockIndex;\n  ushort *blockDetails;\n  int distanceDiff;\n  uint maxDistanceDiff;\n  undefined8 distanceDiffFloat;\n  undefined8 maxSpeedFloat;\n  undefined8 targetSpeedFloat;\n  undefined4 newSpeed;\n  undefined4 floatConstant;\n  \n  blockIndex = (uint)DAT_20000cf0 * 0x40;\n  blockDetails = (ushort *)(&DAT_20000870 + blockIndex);\n  velocityXFloat = __aeabi_fmul(DAT_20000ebc,velocityX);\n  distanceDiffFloat = __aeabi_f2d(velocityXFloat);\n  velocityXInt = lround((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n  velocityXFloat = __aeabi_fmul(DAT_20000ec0,velocityY);\n  distanceDiffFloat = __aeabi_f2d(velocityXFloat);\n  velocityYInt = lround((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n  velocityXFloat = __aeabi_fmul(DAT_20000ec4,velocityZ);\n  distanceDiffFloat = __aeabi_f2d(velocityXFloat);\n  velocityZInt = lround((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n  *blockDetails = 0;\n  if (velocityXInt < DAT_20000cf4) {\n    *blockDetails = *blockDetails | 0x20;\n  }\n  if (velocityYInt < DAT_20000cf8) {\n    *blockDetails = *blockDetails | 0x880;\n  }\n  if (velocityZInt < DAT_20000cfc) {\n    *blockDetails = *blockDetails | 0x200;\n  }\n  distanceDiff = velocityXInt - DAT_20000cf4;\n  if (distanceDiff < 0) {\n    distanceDiff = -distanceDiff;\n  }\n  *(int *)(&DAT_20000874 + blockIndex) = distanceDiff;\n  distanceDiff = velocityYInt - DAT_20000cf8;\n  if (distanceDiff < 0) {\n    distanceDiff = -distanceDiff;\n  }\n  *(int *)(&DAT_20000878 + blockIndex) = distanceDiff;\n  distanceDiff = velocityZInt - DAT_20000cfc;\n  if (distanceDiff < 0) {\n    distanceDiff = -distanceDiff;\n  }\n  *(int *)(&DAT_2000087c + blockIndex) = distanceDiff;\n  velocityZSquared = *(uint *)(&DAT_2000087c + blockIndex);\n  if (*(uint *)(&DAT_2000087c + blockIndex) < *(uint *)(&DAT_20000878 + blockIndex)) {\n    velocityZSquared = *(uint *)(&DAT_20000878 + blockIndex);\n  }\n  maxDistanceDiff = *(uint *)(&DAT_20000874 + blockIndex);\n  if (*(uint *)(&DAT_20000874 + blockIndex) < velocityZSquared) {\n    maxDistanceDiff = velocityZSquared;\n  }\n  *(uint *)(&DAT_20000880 + blockIndex) = maxDistanceDiff;\n  if (*(int *)(&DAT_20000880 + blockIndex) != 0) {\n    velocityXFloat = __floatsisf(velocityXInt - DAT_20000cf4);\n    velocityXFloat = __aeabi_fdiv(velocityXFloat,DAT_20000ebc);\n    velocityYFloat = __floatsisf(velocityYInt - DAT_20000cf8);\n    velocityYFloat = __aeabi_fdiv(velocityYFloat,DAT_20000ec0);\n    velocityZFloat = __floatsisf(velocityZInt - DAT_20000cfc);\n    velocityZFloat = __aeabi_fdiv(velocityZFloat,DAT_20000ec4);\n    velocityXSquared = __aeabi_fmul(velocityXFloat,velocityXFloat);\n    velocityYSquared = __aeabi_fmul(velocityYFloat,velocityYFloat);\n    velocityXSquared = __addsf3(velocityXSquared,velocityYSquared);\n    velocityYSquared = __aeabi_fmul(velocityZFloat,velocityZFloat);\n    velocityXSquared = __addsf3(velocityXSquared,velocityYSquared);\n    distanceDiffFloat = __aeabi_f2d(velocityXSquared);\n    distanceDiffFloat = sqrt((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n    velocityXSquared = __truncdfsf2((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + blockIndex) = velocityXSquared;\n    velocityXSquared = __aeabi_fdiv(0x3f800000,*(undefined4 *)(&DAT_20000890 + blockIndex));\n    if (isReversed == '\\0') {\n      floatConstant = __aeabi_fmul(timeInterval,velocityXSquared);\n    }\n    else {\n      floatConstant = __aeabi_fdiv(0x3f800000,timeInterval);\n    }\n    velocityYSquared = __aeabi_fmul(*(undefined4 *)(&DAT_20000890 + blockIndex),floatConstant);\n    *(undefined4 *)(&DAT_20000884 + blockIndex) = velocityYSquared;\n    velocityYSquared = __floatsisf(*(undefined4 *)(&DAT_20000880 + blockIndex));\n    velocityYSquared = __aeabi_fmul(velocityYSquared,floatConstant);\n    distanceDiffFloat = __aeabi_f2d(velocityYSquared);\n    distanceDiffFloat = ceil((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n    velocityYSquared = __aeabi_d2uiz((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + blockIndex) = velocityYSquared;\n    velocityYSquared = __floatsisf(*(undefined4 *)(&DAT_20000880 + blockIndex));\n    velocityYSquared = __aeabi_fmul(velocityYSquared,velocityXSquared);\n    velocityYSquared = __aeabi_fmul(velocityYSquared,DAT_20000edc);\n    velocityYSquared = __aeabi_fdiv(velocityYSquared,0x453b8000);\n    distanceDiffFloat = __aeabi_f2d(velocityYSquared);\n    distanceDiffFloat = ceil((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n    velocityYSquared = __aeabi_d2iz((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + blockIndex) = velocityYSquared;\n    velocityZSquared = __aeabi_fmul(velocityXFloat,velocityXSquared);\n    velocityXFloat = __aeabi_fmul(velocityYFloat,velocityXSquared);\n    velocityYFloat = __aeabi_fmul(velocityZFloat,velocityXSquared);\n    newSpeed = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (distanceDiff = __aeabi_fcmpgt(DAT_20000d0c,0), distanceDiff != 0)) {\n      velocityZFloat = __aeabi_fmul(DAT_20000d00 ^ 0x80000000,velocityZSquared);\n      velocityXSquared = __aeabi_fmul(DAT_20000d04,velocityXFloat);\n      velocityZFloat = __aeabi_fsub(velocityZFloat,velocityXSquared);\n      velocityXSquared = __aeabi_fmul(DAT_20000d08,velocityYFloat);\n      velocityZFloat = __aeabi_fsub(velocityZFloat,velocityXSquared);\n      distanceDiffFloat = __aeabi_f2d(velocityZFloat);\n      distanceDiff = __aeabi_dcmplt((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20),0x66666666,0x3fee6666);\n      if (distanceDiff != 0) {\n        distanceDiff = __aeabi_fcmplt(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + blockIndex));\n        newSpeed = DAT_20000d0c;\n        if (distanceDiff == 0) {\n          newSpeed = *(undefined4 *)(&DAT_20000884 + blockIndex);\n        }\n        distanceDiffFloat = __aeabi_f2d(velocityZFloat);\n        distanceDiff = __aeabi_dcmpgt((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20),0x66666666,0xbfee6666);\n        if (distanceDiff != 0) {\n          distanceDiffFloat = __aeabi_f2d(velocityZFloat);\n          distanceDiffFloat = __subdf3(0,0x3ff00000,(int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n          distanceDiffFloat = __muldf3((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20),0,0x3fe00000);\n          distanceDiffFloat = sqrt((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n          velocityZFloat = __truncdfsf2((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n          distanceDiffFloat = __aeabi_f2d(newSpeed);\n          velocityXSquared = __aeabi_fmul(DAT_20000edc,DAT_20000ee0);\n          velocityXSquared = __aeabi_fmul(velocityXSquared,velocityZFloat);\n          maxSpeedFloat = __aeabi_f2d(velocityXSquared);\n          targetSpeedFloat = __aeabi_f2d(velocityZFloat);\n          targetSpeedFloat = __subdf3(0,0x3ff00000,(int)targetSpeedFloat,(int)((ulonglong)targetSpeedFloat >> 0x20));\n          maxSpeedFloat = __divdf3((int)maxSpeedFloat,(int)((ulonglong)maxSpeedFloat >> 0x20),(int)targetSpeedFloat,\n                            (int)((ulonglong)targetSpeedFloat >> 0x20));\n          maxSpeedFloat = sqrt((int)maxSpeedFloat,(int)((ulonglong)maxSpeedFloat >> 0x20));\n          distanceDiff = __aeabi_dcmplt((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20),(int)maxSpeedFloat,\n                                  (int)((ulonglong)maxSpeedFloat >> 0x20));\n          if (distanceDiff == 0) {\n            velocityXSquared = __aeabi_fmul(DAT_20000edc,DAT_20000ee0);\n            velocityXSquared = __aeabi_fmul(velocityXSquared,velocityZFloat);\n            distanceDiffFloat = __aeabi_f2d(velocityXSquared);\n            maxSpeedFloat = __aeabi_f2d(velocityZFloat);\n            maxSpeedFloat = __subdf3(0,0x3ff00000,(int)maxSpeedFloat,(int)((ulonglong)maxSpeedFloat >> 0x20));\n            distanceDiffFloat = __divdf3((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20),(int)maxSpeedFloat,\n                              (int)((ulonglong)maxSpeedFloat >> 0x20));\n            distanceDiffFloat = sqrt((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n            newSpeed = __truncdfsf2((int)distanceDiffFloat,(int)((ulonglong)distanceDiffFloat >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + blockIndex) = newSpeed;\n    velocityXSquared = max_allowable_speed(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + blockIndex))\n    ;\n    distanceDiff = __aeabi_fcmplt(newSpeed,velocityXSquared);\n    velocityZFloat = velocityXSquared;\n    if (distanceDiff != 0) {\n      velocityZFloat = newSpeed;\n    }\n    *(undefined4 *)(&DAT_20000888 + blockIndex) = velocityZFloat;\n    distanceDiff = __aeabi_fcmpge(velocityXSquared,*(undefined4 *)(&DAT_20000884 + blockIndex));\n    if (distanceDiff == 0) {\n      (&DAT_20000895)[blockIndex] = 0;\n    }\n    else {\n      (&DAT_20000895)[blockIndex] = 1;\n    }\n    (&DAT_20000894)[blockIndex] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + blockIndex);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = velocityZSquared;\n    DAT_20000d04 = velocityXFloat;\n    DAT_20000d08 = velocityYFloat;\n    DAT_20000cf2 = next_block_index(DAT_20000cf2);\n    DAT_20000cf4 = velocityXInt;\n    DAT_20000cf8 = velocityYInt;\n    DAT_20000cfc = velocityZInt;\n    planner_recalculate();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_block_speed_08003004",
                "param_1": "velocityX",
                "param_2": "velocityY",
                "param_3": "velocityZ",
                "param_4": "timeInterval",
                "param_5": "isReversed",
                "uVar1": "velocityXFloat",
                "iVar2": "velocityXInt",
                "iVar3": "velocityYInt",
                "iVar4": "velocityZInt",
                "uVar5": "velocityYFloat",
                "uVar6": "velocityZFloat",
                "uVar7": "velocityXSquared",
                "uVar8": "velocityYSquared",
                "uVar9": "velocityZSquared",
                "iVar10": "blockIndex",
                "puVar11": "blockDetails",
                "iVar12": "distanceDiff",
                "uVar13": "maxDistanceDiff",
                "uVar14": "distanceDiffFloat",
                "uVar15": "maxSpeedFloat",
                "uVar16": "targetSpeedFloat",
                "local_20": "newSpeed",
                "local_1c": "floatConstant"
            },
            "calling": [
                "mc_line"
            ],
            "called": [
                "sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_fsub",
                "__aeabi_d2iz",
                "next_block_index",
                "__aeabi_fmul",
                "__aeabi_fcmpge",
                "__addsf3",
                "__aeabi_fdiv",
                "max_allowable_speed",
                "planner_recalculate",
                "lround",
                "__subdf3",
                "__aeabi_f2d",
                "__floatsisf",
                "__aeabi_d2uiz",
                "ceil",
                "__aeabi_fcmplt",
                "__truncdfsf2",
                "__divdf3",
                "__aeabi_fcmpgt",
                "__muldf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_params_080035ec",
            "code": "\nvoid initializeParams_080035ec(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  DAT_20000cf4 = param1;\n  DAT_20000cf8 = param2;\n  DAT_20000cfc = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_params_080035ec",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_planner_08003618",
            "code": "\nvoid updatePlanner_08003618(undefined4 inputValue)\n\n{\n  undefined4 convertedValue;\n  int offset;\n  undefined4 factor;\n  \n  offset = (uint)DAT_20000cf1 * 0x40;\n  factor = *(undefined4 *)(&DAT_20000890 + offset);\n  convertedValue = __floatsisf(inputValue);\n  convertedValue = __aeabi_fmul(factor,convertedValue);\n  factor = __floatsisf(*(undefined4 *)(&DAT_20000880 + offset));\n  convertedValue = __aeabi_fdiv(convertedValue,factor);\n  *(undefined4 *)(&DAT_20000890 + offset) = convertedValue;\n  *(undefined4 *)(&DAT_20000880 + offset) = inputValue;\n  *(undefined4 *)(&DAT_20000888 + offset) = 0;\n  *(undefined4 *)(&DAT_2000088c + offset) = 0;\n  (&DAT_20000895)[offset] = 0;\n  (&DAT_20000894)[offset] = 1;\n  planner_recalculate();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_planner_08003618",
                "param_1": "inputValue",
                "uVar1": "convertedValue",
                "iVar2": "offset",
                "uVar3": "factor"
            },
            "calling": [
                "st_cycle_reinitialize"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "planner_recalculate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "write_string_to_serial_0800369c",
            "code": "\nvoid writeStringToSerial_0800369c(char *string)\n\n{\n  char *currentChar;\n  \n  currentChar = string;\n  while (*currentChar != '\\0') {\n    serial_write(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "write_string_to_serial_0800369c",
                "param_1": "string",
                "local_c": "currentChar"
            },
            "calling": [
                "protocol_execute_startup",
                "report_startup_line"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "print_string_080036c6",
            "code": "\nvoid print_string_080036c6(char *str)\n\n{\n  char *current_char;\n  \n  current_char = str;\n  while (*current_char != '\\0') {\n    serial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "print_string_080036c6",
                "param_1": "str",
                "local_c": "current_char"
            },
            "calling": [
                "report_gcode_parameters",
                "report_feedback_message",
                "report_init_message",
                "report_grbl_settings",
                "report_grbl_help",
                "report_status_message",
                "report_alarm_message",
                "report_startup_line",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "reverse_bits_080036f0",
            "code": "\nvoid reverse_bits_080036f0(uint input,int num_bits)\n\n{\n  undefined4 output_char;\n  int bit_position;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_position = 0; bit_position < num_bits; bit_position = bit_position + 1) {\n    if ((bit_mask & input) == 0) {\n      output_char = 0x30;\n    }\n    else {\n      output_char = 0x31;\n    }\n    serial_write(output_char);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "reverse_bits_080036f0",
                "param_1": "input",
                "param_2": "num_bits",
                "uVar1": "output_char",
                "local_10": "bit_position",
                "local_c": "bit_mask"
            },
            "calling": [
                "print_uint8_base2",
                "print_uint16_base2"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_number_in_binary_08003740",
            "code": "\nvoid print_number_in_binary_08003740(undefined number)\n\n{\n  print_binary(number,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_number_in_binary_08003740",
                "param_1": "number",
                "print_base2": "print_binary"
            },
            "calling": [],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_in_base_two_0800375c",
            "code": "\nvoid print_in_base_two_0800375c(undefined2 input_value)\n\n{\n  print_base2(input_value,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_in_base_two_0800375c",
                "param_1": "input_value"
            },
            "calling": [
                "report_grbl_settings"
            ],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "write_number_08003778",
            "code": "\nvoid write_number_08003778(uint number)\n\n{\n  uint temp;\n  uint dividend;\n  char digits [12];\n  byte digit_count;\n  \n  digit_count = 0;\n  dividend = number;\n  if (number == 0) {\n    serial_write(0x30);\n  }\n  else {\n    for (; dividend != 0; dividend = dividend / 10) {\n      temp = (uint)digit_count;\n      digit_count = digit_count + 1;\n      digits[temp + 1] = (char)(dividend % 10) + '0';\n    }\n    for (; digit_count != 0; digit_count = digit_count - 1) {\n      serial_write(digits[digit_count]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "write_number_08003778",
                "param_1": "number",
                "uVar1": "temp",
                "local_1c": "dividend",
                "acStack_15": "digits",
                "local_9": "digit_count"
            },
            "calling": [
                "printInteger"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int inputNumber)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = inputNumber;\n  if (inputNumber < 0) {\n    serial_write(0x2d);\n    absoluteValue = -inputNumber;\n  }\n  print_uint32_base10(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "inputNumber",
                "local_c": "absoluteValue"
            },
            "calling": [
                "report_grbl_settings",
                "report_startup_line",
                "report_gcode_modes"
            ],
            "called": [
                "print_uint32_base10",
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_float_to_decimal_08003826",
            "code": "\nvoid convertFloatToDecimal_08003826(uint inputValue)\n\n{\n  int isNegative;\n  undefined4 normalizedValue;\n  byte tempDigit;\n  uint temp;\n  uint value;\n  char decimalString [13];\n  uint integerPart;\n  byte digitIndex;\n  byte loopCounter;\n  \n  isNegative = __aeabi_fcmplt(inputValue,0);\n  value = inputValue;\n  if (isNegative != 0) {\n    serial_write(0x2d);\n    value = inputValue ^ 0x80000000;\n  }\n  for (loopCounter = DAT_20000ef9; 1 < loopCounter; loopCounter = loopCounter - 2) {\n    value = __aeabi_fmul(value,0x42c80000);\n  }\n  if (loopCounter != 0) {\n    value = __aeabi_fmul(value,0x41200000);\n  }\n  normalizedValue = __addsf3(value,0x3f000000);\n  digitIndex = 0;\n  integerPart = __aeabi_f2iz(normalizedValue);\n  decimalString[DAT_20000ef9 + 1] = '.';\n  for (; integerPart != 0; integerPart = integerPart / 10) {\n    if (digitIndex == DAT_20000ef9) {\n      digitIndex = digitIndex + 1;\n    }\n    temp = (uint)digitIndex;\n    digitIndex = digitIndex + 1;\n    decimalString[temp + 1] = (char)(integerPart % 10) + '0';\n  }\n  while (digitIndex < DAT_20000ef9) {\n    temp = (uint)digitIndex;\n    digitIndex = digitIndex + 1;\n    decimalString[temp + 1] = '0';\n  }\n  if (digitIndex == DAT_20000ef9) {\n    tempDigit = digitIndex + 1;\n    digitIndex = digitIndex + 2;\n    decimalString[tempDigit + 1] = '0';\n  }\n  for (; digitIndex != 0; digitIndex = digitIndex - 1) {\n    serial_write(decimalString[digitIndex]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_float_to_decimal_08003826",
                "param_1": "inputValue",
                "iVar1": "isNegative",
                "uVar2": "normalizedValue",
                "bVar3": "tempDigit",
                "uVar4": "temp",
                "local_24": "value",
                "acStack_1d": "decimalString",
                "local_10": "integerPart",
                "local_a": "digitIndex",
                "local_9": "loopCounter"
            },
            "calling": [
                "report_gcode_parameters",
                "report_grbl_settings",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [
                "__aeabi_fcmplt",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_f2iz",
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "protocol_process",
                "protocol_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_protocol_080039a0",
            "code": "\nvoid initializeProtocol_080039a0(void)\n\n{\n  resetLineBuffer();\n  initializeReportMessage();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_protocol_080039a0",
                "protocol_reset_line_buffer": "resetLineBuffer",
                "report_init_message": "initializeReportMessage"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_init_message",
                "protocol_reset_line_buffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_startup_lines_080039bc",
            "code": "\nvoid process_startup_lines_080039bc(void)\n\n{\n  int result;\n  undefined4 status;\n  byte counter;\n  \n  for (counter = 0; counter < 2; counter = counter + 1) {\n    result = read_startup_line(counter,&DAT_20000d10);\n    if (result == 0) {\n      display_message(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      printString(&DAT_20000d10);\n      status = gc_execute_line(&DAT_20000d10);\n      display_message(status);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_startup_lines_080039bc",
                "local_9": "counter",
                "iVar1": "result",
                "uVar2": "status",
                "settings_read_startup_line": "read_startup_line",
                "report_status_message": "display_message"
            },
            "calling": [
                "protocol_execute_line",
                "grbl_main"
            ],
            "called": [
                "gc_execute_line",
                "settings_read_startup_line",
                "printString",
                "report_status_message"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "update_status_08003a18",
            "code": "\nvoid updateStatus_08003a18(uint input)\n\n{\n  if ((input & 0x80) == 0) {\n    if ((input & 0x40) == 0) {\n      if ((input & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    mc_reset();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "update_status_08003a18",
                "param_1": "input"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "handle_control_signals_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid handleControlSignals_08003a74(void)\n\n{\n  byte signal;\n  \n  signal = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        reportAlarmMessage(0xffffffff);\n        reportFeedbackMessage(1);\n        do {\n        } while( true );\n      }\n      reportAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((signal & 0x10) == 0) {\n      if ((signal & 1) != 0) {\n        reportRealtimeStatus();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((signal & 8) != 0) {\n        setFeedHold();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((signal & 4) != 0) {\n        cycleReinitialize();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((signal & 2) != 0) {\n        cycleStart();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "handle_control_signals_08003a74",
                "bVar1": "signal",
                "report_alarm_message": "reportAlarmMessage",
                "report_feedback_message": "reportFeedbackMessage",
                "report_realtime_status": "reportRealtimeStatus",
                "st_feed_hold": "setFeedHold",
                "st_cycle_reinitialize": "cycleReinitialize",
                "st_cycle_start": "cycleStart"
            },
            "calling": [
                "mc_line",
                "grbl_main",
                "protocol_process",
                "mc_dwell",
                "mc_go_home",
                "plan_synchronize"
            ],
            "called": [
                "st_feed_hold",
                "report_feedback_message",
                "st_cycle_reinitialize",
                "st_cycle_start",
                "report_alarm_message",
                "report_realtime_status"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_gcode_command_08003b98",
            "code": "\nuint processGcodeCommand_08003b98(char *command)\n\n{\n  byte firstChar;\n  int returnValue;\n  undefined4 floatValue1;\n  uint returnValue;\n  undefined8 doubleValue;\n  undefined4 floatValue2;\n  undefined4 returnValue;\n  byte flag1;\n  byte flag2;\n  \n  if (*command != '$') {\n    returnValue = gc_execute_line(command);\n    return returnValue;\n  }\n  flag1 = 1;\n  flag2 = '\\0';\n  firstChar = command[1];\n  if (firstChar == 0) {\n    report_grbl_help();\n    return 0;\n  }\n  if ((0x58 < firstChar) || (firstChar < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(firstChar) {\n  case 0x23:\n    flag1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_gcode_parameters();\n    break;\n  case 0x24:\n    flag1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_grbl_settings();\n    break;\n  case 0x43:\n    flag1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      mc_reset();\n      report_feedback_message(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      report_feedback_message(4);\n    }\n    break;\n  case 0x47:\n    flag1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_gcode_modes();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    mc_go_home();\n    if (DAT_20000ea8 == '\\0') {\n      protocol_execute_startup();\n    }\n    break;\n  case 0x4e:\n    flag1 = 2;\n    if (command[2] == '\\0') {\n      for (flag2 = 0; flag2 < 2; flag2 = flag2 + 1) {\n        returnValue = settings_read_startup_line(flag2,command);\n        if (returnValue == 0) {\n          report_status_message(10);\n        }\n        else {\n          report_startup_line(flag2,command);\n        }\n      }\n      return 0;\n    }\n    flag2 = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    returnValue = read_float(command,&flag1,&returnValue);\n    if (returnValue == 0) {\n      return 1;\n    }\n    firstChar = flag1 + 1;\n    if (command[flag1] != '=') {\n      return 3;\n    }\n    flag1 = firstChar;\n    if (flag2 == '\\0') {\n      returnValue = read_float(command,&flag1,&floatValue2);\n      if (returnValue == 0) {\n        return 1;\n      }\n      if (command[flag1] == '\\0') {\n        floatValue1 = __aeabi_f2iz(returnValue);\n        returnValue = settings_store_global_setting(floatValue1,floatValue2);\n        return returnValue;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)flag1 - (uint)firstChar] = command[flag1];\n      returnValue = (uint)flag1;\n      flag1 = flag1 + 1;\n    } while (command[returnValue] != '\\0');\n    flag2 = firstChar;\n    flag2 = gc_execute_line(command);\n    if (flag2 != 0) {\n      return (uint)flag2;\n    }\n    doubleValue = __aeabi_f2d(returnValue);\n    doubleValue = trunc((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n    flag2 = __aeabi_d2uiz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n    settings_store_startup_line(flag2,command);\n    break;\n  case 0x58:\n    flag1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      report_feedback_message(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_gcode_command_08003b98",
                "param_1": "command",
                "bVar1": "firstChar",
                "iVar2": "returnValue",
                "uVar3": "floatValue1",
                "uVar4": "returnValue",
                "uVar5": "doubleValue",
                "local_14": "floatValue2",
                "local_10": "returnValue",
                "local_a": "flag1",
                "local_9": "flag2"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "settings_store_global_setting",
                "gc_execute_line",
                "report_feedback_message",
                "trunc",
                "report_status_message",
                "report_startup_line",
                "__aeabi_f2iz",
                "mc_go_home",
                "__aeabi_f2d",
                "report_gcode_parameters",
                "mc_reset",
                "protocol_execute_startup",
                "__aeabi_d2uiz",
                "report_grbl_settings",
                "settings_store_startup_line",
                "settings_read_startup_line",
                "report_grbl_help",
                "read_float",
                "report_gcode_modes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_serial_input_08003f34",
            "code": "\nvoid process_serial_input_08003f34(void)\n\n{\n  byte serial_byte;\n  undefined4 execution_result;\n  uint array_index;\n  \n  while( true ) {\n    while( true ) {\n      serial_byte = serial_read();\n      if (serial_byte == 0xff) {\n        return;\n      }\n      if ((serial_byte == 10) || (serial_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < serial_byte) && (serial_byte != 0x2f)) {\n          if (serial_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            report_status_message(0xd);\n            protocol_reset_line_buffer();\n          }\n          else if ((serial_byte < 0x61) || (0x7a < serial_byte)) {\n            array_index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[array_index] = serial_byte;\n          }\n          else {\n            array_index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[array_index] = serial_byte - 0x20;\n          }\n        }\n      }\n      else if (serial_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    protocol_execute_runtime();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      report_status_message(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      execution_result = protocol_execute_line(&DAT_20000d10);\n      report_status_message(execution_result);\n    }\n    protocol_reset_line_buffer();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_serial_input_08003f34",
                "bVar1": "serial_byte",
                "uVar2": "execution_result",
                "uVar3": "array_index"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "protocol_execute_line",
                "protocol_execute_runtime",
                "report_status_message",
                "protocol_reset_line_buffer",
                "serial_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "print_error_message_08004030",
            "code": "\nvoid printErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    printProgramString(&DAT_0800b5c8);\n  }\n  else {\n    printProgramString(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      printProgramString(\"Bad number format\");\n      break;\n    case '\\x02':\n      printProgramString(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printProgramString(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printProgramString(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printProgramString(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printProgramString(\"Invalid statement\");\n      break;\n    case '\\a':\n      printProgramString(\"Setting disabled\");\n      break;\n    case '\\b':\n      printProgramString(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printProgramString(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printProgramString(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printProgramString(\"Busy or queued\");\n      break;\n    case '\\f':\n      printProgramString(\"Alarm lock\");\n      break;\n    case '\\r':\n      printProgramString(\"Line overflow\");\n    }\n    printProgramString(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "print_error_message_08004030",
                "param_1": "errorCode",
                "printPgmString": "printProgramString"
            },
            "calling": [
                "report_gcode_parameters",
                "protocol_execute_line",
                "protocol_process",
                "protocol_execute_startup",
                "gc_init",
                "settings_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorFlag)\n\n{\n  printProgramString(\"ALARM: \");\n  if (errorFlag == -2) {\n    printProgramString(\"Abort during cycle\");\n  }\n  else if (errorFlag == -1) {\n    printProgramString(\"Hard limit\");\n  }\n  printProgramString(\". MPos?\\r\\n\");\n  delayMilliseconds(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorFlag",
                "printPgmString": "printProgramString",
                "delay_ms": "delayMilliseconds"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "delay_ms",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "print_status_message_080041a0",
            "code": "\nvoid printStatusMessage_080041a0(undefined status)\n\n{\n  printPgmString(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    printPgmString(\"Reset to continue\");\n    break;\n  case 2:\n    printPgmString(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    printPgmString(\"Caution: Unlocked\");\n    break;\n  case 4:\n    printPgmString(\"Enabled\");\n    break;\n  case 5:\n    printPgmString(\"Disabled\");\n  }\n  printPgmString(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "print_status_message_080041a0",
                "param_1": "status"
            },
            "calling": [
                "protocol_execute_line",
                "grbl_main",
                "protocol_execute_runtime"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_startup_message_08004228",
            "code": "\nvoid printStartupMessage_08004228(void)\n\n{\n  printPgmString(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_startup_message_08004228"
            },
            "calling": [
                "protocol_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_help_menu_0800423c",
            "code": "\nvoid printHelpMenu_0800423c(void)\n\n{\n  printProgramString(\n                \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n                );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_help_menu_0800423c",
                "printPgmString": "printProgramString"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configuration_08004250",
            "code": "\nvoid printConfiguration_08004250(void)\n\n{\n  undefined4 inverseAcceleration;\n  \n  printPgmString(&DAT_0800b8b8);\n  printFloat(DAT_20000ebc);\n  printPgmString(\" (x, step/mm)\\r\\n$1=\");\n  printFloat(DAT_20000ec0);\n  printPgmString(\" (y, step/mm)\\r\\n$2=\");\n  printFloat(DAT_20000ec4);\n  printPgmString(\" (z, step/mm)\\r\\n$3=\");\n  printInteger(DAT_20000ec9);\n  printPgmString(\" (step pulse, usec)\\r\\n$4=\");\n  printFloat(DAT_20000ecc);\n  printPgmString(\" (default feed, mm/min)\\r\\n$5=\");\n  printFloat(DAT_20000ed0);\n  printPgmString(\" (default seek, mm/min)\\r\\n$6=\");\n  printInteger(DAT_20000ed4);\n  printPgmString(\" (step port invert mask, int:\");\n  print_uint16_base2(DAT_20000ed4);\n  printPgmString(\")\\r\\n$7=\");\n  printInteger(DAT_20000ef8);\n  printPgmString(\" (step idle delay, msec)\\r\\n$8=\");\n  inverseAcceleration = __aeabi_fdiv(DAT_20000edc,0x45610000);\n  printFloat(inverseAcceleration);\n  printPgmString(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  printFloat(DAT_20000ee0);\n  printPgmString(\" (junction deviation, mm)\\r\\n$10=\");\n  printFloat(DAT_20000ed8);\n  printPgmString(\" (arc, mm/segment)\\r\\n$11=\");\n  printInteger(DAT_20000efa);\n  printPgmString(\" (n-arc correction, int)\\r\\n$12=\");\n  printInteger(DAT_20000ef9);\n  printPgmString(\" (n-decimals, int)\\r\\n$13=\");\n  printInteger((DAT_20000ee4 & 1) != 0);\n  printPgmString(\" (report inches, bool)\\r\\n$14=\");\n  printInteger((DAT_20000ee4 & 2) != 0);\n  printPgmString(\" (auto start, bool)\\r\\n$15=\");\n  printInteger((DAT_20000ee4 & 4) != 0);\n  printPgmString(\" (invert step enable, bool)\\r\\n$16=\");\n  printInteger((DAT_20000ee4 & 8) != 0);\n  printPgmString(\" (hard limits, bool)\\r\\n$17=\");\n  printInteger((DAT_20000ee4 & 0x10) != 0);\n  printPgmString(\" (homing cycle, bool)\\r\\n$18=\");\n  printInteger(DAT_20000ee6);\n  printPgmString(\" (homing dir invert mask, int:\");\n  print_uint16_base2(DAT_20000ee6);\n  printPgmString(\")\\r\\n$19=\");\n  printFloat(DAT_20000ee8);\n  printPgmString(\" (homing feed, mm/min)\\r\\n$20=\");\n  printFloat(DAT_20000eec);\n  printPgmString(\" (homing seek, mm/min)\\r\\n$21=\");\n  printInteger(DAT_20000ef0);\n  printPgmString(\" (homing debounce, msec)\\r\\n$22=\");\n  printFloat(DAT_20000ef4);\n  printPgmString(\" (homing pull-off, mm)\\r\\n$23=\");\n  printInteger(DAT_20000ed6);\n  printPgmString(\" (dir port invert mask, int:\");\n  print_uint16_base2(DAT_20000ed6);\n  printPgmString(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configuration_08004250",
                "uVar1": "inverseAcceleration"
            },
            "calling": [
                "protocol_execute_line",
                "settings_init"
            ],
            "called": [
                "printPgmString",
                "print_uint16_base2",
                "__aeabi_fdiv",
                "printInteger",
                "printFloat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "print_coordinate_data_080044e8",
            "code": "\nvoid printCoordinateData_080044e8(void)\n\n{\n  int readResult;\n  undefined4 truncatedValue;\n  undefined8 doubleValue;\n  undefined4 coordData [3];\n  byte coordIndex;\n  byte loopIndex;\n  \n  loopIndex = 0;\n  while( true ) {\n    if (7 < loopIndex) {\n      printPgmString(\"[G92:\");\n      for (coordIndex = 0; coordIndex < 3; coordIndex = coordIndex + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          printFloat(*(undefined4 *)(&DAT_20000e74 + (coordIndex + 10) * 4));\n        }\n        else {\n          doubleValue = __aeabi_f2d(*(undefined4 *)(&DAT_20000e74 + (coordIndex + 10) * 4));\n          doubleValue = __muldf3((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20),0x57e16865,0x3fa42851);\n          truncatedValue = __truncdfsf2((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n          printFloat(truncatedValue);\n        }\n        if (coordIndex < 2) {\n          printPgmString(&DAT_0800bbbc);\n        }\n        else {\n          printPgmString(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    readResult = settings_read_coord_data(loopIndex,coordData);\n    if (readResult == 0) break;\n    printPgmString(&DAT_0800bb98);\n    switch(loopIndex) {\n    case 0:\n      printPgmString(&DAT_0800bb9c);\n      break;\n    case 1:\n      printPgmString(&DAT_0800bba0);\n      break;\n    case 2:\n      printPgmString(&DAT_0800bba4);\n      break;\n    case 3:\n      printPgmString(&DAT_0800bba8);\n      break;\n    case 4:\n      printPgmString(&DAT_0800bbac);\n      break;\n    case 5:\n      printPgmString(&DAT_0800bbb0);\n      break;\n    case 6:\n      printPgmString(&DAT_0800bbb4);\n      break;\n    case 7:\n      printPgmString(&DAT_0800bbb8);\n    }\n    for (coordIndex = 0; coordIndex < 3; coordIndex = coordIndex + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        printFloat(coordData[coordIndex]);\n      }\n      else {\n        doubleValue = __aeabi_f2d(coordData[coordIndex]);\n        doubleValue = __muldf3((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20),0x57e16865,0x3fa42851);\n        truncatedValue = __truncdfsf2((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n        printFloat(truncatedValue);\n      }\n      if (coordIndex < 2) {\n        printPgmString(&DAT_0800bbbc);\n      }\n      else {\n        printPgmString(&DAT_0800b764);\n      }\n    }\n    loopIndex = loopIndex + 1;\n  }\n  report_status_message(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "print_coordinate_data_080044e8",
                "auStack_18": "coordData",
                "local_a": "coordIndex",
                "local_9": "loopIndex",
                "iVar1": "readResult",
                "uVar2": "truncatedValue",
                "uVar3": "doubleValue"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "settings_read_coord_data",
                "__truncdfsf2",
                "printPgmString",
                "report_status_message",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "display_settings_080046d0",
            "code": "\nvoid displaySettings_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    printProgramString(&DAT_0800bbc8);\n    break;\n  case 1:\n    printProgramString(&DAT_0800bbcc);\n    break;\n  case 2:\n    printProgramString(&DAT_0800bbd0);\n    break;\n  case 3:\n    printProgramString(&DAT_0800bbd4);\n    break;\n  case 4:\n    printProgramString(&DAT_0800bbd8);\n  }\n  printProgramString(&DAT_0800bbe0);\n  printIntegerValue(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      printProgramString(&DAT_0800bbe4);\n    }\n    else {\n      printProgramString(&DAT_0800bbec);\n    }\n  }\n  else {\n    printProgramString(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    printProgramString(&DAT_0800bc04);\n  }\n  else {\n    printProgramString(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    printProgramString(&DAT_0800bc14);\n  }\n  else {\n    printProgramString(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    printProgramString(&DAT_0800bc24);\n  }\n  else {\n    printProgramString(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    printProgramString(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      printProgramString(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      printProgramString(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    printProgramString(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      printProgramString(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      printProgramString(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    printProgramString(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      printProgramString(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      printProgramString(&DAT_0800bc48);\n    }\n  }\n  printProgramString(&DAT_0800bc50);\n  printIntegerValue(DAT_20000e88);\n  printProgramString(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    printFloatingPointValue(DAT_20000e78);\n  }\n  else {\n    uVar2 = convertFloatToDouble(DAT_20000e78);\n    uVar2 = multiplyDoubleValues((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = convertDoubleToFloat((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    printFloatingPointValue(uVar1);\n  }\n  printProgramString(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "display_settings_080046d0",
                "printPgmString": "printProgramString",
                "printInteger": "printIntegerValue",
                "printFloat": "printFloatingPointValue",
                "__aeabi_f2d": "convertFloatToDouble",
                "__muldf3": "multiplyDoubleValues",
                "__truncdfsf2": "convertDoubleToFloat"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__truncdfsf2",
                "printPgmString",
                "printInteger",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_data_08004900",
            "code": "\nvoid printData_08004900(undefined data1,undefined4 data2)\n\n{\n  printPgmString(&DAT_0800bc58);\n  printInteger(data1);\n  printPgmString(&DAT_0800bc5c);\n  printString(data2);\n  printPgmString(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_data_08004900",
                "param_1": "data1",
                "param_2": "data2"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString",
                "printString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_status_08004940",
            "code": "\nvoid printStatus_08004940(void)\n\n{\n  undefined4 floatValue;\n  uint integerValue;\n  undefined4 floatValue2;\n  undefined8 doubleValue1;\n  undefined8 doubleValue2;\n  undefined4 statusArray [6];\n  byte index;\n  \n  statusArray[3] = DAT_20000eac;\n  statusArray[4] = DAT_20000eb0;\n  statusArray[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    printPgmString(\"<Idle\");\n    break;\n  case 2:\n    printPgmString(\"<Queue\");\n    break;\n  case 3:\n    printPgmString(&DAT_0800bc70);\n    break;\n  case 4:\n    printPgmString(\"<Hold\");\n    break;\n  case 5:\n    printPgmString(\"<Home\");\n    break;\n  case 6:\n    printPgmString(\"<Alarm\");\n    break;\n  case 7:\n    printPgmString(\"<Check\");\n  }\n  printPgmString(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    floatValue = __floatsisf(statusArray[index + 3]);\n    integerValue = (uint)index;\n    floatValue = __aeabi_fdiv(floatValue,(&DAT_20000ebc)[index]);\n    statusArray[integerValue] = floatValue;\n    if ((DAT_20000ee4 & 1) != 0) {\n      doubleValue1 = __aeabi_f2d(statusArray[index]);\n      doubleValue1 = __muldf3((int)doubleValue1,(int)((ulonglong)doubleValue1 >> 0x20),0x57e16865,0x3fa42851);\n      integerValue = (uint)index;\n      floatValue = __truncdfsf2((int)doubleValue1,(int)((ulonglong)doubleValue1 >> 0x20));\n      statusArray[integerValue] = floatValue;\n    }\n    printFloat(statusArray[index]);\n    printPgmString(&DAT_0800bbbc);\n  }\n  printPgmString(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      floatValue2 = statusArray[index];\n      floatValue = __addsf3(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                       *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      integerValue = (uint)index;\n      floatValue = __aeabi_fsub(floatValue2,floatValue);\n      statusArray[integerValue] = floatValue;\n    }\n    else {\n      doubleValue1 = __aeabi_f2d(statusArray[index]);\n      floatValue = __addsf3(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                       *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      doubleValue2 = __aeabi_f2d(floatValue);\n      doubleValue2 = __muldf3((int)doubleValue2,(int)((ulonglong)doubleValue2 >> 0x20),0x57e16865,0x3fa42851);\n      doubleValue1 = __subdf3((int)doubleValue1,(int)((ulonglong)doubleValue1 >> 0x20),(int)doubleValue2,\n                       (int)((ulonglong)doubleValue2 >> 0x20));\n      integerValue = (uint)index;\n      floatValue = __truncdfsf2((int)doubleValue1,(int)((ulonglong)doubleValue1 >> 0x20));\n      statusArray[integerValue] = floatValue;\n    }\n    printFloat(statusArray[index]);\n    if (index < 2) {\n      printPgmString(&DAT_0800bbbc);\n    }\n  }\n  printPgmString(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_status_08004940",
                "auStack_2c": "statusArray",
                "local_11": "index",
                "uVar1": "floatValue",
                "uVar2": "integerValue",
                "uVar3": "floatValue2",
                "uVar4": "doubleValue1",
                "uVar5": "doubleValue2"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__floatsisf",
                "__truncdfsf2",
                "printPgmString",
                "__addsf3",
                "__aeabi_fdiv",
                "__subdf3",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "copy_data_to_eeprom_08004bc0",
            "code": "\nvoid copyDataToEEPROM_08004bc0(byte dataByte,undefined4 sourceData)\n\n{\n  copyToEEPROMWithChecksum((sourceOffset)dataByte * 0x101 + 0x300,sourceData,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "copy_data_to_eeprom_08004bc0",
                "param_1": "dataByte",
                "param_2": "sourceData",
                "memcpy_to_eeprom_with_checksum": "copyToEEPROMWithChecksum",
                "ushort": "sourceOffset"
            },
            "calling": [
                "protocol_execute_line",
                "settings_read_startup_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "copy_to_eeprom_08004bf4",
            "code": "\nvoid copyToEEPROM_08004bf4(byte inputOffset,undefined4 dataBuffer)\n\n{\n  memcpy_to_eeprom_with_checksum((ushort)inputOffset * 0xd + 0x200,dataBuffer,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "copy_to_eeprom_08004bf4",
                "param_1": "inputOffset",
                "param_2": "dataBuffer"
            },
            "calling": [
                "settings_read_coord_data",
                "gc_execute_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_eeprom_08004c2a",
            "code": "\nvoid initializeEEPROM_08004c2a(void)\n\n{\n  putCharToEEPROM(0,5);\n  copyDataToEEPROMWithChecksum(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_eeprom_08004c2a",
                "eeprom_put_char": "putCharToEEPROM",
                "memcpy_to_eeprom_with_checksum": "copyDataToEEPROMWithChecksum"
            },
            "calling": [
                "settings_store_global_setting",
                "settings_reset"
            ],
            "called": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_settings_08004c48",
            "code": "\nvoid initializeSettings_08004c48(char inputFlag)\n\n{\n  if (inputFlag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  write_global_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_settings_08004c48",
                "param_1": "inputFlag"
            },
            "calling": [
                "settings_init",
                "read_global_settings"
            ],
            "called": [
                "write_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "read_and_store_startup_settings_08004d2c",
            "code": "\nbool read_and_store_startup_settings_08004d2c(byte byte_to_read,undefined *buffer)\n\n{\n  int result;\n  \n  result = memcpy_from_eeprom_with_checksum(buffer,(ushort)byte_to_read * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *buffer = 0;\n    settings_store_startup_line(byte_to_read,buffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "read_and_store_startup_settings_08004d2c",
                "param_1": "byte_to_read",
                "param_2": "buffer",
                "iVar1": "result"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "settings_store_startup_line",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "update_coord_data_08004d7c",
            "code": "\nbool update_coord_data_08004d7c(byte input_byte,undefined4 output_data)\n\n{\n  int result;\n  \n  result = read_from_eeprom(output_data,(ushort)input_byte * 0xd + 0x200,0xc);\n  if (result == 0) {\n    reset_memory(output_data,0,0xc);\n    write_to_settings(input_byte,output_data);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "update_coord_data_08004d7c",
                "param_1": "input_byte",
                "param_2": "output_data",
                "iVar1": "result",
                "memcpy_from_eeprom_with_checksum": "read_from_eeprom",
                "settings_write_coord_data": "write_to_settings",
                "memset": "reset_memory"
            },
            "calling": [
                "report_gcode_parameters",
                "gc_execute_line",
                "gc_init",
                "settings_init"
            ],
            "called": [
                "settings_write_coord_data",
                "memset",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "read_eeprom_data_08004dd2",
            "code": "\nundefined4 read_eeprom_data_08004dd2(void)\n\n{\n  byte eeprom_value;\n  int result;\n  \n  eeprom_value = eeprom_get_char(0);\n  if (eeprom_value == 5) {\n    result = read_data_from_eeprom_with_checksum(&DAT_20000ebc,1,0x40);\n    if (result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < eeprom_value) {\n      return 0;\n    }\n    result = read_data_from_eeprom_with_checksum(&DAT_20000ebc,1,0x28);\n    if (result == 0) {\n      return 0;\n    }\n    reset_settings(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "read_eeprom_data_08004dd2",
                "bVar1": "eeprom_value",
                "iVar2": "result",
                "memcpy_from_eeprom_with_checksum": "read_data_from_eeprom_with_checksum",
                "settings_reset": "reset_settings"
            },
            "calling": [
                "settings_init"
            ],
            "called": [
                "eeprom_get_char",
                "settings_reset",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_settings_08004e30",
            "code": "\nundefined4 updateSettings_08004e30(int setting,uint value)\n\n{\n  undefined4 result;\n  int comparison;\n  undefined8 convertedValue;\n  \n  switch(setting) {\n  case 0:\n  case 1:\n  case 2:\n    comparison = __aeabi_fcmple(value,0);\n    if (comparison != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[setting] = value;\n    break;\n  case 3:\n    comparison = __aeabi_fcmplt(value,0x40400000);\n    if (comparison != 0) {\n      return 9;\n    }\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ec9 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = value;\n    break;\n  case 5:\n    DAT_20000ed0 = value;\n    break;\n  case 6:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed4 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 7:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef8 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 8:\n    result = __aeabi_fmul(value,0x42700000);\n    DAT_20000edc = __aeabi_fmul(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = value;\n    break;\n  case 0xb:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000efa = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xc:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef9 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xd:\n    comparison = __aeabi_fcmpeq(value,0);\n    if (comparison == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    comparison = __aeabi_fcmpeq(value,0);\n    if (comparison == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    comparison = __aeabi_fcmpeq(value,0);\n    if (comparison == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    comparison = __aeabi_fcmpeq(value,0);\n    if (comparison == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    limits_init();\n    break;\n  case 0x11:\n    comparison = __aeabi_fcmpeq(value,0);\n    if (comparison == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ee6 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = value;\n    break;\n  case 0x14:\n    DAT_20000eec = value;\n    break;\n  case 0x15:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef0 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = value;\n    break;\n  case 0x17:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed6 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  write_global_settings();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_settings_08004e30",
                "param_1": "setting",
                "param_2": "value",
                "uVar1": "result",
                "iVar2": "comparison",
                "uVar3": "convertedValue"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_d2uiz",
                "__aeabi_fcmplt",
                "trunc",
                "__aeabi_fmul",
                "write_global_settings",
                "__aeabi_fcmple",
                "limits_init",
                "round",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "check_and_reset_settings_080051b4",
            "code": "\nvoid checkAndResetSettings_080051b4(void)\n\n{\n  int result;\n  undefined coordData [15];\n  byte index;\n  \n  result = read_global_settings();\n  if (result == 0) {\n    report_status_message(10);\n    settings_reset(1);\n    report_grbl_settings();\n  }\n  for (index = 0; index < 8; index = index + 1) {\n    result = settings_read_coord_data(index,coordData);\n    if (result == 0) {\n      report_status_message(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "check_and_reset_settings_080051b4",
                "auStack_18": "coordData",
                "local_9": "index",
                "iVar1": "result"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "settings_read_coord_data",
                "report_grbl_settings",
                "settings_reset",
                "report_status_message",
                "read_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "spindle_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "stop_spindle_08005238",
            "code": "\nvoid stop_spindle_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  spindle_stop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "stop_spindle_08005238"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "turn_spindle_off_08005250",
            "code": "\nvoid turnSpindleOff_08005250(void)\n\n{\n  spindle_off();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "turn_spindle_off_08005250"
            },
            "calling": [
                "mc_reset",
                "spindle_run",
                "spindle_init"
            ],
            "called": [
                "spindle_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "control_spindle_0800525c",
            "code": "\nvoid controlSpindle_0800525c(byte inputValue)\n\n{\n  if ((int)(char)inputValue != (uint)DAT_20000e12) {\n    plan_synchronize();\n    if (inputValue == 0) {\n      spindle_stop();\n      DAT_20000e12 = inputValue;\n    }\n    else {\n      if ((char)inputValue < '\\x01') {\n        spindle_rev();\n      }\n      else {\n        spindle_fwd();\n      }\n      spindle_on();\n      DAT_20000e12 = inputValue;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "control_spindle_0800525c",
                "param_1": "inputValue"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "spindle_rev",
                "spindle_fwd",
                "spindle_stop",
                "spindle_on",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_flags_080052ac",
            "code": "\n\n\nvoid updateFlags_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_flags_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "step_pulse_isr",
                "st_init",
                "step_delay_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "set_flags_and_mask_080052dc",
            "code": "\n\n\nvoid setFlagsAndMask_080052dc(uint inputValue)\n\n{\n  _DAT_40021014 = inputValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "set_flags_and_mask_080052dc",
                "param_1": "inputValue"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_step_period_08005324",
            "code": "\nvoid calculateStepPeriod_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  set_step_period(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_step_period_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "st_reset",
                "st_cycle_reinitialize",
                "step_period_isr"
            ],
            "called": [
                "set_step_period"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_08005360",
            "code": "\nbool updateCounter_08005360(void)\n\n{\n  bool isExceededThreshold;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isExceededThreshold = 420000 < DAT_20000e2c;\n  if (isExceededThreshold) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isExceededThreshold;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_08005360",
                "bVar1": "isExceededThreshold"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_step_events_080053a0",
            "code": "\nvoid updateStepEvents_080053a0(void)\n\n{\n  int iVar1;\n  \n  dirn_wr(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)getCurrentBlock();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      goIdle();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        setStepEventsPerMinute(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iVar1 = iterateTrapezoidCycleCounter();\n        if (iVar1 != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            setStepEventsPerMinute(DAT_20000e30);\n          }\n          else {\n            goIdle();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iVar1 = iterateTrapezoidCycleCounter();\n        if (iVar1 != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          setStepEventsPerMinute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          setStepEventsPerMinute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iVar1 = iterateTrapezoidCycleCounter();\n        if (iVar1 != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          setStepEventsPerMinute(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      discardCurrentBlock();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_step_events_080053a0",
                "plan_get_current_block": "getCurrentBlock",
                "st_go_idle": "goIdle",
                "set_step_events_per_minute": "setStepEventsPerMinute",
                "iterate_trapezoid_cycle_counter": "iterateTrapezoidCycleCounter",
                "plan_discard_current_block": "discardCurrentBlock"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "st_go_idle",
                "plan_discard_current_block",
                "iterate_trapezoid_cycle_counter",
                "plan_get_current_block",
                "dirn_wr",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "execute_initialization_step_08005760",
            "code": "\nvoid execute_initialization_step_08005760(void)\n\n{\n  step_wr(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "execute_initialization_step_08005760"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_data_08005778",
            "code": "\nvoid initialize_data_08005778(void)\n\n{\n  step_wr(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_data_08005778"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_stepper_motor_08005790",
            "code": "\nvoid initializeStepperMotor_08005790(void)\n\n{\n  stepper_motor_enable();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setPulseDelay(0x69);\n    setPulseTime((DAT_20000ec9 + 5) * 0x15);\n    enableStepInterrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_stepper_motor_08005790",
                "set_step_pulse_delay": "setPulseDelay",
                "set_step_pulse_time": "setPulseTime",
                "step_isr_enable": "enableStepInterrupt"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "st_cycle_start"
            ],
            "called": [
                "step_isr_enable",
                "stepper_motor_enable",
                "set_step_pulse_delay",
                "set_step_pulse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "disable_stepper_motor_if_needed_080057e4",
            "code": "\nvoid disableStepperMotorIfNeeded_080057e4(void)\n\n{\n  disableStepISR();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    disableStepperMotor();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_if_needed_080057e4",
                "step_isr_disable": "disableStepISR",
                "stepper_motor_disable": "disableStepperMotor"
            },
            "calling": [
                "mc_reset",
                "limits_go_home",
                "st_init",
                "step_period_isr"
            ],
            "called": [
                "step_isr_disable",
                "stepper_motor_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initializeData_08005814(void)\n\n{\n  memset(&DAT_20000e14,0,0x24);\n  set_step_events_per_minute(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "memset",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_system_0800583c",
            "code": "\nvoid initializeSystem_0800583c(void)\n\n{\n  performWriteStep(DAT_20000ed4);\n  wakeUpStatus();\n  goIdleStatus();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_system_0800583c",
                "step_wr": "performWriteStep",
                "st_wake_up": "wakeUpStatus",
                "st_go_idle": "goIdleStatus"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "st_go_idle",
                "st_wake_up",
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "wake_up_if_needed_0800585c",
            "code": "\nvoid wake_up_if_needed_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    st_wake_up();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "wake_up_if_needed_0800585c"
            },
            "calling": [
                "mc_line",
                "protocol_execute_runtime",
                "mc_go_home"
            ],
            "called": [
                "st_wake_up"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid updateStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_cycle_080058a0",
            "code": "\nvoid initializeCycle_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    reinitializeCycle_080058a0(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    setStepEventsPerMinute(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_cycle_080058a0",
                "plan_cycle_reinitialize": "reinitializeCycle",
                "set_step_events_per_minute": "setStepEventsPerMinute"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "plan_cycle_reinitialize",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_special_character_08005900",
            "code": "\nundefined4 checkSpecialCharacter_08005900(byte character)\n\n{\n  if (character == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (character < 0x7f) {\n    if (character == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (character < 0x40) {\n      if (character == 0x18) {\n        resetFunction();\n        return 1;\n      }\n      if (character == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_special_character_08005900",
                "param_1": "character",
                "mc_reset": "resetFunction"
            },
            "calling": [
                "serial_read"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid executeSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_afl_call_08005984",
            "code": "\nundefined4 execute_afl_call_08005984(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = aflCall(1,input_param,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_afl_call_08005984",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n\nundefined4 initializeSystem_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  configureSystemTick(16000);\n  setPriorityGrouping(3);\n  initializeMsp();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "HAL_SYSTICK_Config": "configureSystemTick",
                "HAL_NVIC_SetPriorityGrouping": "setPriorityGrouping",
                "HAL_MspInit": "initializeMsp"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "deinitialize_hardware_080059f8",
            "code": "\n\n\nundefined4 deinitializeHardware_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  HAL_MspDeInit();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "deinitialize_hardware_080059f8"
            },
            "calling": [],
            "called": [
                "HAL_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "HAL_DeInit"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_global_variable_08005a84",
            "code": "\nundefined4 get_global_variable_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_global_variable_08005a84"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "SysTick_Handler",
                "get_current_usecs",
                "HAL_RCC_ClockConfig",
                "HAL_Delay"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "delay_function_08005a98",
            "code": "\nvoid delayFunction_08005a98(int delayTime)\n\n{\n  int startTime;\n  uint currentTime;\n  \n  startTime = HAL_GetTick();\n  do {\n    currentTime = HAL_GetTick();\n  } while (currentTime < (uint)(delayTime + startTime));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "delay_function_08005a98",
                "param_1": "delayTime",
                "iVar1": "startTime",
                "uVar2": "currentTime"
            },
            "calling": [
                "_delay_ms"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "update_memory_byte_08005bdc",
            "code": "\nvoid updateMemoryByte_08005bdc(byte input,uint value)\n\n{\n  if ((char)input < '\\0') {\n    *(char *)((input & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)input + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "update_memory_byte_08005bdc",
                "param_1": "input",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_update_memory_08005c30",
            "code": "\n\n\nbool checkAndUpdateMemory_08005c30(int inputValue)\n\n{\n  bool isWithinRange;\n  \n  isWithinRange = inputValue - 1U < 0x1000000;\n  if (isWithinRange) {\n    _DAT_e000e014 = inputValue + -1;\n    update_memory_byte_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isWithinRange;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_update_memory_08005c30",
                "param_1": "inputValue",
                "bVar1": "isWithinRange"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_and_modify_settings_08005cec",
            "code": "\n\n\nundefined4 checkAndModifySettings_08005cec(uint *settings)\n\n{\n  int currentTime;\n  uint tick;\n  \n  if ((*settings & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (settings[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      currentTime = getCurrentTick();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        tick = getCurrentTick();\n        if (currentTime + 5000U <= tick) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = concatenate13(DAT_40023800_3,concatenate12((char)settings[1],_DAT_40023800));\n      if (settings[1] == 1) {\n        currentTime = getCurrentTick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          tick = getCurrentTick();\n          if (currentTime + 5000U <= tick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        currentTime = getCurrentTick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          tick = getCurrentTick();\n          if (currentTime + 5000U <= tick) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*settings & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (settings[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (settings[3] == 0) {\n      _DAT_42470000 = 0;\n      currentTime = getCurrentTick();\n      while ((_DAT_40023800 & 2) != 0) {\n        tick = getCurrentTick();\n        if (currentTime + 100U <= tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      currentTime = getCurrentTick();\n      while ((_DAT_40023800 & 2) == 0) {\n        tick = getCurrentTick();\n        if (currentTime + 100U <= tick) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = settings[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*settings & 8) != 0) {\n    if (settings[5] == 0) {\n      _DAT_42470e80 = 0;\n      currentTime = getCurrentTick();\n      while ((_DAT_40023874 & 2) != 0) {\n        tick = getCurrentTick();\n        if (currentTime + 100U <= tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      currentTime = getCurrentTick();\n      while ((_DAT_40023874 & 2) == 0) {\n        tick = getCurrentTick();\n        if (currentTime + 100U <= tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*settings & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    currentTime = getCurrentTick();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      tick = getCurrentTick();\n      if (currentTime + 100U <= tick) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    currentTime = getCurrentTick();\n    while ((_DAT_40023870 & 2) != 0) {\n      tick = getCurrentTick();\n      if (currentTime + 5000U <= tick) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = concatenate31(DAT_40023870_1,(char)settings[2]);\n    if (settings[2] == 1) {\n      currentTime = getCurrentTick();\n      while ((_DAT_40023870 & 2) == 0) {\n        tick = getCurrentTick();\n        if (currentTime + 5000U <= tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      currentTime = getCurrentTick();\n      while ((_DAT_40023870 & 2) != 0) {\n        tick = getCurrentTick();\n        if (currentTime + 5000U <= tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (settings[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (settings[6] == 2) {\n      _DAT_42470060 = 0;\n      currentTime = getCurrentTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        tick = getCurrentTick();\n        if (currentTime + 100U <= tick) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           settings[0xb] << 0x18 |\n           settings[8] | settings[9] << 6 | ((settings[10] >> 1) - 1) * 0x10000 | settings[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      currentTime = getCurrentTick();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        tick = getCurrentTick();\n        if (currentTime + 100U <= tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      currentTime = getCurrentTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        tick = getCurrentTick();\n        if (currentTime + 100U <= tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_and_modify_settings_08005cec",
                "param_1": "settings",
                "iVar1": "currentTime",
                "uVar2": "tick",
                "HAL_GetTick": "getCurrentTick",
                "CONCAT13": "concatenate13",
                "CONCAT12": "concatenate12",
                "CONCAT31": "concatenate31"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "initialize_system_0800618c",
            "code": "\n\n\nundefined4 initializeSystem_0800618c(uint *configParams,uint numParams)\n\n{\n  int iVar1;\n  uint uVar2;\n  uint uVar3;\n  undefined8 uVar4;\n  \n  if ((_DAT_40023c00 & 0xf) < numParams) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numParams);\n    if (numParams != (numParams & 0xf)) {\n      return 1;\n    }\n    if ((*configParams & 1) != 0) {\n      if (configParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((configParams[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = configParams[1] | _DAT_40023808 & 0xfffffffc;\n      iVar1 = getCurrentTime();\n      uVar3 = iVar1 + 5000;\n      if (configParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          uVar2 = getCurrentTime();\n          if (uVar3 <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else if (configParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          uVar2 = getCurrentTime();\n          if (uVar3 <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          uVar2 = getCurrentTime();\n          if (uVar3 <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*configParams & 1) != 0) {\n      if (configParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (configParams[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = configParams[1] | _DAT_40023808 & 0xfffffffc;\n      iVar1 = getCurrentTime();\n      uVar3 = iVar1 + 5000;\n      if (configParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          uVar2 = getCurrentTime();\n          if (uVar3 <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else if (configParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          uVar2 = getCurrentTime();\n          if (uVar3 <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          uVar2 = getCurrentTime();\n          if (uVar3 <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numParams);\n    if (numParams != (numParams & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 2) != 0) {\n    _DAT_40023808 = configParams[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*configParams & 4) != 0) {\n    _DAT_40023808 = configParams[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*configParams & 8) != 0) {\n    _DAT_40023808 = configParams[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  uVar4 = getClockFrequency();\n  checkAndUpdateMemory((uint)uVar4 / 1000,(int)((ulonglong)uVar4 >> 0x20),(uint)uVar4 * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "initialize_system_0800618c",
                "param_1": "configParams",
                "param_2": "numParams",
                "param_1[1]": "configParams[1]",
                "param_1[2]": "configParams[2]",
                "param_1[3]": "configParams[3]",
                "param_1[4]": "configParams[4]",
                "HAL_GetTick": "getCurrentTime",
                "HAL_RCC_GetHCLKFreq": "getClockFrequency",
                "check_and_update_memory_08005c30": "checkAndUpdateMemory"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_08005c30",
                "HAL_RCC_GetHCLKFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "init_gpio_0800640c",
            "code": "\n\n\nvoid initGPIO_0800640c(int flag,uint paramA,uint paramB)\n\n{\n  undefined4 gpioInitVal;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    gpioInitVal = 0x100;\n    localVar1 = 2;\n    localVar3 = 3;\n    localVar2 = 0;\n    localVar4 = 0;\n    HAL_GPIO_Init(0x40020000,&gpioInitVal);\n    _DAT_40023808 = paramB | paramA | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    gpioInitVal = 0x200;\n    localVar1 = 2;\n    localVar3 = 3;\n    localVar2 = 0;\n    localVar4 = 0;\n    HAL_GPIO_Init(0x40020800,&gpioInitVal);\n    _DAT_40023808 = paramA | paramB << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "init_gpio_0800640c",
                "param_1": "flag",
                "param_2": "paramA",
                "param_3": "paramB",
                "local_1c": "gpioInitVal",
                "local_18": "localVar1",
                "local_14": "localVar2",
                "local_10": "localVar3",
                "local_c": "localVar4"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_speed_080064ec",
            "code": "\n\n\nuint calculateClockSpeed_080064ec(void)\n\n{\n  uint controlRegisterValue;\n  uint clockSpeed;\n  \n  controlRegisterValue = _DAT_40023808 & 0xc;\n  if (controlRegisterValue == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockSpeed = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockSpeed / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (controlRegisterValue < 9) {\n    if (controlRegisterValue == 0) {\n      return 16000000;\n    }\n    if (controlRegisterValue == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_speed_080064ec",
                "uVar1": "controlRegisterValue",
                "local_c": "clockSpeed"
            },
            "calling": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "get_sys_clock_frequency_08006628",
            "code": "\n\n\nuint getSysClockFrequency_08006628(void)\n\n{\n  uint sysClockFrequency;\n  \n  sysClockFrequency = HAL_RCC_GetSysClockFreq();\n  DAT_20000000 = sysClockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return sysClockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "get_sys_clock_frequency_08006628",
                "uVar1": "sysClockFrequency"
            },
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "get_hclk_frequency_08006680",
            "code": "\n\n\nuint getHCLKFrequency_08006680(void)\n\n{\n  uint hclkFrequency;\n  \n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  return hclkFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "get_hclk_frequency_08006680",
                "uVar1": "hclkFrequency"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_hclk_frequency_080066cc",
            "code": "\n\n\nuint calculateHCLKFrequency_080066cc(void)\n\n{\n  uint uVar1;\n  \n  uVar1 = getHCLKFrequency();\n  return uVar1 >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_hclk_frequency_080066cc",
                "HAL_RCC_GetHCLKFreq": "getHCLKFrequency"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_memory_config_08006950",
            "code": "\n\n\nvoid setMemoryConfig_08006950(uint configValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configValue & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_memory_config_08006950",
                "param_1": "configValue"
            },
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_bits_from_register_08006998",
            "code": "\n\n\nuint getBitsFromRegister_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_bits_from_register_08006998"
            },
            "calling": [
                "HAL_NVIC_GetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_memory_080069b4",
            "code": "\nvoid setBitInMemory_080069b4(byte byteToSet)\n\n{\n  *(int *)((convertedByte >> 5) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "byteToSet",
                "(uint)(int)(char)param_1": "convertedByte"
            },
            "calling": [
                "HAL_NVIC_EnableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_at_index_080069e4",
            "code": "\nvoid setBitAtIndex_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_at_index_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_DisableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_status_08006a18",
            "code": "\nbool check_bit_status_08006a18(byte input_byte)\n\n{\n  return (*(uint *)((((uint)(int)(char)input_byte >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (input_byte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_status_08006a18",
                "param_1": "input_byte"
            },
            "calling": [
                "HAL_NVIC_GetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_08006a58",
            "code": "\nvoid setBit_08006a58(byte byteValue)\n\n{\n  *(int *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_08006a58",
                "param_1": "byteValue"
            },
            "calling": [
                "HAL_NVIC_SetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_08006a8c",
            "code": "\nvoid setBit_08006a8c(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_08006a8c",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_08006ac0",
            "code": "\nbool checkBit_08006ac0(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "byteValue"
            },
            "calling": [
                "HAL_NVIC_GetActive"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "update_memory_08006b00",
            "code": "\nvoid updateMemory_08006b00(byte byteValue,uint uintValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    *(char *)((byteValue & 0xf) + 0xe000ed14) = (char)((uintValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((uintValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "update_memory_08006b00",
                "param_1": "byteValue",
                "param_2": "uintValue"
            },
            "calling": [
                "SysTick_Config",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extract_nibble_08006b54",
            "code": "\nbyte extractNibble_08006b54(byte inputByte)\n\n{\n  byte outputNibble;\n  \n  if ((char)inputByte < '\\0') {\n    outputNibble = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    outputNibble = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return outputNibble >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extract_nibble_08006b54",
                "param_1": "inputByte",
                "bVar1": "outputNibble"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "apply_bit_mask_08006ba0",
            "code": "\nuint applyBitMask_08006ba0(uint inputValue,uint bitMask,uint result)\n\n{\n  uint bitOffset;\n  \n  inputValue = inputValue & 7;\n  bitOffset = 7 - inputValue;\n  if (3 < bitOffset) {\n    bitOffset = 4;\n  }\n  if (inputValue + 4 < 7) {\n    inputValue = 0;\n  }\n  else {\n    inputValue = inputValue - 3;\n  }\n  return result & (1 << (inputValue & 0xff)) - 1U |\n         ((1 << (bitOffset & 0xff)) - 1U & bitMask) << (inputValue & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "apply_bit_mask_08006ba0",
                "param_1": "inputValue",
                "param_2": "bitMask",
                "param_3": "result",
                "uVar1": "bitOffset"
            },
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extractBits_08006c04(uint input,uint numBits,uint *output1,uint *output2)\n\n{\n  uint shiftAmount;\n  \n  numBits = numBits & 7;\n  shiftAmount = 7 - numBits;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (numBits + 4 < 7) {\n    numBits = 0;\n  }\n  else {\n    numBits = numBits - 3;\n  }\n  *output1 = (1 << (shiftAmount & 0xff)) - 1U & input >> (numBits & 0xff);\n  *output2 = (1 << (numBits & 0xff)) - 1U & input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "numBits",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "run_infinite_loop_08006c70",
            "code": "\nvoid runInfiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "run_infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "HAL_NVIC_SystemReset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_set_priority_08006c9c",
            "code": "\n\n\nbool checkAndSetPriority_08006c9c(int inputNumber)\n\n{\n  bool isInValidRange;\n  \n  isInValidRange = inputNumber - 1U < 0x1000000;\n  if (isInValidRange) {\n    _DAT_e000e014 = inputNumber + -1;\n    NVIC_SetPriority(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInValidRange;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_set_priority_08006c9c",
                "param_1": "inputNumber",
                "bVar1": "isInValidRange"
            },
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_priority_grouping_08006ce0",
            "code": "\nvoid setPriorityGrouping_08006ce0(undefined4 priorityGrouping)\n\n{\n  setPriorityGrouping_08006ce0(priorityGrouping);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_priority_grouping_08006ce0",
                "param_1": "priorityGrouping",
                "NVIC_SetPriorityGrouping": "setPriorityGrouping"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "set_priority_with_encoded_value_08006cf6",
            "code": "\nvoid setPriorityWithEncodedValue_08006cf6(char priority,undefined4 grouping,undefined4 subpriority)\n\n{\n  undefined4 priorityGroup;\n  \n  priorityGroup = getPriorityGroup();\n  priorityGroup = encodePriority(priorityGroup,grouping,subpriority);\n  setPriority((int)priority,priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "set_priority_with_encoded_value_08006cf6",
                "param_1": "priority",
                "param_2": "grouping",
                "param_3": "subpriority",
                "uVar1": "priorityGroup",
                "NVIC_GetPriorityGrouping": "getPriorityGroup",
                "NVIC_EncodePriority": "encodePriority",
                "NVIC_SetPriority": "setPriority"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [
                "NVIC_SetPriority",
                "NVIC_EncodePriority",
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_in_memory_08006d2e",
            "code": "\nvoid setBitInMemory_08006d2e(char value)\n\n{\n  setBitInMemory_08006d2e080069b4((int)value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "param_1": "value",
                "set_bit_in_memory_080069b4": "setBitInMemory080069b4"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "disable_interrupt_08006d4a",
            "code": "\nvoid disableInterrupt_08006d4a(char interruptNumber)\n\n{\n  NVIC_DisableIRQ((int)interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "disable_interrupt_08006d4a",
                "param_1": "interruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "reset_system_08006d66",
            "code": "\nvoid resetSystem_08006d66(void)\n\n{\n  reset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "reset_system_08006d66",
                "NVIC_SystemReset": "reset"
            },
            "calling": [],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "configure_sys_tick_08006d72",
            "code": "\nundefined4 configureSysTick_08006d72(undefined4 config)\n\n{\n  undefined4 result;\n  \n  result = SysTick_Config(config);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "configure_sys_tick_08006d72",
                "param_1": "config",
                "uVar1": "result"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "SysTick_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_priority_grouping_08006d8a",
            "code": "\nundefined4 getPriorityGrouping_08006d8a(void)\n\n{\n  undefined4 priorityGroup;\n  \n  priorityGroup = NVIC_GetPriorityGrouping();\n  return priorityGroup;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_priority_grouping_08006d8a",
                "uVar1": "priorityGroup"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "decode_priority_from_nvic_08006d98",
            "code": "\nvoid decodePriorityFromNVIC_08006d98(char inputChar,undefined4 outputParam1,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 priorityValue;\n  \n  priorityValue = NVIC_GetPriority((int)inputChar);\n  NVIC_DecodePriority(priorityValue,outputParam1,param_3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "decode_priority_from_nvic_08006d98",
                "param_1": "inputChar",
                "param_2": "outputParam1",
                "uVar1": "priorityValue"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriority",
                "NVIC_DecodePriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_pending_irq_08006dc4",
            "code": "\nvoid setPendingIRQ_08006dc4(char irqNumber)\n\n{\n  NVIC_SetPendingIRQ((int)irqNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_pending_irq_08006dc4",
                "param_1": "irqNumber"
            },
            "calling": [],
            "called": [
                "NVIC_SetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "get_pending_irq_08006de0",
            "code": "\nundefined4 getPendingIRQ_08006de0(char interruptNumber)\n\n{\n  undefined4 pendingIRQ;\n  \n  pendingIRQ = NVIC_GetPendingIRQ((int)interruptNumber);\n  return pendingIRQ;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "get_pending_irq_08006de0",
                "param_1": "interruptNumber",
                "uVar1": "pendingIRQ"
            },
            "calling": [],
            "called": [
                "NVIC_GetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "clear_pending_irq_08006dfe",
            "code": "\nvoid clearPendingIRQ_08006dfe(char irqNumber)\n\n{\n  NVIC_ClearPendingIRQ((int)irqNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "clear_pending_irq_08006dfe",
                "param_1": "irqNumber"
            },
            "calling": [],
            "called": [
                "NVIC_ClearPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "get_active_interrupt_08006e1a",
            "code": "\nundefined4 getActiveInterrupt_08006e1a(char interruptNumber)\n\n{\n  undefined4 activeStatus;\n  \n  activeStatus = NVIC_GetActive((int)interruptNumber);\n  return activeStatus;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_08006e1a",
                "param_1": "interruptNumber",
                "uVar1": "activeStatus"
            },
            "calling": [],
            "called": [
                "NVIC_GetActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_flags_08006e88",
            "code": "\n\n\nvoid updateFlags_08006e88(uint *outputData,uint *inputData)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  int blockIndex;\n  uint bitIndex;\n  \n  for (bitIndex = 0; bitIndex < 0x10; bitIndex = bitIndex + 1) {\n    bitMask = 1 << (bitIndex & 0xff);\n    bitCheck = *inputData & bitMask;\n    if (bitCheck == bitMask) {\n      if ((inputData[1] == 2) || (inputData[1] == 0x12)) {\n        bitMask = inputData[4];\n        outputData[(bitIndex >> 3) + 8] = outputData[(bitIndex >> 3) + 8] & ~(0xf << ((bitIndex & 7) << 2));\n        outputData[(bitIndex >> 3) + 8] = outputData[(bitIndex >> 3) + 8] | bitMask << ((bitIndex & 7) << 2);\n      }\n      *outputData = *outputData & ~(3 << ((bitIndex & 0x7f) << 1));\n      *outputData = *outputData | (inputData[1] & 3) << ((bitIndex & 0x7f) << 1);\n      if ((((inputData[1] == 1) || (inputData[1] == 2)) || (inputData[1] == 0x11)) || (inputData[1] == 0x12)\n         ) {\n        outputData[2] = outputData[2] & ~(3 << ((bitIndex & 0x7f) << 1));\n        outputData[2] = outputData[2] | inputData[3] << ((bitIndex & 0x7f) << 1);\n        outputData[1] = outputData[1] & ~(1 << (bitIndex & 0xff));\n        outputData[1] = outputData[1] | (inputData[1] >> 4 & 1) << (bitIndex & 0xff);\n      }\n      outputData[3] = outputData[3] & ~(3 << ((bitIndex & 0x7f) << 1));\n      outputData[3] = outputData[3] | inputData[2] << ((bitIndex & 0x7f) << 1);\n      if ((inputData[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((bitIndex & 3) << 2)) & *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800);\n        if (outputData == (uint *)0x40020000) {\n          blockIndex = 0;\n        }\n        else if (outputData == (uint *)0x40020400) {\n          blockIndex = 1;\n        }\n        else if (outputData == (uint *)0x40020800) {\n          blockIndex = 2;\n        }\n        else if (outputData == (uint *)0x40020c00) {\n          blockIndex = 3;\n        }\n        else if (outputData == (uint *)0x40021000) {\n          blockIndex = 4;\n        }\n        else if (outputData == (uint *)0x40021400) {\n          blockIndex = 5;\n        }\n        else if (outputData == (uint *)0x40021800) {\n          blockIndex = 6;\n        }\n        else if (outputData == (uint *)0x40021c00) {\n          blockIndex = 7;\n        }\n        else if (outputData == (uint *)0x40022000) {\n          blockIndex = 8;\n        }\n        else if (outputData == (uint *)0x40022400) {\n          blockIndex = 9;\n        }\n        else {\n          blockIndex = 10;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800) =\n             blockIndex << ((bitIndex & 3) << 2) | *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitCheck & _DAT_40013c00;\n        _DAT_40013c04 = ~bitCheck & _DAT_40013c04;\n        if ((inputData[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitCheck | _DAT_40013c00;\n        }\n        if ((inputData[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitCheck | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitCheck & _DAT_40013c08;\n        _DAT_40013c0c = ~bitCheck & _DAT_40013c0c;\n        if ((inputData[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitCheck | _DAT_40013c08;\n        }\n        if ((inputData[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitCheck | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_flags_08006e88",
                "param_1": "outputData",
                "param_2": "inputData",
                "uVar1": "bitMask",
                "uVar2": "bitCheck",
                "iVar3": "blockIndex",
                "local_c": "bitIndex"
            },
            "calling": [
                "HAL_RCC_MCOConfig",
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "set_param_0800733e",
            "code": "\nvoid setParam_0800733e(int baseAddress,undefined2 value,char isSecondParam)\n\n{\n  if (isSecondParam == '\\0') {\n    *(undefined2 *)(baseAddress + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(baseAddress + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "set_param_0800733e",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "isSecondParam"
            },
            "calling": [
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "handle_interrupt_0800738e",
            "code": "\n\n\nvoid handleInterrupt_0800738e(ushort interruptFlags)\n\n{\n  if ((interruptFlags & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)interruptFlags;\n    gpioInterruptCallback(interruptFlags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "handle_interrupt_0800738e",
                "param_1": "interruptFlags",
                "HAL_GPIO_EXTI_Callback": "gpioInterruptCallback"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_value_080073d4",
            "code": "\nvoid setBitValue_080073d4(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x4002001a) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_value_080073d4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_08007402",
            "code": "\nvoid setBit_08007402(uint input)\n\n{\n  *(short *)(((int)input >> 4) * 0x400 + 0x40020018) = (short)(1 << (input & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_08007402",
                "param_1": "input"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "run_infinite_loop_08007430",
            "code": "\nvoid runInfiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "run_infinite_loop_08007430"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_hardware_08007436",
            "code": "\n\n\nvoid initializeHardware_08007436(void)\n\n{\n  int iVar1;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  undefined4 param9;\n  undefined4 param10;\n  undefined4 param11;\n  undefined4 param12;\n  undefined4 param13;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  param1 = 1;\n  param2 = 1;\n  param3 = 2;\n  param4 = 0x400000;\n  param5 = 8;\n  param6 = 0x150;\n  param7 = 2;\n  param8 = 7;\n  iVar1 = configureOscillator(&param1);\n  if (iVar1 != 0) {\n    handleError();\n  }\n  param9 = 0xf;\n  param10 = 2;\n  param11 = 0;\n  param12 = 0x1400;\n  param13 = 0x1000;\n  iVar1 = configureClock(&param9,5);\n  if (iVar1 != 0) {\n    handleError();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_hardware_08007436",
                "local_4c": "param1",
                "local_48": "param2",
                "local_34": "param3",
                "local_30": "param4",
                "local_2c": "param5",
                "local_28": "param6",
                "local_24": "param7",
                "local_20": "param8",
                "local_1c": "param9",
                "local_18": "param10",
                "local_14": "param11",
                "local_10": "param12",
                "local_c": "param13",
                "HAL_RCC_OscConfig": "configureOscillator",
                "HAL_RCC_ClockConfig": "configureClock",
                "Error_Handler": "handleError"
            },
            "calling": [
                "main"
            ],
            "called": [
                "Error_Handler",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "handle_interrupts_080074c8",
            "code": "\nvoid handle_interrupts_080074c8(uint interrupt_flags)\n\n{\n  if ((interrupt_flags & 1) != 0) {\n    set_gpio(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((interrupt_flags & 0x1e) != 0)) {\n    handle_limits_interrupt();\n  }\n  if ((DAT_20000e50 != 0) && ((interrupt_flags & 0x80) != 0)) {\n    handle_buttons_interrupt(interrupt_flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "handle_interrupts_080074c8",
                "param_1": "interrupt_flags",
                "gpio_set": "set_gpio",
                "limits_isr": "handle_limits_interrupt",
                "buttons_isr": "handle_buttons_interrupt"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_set",
                "limits_isr",
                "buttons_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "clear_gpio_bit_if_odd_08007520",
            "code": "\nvoid clearGpioBitIfOdd_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    clearGpioPin(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "clear_gpio_bit_if_odd_08007520",
                "param_1": "inputValue",
                "gpio_clr": "clearGpioPin"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_clr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_system_08007540",
            "code": "\nundefined4 initializeSystem_08007540(void)\n\n{\n  initializeHardware();\n  configureSystemClock();\n  initializeGPIO();\n  initializeTimers();\n  initializeDebounce();\n  initializeUSART();\n  startForkServer(0);\n  executeMainProgram();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_system_08007540",
                "HAL_Init": "initializeHardware",
                "SystemClock_Config": "configureSystemClock",
                "gpio_init": "initializeGPIO",
                "timers_init": "initializeTimers",
                "debounce_init": "initializeDebounce",
                "usart_init": "initializeUSART",
                "startForkserver": "startForkServer",
                "grbl_main": "executeMainProgram"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "grbl_main",
                "debounce_init",
                "HAL_Init",
                "timers_init",
                "startForkserver",
                "gpio_init",
                "SystemClock_Config",
                "usart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_memory_0800756c",
            "code": "\n\n\nvoid initializeMemory_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_memory_0800756c"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_080076c8",
            "code": "\nvoid updateBit_080076c8(uint input)\n\n{\n  *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_080076c8",
                "param_1": "input"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "update_gpio_state_08007756",
            "code": "\nvoid updateGPIOState_08007756(void)\n\n{\n  uint tickCount;\n  \n  tickCount = HAL_GetTick();\n  if ((tickCount & 0x1ff) == 0) {\n    toggleGPIO(0x3c);\n  }\n  if ((tickCount & 0xf) == 0) {\n    handleDebounce();\n  }\n  incrementTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "update_gpio_state_08007756",
                "uVar1": "tickCount",
                "gpio_toggle": "toggleGPIO",
                "debounce_isr": "handleDebounce",
                "HAL_IncTick": "incrementTick"
            },
            "calling": [],
            "called": [
                "debounce_isr",
                "gpio_toggle",
                "HAL_IncTick",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_gpio_pins_0800778c",
            "code": "\n\n\nvoid initializeGPIOPins_0800778c(void)\n\n{\n  int offset;\n  int pinConfig;\n  undefined4 reg1;\n  undefined4 reg2;\n  undefined4 reg3;\n  undefined4 reg4;\n  uint *pinAddress;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    offset = counter * 0x18;\n    pinAddress = (uint *)(&DAT_0800bcbc + offset);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*pinAddress >> 4 & 0xff);\n    pinConfig = 1 << (*pinAddress & 0xf);\n    reg1 = *(undefined4 *)(&DAT_0800bcc0 + offset);\n    reg2 = *(undefined4 *)(&DAT_0800bcc4 + offset);\n    reg3 = *(undefined4 *)(&DAT_0800bcc8 + offset);\n    reg4 = *(undefined4 *)(&DAT_0800bccc + offset);\n    HAL_GPIO_Init(((*pinAddress >> 4) + 0x100080) * 0x400,&pinConfig);\n    if (-1 < (int)pinAddress[5]) {\n      HAL_GPIO_WritePin(((*pinAddress >> 4) + 0x100080) * 0x400,1 << (*pinAddress & 0xf) & 0xffff,\n                        pinAddress[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_gpio_pins_0800778c",
                "local_24": "pinConfig",
                "local_20": "reg1",
                "local_1c": "reg2",
                "local_18": "reg3",
                "local_14": "reg4",
                "local_10": "pinAddress",
                "local_c": "counter",
                "iVar1": "offset"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_GPIO_WritePin",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "retrieve_bit_at_index_08007854",
            "code": "\nuint retrieveBitAtIndex_08007854(uint index)\n\n{\n  return *(uint *)(((int)index >> 4) * 0x400 + 0x40020010) >> (index & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "retrieve_bit_at_index_08007854",
                "param_1": "index"
            },
            "calling": [
                "debounce_input"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "read_gpio_values_08007884",
            "code": "\nuint read_gpio_values_08007884(void)\n\n{\n  int port0_value;\n  int port1_value;\n  int port2_value;\n  int port3_value;\n  int port15_value;\n  uint port0_bit;\n  \n  port0_value = read_gpio(0x36);\n  port1_value = read_gpio(0x37);\n  port2_value = read_gpio(0x38);\n  port3_value = read_gpio(0x39);\n  port15_value = read_gpio(0xf);\n  port0_bit = read_gpio(0);\n  return port0_bit | port0_value << 4 | port1_value << 3 | port2_value << 2 | port3_value << 1 | port15_value << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "read_gpio_values_08007884",
                "iVar1": "port0_value",
                "iVar2": "port1_value",
                "iVar3": "port2_value",
                "iVar4": "port3_value",
                "iVar5": "port15_value",
                "uVar6": "port0_bit",
                "gpio_rd": "read_gpio"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_c_080078f4",
            "code": "\nuint calculate_c_080078f4(void)\n\n{\n  int index;\n  uint result;\n  \n  result = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    result = *(uint *)(&DAT_20000e54 + index * 4) | result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_c_080078f4",
                "local_10": "index",
                "local_c": "result"
            },
            "calling": [
                "debounce_isr",
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "handle_input_08007930",
            "code": "\nvoid handleInput_08007930(void)\n\n{\n  int currentIndex;\n  uint previousInput;\n  undefined4 debouncedInput;\n  uint readInput;\n  uint changedBits;\n  \n  currentIndex = DAT_20000e68;\n  previousInput = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    debouncedInput = debounce_input();\n    *(undefined4 *)(&DAT_20000e54 + currentIndex * 4) = debouncedInput;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    readInput = debounce_rd();\n    previousInput = DAT_20000e64;\n    if (readInput != DAT_20000e64) {\n      changedBits = ~readInput & DAT_20000e64;\n      if ((~DAT_20000e64 & readInput) != 0) {\n        handle_interrupts_080074c8(~DAT_20000e64 & readInput);\n      }\n      previousInput = readInput;\n      if (changedBits != 0) {\n        clear_gpio_bit_if_odd_08007520(changedBits);\n      }\n    }\n  }\n  DAT_20000e64 = previousInput;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "handle_input_08007930",
                "iVar1": "currentIndex",
                "uVar2": "previousInput",
                "uVar3": "debouncedInput",
                "uVar4": "readInput",
                "uVar5": "changedBits"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "FUN_080074c8",
                "debounce_rd",
                "FUN_08007520",
                "debounce_input"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_data_080079c0",
            "code": "\nvoid initializeData_080079c0(void)\n\n{\n  memset(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0"
            },
            "calling": [
                "main"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_080079e0",
            "code": "\nvoid setBit_080079e0(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_080079e0",
                "param_1": "inputByte"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flag_08007a10",
            "code": "\n\n\nvoid updateFlag_08007a10(undefined *input)\n\n{\n  if (input == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (input == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (input == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flag_08007a10",
                "param_1": "input"
            },
            "calling": [
                "g540_timer_init",
                "step_timer_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "set_priority_and_enable_irq_08007a70",
            "code": "\nvoid setPriorityAndEnableIRQ_08007a70(undefined *inputPointer,undefined4 priorityLevel,undefined4 subpriorityLevel)\n\n{\n  undefined interruptNumber;\n  \n  if (inputPointer == (undefined *)0x40000000) {\n    interruptNumber = 0x1c;\n  }\n  else if (inputPointer == (undefined *)0x40000400) {\n    interruptNumber = 0x1d;\n  }\n  else {\n    if (inputPointer != &DAT_40000800) {\n      return;\n    }\n    interruptNumber = 0x1e;\n  }\n  HAL_NVIC_SetPriority(interruptNumber,priorityLevel,subpriorityLevel);\n  NVIC_EnableIRQ(interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "set_priority_and_enable_irq_08007a70",
                "param_1": "inputPointer",
                "param_2": "priorityLevel",
                "param_3": "subpriorityLevel",
                "local_c": "interruptNumber"
            },
            "calling": [
                "step_timer_init"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_timer_08007ad0",
            "code": "\n\n\nvoid initialize_timer_08007ad0(void)\n\n{\n  enable_timer_clock(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  enable_timer_interrupt(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_timer_08007ad0",
                "enable_tim_clock": "enable_timer_clock",
                "enable_tim_interrupt": "enable_timer_interrupt"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_interrupt",
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_based_on_values_08007b70",
            "code": "\n\n\nvoid setFlagsBasedOnValues_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_based_on_values_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_bits_08007bc2",
            "code": "\n\n\nvoid clearBits_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_bits_08007bc2"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_param_and_limit_08007bf0",
            "code": "\n\n\nvoid update_param_and_limit_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_param_and_limit_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "set_step_events_per_minute"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "initialize_data_08007c40",
            "code": "\n\n\nvoid initializeData_08007c40(undefined4 data)\n\n{\n  _DAT_40000034 = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "initialize_data_08007c40",
                "param_1": "data"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_global_value_08007c5e",
            "code": "\n\n\nvoid setGlobalValue_08007c5e(undefined4 newValue)\n\n{\n  _DAT_40000038 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_global_value_08007c5e",
                "param_1": "newValue"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "update_interrupt_status_08007c7c",
            "code": "\n\n\nvoid updateInterruptStatus_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    handleStepDelayInterrupt();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    handleStepPulseInterrupt();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    handleStepPeriodInterrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "update_interrupt_status_08007c7c",
                "step_delay_isr": "handleStepDelayInterrupt",
                "step_pulse_isr": "handleStepPulseInterrupt",
                "step_period_isr": "handleStepPeriodInterrupt"
            },
            "calling": [],
            "called": [
                "step_pulse_isr",
                "step_period_isr",
                "step_delay_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_tim_configuration_08007d08",
            "code": "\n\n\nvoid initialize_tim_configuration_08007d08(void)\n\n{\n  enable_tim_clock(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_tim_configuration_08007d08"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_08007da8",
            "code": "\n\n\nvoid set_flags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "calling": [
                "timers_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_timers_08007e08",
            "code": "\nvoid initialize_timers_08007e08(void)\n\n{\n  initialize_step_timer();\n  initialize_g540_timer();\n  start_g540_timer();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_timers_08007e08",
                "step_timer_init": "initialize_step_timer",
                "g540_timer_init": "initialize_g540_timer",
                "g540_timer_start": "start_g540_timer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "g540_timer_init",
                "g540_timer_start",
                "step_timer_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_flag_08007e1c",
            "code": "\n\n\nvoid waitForFlag_08007e1c(byte inputByte)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)inputByte;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_08007e1c",
                "param_1": "inputByte"
            },
            "calling": [
                "__io_putchar",
                "serial_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_bit_flag_08007e58",
            "code": "\n\n\nbool check_bit_flag_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_bit_flag_08007e58"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lowest_byte_08007e84",
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "set_memory_flags_08007ea4",
            "code": "\n\n\nvoid setMemoryFlags_08007ea4(undefined *address)\n\n{\n  if (address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "set_memory_flags_08007ea4",
                "param_1": "address"
            },
            "calling": [
                "usart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_frequency_08007f54",
            "code": "\nvoid calculateClockFrequency_08007f54(int baseAddress,int divisor)\n\n{\n  ulonglong calculatedFreq;\n  int freq1;\n  int freq2;\n  undefined8 pclkFreq;\n  \n  if ((*(uint *)(baseAddress + 0xc) & 0x8000) == 0) {\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      pclkFreq = getPCLK1Frequency();\n      calculatedFreq = (ulonglong)(uint)((int)pclkFreq * 0x19) / (ulonglong)(uint)(divisor << 2);\n      freq1 = getPCLK1Frequency\n                        ((int)pclkFreq,(int)((ulonglong)pclkFreq >> 0x20),(int)(calculatedFreq * 0x51eb851f));\n      freq2 = getPCLK1Frequency();\n      *(uint *)(baseAddress + 8) =\n           (int)(calculatedFreq / 100) << 4 |\n           (((uint)(freq1 * 0x19) / (uint)(divisor << 2) +\n            (int)(((ulonglong)(uint)(freq2 * 0x19) / (ulonglong)(uint)(divisor << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    pclkFreq = getPCLK2Frequency();\n    calculatedFreq = (ulonglong)(uint)((int)pclkFreq * 0x19) / (ulonglong)(uint)(divisor << 2);\n    freq1 = getPCLK2Frequency\n                      ((int)pclkFreq,(int)((ulonglong)pclkFreq >> 0x20),(int)(calculatedFreq * 0x51eb851f));\n    freq2 = getPCLK2Frequency();\n    *(uint *)(baseAddress + 8) =\n         (int)(calculatedFreq / 100) << 4 |\n         (((uint)(freq1 * 0x19) / (uint)(divisor << 2) +\n          (int)(((ulonglong)(uint)(freq2 * 0x19) / (ulonglong)(uint)(divisor << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      pclkFreq = getPCLK1Frequency();\n      calculatedFreq = (ulonglong)(uint)((int)pclkFreq * 0x19) / (ulonglong)(uint)(divisor << 1);\n      freq1 = getPCLK1Frequency\n                        ((int)pclkFreq,(int)((ulonglong)pclkFreq >> 0x20),(int)(calculatedFreq * 0x51eb851f));\n      freq2 = getPCLK1Frequency();\n      *(uint *)(baseAddress + 8) =\n           (int)(calculatedFreq / 100) << 4 |\n           (((uint)(freq1 * 0x19) / (uint)(divisor << 1) +\n            (int)(((ulonglong)(uint)(freq2 * 0x19) / (ulonglong)(uint)(divisor << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    pclkFreq = getPCLK2Frequency();\n    calculatedFreq = (ulonglong)(uint)((int)pclkFreq * 0x19) / (ulonglong)(uint)(divisor << 1);\n    freq1 = getPCLK2Frequency\n                      ((int)pclkFreq,(int)((ulonglong)pclkFreq >> 0x20),(int)(calculatedFreq * 0x51eb851f));\n    freq2 = getPCLK2Frequency();\n    *(uint *)(baseAddress + 8) =\n         (int)(calculatedFreq / 100) << 4 |\n         (((uint)(freq1 * 0x19) / (uint)(divisor << 1) +\n          (int)(((ulonglong)(uint)(freq2 * 0x19) / (ulonglong)(uint)(divisor << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_frequency_08007f54",
                "param_1": "baseAddress",
                "param_2": "divisor",
                "uVar1": "calculatedFreq",
                "iVar2": "freq1",
                "iVar3": "freq2",
                "uVar4": "pclkFreq",
                "HAL_RCC_GetPCLK1Freq": "getPCLK1Frequency",
                "HAL_RCC_GetPCLK2Freq": "getPCLK2Frequency"
            },
            "calling": [
                "usart_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_usart_08008190",
            "code": "\n\n\nvoid initializeUSART_08008190(void)\n\n{\n  enableClock(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  setBaudRate(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_usart_08008190",
                "enable_usart_clock": "enableClock",
                "set_baud_rate": "setBaudRate"
            },
            "calling": [
                "main"
            ],
            "called": [
                "enable_usart_clock",
                "set_baud_rate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "print_character_08008250",
            "code": "\nvoid print_character_08008250(undefined character)\n\n{\n  output_to_serial_port(character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "print_character_08008250",
                "param_1": "character",
                "usart_putc": "output_to_serial_port"
            },
            "calling": [
                "print_uint32_base10",
                "printPgmString",
                "printString",
                "print_base2",
                "printInteger",
                "printFloat"
            ],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "print_character_0800826a",
            "code": "\nundefined4 print_character_0800826a(undefined character)\n\n{\n  send_character(character);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "print_character_0800826a",
                "param_1": "character",
                "usart_putc": "send_character"
            },
            "calling": [],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "read_serial_data_08008286",
            "code": "\nundefined read_serial_data_08008286(void)\n\n{\n  undefined received_character;\n  int data_available;\n  \n  data_available = check_data_available();\n  if (data_available != 0) {\n    received_character = get_received_character();\n    data_available = process_received_data(received_character);\n    if (data_available == 0) {\n      return received_character;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "read_serial_data_08008286",
                "uVar1": "received_character",
                "iVar2": "data_available",
                "usart_tstc": "check_data_available",
                "usart_getc": "get_received_character",
                "serial_rx_hook": "process_received_data"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "usart_tstc",
                "serial_rx_hook",
                "usart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_result_080082d0",
            "code": "\nulonglong calculate_result_080082d0(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_1;\n  byte temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  uint temp_9;\n  uint temp_10;\n  uint temp_11;\n  uint temp_12;\n  bool temp_13;\n  bool temp_14;\n  bool temp_15;\n  \n  temp_6 = input_4 ^ 0x80000000;\n  temp_9 = input_2 << 1;\n  input_4 = input_4 << 1;\n  temp_13 = ((input_2 ^ temp_6) & 0x7fffffff) == 0;\n  temp_14 = temp_13 && input_1 == input_3;\n  if (!temp_13 || input_1 != input_3) {\n    temp_14 = (temp_9 | input_1) == 0;\n  }\n  if (!temp_14) {\n    temp_14 = (input_4 | input_3) == 0;\n  }\n  temp_8 = (int)temp_9 >> 0x15;\n  if (!temp_14) {\n    temp_14 = temp_8 == -1;\n  }\n  temp_1 = (int)input_4 >> 0x15;\n  if (!temp_14) {\n    temp_14 = temp_1 == -1;\n  }\n  if (temp_14) {\n    if (temp_8 == -1 || temp_1 == -1) {\n      temp_9 = temp_6;\n      temp_11 = input_3;\n      if (temp_8 == -1) {\n        temp_9 = input_2;\n        temp_11 = input_1;\n      }\n      if (temp_8 != -1 || temp_1 != -1) {\n        input_3 = temp_11;\n        temp_6 = temp_9;\n      }\n      temp_14 = (temp_11 | temp_9 << 0xc) == 0;\n      if (temp_14) {\n        temp_14 = (input_3 | temp_6 << 0xc) == 0;\n      }\n      if (temp_14) {\n        temp_14 = temp_9 == temp_6;\n      }\n      if (!temp_14) {\n        temp_9 = temp_9 | 0x80000;\n      }\n      return CONCAT44(temp_9,temp_11);\n    }\n    if (((input_2 ^ temp_6) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((temp_9 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_6;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_6) {\n      return 0;\n    }\n    if (temp_9 >> 0x15 == 0) {\n      temp_14 = (input_1 & 0x80000000) != 0;\n      temp_6 = input_2 * 2 + (uint)temp_14;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)temp_14)) {\n        temp_6 = temp_6 | 0x80000000;\n      }\n      return CONCAT44(temp_6,input_1 << 1);\n    }\n    if (temp_9 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  temp_9 = temp_9 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  temp_11 = input_4 - temp_9;\n  temp_14 = temp_11 != 0;\n  if (input_4 < temp_9) {\n    temp_11 = -temp_11;\n  }\n  temp_10 = input_1;\n  temp_7 = input_2;\n  if (temp_14 && temp_9 <= input_4) {\n    temp_9 = temp_9 + temp_11;\n    temp_10 = input_3;\n    temp_7 = temp_6;\n    input_3 = input_1;\n    temp_6 = input_2;\n  }\n  if (0x36 < temp_11) {\n    return CONCAT44(temp_7,temp_10);\n  }\n  temp_4 = temp_7 & 0xfffff | 0x100000;\n  if ((temp_7 & 0x80000000) != 0) {\n    temp_14 = temp_10 != 0;\n    temp_10 = -temp_10;\n    temp_4 = -temp_4 - (uint)temp_14;\n  }\n  temp_7 = temp_6 & 0xfffff | 0x100000;\n  if ((temp_6 & 0x80000000) != 0) {\n    temp_14 = input_3 != 0;\n    input_3 = -input_3;\n    temp_7 = -temp_7 - (uint)temp_14;\n  }\n  if (temp_9 == temp_11) {\n    temp_7 = temp_7 ^ 0x100000;\n    if (temp_9 == 0) {\n      temp_4 = temp_4 ^ 0x100000;\n      temp_9 = 1;\n    }\n    else {\n      temp_11 = temp_11 - 1;\n    }\n  }\n  temp_6 = -temp_11 + 0x20;\n  if ((int)temp_11 < 0x21) {\n    temp_12 = input_3 << (temp_6 & 0xff);\n    input_3 = input_3 >> (temp_11 & 0xff);\n    temp_3 = temp_10 + input_3;\n    temp_5 = temp_7 << (temp_6 & 0xff);\n    temp_6 = temp_3 + temp_5;\n    temp_4 = temp_4 + CARRY4(temp_10,input_3) + ((int)temp_7 >> (temp_11 & 0xff)) +\n            (uint)CARRY4(temp_3,temp_5);\n  }\n  else {\n    temp_12 = temp_7 << (-temp_11 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_12 = temp_12 | 2;\n    }\n    temp_7 = (int)temp_7 >> (temp_11 - 0x20 & 0xff);\n    temp_6 = temp_10 + temp_7;\n    temp_4 = temp_4 + ((int)temp_7 >> 0x1f) + (uint)CARRY4(temp_10,temp_7);\n  }\n  input_2 = temp_4 & 0x80000000;\n  temp_11 = temp_4;\n  if ((int)temp_4 < 0) {\n    temp_14 = temp_12 == 0;\n    temp_12 = -temp_12;\n    temp_11 = -temp_6;\n    temp_6 = -(uint)!temp_14 - temp_6;\n    temp_11 = -(uint)(temp_14 <= temp_11) - temp_4;\n  }\n  if (0xfffff < temp_11) {\n    temp_10 = temp_9 - 1;\n    if (0x1fffff < temp_11) {\n      temp_10 = temp_11 & 1;\n      temp_11 = temp_11 >> 1;\n      temp_2 = (byte)temp_6;\n      temp_6 = (uint)(temp_10 != 0) << 0x1f | temp_6 >> 1;\n      temp_12 = (uint)(temp_2 & 1) << 0x1f | temp_12 >> 1;\n      temp_10 = temp_9;\n      if (0xffbfffff < temp_9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    temp_14 = 0x7fffffff < temp_12;\n    if (temp_12 == 0x80000000) {\n      temp_14 = (temp_6 & 1) != 0;\n    }\n    return CONCAT44(temp_11 + temp_10 * 0x100000 + (uint)CARRY4(temp_6,(uint)temp_14) | input_2,\n                    temp_6 + temp_14);\n  }\n  temp_13 = (temp_12 & 0x80000000) != 0;\n  temp_12 = temp_12 << 1;\n  temp_10 = temp_6 * 2;\n  temp_14 = CARRY4(temp_6,temp_6);\n  temp_6 = temp_6 * 2 + (uint)temp_13;\n  temp_11 = temp_11 * 2 + (uint)(temp_14 || CARRY4(temp_10,(uint)temp_13));\n  temp_10 = temp_9 - 2;\n  if (temp_9 - 1 != 0 && 0xfffff < temp_11) goto LAB_080083e0;\n  temp_7 = temp_6;\n  temp_9 = temp_11;\n  if (temp_11 == 0) {\n    temp_7 = 0;\n    temp_9 = temp_6;\n  }\n  temp_8 = LZCOUNT(temp_9);\n  if (temp_11 == 0) {\n    temp_8 = temp_8 + 0x20;\n  }\n  temp_11 = temp_8 - 0xb;\n  temp_15 = SBORROW4(temp_11,0x20);\n  temp_6 = temp_8 - 0x2b;\n  temp_14 = (int)temp_6 < 0;\n  temp_13 = temp_6 == 0;\n  if ((int)temp_11 < 0x20) {\n    temp_15 = SCARRY4(temp_6,0xc);\n    temp_8 = temp_8 + -0x1f;\n    temp_14 = temp_8 < 0;\n    temp_13 = temp_8 == 0;\n    temp_6 = temp_11;\n    if (!temp_13 && temp_14 == temp_15) {\n      temp_7 = temp_9 << (temp_11 & 0xff);\n      temp_9 = temp_9 >> (0xcU - temp_8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (temp_13 || temp_14 != temp_15) {\n    temp_12 = 0x20 - temp_6;\n  }\n  temp_9 = temp_9 << (temp_6 & 0xff);\n  if (temp_13 || temp_14 != temp_15) {\n    temp_9 = temp_9 | temp_7 >> (temp_12 & 0xff);\n  }\n  if (temp_13 || temp_14 != temp_15) {\n    temp_7 = temp_7 << (temp_6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp_11 <= (int)temp_10) {\n    return CONCAT44(temp_9 + (temp_10 - temp_11) * 0x100000 | input_2,temp_7);\n  }\n  temp_6 = ~(temp_10 - temp_11);\n  if ((int)temp_6 < 0x1f) {\n    temp_8 = temp_6 - 0x13;\n    if (temp_8 != 0 && temp_8 < 0 == SCARRY4(temp_6 - 0x1f,0xc)) {\n      return CONCAT44(temp_4,temp_7 >> (0x20 - (0xcU - temp_8) & 0xff) | temp_9 << (0xcU - temp_8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_6 = temp_6 + 1;\n    return CONCAT44(input_2 | temp_9 >> (temp_6 & 0xff),\n                    temp_7 >> (temp_6 & 0xff) | temp_9 << (0x20 - temp_6 & 0xff));\n  }\n  return CONCAT44(temp_4,temp_9 >> (temp_6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_result_080082d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_1",
                "bVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "uVar10": "temp_10",
                "uVar11": "temp_11",
                "uVar12": "temp_12",
                "bVar13": "temp_13",
                "bVar14": "temp_14",
                "bVar15": "temp_15"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "sin",
                "__ieee754_sqrt",
                "atan",
                "__kernel_rem_pio2",
                "plan_buffer_line",
                "report_realtime_status",
                "__kernel_sin",
                "cos",
                "__kernel_cos",
                "__ieee754_hypot",
                "__ieee754_atan2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_sum_and_shift_080082d4",
            "code": "\nulonglong calculateSumAndShift_080082d4(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int shift1;\n  byte carry;\n  uint sum1;\n  uint shiftedSum;\n  uint newValue1;\n  int shift2;\n  uint shift2;\n  uint newValue2;\n  uint newValue3;\n  uint newValue4;\n  uint carryRotate;\n  uint shiftedSumRotate;\n  bool isEqual;\n  bool condition;\n  bool carryRotateOverflow;\n  \n  shift2 = value2 << 1;\n  newValue3 = value4 << 1;\n  isEqual = ((value2 ^ value4) & 0x7fffffff) == 0;\n  condition = isEqual && value1 == value3;\n  if (!isEqual || value1 != value3) {\n    condition = (shift2 | value1) == 0;\n  }\n  if (!condition) {\n    condition = (newValue3 | value3) == 0;\n  }\n  shift2 = (int)shift2 >> 0x15;\n  if (!condition) {\n    condition = shift2 == -1;\n  }\n  shift1 = (int)newValue3 >> 0x15;\n  if (!condition) {\n    condition = shift1 == -1;\n  }\n  if (condition) {\n    if (shift2 == -1 || shift1 == -1) {\n      newValue3 = value4;\n      shift2 = value3;\n      if (shift2 == -1) {\n        newValue3 = value2;\n        shift2 = value1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        value3 = shift2;\n        value4 = newValue3;\n      }\n      condition = (shift2 | newValue3 << 0xc) == 0;\n      if (condition) {\n        condition = (value3 | value4 << 0xc) == 0;\n      }\n      if (condition) {\n        condition = newValue3 == value4;\n      }\n      if (!condition) {\n        newValue3 = newValue3 | 0x80000;\n      }\n      return CONCAT44(newValue3,shift2);\n    }\n    if (((value2 ^ value4) & 0x7fffffff) != 0 || value1 != value3) {\n      if ((shift2 | value1) == 0) {\n        value1 = value3;\n        value2 = value4;\n      }\n      return CONCAT44(value2,value1);\n    }\n    if (value2 != value4) {\n      return 0;\n    }\n    if (shift2 >> 0x15 == 0) {\n      condition = (value1 & 0x80000000) != 0;\n      newValue3 = value2 * 2 + (uint)condition;\n      if (CARRY4(value2,value2) || CARRY4(value2 * 2,(uint)condition)) {\n        newValue3 = newValue3 | 0x80000000;\n      }\n      return CONCAT44(newValue3,value1 << 1);\n    }\n    if (shift2 < 0xffc00000) {\n      return CONCAT44(value2 + 0x100000,value1);\n    }\n    value2 = value2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(value2 | 0x7ff00000) << 0x20;\n  }\n  shift2 = shift2 >> 0x15;\n  newValue3 = newValue3 >> 0x15;\n  newValue4 = newValue3 - shift2;\n  condition = newValue4 != 0;\n  if (newValue3 < shift2) {\n    newValue4 = -newValue4;\n  }\n  newValue2 = value1;\n  newValue1 = value2;\n  if (condition && shift2 <= newValue3) {\n    shift2 = shift2 + newValue4;\n    newValue2 = value3;\n    newValue1 = value4;\n    value3 = value1;\n    value4 = value2;\n  }\n  if (0x36 < newValue4) {\n    return CONCAT44(newValue1,newValue2);\n  }\n  newValue3 = newValue1 & 0xfffff | 0x100000;\n  if ((newValue1 & 0x80000000) != 0) {\n    condition = newValue2 != 0;\n    newValue2 = -newValue2;\n    newValue3 = -newValue3 - (uint)condition;\n  }\n  newValue1 = value4 & 0xfffff | 0x100000;\n  if ((value4 & 0x80000000) != 0) {\n    condition = value3 != 0;\n    value3 = -value3;\n    newValue1 = -newValue1 - (uint)condition;\n  }\n  if (shift2 == newValue4) {\n    newValue1 = newValue1 ^ 0x100000;\n    if (shift2 == 0) {\n      newValue3 = newValue3 ^ 0x100000;\n      shift2 = 1;\n    }\n    else {\n      newValue4 = newValue4 - 1;\n    }\n  }\n  shiftedSumRotate = -newValue4 + 0x20;\n  if ((int)newValue4 < 0x21) {\n    carryRotate = value3 << (shiftedSumRotate & 0xff);\n    value3 = value3 >> (newValue4 & 0xff);\n    sum1 = newValue2 + value3;\n    shiftedSum = newValue1 << (shiftedSumRotate & 0xff);\n    shiftedSumRotate = sum1 + shiftedSum;\n    newValue3 = newValue3 + CARRY4(newValue2,value3) + ((int)newValue1 >> (newValue4 & 0xff)) +\n            (uint)CARRY4(sum1,shiftedSum);\n  }\n  else {\n    carryRotate = newValue1 << (-newValue4 + 0x40 & 0xff);\n    if (value3 != 0) {\n      carryRotate = carryRotate | 2;\n    }\n    newValue1 = (int)newValue1 >> (newValue4 - 0x20 & 0xff);\n    shiftedSumRotate = newValue2 + newValue1;\n    newValue3 = newValue3 + ((int)newValue1 >> 0x1f) + (uint)CARRY4(newValue2,newValue1);\n  }\n  value2 = newValue3 & 0x80000000;\n  newValue4 = newValue3;\n  if ((int)newValue3 < 0) {\n    condition = carryRotate == 0;\n    carryRotate = -carryRotate;\n    newValue4 = -shiftedSumRotate;\n    shiftedSumRotate = -(uint)!condition - shiftedSumRotate;\n    newValue4 = -(uint)(condition <= newValue4) - newValue3;\n  }\n  if (0xfffff < newValue4) {\n    newValue2 = shift2 - 1;\n    if (0x1fffff < newValue4) {\n      newValue3 = newValue4 & 1;\n      newValue4 = newValue4 >> 1;\n      carry = (byte)shiftedSumRotate;\n      shiftedSumRotate = (uint)(newValue3 != 0) << 0x1f | shiftedSumRotate >> 1;\n      carryRotate = (uint)(carry & 1) << 0x1f | carryRotate >> 1;\n      newValue2 = shift2;\n      if (0xffbfffff < shift2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    condition = 0x7fffffff < carryRotate;\n    if (carryRotate == 0x80000000) {\n      condition = (shiftedSumRotate & 1) != 0;\n    }\n    return CONCAT44(newValue4 + newValue2 * 0x100000 + (uint)CARRY4(shiftedSumRotate,(uint)condition) | value2,\n                    shiftedSumRotate + condition);\n  }\n  isEqual = (carryRotate & 0x80000000) != 0;\n  carryRotate = carryRotate << 1;\n  newValue2 = shiftedSumRotate * 2;\n  condition = CARRY4(shiftedSumRotate,shiftedSumRotate);\n  shiftedSumRotate = shiftedSumRotate * 2 + (uint)isEqual;\n  newValue4 = newValue4 * 2 + (uint)(condition || CARRY4(newValue2,(uint)isEqual));\n  newValue2 = shift2 - 2;\n  if (shift2 - 1 != 0 && 0xfffff < newValue4) goto LAB_080083e0;\n  newValue1 = shiftedSumRotate;\n  shift2 = newValue4;\n  if (newValue4 == 0) {\n    newValue1 = 0;\n    shift2 = shiftedSumRotate;\n  }\n  shift2 = LZCOUNT(shift2);\n  if (newValue4 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  shiftedSumRotate = shift2 - 0xb;\n  carryRotateOverflow = SBORROW4(shiftedSumRotate,0x20);\n  newValue4 = shift2 - 0x2b;\n  condition = (int)newValue4 < 0;\n  isEqual = newValue4 == 0;\n  if ((int)shiftedSumRotate < 0x20) {\n    carryRotateOverflow = SCARRY4(newValue4,0xc);\n    shift2 = shift2 + -0x1f;\n    condition = shift2 < 0;\n    isEqual = shift2 == 0;\n    newValue4 = shiftedSumRotate;\n    if (!isEqual && condition == carryRotateOverflow) {\n      newValue1 = shift2 << (shiftedSumRotate & 0xff);\n      shift2 = shift2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isEqual || condition != carryRotateOverflow) {\n    carryRotate = 0x20 - newValue4;\n  }\n  shift2 = shift2 << (newValue4 & 0xff);\n  if (isEqual || condition != carryRotateOverflow) {\n    shift2 = shift2 | newValue1 >> (carryRotate & 0xff);\n  }\n  if (isEqual || condition != carryRotateOverflow) {\n    newValue1 = newValue1 << (newValue4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)shiftedSumRotate <= (int)newValue2) {\n    return CONCAT44(shift2 + (newValue2 - shiftedSumRotate) * 0x100000 | value2,newValue1);\n  }\n  newValue4 = ~(newValue2 - shiftedSumRotate);\n  if ((int)newValue4 < 0x1f) {\n    shift2 = newValue4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(newValue4 - 0x1f,0xc)) {\n      return CONCAT44(newValue3,newValue1 >> (0x20 - (0xcU - shift2) & 0xff) | shift2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    newValue4 = newValue4 + 1;\n    return CONCAT44(value2 | shift2 >> (newValue4 & 0xff),\n                    newValue1 >> (newValue4 & 0xff) | shift2 << (0x20 - newValue4 & 0xff));\n  }\n  return CONCAT44(newValue3,shift2 >> (newValue4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_sum_and_shift_080082d4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "sum1",
                "uVar4": "shiftedSum",
                "uVar5": "newValue1",
                "iVar6": "shift2",
                "uVar7": "shift2",
                "uVar8": "newValue2",
                "uVar9": "newValue3",
                "uVar10": "newValue4",
                "uVar11": "carryRotate",
                "uVar12": "shiftedSumRotate",
                "bVar13": "isEqual",
                "bVar14": "condition",
                "bVar15": "carryRotateOverflow"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "__ieee754_sqrt",
                "trunc",
                "atan",
                "floor",
                "__kernel_rem_pio2",
                "scalbn",
                "__kernel_sin",
                "ceil",
                "__kernel_cos",
                "__ieee754_hypot",
                "__ieee754_atan2",
                "round"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "shift_and_concatenate_0800854c",
            "code": "\nulonglong shiftAndConcatenate_0800854c(uint input)\n\n{\n  uint result1;\n  uint result2;\n  int count;\n  uint shiftAmount;\n  uint remainder;\n  bool isNegativeCount;\n  bool isZeroCount;\n  bool isOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  count = LZCOUNT(input);\n  shiftAmount = count + 0x15;\n  isOverflow = SBORROW4(shiftAmount,0x20);\n  result2 = count - 0xb;\n  isNegativeCount = (int)result2 < 0;\n  isZeroCount = result2 == 0;\n  if (shiftAmount < 0x20) {\n    isOverflow = SCARRY4(result2,0xc);\n    isNegativeCount = false;\n    isZeroCount = count + 1 == 0;\n    result2 = shiftAmount;\n    if (!isZeroCount && isOverflow == false) {\n      result1 = input << shiftAmount;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto calculateResult;\n    }\n  }\n  if (isZeroCount || isNegativeCount != isOverflow) {\n    remainder = 0x20 - result2;\n  }\n  input = input << (result2 & 0xff);\n  if (isZeroCount || isNegativeCount != isOverflow) {\n    input = input | 0U >> (remainder & 0xff);\n  }\n  if (isZeroCount || isNegativeCount != isOverflow) {\n    result1 = 0 << (result2 & 0xff);\n  }\ncalculateResult:\n  if (shiftAmount < 0x433) {\n    return concatenate(input + (0x432 - shiftAmount) * 0x100000,result1);\n  }\n  result2 = ~(0x432 - shiftAmount);\n  if (0x1e < (int)result2) {\n    return (ulonglong)(input >> (result2 - 0x1f & 0xff));\n  }\n  count = result2 - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(result2 - 0x1f,0xc)) {\n    result2 = result2 + 1;\n    return concatenate(input >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | input << (0x20 - result2 & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "shift_and_concatenate_0800854c",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "count",
                "uVar4": "shiftAmount",
                "in_r12": "remainder",
                "bVar5": "isNegativeCount",
                "bVar6": "isZeroCount",
                "bVar7": "isOverflow",
                "LAB_08008458": "calculateResult",
                "CONCAT44": "concatenate"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "calculate_shifted_result_0800856c",
            "code": "\nulonglong calculate_shifted_result_0800856c(uint input_value)\n\n{\n  uint shift_count;\n  uint abs_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint target_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_value = -input_value;\n  }\n  shift_count = 0;\n  leading_zeros = LZCOUNT(abs_value);\n  target_bits = leading_zeros + 0x15;\n  carry_flag = SBORROW4(target_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (target_bits < 0x20) {\n    carry_flag = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = target_bits;\n    if (!is_zero && carry_flag == false) {\n      shift_count = abs_value << target_bits;\n      abs_value = abs_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto perform_shift;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_value = abs_value << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_value = abs_value | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shift_count = 0 << (shift_amount & 0xff);\n  }\nperform_shift:\n  if (target_bits < 0x433) {\n    return CONCAT44(abs_value + (0x432 - target_bits) * 0x100000 | sign_bit,shift_count);\n  }\n  shift_amount = ~(0x432 - target_bits);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_value >> (shift_amount & 0xff),\n                    shift_count >> (shift_amount & 0xff) | abs_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,shift_count >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "calculate_shifted_result_0800856c",
                "param_1": "input_value",
                "uVar1": "shift_count",
                "uVar2": "abs_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "target_bits",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "LAB_08008458": "perform_shift"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "bitwise_operations_08008590",
            "code": "\nulonglong bitwiseOperations_08008590(uint input,undefined4 unused1,undefined4 unused2,uint bitmask)\n\n{\n  uint signExtension;\n  uint temp1;\n  uint resultHighBits;\n  uint shiftAmount;\n  uint uVar5;\n  int bitCount;\n  uint shiftedResult;\n  uint inputSize;\n  bool isNegative;\n  bool isZero;\n  bool isNegative2;\n  \n  uVar5 = input << 1;\n  isZero = uVar5 == 0;\n  signExtension = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftAmount = (uint)((int)uVar5 >> 3) >> 1;\n  resultHighBits = signExtension | shiftAmount;\n  input = input << 0x1d;\n  if (!isZero) {\n    bitmask = uVar5 & 0xff000000;\n    isZero = bitmask == 0;\n  }\n  if (!isZero) {\n    isZero = bitmask == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(resultHighBits,input) ^ 0x3800000000000000;\n  }\n  if ((uVar5 & 0xffffff) == 0) {\n    return CONCAT44(resultHighBits,input);\n  }\n  if (bitmask == 0xff000000) {\n    return CONCAT44(resultHighBits,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  uVar5 = shiftAmount;\n  if (shiftAmount == 0) {\n    temp1 = 0;\n    uVar5 = input;\n  }\n  bitCount = LZCOUNT(uVar5);\n  if (shiftAmount == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  shiftedResult = bitCount - 0xb;\n  isNegative2 = SBORROW4(shiftedResult,0x20);\n  shiftAmount = bitCount - 0x2b;\n  isZero = (int)shiftAmount < 0;\n  isNegative = shiftAmount == 0;\n  if ((int)shiftedResult < 0x20) {\n    isNegative2 = SCARRY4(shiftAmount,0xc);\n    bitCount = bitCount + -0x1f;\n    isZero = bitCount < 0;\n    isNegative = bitCount == 0;\n    shiftAmount = shiftedResult;\n    if (!isNegative && isZero == isNegative2) {\n      temp1 = uVar5 << (shiftedResult & 0xff);\n      uVar5 = uVar5 >> (0xcU - bitCount & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isNegative || isZero != isNegative2) {\n    inputSize = 0x20 - shiftAmount;\n  }\n  uVar5 = uVar5 << (shiftAmount & 0xff);\n  if (isNegative || isZero != isNegative2) {\n    uVar5 = uVar5 | temp1 >> (inputSize & 0xff);\n  }\n  if (isNegative || isZero != isNegative2) {\n    temp1 = temp1 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if ((int)shiftedResult < 0x381) {\n    return CONCAT44(uVar5 + (0x380 - shiftedResult) * 0x100000 | signExtension,temp1);\n  }\n  shiftAmount = ~(0x380 - shiftedResult);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(resultHighBits,uVar5 >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shiftAmount - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signExtension | uVar5 >> (shiftAmount & 0xff),\n                    temp1 >> (shiftAmount & 0xff) | uVar5 << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(resultHighBits,temp1 >> (0x20 - (0xcU - bitCount) & 0xff) | uVar5 << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "bitwise_operations_08008590",
                "param_1": "input",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "bitmask",
                "uVar1": "signExtension",
                "uVar2": "temp1",
                "uVar3": "resultHighBits",
                "uVar4": "shiftAmount",
                "uVar7": "shiftedResult",
                "in_r12": "inputSize",
                "bVar8": "isNegative",
                "bVar9": "isZero",
                "bVar10": "isNegative2",
                "iVar6": "bitCount"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "protocol_execute_line",
                "gc_execute_line",
                "calculate_trapezoid_for_block",
                "max_allowable_speed",
                "homing_cycle",
                "mc_dwell",
                "plan_buffer_line",
                "report_realtime_status",
                "report_gcode_parameters",
                "to_millimeters",
                "read_float",
                "report_gcode_modes"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_shifted_value_08008640",
            "code": "\nulonglong calculate_shifted_value_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong temp1;\n  longlong temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong result;\n  \n  result = CONCAT44(input2,input1);\n  temp8 = 0x7ff;\n  temp4 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp4 == 0;\n  if (!flag1) {\n    temp7 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp7 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp4 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_shifted_value_08008640_0800881c();\n  }\n  temp3 = (uint)(result >> 0x20);\n  temp5 = temp4 + temp7;\n  temp4 = temp3 ^ input4;\n  temp3 = temp3 & ~(temp8 << 0x15);\n  input4 = input4 & ~(temp8 << 0x15);\n  flag1 = ((uint)result | temp3 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp3 = temp3 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)result | input3;\n    input4 = (temp4 & 0x80000000 | temp3) ^ input4;\n    temp4 = temp8 >> 1;\n    flag3 = SBORROW4(temp5,temp4);\n    temp6 = temp5 - temp4;\n    flag1 = temp6 == 0;\n    temp3 = temp6;\n    if (!flag1 && (int)temp4 <= temp5) {\n      flag3 = SBORROW4(temp8,temp6);\n      temp3 = temp8 - temp6;\n      flag1 = temp8 == temp6;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      input4 = input4 | temp6 * 0x100000;\n    }\n    if (!flag1 && (int)temp3 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp8 = 0;\n    flag3 = SBORROW4(temp6,1);\n    temp6 = temp6 - 1;\n    flag1 = temp6 == 0;\n    temp4 = temp6;\n  }\n  else {\n    temp1 = (result & 0xffffffff) * (ulonglong)input3;\n    result = (result & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp3 * (ulonglong)input3 + (temp1 >> 0x20);\n    temp9 = (uint)result;\n    temp2 = (ulonglong)temp3 * (ulonglong)input4 + (result >> 0x20);\n    temp8 = (uint)temp2;\n    temp3 = (uint)((ulonglong)temp2 >> 0x20);\n    if ((int)temp1 != 0) {\n      temp9 = temp9 | 1;\n    }\n    temp6 = (temp5 + -0x3ff) - (uint)(temp3 < 0x200);\n    if (temp3 < 0x200) {\n      flag1 = (temp9 & 0x80000000) != 0;\n      temp9 = temp9 << 1;\n      temp2 = CONCAT44(temp3 * 2 + (uint)(CARRY4(temp8,temp8) || CARRY4(temp8 * 2,(uint)flag1)),\n                       temp8 * 2 + (uint)flag1);\n    }\n    input4 = temp4 & 0x80000000 | (int)((ulonglong)temp2 >> 0x20) << 0xb | (uint)temp2 >> 0x15;\n    input3 = (uint)temp2 << 0xb | temp9 >> 0x15;\n    temp8 = temp9 * 0x800;\n    flag2 = 0xfc < temp6;\n    flag3 = SBORROW4(temp6,0xfd);\n    temp3 = temp6 - 0xfd;\n    flag1 = temp3 == 0;\n    temp4 = temp3;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp3;\n      flag3 = SBORROW4(temp3,0x700);\n      temp4 = temp6 - 0x7fd;\n      flag1 = temp3 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp8;\n      if (temp8 == 0x80000000) {\n        flag1 = (temp9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp6 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp4 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp6,0x36);\n  flag1 = (int)(temp6 + 0x36) < 0;\n  flag3 = temp6 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp4 = -temp6;\n  temp3 = temp4 - 0x20;\n  if (0x1f < (int)temp4) {\n    temp6 = input3 >> (temp3 & 0xff) | input4 << (0x20 - temp3 & 0xff);\n    temp4 = (input4 >> (temp3 & 0xff) & ~((input4 & 0x80000000) >> (temp3 & 0xff))) -\n            ((int)temp6 >> 0x1f);\n    if ((temp8 | input3 << (0x20 - temp3 & 0xff) | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44(input4,temp4) & 0x80000000ffffffff;\n  }\n  temp5 = temp4 - 0x14;\n  if (temp5 == 0 || temp5 < 0 != SCARRY4(temp3,0xc)) {\n    temp9 = input3 << (temp6 + 0x20 & 0xff);\n    temp3 = input3 >> (temp4 & 0xff) | input4 << (temp6 + 0x20 & 0xff);\n    temp6 = temp3 + -((int)temp9 >> 0x1f);\n    if ((temp8 | temp9 << 1) == 0) {\n      temp6 = temp6 & ~(temp9 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp4 & 0xff)) +\n                    (uint)CARRY4(temp3,-((int)temp9 >> 0x1f)),temp6);\n  }\n  temp4 = 0xc - temp5;\n  temp6 = input3 << (temp4 & 0xff);\n  temp4 = input3 >> (0x20 - temp4 & 0xff) | input4 << (temp4 & 0xff);\n  temp3 = temp4 + -((int)temp6 >> 0x1f);\n  if ((temp8 | temp6 << 1) == 0) {\n    temp3 = temp3 & ~(temp6 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp4,-((int)temp6 >> 0x1f)),temp3);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_shifted_value_08008640",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "lVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "unaff_r5": "temp7",
                "uVar7": "temp8",
                "uVar8": "temp9",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "result"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "__ieee754_sqrt",
                "calculate_trapezoid_for_block",
                "atan",
                "homing_cycle",
                "__kernel_rem_pio2",
                "scalbn",
                "plan_buffer_line",
                "report_realtime_status",
                "__kernel_sin",
                "report_gcode_parameters",
                "__kernel_cos",
                "to_millimeters",
                "__ieee754_hypot",
                "read_float",
                "report_gcode_modes"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_shifted_value_0800881c",
            "code": "\nulonglong calculateShiftedValue_0800881c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint shiftedInput1;\n  uint temp1;\n  uint shiftedInput2;\n  uint temp2;\n  uint mask;\n  bool isZero;\n  \n  shiftedInput2 = mask & input4 >> 0x14;\n  if (temp1 != mask && shiftedInput2 != mask) {\n    isZero = (input1 | input2 << 1) == 0;\n    if (!isZero) {\n      isZero = (input3 | input4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      temp2 = input2 & 0x80000000;\n      do {\n        shiftedInput1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(shiftedInput1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp2;\n      if (shiftedInput2 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      shiftedInput2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(shiftedInput2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  isZero = (input1 | input2 << 1) == 0;\n  if (isZero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!isZero) {\n    isZero = (input3 | input4 << 1) == 0;\n  }\n  temp2 = input2;\n  if (((!isZero) && ((temp1 != mask || ((input1 | input2 << 0xc) == 0)))) &&\n     ((shiftedInput2 != mask || (input1 = input3, temp2 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_shifted_value_0800881c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "shiftedInput1",
                "unaff_r4": "temp1",
                "uVar2": "shiftedInput2",
                "uVar3": "temp2",
                "in_r12": "mask",
                "bVar4": "isZero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_floating_point_08008894",
            "code": "\nulonglong calculateFloatingPoint_08008894(undefined4 value1,uint value2,uint value3,uint value4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool isConditionTrue1;\n  bool isConditionTrue2;\n  bool isConditionTrue3;\n  undefined8 result;\n  \n  result = CONCAT44(value2,value1);\n  temp14 = 0x7ff;\n  temp7 = value2 >> 0x14 & 0x7ff;\n  isConditionTrue1 = temp7 == 0;\n  if (!isConditionTrue1) {\n    temp10 = value4 >> 0x14 & 0x7ff;\n    isConditionTrue1 = temp10 == 0;\n  }\n  if (!isConditionTrue1) {\n    isConditionTrue1 = temp7 == 0x7ff;\n  }\n  if (!isConditionTrue1) {\n    isConditionTrue1 = temp10 == 0x7ff;\n  }\n  if (isConditionTrue1) {\n    result = calculate_floating_point_08008a02();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((value3 | value4 << 0xc) == 0) {\n    temp7 = (temp9 ^ value4) & 0x80000000 | temp9 & 0xfffff;\n    isConditionTrue3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    isConditionTrue1 = (int)temp9 < 0;\n    isConditionTrue2 = temp9 == 0;\n    if (!isConditionTrue2 && isConditionTrue1 == isConditionTrue3) {\n      isConditionTrue3 = SBORROW4(temp14,temp9);\n      isConditionTrue1 = (int)(temp14 - temp9) < 0;\n      isConditionTrue2 = temp14 == temp9;\n    }\n    if (!isConditionTrue2 && isConditionTrue1 == isConditionTrue3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!isConditionTrue2 && isConditionTrue1 == isConditionTrue3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    isConditionTrue2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    isConditionTrue1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (value4 << 0xc) >> 4 | 0x10000000 | value3 >> 0x18;\n    temp14 = value3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ value4) & 0x80000000;\n    isConditionTrue1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      isConditionTrue1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)isConditionTrue1;\n    temp9 = temp8 + 0x3fd;\n    if (isConditionTrue1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((value3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      isConditionTrue1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)isConditionTrue1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!isConditionTrue1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      isConditionTrue2 = temp1 <= temp13;\n      isConditionTrue1 = temp11 - temp5 < (uint)isConditionTrue2;\n      temp14 = temp11;\n      if (temp5 < temp11 || isConditionTrue1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!isConditionTrue2;\n      }\n      if (temp5 < temp11 || isConditionTrue1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      isConditionTrue2 = temp2 <= temp13;\n      isConditionTrue1 = temp14 - temp11 < (uint)isConditionTrue2;\n      temp5 = temp14;\n      if (temp11 < temp14 || isConditionTrue1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!isConditionTrue2;\n      }\n      if (temp11 < temp14 || isConditionTrue1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      isConditionTrue2 = temp1 <= temp13;\n      isConditionTrue1 = temp5 - temp6 < (uint)isConditionTrue2;\n      temp11 = temp5;\n      if (temp6 < temp5 || isConditionTrue1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!isConditionTrue2;\n      }\n      if (temp6 < temp5 || isConditionTrue1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    isConditionTrue3 = 0xfc < temp9;\n    isConditionTrue2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    isConditionTrue1 = temp4 == 0;\n    temp3 = temp4;\n    if (isConditionTrue3 && !isConditionTrue1) {\n      isConditionTrue3 = 0x6ff < temp4;\n      isConditionTrue2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      isConditionTrue1 = temp4 == 0x700;\n    }\n    if (!isConditionTrue3 || isConditionTrue1) {\n      isConditionTrue1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        isConditionTrue1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        isConditionTrue1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)isConditionTrue1),temp12 + isConditionTrue1);\n    }\n  }\n  if (!isConditionTrue1 && (int)temp3 < 0 == isConditionTrue2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isConditionTrue3 = SCARRY4(temp9,0x36);\n  isConditionTrue1 = (int)(temp9 + 0x36) < 0;\n  isConditionTrue2 = temp9 == 0xffffffca;\n  if (isConditionTrue2 || isConditionTrue1 != isConditionTrue3) {\n    temp12 = 0;\n  }\n  if (isConditionTrue2 || isConditionTrue1 != isConditionTrue3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (isConditionTrue2 || isConditionTrue1 != isConditionTrue3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_floating_point_08008894",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "isConditionTrue1",
                "bVar15": "isConditionTrue2",
                "bVar16": "isConditionTrue3",
                "uVar17": "result"
            },
            "calling": [
                "sqrt",
                "__ieee754_sqrt",
                "gc_execute_line",
                "atan",
                "__ieee754_atan2",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "calculate_floating_point_08008a02",
            "code": "\nulonglong calculateFloatingPoint_08008a02(uint mantissa1,uint exponent1,uint mantissa2,uint exponent2)\n\n{\n  uint bit1;\n  uint exponent1Copy;\n  uint bit2;\n  uint exponent2Copy;\n  uint mask;\n  bool isZero;\n  \n  bit2 = mask & exponent2 >> 0x14;\n  exponent2Copy = exponent1;\n  if (exponent1Copy != mask || bit2 != mask) {\n    if (exponent1Copy == mask) {\n      if (((mantissa1 | exponent1 << 0xc) == 0) && (mantissa1 = mantissa2, exponent2Copy = exponent2, bit2 != mask)\n         ) {\nLAB_08008874:\n        return (ulonglong)((exponent1 ^ exponent2) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == mask) {\n      mantissa1 = mantissa2;\n      exponent2Copy = exponent2;\n      if ((mantissa2 | exponent2 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((exponent1 ^ exponent2) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (mantissa1 | exponent1 << 1) == 0;\n      if (!isZero) {\n        isZero = (mantissa2 | exponent2 << 1) == 0;\n      }\n      if (!isZero) {\n        if (exponent1Copy == 0) {\n          exponent2Copy = exponent1 & 0x80000000;\n          do {\n            bit1 = mantissa1 & 0x80000000;\n            mantissa1 = mantissa1 << 1;\n            exponent1 = exponent1 * 2 + (uint)(bit1 != 0);\n          } while ((exponent1 & 0x100000) == 0);\n          exponent1 = exponent1 | exponent2Copy;\n          if (bit2 != 0) {\n            return CONCAT44(exponent1,mantissa1);\n          }\n        }\n        do {\n          exponent2Copy = mantissa2 & 0x80000000;\n          mantissa2 = mantissa2 << 1;\n          exponent2 = exponent2 * 2 + (uint)(exponent2Copy != 0);\n        } while ((exponent2 & 0x100000) == 0);\n        return CONCAT44(exponent1,mantissa1);\n      }\n      if ((mantissa1 | exponent1 << 1) != 0) goto LAB_08008874;\n      if ((mantissa2 | exponent2 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(exponent2Copy,mantissa1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "calculate_floating_point_08008a02",
                "param_1": "mantissa1",
                "param_2": "exponent1",
                "param_3": "mantissa2",
                "param_4": "exponent2",
                "uVar1": "bit1",
                "unaff_r4": "exponent1Copy",
                "uVar2": "bit2",
                "uVar3": "exponent2Copy",
                "in_r12": "mask",
                "bVar4": "isZero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_equality_08008a74",
            "code": "\nuint checkEquality_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_equality_08008a74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "compare_floats_08008af0",
            "code": "\nvoid compare_floats_08008af0(undefined4 result,undefined4 buffer,undefined4 float_value1,undefined4 float_value2)\n\n{\n  __aeabi_cdcmpeq(float_value1,float_value2,result,buffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "compare_floats_08008af0",
                "param_1": "result",
                "param_2": "buffer",
                "param_3": "float_value1",
                "param_4": "float_value2"
            },
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "calculate_weighted_average_08008b00",
            "code": "\nundefined4 calculate_weighted_average_08008b00(undefined4 input_value)\n\n{\n  __nedf2();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "calculate_weighted_average_08008b00",
                "param_1": "input_value"
            },
            "calling": [
                "__aeabi_cdrcmple",
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_not_equal_to_zero_08008b10",
            "code": "\nbool check_not_equal_to_zero_08008b10(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdcmpeq();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_not_equal_to_zero_08008b10",
                "in_ZR": "input_character"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_cy_null_08008b24",
            "code": "\nbool is_CY_null_08008b24(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdcmpeq();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_cy_null_08008b24",
                "in_CY": "input_char"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_less_or_equal_08008b4c",
            "code": "\nbool check_less_or_equal_08008b4c(void)\n\n{\n  undefined is_equal_zero;\n  undefined is_less_or_equal;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_less_or_equal || (bool)is_equal_zero;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_less_or_equal_08008b4c",
                "in_ZR": "is_equal_zero",
                "in_CY": "is_less_or_equal"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_null_char_08008b60",
            "code": "\nbool is_null_char_08008b60(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdrcmple();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_null_char_08008b60",
                "in_CY": "input_char"
            },
            "calling": [
                "ceil",
                "atan",
                "floor",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_inputs_08008b74",
            "code": "\nundefined4 check_inputs_08008b74(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_inputs_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "sqrt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_signed_division_08008ba0",
            "code": "\nuint calculateSignedDivision_08008ba0(uint dividend,uint divisor)\n\n{\n  uint quotient;\n  int adjustedDivisor;\n  uint shiftAmount;\n  \n  adjustedDivisor = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < adjustedDivisor) {\n      return 0;\n    }\n    quotient = adjustedDivisor >> 0x15;\n    shiftAmount = -quotient - 0x3e1;\n    if (quotient < 0xfffffc20 && shiftAmount != 0) {\n      quotient = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (shiftAmount & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        quotient = -quotient;\n      }\n      return quotient;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_signed_division_08008ba0",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "quotient",
                "iVar2": "adjustedDivisor",
                "uVar3": "shiftAmount"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "gc_execute_line",
                "__kernel_cos",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2",
                "lround",
                "plan_buffer_line",
                "__kernel_sin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_shifted_value_08008bf0",
            "code": "\nuint calculate_shifted_value_08008bf0(uint input_value,uint shift_count)\n\n{\n  int shifted_value;\n  uint shifted_result;\n  \n  if ((shift_count & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_count * 2 + 0x200000;\n  if (shift_count * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shifted_result = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shifted_result) {\n      return (shift_count << 0xb | 0x80000000 | input_value >> 0x15) >> (shifted_result & 0xff);\n    }\n  }\n  else if ((input_value | shift_count << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "input_value",
                "param_2": "shift_count",
                "iVar1": "shifted_value",
                "uVar2": "shifted_result"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "protocol_execute_line",
                "gc_execute_line",
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "mc_dwell",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_floating_point_value_08008c30",
            "code": "\nuint calculateFloatingPointValue_08008c30(uint inputValue,uint controlValue)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isInRange;\n  \n  temp1 = controlValue * 2;\n  isInRange = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isInRange) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isInRange && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isInRange || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((controlValue & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputValue | controlValue << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return controlValue & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return controlValue & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputValue >> (temp1 & 0xff);\n    if (inputValue << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = controlValue & 0x1fffff | 0x100000;\n    inputValue = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (controlValue & 0x80000000 | inputValue >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_floating_point_value_08008c30",
                "param_1": "inputValue",
                "param_2": "controlValue",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isInRange"
            },
            "calling": [
                "mc_arc",
                "report_gcode_parameters",
                "gc_execute_line",
                "to_millimeters",
                "read_float",
                "max_allowable_speed",
                "homing_cycle",
                "plan_buffer_line",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "float_to_u_int_08008cd8",
            "code": "\nuint floatToUInt_08008cd8(uint inputFloat,uint inputUInt,undefined4 param3,uint param4)\n\n{\n  int shiftedInputFloatSign;\n  int shiftedInputFloatSignTemp;\n  uint bitwiseInverse;\n  uint bitwiseInverseTemp;\n  uint shiftedInputFloat;\n  uint shiftCount;\n  uint shiftDifference;\n  bool isEqual;\n  \n  bitwiseInverse = inputUInt ^ 0x80000000;\n  shiftedInputFloat = inputFloat << 1;\n  isEqual = shiftedInputFloat == 0;\n  if (!isEqual) {\n    param4 = inputUInt << 1;\n    isEqual = param4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = shiftedInputFloat == param4;\n  }\n  shiftedInputFloatSign = (int)shiftedInputFloat >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInputFloatSign == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)param4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInputFloatSignTemp = (int)(inputUInt << 1) >> 0x18;\n    if (shiftedInputFloatSign == -1 || shiftedInputFloatSignTemp == -1) {\n      shiftedInputFloat = bitwiseInverse;\n      if (shiftedInputFloatSign == -1) {\n        shiftedInputFloat = inputFloat;\n      }\n      if (shiftedInputFloatSign != -1 || shiftedInputFloatSignTemp != -1) {\n        bitwiseInverse = shiftedInputFloat;\n      }\n      isEqual = (shiftedInputFloat & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (bitwiseInverse & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = shiftedInputFloat == bitwiseInverse;\n      }\n      if (!isEqual) {\n        shiftedInputFloat = shiftedInputFloat | 0x400000;\n      }\n      return shiftedInputFloat;\n    }\n    if (((inputFloat ^ bitwiseInverse) & 0x7fffffff) != 0) {\n      if (shiftedInputFloat == 0) {\n        inputFloat = bitwiseInverse;\n      }\n      return inputFloat;\n    }\n    if (inputFloat != bitwiseInverse) {\n      return 0;\n    }\n    if ((shiftedInputFloat & 0xff000000) == 0) {\n      bitwiseInverse = inputFloat << 1;\n      if ((inputFloat & 0x80000000) != 0) {\n        bitwiseInverse = bitwiseInverse | 0x80000000;\n      }\n      return bitwiseInverse;\n    }\n    if (shiftedInputFloat < 0xfe000000) {\n      return inputFloat + 0x800000;\n    }\n    inputFloat = inputFloat & 0x80000000;\nLAB_08008e12:\n    return inputFloat | 0x7f800000;\n  }\n  shiftedInputFloat = shiftedInputFloat >> 0x18;\n  param4 = param4 >> 0x18;\n  shiftDifference = param4 - shiftedInputFloat;\n  isEqual = shiftDifference != 0;\n  shiftCount = shiftedInputFloat;\n  if (isEqual && shiftedInputFloat <= param4) {\n    shiftCount = shiftedInputFloat + shiftDifference;\n  }\n  if (isEqual && shiftedInputFloat <= param4) {\n    bitwiseInverse = bitwiseInverse ^ inputFloat;\n  }\n  if (isEqual && shiftedInputFloat <= param4) {\n    inputFloat = inputFloat ^ bitwiseInverse;\n  }\n  if (isEqual && shiftedInputFloat <= param4) {\n    bitwiseInverse = bitwiseInverse ^ inputFloat;\n  }\n  if (param4 < shiftedInputFloat) {\n    shiftDifference = -shiftDifference;\n  }\n  if (0x19 < shiftDifference) {\n    return inputFloat;\n  }\n  shiftedInputFloat = inputFloat & 0xffffff | 0x800000;\n  if ((inputFloat & 0x80000000) != 0) {\n    shiftedInputFloat = -shiftedInputFloat;\n  }\n  bitwiseInverseTemp = bitwiseInverse & 0xffffff | 0x800000;\n  if ((bitwiseInverse & 0x80000000) != 0) {\n    bitwiseInverseTemp = -bitwiseInverseTemp;\n  }\n  if (shiftCount == shiftDifference) {\n    bitwiseInverseTemp = bitwiseInverseTemp ^ 0x800000;\n    if (shiftCount == 0) {\n      shiftedInputFloat = shiftedInputFloat ^ 0x800000;\n      shiftCount = 1;\n    }\n    else {\n      shiftDifference = shiftDifference - 1;\n    }\n  }\n  shiftedInputFloat = shiftedInputFloat + ((int)bitwiseInverseTemp >> (shiftDifference & 0xff));\n  bitwiseInverseTemp = bitwiseInverseTemp << (0x20 - shiftDifference & 0xff);\n  inputFloat = shiftedInputFloat & 0x80000000;\n  if ((int)shiftedInputFloat < 0) {\n    isEqual = bitwiseInverseTemp != 0;\n    bitwiseInverseTemp = -bitwiseInverseTemp;\n    shiftedInputFloat = -shiftedInputFloat - (uint)isEqual;\n  }\n  if (shiftedInputFloat < 0x800000) {\n    bitwiseInverse = bitwiseInverseTemp & 0x80000000;\n    bitwiseInverseTemp = bitwiseInverseTemp << 1;\n    shiftedInputFloat = shiftedInputFloat * 2 + (uint)(bitwiseInverse != 0);\n    bitwiseInverse = shiftCount - 2;\n    if (shiftCount - 1 == 0 || shiftedInputFloat < 0x800000) {\n      shiftDifference = LZCOUNT(shiftedInputFloat) - 8;\n      shiftedInputFloat = shiftedInputFloat << (shiftDifference & 0xff);\n      if ((int)bitwiseInverse < (int)shiftDifference) {\n        shiftedInputFloat = shiftedInputFloat >> (-(bitwiseInverse - shiftDifference) & 0xff);\n      }\n      else {\n        shiftedInputFloat = shiftedInputFloat + (bitwiseInverse - shiftDifference) * 0x800000;\n      }\n      return shiftedInputFloat | inputFloat;\n    }\n  }\n  else {\n    bitwiseInverse = shiftCount - 1;\n    if (0xffffff < shiftedInputFloat) {\n      bitwiseInverse = shiftedInputFloat & 1;\n      shiftedInputFloat = shiftedInputFloat >> 1;\n      bitwiseInverseTemp = (uint)(bitwiseInverse != 0) << 0x1f | bitwiseInverseTemp >> 1;\n      bitwiseInverse = shiftCount;\n      if (0xfd < shiftCount) goto LAB_08008e12;\n    }\n  }\n  shiftedInputFloat = shiftedInputFloat + bitwiseInverse * 0x800000 + (uint)(0x7fffffff < bitwiseInverseTemp);\n  if (bitwiseInverseTemp == 0x80000000) {\n    shiftedInputFloat = shiftedInputFloat & 0xfffffffe;\n  }\n  return shiftedInputFloat | inputFloat;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "float_to_u_int_08008cd8",
                "param_1": "inputFloat",
                "param_2": "inputUInt",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "bitwiseInverse",
                "uVar4": "bitwiseInverseTemp",
                "uVar5": "shiftedInputFloat",
                "uVar6": "shiftCount",
                "uVar7": "shiftDifference",
                "bVar8": "isEqual",
                "iVar1": "shiftedInputFloatSign",
                "iVar2": "shiftedInputFloatSignTemp"
            },
            "calling": [
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "max_allowable_speed",
                "mc_dwell",
                "intersection_distance",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_floating_point_08008cdc",
            "code": "\nuint calculateFloatingPoint_08008cdc(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shiftAmount1;\n  int shiftAmount2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  bool isZero;\n  \n  temp2 = input1 << 1;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    param4 = input2 << 1;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == param4;\n  }\n  shiftAmount1 = (int)temp2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftAmount1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)param4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftAmount2 = (int)(input2 << 1) >> 0x18;\n    if (shiftAmount1 == -1 || shiftAmount2 == -1) {\n      temp2 = input2;\n      if (shiftAmount1 == -1) {\n        temp2 = input1;\n      }\n      if (shiftAmount1 != -1 || shiftAmount2 != -1) {\n        input2 = temp2;\n      }\n      isZero = (temp2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = temp2 == input2;\n      }\n      if (!isZero) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      temp2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return temp2;\n    }\n    if (temp2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  param4 = param4 >> 0x18;\n  temp4 = param4 - temp2;\n  isZero = temp4 != 0;\n  temp3 = temp2;\n  if (isZero && temp2 <= param4) {\n    temp3 = temp2 + temp4;\n  }\n  if (isZero && temp2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && temp2 <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && temp2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < temp2) {\n    temp4 = -temp4;\n  }\n  if (0x19 < temp4) {\n    return input1;\n  }\n  temp2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  temp1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp3 == temp4) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      temp4 = temp4 - 1;\n    }\n  }\n  temp2 = temp2 + ((int)temp1 >> (temp4 & 0xff));\n  temp1 = temp1 << (0x20 - temp4 & 0xff);\n  input1 = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    isZero = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)isZero;\n  }\n  if (temp2 < 0x800000) {\n    temp4 = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp2 = temp2 * 2 + (uint)(temp4 != 0);\n    temp4 = temp3 - 2;\n    if (temp3 - 1 == 0 || temp2 < 0x800000) {\n      temp3 = LZCOUNT(temp2) - 8;\n      temp2 = temp2 << (temp3 & 0xff);\n      if ((int)temp4 < (int)temp3) {\n        temp2 = temp2 >> (-(temp4 - temp3) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (temp4 - temp3) * 0x800000;\n      }\n      return temp2 | input1;\n    }\n  }\n  else {\n    temp4 = temp3 - 1;\n    if (0xffffff < temp2) {\n      temp4 = temp2 & 1;\n      temp2 = temp2 >> 1;\n      temp1 = (uint)(temp4 != 0) << 0x1f | temp1 >> 1;\n      temp4 = temp3;\n      if (0xfd < temp3) goto LAB_08008e12;\n    }\n  }\n  temp2 = temp2 + temp4 * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftAmount1",
                "iVar2": "shiftAmount2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "bVar7": "isZero"
            },
            "calling": [
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "max_allowable_speed",
                "intersection_distance",
                "printFloat",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_value_08008e3c",
            "code": "\nuint calculateValue_08008e3c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int constantValue;\n  uint tempValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  constantValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    tempValue = 0 << (shiftAmount & 0xff);\n    leadingZeros = constantValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constantValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_value_08008e3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "constantValue",
                "uVar4": "tempValue"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "read_float"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_unsigned_integer_08008e44",
            "code": "\nuint calculateUnsignedInteger_08008e44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_unsigned_integer_08008e44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "mc_arc",
                "plan_cycle_reinitialize",
                "calculate_trapezoid_for_block",
                "gc_set_current_position",
                "mc_dwell",
                "mc_go_home",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_float_08008eec",
            "code": "\nuint calculateFloat_08008eec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong result1;\n  uint result2;\n  uint var1;\n  int var2;\n  int var3;\n  uint var4;\n  int var5;\n  uint var6;\n  bool condition1;\n  bool condition2;\n  \n  var1 = input1 >> 0x17 & 0xff;\n  condition1 = var1 == 0;\n  if (!condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    condition1 = input4 == 0;\n  }\n  if (!condition1) {\n    condition1 = var1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = input4 == 0xff;\n  }\n  if (condition1) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (var1 == 0xff || input4 == 0xff) {\n      condition1 = input1 == 0 || input1 == 0x80000000;\n      result2 = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        condition1 = input2 == 0;\n        result2 = input1;\n      }\n      if (!condition1) {\n        condition1 = input2 == 0x80000000;\n      }\n      var6 = result2;\n      if (((condition1) || ((var1 == 0xff && ((result2 & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (var6 = input2, (input2 & 0x7fffff) != 0)))) {\n        return var6 | 0x7fc00000;\n      }\n      result2 = result2 ^ input2;\n      goto LAB_0800903c;\n    }\n    condition1 = (input1 & 0x7fffffff) == 0;\n    if (!condition1) {\n      condition1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (condition1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    condition1 = var1 == 0;\n    result2 = input1 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input1 = input1 << 1;\n        condition1 = (input1 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      var1 = var1 - 1;\n    }\n    input1 = input1 | result2;\n    condition1 = input4 == 0;\n    result2 = input2 & 0x80000000;\n    while( true ) {\n      if (condition1) {\n        input2 = input2 << 1;\n        condition1 = (input2 & 0x800000) == 0;\n      }\n      if (!condition1) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result2;\n  }\n  var2 = var1 + input4;\n  var6 = input1 ^ input2;\n  var1 = input1 << 9;\n  condition1 = var1 == 0;\n  if (!condition1) {\n    input2 = input2 << 9;\n    condition1 = input2 == 0;\n  }\n  if (condition1) {\n    if (var1 == 0) {\n      input2 = input2 << 9;\n    }\n    result2 = var6 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    condition2 = SBORROW4(var2,0x7f);\n    var3 = var2 + -0x7f;\n    condition1 = var3 == 0;\n    var5 = var3;\n    if (!condition1 && 0x7e < var2) {\n      condition2 = SBORROW4(0xff,var3);\n      var5 = 0xff - var3;\n      condition1 = var3 == 0xff;\n    }\n    if (!condition1 && var5 < 0 == condition2) {\n      result2 = result2 | var3 * 0x800000;\n    }\n    if (!condition1 && var5 < 0 == condition2) {\n      return result2;\n    }\n    result2 = result2 | 0x800000;\n    var4 = 0;\n    condition2 = SBORROW4(var3,1);\n    var6 = var2 - 0x80;\n    condition1 = var6 == 0;\n    var1 = var6;\n  }\n  else {\n    result1 = (ulonglong)(var1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    var4 = (uint)result1;\n    result2 = (uint)((ulonglong)result1 >> 0x20);\n    condition1 = result2 < 0x800000;\n    if (condition1) {\n      result2 = result2 << 1;\n    }\n    if (condition1) {\n      result2 = result2 | var4 >> 0x1f;\n      var4 = var4 << 1;\n    }\n    result2 = var6 & 0x80000000 | result2;\n    var6 = (var2 + -0x7f) - (uint)condition1;\n    condition2 = SBORROW4(var6,0xfd);\n    condition1 = var6 == 0xfd;\n    var1 = var6 - 0xfd;\n    if (var6 < 0xfe) {\n      result2 = result2 + var6 * 0x800000 + (uint)(0x7fffffff < var4);\n      if (var4 == 0x80000000) {\n        result2 = result2 & 0xfffffffe;\n      }\n      return result2;\n    }\n  }\n  if (condition1 || (int)var1 < 0 != condition2) {\n    condition1 = (int)(var6 + 0x19) < 0;\n    if (var6 == 0xffffffe7 || condition1 != SCARRY4(var6,0x19)) {\n      result2 = result2 & 0x80000000;\n    }\n    if (var6 != 0xffffffe7 && condition1 == SCARRY4(var6,0x19)) {\n      var1 = (result2 << 1) >> (-var6 & 0xff);\n      var6 = result2 << (var6 + 0x20 & 0xff);\n      var1 = ((uint)((result2 & 0x80000000) != 0) << 0x1f | var1 >> 1) + (uint)((byte)var1 & 1);\n      if ((var4 | var6 << 1) == 0) {\n        var1 = var1 & ~(var6 >> 0x1f);\n      }\n      return var1;\n    }\n    return result2;\n  }\nLAB_0800903c:\n  return result2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "result1",
                "uVar2": "result2",
                "uVar3": "var1",
                "iVar4": "var2",
                "iVar5": "var3",
                "uVar6": "var4",
                "iVar7": "var5",
                "uVar8": "var6",
                "bVar9": "condition1",
                "bVar10": "condition2"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "plan_cycle_reinitialize",
                "calculate_trapezoid_for_block",
                "max_allowable_speed",
                "homing_cycle",
                "mc_dwell",
                "intersection_distance",
                "mc_go_home",
                "plan_buffer_line",
                "read_float",
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_floating_point_08009054",
            "code": "\nuint calculateFloatingPoint_08009054(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint dividend;\n  uint exponent1;\n  int exponentDifference;\n  uint exponent2;\n  int adjustedExponent;\n  uint result;\n  bool isZero;\n  bool isCarry;\n  bool isBorrow;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  isZero = exponent1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = exponent1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (exponent1 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (input1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = exponent1 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input1 = input1 << 1;\n            isZero = (input1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          exponent1 = exponent1 - 1;\n        }\n        input1 = input1 | result;\n        isZero = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input2 = input2 << 1;\n            isZero = (input2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_0800906c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_0800906c:\n    exponentDifference = exponent1 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      isBorrow = isSubstractionOverflow(exponentDifference,0x7f);\n      adjustedExponent = exponentDifference + 0x7f;\n      isZero = adjustedExponent < 0;\n      isCarry = adjustedExponent == 0;\n      if (!isCarry && isZero == isBorrow) {\n        isBorrow = isSubtractionBorrow(0xff,adjustedExponent);\n        isZero = 0xff - adjustedExponent < 0;\n        isCarry = adjustedExponent == 0xff;\n      }\n      if (!isCarry && isZero == isBorrow) {\n        input1 = input1 | adjustedExponent * 0x800000;\n      }\n      if (!isCarry && isZero == isBorrow) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      exponent1 = 0;\n      isCarry = isSubtractionBorrow(adjustedExponent,1);\n      exponent2 = exponentDifference + 0x7e;\n      isZero = exponent2 == 0;\n      result = exponent2;\n    }\n    else {\n      dividend = (input2 << 9) >> 4 | 0x10000000;\n      exponent1 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      isZero = dividend <= exponent1;\n      if (!isZero) {\n        exponent1 = exponent1 << 1;\n      }\n      exponent2 = exponentDifference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (dividend <= exponent1) {\n          exponent1 = exponent1 - dividend;\n          input1 = input1 | result;\n        }\n        isZero = dividend >> 1 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (dividend >> 1);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 1;\n        }\n        isZero = dividend >> 2 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (dividend >> 2);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 2;\n        }\n        isZero = dividend >> 3 <= exponent1;\n        if (isZero) {\n          exponent1 = exponent1 - (dividend >> 3);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        isZero = exponent1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isCarry = isSubtractionBorrow(exponent2,0xfd);\n      isZero = exponent2 == 0xfd;\n      result = exponent2 - 0xfd;\n      if (exponent2 < 0xfe) {\n        input1 = input1 + exponent2 * 0x800000 + (uint)(dividend <= exponent1);\n        if (exponent1 - dividend == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (isZero || (int)result < 0 != isCarry) {\n      isZero = (int)(exponent2 + 0x19) < 0;\n      if (exponent2 == 0xffffffe7 || isZero != isSubstractionOverflow(exponent2,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (exponent2 == 0xffffffe7 || isZero != isSubstractionOverflow(exponent2,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-exponent2 & 0xff);\n      exponent2 = input1 << (exponent2 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent1 | exponent2 << 1) == 0) {\n        result = result & ~(exponent2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_floating_point_08009054",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "dividend",
                "uVar2": "exponent1",
                "iVar3": "exponentDifference",
                "uVar4": "exponent2",
                "iVar5": "adjustedExponent",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isCarry",
                "bVar9": "isBorrow",
                "SCARRY4": "isSubstractionOverflow",
                "SBORROW4": "isSubtractionBorrow"
            },
            "calling": [
                "planner_recalculate_trapezoids",
                "mc_arc",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "report_grbl_settings",
                "homing_cycle",
                "gc_set_current_position",
                "intersection_distance",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_result_0800919c",
            "code": "\nuint calculate_result_0800919c(uint input1,uint input2)\n\n{\n  bool is_negative_result;\n  uint input1_times_2;\n  uint input2_times_2;\n  uint combined_result;\n  bool is_combined_result_zero;\n  \n  input1_times_2 = input1 * 2;\n  input2_times_2 = input2 * 2;\n  if (((int)input1_times_2 >> 0x18 == -1 || (int)input2_times_2 >> 0x18 == -1) &&\n     ((((int)input1_times_2 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2_times_2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_result = input1_times_2 | input2 & 0x7fffffff;\n  is_combined_result_zero = combined_result == 0;\n  if (!is_combined_result_zero) {\n    combined_result = input1 ^ input2;\n    is_combined_result_zero = combined_result == 0;\n  }\n  is_negative_result = -1 < (int)combined_result;\n  if (is_negative_result) {\n    input1 = input1_times_2 + input2 * -2;\n    is_combined_result_zero = input1 == 0;\n  }\n  if ((is_negative_result && input2_times_2 <= input1_times_2) && !is_combined_result_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative_result || input2_times_2 > input1_times_2) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_combined_result_zero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "is_negative_result",
                "uVar2": "input1_times_2",
                "uVar3": "input2_times_2",
                "uVar4": "combined_result",
                "bVar5": "is_combined_result_zero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "compare_floats_080091fc",
            "code": "\nvoid compareFloats_080091fc(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_param_values_08009204",
            "code": "\nundefined8 concatenate_param_values_08009204(undefined4 first_param,undefined4 second_param)\n\n{\n  __cmpsf2();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_param_values_08009204",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmple",
                "__aeabi_fcmpeq"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_if_not_zero_08009214",
            "code": "\nbool check_if_not_zero_08009214(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfcmpeq();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_if_not_zero_08009214",
                "in_ZR": "input_character"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "planner_forward_pass_kernel",
                "gc_execute_line",
                "planner_reverse_pass_kernel",
                "read_float"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "is_cy_null_08009228",
            "code": "\nbool is_CY_null_08009228(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "is_cy_null_08009228",
                "in_CY": "input_character"
            },
            "calling": [
                "settings_store_global_setting",
                "planner_forward_pass_kernel",
                "gc_execute_line",
                "planner_reverse_pass_kernel",
                "printFloat",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "compare_cf_positive_zero_0800923c",
            "code": "\nbool compareCFPositiveZero_0800923c(void)\n\n{\n  undefined isZeroResult;\n  undefined isClearedCarry;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)isClearedCarry || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "compare_cf_positive_zero_0800923c",
                "in_ZR": "isZeroResult",
                "in_CY": "isClearedCarry"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "is_leq_or_equal_to_zero_08009250",
            "code": "\nbool is_leq_or_equal_to_zero_08009250(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  __aeabi_cfrcmple();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08009250": "is_leq_or_equal_to_zero_08009250",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "mc_arc",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "is_null_character_08009264",
            "code": "\nbool isNullCharacter_08009264(void)\n\n{\n  char inputChar;\n  \n  __aeabi_cfrcmple();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "is_null_character_08009264",
                "in_CY": "inputChar"
            },
            "calling": [
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "reverse_signed_integer_08009278",
            "code": "\nuint reverse_signed_integer_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint shift_amount;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  shift_amount = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && shift_amount != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08009278": "reverse_signed_integer_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "shift_amount"
            },
            "calling": [
                "protocol_execute_line",
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080092c4": {
            "entrypoint": "0x080092c4",
            "current_name": "initialize_memory_080092c4",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initializeMemory_080092c4(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_2000044c; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800c0c0);\n  }\n  for (ptr = &DAT_2000044c; ptr < &DAT_20000f20; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x80092fa;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080092c4": "initialize_memory_080092c4",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "__libc_init_array",
                "main",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_floating_point_value_08009318",
            "code": "\nlonglong calculateFloatingPointValue_08009318(uint input1,uint input2,undefined4 tempVar1,undefined4 tempVar2)\n\n{\n  int comparisonResult;\n  uint shiftedValue;\n  uint mask;\n  bool carryFlag;\n  undefined8 sumResult;\n  longlong result;\n  \n  mask = (input2 << 1) >> 0x15;\n  shiftedValue = mask - 0x3ff;\n  if ((int)shiftedValue < 0x14) {\n    if ((int)shiftedValue < 0) {\n      sumResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,tempVar2);\n      comparisonResult = __aeabi_dcmpgt((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparisonResult != 0) {\n        if ((int)input2 < 0) {\n          result = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shiftedValue & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        sumResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,tempVar2);\n        comparisonResult = __aeabi_dcmpgt((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0,0);\n        result = CONCAT44(input2,input1);\n        if (comparisonResult != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (shiftedValue & 0xff));\n          }\n          result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftedValue < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      sumResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,tempVar2);\n      comparisonResult = __aeabi_dcmpgt((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparisonResult != 0) {\n        if (0 < (int)input2) {\n          if (shiftedValue == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shiftedValue = 1 << (0x34 - shiftedValue & 0xff);\n            carryFlag = CARRY4(shiftedValue,input1);\n            input1 = shiftedValue + input1;\n            if (carryFlag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (shiftedValue == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_floating_point_value_08009318",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "tempVar1",
                "param_4": "tempVar2",
                "iVar1": "comparisonResult",
                "uVar2": "shiftedValue",
                "uVar3": "mask",
                "bVar4": "carryFlag",
                "uVar5": "sumResult",
                "lVar6": "result"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "compute_trigonometric_08009410",
            "code": "\nundefined4 computeTrigonometric_08009410(undefined4 value,uint flags)\n\n{\n  undefined4 result;\n  uint remainderMask;\n  undefined4 angle;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  \n  if (0x3fe921fb < (flags & 0x7fffffff)) {\n    if ((flags & 0x7fffffff) < 0x7ff00000) {\n      remainderMask = __ieee754_rem_pio2(value,flags,&angle);\n      remainderMask = remainderMask & 3;\n      if (remainderMask == 1) {\n        result = __kernel_sin(angle,temp1,temp2,temp3,1);\n      }\n      else if (remainderMask == 2) {\n        result = __kernel_cos(angle,temp1,temp2,temp3);\n      }\n      else if (remainderMask == 0) {\n        result = __kernel_cos(angle,temp1,temp2,temp3);\n      }\n      else {\n        result = __kernel_sin(angle,temp1,temp2,temp3,1);\n      }\n    }\n    else {\n      result = __subdf3(value,flags,value,flags);\n    }\n    return result;\n  }\n  result = __kernel_cos(value,flags,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "compute_trigonometric_08009410",
                "param_1": "value",
                "param_2": "flags",
                "uVar1": "result",
                "uVar2": "remainderMask",
                "local_28": "angle",
                "uStack_24": "temp1",
                "local_20": "temp2",
                "uStack_1c": "temp3"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_cos",
                "__subdf3",
                "__kernel_sin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_floating_point_080094c0",
            "code": "\nlonglong calculateFloatingPoint_080094c0(uint num1,uint num2,undefined4 undefined1,undefined4 undefined2)\n\n{\n  int comparisonResult;\n  uint shiftedResult;\n  uint shiftedRight;\n  bool carryFlag;\n  undefined8 result;\n  longlong combinedResult;\n  \n  shiftedRight = (num2 << 1) >> 0x15;\n  shiftedResult = shiftedRight - 0x3ff;\n  if ((int)shiftedResult < 0x14) {\n    if ((int)shiftedResult < 0) {\n      result = __aeabi_dadd(num1,num2,0x8800759c,0x7e37e43c,undefined2);\n      comparisonResult = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      combinedResult = CONCAT44(num2,num1);\n      if (comparisonResult != 0) {\n        if ((int)num2 < 0) {\n          if ((num1 | num2 & 0x7fffffff) != 0) {\n            num2 = 0xbff00000;\n          }\n          combinedResult = (ulonglong)num2 << 0x20;\n        }\n        else {\n          combinedResult = 0;\n        }\n      }\n    }\n    else {\n      shiftedRight = 0xfffff >> (shiftedResult & 0xff);\n      combinedResult = CONCAT44(num2,num1);\n      if ((num2 & shiftedRight | num1) != 0) {\n        result = __aeabi_dadd(num1,num2,0x8800759c,0x7e37e43c,undefined2);\n        comparisonResult = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        combinedResult = CONCAT44(num2,num1);\n        if (comparisonResult != 0) {\n          if ((int)num2 < 0) {\n            num2 = num2 + (0x100000 >> (shiftedResult & 0xff));\n          }\n          combinedResult = (ulonglong)(num2 & ~shiftedRight) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftedResult < 0x34) {\n    shiftedRight = 0xffffffff >> (shiftedRight - 0x413 & 0xff);\n    combinedResult = CONCAT44(num2,num1);\n    if ((shiftedRight & num1) != 0) {\n      result = __aeabi_dadd(num1,num2,0x8800759c,0x7e37e43c,undefined2);\n      comparisonResult = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      combinedResult = CONCAT44(num2,num1);\n      if (comparisonResult != 0) {\n        if ((int)num2 < 0) {\n          if (shiftedResult == 0x14) {\n            num2 = num2 + 1;\n          }\n          else {\n            shiftedResult = 1 << (0x34 - shiftedResult & 0xff);\n            carryFlag = CARRY4(shiftedResult,num1);\n            num1 = shiftedResult + num1;\n            if (carryFlag != false) {\n              num2 = num2 + 1;\n            }\n          }\n        }\n        combinedResult = CONCAT44(num2,num1 & ~shiftedRight);\n      }\n    }\n  }\n  else {\n    combinedResult = CONCAT44(num2,num1);\n    if (shiftedResult == 0x400) {\n      combinedResult = __aeabi_dadd();\n    }\n  }\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_floating_point_080094c0",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "undefined1",
                "param_4": "undefined2",
                "uVar3": "shiftedRight",
                "uVar2": "shiftedResult",
                "bVar4": "carryFlag",
                "uVar5": "result",
                "iVar1": "comparisonResult",
                "lVar6": "combinedResult"
            },
            "calling": [
                "mc_arc",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2",
                "mc_dwell"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_with_sign_080095b8",
            "code": "\nint calculateProductWithSign_080095b8(uint input1,uint input2)\n\n{\n  uint bitMask;\n  uint shiftedBits;\n  uint result;\n  int sign;\n  uint exponent;\n  \n  shiftedBits = (input2 << 1) >> 0x15;\n  exponent = shiftedBits - 0x3ff;\n  if ((int)input2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input2 & 0xfffff | 0x100000;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if (exponent != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (exponent & 0xff)) >> (0x14 - exponent & 0xff);\n  }\n  else {\n    if (0x1e < exponent) {\n      sign = __aeabi_d2iz();\n      return sign;\n    }\n    if ((int)exponent < 0x34) {\n      bitMask = 0x80000000 >> (shiftedBits - 0x413 & 0xff);\n      if (CARRY4(bitMask,input1) != false) {\n        result = result + 1;\n      }\n      result = result << (shiftedBits - 0x413 & 0xff);\n      if (exponent != 0x14) {\n        result = result | bitMask + input1 >> (0x34 - exponent & 0xff);\n      }\n    }\n    else {\n      result = result << (shiftedBits - 0x413 & 0xff) | input1 << (shiftedBits - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_with_sign_080095b8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "bitMask",
                "uVar2": "shiftedBits",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "exponent"
            },
            "calling": [
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_d2iz"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_float_to_double_08009654",
            "code": "\nlonglong convertFloatToDouble_08009654(uint inputInteger1,uint inputInteger2)\n\n{\n  uint bitDifference;\n  uint shiftedBit;\n  longlong convertedValue;\n  \n  convertedValue = CONCAT44(inputInteger2,inputInteger1);\n  shiftedBit = (inputInteger2 << 1) >> 0x15;\n  bitDifference = shiftedBit - 0x3ff;\n  if ((int)bitDifference < 0x14) {\n    if ((int)bitDifference < 0) {\n      inputInteger2 = inputInteger2 & 0x80000000;\n      if (bitDifference == 0xffffffff) {\n        inputInteger2 = inputInteger2 | 0x3ff00000;\n      }\n      convertedValue = (ulonglong)inputInteger2 << 0x20;\n    }\n    else {\n      shiftedBit = 0xfffff >> (bitDifference & 0xff);\n      convertedValue = CONCAT44(inputInteger2,inputInteger1);\n      if ((inputInteger2 & shiftedBit | inputInteger1) != 0) {\n        convertedValue = (ulonglong)(inputInteger2 + (0x80000 >> (bitDifference & 0xff)) & ~shiftedBit) << 0x20;\n      }\n    }\n  }\n  else if ((int)bitDifference < 0x34) {\n    shiftedBit = 0xffffffff >> (shiftedBit - 0x413 & 0xff);\n    if ((inputInteger1 & shiftedBit) != 0) {\n      bitDifference = 1 << (0x33 - bitDifference & 0xff);\n      if (CARRY4(inputInteger1,bitDifference) != false) {\n        inputInteger2 = inputInteger2 + 1;\n      }\n      convertedValue = CONCAT44(inputInteger2,inputInteger1 + bitDifference & ~shiftedBit);\n    }\n  }\n  else {\n    convertedValue = CONCAT44(inputInteger2,inputInteger1);\n    if (bitDifference == 0x400) {\n      convertedValue = __aeabi_dadd();\n    }\n  }\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_float_to_double_08009654",
                "param_1": "inputInteger1",
                "param_2": "inputInteger2",
                "uVar1": "bitDifference",
                "uVar2": "shiftedBit",
                "lVar3": "convertedValue"
            },
            "calling": [
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "compute_trigonometric_value_080096e8",
            "code": "\nundefined4 compute_trigonometric_value_080096e8(undefined4 input_value,uint flags)\n\n{\n  undefined4 result;\n  uint remainder;\n  undefined4 angle;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  \n  if (0x3fe921fb < (flags & 0x7fffffff)) {\n    if ((flags & 0x7fffffff) < 0x7ff00000) {\n      remainder = __ieee754_rem_pio2(input_value,flags,&angle);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = __kernel_cos(angle,temp_1,temp_2,temp_3);\n      }\n      else if (remainder == 2) {\n        result = __kernel_sin(angle,temp_1,temp_2,temp_3,1);\n      }\n      else if (remainder == 0) {\n        result = __kernel_sin(angle,temp_1,temp_2,temp_3,1);\n      }\n      else {\n        result = __kernel_cos(angle,temp_1,temp_2,temp_3);\n      }\n    }\n    else {\n      result = __subdf3(input_value,flags,input_value,flags);\n    }\n    return result;\n  }\n  result = __kernel_sin(input_value,flags,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "compute_trigonometric_value_080096e8",
                "param_1": "input_value",
                "param_2": "flags",
                "uVar1": "result",
                "uVar2": "remainder",
                "local_28": "angle",
                "uStack_24": "temp_1",
                "local_20": "temp_2",
                "uStack_1c": "temp_3"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_cos",
                "__subdf3",
                "__kernel_sin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "extract_bits_and_concat_08009798",
            "code": "\nlonglong extractBitsAndConcat_08009798(uint input1,uint input2,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  uint shiftedResult;\n  uint shiftedBits;\n  longlong result;\n  \n  shiftedBits = (input2 << 1) >> 0x15;\n  shiftedResult = shiftedBits - 0x3ff;\n  if ((int)shiftedResult < 0x14) {\n    if ((int)shiftedResult < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (shiftedResult & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shiftedResult < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (shiftedBits - 0x413 & 0xff)));\n    }\n    if (shiftedResult != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = __aeabi_dadd(input1,input2,input1,input2,unusedParam2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "extract_bits_and_concat_08009798",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "uVar1": "shiftedResult",
                "uVar2": "shiftedBits",
                "lVar3": "result"
            },
            "calling": [
                "settings_store_global_setting",
                "protocol_execute_line",
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009818": {
            "entrypoint": "0x08009818",
            "current_name": "FUN_08009818",
            "code": "\nuint __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  \n  uVar4 = param_4 & 0x7fffffff;\n  if (((uVar4 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar5 = param_2 & 0x7fffffff, (uVar5 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      uVar4 = atan();\n      return uVar4;\n    }\n    uVar3 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if ((uVar5 | param_1) == 0) {\n      if (uVar3 == 2) {\n        param_1 = 0x54442d18;\n      }\n      else if (uVar3 == 3) {\n        param_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((uVar4 | param_3) != 0) {\n        if (uVar4 == 0x7ff00000) {\n          uVar3 = uVar3 - 1;\n          if (uVar5 == 0x7ff00000) {\n            if (uVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + uVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (uVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + uVar3 * 8);\n          }\n          return 0;\n        }\n        if (uVar5 != 0x7ff00000) {\n          iVar1 = (int)(uVar5 - uVar4) >> 0x14;\n          if ((int)(uVar5 - uVar4) < 0x3d00000) {\n            if (((int)param_4 < 0) && (iVar1 + 0x3c < 0 != SCARRY4(iVar1,0x3c))) {\n              uVar6 = 0;\n            }\n            else {\n              __divdf3(param_1,param_2,param_3,param_4,param_4);\n              fabs();\n              uVar6 = atan();\n            }\n          }\n          else {\n            uVar6 = 0x3ff921fb54442d18;\n          }\n          uVar2 = (undefined4)((ulonglong)uVar6 >> 0x20);\n          uVar4 = (uint)uVar6;\n          if (uVar3 == 1) {\n            return uVar4;\n          }\n          if (uVar3 == 2) {\n            uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n            uVar4 = __subdf3(0x54442d18,0x400921fb,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n            return uVar4;\n          }\n          if (uVar3 == 0) {\n            return uVar4;\n          }\n          uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n          uVar4 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),0x54442d18,0x400921fb);\n          return uVar4;\n        }\n      }\n      if ((int)param_2 < 0) {\n        param_1 = 0x54442d18;\n      }\n      else {\n        param_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    param_1 = __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return param_1;\n}\n\n",
            "renaming": {},
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_length1,undefined4 side_length2,undefined4 side_length3,undefined4 side_length4)\n\n{\n  int is_finite;\n  undefined4 *errno_ptr;\n  int *errno_value_ptr;\n  undefined8 result;\n  undefined4 matherr_type;\n  char *matherr_name;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 lower_descriptor;\n  undefined4 upper_descriptor;\n  int errno_value;\n  \n  result = __ieee754_hypot();\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  errno_value = finite();\n  if (errno_value != 0) {\n    return result;\n  }\n  is_finite = finite(side_length1,side_length2);\n  if (is_finite == 0) {\n    return result;\n  }\n  is_finite = finite(side_length3,side_length4);\n  if (is_finite == 0) {\n    return result;\n  }\n  matherr_type = 3;\n  matherr_name = \"hypot\";\n  param1_copy = side_length1;\n  param2_copy = side_length2;\n  param3_copy = side_length3;\n  param4_copy = side_length4;\n  if (DAT_20000014 == '\\0') {\n    lower_descriptor = 0xe0000000;\n    upper_descriptor = 0x47efffff;\nLAB_080098aa:\n    is_finite = matherr(&matherr_type);\n    if (is_finite != 0) goto LAB_08009896;\n  }\n  else {\n    lower_descriptor = 0;\n    upper_descriptor = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  errno_ptr = (undefined4 *)__errno();\n  *errno_ptr = 0x22;\nLAB_08009896:\n  result = CONCAT44(upper_descriptor,lower_descriptor);\n  if (errno_value != 0) {\n    errno_value_ptr = (int *)__errno();\n    result = CONCAT44(upper_descriptor,lower_descriptor);\n    *errno_value_ptr = errno_value;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "side_length1",
                "param_2": "side_length2",
                "param_3": "side_length3",
                "param_4": "side_length4",
                "iVar1": "is_finite",
                "puVar2": "errno_ptr",
                "piVar3": "errno_value_ptr",
                "uVar4": "result",
                "local_50": "matherr_type",
                "pcStack_4c": "matherr_name",
                "local_48": "param1_copy",
                "uStack_44": "param2_copy",
                "local_40": "param3_copy",
                "uStack_3c": "param4_copy",
                "local_38": "lower_descriptor",
                "uStack_34": "upper_descriptor",
                "local_30": "errno_value"
            },
            "calling": [
                "mc_arc",
                "gc_execute_line"
            ],
            "called": [
                "matherr",
                "__errno",
                "__ieee754_hypot",
                "finite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "calculate_square_root_080098d0",
            "code": "\nundefined4 calculateSquareRoot_080098d0(undefined4 value1,undefined4 value2)\n\n{\n  char flag;\n  undefined4 squareRoot;\n  int comparisonResult;\n  undefined4 *errorFlagPtr;\n  int *errorPtr;\n  undefined4 tempValue1;\n  undefined *tempPointer;\n  undefined4 value1Copy;\n  undefined4 value2Copy;\n  undefined4 value1Copy2;\n  undefined4 value2Copy2;\n  undefined8 returnValue;\n  int errorValue;\n  \n  squareRoot = __ieee754_sqrt();\n  flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (errorValue = __unorddf2(value1,value2,value1,value2), errorValue != 0)) ||\n     (comparisonResult = __aeabi_dcmplt(value1,value2,0,0), comparisonResult == 0)) {\n    return squareRoot;\n  }\n  tempValue1 = 1;\n  tempPointer = &DAT_0800be5c;\n  value1Copy = value1;\n  value2Copy = value2;\n  value1Copy2 = value1;\n  value2Copy2 = value2;\n  if (flag == '\\0') {\n    returnValue = 0;\nLAB_0800996c:\n    comparisonResult = matherr(&tempValue1);\n    if (comparisonResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    returnValue = __divdf3(0,0,0,0);\n    if (flag != '\\x02') goto LAB_0800996c;\n  }\n  errorFlagPtr = (undefined4 *)__errno();\n  *errorFlagPtr = 0x21;\njoined_r0x0800997a:\n  if (errorValue != 0) {\n    errorPtr = (int *)__errno();\n    *errorPtr = errorValue;\n  }\n  return (undefined4)returnValue;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "calculate_square_root_080098d0",
                "param_1": "value1",
                "param_2": "value2",
                "cVar1": "flag",
                "uVar2": "squareRoot",
                "iVar3": "comparisonResult",
                "puVar4": "errorFlagPtr",
                "piVar5": "errorPtr",
                "local_50": "tempValue1",
                "local_4c": "tempPointer",
                "local_48": "value1Copy",
                "uStack_44": "value2Copy",
                "local_40": "value1Copy2",
                "uStack_3c": "value2Copy2",
                "local_38": "returnValue",
                "local_30": "errorValue"
            },
            "calling": [
                "gc_execute_line",
                "max_allowable_speed",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__ieee754_sqrt",
                "matherr",
                "__errno",
                "__unorddf2",
                "__divdf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_atan_08009990",
            "code": "\nuint calculateAtan_08009990(uint x,uint y,uint z,uint w)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = w & 0x7fffffff;\n  if (((tempVar4 | (-z | z) >> 0x1f) < 0x7ff00001) &&\n     (tempVar5 = y & 0x7fffffff, (tempVar5 | (-x | x) >> 0x1f) < 0x7ff00001)) {\n    if ((w + 0xc0100000 | z) == 0) {\n      tempVar4 = atan();\n      return tempVar4;\n    }\n    tempVar3 = (int)w >> 0x1e & 2U | y >> 0x1f;\n    if ((tempVar5 | x) == 0) {\n      if (tempVar3 == 2) {\n        x = 0x54442d18;\n      }\n      else if (tempVar3 == 3) {\n        x = 0x54442d18;\n      }\n    }\n    else {\n      if ((tempVar4 | z) != 0) {\n        if (tempVar4 == 0x7ff00000) {\n          tempVar3 = tempVar3 - 1;\n          if (tempVar5 == 0x7ff00000) {\n            if (tempVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + tempVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (tempVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + tempVar3 * 8);\n          }\n          return 0;\n        }\n        if (tempVar5 != 0x7ff00000) {\n          tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n          if ((int)(tempVar5 - tempVar4) < 0x3d00000) {\n            if (((int)w < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n              tempVar6 = 0;\n            }\n            else {\n              __divdf3(x,y,z,w,w);\n              fabs();\n              tempVar6 = atan();\n            }\n          }\n          else {\n            tempVar6 = 0x3ff921fb54442d18;\n          }\n          tempVar2 = (undefined4)((ulonglong)tempVar6 >> 0x20);\n          tempVar4 = (uint)tempVar6;\n          if (tempVar3 == 1) {\n            return tempVar4;\n          }\n          if (tempVar3 == 2) {\n            tempVar6 = __subdf3(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n            tempVar4 = __subdf3(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n            return tempVar4;\n          }\n          if (tempVar3 == 0) {\n            return tempVar4;\n          }\n          tempVar6 = __subdf3(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n          tempVar4 = __subdf3((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n          return tempVar4;\n        }\n      }\n      if ((int)y < 0) {\n        x = 0x54442d18;\n      }\n      else {\n        x = 0x54442d18;\n      }\n    }\n  }\n  else {\n    x = __aeabi_dadd(z,w,x,y);\n  }\n  return x;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_atan_08009990",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "param_4": "w",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "__aeabi_dadd",
                "atan",
                "fabs",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_square_root_08009b24",
            "code": "\nuint calculateSquareRoot_08009b24(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  int condition;\n  uint result2;\n  int tempVar1;\n  undefined4 tempVar2;\n  int tempVar3;\n  uint tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  undefined8 calculation1;\n  undefined8 calculation2;\n  undefined8 calculation3;\n  undefined8 calculation4;\n  int count;\n  \n  input2 = input2 & 0x7fffffff;\n  input4 = input4 & 0x7fffffff;\n  result2 = input1;\n  tempVar4 = input2;\n  if (input2 < input4) {\n    result2 = input3;\n    input3 = input1;\n    tempVar4 = input4;\n    input4 = input2;\n  }\n  if (0x3c00000 < (int)(tempVar4 - input4)) {\n    result2 = addDouble(result2,tempVar4,input3,input4);\n    return result2;\n  }\n  if (tempVar4 < 0x5f300001) {\n    count = 0;\n  }\n  else {\n    if (0x7fefffff < tempVar4) {\n      if ((tempVar4 & 0xfffff | result2) != 0) {\n        result2 = addDouble(result2,tempVar4,input3,input4);\n      }\n      if ((input4 ^ 0x7ff00000 | input3) != 0) {\n        return result2;\n      }\n      return input3;\n    }\n    tempVar4 = tempVar4 + 0xda800000;\n    input4 = input4 + 0xda800000;\n    count = 600;\n  }\n  calculation2 = concatenateDouble(tempVar4,result2);\n  calculation1 = concatenateDouble(input4,input3);\n  if ((int)input4 < 0x20b00000) {\n    if ((int)input4 < 0x100000) {\n      if ((input4 | input3) == 0) {\n        return result2;\n      }\n      calculation1 = multiplyDouble(input3,input4,0,0x7fd00000);\n      calculation2 = multiplyDouble(result2,tempVar4,0,0x7fd00000);\n      count = count + -0x3fe;\n    }\n    else {\n      tempVar4 = tempVar4 + 0x25800000;\n      calculation2 = concatenateDouble(tempVar4,result2);\n      input4 = input4 + 0x25800000;\n      calculation1 = concatenateDouble(input4,input3);\n      count = count + -600;\n    }\n  }\n  tempVar6 = (undefined4)((ulonglong)calculation2 >> 0x20);\n  tempVar5 = (undefined4)calculation2;\n  tempVar3 = (int)((ulonglong)calculation1 >> 0x20);\n  tempVar2 = (undefined4)calculation1;\n  calculation1 = subtractDouble(tempVar5,tempVar6,tempVar2,tempVar3);\n  tempVar1 = (int)((ulonglong)calculation1 >> 0x20);\n  result1 = (undefined4)calculation1;\n  condition = compareDoubleLessThan(tempVar2,tempVar3,result1,tempVar1);\n  if (condition == 0) {\n    calculation1 = multiplyDouble(0,input4,0);\n    calculation2 = multiplyDouble(result1,tempVar1 + -0x80000000,result1,tempVar1);\n    calculation3 = addDouble(tempVar5,tempVar6,tempVar5,tempVar6);\n    calculation3 = subtractDouble((int)calculation3,(int)((ulonglong)calculation3 >> 0x20),0,tempVar4 + 0x100000);\n    calculation3 = multiplyDouble((int)calculation3,(int)((ulonglong)calculation3 >> 0x20),tempVar2,tempVar3);\n    calculation4 = subtractDouble(tempVar2,tempVar3,0,input4);\n    calculation4 = multiplyDouble((int)calculation4,(int)((ulonglong)calculation4 >> 0x20),0,tempVar4 + 0x100000);\n    calculation3 = addDouble((int)calculation3,(int)((ulonglong)calculation3 >> 0x20),(int)calculation4,\n                          (int)((ulonglong)calculation4 >> 0x20));\n    calculation2 = subtractDouble((int)calculation2,(int)((ulonglong)calculation2 >> 0x20),(int)calculation3,\n                      (int)((ulonglong)calculation3 >> 0x20));\n    subtractDouble((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),(int)calculation2,\n             (int)((ulonglong)calculation2 >> 0x20));\n    calculation1 = calculateSqrt();\n  }\n  else {\n    calculation1 = multiplyDouble(0,tempVar4,0,tempVar4);\n    calculation2 = multiplyDouble(tempVar2,tempVar3 + -0x80000000,tempVar2,tempVar3);\n    calculation3 = addDouble(tempVar5,tempVar6,0,tempVar4);\n    calculation4 = subtractDouble(tempVar5,tempVar6,0,tempVar4);\n    calculation3 = multiplyDouble((int)calculation3,(int)((ulonglong)calculation3 >> 0x20),(int)calculation4,\n                      (int)((ulonglong)calculation4 >> 0x20));\n    calculation2 = subtractDouble((int)calculation2,(int)((ulonglong)calculation2 >> 0x20),(int)calculation3,\n                      (int)((ulonglong)calculation3 >> 0x20));\n    subtractDouble((int)calculation1,(int)((ulonglong)calculation1 >> 0x20),(int)calculation2,\n             (int)((ulonglong)calculation2 >> 0x20));\n    calculation1 = calculateSqrt();\n  }\n  result2 = (uint)calculation1;\n  if (count != 0) {\n    result2 = multiplyDouble(result2,(int)((ulonglong)calculation1 >> 0x20),0,count * 0x100000 + 0x3ff00000);\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_square_root_08009b24",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "iVar2": "condition",
                "uVar3": "result2",
                "iVar4": "tempVar1",
                "uVar5": "tempVar2",
                "iVar6": "tempVar3",
                "uVar7": "tempVar4",
                "uVar8": "tempVar5",
                "uVar9": "tempVar6",
                "uVar10": "calculation1",
                "uVar11": "calculation2",
                "uVar12": "calculation3",
                "uVar13": "calculation4",
                "local_3c": "count",
                "__aeabi_dadd": "addDouble",
                "__aeabi_dcmplt": "compareDoubleLessThan",
                "__subdf3": "subtractDouble",
                "__ieee754_sqrt": "calculateSqrt",
                "__muldf3": "multiplyDouble",
                "CONCAT44": "concatenateDouble"
            },
            "calling": [
                "hypot"
            ],
            "called": [
                "__ieee754_sqrt",
                "__aeabi_dadd",
                "__subdf3",
                "__muldf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_result_08009d78",
            "code": "\nint calculateResult_08009d78(undefined4 input1,uint input2,undefined8 *output)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  uint absInput2;\n  int outputCode;\n  undefined8 temp6;\n  undefined8 temp7;\n  undefined8 finalResult;\n  undefined4 localResult1;\n  undefined4 localResult2;\n  undefined8 localTemp1;\n  undefined8 localTemp2;\n  undefined8 localTemp3;\n  \n  absInput2 = input2 & 0x7fffffff;\n  if (absInput2 < 0x3fe921fc) {\n    *(undefined4 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(undefined4 *)(output + 1) = 0;\n    *(undefined4 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if (absInput2 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      temp6 = __aeabi_dadd(input1,input2,0x54400000,0x3ff921fb);\n      temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n      result1 = (undefined4)temp6;\n      if (absInput2 != 0x3ff921fb) {\n        temp6 = __aeabi_dadd(result1,temp1,0x1a626331,0x3dd0b461);\n        *output = temp6;\n        temp6 = __subdf3(result1,temp1);\n        temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x1a626331,0x3dd0b461);\n        output[1] = temp6;\n        return -1;\n      }\n      temp6 = __aeabi_dadd(result1,temp1,0x1a600000,0x3dd0b461);\n      result1 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp7 = __aeabi_dadd((int)temp6,result1,0x2e037073,0x3ba3198a);\n      *output = temp7;\n      temp6 = __subdf3((int)temp6,result1);\n      temp6 = __aeabi_dadd((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x2e037073,0x3ba3198a);\n      output[1] = temp6;\n      return -1;\n    }\n    temp6 = __subdf3();\n    temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n    result1 = (undefined4)temp6;\n    if (absInput2 != 0x3ff921fb) {\n      temp6 = __subdf3(result1,temp1,0x1a626331,0x3dd0b461);\n      *output = temp6;\n      temp6 = __subdf3(result1,temp1);\n      temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x1a626331,0x3dd0b461);\n      output[1] = temp6;\n      return 1;\n    }\n    temp6 = __subdf3(result1,temp1,0x1a600000,0x3dd0b461);\n    result1 = (undefined4)((ulonglong)temp6 >> 0x20);\n    temp7 = __subdf3((int)temp6,result1,0x2e037073,0x3ba3198a);\n    *output = temp7;\n    temp6 = __subdf3((int)temp6,result1);\n    temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x2e037073,0x3ba3198a);\n    output[1] = temp6;\n    return 1;\n  }\n  if (0x413921fb < absInput2) {\n    if (0x7fefffff < absInput2) {\n      temp6 = __subdf3(input1,input2,input1,input2);\n      output[1] = temp6;\n      *output = temp6;\n      return 0;\n    }\n    outputCode = ((int)absInput2 >> 0x14) + -0x416;\n    __aeabi_d2iz();\n    localTemp1 = __aeabi_i2d();\n    temp6 = __subdf3(input1,absInput2 + outputCode * -0x100000,(int)localTemp1,\n                      (int)((ulonglong)localTemp1 >> 0x20));\n    temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,0x41700000);\n    __aeabi_d2iz();\n    localTemp2 = __aeabi_i2d();\n    temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20));\n    localTemp3 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,0x41700000);\n    __aeabi_dcmpeq((int)localTemp3,(int)((ulonglong)localTemp3 >> 0x20),0,0);\n    outputCode = __kernel_rem_pio2(&localTemp1,output,outputCode);\n    if (-1 < (int)input2) {\n      return outputCode;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -outputCode;\n  }\n  temp6 = fabs();\n  temp1 = (undefined4)((ulonglong)temp6 >> 0x20);\n  temp7 = __muldf3((int)temp6,temp1,0x6dc9c883,0x3fe45f30);\n  __aeabi_dadd((int)temp7,(int)((ulonglong)temp7 >> 0x20),0,0x3fe00000);\n  outputCode = __aeabi_d2iz();\n  temp7 = __aeabi_i2d();\n  temp2 = (undefined4)((ulonglong)temp7 >> 0x20);\n  result1 = (undefined4)temp7;\n  temp7 = __muldf3(result1,temp2,0x54400000,0x3ff921fb);\n  temp6 = __subdf3((int)temp6,temp1,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n  temp3 = (undefined4)((ulonglong)temp6 >> 0x20);\n  temp1 = (undefined4)temp6;\n  temp7 = __muldf3(result1,temp2,0x1a626331,0x3dd0b461);\n  if ((0x1f < outputCode) || (*(uint *)(&DAT_0800be98 + (outputCode + -1) * 4) == absInput2)) {\n    finalResult = __subdf3(temp1,temp3,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n    if ((int)((absInput2 >> 0x14) - ((uint)((int)((ulonglong)finalResult >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp7 = __muldf3(result1,temp2,0x1a600000,0x3dd0b461);\n    temp4 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp6 = __subdf3(temp1,temp3,(int)temp7,temp4);\n    temp5 = (undefined4)((ulonglong)temp6 >> 0x20);\n    result2 = (undefined4)temp6;\n    finalResult = __subdf3(temp1,temp3,result2,temp5);\n    temp7 = __subdf3((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)temp7,temp4);\n    finalResult = __muldf3(result1,temp2,0x2e037073,0x3ba3198a);\n    temp7 = __subdf3((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)temp7,\n                      (int)((ulonglong)temp7 >> 0x20));\n    finalResult = __subdf3(result2,temp5,(int)temp7,(int)((ulonglong)temp7 >> 0x20));\n    if ((int)(((int)absInput2 >> 0x14) - ((uint)((int)((ulonglong)finalResult >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp7 = __muldf3(result1,temp2,0x2e000000,0x3ba3198a);\n    temp1 = (undefined4)((ulonglong)temp7 >> 0x20);\n    temp6 = __subdf3(result2,temp5,(int)temp7,temp1);\n    finalResult = __subdf3(result2,temp5);\n    temp7 = __subdf3((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)temp7,temp1);\n    finalResult = __muldf3(result1,temp2,0x252049c1,0x397b839a);\n    temp7 = __subdf3((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)temp7,\n                      (int)((ulonglong)temp7 >> 0x20));\n  }\n  finalResult = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                    (int)((ulonglong)temp7 >> 0x20));\nLAB_0800a0ce:\n  localResult2 = (undefined4)((ulonglong)temp6 >> 0x20);\n  localResult1 = (undefined4)temp6;\n  *output = finalResult;\n  temp6 = __subdf3(localResult1,localResult2);\n  temp6 = __subdf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),(int)temp7,\n                    (int)((ulonglong)temp7 >> 0x20));\n  output[1] = temp6;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)finalResult;\n    *(int *)((int)output + 4) = (int)((ulonglong)finalResult >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)temp6;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)temp6 >> 0x20) + -0x80000000;\n    outputCode = -outputCode;\n  }\n  return outputCode;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "absInput2",
                "iVar9": "outputCode",
                "uVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "finalResult",
                "local_50": "localResult1",
                "uStack_4c": "localResult2",
                "local_40": "localTemp1",
                "local_38": "localTemp2",
                "local_30": "localTemp3"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "fabs",
                "__aeabi_i2d",
                "__aeabi_dcmpeq",
                "__kernel_rem_pio2",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_exponential_0800a1bc",
            "code": "\nuint calculateExponential_0800a1bc(uint base,uint exponent)\n\n{\n  uint tempExponent;\n  int counter;\n  uint temp;\n  undefined4 result;\n  uint mask;\n  uint shift;\n  uint remainder;\n  uint compareResult;\n  uint tempBase;\n  int loopCount;\n  uint tempSubtraction;\n  uint normalizedExponent;\n  undefined8 tempResult;\n  \n  if ((~exponent & 0x7ff00000) == 0) {\n    tempResult = __muldf3(base,exponent,base,exponent);\n    remainder = __aeabi_dadd((int)tempResult,(int)((ulonglong)tempResult >> 0x20),base,exponent);\n    return remainder;\n  }\n  if ((int)exponent < 1) {\n    if ((exponent & 0x7fffffff | base) == 0) {\n      return base;\n    }\n    if (exponent != 0) {\n      tempResult = __subdf3(base,exponent,base);\n      result = (undefined4)((ulonglong)tempResult >> 0x20);\n      remainder = __divdf3((int)tempResult,result,(int)tempResult,result);\n      return remainder;\n    }\n    do {\n      tempBase = base;\n      remainder = tempBase >> 0xb;\n      exponent = exponent - 0x15;\n      base = tempBase << 0x15;\n    } while (remainder == 0);\n    tempExponent = exponent;\n    if (-1 < (int)tempBase) goto LAB_0800a290;\n    normalizedExponent = 0x20;\n    mask = 0xffffffff;\n    tempBase = base;\n  }\n  else {\n    tempExponent = (int)exponent >> 0x14;\n    remainder = exponent;\n    tempBase = base;\n    if (tempExponent != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    tempBase = 0;\n    normalizedExponent = remainder;\n    do {\n      mask = tempBase;\n      remainder = normalizedExponent << 1;\n      loopCount = normalizedExponent << 0xc;\n      tempBase = mask + 1;\n      normalizedExponent = remainder;\n    } while (-1 < loopCount);\n    normalizedExponent = 0x20 - tempBase;\n    exponent = tempExponent;\n    tempBase = base << (tempBase & 0xff);\n  }\n  remainder = base >> (normalizedExponent & 0xff) | remainder;\n  tempExponent = exponent - mask;\nLAB_0800a1da:\n  remainder = remainder & 0xfffff | 0x100000;\n  if (-1 < (int)(tempExponent << 0x1f)) {\n    remainder = remainder * 2 - ((int)tempBase >> 0x1f);\n    tempBase = tempBase << 1;\n  }\n  normalizedExponent = 0;\n  remainder = remainder * 2 - ((int)tempBase >> 0x1f);\n  tempBase = tempBase << 1;\n  tempExponent = 0;\n  loopCount = 0x16;\n  mask = 0x200000;\n  do {\n    counter = tempExponent + mask;\n    if (counter <= (int)remainder) {\n      remainder = remainder - counter;\n      tempExponent = counter + mask;\n      normalizedExponent = normalizedExponent + mask;\n    }\n    loopCount = loopCount + -1;\n    remainder = remainder * 2 - ((int)tempBase >> 0x1f);\n    mask = mask >> 1;\n    tempBase = tempBase << 1;\n  } while (loopCount != 0);\n  counter = 0x20;\n  shift = 0x80000000;\n  loopCount = 0;\n  mask = 0;\n  do {\n    temp = shift + loopCount;\n    tempSubtraction = tempExponent;\n    if ((int)tempExponent < (int)remainder) {\n      if ((int)temp < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp + shift)) {\n          tempSubtraction = tempExponent + 1;\n        }\n      }\n      compareResult = remainder - tempExponent;\n      tempExponent = tempSubtraction;\n      if (tempBase < temp) {\n        compareResult = compareResult - 1;\n      }\nLAB_0800a262:\n      loopCount = temp + shift;\n      tempBase = tempBase - temp;\n      mask = mask + shift;\n      remainder = compareResult;\n    }\n    else if ((remainder == tempExponent) && (temp <= tempBase)) {\n      if ((int)temp < 0) goto LAB_0800a26a;\n      compareResult = 0;\n      tempExponent = remainder;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    shift = shift >> 1;\n    remainder = remainder * 2 - ((int)tempBase >> 0x1f);\n    tempBase = tempBase << 1;\n    if (counter == 0) {\n      if ((remainder | tempBase) == 0) {\n        mask = mask >> 1;\n      }\n      else if (mask == 0xffffffff) {\n        normalizedExponent = normalizedExponent + 1;\n        mask = 0;\n      }\n      else {\n        mask = mask + 1 >> 1;\n      }\n      if ((normalizedExponent & 1) != 0) {\n        mask = mask | 0x80000000;\n      }\n      return mask;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_exponential_0800a1bc",
                "param_1": "base",
                "param_2": "exponent",
                "uVar1": "tempExponent",
                "iVar2": "counter",
                "uVar3": "temp",
                "uVar4": "result",
                "uVar5": "mask",
                "uVar6": "shift",
                "uVar7": "remainder",
                "uVar8": "compareResult",
                "uVar9": "tempBase",
                "iVar10": "loopCount",
                "uVar11": "tempSubtraction",
                "uVar12": "normalizedExponent",
                "uVar13": "tempResult"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot"
            ],
            "called": [
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_square_root_0800a348",
            "code": "\nundefined4 calculateSquareRoot_0800a348(undefined4 base,uint exponent,undefined4 multiplier1,undefined4 multiplier2)\n\n{\n  int isZero;\n  undefined4 resultLow;\n  undefined4 resultHigh;\n  uint absExponent;\n  undefined8 partialResult;\n  undefined8 finalResultLow;\n  undefined8 finalResultHigh;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  \n  absExponent = exponent & 0x7fffffff;\n  if (absExponent < 0x3e400000) {\n    isZero = __aeabi_d2iz();\n    if (isZero == 0) {\n      return 0;\n    }\n    partialResult = __muldf3(base,exponent,base,exponent);\n    resultHigh = (undefined4)((ulonglong)partialResult >> 0x20);\n    resultLow = (undefined4)partialResult;\n    finalResultLow = __muldf3(resultLow,resultHigh,0xbe8838d4,0xbda8fae9);\n    finalResultLow = __aeabi_dadd((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    finalResultLow = __subdf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0x809c52ad,0x3e927e4f);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    finalResultLow = __aeabi_dadd((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0x19cb1590,0x3efa01a0);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    finalResultLow = __subdf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0x16c15177,0x3f56c16c);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    finalResultLow = __aeabi_dadd((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0x5555554c,0x3fa55555);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n  }\n  else {\n    partialResult = __muldf3(base,exponent,base,exponent);\n    resultHigh = (undefined4)((ulonglong)partialResult >> 0x20);\n    resultLow = (undefined4)partialResult;\n    finalResultLow = __muldf3(resultLow,resultHigh,0xbe8838d4,0xbda8fae9);\n    finalResultLow = __aeabi_dadd((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    finalResultLow = __subdf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0x809c52ad,0x3e927e4f);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    finalResultLow = __aeabi_dadd((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0x19cb1590,0x3efa01a0);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    finalResultLow = __subdf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0x16c15177,0x3f56c16c);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    finalResultLow = __aeabi_dadd((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),0x5555554c,0x3fa55555);\n    finalResultLow = __muldf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),resultLow,resultHigh);\n    if (0x3fd33332 < absExponent) {\n      if (absExponent < 0x3fe90001) {\n        isZero = absExponent - 0x200000;\n        partialResult = __subdf3(0,0x3ff00000,0,isZero);\n      }\n      else {\n        isZero = 0x3fd20000;\n        partialResult = 0x3fe7000000000000;\n      }\n      tempVar4 = (undefined4)((ulonglong)partialResult >> 0x20);\n      tempVar3 = (undefined4)partialResult;\n      partialResult = __muldf3(resultLow,resultHigh,0,0x3fe00000);\n      partialResult = __subdf3((int)partialResult,(int)((ulonglong)partialResult >> 0x20),0,isZero);\n      finalResultLow = __muldf3(resultLow,resultHigh,(int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20));\n      finalResultHigh = __muldf3(base,exponent,multiplier1,multiplier2);\n      finalResultLow = __subdf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),(int)finalResultHigh,\n                       (int)((ulonglong)finalResultHigh >> 0x20));\n      partialResult = __subdf3((int)partialResult,(int)((ulonglong)partialResult >> 0x20),(int)finalResultLow,\n                       (int)((ulonglong)finalResultLow >> 0x20));\n      resultLow = __subdf3(tempVar3,tempVar4,(int)partialResult,(int)((ulonglong)partialResult >> 0x20));\n      return resultLow;\n    }\n  }\n  tempVar2 = (undefined4)((ulonglong)finalResultLow >> 0x20);\n  tempVar1 = (undefined4)finalResultLow;\n  resultLow = (undefined4)((ulonglong)partialResult >> 0x20);\n  finalResultLow = __muldf3((int)partialResult,resultLow,0,0x3fe00000);\n  partialResult = __muldf3((int)partialResult,resultLow,tempVar1,tempVar2);\n  finalResultHigh = __muldf3(base,exponent,multiplier1,multiplier2);\n  partialResult = __subdf3((int)partialResult,(int)((ulonglong)partialResult >> 0x20),(int)finalResultHigh,\n                   (int)((ulonglong)finalResultHigh >> 0x20));\n  partialResult = __subdf3((int)finalResultLow,(int)((ulonglong)finalResultLow >> 0x20),(int)partialResult,\n                   (int)((ulonglong)partialResult >> 0x20));\n  resultLow = __subdf3(0,0x3ff00000,(int)partialResult,(int)((ulonglong)partialResult >> 0x20));\n  return resultLow;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_square_root_0800a348",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "multiplier1",
                "param_4": "multiplier2",
                "iVar1": "isZero",
                "uVar2": "resultLow",
                "uVar3": "resultHigh",
                "uVar4": "absExponent",
                "uVar5": "partialResult",
                "uVar6": "finalResultLow",
                "uVar7": "finalResultHigh",
                "local_30": "tempVar1",
                "uStack_2c": "tempVar2",
                "local_28": "tempVar3",
                "uStack_24": "tempVar4"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "FUNC_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  iVar15 = *(int *)(&DAT_0800c060 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (param_3 + -3) / 0x18;\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = __aeabi_i2d(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = __muldf3(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                            *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        __muldf3((int)uVar26,uVar6,0,0x3e700000);\n        __aeabi_d2iz();\n        uVar25 = __aeabi_i2d();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = __muldf3((int)uVar25,uVar8,0,0x41700000);\n        __subdf3((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = __aeabi_d2iz();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = __aeabi_dadd((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = scalbn((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    __muldf3((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = floor();\n    uVar25 = __muldf3((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,0x40200000);\n    uVar26 = __subdf3((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = __aeabi_d2iz();\n    uVar25 = __aeabi_i2d();\n    uVar26 = __subdf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                      (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = __aeabi_dcmpge(uVar8,uVar6,0,0x3fe00000);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = __subdf3(0,0x3ff00000,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          bVar24 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_258[0] == 0) {\n            bVar24 = false;\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                if (*puVar5 != 0) {\n                  iVar14 = iVar4 + 1;\n                  uVar12 = *puVar5;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n              bVar24 = false;\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\n            uVar12 = local_258[0];\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            bVar24 = true;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = __subdf3(0,0x3ff00000,uVar8,uVar6);\n          if (bVar24) {\n            uVar25 = scalbn(0,0x3ff00000,local_270);\n            uVar26 = __subdf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                              (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = __aeabi_dcmpeq((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = scalbn((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = __aeabi_dcmpge(uVar8,uVar6,0,0x41700000);\n      if (iVar9 == 0) {\n        uVar12 = __aeabi_d2iz(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        __muldf3(uVar8,uVar6,0,0x3e700000);\n        uVar12 = __aeabi_d2iz();\n        uVar26 = __aeabi_i2d();\n        uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x41700000);\n        __subdf3(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = __aeabi_d2iz();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = __aeabi_i2d(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = scalbn(0,0x3ff00000,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar26 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar26;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar26;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar26 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      uVar26 = 0;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar26 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar26;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar26 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = __aeabi_i2d(*puVar5);\n      uVar25 = __muldf3((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = __muldf3((int)uVar26,uVar8,0,0x3e700000);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    do {\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar8 = 0x40000000;\n        uVar6 = 0x3ff921fb;\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = &DAT_0800c028;\n        while( true ) {\n          uVar25 = __muldf3(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6);\n          uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar26 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            uVar8 = (undefined4)uVar26;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar26 = __aeabi_dadd(uVar8,uVar6,uVar11,uVar20);\n            uVar25 = __subdf3(uVar11,uVar20,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n            uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar25;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar26;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar26 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              uVar8 = (undefined4)uVar26;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar26 = __aeabi_dadd(uVar8,uVar6,uVar11,uVar20);\n              uVar25 = __subdf3(uVar11,uVar20,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n              uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar25;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar26;\n            } while (&local_168 + 1 != puVar16);\n            uVar26 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar26 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      uVar26 = 0;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar26 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar26 >> 0x20);\n  uVar8 = (undefined4)uVar26;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar26;\n    uVar26 = __subdf3((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),\n                            *(undefined4 *)(puVar16 + 1),*(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar26 = __subdf3((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar26 = CONCAT44((int)((ulonglong)uVar26 >> 0x20) + -0x80000000,(int)uVar26);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_260[1] + 8) = uVar26;\n  return uVar2 & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "calling": [
                "__ieee754_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__aeabi_i2d",
                "floor",
                "__aeabi_dcmpeq",
                "__aeabi_dcmpge",
                "scalbn",
                "__subdf3",
                "__muldf3"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_difference_0800adf0",
            "code": "\nundefined4\ncalculate_difference_0800adf0(undefined4 x,uint y,undefined4 param_3,undefined4 param_4,int is_reverse_needed)\n\n{\n  int is_zero;\n  undefined4 result1_high;\n  undefined4 result1_low;\n  undefined4 result2_high;\n  undefined4 result2_low;\n  undefined4 result3_high;\n  undefined8 result3_low;\n  undefined8 temp_result;\n  \n  if (((y & 0x7fffffff) < 0x3e400000) && (is_zero = __aeabi_d2iz(), is_zero == 0)) {\n    return x;\n  }\n  result3_low = __muldf3(x,y,x);\n  result2_high = (undefined4)((ulonglong)result3_low >> 0x20);\n  result1_low = (undefined4)result3_low;\n  result3_low = __muldf3(x,y,result1_low,result2_high);\n  result2_low = (undefined4)((ulonglong)result3_low >> 0x20);\n  result1_high = (undefined4)result3_low;\n  result3_low = __muldf3(result1_low,result2_high,0x5acfd57c,0x3de5d93a);\n  result3_low = __subdf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  result3_low = __muldf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),result1_low,result2_high);\n  result3_low = __aeabi_dadd((int)result3_low,(int)((ulonglong)result3_low >> 0x20),0x57b1fe7d,0x3ec71de3);\n  result3_low = __muldf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),result1_low,result2_high);\n  result3_low = __subdf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),0x19c161d5,0x3f2a01a0);\n  result3_low = __muldf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),result1_low,result2_high);\n  result3_low = __aeabi_dadd((int)result3_low,(int)((ulonglong)result3_low >> 0x20),0x1110f8a6,0x3f811111);\n  result3_high = (undefined4)((ulonglong)result3_low >> 0x20);\n  if (is_reverse_needed != 0) {\n    temp_result = __muldf3(param_3,param_4,0,0x3fe00000);\n    result3_low = __muldf3(result1_high,result2_low,(int)result3_low,result3_high);\n    result3_low = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)result3_low,\n                     (int)((ulonglong)result3_low >> 0x20));\n    result3_low = __muldf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),result1_low,result2_high);\n    result3_low = __subdf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),param_3,param_4);\n    temp_result = __muldf3(result1_high,result2_low,0x55555549,0x3fc55555);\n    result3_low = __aeabi_dadd((int)result3_low,(int)((ulonglong)result3_low >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n    result1_low = __subdf3(x,y,(int)result3_low,(int)((ulonglong)result3_low >> 0x20));\n    return result1_low;\n  }\n  result3_low = __muldf3(result1_low,result2_high,(int)result3_low,result3_high);\n  result3_low = __subdf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),0x55555549,0x3fc55555);\n  result3_low = __muldf3((int)result3_low,(int)((ulonglong)result3_low >> 0x20),result1_high,result2_low);\n  result1_low = __aeabi_dadd((int)result3_low,(int)((ulonglong)result3_low >> 0x20),x,y);\n  return result1_low;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_difference_0800adf0",
                "param_1": "x",
                "param_2": "y",
                "param_5": "is_reverse_needed",
                "iVar1": "is_zero",
                "uVar2": "result1_high",
                "uVar3": "result1_low",
                "uVar4": "result2_high",
                "uVar5": "result2_low",
                "uVar6": "result3_high",
                "uVar7": "result3_low",
                "uVar8": "temp_result"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_sine_0800af78",
            "code": "\nint calculateSine_0800af78(int angle,uint precision)\n\n{\n  undefined4 angle_low;\n  undefined4 angle_high;\n  undefined4 temp1;\n  undefined4 temp2;\n  int result;\n  undefined4 temp3;\n  uint mask;\n  undefined8 product1;\n  undefined8 product2;\n  undefined4 temp4;\n  \n  product1 = CONCAT44(precision,angle);\n  mask = precision & 0x7fffffff;\n  if (mask < 0x44100000) {\n    if (mask < 0x3fdc0000) {\n      if (mask < 0x3e200000) {\n        product2 = __aeabi_dadd(angle,precision,0x8800759c,0x7e37e43c);\n        result = __aeabi_dcmpgt((int)product2,(int)((ulonglong)product2 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return angle;\n        }\n      }\n      result = -1;\n    }\n    else {\n      product1 = fabs();\n      temp2 = (undefined4)((ulonglong)product1 >> 0x20);\n      angle_low = (undefined4)product1;\n      if (mask < 0x3ff30000) {\n        if (mask < 0x3fe60000) {\n          product1 = __aeabi_dadd(angle_low,temp2,angle_low,temp2);\n          product1 = __subdf3((int)product1,(int)((ulonglong)product1 >> 0x20),0,0x3ff00000);\n          product2 = __aeabi_dadd(angle_low,temp2,0,0x40000000);\n          product1 = __divdf3((int)product1,(int)((ulonglong)product1 >> 0x20),(int)product2,\n                           (int)((ulonglong)product2 >> 0x20));\n          result = 0;\n        }\n        else {\n          product1 = __subdf3(angle_low,temp2,0,0x3ff00000);\n          product2 = __aeabi_dadd(angle_low,temp2,0,0x3ff00000);\n          product1 = __divdf3((int)product1,(int)((ulonglong)product1 >> 0x20),(int)product2,\n                           (int)((ulonglong)product2 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (mask < 0x40038000) {\n        product1 = __subdf3(angle_low,temp2,0,0x3ff80000);\n        product2 = __muldf3(angle_low,temp2,0,0x3ff80000);\n        product2 = __aeabi_dadd((int)product2,(int)((ulonglong)product2 >> 0x20),0,0x3ff00000);\n        product1 = __divdf3((int)product1,(int)((ulonglong)product1 >> 0x20),(int)product2,\n                         (int)((ulonglong)product2 >> 0x20));\n        result = 2;\n      }\n      else {\n        product1 = __divdf3(0,0xbff00000,angle_low,temp2);\n        result = 3;\n      }\n    }\n    temp4 = (undefined4)((ulonglong)product1 >> 0x20);\n    temp3 = (undefined4)product1;\n    product1 = __muldf3(temp3,temp4,temp3);\n    angle_high = (undefined4)((ulonglong)product1 >> 0x20);\n    angle_low = (undefined4)product1;\n    product1 = __muldf3(angle_low,angle_high,angle_low,angle_high);\n    temp1 = (undefined4)((ulonglong)product1 >> 0x20);\n    temp2 = (undefined4)product1;\n    product1 = __muldf3(temp2,temp1,0xe322da11,0x3f90ad3a);\n    product1 = __aeabi_dadd((int)product1,(int)((ulonglong)product1 >> 0x20),0x24760deb,0x3fa97b4b);\n    product1 = __muldf3((int)product1,(int)((ulonglong)product1 >> 0x20),temp2,temp1);\n    product1 = __aeabi_dadd((int)product1,(int)((ulonglong)product1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    product1 = __muldf3((int)product1,(int)((ulonglong)product1 >> 0x20),temp2,temp1);\n    product1 = __aeabi_dadd((int)product1,(int)((ulonglong)product1 >> 0x20),0xc54c206e,0x3fb745cd);\n    product1 = __muldf3((int)product1,(int)((ulonglong)product1 >> 0x20),temp2,temp1);\n    product1 = __aeabi_dadd((int)product1,(int)((ulonglong)product1 >> 0x20),0x920083ff,0x3fc24924);\n    product1 = __muldf3((int)product1,(int)((ulonglong)product1 >> 0x20),temp2,temp1);\n    product1 = __aeabi_dadd((int)product1,(int)((ulonglong)product1 >> 0x20),0x5555550d,0x3fd55555);\n    product1 = __muldf3((int)product1,(int)((ulonglong)product1 >> 0x20),angle_low,angle_high);\n    angle_low = (undefined4)((ulonglong)product1 >> 0x20);\n    product2 = __muldf3(temp2,temp1,0x2c6a6c2f,0xbfa2b444);\n    product2 = __subdf3((int)product2,(int)((ulonglong)product2 >> 0x20),0x52defd9a,0x3fadde2d);\n    product2 = __muldf3((int)product2,(int)((ulonglong)product2 >> 0x20),temp2,temp1);\n    product2 = __subdf3((int)product2,(int)((ulonglong)product2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    product2 = __muldf3((int)product2,(int)((ulonglong)product2 >> 0x20),temp2,temp1);\n    product2 = __subdf3((int)product2,(int)((ulonglong)product2 >> 0x20),0xfe231671,0x3fbc71c6);\n    product2 = __muldf3((int)product2,(int)((ulonglong)product2 >> 0x20),temp2,temp1);\n    product2 = __subdf3((int)product2,(int)((ulonglong)product2 >> 0x20),0x9998ebc4,0x3fc99999);\n    product2 = __muldf3((int)product2,(int)((ulonglong)product2 >> 0x20),temp2,temp1);\n    temp2 = (undefined4)((ulonglong)product2 >> 0x20);\n    if (result == -1) {\n      product1 = __aeabi_dadd((int)product1,angle_low,(int)product2,temp2);\n      product1 = __muldf3((int)product1,(int)((ulonglong)product1 >> 0x20),temp3,temp4);\n      result = __subdf3(temp3,temp4,(int)product1,(int)((ulonglong)product1 >> 0x20));\n      return result;\n    }\n    product1 = __aeabi_dadd((int)product1,angle_low,(int)product2,temp2);\n    product1 = __muldf3((int)product1,(int)((ulonglong)product1 >> 0x20),temp3,temp4);\n    product1 = __subdf3((int)product1,(int)((ulonglong)product1 >> 0x20),\n                     *(undefined4 *)(&UNK_0800c090 + result * 8),\n                     *(undefined4 *)(&UNK_0800c094 + result * 8));\n    product1 = __subdf3((int)product1,(int)((ulonglong)product1 >> 0x20),temp3,temp4);\n    result = __subdf3(*(undefined4 *)(&UNK_0800c070 + result * 8),\n                     *(undefined4 *)(&UNK_0800c074 + result * 8),(int)product1,\n                     (int)((ulonglong)product1 >> 0x20));\n    if ((int)precision < 0) {\n      return result;\n    }\n  }\n  else {\n    if ((0x7ff00000 < mask) || ((mask == 0x7ff00000 && (angle != 0)))) {\n      result = __aeabi_dadd(angle,precision,angle);\n      return result;\n    }\n    result = 0x54442d18;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_sine_0800af78",
                "param_1": "angle",
                "param_2": "precision",
                "uVar1": "angle_low",
                "uVar2": "angle_high",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "result",
                "uVar6": "temp3",
                "uVar7": "mask",
                "uVar8": "product1",
                "uVar9": "product2",
                "local_2c": "temp4"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__divdf3",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "atan",
                "__ieee754_atan2"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "sign_bit_and_shift_0800b2d4",
            "code": "\nuint signBitAndShift_0800b2d4(undefined4 inputFlag,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "sign_bit_and_shift_0800b2d4",
                "param_1": "inputFlag",
                "param_2": "inputValue"
            },
            "calling": [
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nvoid initialize_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0",
                "undefined4": "void"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input_1,uint input_2,int modifier,undefined4 param_4)\n\n{\n  uint shifted_input;\n  int modified_value;\n  uint high_bits;\n  undefined8 concatenated_inputs;\n  \n  concatenated_inputs = CONCAT44(input_2,input_1);\n  shifted_input = (input_2 << 1) >> 0x15;\n  if (shifted_input == 0) {\n    if ((input_1 | input_2 & 0x7fffffff) == 0) {\n      return input_1;\n    }\n    concatenated_inputs = __muldf3(input_1,input_2,0,0x43500000);\n    if (modifier < -50000) goto LAB_0800b34a;\n    shifted_input = ((uint)((int)((ulonglong)concatenated_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input == 0x7ff) {\n    shifted_input = __aeabi_dadd(input_1,input_2,input_1,input_2,param_4);\n    return shifted_input;\n  }\n  high_bits = (uint)((ulonglong)concatenated_inputs >> 0x20);\n  modified_value = shifted_input + modifier;\n  if (modified_value < 0x7ff) {\n    if (0 < modified_value) {\n      return (uint)concatenated_inputs;\n    }\n    if (modified_value + 0x35 < 0 == SCARRY4(modified_value,0x35)) {\n      shifted_input = __muldf3((uint)concatenated_inputs,high_bits & 0x800fffff | (modified_value + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input;\n    }\n    if (modifier < 0xc351) {\n      concatenated_inputs = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input = __muldf3((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input;\n    }\n  }\n  shifted_input = __muldf3(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "modifier",
                "uVar1": "shifted_input",
                "iVar2": "modified_value",
                "uVar3": "high_bits",
                "uVar4": "concatenated_inputs"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_data_0800b3dc",
            "code": "\nundefined4 get_data_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_data_0800b3dc"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "initialize_and_execute_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initializeAndExecuteFunctions_0800b3e8(void)\n\n{\n  int iterationCount;\n  code **functionPointer;\n  \n  _init();\n  iterationCount = 0;\n  functionPointer = (code **)&DAT_0800c0b4;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "initialize_and_execute_functions_0800b3e8",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "frame_dummy",
                "register_fini",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "memset_0800b430",
            "code": "\nvoid memset_0800b430(undefined4 *dest,undefined value,uint count)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_count;\n  undefined4 value_32;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_count = count - 1;\n    dest_ptr = dest;\n    if (count == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      count = remaining_count;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = remaining_count == 0;\n      remaining_count = remaining_count - 1;\n      dest_ptr = dest;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < count) {\n    value_32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < count) {\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value_32;\n        dest_ptr[-3] = value_32;\n        dest_ptr[-2] = value_32;\n        dest_ptr[-1] = value_32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (count - 0x10 & 0xfffffff0) + 0x20));\n      remaining_count = count & 0xc;\n      dest = dest + ((count - 0x10 >> 4) + 1) * 4;\n      count = count & 0xf;\n      if (remaining_count == 0) goto end;\n    }\n    dest_ptr = (undefined4 *)((count - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      temp_ptr = dest + 1;\n      *dest = value_32;\n      dest = temp_ptr;\n    } while (dest_ptr != temp_ptr);\n    count = count & 3;\n    dest = dest_ptr;\n  }\nend:\n  if (count != 0) {\n    dest_ptr = dest;\n    do {\n      temp_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = temp_ptr;\n    } while ((undefined4 *)(count + (int)dest) != temp_ptr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "memset_0800b430",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "dest_ptr",
                "puVar2": "temp_ptr",
                "uVar3": "remaining_count",
                "uVar4": "value_32",
                "bVar5": "is_zero",
                "joined_r0x0800b4a8": "end"
            },
            "calling": [
                "grbl_main",
                "settings_read_coord_data",
                "st_reset",
                "debounce_init",
                "plan_init",
                "gc_execute_line",
                "gc_init",
                "eeprom_init",
                "homing_cycle",
                "mc_go_home"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 updateData_0800b524(int dataFlag,undefined4 newValue,undefined4 value1,undefined4 value2)\n\n{\n  undefined *dataPtr;\n  undefined4 returnVal;\n  uint bitMask;\n  uint dataIndex;\n  \n  __retarget_lock_acquire_recursive(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  dataIndex = *(uint *)(DAT_20000168 + 4);\n  if ((int)dataIndex < 0x20) {\n    if (dataFlag != 0) {\n      *(undefined4 *)(DAT_20000168 + dataIndex * 4 + 0x88) = value1;\n      bitMask = 1 << (dataIndex & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + dataIndex * 4 + 0x108) = value2;\n      if (dataFlag == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    returnVal = DAT_20000448;\n    *(uint *)(dataPtr + 4) = dataIndex + 1;\n    *(undefined4 *)(dataPtr + (dataIndex + 2) * 4) = newValue;\n    __retarget_lock_release_recursive(returnVal);\n    returnVal = 0;\n  }\n  else {\n    __retarget_lock_release_recursive(DAT_20000448);\n    returnVal = 0xffffffff;\n  }\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "dataFlag",
                "param_2": "newValue",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "dataPtr",
                "uVar2": "returnVal",
                "uVar3": "bitMask",
                "uVar4": "dataIndex"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "frame_dummy",
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 187630,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005bdc",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078f4",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_080092c4",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_08001994",
            "FUN_08005c30",
            "FUN_08006d2e",
            "FUN_08007930",
            "FUN_08008640",
            "FUN_08008894"
        ],
        [
            "FUN_0800618c"
        ]
    ],
    "locked_functions": []
}