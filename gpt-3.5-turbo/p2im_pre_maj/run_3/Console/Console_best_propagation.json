{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_uart_stdio_00000410",
            "code": "\nvoid initialize_uart_stdio_00000410(void)\n\n{\n  initialize_uart_stdio_00000410();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_uart_stdio_00000410",
                "uart_stdio_init": "initialize_uart_stdio"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "uart_stdio_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_param_and_update_offset_00000428",
            "code": "\ndword validate_param_and_update_offset_00000428(undefined4 *result_ptr,int input_param)\n\n{\n  undefined4 irq_disabled;\n  dword original_offset;\n  \n  irq_disabled = irq_disable();\n  original_offset = rel_array[0].r_offset;\n  if ((input_param + rel_array[0].r_offset < 0x20030001) &&\n     (0x1fff0def < input_param + rel_array[0].r_offset)) {\n    rel_array[0].r_offset = input_param + rel_array[0].r_offset;\n  }\n  else {\n    *result_ptr = 0xc;\n    original_offset = 0xffffffff;\n  }\n  irq_restore(irq_disabled);\n  return original_offset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_param_and_update_offset_00000428",
                "param_1": "result_ptr",
                "param_2": "input_param",
                "uVar1": "irq_disabled",
                "local_c": "original_offset",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "irq_restore",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "read_from_uart_00000490",
            "code": "\nundefined4 read_from_uart_00000490(undefined4 input_1,undefined4 input_2,undefined4 buffer,undefined4 length)\n\n{\n  undefined4 result;\n  \n  result = uart_stdio_read(buffer,length);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "read_from_uart_00000490",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "buffer",
                "param_4": "length",
                "uVar1": "result"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "uart_stdio_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_param_000004f2",
            "code": "\nundefined4 initialize_param_000004f2(undefined4 *ptr_value)\n\n{\n  *ptr_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_param_000004f2",
                "param_1": "ptr_value"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_value_00000514",
            "code": "\nundefined4 initializeValue_00000514(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_value_00000514",
                "param_1": "outputValue"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_00000534",
            "code": "\nundefined4 checkInput_00000534(undefined4 *result,int input)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_00000534",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "decompressed_value_00000566",
            "code": "\nint decompressedValue_00000566(int inputValue)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)inputValue;\n  byte3 = (byte)((uint)inputValue >> 8);\n  byte4 = (byte)((uint)inputValue >> 0x10);\n  byte1 = (byte)((uint)inputValue >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (inputValue == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "decompressed_value_00000566",
                "param_1": "inputValue",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "sched_run"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_ptr_and_value_0000058e",
            "code": "\nvoid updatePtrAndValue_0000058e(int *ptrToUpdate,undefined4 *newValue)\n\n{\n  if (*ptrToUpdate == 0) {\n    *newValue = newValue;\n  }\n  else {\n    *newValue = *(undefined4 *)*ptrToUpdate;\n    *(undefined4 **)*ptrToUpdate = newValue;\n  }\n  *ptrToUpdate = (int)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_ptr_and_value_0000058e",
                "param_1": "ptrToUpdate",
                "param_2": "newValue"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_and_update_pointer_000005ca",
            "code": "\nundefined4 * extractValueAndUpdatePointer_000005ca(int *valuePtr)\n\n{\n  undefined4 *extractedValue;\n  \n  if (*valuePtr == 0) {\n    extractedValue = (undefined4 *)0x0;\n  }\n  else {\n    extractedValue = *(undefined4 **)*valuePtr;\n    if (extractedValue == (undefined4 *)*valuePtr) {\n      *valuePtr = 0;\n    }\n    else {\n      *(undefined4 *)*valuePtr = *extractedValue;\n    }\n  }\n  return extractedValue;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_and_update_pointer_000005ca",
                "param_1": "valuePtr",
                "puVar1": "extractedValue"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "process_data_00000610",
            "code": "\nundefined4 processData_00000610(void)\n\n{\n  int inputValue;\n  int index;\n  undefined4 result;\n  \n  inputValue = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = bitarithm_lsb(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (inputValue == index + -8) {\n    result = 0;\n  }\n  else {\n    if ((inputValue != 0) && (*(char *)(inputValue + 4) == '\\t')) {\n      *(undefined *)(inputValue + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    result = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "process_data_00000610",
                "iVar1": "inputValue",
                "iVar2": "index",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "bitarithm_lsb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid updateData_00000698(int dataIndex,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(dataIndex + 4)) &&\n       (clist_lpop(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(dataIndex + 5));\n    }\n  }\n  else if (*(byte *)(dataIndex + 4) < 9) {\n    clist_rpush(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4,dataIndex + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(dataIndex + 5);\n  }\n  *(char *)(dataIndex + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "dataIndex",
                "param_2": "newValue"
            },
            "calling": [
                "thread_create",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [
                "clist_rpush",
                "clist_lpop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_handle_irq_00000738",
            "code": "\nvoid checkAndHandleIRQ_00000738(ushort input)\n\n{\n  int isIRQPresent;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input < *(byte *)(DAT_1fff03dc + 5))) {\n    isIRQPresent = irq_is_in();\n    if (isIRQPresent == 0) {\n      thread_yield_higher();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_handle_irq_00000738",
                "param_1": "input",
                "iVar1": "isIRQPresent"
            },
            "calling": [
                "thread_create",
                "mutex_unlock"
            ],
            "called": [
                "irq_is_in",
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_stack_00000794",
            "code": "\nint * initializeStack_00000794(void)\n\n{\n  int returnValue;\n  int loopVariable;\n  undefined4 *pointerVar;\n  uint alignedAddress;\n  int counter1;\n  int counter2;\n  int *stackPointer;\n  \n  irq_disable();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  sched_set_status(DAT_1fff03dc,0);\n  pointerVar = &DAT_1fff03dc;\n  loopVariable = 0;\n  DAT_1fff03dc = 0;\n  cpu_switch_context_exit();\n  alignedAddress = (int)pointerVar + loopVariable & 0xfffffffc;\n  stackPointer = (int *)(alignedAddress - 4);\n  *stackPointer = 0x77777777;\n  if (((uint)stackPointer & 7) != 0) {\n    stackPointer = (int *)(alignedAddress - 8);\n    *stackPointer = 0x88888888;\n  }\n  stackPointer[-1] = 0x1000000;\n  stackPointer[-2] = loopVariable << 0xd;\n  stackPointer[-3] = 0x795;\n  stackPointer = stackPointer + -4;\n  *stackPointer = 0;\n  for (counter2 = 3; 0 < counter2; counter2 = counter2 + -1) {\n    stackPointer = stackPointer + -1;\n    *stackPointer = counter2;\n  }\n  stackPointer = stackPointer + -1;\n  *stackPointer = returnValue;\n  for (counter1 = 0xb; 3 < counter1; counter1 = counter1 + -1) {\n    stackPointer = stackPointer + -1;\n    *stackPointer = counter1;\n  }\n  stackPointer[-1] = -3;\n  return stackPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_stack_00000794",
                "extraout_r1": "returnValue",
                "iVar1": "loopVariable",
                "puVar2": "pointerVar",
                "uVar3": "alignedAddress",
                "iStack_1c": "counter1",
                "iStack_18": "counter2",
                "piStack_14": "stackPointer"
            },
            "calling": [],
            "called": [
                "sched_set_status",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 ptr,int value,int size,int alignment)\n\n{\n  uint alignedSize;\n  int i;\n  int j;\n  int *ptr;\n  \n  alignedSize = alignment + size & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = ptr;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = value;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "size",
                "param_4": "alignment",
                "uVar1": "alignedSize",
                "local_14": "i",
                "local_10": "j",
                "local_c": "ptr"
            },
            "calling": [
                "thread_create"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_elf_relocations_000008b8",
            "code": "\nint countElfRelocations_000008b8(void)\n\n{\n  Elf32_Rel *currentRelocation;\n  \n  for (currentRelocation = (Elf32_Rel *)&DAT_1fff0000;\n      (currentRelocation->offset == 0xe7fee7fe && (currentRelocation < relocationArray));\n      currentRelocation = (Elf32_Rel *)&currentRelocation->info) {\n  }\n  return ((int)relocationArray - (int)currentRelocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_elf_relocations_000008b8",
                "local_c": "currentRelocation",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray",
                "r_offset": "offset",
                "r_info": "info"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_initial_memory_offset_0000091c",
            "code": "\nundefined4 getInitialMemoryOffset_0000091c(void)\n\n{\n  memOffset 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_initial_memory_offset_0000091c",
                "return": "memOffset"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_interrupt_handler_00000930",
            "code": "\nvoid run_interrupt_handler_00000930(void)\n\n{\n  irq_enable();\n  software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_interrupt_handler_00000930"
            },
            "calling": [
                "kernel_init",
                "sched_task_exit"
            ],
            "called": [
                "irq_enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_enable_memory_bit_0000093c",
            "code": "\n\n\nvoid setEnableMemoryBit_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_enable_memory_bit_0000093c"
            },
            "calling": [
                "cortexm_isr_end",
                "FUN_00001cf0",
                "_mutex_lock",
                "sched_switch",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000099c": {
            "entrypoint": "0x0000099c",
            "current_name": "initialize_startup_0000099c",
            "code": "\nvoid initialize_startup_0000099c(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *stack_pointer;\n  dword *data_pointer;\n  Elf32_Rel *relocation_pointer;\n  \n  stack_pointer = &uStack_18;\n  data_pointer = (dword *)&DAT_00007c60;\n  pre_startup();\n  relocation_pointer = (Elf32_Rel *)&DAT_1fff0000;\n  while (relocation_pointer < &uStack_18) {\n    relocation_pointer->r_offset = 0xe7fee7fe;\n    relocation_pointer = (Elf32_Rel *)((int)relocation_pointer + 4);\n  }\n  relocation_pointer = Elf32_Rel_ARRAY_1fff0200;\n  while (relocation_pointer < (Elf32_Rel *)&DAT_1fff0350) {\n    relocation_pointer->r_offset = *data_pointer;\n    data_pointer = data_pointer + 1;\n    relocation_pointer = (Elf32_Rel *)&relocation_pointer->r_info;\n  }\n  relocation_pointer = (Elf32_Rel *)&DAT_1fff0350;\n  while (relocation_pointer < (undefined4 *)0x1fff0df0) {\n    relocation_pointer->r_offset = 0;\n    relocation_pointer = (Elf32_Rel *)((int)relocation_pointer + 4);\n  }\n  post_startup();\n  board_init();\n  __libc_init_array();\n  kernel_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000099c": "initialize_startup_0000099c",
                "local_14": "stack_pointer",
                "local_10": "data_pointer",
                "local_c": "relocation_pointer"
            },
            "calling": [],
            "called": [
                "kernel_init",
                "board_init",
                "post_startup",
                "pre_startup",
                "__libc_init_array"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_nmi_00000a30(void)\n\n{\n  int nmi_parameter;\n  \n  trigger_panic(4,\"NMI HANDLER\");\n  return stack_pointer + -*(int *)(nmi_parameter + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "nmi_parameter",
                "core_panic": "trigger_panic",
                "&stack0xe000ffe0": "stack_pointer"
            },
            "calling": [],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "handle_ir_qinterrupts_00000cc0",
            "code": "\nundefined4 handleIRQinterrupts_00000cc0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  core_panic(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "handle_ir_qinterrupts_00000cc0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "dummy_handler"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_if_irq_interrupts_enabled_00000cd0",
            "code": "\nundefined4 checkIfIRQInterruptsEnabled_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_if_irq_interrupts_enabled_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "kernel_init",
                "kinetis_mcg_init",
                "core_panic",
                "pm_off",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupt_status_00000cf0",
            "code": "\nundefined4 checkIRQInterruptStatus_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptStatus;\n  \n  enableIRQInterrupts();\n  interruptStatus = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptStatus = isIRQInterruptsEnabled();\n  }\n  return interruptStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupt_status_00000cf0",
                "uVar2": "interruptStatus",
                "bVar1": "isPrivilegedMode",
                "enableIRQinterrupts": "enableIRQInterrupts",
                "isIRQinterruptsEnabled": "isIRQInterruptsEnabled"
            },
            "calling": [
                "cpu_switch_context_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableInterruptsIfPrivileged_00000d0c(uint interruptFlags)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    enableInterrupts((interruptFlags & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_if_privileged_00000d0c",
                "param_1": "interruptFlags",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "kinetis_mcg_init",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isCurrentModePrivileged;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "sched_switch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_clear32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_offset_00000d76",
            "code": "\nvoid clearOffset_00000d76(undefined4 input1,undefined input2)\n\n{\n  undefined4 *offsetPtr;\n  \n  offsetPtr = (undefined4 *)calculate_offset_00000d44(input1,input2);\n  *offsetPtr = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_offset_00000d76",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "cpu_errata_fixes"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_bit_00000d9c",
            "code": "\nvoid clear_bit_00000d9c(void)\n\n{\n  clear_bit_00000d9c_32(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_bit_00000d9c",
                "bit_clear32": "clear_bit_32"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [
                "bit_clear32"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "disable_watchdog_and_fix_cpu_errata_00000db0",
            "code": "\nvoid disable_watchdog_and_fix_cpu_errata_00000db0(void)\n\n{\n  disable_watchdog();\n  fix_cpu_errata();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "disable_watchdog_and_fix_cpu_errata_00000db0",
                "wdog_disable": "disable_watchdog",
                "cpu_errata_fixes": "fix_cpu_errata"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "wdog_disable",
                "cpu_errata_fixes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "execute_dummy_handler_00000dc0",
            "code": "\nvoid execute_dummy_handler_00000dc0(void)\n\n{\n  default_dummy_handler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "execute_dummy_handler_00000dc0",
                "dummy_handler_default": "default_dummy_handler"
            },
            "calling": [],
            "called": [
                "dummy_handler_default"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_uart_00000df4",
            "code": "\nvoid initialize_uart_00000df4(void)\n\n{\n  uart_init(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_uart_00000df4"
            },
            "calling": [
                "_init"
            ],
            "called": [
                "uart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "read_from_isr_pipe_00000e14",
            "code": "\nundefined4 readFromISRPipe_00000e14(undefined4 buffer,undefined4 size)\n\n{\n  undefined4 result;\n  \n  result = isrpipe_read(0x1fff0204,buffer,size);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "read_from_isr_pipe_00000e14",
                "param_1": "buffer",
                "param_2": "size",
                "uVar1": "result"
            },
            "calling": [
                "_read_r"
            ],
            "called": [
                "isrpipe_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "write_data_to_uart_00000e38",
            "code": "\nundefined4 write_data_to_uart_00000e38(undefined4 buffer,undefined4 length)\n\n{\n  uart_write(0,buffer,length);\n  return length;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "write_data_to_uart_00000e38",
                "param_1": "buffer",
                "param_2": "length"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "disable_irq_and_idle_00000e58",
            "code": "\nvoid disable_irq_and_idle_00000e58(void)\n\n{\n  disable_interrupts();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "disable_irq_and_idle_00000e58",
                "irq_disable": "disable_interrupts"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_devices_00000e64",
            "code": "\n\n\nvoid initialize_devices_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_cpu();\n  initialize_gpio(0x2056,0x80);\n  initialize_gpio(0x511a,0x80);\n  initialize_gpio(0x2055,0x80);\n  set_gpio_state(0x2056);\n  set_gpio_state(0x511a);\n  set_gpio_state(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_devices_00000e64",
                "cpu_init": "initialize_cpu",
                "gpio_init": "initialize_gpio",
                "gpio_set": "set_gpio_state"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "gpio_init",
                "gpio_set",
                "cpu_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "print_function_info_00000ed8",
            "code": "\nvoid printFunctionInfo_00000ed8(void)\n\n{\n  undefined4 stackFrame;\n  \n  formattedPrint(&DAT_00006f58,stackFrame);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "print_function_info_00000ed8",
                "in_lr": "stackFrame",
                "iprintf": "formattedPrint"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_panic_00000f04",
            "code": "\nvoid handle_panic_00000f04(char panic_type,undefined4 panic_message)\n\n{\n  undefined4 temp_var;\n  code *jump_table;\n  undefined4 panic_msg;\n  char panic_type;\n  \n  panic_msg = panic_message;\n  panic_type = panic_type;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_type == '\\x03') {\n      cpu_print_last_instruction();\n    }\n    iprintf(\"*** RIOT kernel panic:\\n%s\\n\\n\",panic_msg);\n    ps();\n    iprintf(&DAT_00006f78);\n    iprintf(\"*** halted.\\n\\n\");\n  }\n  irq_disable();\n  panic_arch();\n  jump_table = (code *)0xf4d;\n  pm_off();\n  temp_var = (int)&temp_var + 1;\n  auto_init();\n  iprintf(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  main();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_panic_00000f04",
                "param_1": "panic_type",
                "param_2": "panic_message",
                "uStack_18": "temp_var",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "local_10": "panic_msg",
                "local_9": "panic_type"
            },
            "calling": [
                "dummy_handler_default",
                "uart_init",
                "cib_init",
                "nmi_default",
                "fmt_s32_dfp",
                "thread_add_to_list"
            ],
            "called": [
                "cpu_print_last_instruction",
                "iprintf",
                "panic_arch",
                "pm_off",
                "ps",
                "main",
                "auto_init",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_system_components_00000f8c",
            "code": "\nvoid initializeSystemComponents_00000f8c(void)\n\n{\n  uint contextFlag;\n  undefined4 *arrayPointer;\n  uint threadCount;\n  int stackVariable;\n  int *stackPointer;\n  undefined4 cpuFlag;\n  undefined4 localVariable2;\n  undefined4 localVariable1;\n  dword offsetValue;\n  \n  irq_disable();\n  offsetValue = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  localVariable1 = 0;\n  localVariable2 = 0xf81;\n  thread_create(&DAT_1fff0a6c,0x100,0xf,0xc);\n  offsetValue = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  localVariable1 = 0;\n  localVariable2 = 0xf5d;\n  threadCount = 0xc;\n  thread_create(&DAT_1fff046c,0x600,7);\n  cpuFlag = 0xfd3;\n  contextFlag = cpu_switch_context_exit();\n  contextFlag = contextFlag >> 0x1e;\n  arrayPointer = (undefined4 *)(threadCount * 0x100);\n  stackVariable = (threadCount >> 0x1d) << 0x11;\n  stackPointer = &stackVariable;\n  if ((contextFlag & contextFlag - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *arrayPointer = 0;\n  arrayPointer[1] = 0;\n  arrayPointer[2] = contextFlag - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_system_components_00000f8c",
                "uVar1": "contextFlag",
                "puVar2": "arrayPointer",
                "uVar3": "threadCount",
                "iStack_24": "stackVariable",
                "piStack_20": "stackPointer",
                "uStack_1c": "cpuFlag",
                "local_10": "offsetValue",
                "local_14": "localVariable1",
                "local_18": "localVariable2"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "thread_create",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_and_set_bound_00000fec",
            "code": "\nvoid initializeAndSetBound_00000fec(undefined4 *resultArray,uint bound)\n\n{\n  if ((bound & bound - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *resultArray = 0;\n  resultArray[1] = 0;\n  resultArray[2] = bound - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_and_set_bound_00000fec",
                "param_1": "resultArray",
                "param_2": "bound",
                "param_1[1]": "resultArray[1]",
                "param_1[2]": "resultArray[2]"
            },
            "calling": [
                "thread_create"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_insert_position_00001034",
            "code": "\nvoid find_insert_position_00001034(int **pointer_list,int input_value)\n\n{\n  int **current_ptr;\n  \n  if (8 < *(byte *)(input_value + 4)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  for (current_ptr = pointer_list;\n      (*current_ptr != (int *)0x0 && (*(byte *)((int)*current_ptr + -3) <= *(byte *)(input_value + 5)));\n      current_ptr = (int **)*current_ptr) {\n  }\n  *(int **)(input_value + 8) = *current_ptr;\n  *current_ptr = (int *)(int **)(input_value + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_insert_position_00001034",
                "param_1": "pointer_list",
                "param_2": "input_value",
                "local_1c": "current_ptr"
            },
            "calling": [
                "_mutex_lock"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "count_elements_000010a0",
            "code": "\nint count_elements_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "count_elements_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_thread_000010d4",
            "code": "\nint initializeThread_000010d4(uint address,int size,byte length,uint flags,undefined4 arg1,\n                undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 disabledIRQ;\n  undefined4 threadReturnValue;\n  int returnValue;\n  uint adjustedSize;\n  undefined4 *thread;\n  int adjustedSize;\n  uint adjustedAddress;\n  uint loopCounter;\n  short index;\n  short availableThreadIndex;\n  \n  if (length < 0x10) {\n    adjustedSize = size;\n    adjustedAddress = address;\n    if ((address & 3) != 0) {\n      adjustedSize = 4 - (address & 3);\n      adjustedAddress = adjustedSize + address;\n      adjustedSize = size - adjustedSize;\n    }\n    adjustedSize = adjustedSize - 0x30U & 0xfffffffc;\n    thread = (undefined4 *)(adjustedSize + adjustedAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)adjustedAddress = adjustedAddress;\n    }\n    else {\n      for (loopCounter = adjustedAddress; loopCounter < adjustedSize + adjustedAddress; loopCounter = loopCounter + 4) {\n        *(uint *)loopCounter = loopCounter;\n      }\n    }\n    disabledIRQ = irq_disable();\n    availableThreadIndex = 0;\n    for (index = 1; index < 0x21; index = index + 1) {\n      if (*(int *)(&DAT_1fff0358 + index * 4) == 0) {\n        availableThreadIndex = index;\n        break;\n      }\n    }\n    if (availableThreadIndex == 0) {\n      irq_restore(disabledIRQ);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableThreadIndex * 4) = thread;\n      *(short *)((int)thread + 6) = availableThreadIndex;\n      threadReturnValue = thread_stack_init(arg1,arg2,adjustedAddress,adjustedSize);\n      *thread = threadReturnValue;\n      thread[9] = adjustedAddress;\n      thread[0xb] = size;\n      thread[10] = arg3;\n      *(byte *)((int)thread + 5) = length;\n      *(undefined *)(thread + 1) = 0;\n      thread[2] = 0;\n      thread[3] = 0;\n      thread[4] = 0;\n      cib_init(thread + 5,0);\n      thread[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        sched_set_status(thread,10);\n        if ((flags & 4) == 0) {\n          irq_restore(disabledIRQ);\n          sched_switch(length);\n          return (int)availableThreadIndex;\n        }\n      }\n      else {\n        sched_set_status(thread,1);\n      }\n      irq_restore(disabledIRQ);\n      returnValue = (int)availableThreadIndex;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_thread_000010d4",
                "param_1": "address",
                "param_2": "size",
                "param_3": "length",
                "param_4": "flags",
                "param_5": "arg1",
                "param_6": "arg2",
                "param_7": "arg3",
                "uVar1": "disabledIRQ",
                "uVar2": "threadReturnValue",
                "iVar3": "returnValue",
                "uVar4": "adjustedSize",
                "puVar5": "thread",
                "local_30": "adjustedSize",
                "local_2c": "adjustedAddress",
                "local_10": "loopCounter",
                "local_c": "index",
                "local_a": "availableThreadIndex"
            },
            "calling": [
                "kernel_init"
            ],
            "called": [
                "thread_stack_init",
                "sched_set_status",
                "cib_init",
                "irq_restore",
                "sched_switch",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initialize_system_00001274(void)\n\n{\n  cortexm_init();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  kinetis_mcg_init();\n  periph_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "kinetis_mcg_init",
                "cortexm_init",
                "periph_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "lock_mutex_0000129c",
            "code": "\nvoid lockMutex_0000129c(undefined4 mutex)\n\n{\n  acquireLock(mutex,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "lock_mutex_0000129c",
                "param_1": "mutex",
                "_mutex_lock": "acquireLock"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "unlock_add_one_000012b4",
            "code": "\nundefined4 unlock_add_one_000012b4(int locked_data,undefined unlock_status)\n\n{\n  undefined4 result;\n  \n  result = tsrb_add_one(locked_data + 4,unlock_status);\n  mutex_unlock(locked_data);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "unlock_add_one_000012b4",
                "param_1": "locked_data",
                "param_2": "unlock_status",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "mutex_unlock",
                "tsrb_add_one"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "wait_for_data_000012e2",
            "code": "\nint waitForData_000012e2(int dataBuffer,undefined4 size,undefined4 timeout)\n\n{\n  int result;\n  \n  while( true ) {\n    result = tsrb_get(dataBuffer + 4,size,timeout);\n    if (result != 0) break;\n    mutex_lock(dataBuffer);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "wait_for_data_000012e2",
                "param_1": "dataBuffer",
                "param_2": "size",
                "param_3": "timeout",
                "iVar1": "result"
            },
            "calling": [
                "uart_stdio_read"
            ],
            "called": [
                "tsrb_get",
                "mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "uart_init_uart"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_yield_00001348",
            "code": "\nvoid check_and_yield_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_yield_00001348"
            },
            "calling": [
                "irq_handler_uart"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculateOffset_00001360(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_offset_00001392",
            "code": "\nvoid setOffset_00001392(undefined4 offsetAddress,undefined value)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001360(offsetAddress,value);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_offset_00001392",
                "param_1": "offsetAddress",
                "param_2": "value",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_uart_000013b8",
            "code": "\nundefined4 initializeUart_000013b8(int errorCode,undefined4 uartConfig,undefined4 pinConfig,undefined4 offsetValue)\n\n{\n  undefined4 returnValue;\n  \n  if (errorCode != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + errorCode * 8) = pinConfig;\n  *(undefined4 *)(&DAT_1fff0b70 + errorCode * 8) = offsetValue;\n  uart_init_pins(errorCode);\n  set_offset_00001392(*(undefined4 *)(&DAT_00006ffc + errorCode * 0x20),\n               *(undefined *)(errorCode * 0x20 + 0x7000));\n  if ((&DAT_00007002)[errorCode * 0x20] == '\\0') {\n    uart_init_uart(errorCode,uartConfig);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_uart_000013b8",
                "param_1": "errorCode",
                "param_2": "uartConfig",
                "param_3": "pinConfig",
                "param_4": "offsetValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "uart_stdio_init"
            ],
            "called": [
                "FUN_00001392",
                "core_panic",
                "uart_init_uart",
                "uart_init_pins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "initialize_gpio_00001448",
            "code": "\nvoid initializeGPIO_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "initialize_gpio_00001448",
                "param_1": "index"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "gpio_init_port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_memory_settings_000014c4",
            "code": "\nvoid updateMemorySettings_000014c4(int index,uint value)\n\n{\n  byte *memoryPointer;\n  uint memSetting;\n  uint dividedValue;\n  \n  memoryPointer = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  memSetting = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  memoryPointer[3] = memoryPointer[3] & 0xf3;\n  memoryPointer[2] = (&DAT_00007001)[index * 0x20];\n  dividedValue = memSetting / (value << 4);\n  *memoryPointer = (byte)(dividedValue >> 8) & 0x1f;\n  memoryPointer[1] = (byte)dividedValue;\n  memoryPointer[10] = (byte)((memSetting << 2) / value + 1 >> 1) & 0x1f;\n  memoryPointer[0x10] = memoryPointer[0x10] | 0x88;\n  if ((memoryPointer[0x10] & 0x70) == 0) {\n    memoryPointer[0x13] = 0;\n  }\n  else {\n    memoryPointer[0x13] = (char)(2 << (memoryPointer[0x10] >> 4 & 7)) - 1;\n  }\n  memoryPointer[0x15] = 1;\n  memoryPointer[0x11] = 0xc0;\n  memoryPointer[3] = memoryPointer[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_memory_settings_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "memoryPointer",
                "uVar2": "memSetting",
                "uVar3": "dividedValue"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int source,uint length)\n\n{\n  int ptr_offset;\n  uint i;\n  \n  ptr_offset = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (i = 0; i < length; i = i + 1) {\n    do {\n    } while (-1 < *(char *)(ptr_offset + 4));\n    *(undefined *)(ptr_offset + 7) = *(undefined *)(i + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "ptr_offset",
                "local_c": "i"
            },
            "calling": [
                "uart_stdio_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_if_valid_00001628",
            "code": "\nvoid executeFunctionIfValid_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  check_and_yield_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_if_valid_00001628",
                "param_1": "index"
            },
            "calling": [
                "isr_uart0_rx_tx"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_uart_irq_handler_00001688",
            "code": "\nvoid initialize_uart_irq_handler_00001688(void)\n\n{\n  handle_uart_irq(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_uart_irq_handler_00001688",
                "irq_handler_uart": "handle_uart_irq"
            },
            "calling": [],
            "called": [
                "irq_handler_uart"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint baseAddress,int offset)\n\n{\n  return offset * 4 + (baseAddress & 0xf0000000 | (baseAddress & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "baseAddress",
                "param_2": "offset"
            },
            "calling": [
                "FUN_000016c8",
                "bit_clear8",
                "bit_set8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_one_000016c8",
            "code": "\nvoid setOffsetToOne_000016c8(undefined4 inputValue,undefined dataType)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001696(inputValue,dataType);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_one_000016c8",
                "param_1": "inputValue",
                "param_2": "dataType",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "kinetis_mcg_init_erclk32k"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "initialize_offset_000016ec",
            "code": "\nvoid initializeOffset_000016ec(undefined4 offsetAddress,undefined initialValue)\n\n{\n  undefined *targetAddress;\n  \n  targetAddress = (undefined *)calculate_offset_00001696(offsetAddress,initialValue);\n  *targetAddress = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "initialize_offset_000016ec",
                "param_1": "offsetAddress",
                "param_2": "initialValue",
                "puVar1": "targetAddress"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 dataOffset,undefined buffer)\n\n{\n  undefined *targetAddress;\n  \n  targetAddress = (undefined *)calculate_offset_00001696(dataOffset,buffer);\n  *targetAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "dataOffset",
                "param_2": "buffer",
                "puVar1": "targetAddress"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_disable_pll",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_bit_at_index_00001734",
            "code": "\nvoid clearBitAtIndex_00001734(void)\n\n{\n  bit_clear8(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_bit_at_index_00001734"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_data_00001748",
            "code": "\nvoid updateData_00001748(byte inputByte)\n\n{\n  DAT_40064003 = inputByte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_data_00001748",
                "param_1": "inputByte"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_flags_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateFlags_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  bit_clear8(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_flags_00001778"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fee"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_peripheral_000017dc",
            "code": "\n\n\nvoid initializePeripheral_000017dc(void)\n\n{\n  set_offset_to_one_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_peripheral_000017dc"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "update_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid updateData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  bit_set8(&DAT_40064001,0);\n  bit_clear8(&DAT_40064000,1);\n  bit_clear8(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "update_data_0000182c"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  bit_clear8(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_system_0000191c",
            "code": "\nvoid initializeSystem_0000191c(void)\n\n{\n  enableOscillator();\n  setFllFactor(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c",
                "kinetis_mcg_enable_osc": "enableOscillator",
                "kinetis_mcg_set_fll_factor": "setFllFactor"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_fll_000019c0",
            "code": "\nvoid initialize_fll_000019c0(void)\n\n{\n  kinetis_mcg_enable_osc();\n  kinetis_mcg_set_fll_factor(0x40);\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  kinetis_mcg_disable_pll();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_fll_000019c0"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disablePhaseLockedLoop();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18",
                "kinetis_mcg_disable_pll": "disablePhaseLockedLoop"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "enable_pll_and_set_dat_value_00001a3c",
            "code": "\nvoid enablePllAndSetDatValue_00001a3c(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disableMCGPLL();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "enable_pll_and_set_dat_value_00001a3c",
                "kinetis_mcg_disable_pll": "disableMCGPLL"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_device_00001a60",
            "code": "\nvoid initializeDevice_00001a60(void)\n\n{\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  bit_set8(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "set_clock_mode_00001b10",
            "code": "\nundefined4 setClockMode_00001b10(byte clockMode)\n\n{\n  undefined4 returnValue;\n  \n  if (clockMode < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)clockMode + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        kinetis_mcg_set_fei();\n        break;\n      case 1:\n        kinetis_mcg_set_fee();\n        break;\n      case 2:\n        kinetis_mcg_set_fbi();\n        break;\n      case 3:\n        kinetis_mcg_set_fbe();\n        break;\n      case 4:\n        kinetis_mcg_set_blpi();\n        break;\n      case 5:\n        kinetis_mcg_set_blpe();\n        break;\n      case 6:\n        kinetis_mcg_set_pbe();\n        break;\n      case 7:\n        kinetis_mcg_set_pee();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (clockMode != DAT_1fff0b74);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "set_clock_mode_00001b10",
                "param_1": "clockMode",
                "uVar1": "returnValue"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "kinetis_mcg_set_pee",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_blpi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clearBit8(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clearBit8(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  kinetis_mcg_set_fll_factor(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8",
                "bit_clear8": "clearBit8"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 interruptState;\n  \n  interruptState = disableInterrupts();\n  setSafeMode();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initializeMCGIRCLK();\n  initializeERCLK32K();\n  setMode(7);\n  restoreInterrupts(interruptState);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interruptState",
                "kinetis_mcg_set_safe_mode": "setSafeMode",
                "kinetis_mcg_init_mcgirclk": "initializeMCGIRCLK",
                "kinetis_mcg_init_erclk32k": "initializeERCLK32K",
                "kinetis_mcg_set_mode": "setMode",
                "irq_disable": "disableInterrupts",
                "irq_restore": "restoreInterrupts"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "kinetis_mcg_init_mcgirclk",
                "irq_restore",
                "irq_disable",
                "kinetis_mcg_set_mode",
                "kinetis_mcg_set_safe_mode",
                "kinetis_mcg_init_erclk32k"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_if_thread_yield_needed_00001cf0",
            "code": "\nvoid checkIfThreadYieldNeeded_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yieldHigherPriorityThread();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_if_thread_yield_needed_00001cf0",
                "thread_yield_higher": "yieldHigherPriorityThread"
            },
            "calling": [
                "irq_handler"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculate_offset_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_set32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_bit_to1_00001d3a",
            "code": "\nvoid setBitTo1_00001d3a(undefined4 address,undefined bitPosition)\n\n{\n  undefined4 *bitPointer;\n  \n  bitPointer = (undefined4 *)bitband_addr(address,bitPosition);\n  *bitPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_bit_to1_00001d3a",
                "param_1": "address",
                "param_2": "bitPosition",
                "puVar1": "bitPointer"
            },
            "calling": [
                "clk_en"
            ],
            "called": [
                "bitband_addr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "combine_and_shift_bits_00001d5e",
            "code": "\nuint combineAndShiftBits_00001d5e(ushort input)\n\n{\n  return input & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "combine_and_shift_bits_00001d5e",
                "param_1": "input"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_and_constant_00001d80",
            "code": "\nuint applyMaskAndConstant_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_and_constant_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init_port",
                "clk_en"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extracted_bits_00001dc0",
            "code": "\nushort extractedBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extracted_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_port_number_00001ddc",
            "code": "\nvoid updatePortNumber_00001ddc(undefined2 port_number)\n\n{\n  char charValue;\n  \n  charValue = port_num(port_number);\n  bit_set32(&DAT_40048038,charValue + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_port_number_00001ddc",
                "param_1": "port_number",
                "cVar1": "charValue"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "bit_set32",
                "port_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extractBits_00001e0c(int index,uint value)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)value >> 3) + index * 4) * 4) >> ((value & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "index",
                "param_2": "value"
            },
            "calling": [
                "irq_handler",
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bits_00001e44",
            "code": "\nvoid updateBits_00001e44(int offset,uint bitIndex,int newValue)\n\n{\n  int shiftedIndex;\n  \n  shiftedIndex = (int)bitIndex >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + offset * 4) * 4) & ~(0xf << ((bitIndex & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + offset * 4) * 4) | newValue << ((bitIndex & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "param_1": "offset",
                "param_2": "bitIndex",
                "param_3": "newValue",
                "iVar1": "shiftedIndex"
            },
            "calling": [
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "write_context_to_map_00001ec4",
            "code": "\nvoid writeContextToMap_00001ec4(undefined4 input_param1,undefined4 input_param2)\n\n{\n  undefined4 context;\n  \n  context = get_ctx(input_param1,input_param2);\n  write_map(input_param1,input_param2,context);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "write_context_to_map_00001ec4",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "uVar1": "context"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "get_ctx",
                "write_map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "initialize_pin_00001eea",
            "code": "\nundefined4 initializePin_00001eea(undefined2 port,byte state)\n\n{\n  uint pinNumber;\n  int gpioPort;\n  int pinIndex;\n  \n  gpio_init_port(port,0);\n  if ((char)state < '\\0') {\n    pinNumber = pin_num(port);\n    gpioPort = gpio(port);\n    *(uint *)(gpioPort + 0x14) = *(uint *)(gpioPort + 0x14) | 1 << (pinNumber & 0xff);\n  }\n  else {\n    pinNumber = pin_num(port);\n    gpioPort = gpio(port);\n    *(uint *)(gpioPort + 0x14) = *(uint *)(gpioPort + 0x14) & ~(1 << (pinNumber & 0xff));\n  }\n  gpioPort = port(port);\n  pinIndex = pin_num(port);\n  *(uint *)(gpioPort + pinIndex * 4) = state & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "initialize_pin_00001eea",
                "param_1": "port",
                "param_2": "state",
                "uVar1": "pinNumber",
                "iVar2": "gpioPort",
                "iVar3": "pinIndex"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "port",
                "gpio_init_port",
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_pin_value_00001f80",
            "code": "\nvoid updatePinValue_00001f80(undefined2 pinConfig,undefined4 newValue)\n\n{\n  int portAddress;\n  int pinNumber;\n  undefined4 portNumber;\n  undefined4 clearPinNumber;\n  uint originalPinValue;\n  \n  clk_en(pinConfig);\n  portAddress = port(pinConfig);\n  pinNumber = pin_num(pinConfig);\n  originalPinValue = *(uint *)(portAddress + pinNumber * 4);\n  portAddress = port(pinConfig);\n  pinNumber = pin_num(pinConfig);\n  *(undefined4 *)(portAddress + pinNumber * 4) = newValue;\n  if ((originalPinValue & 0xf0000) != 0) {\n    portNumber = port_num(pinConfig);\n    clearPinNumber = pin_num(pinConfig);\n    ctx_clear(portNumber,clearPinNumber);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_pin_value_00001f80",
                "param_1": "pinConfig",
                "param_2": "newValue",
                "iVar1": "portAddress",
                "iVar2": "pinNumber",
                "uVar3": "portNumber",
                "uVar4": "clearPinNumber",
                "uVar5": "originalPinValue"
            },
            "calling": [
                "gpio_init",
                "uart_init_pins"
            ],
            "called": [
                "port",
                "clk_en",
                "port_num",
                "ctx_clear",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_pin_00001ff6",
            "code": "\nvoid setPin_00001ff6(undefined2 pin)\n\n{\n  uint pinNumber;\n  int gpioAddress;\n  \n  pinNumber = pin_num(pin);\n  gpioAddress = gpio(pin);\n  *(int *)(gpioAddress + 4) = 1 << (pinNumber & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_pin_00001ff6",
                "param_1": "pin",
                "uVar1": "pinNumber",
                "iVar2": "gpioAddress"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_flags_00002028",
            "code": "\nvoid processFlags_00002028(int dataPtr,undefined4 ctxPtr)\n\n{\n  int ctxIndex;\n  uint flags;\n  uint bitIndex;\n  \n  flags = *(uint *)(dataPtr + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((flags & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(dataPtr + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(dataPtr + 0xa0) = 1 << (bitIndex & 0xff);\n      ctxIndex = get_ctx(ctxPtr,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + ctxIndex * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + ctxIndex * 0xc));\n    }\n  }\n  check_if_thread_yield_needed_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_flags_00002028",
                "param_1": "dataPtr",
                "param_2": "ctxPtr",
                "iVar1": "ctxIndex",
                "uVar2": "flags",
                "local_c": "bitIndex"
            },
            "calling": [
                "isr_portd",
                "isr_porta",
                "isr_porte",
                "isr_portb",
                "isr_portc"
            ],
            "called": [
                "get_ctx",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "disable_interrupt_handler_000020b8",
            "code": "\nvoid disableInterruptHandler_000020b8(void)\n\n{\n  irq_handler(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "disable_interrupt_handler_000020b8"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_irq_handler_000020cc",
            "code": "\nvoid initializeIRQHandler_000020cc(void)\n\n{\n  irqHandler(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_irq_handler_000020cc",
                "irq_handler": "irqHandler"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_interrupt_000020e0",
            "code": "\nvoid initialize_interrupt_000020e0(void)\n\n{\n  handle_irq(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_interrupt_000020e0",
                "irq_handler": "handle_irq"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_irq_handler_000020f4",
            "code": "\nvoid initializeIRQHandler_000020f4(void)\n\n{\n  irq_handler(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_irq_handler_000020f4"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_irq_handler_00002108",
            "code": "\nvoid initializeIRQHandler_00002108(void)\n\n{\n  irq_handler(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_irq_handler_00002108"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_thread_information_0000211c",
            "code": "\nvoid printThreadInformation_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 stateName;\n  int stackUsed;\n  int priority;\n  dword baseAddr;\n  uint queueStatus;\n  undefined4 *threadInfo;\n  undefined4 stackPointer;\n  undefined4 stackStart;\n  int totalStackUsed;\n  short threadIndex;\n  int totalStackFree;\n  int totalStackSize;\n  \n  stateName = 0x515f;\n  totalStackSize = 0;\n  totalStackFree = 0;\n  iprintf(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",&DAT_000070b8,\n          \"state\");\n  totalStackUsed = thread_isr_stack_usage();\n  stackStart = thread_isr_stack_start();\n  stackPointer = thread_isr_stack_pointer();\n  iprintf(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n          totalStackUsed,stackStart,stackPointer);\n  totalStackSize = totalStackSize + 0x200;\n  if (0 < totalStackUsed) {\n    totalStackFree = totalStackUsed + totalStackFree;\n  }\n  for (threadIndex = 1; threadIndex < 0x21; threadIndex = threadIndex + 1) {\n    threadInfo = *(undefined4 **)(&DAT_1fff0358 + threadIndex * 4);\n    if (threadInfo != (undefined4 *)0x0) {\n      queueStatus = (uint)*(byte *)(threadInfo + 1);\n      baseAddr = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[queueStatus];\n      priority = (int)&stateName + (uint)(8 < queueStatus);\n      stackUsed = threadInfo[0xb];\n      totalStackSize = stackUsed + totalStackSize;\n      iVar1 = thread_measure_stack_free(threadInfo[9]);\n      stackUsed = stackUsed - iVar1;\n      totalStackFree = stackUsed + totalStackFree;\n      iprintf(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n              (int)*(short *)((int)threadInfo + 6),threadInfo[10],baseAddr,priority,\n              *(undefined *)((int)threadInfo + 5),threadInfo[0xb],stackUsed,threadInfo[9],*threadInfo);\n    }\n  }\n  iprintf(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,&DAT_00007190,\n          totalStackSize,totalStackFree);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_thread_information_0000211c",
                "local_40": "stateName",
                "local_3c": "stackUsed",
                "local_38": "priority",
                "local_34": "baseAddr",
                "local_30": "queueStatus",
                "local_2c": "threadInfo",
                "local_28": "stackPointer",
                "local_24": "stackStart",
                "local_20": "totalStackUsed",
                "local_1a": "threadIndex",
                "local_18": "totalStackFree",
                "local_14": "totalStackSize"
            },
            "calling": [
                "core_panic",
                "_ps_handler"
            ],
            "called": [
                "iprintf",
                "thread_isr_stack_start",
                "thread_isr_stack_usage",
                "thread_isr_stack_pointer",
                "thread_measure_stack_free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined uVar1;\n  int value;\n  bool isEqual;\n  \n  value = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value;\n  if (isEqual) {\n    value = 1;\n  }\n  uVar1 = (undefined)value;\n  if (!isEqual) {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "isEqual"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_if_third_param_equals_sum_of_first_two_00002294",
            "code": "\nundefined checkIfThirdParamEqualsSumOfFirstTwo_00002294(int input)\n\n{\n  undefined result;\n  int sumOfFirstTwo;\n  bool isSumEqualToThird;\n  \n  sumOfFirstTwo = *(int *)(input + 4);\n  isSumEqualToThird = *(int *)(input + 0xc) - *(int *)(input + 8) == sumOfFirstTwo;\n  if (isSumEqualToThird) {\n    sumOfFirstTwo = 1;\n  }\n  result = (undefined)sumOfFirstTwo;\n  if (!isSumEqualToThird) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_if_third_param_equals_sum_of_first_two_00002294",
                "param_1": "input",
                "iVar2": "sumOfFirstTwo",
                "bVar3": "isSumEqualToThird",
                "uVar1": "result"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_assign_value_000022be",
            "code": "\nvoid incrementAndAssignValue_000022be(int *array,undefined value)\n\n{\n  uint oldValue;\n  \n  oldValue = array[3];\n  array[3] = oldValue + 1;\n  *(undefined *)((oldValue & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_assign_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "oldValue"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_memory_000022f0",
            "code": "\nundefined incrementAndReturnMemory_000022f0(int *memory)\n\n{\n  uint previousValue;\n  \n  previousValue = memory[2];\n  memory[2] = previousValue + 1;\n  return *(undefined *)((previousValue & memory[1] - 1U) + *memory);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_memory_000022f0",
                "param_1": "memory",
                "uVar1": "previousValue"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_data_0000231c",
            "code": "\nint copy_data_0000231c(undefined4 source_buffer,undefined *destination_buffer,int data_length)\n\n{\n  undefined value;\n  int tsrb_status;\n  undefined *dest_ptr;\n  int remaining_length;\n  \n  dest_ptr = destination_buffer;\n  remaining_length = data_length;\n  while ((remaining_length != 0 && (tsrb_status = tsrb_empty(source_buffer), tsrb_status == 0))) {\n    value = _pop(source_buffer);\n    *dest_ptr = value;\n    remaining_length = remaining_length + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return data_length - remaining_length;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_data_0000231c",
                "param_1": "source_buffer",
                "param_2": "destination_buffer",
                "param_3": "data_length",
                "uVar1": "value",
                "iVar2": "tsrb_status",
                "local_20": "dest_ptr",
                "local_14": "remaining_length"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_pop",
                "tsrb_empty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_tsrb_status_00002364",
            "code": "\nundefined4 checkTSRBStatus_00002364(undefined4 tsrbData,undefined element)\n\n{\n  int status;\n  undefined4 result;\n  \n  status = tsrb_full(tsrbData);\n  if (status == 0) {\n    _push(tsrbData,element);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_tsrb_status_00002364",
                "param_1": "tsrbData",
                "param_2": "element",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "_push",
                "tsrb_full"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_real_time_clock_00002396",
            "code": "\nvoid initialize_real_time_clock_00002396(void)\n\n{\n  rtc_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_real_time_clock_00002396"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "rtc_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_riot_000023a4",
            "code": "\nundefined4 initializeRIOT_000023a4(void)\n\n{\n  undefined4 status;\n  undefined buffer [128];\n  \n  startForkserver(0);\n  puts(\"Welcome to RIOT!\");\n  status = shell_run(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return status;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_riot_000023a4",
                "uVar1": "status",
                "auStack_88": "buffer"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "startForkserver",
                "shell_run",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "trigger_software_interrupt_000023c8",
            "code": "\nvoid triggerSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_afl_function_000023d0",
            "code": "\nundefined4 executeAflFunction_000023d0(undefined4 input)\n\n{\n  undefined4 output;\n  \n  if (DAT_1fff0d98 == 0) {\n    output = aflCall(1,input,0);\n  }\n  else {\n    output = 0;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_afl_function_000023d0",
                "param_1": "input",
                "uVar1": "output"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_next_pointer_0000240c",
            "code": "\nundefined4 * extractNextPointer_0000240c(undefined4 *inputPointer)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*inputPointer;\n  if (nextPointer != (undefined4 *)0x0) {\n    *inputPointer = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_next_pointer_0000240c",
                "param_1": "inputPointer",
                "puVar1": "nextPointer"
            },
            "calling": [
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "set_status_and_yield_00002434",
            "code": "\nundefined4 set_status_and_yield_00002434(int *status_ptr,int flag)\n\n{\n  int saved_var;\n  undefined4 result;\n  \n  result = irq_disable();\n  saved_var = DAT_1fff03dc;\n  if (*status_ptr == 0) {\n    *status_ptr = -1;\n    irq_restore(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    irq_restore(result);\n    result = 0;\n  }\n  else {\n    sched_set_status(DAT_1fff03dc,2);\n    if (*status_ptr == -1) {\n      *status_ptr = saved_var + 8;\n      *(undefined4 *)*status_ptr = 0;\n    }\n    else {\n      thread_add_to_list(status_ptr,saved_var);\n    }\n    irq_restore(result);\n    thread_yield_higher();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "set_status_and_yield_00002434",
                "param_1": "status_ptr",
                "param_2": "flag",
                "iVar1": "saved_var",
                "uVar2": "result"
            },
            "calling": [
                "mutex_lock"
            ],
            "called": [
                "thread_yield_higher",
                "sched_set_status",
                "irq_restore",
                "irq_disable",
                "thread_add_to_list"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_param_000024bc",
            "code": "\nvoid processParam_000024bc(int *param)\n\n{\n  undefined backupData;\n  undefined4 irqState;\n  int headItem;\n  \n  irqState = irq_disable();\n  if (*param == 0) {\n    irq_restore(irqState);\n  }\n  else if (*param == -1) {\n    *param = 0;\n    irq_restore(irqState);\n  }\n  else {\n    headItem = list_remove_head(param);\n    sched_set_status(headItem + -8,10);\n    if (*param == 0) {\n      *param = -1;\n    }\n    backupData = *(undefined *)(headItem + -3);\n    irq_restore(irqState);\n    sched_switch(backupData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_param_000024bc",
                "param_1": "param",
                "uVar1": "backupData",
                "uVar2": "irqState",
                "iVar3": "headItem"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "sched_set_status",
                "irq_restore",
                "sched_switch",
                "irq_disable",
                "list_remove_head"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "set_byte_value_00002538",
            "code": "\nvoid setByteValue_00002538(byte inputIndex,uint value)\n\n{\n  if ((char)inputIndex < '\\0') {\n    (&DAT_e000ed14)[inputIndex & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputIndex + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "set_byte_value_00002538",
                "param_1": "inputIndex",
                "param_2": "value"
            },
            "calling": [
                "cortexm_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_data_0000258c",
            "code": "\n\n\nvoid initializeData_0000258c(void)\n\n{\n  uint index;\n  \n  _DAT_e000ed08 = 0;\n  set_byte_value_00002538(0xfffffffe,1);\n  set_byte_value_00002538(0xfffffffb,1);\n  for (index = 0; index < 0x66; index = index + 1) {\n    set_byte_value_00002538((int)(char)index,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_data_0000258c",
                "local_c": "index"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_real_time_transmission_000025f4",
            "code": "\nvoid initialize_real_time_transmission_000025f4(void)\n\n{\n  initialize_rtt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_real_time_transmission_000025f4",
                "rtt_init": "initialize_rtt"
            },
            "calling": [
                "periph_init"
            ],
            "called": [
                "rtt_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "set_counter_from_time_00002600",
            "code": "\nundefined4 setCounterFromTime_00002600(undefined4 timeStruct)\n\n{\n  undefined4 counter;\n  \n  counter = convertToTimestamp(timeStruct);\n  setCounter(counter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "set_counter_from_time_00002600",
                "param_1": "timeStruct",
                "uVar1": "counter",
                "mktime": "convertToTimestamp",
                "rtt_set_counter": "setCounter"
            },
            "calling": [
                "_rtc_settime"
            ],
            "called": [
                "rtt_set_counter",
                "mktime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "convert_time_to_utc_00002624",
            "code": "\nundefined4 convertTimeToUtc_00002624(undefined4 outputTime)\n\n{\n  undefined4 counterTime;\n  undefined4 zeroValue;\n  \n  counterTime = rtt_get_counter();\n  zeroValue = 0;\n  gmtime_r(&counterTime,outputTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "convert_time_to_utc_00002624",
                "param_1": "outputTime",
                "local_10": "counterTime",
                "uStack_c": "zeroValue"
            },
            "calling": [
                "_rtc_gettime"
            ],
            "called": [
                "gmtime_r",
                "rtt_get_counter"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "set_alarm_00002654",
            "code": "\nundefined4 setAlarm_00002654(undefined4 dateTime,undefined4 alarmType,undefined4 alarmData)\n\n{\n  undefined4 timestamp;\n  \n  timestamp = mktime(dateTime);\n  DAT_1fff0d9c = alarmType;\n  rtt_set_alarm(timestamp,0x26f1,alarmData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "set_alarm_00002654",
                "param_1": "dateTime",
                "param_2": "alarmType",
                "param_3": "alarmData",
                "uVar1": "timestamp"
            },
            "calling": [
                "_rtc_setalarm"
            ],
            "called": [
                "mktime",
                "rtt_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "get_alarm_and_convert_to_local_time_00002690",
            "code": "\nundefined4 get_alarm_and_convert_to_local_time_00002690(undefined4 converted_time)\n\n{\n  undefined4 alarm_time;\n  undefined4 zero;\n  \n  alarm_time = rtt_get_alarm();\n  zero = 0;\n  gmtime_r(&alarm_time,converted_time);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "get_alarm_and_convert_to_local_time_00002690",
                "param_1": "converted_time",
                "local_10": "alarm_time",
                "uStack_c": "zero"
            },
            "calling": [
                "_rtc_getalarm"
            ],
            "called": [
                "rtt_get_alarm",
                "gmtime_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_alarm_000026c0",
            "code": "\nvoid clearAlarm_000026c0(void)\n\n{\n  rtt_clear_alarm();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_alarm_000026c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_clear_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "power_on_real_time_timer_000026d8",
            "code": "\nvoid powerOnRealTimeTimer_000026d8(void)\n\n{\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "power_on_real_time_timer_000026d8"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "power_off_000026e4",
            "code": "\nvoid power_off_000026e4(void)\n\n{\n  power_off_000026e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "power_off_000026e4",
                "rtt_poweroff": "power_off"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweroff"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackParameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte byteToSet)\n\n{\n  *(int *)(((uint)(int)(char)byteToSet >> 5) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "byteToSet"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid updateData_00002744(byte inputIndex,uint data)\n\n{\n  if ((char)inputIndex < '\\0') {\n    (&DAT_e000ed14)[inputIndex & 0xf] = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputIndex + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "inputIndex",
                "param_2": "data"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_yield_00002798",
            "code": "\nvoid checkAndYield_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yieldHigher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_yield_00002798",
                "thread_yield_higher": "yieldHigher"
            },
            "calling": [
                "isr_rtc"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "calling": [
                "rtc_init"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_memory_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getMemoryAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_memory_address_0000281c"
            },
            "calling": [
                "rtc_get_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_structure_0000285c",
            "code": "\n\n\nvoid initializeDataStructure_0000285c(undefined4 data)\n\n{\n  _DAT_4003d000 = data;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_structure_0000285c",
                "param_1": "data"
            },
            "calling": [
                "rtc_set_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_peripheral_00002894",
            "code": "\n\n\nvoid initializePeripheral_00002894(int value,undefined4 input1,undefined4 input2)\n\n{\n  _DAT_4003d008 = value + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = input1;\n  DAT_1fff0da4 = input2;\n  NVIC_SetPriority(0x2e,10);\n  NVIC_EnableIRQ(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_peripheral_00002894",
                "param_1": "value",
                "param_2": "input1",
                "param_3": "input2"
            },
            "calling": [
                "rtc_set_alarm"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_pointer_000028f0",
            "code": "\n\n\nint incrementDataPointer_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_pointer_000028f0"
            },
            "calling": [
                "rtc_get_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "reset_data_00002910",
            "code": "\n\n\nvoid resetData_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "reset_data_00002910"
            },
            "calling": [
                "rtc_clear_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "rtt_init",
                "rtc_poweron"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "disable_interrupt_00002970",
            "code": "\n\n\nvoid disableInterrupt_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "disable_interrupt_00002970"
            },
            "calling": [
                "rtc_poweroff"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_interrupt_handlers_00002994",
            "code": "\n\n\nvoid executeInterruptHandlers_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  cortexm_isr_end();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_interrupt_handlers_00002994"
            },
            "calling": [],
            "called": [
                "cortexm_isr_end"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "print_character_00002a00",
            "code": "\nvoid printCharacter_00002a00(undefined4 charToPrint)\n\n{\n  putchar(charToPrint);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "print_character_00002a00",
                "param_1": "charToPrint"
            },
            "calling": [
                "print_prompt",
                "readline"
            ],
            "called": [
                "putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_command_00002a18",
            "code": "\nint find_command_00002a18(int *command_list,undefined4 target_command)\n\n{\n  int comparison_result;\n  int *current_command;\n  undefined **reboot_address;\n  uint index;\n  int *current_argument;\n  \n  current_command = command_list;\n  reboot_address = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_argument = (&current_command)[index];\n    if (current_argument != (int *)0x0) {\n      for (; *current_argument != 0; current_argument = current_argument + 3) {\n        comparison_result = strcmp(*current_argument,target_command);\n        if (comparison_result == 0) {\n          return current_argument[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_command_00002a18",
                "param_1": "command_list",
                "param_2": "target_command",
                "iVar1": "comparison_result",
                "local_18": "current_command",
                "local_14": "reboot_address",
                "local_10": "index",
                "local_c": "current_argument"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandArray)\n\n{\n  int *currentCommand;\n  undefined **commandDescription;\n  uint index;\n  int *currentDescription;\n  \n  iprintf(\"%-20s %s\\n\",\"Command\",\"Description\");\n  puts(\"---------------------------------------\");\n  currentCommand = commandArray;\n  commandDescription = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentDescription = (&currentCommand)[index];\n    if (currentDescription != (int *)0x0) {\n      for (; *currentDescription != 0; currentDescription = currentDescription + 3) {\n        iprintf(\"%-20s %s\\n\",*currentDescription,currentDescription[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandArray",
                "local_18": "currentCommand",
                "local_14": "commandDescription",
                "local_10": "index",
                "local_c": "currentDescription"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "iprintf",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_input_00002b10",
            "code": "\nvoid processInput_00002b10(undefined4 param1,byte *inputString)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *stringArray [3];\n  code *handlerFunction;\n  char **commandArray;\n  uint commandCount;\n  byte quoteChar;\n  char *innerStringPtr;\n  char *outerStringPtr;\n  char **currentCommand;\n  uint commandIndex;\n  int escapeCount;\n  uint validCommandCount;\n  byte *currentChar;\n  \n  validCommandCount = 0;\n  escapeCount = 0;\n  currentChar = inputString;\n  while( true ) {\n    stringArray[0] = inputString;\n    stringArray[1] = (byte *)param1;\n    if (0x20 < *currentChar) {\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        quoteChar = *currentChar;\n        do {\n          pbVar2 = currentChar + 1;\n          if (*pbVar2 == 0) {\n            currentChar = pbVar2;\n            puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentChar = currentChar + 2;\n            pbVar2 = currentChar;\n            if (*currentChar == 0) {\n              puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentChar = pbVar2;\n        } while (quoteChar != *currentChar);\n        if (0x20 < currentChar[1]) {\n          puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentChar == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentChar = currentChar + 1;\n            if (*currentChar == 0) {\n              puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentChar = currentChar + 1;\n          if (*currentChar == 0x22) {\n            puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentChar);\n      }\n      validCommandCount = validCommandCount + 1;\n    }\n    if (*currentChar == 0) break;\n    *currentChar = 0;\n    currentChar = currentChar + 1;\n  }\n  if (validCommandCount != 0) {\n    commandCount = validCommandCount;\n    commandArray = (char **)((int)stringArray - ((validCommandCount + 1) * 4 + 7 & 0xfffffff8));\n    commandArray[validCommandCount] = (char *)0x0;\n    currentChar = inputString;\n    for (commandIndex = 0; currentCommand = commandArray, commandIndex < validCommandCount; commandIndex = commandIndex + 1) {\n      for (; *currentChar == 0; currentChar = currentChar + 1) {\n      }\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        currentChar = currentChar + 1;\n      }\n      commandArray[commandIndex] = (char *)currentChar;\n      for (; *currentChar != 0; currentChar = currentChar + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*currentCommand != (char *)0x0)); currentCommand = currentCommand + 1) {\n      for (outerStringPtr = *currentCommand; *outerStringPtr != '\\0'; outerStringPtr = outerStringPtr + 1) {\n        if (*outerStringPtr == '\\') {\n          for (innerStringPtr = outerStringPtr; *innerStringPtr != '\\0'; innerStringPtr = innerStringPtr + 1) {\n            *innerStringPtr = innerStringPtr[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    handlerFunction = (code *)find_handler(param1,*commandArray);\n    if (handlerFunction == (code *)0x0) {\n      iVar1 = strcmp(&DAT_00007214,*commandArray);\n      if (iVar1 == 0) {\n        print_help(stringArray[1]);\n      }\n      else {\n        iprintf(\"shell: command not found: %s\\n\",*commandArray);\n      }\n    }\n    else {\n      (*handlerFunction)(validCommandCount,commandArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_input_00002b10",
                "param_1": "param1",
                "param_2": "inputString",
                "local_48": "stringArray",
                "local_3c": "handlerFunction",
                "local_38": "commandArray",
                "local_34": "commandCount",
                "local_2d": "quoteChar",
                "local_2c": "innerStringPtr",
                "local_28": "outerStringPtr",
                "local_24": "currentCommand",
                "local_20": "commandIndex",
                "local_1c": "escapeCount",
                "local_18": "validCommandCount",
                "local_14": "currentChar"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "iprintf",
                "find_handler",
                "puts",
                "strcmp",
                "print_help"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "read_and_print_string_00002d94",
            "code": "\nuint readAndPrintString_00002d94(undefined *buffer,int bufferSize)\n\n{\n  int inputChar;\n  byte lastByte;\n  bool isFirstByte;\n  undefined *currentChar;\n  \n  currentChar = buffer;\n  while( true ) {\n    if (bufferSize + -1 <= (int)currentChar - (int)buffer) {\n      return 0xffffffff;\n    }\n    inputChar = getchar();\n    if (inputChar < 0) break;\n    if ((inputChar == 0xd) || (inputChar == 10)) {\n      *currentChar = 0;\n      _putchar(0xd);\n      _putchar(10);\n      isFirstByte = currentChar == buffer;\n      if (isFirstByte) {\n        buffer = (undefined *)0x1;\n      }\n      lastByte = (byte)buffer;\n      if (!isFirstByte) {\n        lastByte = 0;\n      }\n      return (uint)lastByte;\n    }\n    if ((inputChar == 8) || (inputChar == 0x7f)) {\n      if (currentChar != buffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        _putchar(8);\n        _putchar(0x20);\n        _putchar(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputChar;\n      _putchar(inputChar);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "read_and_print_string_00002d94",
                "param_1": "buffer",
                "param_2": "bufferSize",
                "iVar1": "inputChar",
                "bVar2": "lastByte",
                "bVar3": "isFirstByte",
                "local_c": "currentChar"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "_putchar",
                "getchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "print_greater_and_space_00002e48",
            "code": "\nvoid printGreaterAndSpace_00002e48(void)\n\n{\n  printCharacter(0x3e);\n  printCharacter(0x20);\n  flushBuffer(*(undefined4 *)(Elf32_Rel_ARRAY_1fff0200[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "print_greater_and_space_00002e48",
                "r_offset": "offset",
                "_putchar": "printCharacter",
                "fflush": "flushBuffer"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "fflush",
                "_putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "handle_user_input_00002e6c",
            "code": "\nvoid handle_user_input_00002e6c(undefined4 prompt_text,undefined4 input_buffer,undefined4 buffer_size)\n\n{\n  int read_result;\n  \n  print_prompt();\n  do {\n    read_result = readline(input_buffer,buffer_size);\n    if (read_result == 0) {\n      handle_input_line(prompt_text,input_buffer);\n    }\n    print_prompt();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "handle_user_input_00002e6c",
                "param_1": "prompt_text",
                "param_2": "input_buffer",
                "param_3": "buffer_size",
                "iVar1": "read_result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "handle_input_line",
                "print_prompt",
                "readline"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "reboot_system_00002e9c",
            "code": "\nundefined4 reboot_system_00002e9c(void)\n\n{\n  system_restart();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "reboot_system_00002e9c",
                "pm_reboot": "system_restart"
            },
            "calling": [],
            "called": [
                "pm_reboot"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_00002eb4",
            "code": "\nundefined4 initialize_00002eb4(void)\n\n{\n  print_status();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_00002eb4",
                "ps": "print_status"
            },
            "calling": [],
            "called": [
                "ps"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_data_from_device_00002ecc",
            "code": "\nvoid readDataFromDevice_00002ecc(undefined4 deviceNumber,int deviceAddress)\n\n{\n  undefined4 classString;\n  undefined4 deviceInfo;\n  undefined dataBuffer [8];\n  uint dataSize;\n  \n  dataSize = saul_reg_read(deviceAddress,dataBuffer);\n  if ((int)dataSize < 1) {\n    iprintf(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceInfo = *(undefined4 *)(deviceAddress + 8);\n    classString = saul_class_to_str(*(undefined *)(*(int *)(deviceAddress + 0xc) + 8));\n    iprintf(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceInfo,classString);\n    phydat_dump(dataBuffer,dataSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_data_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceAddress",
                "uVar1": "classString",
                "uVar2": "deviceInfo",
                "auStack_1c": "dataBuffer",
                "local_14": "dataSize"
            },
            "calling": [
                "read",
                "probe_all"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "saul_reg_read",
                "phydat_dump"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "print_probes_00002f30",
            "code": "\nvoid print_probes_00002f30(void)\n\n{\n  int probe_count;\n  undefined4 *probe_list;\n  \n  probe_count = 0;\n  for (probe_list = DAT_1fff0db0; probe_list != (undefined4 *)0x0; probe_list = (undefined4 *)*probe_list) {\n    probe(probe_count,probe_list);\n    puts(&DAT_00007380);\n    probe_count = probe_count + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "print_probes_00002f30",
                "local_10": "probe_count",
                "local_c": "probe_list"
            },
            "calling": [
                "read"
            ],
            "called": [
                "probe",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "device_enumeration_00002f74",
            "code": "\nvoid deviceEnumeration_00002f74(void)\n\n{\n  undefined4 classStr;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    puts(\"No devices found\");\n  }\n  else {\n    puts(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    classStr = saul_class_to_str(*(undefined *)(deviceList[3] + 8));\n    iprintf(\"#%i\\t%s\\t%s\\n\",deviceCount,classStr,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "device_enumeration_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "classStr"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "handle_device_command_00002fe0",
            "code": "\nvoid handle_device_command_00002fe0(int command_count,undefined4 *command_args)\n\n{\n  int string_comparison;\n  undefined4 device_id;\n  \n  if (command_count < 3) {\n    iprintf(\"usage: %s %s <device id>|all\\n\",*command_args,command_args[1]);\n  }\n  else {\n    string_comparison = strcmp(command_args[2],&DAT_000073d4);\n    if (string_comparison == 0) {\n      probe_all();\n    }\n    else {\n      device_id = atoi(command_args[2]);\n      string_comparison = saul_reg_find_nth(device_id);\n      if (string_comparison == 0) {\n        puts(\"error: undefined device id given\");\n      }\n      else {\n        probe(device_id,string_comparison);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "handle_device_command_00002fe0",
                "param_1": "command_count",
                "param_2": "command_args",
                "iVar1": "string_comparison",
                "uVar2": "device_id"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "probe",
                "saul_reg_find_nth",
                "probe_all",
                "puts",
                "strcmp",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_device_data_0000305c",
            "code": "\nvoid writeDeviceData_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 value;\n  undefined2 deviceData [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceId;\n  int index;\n  \n  if (argc < 4) {\n    iprintf(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = atoi(argv[2]);\n    deviceIndex = saul_reg_find_nth(deviceId);\n    if (deviceIndex == 0) {\n      puts(\"error: undefined device given\");\n    }\n    else {\n      memset(deviceData,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (index = 0; index < (int)numValues; index = index + 1) {\n        value = atoi(argv[index + 3]);\n        deviceData[index] = value;\n      }\n      iprintf(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      phydat_dump(deviceData,numValues & 0xff);\n      numValues = saul_reg_write(deviceIndex,deviceData);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          iprintf(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          iprintf(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        iprintf(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_device_data_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "value",
                "auStack_20": "deviceData",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceId",
                "local_c": "index"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_reg_write",
                "memset",
                "saul_reg_find_nth",
                "puts",
                "phydat_dump",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_command_0000316c",
            "code": "\nundefined4 handle_command_0000316c(int num_args,undefined4 *args)\n\n{\n  int strcmp_result;\n  \n  if (num_args < 2) {\n    list();\n  }\n  else {\n    strcmp_result = strcmp(args[1],&DAT_000074ec);\n    if (strcmp_result == 0) {\n      read(num_args,args);\n    }\n    else {\n      strcmp_result = strcmp(args[1],\"write\");\n      if (strcmp_result == 0) {\n        write(num_args,args);\n      }\n      else {\n        iprintf(\"usage: %s read|write\\n\",*args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_command_0000316c",
                "param_1": "num_args",
                "param_2": "args",
                "iVar1": "strcmp_result"
            },
            "calling": [],
            "called": [
                "list",
                "iprintf",
                "read",
                "strcmp",
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "alarm_notification_000031e0",
            "code": "\nvoid alarm_notification_000031e0(void)\n\n{\n  print_message(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "alarm_notification_000031e0",
                "puts": "print_message"
            },
            "calling": [],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "compute_day_of_week_000031fc",
            "code": "\nint compute_day_of_week_000031fc(int year,int month,int day)\n\n{\n  byte is_leap_year;\n  int adjusted_year;\n  \n  adjusted_year = month;\n  if (month < 3) {\n    adjusted_year = 1;\n  }\n  is_leap_year = (byte)adjusted_year;\n  if (2 < month) {\n    is_leap_year = 0;\n  }\n  year = year - (uint)is_leap_year;\n  adjusted_year = year;\n  if (year < 0) {\n    adjusted_year = year + 3;\n  }\n  return ((((adjusted_year >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)Elf32_Rel_ARRAY_1fff0200 + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "compute_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "is_leap_year",
                "iVar2": "adjusted_year"
            },
            "calling": [
                "_parse_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_input_and_calculate_0000328c",
            "code": "\nundefined4 parseInputAndCalculate_0000328c(undefined4 *inputStrings,int *outputArray)\n\n{\n  int result;\n  int endPtr;\n  short parsedValue;\n  \n  parsedValue = strtol(*inputStrings,&endPtr,10);\n  outputArray[5] = parsedValue + -0x76c;\n  parsedValue = strtol(endPtr + 1,&endPtr,10);\n  outputArray[4] = parsedValue + -1;\n  parsedValue = strtol(endPtr + 1,&endPtr,10);\n  outputArray[3] = (int)parsedValue;\n  parsedValue = strtol(inputStrings[1],&endPtr,10);\n  outputArray[2] = (int)parsedValue;\n  parsedValue = strtol(endPtr + 1,&endPtr,10);\n  outputArray[1] = (int)parsedValue;\n  parsedValue = strtol(endPtr + 1,&endPtr,10);\n  *outputArray = (int)parsedValue;\n  result = dow(outputArray[5] + 0x76c,outputArray[4] + 1,outputArray[3]);\n  outputArray[6] = result;\n  outputArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_input_and_calculate_0000328c",
                "param_1": "inputStrings",
                "param_2": "outputArray",
                "local_10": "endPtr",
                "local_a": "parsedValue",
                "iVar1": "result"
            },
            "calling": [
                "_rtc_setalarm",
                "_rtc_settime"
            ],
            "called": [
                "dow",
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_formatted_date_time_00003378",
            "code": "\nundefined4 printFormattedDateTime_00003378(undefined4 *dateTimeComponents)\n\n{\n  iprintf(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,hour,\n          minute,*dateTimeComponents);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_formatted_date_time_00003378",
                "param_1": "dateTimeComponents",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "_rtc_gettime",
                "_rtc_getalarm"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_and_print_rtc_alarm_000033c0",
            "code": "\nbool getAndPrintRTCAlarm_000033c0(void)\n\n{\n  int rtcResult;\n  undefined alarmData [36];\n  \n  rtcResult = rtc_get_alarm(alarmData);\n  if (rtcResult != 0) {\n    puts(\"rtc: error getting alarm\");\n  }\n  else {\n    _print_time(alarmData);\n  }\n  return rtcResult != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_and_print_rtc_alarm_000033c0",
                "iVar1": "rtcResult",
                "auStack_2c": "alarmData"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_alarm",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_if_valid_time_000033f4",
            "code": "\nundefined4 set_alarm_if_valid_time_000033f4(undefined4 time_string)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined time_array [36];\n  \n  parse_result = _parse_time(time_string,time_array);\n  if (parse_result == 0) {\n    parse_result = rtc_set_alarm(time_array,0x31e1,0);\n    if (parse_result == -1) {\n      puts(\"rtc: error setting alarm\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_if_valid_time_000033f4",
                "param_1": "time_string",
                "iVar1": "parse_result",
                "uVar2": "return_value",
                "auStack_2c": "time_array"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts",
                "_parse_time",
                "rtc_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "check_and_print_time_00003444",
            "code": "\nbool checkAndPrintTime_00003444(void)\n\n{\n  int errorCode;\n  undefined timeData [36];\n  \n  errorCode = rtc_get_time(timeData);\n  if (errorCode != 0) {\n    puts(\"rtc: error getting time\");\n  }\n  else {\n    _print_time(timeData);\n  }\n  return errorCode != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "check_and_print_time_00003444",
                "auStack_2c": "timeData",
                "iVar1": "errorCode"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_time",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_00003478",
            "code": "\nundefined4 setTime_00003478(undefined4 timeData)\n\n{\n  int parseResult;\n  undefined4 returnValue;\n  undefined parsedTime [36];\n  \n  parseResult = _parse_time(timeData,parsedTime);\n  if (parseResult == 0) {\n    parseResult = rtc_set_time(parsedTime);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_00003478",
                "param_1": "timeData",
                "iVar1": "parseResult",
                "uVar2": "returnValue",
                "auStack_2c": "parsedTime"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_set_time",
                "puts",
                "_parse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  puts(\"usage: rtc <command> [arguments]\");\n  puts(\"commands:\");\n  puts(\"\\tpoweron\\t\\tpower the interface on\");\n  puts(\"\\tpoweroff\\tpower the interface off\");\n  puts(\"\\tclearalarm\\tdeactivate the current alarm\");\n  puts(\"\\tgetalarm\\tprint the currently alarm time\");\n  puts(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  puts(\"\\tgettime\\t\\tprint the current time\");\n  puts(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "process_command_00003524",
            "code": "\nundefined4 processCommand_00003524(int commandCount,int commandArray)\n\n{\n  int comparisonResult;\n  undefined4 errorCode;\n  \n  if (commandCount < 2) {\n    _rtc_usage();\n    errorCode = 1;\n  }\n  else {\n    comparisonResult = strncmp(*(undefined4 *)(commandArray + 4),\"poweron\",7);\n    if (comparisonResult == 0) {\n      rtc_poweron();\n    }\n    else {\n      comparisonResult = strncmp(*(undefined4 *)(commandArray + 4),\"poweroff\",8);\n      if (comparisonResult == 0) {\n        rtc_poweroff();\n      }\n      else {\n        comparisonResult = strncmp(*(undefined4 *)(commandArray + 4),\"clearalarm\",8);\n        if (comparisonResult == 0) {\n          rtc_clear_alarm();\n        }\n        else {\n          comparisonResult = strncmp(*(undefined4 *)(commandArray + 4),\"getalarm\",8);\n          if (comparisonResult == 0) {\n            _rtc_getalarm();\n          }\n          else {\n            comparisonResult = strncmp(*(undefined4 *)(commandArray + 4),\"setalarm\",8);\n            if ((comparisonResult == 0) && (commandCount == 4)) {\n              _rtc_setalarm(commandArray + 8);\n            }\n            else {\n              comparisonResult = strncmp(*(undefined4 *)(commandArray + 4),\"gettime\",7);\n              if (comparisonResult == 0) {\n                _rtc_gettime();\n              }\n              else {\n                comparisonResult = strncmp(*(undefined4 *)(commandArray + 4),\"settime\",7);\n                if ((comparisonResult != 0) || (commandCount != 4)) {\n                  iprintf(\"unknown command or missing parameters: %s\\n\\n\",\n                          *(undefined4 *)(commandArray + 4));\n                  _rtc_usage();\n                  return 1;\n                }\n                _rtc_settime(commandArray + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    errorCode = 0;\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_00003524": "process_command_00003524",
                "param_1": "commandCount",
                "param_2": "commandArray",
                "iVar1": "comparisonResult",
                "uVar2": "errorCode"
            },
            "calling": [],
            "called": [
                "iprintf",
                "_rtc_setalarm",
                "rtc_clear_alarm",
                "strncmp",
                "_rtc_gettime",
                "_rtc_getalarm",
                "rtc_poweron",
                "rtc_poweroff",
                "_rtc_settime",
                "_rtc_usage"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "endless_loop_00003658",
            "code": "\nvoid endlessLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "endless_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "pm_reboot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "reset_system_00003688",
            "code": "\nvoid reset_system_00003688(void)\n\n{\n  reset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "reset_system_00003688",
                "NVIC_SystemReset": "reset"
            },
            "calling": [
                "_reboot_handler"
            ],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObjectAddress,byte size)\n\n{\n  undefined4 unitId;\n  char isFlagSet;\n  uint bitMask;\n  bool isBitSet;\n  undefined formattedValue [8];\n  int formattedValueSize;\n  char prefixSymbol;\n  byte index;\n  \n  if ((dataObjectAddress == 0) || (3 < size)) {\n    puts(\"Unable to display data object\");\n  }\n  else {\n    iprintf(\"Data:\");\n    for (index = 0; index < size; index = index + 1) {\n      if (*(byte *)(dataObjectAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObjectAddress + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        isFlagSet = (char)bitMask;\n        if (!isBitSet) {\n          isFlagSet = '\\0';\n        }\n        if (isFlagSet == '\\0') goto LAB_000036ee;\n        prefixSymbol = '\\0';\n      }\n      else {\nLAB_000036ee:\n        prefixSymbol = phydat_prefix_from_scale((int)*(char *)(dataObjectAddress + 7));\n      }\n      iprintf(&DAT_000077bc);\n      if (size < 2) {\n        iprintf(\"     \");\n      }\n      else {\n        iprintf(\"[%u] \",index);\n      }\n      if (prefixSymbol == '\\0') {\n        if (*(char *)(dataObjectAddress + 7) == '\\0') {\n          iprintf(&DAT_000077d8,(int)*(short *)(dataObjectAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataObjectAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObjectAddress + 7),4)) &&\n                (*(char *)(dataObjectAddress + 7) < '\\0')) {\n          formattedValueSize = fmt_s16_dfp(formattedValue,(int)*(short *)(dataObjectAddress + (uint)index * 2),\n                                 (int)*(char *)(dataObjectAddress + 7));\n          formattedValue[formattedValueSize] = 0;\n          iprintf(&DAT_000077dc,formattedValue);\n        }\n        else {\n          iprintf(\"%iE%i\",(int)*(short *)(dataObjectAddress + (uint)index * 2),(int)*(char *)(dataObjectAddress + 7));\n        }\n      }\n      else {\n        iprintf(\"%6d %c\",(int)*(short *)(dataObjectAddress + (uint)index * 2),prefixSymbol);\n      }\n      unitId = phydat_unit_to_str(*(undefined *)(dataObjectAddress + 6));\n      iprintf(&DAT_000077e8,unitId);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObjectAddress",
                "param_2": "size",
                "uVar1": "unitId",
                "cVar2": "isFlagSet",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "formattedValue",
                "local_10": "formattedValueSize",
                "local_a": "prefixSymbol",
                "local_9": "index"
            },
            "calling": [
                "probe",
                "write"
            ],
            "called": [
                "phydat_prefix_from_scale",
                "iprintf",
                "puts",
                "fmt_s16_dfp",
                "phydat_unit_to_str"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_data_address_00003810",
            "code": "\nundefined * get_data_address_00003810(undefined input_value)\n\n{\n  undefined *data_address;\n  \n  switch(input_value) {\n  case 2:\n    data_address = &DAT_000077ec;\n    break;\n  case 3:\n    data_address = &DAT_000077f0;\n    break;\n  case 4:\n    data_address = &DAT_000077f4;\n    break;\n  case 5:\n    data_address = &DAT_000077f8;\n    break;\n  case 6:\n    data_address = &DAT_000077fc;\n    break;\n  case 7:\n    data_address = (undefined *)0x7800;\n    break;\n  case 8:\n    data_address = &DAT_00007804;\n    break;\n  case 9:\n    data_address = &DAT_00007808;\n    break;\n  case 10:\n    data_address = &DAT_0000780c;\n    break;\n  case 0xb:\n    data_address = &DAT_00007810;\n    break;\n  case 0xc:\n    data_address = &DAT_00007814;\n    break;\n  case 0xd:\n    data_address = &DAT_00007818;\n    break;\n  case 0xe:\n    data_address = &DAT_0000781c;\n    break;\n  case 0xf:\n    data_address = &DAT_00007820;\n    break;\n  case 0x10:\n    data_address = &DAT_00007824;\n    break;\n  case 0x11:\n    data_address = &DAT_0000782c;\n    break;\n  default:\n    data_address = &DAT_00007834;\n    break;\n  case 0x13:\n    data_address = &DAT_00007830;\n    break;\n  case 0x15:\n    data_address = &DAT_00007828;\n  }\n  return data_address;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_data_address_00003810",
                "param_1": "input_value",
                "puVar1": "data_address"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "convert_param_to_value_00003918",
            "code": "\nundefined4 convertParamToValue_00003918(undefined inputParam)\n\n{\n  undefined4 outputValue;\n  \n  switch(inputParam) {\n  case 2:\n    outputValue = 0x68;\n    break;\n  case 3:\n    outputValue = 0x6b;\n    break;\n  case 6:\n    outputValue = 0x4d;\n    break;\n  case 9:\n    outputValue = 0x47;\n    break;\n  case 0xc:\n    outputValue = 0x54;\n    break;\n  case 0xf:\n    outputValue = 0x50;\n    break;\n  case 0xf1:\n    outputValue = 0x66;\n    break;\n  default:\n    outputValue = 0;\n    break;\n  case 0xf4:\n    outputValue = 0x70;\n    break;\n  case 0xf7:\n    outputValue = 0x6e;\n    break;\n  case 0xfa:\n    outputValue = 0x75;\n    break;\n  case 0xfd:\n    outputValue = 0x6d;\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "convert_param_to_value_00003918",
                "param_1": "inputParam",
                "uVar1": "outputValue"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "map_char_code_to_class_000039e8",
            "code": "\nchar * mapCharCodeToClass_000039e8(char charCode)\n\n{\n  char *className;\n  \n  switch(charCode) {\n  case '\\0':\n    className = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    className = \"ACT_ANY\";\n    break;\n  case 'B':\n    className = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    className = \"ACT_SERVO\";\n    break;\n  case 'D':\n    className = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    className = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    className = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    className = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    className = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    className = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    className = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    className = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    className = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    className = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    className = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    className = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    className = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    className = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    className = \"SENSE_UV\";\n    break;\n  case -0x74:\n    className = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    className = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    className = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    className = \"SENSE_CO2\";\n    break;\n  default:\n    if (charCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    className = \"CLASS_UNKNOWN\";\n  }\n  return className;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "map_char_code_to_class_000039e8",
                "param_1": "charCode",
                "pcVar1": "className"
            },
            "calling": [
                "list",
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_00003d24",
            "code": "\nundefined4 * findElement_00003d24(int targetIndex)\n\n{\n  int currentIndex;\n  undefined4 *currentElement;\n  \n  currentIndex = 0;\n  for (currentElement = DAT_1fff0db0; (currentIndex < targetIndex && (currentElement != (undefined4 *)0x0));\n      currentElement = (undefined4 *)*currentElement) {\n    currentIndex = currentIndex + 1;\n  }\n  return currentElement;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_00003d24",
                "param_1": "targetIndex",
                "local_10": "currentIndex",
                "local_c": "currentElement"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "perform_operation_00003d64",
            "code": "\nundefined4 performOperation_00003d64(int input,undefined4 value)\n\n{\n  undefined4 result;\n  \n  if (input == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (***(code ***)(input + 0xc))(*(undefined4 *)(input + 4),value);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "perform_operation_00003d64",
                "param_1": "input",
                "param_2": "value",
                "uVar1": "result"
            },
            "calling": [
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_or_return_00003d94",
            "code": "\nundefined4 executeFunctionOrReturn_00003d94(int functionPointer,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_or_return_00003d94",
                "param_1": "functionPointer",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "calculate_digits_00003dc4",
            "code": "\nint calculateDigits_00003dc4(int startingNumber,uint maxNumber)\n\n{\n  uint remainingNumber;\n  char *digitArray;\n  uint currentPower;\n  int digitCount;\n  \n  digitCount = 1;\n  if (maxNumber < 1000000000) {\n    for (currentPower = 10; currentPower <= maxNumber; currentPower = currentPower * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (startingNumber != 0) {\n    digitArray = (char *)(digitCount + startingNumber);\n    remainingNumber = maxNumber;\n    do {\n      digitArray = digitArray + -1;\n      *digitArray = (char)(remainingNumber % 10) + '0';\n      remainingNumber = remainingNumber / 10;\n    } while (remainingNumber != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "calculate_digits_00003dc4",
                "param_1": "startingNumber",
                "param_2": "maxNumber",
                "local_20": "remainingNumber",
                "local_14": "digitArray",
                "local_10": "currentPower",
                "local_c": "digitCount"
            },
            "calling": [
                "fmt_s32_dec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "convert_integer_to_ascii_00003e58",
            "code": "\nint convertIntegerToASCII_00003e58(undefined *inputArray,int inputNumber)\n\n{\n  int iVar1;\n  int convertedNumber;\n  undefined *pointerToArray;\n  \n  convertedNumber = inputNumber;\n  pointerToArray = inputArray;\n  if (-(inputNumber >> 0x1f) != 0) {\n    if (inputArray != (undefined *)0x0) {\n      pointerToArray = inputArray + 1;\n      *inputArray = 0x2d;\n    }\n    convertedNumber = -inputNumber;\n  }\n  iVar1 = fmt_u32_dec(pointerToArray,convertedNumber);\n  return -(inputNumber >> 0x1f) + iVar1;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "convert_integer_to_ascii_00003e58",
                "param_1": "inputArray",
                "param_2": "inputNumber",
                "local_18": "convertedNumber",
                "local_14": "pointerToArray"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "fmt_u32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_int_to_decimal_00003e9e",
            "code": "\nundefined4 formatIntToDecimal_00003e9e(undefined4 value,short num,undefined4 precision)\n\n{\n  undefined4 result;\n  \n  result = fmt_s32_dfp(value,(int)num,precision);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_int_to_decimal_00003e9e",
                "param_1": "value",
                "param_2": "num",
                "param_3": "precision",
                "uVar1": "result"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [
                "fmt_s32_dfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_number_00003ec4",
            "code": "\nint formatNumber_00003ec4(undefined *outputBuffer,uint number,int numberOfDigits)\n\n{\n  int digitsWritten;\n  undefined4 decimalDigits;\n  uint quotient;\n  int remainder;\n  int totalDigits;\n  \n  if (numberOfDigits + 7 < 0 != SCARRY4(numberOfDigits,7)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  totalDigits = 0;\n  if (numberOfDigits == 0) {\n    totalDigits = fmt_s32_dec(outputBuffer,number);\n  }\n  else if (numberOfDigits < 1) {\n    quotient = number / *(uint *)(&DAT_00007978 + numberOfDigits * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + numberOfDigits * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)number < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalDigits = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      digitsWritten = fmt_s32_dec(0,quotient);\n      totalDigits = digitsWritten + 1 + totalDigits;\n    }\n    else {\n      digitsWritten = fmt_s32_dec(outputBuffer + totalDigits,quotient);\n      digitsWritten = totalDigits + digitsWritten;\n      totalDigits = digitsWritten + 1;\n      outputBuffer[digitsWritten] = 0x2e;\n      decimalDigits = fmt_s32_dec(outputBuffer + totalDigits,remainder);\n      fmt_lpad(outputBuffer + totalDigits,decimalDigits,-numberOfDigits,0x30);\n    }\n    totalDigits = -numberOfDigits + totalDigits;\n  }\n  else {\n    totalDigits = fmt_s32_dec(outputBuffer,number);\n    if (outputBuffer != (undefined *)0x0) {\n      memset(outputBuffer + totalDigits,0x30,numberOfDigits);\n    }\n    totalDigits = numberOfDigits + totalDigits;\n  }\n  return totalDigits;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_number_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "number",
                "param_3": "numberOfDigits",
                "iVar1": "digitsWritten",
                "uVar2": "decimalDigits",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalDigits"
            },
            "calling": [
                "fmt_s16_dfp"
            ],
            "called": [
                "core_panic",
                "memset",
                "fmt_lpad",
                "fmt_s32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_00003ff4",
            "code": "\nuint copyAndFill_00003ff4(int offset,uint sourceLength,uint destinationLength,undefined fillValue)\n\n{\n  uint newDestinationLength;\n  \n  newDestinationLength = sourceLength;\n  if ((sourceLength < destinationLength) && (newDestinationLength = destinationLength, offset != 0)) {\n    memmove((destinationLength - sourceLength) + offset,offset,sourceLength);\n    memset(offset,fillValue,destinationLength - sourceLength);\n  }\n  return newDestinationLength;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_00003ff4",
                "param_1": "offset",
                "param_2": "sourceLength",
                "param_3": "destinationLength",
                "param_4": "fillValue",
                "uVar1": "newDestinationLength"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "memset",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_string_to_decimal_00004042",
            "code": "\nvoid parseStringToDecimal_00004042(undefined4 inputString)\n\n{\n  strtol(inputString,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_string_to_decimal_00004042",
                "param_1": "inputString"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *arrayPtr,int *dataPtr)\n\n{\n  int value;\n  int *ptr;\n  uint ushortValue;\n  ushort flags;\n  int tempValue;\n  code *functionPtr;\n  int tempVar;\n  uint tempValue;\n  bool condition;\n  \n  flags = *(ushort *)(dataPtr + 3);\n  ushortValue = (uint)flags;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    value = dataPtr[4];\n    if (value != 0) {\n      tempValue = ushortValue << 0x1e;\n      condition = tempValue == 0;\n      tempVar = *dataPtr;\n      if (condition) {\n        tempValue = dataPtr[5];\n      }\n      *dataPtr = value;\n      if (!condition) {\n        tempValue = 0;\n      }\n      dataPtr[2] = tempValue;\n      for (tempVar = tempVar - value; 0 < tempVar; tempVar = tempVar - tempValue) {\n        tempValue = (*(code *)dataPtr[10])(arrayPtr,dataPtr[8],value,tempVar);\n        if (tempValue < 1) {\n          *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        value = value + tempValue;\n      }\n    }\n  }\n  else {\n    if ((dataPtr[1] < 1) && (dataPtr[0x10] < 1)) {\n      return 0;\n    }\n    functionPtr = (code *)dataPtr[0xb];\n    if (functionPtr == (code *)0x0) {\n      return 0;\n    }\n    tempValue = *arrayPtr;\n    *arrayPtr = 0;\n    if ((flags & 0x1000) == 0) {\n      value = (*functionPtr)(arrayPtr,dataPtr[8],ushortValue & 0x1000,1);\n      if ((value == -1) && (ushortValue = *arrayPtr, ushortValue != 0)) {\n        if ((ushortValue == 0x1d) || (ushortValue == 0x16)) {\n          *arrayPtr = tempValue;\n          return 0;\n        }\n        flags = *(ushort *)(dataPtr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      value = dataPtr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(dataPtr + 3) << 0x1d) < 0) &&\n       (value = value - dataPtr[1], dataPtr[0xd] != 0)) {\n      value = value - dataPtr[0x10];\n    }\n    value = (*(code *)dataPtr[0xb])(arrayPtr,dataPtr[8],value,0);\n    flags = *(ushort *)(dataPtr + 3);\n    if ((value == -1) &&\n       ((0x1d < *arrayPtr || (-1 < (int)((0x20400001U >> (*arrayPtr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(dataPtr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    dataPtr[1] = 0;\n    *dataPtr = dataPtr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((value != -1 || (*arrayPtr == 0)))) {\n      dataPtr[0x15] = value;\n    }\n    ptr = (int *)dataPtr[0xd];\n    *arrayPtr = tempValue;\n    if (ptr != (int *)0x0) {\n      if (ptr != dataPtr + 0x11) {\n        _free_r(arrayPtr);\n      }\n      dataPtr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "arrayPtr",
                "param_2": "dataPtr",
                "iVar1": "value",
                "piVar2": "ptr",
                "uVar3": "ushortValue",
                "uVar4": "flags",
                "iVar5": "tempValue",
                "pcVar6": "functionPtr",
                "iVar7": "tempVar",
                "uVar8": "tempValue",
                "bVar9": "condition"
            },
            "calling": [
                "_fflush_r",
                "__srefill_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "FUNC_00004158",
            "code": "\nundefined4 FUNC_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      __sinit();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        __retarget_lock_acquire_recursive(param_2[0x16]);\n      }\n      uVar1 = __sflush_r(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      __retarget_lock_release_recursive(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "FUNC_00004158"
            },
            "calling": [
                "fflush",
                "__swbuf_r",
                "__srefill_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__sflush_r",
                "__sinit"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "flush_and_check_errors_000041d0",
            "code": "\nuint flushAndCheckErrors_000041d0(int inputOffset,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  uint errorFlags;\n  int loopCounter;\n  dword *relInfoPtr;\n  int currentRelOffset;\n  uint totalErrors;\n  int innerLoopCounter;\n  undefined4 *fileStreamPtr;\n  \n  if (inputOffset == 0) {\n    fileStreamPtr = &DAT_000079f8;\n    relInfoPtr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    totalErrors = 0;\n    do {\n      innerLoopCounter = relInfoPtr[1];\n      currentRelOffset = relInfoPtr[2];\n      while (innerLoopCounter = innerLoopCounter + -1, -1 < innerLoopCounter) {\n        if ((1 < *(ushort *)(currentRelOffset + 0xc)) && (loopCounter = *(short *)(currentRelOffset + 0xe) + 1, loopCounter != 0)) {\n          errorFlags = _fflush_r(0x1fff0284,currentRelOffset,unusedParam2,loopCounter,fileStreamPtr);\n          totalErrors = totalErrors | errorFlags;\n        }\n        currentRelOffset = currentRelOffset + 0x68;\n      }\n      relInfoPtr = (dword *)*relInfoPtr;\n    } while (relInfoPtr != (dword *)0x0);\n    return totalErrors;\n  }\n  totalErrors = _fflush_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,inputOffset);\n  return totalErrors;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "flush_and_check_errors_000041d0",
                "param_1": "inputOffset",
                "param_2": "unusedParam1",
                "param_3": "unusedParam2",
                "uVar1": "errorFlags",
                "iVar2": "loopCounter",
                "pdVar3": "relInfoPtr",
                "iVar4": "currentRelOffset",
                "uVar5": "totalErrors",
                "iVar6": "innerLoopCounter",
                "puVar7": "fileStreamPtr"
            },
            "calling": [
                "print_prompt"
            ],
            "called": [
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_parameters_000041f4",
            "code": "\nvoid initializeParameters_000041f4(undefined4 *parameters,undefined2 value1,undefined2 value2)\n\n{\n  *parameters = 0;\n  parameters[1] = 0;\n  parameters[4] = 0;\n  parameters[5] = 0;\n  parameters[2] = 0;\n  *(undefined2 *)(parameters + 3) = value1;\n  parameters[0x19] = 0;\n  *(undefined2 *)((int)parameters + 0xe) = value2;\n  parameters[6] = 0;\n  memset(parameters + 0x17,0,8);\n  parameters[9] = 0x4dc9;\n  parameters[10] = 0x4def;\n  parameters[0xb] = 0x4e27;\n  parameters[8] = parameters;\n  parameters[0xc] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_parameters_000041f4",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_memory_block_00004248",
            "code": "\nundefined4 * allocateMemoryBlock_00004248(undefined4 sizeOfElement,int numOfElements)\n\n{\n  undefined4 *memoryBlock;\n  int blockSize;\n  \n  blockSize = (numOfElements + -1) * 0x68;\n  memoryBlock = (undefined4 *)_malloc_r(sizeOfElement,blockSize + 0x74);\n  if (memoryBlock != (undefined4 *)0x0) {\n    *memoryBlock = 0;\n    memoryBlock[1] = numOfElements;\n    memoryBlock[2] = memoryBlock + 3;\n    memset(memoryBlock + 3,0,blockSize + 0x68);\n  }\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_memory_block_00004248",
                "param_1": "sizeOfElement",
                "param_2": "numOfElements",
                "puVar1": "memoryBlock",
                "iVar2": "blockSize"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "lock_acquire_recursive_00004274",
            "code": "\nvoid lockAcquireRecursive_00004274(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "lock_acquire_recursive_00004274"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "release_recursive_lock_00004280",
            "code": "\nvoid releaseRecursiveLock_00004280(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "release_recursive_lock_00004280"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "acquire_recursive_ret_lock_0000428c",
            "code": "\nvoid acquire_recursive_ret_lock_0000428c(void)\n\n{\n  __retarget_lock_acquire_recursive(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "acquire_recursive_ret_lock_0000428c"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_structures_000042a4",
            "code": "\nvoid initializeDataStructures_000042a4(int dataStructurePointer)\n\n{\n  undefined4 initializedValue;\n  \n  __sinit_lock_acquire();\n  if (*(int *)(dataStructurePointer + 0x18) == 0) {\n    *(undefined4 *)(dataStructurePointer + 0x48) = 0;\n    *(undefined4 *)(dataStructurePointer + 0x4c) = 0;\n    *(undefined4 *)(dataStructurePointer + 0x50) = 0;\n    initializedValue = 0x1fff0284;\n    *(undefined **)(dataStructurePointer + 0x28) = &DAT_0000423d;\n    if (dataStructurePointer == 0x1fff0284) {\n      initializedValue = 1;\n    }\n    if (dataStructurePointer == 0x1fff0284) {\n      *(undefined4 *)(dataStructurePointer + 0x18) = initializedValue;\n    }\n    initializedValue = __sfp(dataStructurePointer);\n    *(undefined4 *)(dataStructurePointer + 4) = initializedValue;\n    initializedValue = __sfp(dataStructurePointer);\n    *(undefined4 *)(dataStructurePointer + 8) = initializedValue;\n    initializedValue = __sfp(dataStructurePointer);\n    *(undefined4 *)(dataStructurePointer + 0xc) = initializedValue;\n    std(*(undefined4 *)(dataStructurePointer + 4),4,0);\n    std(*(undefined4 *)(dataStructurePointer + 8),9,1);\n    std(*(undefined4 *)(dataStructurePointer + 0xc),0x12,2);\n    *(undefined4 *)(dataStructurePointer + 0x18) = 1;\n  }\n  __retarget_lock_release_recursive(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_structures_000042a4",
                "param_1": "dataStructurePointer",
                "uVar1": "initializedValue"
            },
            "calling": [
                "iprintf",
                "_fflush_r",
                "__swbuf_r",
                "_vfprintf_r",
                "__srefill_r",
                "__sfp",
                "puts",
                "__srget_r",
                "__swsetup_r",
                "getchar",
                "putchar"
            ],
            "called": [
                "std",
                "__sinit_lock_acquire",
                "__sfp",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_library_00004314",
            "code": "\nundefined4 * initializeLibrary_00004314(undefined4 *libraryParameters)\n\n{\n  dword newRelocationEntry;\n  int numIterations;\n  undefined4 *currentRelocationEntry;\n  dword *relocationEntryPointer;\n  \n  __sfp_lock_acquire();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    __sinit(0x1fff0284);\n  }\n  relocationEntryPointer = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    numIterations = relocationEntryPointer[1];\n    currentRelocationEntry = (undefined4 *)relocationEntryPointer[2];\n    while (numIterations = numIterations + -1, -1 < numIterations) {\n      if (*(short *)(currentRelocationEntry + 3) == 0) {\n        currentRelocationEntry[3] = 0xffff0001;\n        currentRelocationEntry[0x19] = 0;\n        __retarget_lock_init_recursive(currentRelocationEntry + 0x16);\n        __sfp_lock_release();\n        currentRelocationEntry[1] = 0;\n        currentRelocationEntry[2] = 0;\n        currentRelocationEntry[4] = 0;\n        currentRelocationEntry[5] = 0;\n        *currentRelocationEntry = 0;\n        currentRelocationEntry[6] = 0;\n        memset(currentRelocationEntry + 0x17,0,8);\n        currentRelocationEntry[0xd] = 0;\n        currentRelocationEntry[0xe] = 0;\n        currentRelocationEntry[0x12] = 0;\n        currentRelocationEntry[0x13] = 0;\n        return currentRelocationEntry;\n      }\n      currentRelocationEntry = currentRelocationEntry + 0x1a;\n    }\n    if (*relocationEntryPointer == 0) {\n      newRelocationEntry = __sfmoreglue(libraryParameters,4);\n      *relocationEntryPointer = newRelocationEntry;\n      if (newRelocationEntry == 0) {\n        __sfp_lock_release();\n        *libraryParameters = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    relocationEntryPointer = (dword *)*relocationEntryPointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_library_00004314",
                "param_1": "libraryParameters",
                "dVar1": "newRelocationEntry",
                "iVar2": "numIterations",
                "puVar3": "currentRelocationEntry",
                "pdVar4": "relocationEntryPointer"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sfp_lock_acquire",
                "memset",
                "__sfp_lock_release",
                "__sfmoreglue",
                "__sinit",
                "__retarget_lock_init_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int dataOffset,code *callback)\n\n{\n  uint result;\n  int *currentOffset;\n  int innerOffset;\n  uint finalResult;\n  int iterations;\n  \n  currentOffset = (int *)(dataOffset + 0x48);\n  finalResult = 0;\n  do {\n    iterations = currentOffset[1];\n    innerOffset = currentOffset[2];\n    while (iterations = iterations + -1, -1 < iterations) {\n      if ((1 < *(ushort *)(innerOffset + 0xc)) && (*(short *)(innerOffset + 0xe) != -1)) {\n        result = (*callback)(innerOffset);\n        finalResult = finalResult | result;\n      }\n      innerOffset = innerOffset + 0x68;\n    }\n    currentOffset = (int *)*currentOffset;\n  } while (currentOffset != (int *)0x0);\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "dataOffset",
                "param_2": "callback",
                "piVar2": "currentOffset",
                "iVar3": "innerOffset",
                "uVar1": "result",
                "uVar4": "finalResult",
                "iVar5": "iterations"
            },
            "calling": [
                "__srefill_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "read_byte_from_memory_00004418",
            "code": "\nuint readByteFromMemory_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **memoryPtrPtr;\n  byte *memoryPtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  memoryPtrPtr = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (memoryPtrPtr == (byte **)&DAT_000079b8) {\n    memoryPtrPtr = *(byte ***)(offset + 4);\n  }\n  else if (memoryPtrPtr == (byte **)&DAT_000079d8) {\n    memoryPtrPtr = *(byte ***)(offset + 8);\n  }\n  else if (memoryPtrPtr == (byte **)&DAT_00007998) {\n    memoryPtrPtr = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)memoryPtrPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(memoryPtrPtr + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(memoryPtrPtr[0x16]);\n  }\n  memoryPtr = memoryPtrPtr[1];\n  memoryPtrPtr[1] = memoryPtr + -1;\n  if ((int)(memoryPtr + -1) < 0) {\n    result = __srget_r(offset,memoryPtrPtr);\n  }\n  else {\n    memoryPtr = *memoryPtrPtr;\n    *memoryPtrPtr = memoryPtr + 1;\n    result = (uint)*memoryPtr;\n  }\n  if ((-1 < (int)memoryPtrPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(memoryPtrPtr + 3) << 0x16))) {\n    __retarget_lock_release_recursive(memoryPtrPtr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "read_byte_from_memory_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "memoryPtrPtr",
                "pbVar4": "memoryPtr"
            },
            "calling": [
                "readline"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__srget_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "decode_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * decodeDateTime_0000443c(undefined4 *timeInterval,uint *dateTime)\n\n{\n  int quotient;\n  uint daysInYear;\n  uint remainingDays;\n  uint quotient2;\n  uint year;\n  undefined4 dividend;\n  undefined4 divisor;\n  uint leapYearCorrection;\n  bool isNegative;\n  \n  dividend = *timeInterval;\n  divisor = timeInterval[1];\n  quotient = __aeabi_ldivmod(dividend,divisor,0x15180,0);\n  remainingDays = 0x15180;\n  __aeabi_ldivmod(dividend,divisor,0x15180,0);\n  isNegative = (int)remainingDays < 0;\n  if (isNegative) {\n    remainingDays = remainingDays + 0x15180;\n  }\n  if (isNegative) {\n    daysInYear = quotient + 0xafa6b;\n  }\n  else {\n    daysInYear = quotient + 0xafa6c;\n  }\n  dateTime[2] = remainingDays / 0xe10;\n  dateTime[1] = (remainingDays % 0xe10) / 0x3c;\n  *dateTime = (remainingDays % 0xe10) % 0x3c;\n  dateTime[6] = (daysInYear + 3) % 7;\n  remainingDays = daysInYear;\n  if ((int)daysInYear < 0) {\n    remainingDays = daysInYear - 0x23ab0;\n  }\n  daysInYear = (remainingDays / 0x23ab1) * -0x23ab1 + daysInYear;\n  quotient2 = ((daysInYear / 0x8eac + daysInYear) - daysInYear / 0x5b4) - daysInYear / 0x23ab0;\n  year = quotient2 / 0x16d;\n  daysInYear = (year / 100 - quotient2 / 0x5b4) + daysInYear + year * -0x16d;\n  leapYearCorrection = daysInYear * 5 + 2;\n  quotient2 = leapYearCorrection / 0x99;\n  if (leapYearCorrection < 0x5fa) {\n    quotient = 2;\n  }\n  else {\n    quotient = -10;\n  }\n  leapYearCorrection = quotient2 + quotient;\n  quotient = (remainingDays / 0x23ab1) * 400 + year;\n  if (leapYearCorrection < 2) {\n    quotient = quotient + 1;\n  }\n  if (daysInYear < 0x132) {\n    if (((year & 3) == 0) && (year != (year / 100) * 100)) {\n      remainingDays = 1;\n    }\n    else {\n      remainingDays = (uint)(year % 400 == 0);\n    }\n    remainingDays = daysInYear + 0x3b + remainingDays;\n  }\n  else {\n    remainingDays = daysInYear - 0x132;\n  }\n  dateTime[7] = remainingDays;\n  dateTime[3] = (daysInYear + 1) - (quotient2 * 0x99 + 2) / 5;\n  dateTime[4] = leapYearCorrection;\n  dateTime[5] = quotient - 0x76c;\n  dateTime[8] = 0;\n  return dateTime;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "decode_date_time_0000443c",
                "param_1": "timeInterval",
                "param_2": "dateTime",
                "iVar1": "quotient",
                "uVar2": "daysInYear",
                "uVar3": "remainingDays",
                "uVar4": "quotient2",
                "uVar5": "year",
                "uVar6": "dividend",
                "uVar7": "divisor",
                "uVar8": "leapYearCorrection",
                "bVar9": "isNegative"
            },
            "calling": [
                "rtc_get_alarm",
                "rtc_get_time"
            ],
            "called": [
                "__aeabi_ldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_initialization_0000459c",
            "code": "\nvoid executeInitialization_0000459c(void)\n\n{\n  code **functionList;\n  int index;\n  \n  functionList = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionList)();\n    functionList = functionList + 1;\n  }\n  _init();\n  functionList = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionList)();\n    functionList = functionList + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_initialization_0000459c",
                "ppcVar1": "functionList",
                "iVar2": "index"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "__sfp"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "__sinit_lock_acquire",
                "_fflush_r",
                "__env_lock",
                "__sfp_lock_acquire",
                "__malloc_lock",
                "_vfprintf_r",
                "puts",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "__env_unlock",
                "_fflush_r",
                "__malloc_unlock",
                "_vfprintf_r",
                "puts",
                "__sfp_lock_release",
                "__sinit",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_reverse_000045ee",
            "code": "\nvoid copyReverse_000045ee(undefined *destination,undefined *source,int length)\n\n{\n  undefined *destPtr;\n  undefined *srcPtr;\n  \n  srcPtr = source + length;\n  if ((source < destination) && (destination < srcPtr)) {\n    destPtr = destination + length;\n    while (destPtr != destination) {\n      srcPtr = srcPtr + -1;\n      destPtr = destPtr + -1;\n      *destPtr = *srcPtr;\n    }\n  }\n  else {\n    destination = destination + -1;\n    for (; source != srcPtr; source = source + 1) {\n      destination = destination + 1;\n      *destination = *source;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_reverse_000045ee",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "srcPtr"
            },
            "calling": [
                "fmt_lpad"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_array_with_character_00004622",
            "code": "\nvoid fillArrayWithCharacter_00004622(undefined *array,undefined character,int length)\n\n{\n  undefined *endPointer;\n  \n  endPointer = array + length;\n  for (; array != endPointer; array = array + 1) {\n    *array = character;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_array_with_character_00004622",
                "param_1": "array",
                "param_2": "character",
                "param_3": "length",
                "puVar1": "endPointer"
            },
            "calling": [
                "std",
                "fmt_lpad",
                "__sfp",
                "fmt_s32_dfp",
                "__sfmoreglue",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *dateTimeArray,uint length,undefined4 constant)\n\n{\n  int daysToAdd;\n  uint months;\n  uint years;\n  int daysInMonth;\n  bool negativeCase;\n  uint *quotient;\n  uint remainder;\n  undefined4 tempConstant;\n  \n  quotient = dateTimeArray;\n  remainder = length;\n  tempConstant = constant;\n  if (0x3b < *dateTimeArray) {\n    div(&quotient,*dateTimeArray,0x3c);\n    months = dateTimeArray[1] + (int)quotient;\n    dateTimeArray[1] = months;\n    if ((int)remainder < 0) {\n      months = months - 1;\n      *dateTimeArray = remainder + 0x3c;\n    }\n    else {\n      *dateTimeArray = remainder;\n    }\n    if ((int)remainder < 0) {\n      dateTimeArray[1] = months;\n    }\n  }\n  if (0x3b < dateTimeArray[1]) {\n    div(&quotient,dateTimeArray[1],0x3c);\n    negativeCase = (int)remainder < 0;\n    years = dateTimeArray[2] + (int)quotient;\n    dateTimeArray[2] = years;\n    months = remainder;\n    if (negativeCase) {\n      months = remainder + 0x3c;\n      years = years - 1;\n    }\n    if (!negativeCase) {\n      dateTimeArray[1] = months;\n    }\n    if (negativeCase) {\n      dateTimeArray[1] = months;\n    }\n    if (negativeCase) {\n      dateTimeArray[2] = years;\n    }\n  }\n  if (0x17 < dateTimeArray[2]) {\n    div(&quotient,dateTimeArray[2],0x18);\n    negativeCase = (int)remainder < 0;\n    years = dateTimeArray[3] + (int)quotient;\n    dateTimeArray[3] = years;\n    months = remainder;\n    if (negativeCase) {\n      months = remainder + 0x18;\n      years = years - 1;\n    }\n    if (!negativeCase) {\n      dateTimeArray[2] = months;\n    }\n    if (negativeCase) {\n      dateTimeArray[2] = months;\n    }\n    if (negativeCase) {\n      dateTimeArray[3] = years;\n    }\n  }\n  if (0xb < dateTimeArray[4]) {\n    div(&quotient,dateTimeArray[4],0xc);\n    negativeCase = (int)remainder < 0;\n    months = dateTimeArray[5] + (int)quotient;\n    dateTimeArray[5] = months;\n    if (negativeCase) {\n      remainder = remainder + 0xc;\n      months = months - 1;\n    }\n    if (!negativeCase) {\n      dateTimeArray[4] = remainder;\n    }\n    if (negativeCase) {\n      dateTimeArray[4] = remainder;\n    }\n    if (negativeCase) {\n      dateTimeArray[5] = months;\n    }\n  }\n  months = dateTimeArray[5];\n  if ((months & 3) == 0) {\n    if (months == (months / 100) * 100) {\n      if ((months + 0x76c) % 400 == 0) {\n        daysInMonth = 0x1d;\n      }\n      else {\n        daysInMonth = 0x1c;\n      }\n    }\n    else {\n      daysInMonth = 0x1d;\n    }\n  }\n  else {\n    daysInMonth = 0x1c;\n  }\n  if ((int)dateTimeArray[3] < 1) {\n    while ((int)dateTimeArray[3] < 1) {\n      months = dateTimeArray[4];\n      dateTimeArray[4] = months - 1;\n      if (months - 1 == 0xffffffff) {\n        years = dateTimeArray[5];\n        months = years - 1;\n        dateTimeArray[4] = 0xb;\n        dateTimeArray[5] = months;\n        if ((months & 3) == 0) {\n          if (months == (months / 100) * 100) {\n            if ((years + 0x76b) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n      daysToAdd = daysInMonth;\n      if (dateTimeArray[4] != 1) {\n        daysToAdd = (&DAT_000079fc)[dateTimeArray[4]];\n      }\n      dateTimeArray[3] = daysToAdd + dateTimeArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      months = dateTimeArray[4];\n      daysToAdd = daysInMonth;\n      if (months != 1) {\n        daysToAdd = (&DAT_000079fc)[months];\n      }\n      if ((int)dateTimeArray[3] <= daysToAdd) break;\n      dateTimeArray[3] = dateTimeArray[3] - daysToAdd;\n      dateTimeArray[4] = months + 1;\n      if (months + 1 == 0xc) {\n        years = dateTimeArray[5];\n        months = years + 1;\n        dateTimeArray[4] = 0;\n        dateTimeArray[5] = months;\n        if ((months & 3) == 0) {\n          if (months % 100 == 0) {\n            if ((years + 0x76d) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "dateTimeArray",
                "param_2": "length",
                "param_3": "constant",
                "iVar1": "daysToAdd",
                "uVar2": "months",
                "uVar3": "years",
                "iVar4": "daysInMonth",
                "bVar5": "negativeCase",
                "local_20": "quotient",
                "local_1c": "remainder",
                "uStack_18": "tempConstant"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "div"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_offset_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateOffset_000047e4(int *dateArray)\n\n{\n  longlong totalDays;\n  longlong updatedDays;\n  int *timezoneInfo;\n  uint tempVar1;\n  int tempVar2;\n  int tempVar3;\n  int result1;\n  uint tempVar4;\n  uint isLeapYear;\n  uint tempVar6;\n  int daysInMonth;\n  uint daysFromReference;\n  uint tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  bool bVar16;\n  \n  timezoneInfo = (int *)__gettzinfo();\n  validate_structure(dateArray);\n  daysFromReference = dateArray[5];\n  daysInMonth = dateArray[3] + -1 + *(int *)(&DAT_00007a2c + dateArray[4] * 4);\n  if (((1 < dateArray[4]) && ((daysFromReference & 3) == 0)) &&\n     ((daysFromReference != (daysFromReference / 100) * 100 || (daysFromReference + 0x76c == ((daysFromReference + 0x76c) / 400) * 400)))) {\n    daysInMonth = daysInMonth + 1;\n  }\n  dateArray[7] = daysInMonth;\n  if (20000 < (int)&DAT_00002710 + daysFromReference) {\n    result1 = -1;\n    tempVar2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)daysFromReference < 0x47) {\n    if (daysFromReference != 0x46) {\n      for (isLeapYear = 0x45; (int)daysFromReference < (int)isLeapYear; isLeapYear = isLeapYear - 1) {\n        if ((isLeapYear & 3) == 0) {\n          if (isLeapYear == (isLeapYear / 100) * 100) {\n            if ((isLeapYear + 0x76c) % 400 == 0) {\n              result1 = 0x16e;\n            }\n            else {\n              result1 = 0x16d;\n            }\n          }\n          else {\n            result1 = 0x16e;\n          }\n        }\n        else {\n          result1 = 0x16d;\n        }\n        daysInMonth = daysInMonth - result1;\n      }\n      if ((isLeapYear & 3) == 0) {\n        if (daysFromReference == (daysFromReference / 100) * 100) {\n          result1 = 0x16d;\n          if ((daysFromReference + 0x76c) % 400 == 0) {\n            result1 = 0x16e;\n          }\n        }\n        else {\n          result1 = 0x16e;\n        }\n      }\n      else {\n        result1 = 0x16d;\n      }\n      daysInMonth = daysInMonth - result1;\n    }\n  }\n  else {\n    isLeapYear = 0x46;\n    do {\n      if ((isLeapYear & 3) == 0) {\n        if (isLeapYear % 100 == 0) {\n          if ((isLeapYear + 0x76c) % 400 == 0) {\n            result1 = 0x16e;\n          }\n          else {\n            result1 = 0x16d;\n          }\n        }\n        else {\n          result1 = 0x16e;\n        }\n      }\n      else {\n        result1 = 0x16d;\n      }\n      isLeapYear = isLeapYear + 1;\n      daysInMonth = daysInMonth + result1;\n    } while (daysFromReference != isLeapYear);\n  }\n  totalDays = (longlong)daysInMonth * 0x15180 + (longlong)(dateArray[2] * 0xe10 + dateArray[1] * 0x3c + *dateArray)\n  ;\n  tempVar10 = (uint)totalDays;\n  result1 = (int)((ulonglong)totalDays >> 0x20);\n  __tz_lock();\n  _tzset_unlocked();\n  isLeapYear = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    daysFromReference = timezoneInfo[10];\n    result1 = (uint)totalDays + daysFromReference;\n    tempVar2 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)daysFromReference >> 0x1f) + (uint)CARRY4((uint)totalDays,daysFromReference);\n  }\n  else {\n    tempVar9 = dateArray[8];\n    tempVar8 = tempVar9;\n    if (0 < (int)tempVar9) {\n      tempVar8 = 1;\n    }\n    if ((timezoneInfo[1] == dateArray[5] + 0x76c) || (tempVar2 = __tzcalc_limits(), tempVar2 != 0)) {\n      tempVar6 = timezoneInfo[0x14];\n      tempVar1 = timezoneInfo[0x12];\n      tempVar4 = timezoneInfo[10];\n      isLeapYear = tempVar1 - tempVar4;\n      tempVar2 = (timezoneInfo[0x13] - ((int)tempVar4 >> 0x1f)) - (uint)(tempVar1 < tempVar4);\n      if (((int)((result1 - tempVar2) - (uint)(tempVar10 < isLeapYear)) < 0 ==\n           (SBORROW4(result1,tempVar2) != SBORROW4(result1 - tempVar2,(uint)(tempVar10 < isLeapYear)))) &&\n         (tempVar3 = (timezoneInfo[0x13] - ((int)tempVar6 >> 0x1f)) - (uint)(tempVar1 < tempVar6),\n         bVar16 = tempVar10 < tempVar1 - tempVar6,\n         (int)((result1 - tempVar3) - (uint)bVar16) < 0 !=\n         (SBORROW4(result1,tempVar3) != SBORROW4(result1 - tempVar3,(uint)bVar16)))) goto LAB_00004a88;\n      tempVar1 = timezoneInfo[8] - tempVar6;\n      tempVar3 = (timezoneInfo[9] - ((int)tempVar6 >> 0x1f)) - (uint)((uint)timezoneInfo[8] < tempVar6);\n      if (*timezoneInfo != 0) {\n        if ((int)((result1 - tempVar3) - (uint)(tempVar10 < tempVar1)) < 0 ==\n            (SBORROW4(result1,tempVar3) != SBORROW4(result1 - tempVar3,(uint)(tempVar10 < tempVar1))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        isLeapYear = 0;\n        if ((int)tempVar9 < 0) goto LAB_00004934;\nLAB_00004a14:\n        tempVar10 = tempVar8 ^ isLeapYear;\n        tempVar8 = isLeapYear;\n        if (tempVar10 == 1) {\n          if (isLeapYear == 0) {\n            result1 = tempVar6 - tempVar4;\n          }\n          else {\n            result1 = tempVar4 - tempVar6;\n          }\n          tempVar2 = dateArray[3];\n          *dateArray = *dateArray + result1;\n          updatedDays = totalDays + result1;\n          validate_structure(dateArray);\n          tempVar2 = dateArray[3] - tempVar2;\n          totalDays = totalDays + result1;\n          if (tempVar2 != 0) {\n            if (tempVar2 < 2) {\n              if (tempVar2 == -2 || tempVar2 + 2 < 0 != SCARRY4(tempVar2,2)) {\n                tempVar2 = 1;\n              }\n            }\n            else {\n              tempVar2 = -1;\n            }\n            result1 = tempVar2 + dateArray[7];\n            daysInMonth = daysInMonth + tempVar2;\n            if (result1 < 0) {\n              isLeapYear = daysFromReference - 1;\n              if ((isLeapYear & 3) == 0) {\n                if (isLeapYear == (isLeapYear / 100) * 100) {\n                  result1 = 0x16d;\n                  if ((daysFromReference + 0x76b) % 400 != 0) {\n                    result1 = 0x16c;\n                  }\n                }\n                else {\n                  result1 = 0x16d;\n                }\n              }\n              else {\n                result1 = 0x16c;\n              }\n            }\n            else {\n              if ((daysFromReference & 3) == 0) {\n                if (daysFromReference == (daysFromReference / 100) * 100) {\n                  tempVar2 = 0x16d;\n                  if ((daysFromReference + 0x76c) % 400 == 0) {\n                    tempVar2 = 0x16e;\n                  }\n                }\n                else {\n                  tempVar2 = 0x16e;\n                }\n              }\n              else {\n                tempVar2 = 0x16d;\n              }\n              if (tempVar2 <= result1) {\n                result1 = result1 - tempVar2;\n              }\n            }\n            dateArray[7] = result1;\n            totalDays = updatedDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((result1 - tempVar3) - (uint)(tempVar10 < tempVar1)) < 0 !=\n          (SBORROW4(result1,tempVar3) != SBORROW4(result1 - tempVar3,(uint)(tempVar10 < tempVar1)))) {\nLAB_0000491e:\n        if ((int)((result1 - tempVar2) - (uint)(tempVar10 < isLeapYear)) < 0 ==\n            (SBORROW4(result1,tempVar2) != SBORROW4(result1 - tempVar2,(uint)(tempVar10 < isLeapYear))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)tempVar9) {\n        isLeapYear = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      isLeapYear = tempVar8;\n      if (tempVar8 != 1) goto LAB_00004934;\n    }\n    daysFromReference = timezoneInfo[0x14];\n    result1 = (uint)totalDays + daysFromReference;\n    tempVar2 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)daysFromReference >> 0x1f) + (uint)CARRY4((uint)totalDays,daysFromReference);\n    isLeapYear = 1;\n  }\n  __tz_unlock();\n  dateArray[8] = isLeapYear;\n  dateArray[6] = (daysInMonth + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempVar2,result1);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_offset_000047e4",
                "param_1": "dateArray",
                "lVar1": "totalDays",
                "lVar2": "updatedDays",
                "piVar3": "timezoneInfo",
                "uVar4": "tempVar1",
                "iVar5": "tempVar2",
                "iVar6": "tempVar3",
                "iVar7": "result1",
                "iVar11": "daysInMonth",
                "uVar8": "tempVar4",
                "uVar9": "isLeapYear",
                "uVar10": "tempVar6",
                "uVar12": "daysFromReference",
                "uVar13": "tempVar8",
                "uVar14": "tempVar9",
                "uVar15": "tempVar10"
            },
            "calling": [
                "rtc_set_time",
                "rtc_set_alarm"
            ],
            "called": [
                "_tzset_unlocked",
                "__tz_unlock",
                "__gettzinfo",
                "__tz_lock",
                "__tzcalc_limits",
                "validate_structure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "insert_into_linked_list_00004b34",
            "code": "\nvoid insertIntoLinkedList_00004b34(undefined4 *listHead,int dataSize,undefined4 var3,undefined4 var4)\n\n{\n  int *tempPtr;\n  int **tempPtr1;\n  int **nodePtr;\n  int **currentNode;\n  int **previousNode;\n  int **newNode;\n  bool isLastNode;\n  \n  if (dataSize == 0) {\n    return;\n  }\n  newNode = (int **)(dataSize + -4);\n  if (*(int *)(dataSize + -4) < 0) {\n    newNode = (int **)((int)newNode + *(int *)(dataSize + -4));\n  }\n  __malloc_lock();\n  currentNode = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNode[1] = (int *)0x0;\n    nodePtr = tempPtr1;\n    DAT_1fff0db4 = newNode;\n  }\n  else {\n    previousNode = DAT_1fff0db4;\n    if (newNode < DAT_1fff0db4) {\n      nodePtr = (int **)*newNode;\n      currentNode = (int **)((int)newNode + (int)nodePtr);\n      isLastNode = DAT_1fff0db4 == currentNode;\n      if (isLastNode) {\n        currentNode = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNode[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNode;\n      if (isLastNode) {\n        currentNode = (int **)((int)currentNode + (int)nodePtr);\n        *newNode = (int *)currentNode;\n      }\n    }\n    else {\n      do {\n        currentNode = previousNode;\n        previousNode = (int **)currentNode[1];\n        if (previousNode == (int **)0x0) break;\n      } while (previousNode <= newNode);\n      nodePtr = (int **)*currentNode;\n      if ((int **)((int)currentNode + (int)nodePtr) == newNode) {\n        nodePtr = (int **)((int)nodePtr + (int)*newNode);\n        *currentNode = (int *)nodePtr;\n        if (previousNode == (int **)((int)currentNode + (int)nodePtr)) {\n          tempPtr = *previousNode;\n          currentNode[1] = previousNode[1];\n          nodePtr = (int **)((int)nodePtr + (int)tempPtr);\n          *currentNode = (int *)nodePtr;\n        }\n      }\n      else if (newNode < (int **)((int)currentNode + (int)nodePtr)) {\n        *listHead = 0xc;\n      }\n      else {\n        nodePtr = (int **)((int)newNode + (int)*newNode);\n        isLastNode = previousNode == nodePtr;\n        if (isLastNode) {\n          nodePtr = (int **)*previousNode;\n          previousNode = (int **)previousNode[1];\n        }\n        newNode[1] = (int *)previousNode;\n        if (isLastNode) {\n          nodePtr = (int **)((int)nodePtr + (int)*newNode);\n          *newNode = (int *)nodePtr;\n        }\n        currentNode[1] = (int *)newNode;\n      }\n    }\n  }\n  __malloc_unlock(listHead,nodePtr,currentNode,var4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "insert_into_linked_list_00004b34",
                "param_1": "listHead",
                "param_2": "dataSize",
                "param_3": "var3",
                "param_4": "var4",
                "piVar1": "tempPtr",
                "extraout_r1": "tempPtr1",
                "ppiVar2": "nodePtr",
                "ppiVar3": "currentNode",
                "ppiVar4": "previousNode",
                "ppiVar5": "newNode",
                "bVar6": "isLastNode"
            },
            "calling": [
                "__ssrefill_r",
                "__srefill_r",
                "free",
                "__swsetup_r",
                "_realloc_r",
                "__sflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *out_pointer,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *current_block;\n  int difference;\n  uint temp;\n  uint *next_block;\n  uint aligned_size;\n  \n  aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *out_pointer = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_block = DAT_1fff0db4;\n    for (next_block = DAT_1fff0db4; next_block != (uint *)0x0; next_block = (uint *)next_block[1]) {\n      temp = *next_block - aligned_size;\n      if (-1 < (int)temp) {\n        if (0xb < temp) {\n          *next_block = temp;\n          next_block = (uint *)((int)next_block + temp);\n          goto LAB_00004c34;\n        }\n        if (current_block == next_block) {\n          DAT_1fff0db4 = (uint *)next_block[1];\n        }\n        if (current_block != next_block) {\n          current_block[1] = (uint)(uint *)next_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      current_block = next_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = _sbrk_r(out_pointer,0,current_block,0,param_4);\n    }\n    current_block = (uint *)_sbrk_r(out_pointer,aligned_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((next_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == next_block ||\n        (difference = _sbrk_r(out_pointer,(int)next_block - (int)current_block), difference != -1)))) {\nLAB_00004c34:\n      *next_block = aligned_size;\nLAB_00004c42:\n      __malloc_unlock(out_pointer);\n      aligned_size = (int)next_block + 0xbU & 0xfffffff8;\n      difference = aligned_size - (int)(next_block + 1);\n      if (difference == 0) {\n        return aligned_size;\n      }\n      *(uint *)((int)next_block + difference) = (int)(next_block + 1) - aligned_size;\n      return aligned_size;\n    }\n    *out_pointer = 0xc;\n    __malloc_unlock(out_pointer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "out_pointer",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "difference",
                "uVar3": "temp",
                "puVar4": "next_block",
                "uVar5": "aligned_size"
            },
            "calling": [
                "_tzset_unlocked",
                "__smakebuf_r",
                "__submore",
                "_realloc_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "print_formatted_string_00004c84",
            "code": "\nvoid printFormattedString_00004c84(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  dword relOffset;\n  undefined4 param1_copy;\n  undefined4 arg1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  param1_copy = formatString;\n  arg1_copy = arg1;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  _vfprintf_r(relOffset,*(undefined4 *)(relOffset + 8),formatString,&arg1_copy,param1_copy,&arg1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "print_formatted_string_00004c84",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "dVar1": "relOffset",
                "uVar2": "param1_copy",
                "uStack_c": "arg1_copy",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy"
            },
            "calling": [
                "cpu_print_last_instruction",
                "handle_input_line",
                "ps",
                "_print_time",
                "phydat_dump",
                "write",
                "list",
                "probe",
                "core_panic",
                "_saul",
                "read",
                "_rtc_handler",
                "print_help"
            ],
            "called": [
                "_vfprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "write_char_to_buffer_00004cb4",
            "code": "\nuint writeCharToBuffer_00004cb4(uint character)\n\n{\n  dword relTableIndex;\n  undefined4 *bufferPtr;\n  uint remainingChars;\n  undefined *nextCharPtr;\n  undefined4 param4;\n  undefined4 param5;\n  \n  relTableIndex = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  bufferPtr = *(undefined4 **)(relTableIndex + 8);\n  if ((relTableIndex != 0) && (*(int *)(relTableIndex + 0x18) == 0)) {\n    __sinit();\n  }\n  if (bufferPtr == &DAT_000079b8) {\n    bufferPtr = *(undefined4 **)(relTableIndex + 4);\n  }\n  else if (bufferPtr == (undefined4 *)&DAT_000079d8) {\n    bufferPtr = *(undefined4 **)(relTableIndex + 8);\n  }\n  else if (bufferPtr == (undefined4 *)&DAT_00007998) {\n    bufferPtr = *(undefined4 **)(relTableIndex + 0xc);\n  }\n  if ((-1 < (int)(bufferPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(bufferPtr + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(bufferPtr[0x16]);\n  }\n  remainingChars = bufferPtr[2] - 1;\n  bufferPtr[2] = remainingChars;\n  if (((int)remainingChars < 0) && (((int)remainingChars < (int)bufferPtr[6] || (remainingChars = character & 0xff, remainingChars == 10))))\n  {\n    character = __swbuf_r(relTableIndex,character,bufferPtr,remainingChars,param4,param5);\n  }\n  else {\n    nextCharPtr = (undefined *)*bufferPtr;\n    *bufferPtr = nextCharPtr + 1;\n    *nextCharPtr = (char)character;\n    character = character & 0xff;\n  }\n  if ((-1 < (int)(bufferPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(bufferPtr + 3) << 0x16))) {\n    __retarget_lock_release_recursive(bufferPtr[0x16]);\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "write_char_to_buffer_00004cb4",
                "param_1": "character",
                "dVar1": "relTableIndex",
                "puVar2": "bufferPtr",
                "uVar3": "remainingChars",
                "puVar4": "nextCharPtr",
                "unaff_r4": "param4",
                "unaff_r5": "param5"
            },
            "calling": [
                "_putchar"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_input_00004db8",
            "code": "\nundefined4 processInput_00004db8(int input)\n\n{\n  char charValue;\n  dword offset;\n  int result;\n  char *stringPointer;\n  char **pointerArray;\n  undefined4 returnValue;\n  char *charPointer;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  pointerArray = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    __sinit(offset);\n  }\n  if (pointerArray == (char **)&DAT_000079b8) {\n    pointerArray = *(char ***)(offset + 4);\n  }\n  else if (pointerArray == (char **)&DAT_000079d8) {\n    pointerArray = *(char ***)(offset + 8);\n  }\n  else if (pointerArray == (char **)&DAT_00007998) {\n    pointerArray = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)pointerArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointerArray + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(pointerArray[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(pointerArray + 3) << 0x1c) < 0) && (pointerArray[4] != (char *)0x0)) ||\n     (result = __swsetup_r(offset,pointerArray), result == 0)) {\n    charPointer = (char *)(input + -1);\n    do {\n      while( true ) {\n        charPointer = charPointer + 1;\n        charValue = *charPointer;\n        stringPointer = pointerArray[2] + -1;\n        pointerArray[2] = stringPointer;\n        if (charValue == '\\0') {\n          if (-1 < (int)stringPointer) {\n            charPointer = *pointerArray;\n            returnValue = 10;\n            *pointerArray = charPointer + 1;\n            *charPointer = '\\n';\n            goto LAB_00004d64;\n          }\n          result = __swbuf_r(offset,10,pointerArray);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)stringPointer < 0) && (((int)stringPointer < (int)pointerArray[6] || (charValue == '\\n')))) break;\n        stringPointer = *pointerArray;\n        *pointerArray = stringPointer + 1;\n        *stringPointer = charValue;\n      }\n      result = __swbuf_r(offset,charValue,pointerArray);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)pointerArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointerArray + 3) << 0x16))) {\n    __retarget_lock_release_recursive(pointerArray[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_input_00004db8",
                "param_1": "input",
                "cVar1": "charValue",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "stringPointer",
                "ppcVar5": "pointerArray",
                "uVar6": "returnValue",
                "pcVar7": "charPointer"
            },
            "calling": [
                "handle_input_line",
                "main",
                "phydat_dump",
                "_rtc_settime",
                "_rtc_usage",
                "write",
                "list",
                "_rtc_setalarm",
                "read",
                "_rtc_gettime",
                "_rtc_getalarm",
                "probe_all",
                "_alarm_handler",
                "print_help"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 dataBuffer,int offset)\n\n{\n  int returnValue;\n  uint updatedValue;\n  bool isSuccess;\n  \n  returnValue = _read_r(dataBuffer,(int)*(short *)(offset + 0xe));\n  isSuccess = -1 < returnValue;\n  if (isSuccess) {\n    updatedValue = *(int *)(offset + 0x54) + returnValue;\n  }\n  else {\n    updatedValue = *(ushort *)(offset + 0xc) & 0xffffefff;\n  }\n  if (isSuccess) {\n    *(uint *)(offset + 0x54) = updatedValue;\n  }\n  if (!isSuccess) {\n    *(short *)(offset + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "dataBuffer",
                "param_2": "offset",
                "iVar1": "returnValue",
                "uVar2": "updatedValue",
                "bVar3": "isSuccess"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "write_data_to_file_00004dee",
            "code": "\nundefined4 writeDataToFile_00004dee(undefined4 fileDescriptor,int buffer,undefined4 data,undefined4 length)\n\n{\n  undefined4 writeResult;\n  \n  if ((int)((uint)*(ushort *)(buffer + 0xc) << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(buffer + 0xe),0,2);\n  }\n  *(ushort *)(buffer + 0xc) = *(ushort *)(buffer + 0xc) & 0xefff;\n  writeResult = uart_stdio_write(data,length);\n  return writeResult;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "write_data_to_file_00004dee",
                "param_1": "fileDescriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "length",
                "uVar1": "writeResult"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "uart_stdio_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_file_offset_00004e26",
            "code": "\nvoid updateFileOffset_00004e26(undefined4 fileDescriptor,int dataBuffer)\n\n{\n  int fileOffset;\n  ushort modifiedStatus;\n  bool seekError;\n  \n  fileOffset = _lseek_r(fileDescriptor,(int)*(short *)(dataBuffer + 0xe));\n  seekError = fileOffset == -1;\n  if (seekError) {\n    modifiedStatus = *(ushort *)(dataBuffer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataBuffer + 0x54) = fileOffset;\n    modifiedStatus = *(ushort *)(dataBuffer + 0xc) | 0x1000;\n  }\n  if (seekError) {\n    *(ushort *)(dataBuffer + 0xc) = modifiedStatus;\n  }\n  if (!seekError) {\n    *(ushort *)(dataBuffer + 0xc) = modifiedStatus;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_file_offset_00004e26",
                "param_1": "fileDescriptor",
                "param_2": "dataBuffer",
                "iVar1": "fileOffset",
                "uVar2": "modifiedStatus",
                "bVar3": "seekError"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "calculate_difference_00004e52",
            "code": "\nint calculate_difference_00004e52(byte *input1,byte *input2)\n\n{\n  byte current_byte;\n  uint byte_value;\n  bool is_equal;\n  \n  do {\n    byte_value = (uint)*input1;\n    current_byte = *input2;\n    is_equal = byte_value == 1;\n    if (byte_value != 0) {\n      is_equal = byte_value == current_byte;\n    }\n    input1 = input1 + 1;\n    input2 = input2 + 1;\n  } while (is_equal);\n  return byte_value - current_byte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "calculate_difference_00004e52",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "current_byte",
                "uVar2": "byte_value",
                "bVar3": "is_equal"
            },
            "calling": [
                "handle_input_line",
                "_saul",
                "_tzset_unlocked",
                "read",
                "find_handler",
                "strcmp"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "calculate_difference_00004e66",
            "code": "\nint calculate_difference_00004e66(byte *data,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = data;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "calculate_difference_00004e66",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "_findenv_r",
                "_rtc_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "convert_string_to_unsigned_integer_00004f84",
            "code": "\nuint convertStringToUnsignedInteger_00004f84(byte *inputString,byte **outputString,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  uint validChar;\n  uint convertedValue;\n  int status;\n  uint maxValue;\n  uint quotient;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    validChar = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    validChar = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = validChar + 0x7fffffff;\n  status = 0;\n  quotient = maxValue / base;\n  result = 0;\n  do {\n    convertedValue = currentChar - 0x30;\n    if (9 < convertedValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        convertedValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        convertedValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)convertedValue) break;\n    if (status != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(maxValue - base * quotient) < (int)convertedValue)))) {\n        status = -1;\n      }\n      else {\n        result = result * base + convertedValue;\n        status = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (status == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxValue;\n    if (outputString == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (validChar != 0) {\n      result = -result;\n    }\n    if (outputString == (byte **)0x0) {\n      return result;\n    }\n    if (status == 0) goto LAB_00004f64;\n  }\n  inputString = nextByte + -1;\nLAB_00004f64:\n  *outputString = inputString;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "convert_string_to_unsigned_integer_00004f84",
                "param_1": "inputString",
                "param_2": "outputString",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "uVar3": "validChar",
                "uVar4": "convertedValue",
                "iVar5": "status",
                "uVar6": "maxValue",
                "uVar7": "quotient",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "_parse_time",
                "atoi"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *tzinfo;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int daysInYear;\n  uint *calendar;\n  int numDays;\n  uint leapYearAdjustment;\n  int monthIndex;\n  int dayIndex;\n  uint isLeap;\n  \n  tzinfo = (uint *)__gettzinfo();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    numDays = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    tzinfo[1] = year;\n    isLeap = (uint)(year % 400 == 0);\n    calendar = tzinfo;\n    do {\n      dayOfWeek = calendar[5];\n      if (*(char *)(calendar + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            daysInYear = 0;\n          }\n          else {\n            daysInYear = 1;\n          }\n        }\n        else {\n          daysInYear = 0;\n        }\n        daysInYear = daysInYear + numDays + dayOfWeek + -1;\n      }\n      else if (*(char *)(calendar + 2) == 'D') {\n        daysInYear = numDays + dayOfWeek;\n      }\n      else {\n        leapYearAdjustment = isLeap;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leapYearAdjustment = 1;\n        }\n        monthIndex = 0;\n        daysInYear = numDays;\n        while( true ) {\n          monthIndex = monthIndex + 1;\n          if ((int)calendar[3] <= monthIndex) break;\n          daysInYear = daysInYear + *(int *)(&UNK_00007b98 + monthIndex * 4 + leapYearAdjustment * 0x30);\n        }\n        dayIndex = dayOfWeek - (daysInYear + 4U) % 7;\n        if (dayIndex < 0) {\n          dayIndex = dayIndex + 7;\n        }\n        for (dayIndex = (calendar[4] - 1) * 7 + dayIndex;\n            *(int *)(&UNK_00007b98 + monthIndex * 4 + leapYearAdjustment * 0x30) <= dayIndex; dayIndex = dayIndex + -7) {\n        }\n        daysInYear = daysInYear + dayIndex;\n      }\n      dayOfWeek = calendar[10] + daysInYear * 0x15180 + calendar[6];\n      calendar[8] = dayOfWeek;\n      calendar[9] = (int)dayOfWeek >> 0x1f;\n      calendar = calendar + 10;\n    } while (tzinfo + 0x14 != calendar);\n    dayOfWeek = tzinfo[9];\n    isLeap = tzinfo[0x13];\n    *tzinfo = (uint)((int)((dayOfWeek - isLeap) - (uint)(tzinfo[8] < tzinfo[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isLeap) !=\n                    SBORROW4(dayOfWeek - isLeap,(uint)(tzinfo[8] < tzinfo[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "tzinfo",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "daysInYear",
                "puVar5": "calendar",
                "iVar6": "numDays",
                "uVar7": "leapYearAdjustment",
                "iVar8": "monthIndex",
                "iVar9": "dayIndex",
                "uVar10": "isLeap"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime"
            ],
            "called": [
                "__gettzinfo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * getMemoryAddress_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_start_memory_address_000050f4",
            "code": "\nundefined * getStartMemoryAddress_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_start_memory_address_000050f4"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_timezone_params_00005100",
            "code": "\nvoid parseTimezoneParams_00005100(void)\n\n{\n  dword offset;\n  int timezoneInfo;\n  char *environmentVariable;\n  int comparisonResult;\n  int scanResult;\n  undefined timezoneFlag;\n  char *scanPointer;\n  bool isFirst;\n  ushort *hours;\n  int *scanPointer;\n  ushort *minutes;\n  int *scanPointer;\n  ushort hours1;\n  ushort minutes1;\n  ushort seconds1;\n  ushort hours2;\n  ushort minutes2;\n  ushort seconds2;\n  int scanOffset;\n  char *scanResultArray [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  timezoneInfo = __gettzinfo();\n  environmentVariable = (char *)_getenv_r(offset,&DAT_00007a5c);\n  if (environmentVariable == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = environmentVariable;\n    DAT_1fff0ddc = environmentVariable;\n    free(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparisonResult = strcmp(), comparisonResult != 0)) {\n    free(DAT_1fff0dd4);\n    comparisonResult = strlen(environmentVariable);\n    DAT_1fff0dd4 = _malloc_r(offset,comparisonResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      strcpy(DAT_1fff0dd4,environmentVariable);\n    }\n    if (*environmentVariable == ':') {\n      environmentVariable = environmentVariable + 1;\n    }\n    comparisonResult = siscanf(environmentVariable,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&scanOffset);\n    if (0 < comparisonResult) {\n      scanPointer = environmentVariable + scanOffset;\n      if (environmentVariable[scanOffset] == '-') {\n        scanPointer = scanPointer + 1;\n        comparisonResult = -1;\n      }\n      else {\n        if (environmentVariable[scanOffset] == '+') {\n          scanPointer = scanPointer + 1;\n        }\n        comparisonResult = 1;\n      }\n      minutes1 = 0;\n      seconds1 = 0;\n      hours = &minutes1;\n      scanPointer = &scanOffset;\n      minutes = &seconds1;\n      scanPointer = &scanOffset;\n      scanResult = siscanf(scanPointer,\"%hu%n:%hu%n:%hu%n\",&hours1,&scanOffset,&minutes1,&scanOffset,&seconds1,\n                      &scanOffset);\n      if (0 < scanResult) {\n        *(uint *)(timezoneInfo + 0x28) =\n             ((uint)hours1 * 0xe10 + (uint)minutes1 * 0x3c + (uint)seconds1) * comparisonResult;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        scanPointer = scanPointer + scanOffset;\n        comparisonResult = siscanf(scanPointer,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&scanOffset,hours,scanPointer,minutes,\n                        scanPointer);\n        if (comparisonResult < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(timezoneInfo + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          environmentVariable = scanPointer + scanOffset;\n          if (scanPointer[scanOffset] == '-') {\n            environmentVariable = environmentVariable + 1;\n            comparisonResult = -1;\n          }\n          else {\n            if (scanPointer[scanOffset] == '+') {\n              environmentVariable = environmentVariable + 1;\n            }\n            comparisonResult = 1;\n          }\n          hours1 = 0;\n          minutes1 = 0;\n          seconds1 = 0;\n          scanOffset = 0;\n          scanResult = siscanf(environmentVariable,\"%hu%n:%hu%n:%hu%n\",&hours1,&scanOffset,&minutes1,&scanOffset,\n                          &seconds1,&scanOffset);\n          if (scanResult < 1) {\n            comparisonResult = *(int *)(timezoneInfo + 0x28) + -0xe10;\n          }\n          else {\n            comparisonResult = ((uint)hours1 * 0xe10 + (uint)minutes1 * 0x3c + (uint)seconds1) * comparisonResult;\n          }\n          *(int *)(timezoneInfo + 0x50) = comparisonResult;\n          environmentVariable = environmentVariable + scanOffset;\n          isFirst = false;\n          comparisonResult = timezoneInfo;\n          while( true ) {\n            if (*environmentVariable == ',') {\n              environmentVariable = environmentVariable + 1;\n            }\n            if (*environmentVariable == 'M') {\n              scanResult = siscanf(environmentVariable,\"M%hu%n.%hu%n.%hu%n\",&hours2,&scanOffset,&minutes2,&scanOffset,\n                              &seconds2,&scanOffset);\n              if (scanResult != 3) {\n                return;\n              }\n              if (0xb < hours2 - 1) {\n                return;\n              }\n              if (4 < minutes2 - 1) {\n                return;\n              }\n              if (6 < seconds2) {\n                return;\n              }\n              *(uint *)(comparisonResult + 0xc) = (uint)hours2;\n              *(uint *)(comparisonResult + 0x10) = (uint)minutes2;\n              *(undefined *)(comparisonResult + 8) = 0x4d;\n              *(uint *)(comparisonResult + 0x14) = (uint)seconds2;\n              scanPointer = environmentVariable + scanOffset;\n            }\n            else {\n              if (*environmentVariable == 'J') {\n                environmentVariable = environmentVariable + 1;\n                timezoneFlag = 0x4a;\n              }\n              else {\n                timezoneFlag = 0x44;\n              }\n              seconds2 = strtoul(environmentVariable,scanResultArray,10);\n              scanPointer = scanResultArray[0];\n              if (scanResultArray[0] == environmentVariable) {\n                if (isFirst) {\n                  *(undefined *)(timezoneInfo + 0x30) = 0x4d;\n                  *(undefined4 *)(timezoneInfo + 0x34) = 0xb;\n                  *(undefined4 *)(timezoneInfo + 0x38) = 1;\n                  *(undefined4 *)(timezoneInfo + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(timezoneInfo + 8) = 0x4d;\n                  *(undefined4 *)(timezoneInfo + 0xc) = 3;\n                  *(undefined4 *)(timezoneInfo + 0x10) = 2;\n                  *(undefined4 *)(timezoneInfo + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparisonResult + 8) = timezoneFlag;\n                *(uint *)(comparisonResult + 0x14) = (uint)seconds2;\n              }\n            }\n            hours1 = 2;\n            minutes1 = 0;\n            seconds1 = 0;\n            scanOffset = 0;\n            if (*scanPointer == '/') {\n              siscanf(scanPointer,&DAT_00007a85,&hours1,&scanOffset,&minutes1,&scanOffset,&seconds1,\n                      &scanOffset);\n            }\n            *(uint *)(comparisonResult + 0x18) =\n                 (uint)hours1 * 0xe10 + (uint)minutes1 * 0x3c + (uint)seconds1;\n            comparisonResult = comparisonResult + 0x28;\n            environmentVariable = scanPointer + scanOffset;\n            if (isFirst) break;\n            isFirst = true;\n          }\n          __tzcalc_limits(*(undefined4 *)(timezoneInfo + 4));\n          DAT_1fff0ddc = *(char **)(timezoneInfo + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(timezoneInfo + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_timezone_params_00005100",
                "dVar1": "offset",
                "iVar2": "timezoneInfo",
                "pcVar3": "environmentVariable",
                "iVar4": "comparisonResult",
                "iVar5": "scanResult",
                "uVar6": "timezoneFlag",
                "pcVar7": "scanPointer",
                "bVar8": "isFirst",
                "puVar9": "hours",
                "piVar10": "scanPointer",
                "puVar11": "minutes",
                "piVar12": "scanPointer",
                "local_3c": "hours1",
                "local_3a": "minutes1",
                "local_38": "seconds1",
                "local_36": "hours2",
                "local_34": "minutes2",
                "local_32": "seconds2",
                "local_30": "scanOffset",
                "local_2c": "scanResultArray"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "_getenv_r",
                "strlen",
                "strcpy",
                "siscanf",
                "__gettzinfo",
                "free",
                "_malloc_r",
                "strtoul",
                "strcmp",
                "__tzcalc_limits"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_input_00005404",
            "code": "\nuint processInput_00005404(int inputPointer,uint inputValue,int *inputArray,undefined4 inputValue2)\n\n{\n  int returnValue;\n  uint ushortValue;\n  undefined *charPointer;\n  \n  if ((inputPointer != 0) && (*(int *)(inputPointer + 0x18) == 0)) {\n    __sinit();\n  }\n  if (inputArray == &DAT_000079b8) {\n    inputArray = *(int **)(inputPointer + 4);\n  }\n  else if (inputArray == (int *)&DAT_000079d8) {\n    inputArray = *(int **)(inputPointer + 8);\n  }\n  else if (inputArray == (int *)&DAT_00007998) {\n    inputArray = *(int **)(inputPointer + 0xc);\n  }\n  inputArray[2] = inputArray[6];\n  ushortValue = (uint)*(ushort *)(inputArray + 3);\n  returnValue = ushortValue << 0x1c;\n  if (((returnValue < 0) && (ushortValue = inputArray[4], ushortValue != 0)) ||\n     (returnValue = __swsetup_r(inputPointer,inputArray,returnValue,ushortValue,inputValue2), returnValue == 0)) {\n    returnValue = *inputArray - inputArray[4];\n    inputValue = inputValue & 0xff;\n    if ((returnValue < inputArray[5]) || (returnValue = _fflush_r(inputPointer,inputArray), returnValue == 0)) {\n      inputArray[2] = inputArray[2] + -1;\n      charPointer = (undefined *)*inputArray;\n      *inputArray = (int)(charPointer + 1);\n      *charPointer = (char)inputValue;\n      if (inputArray[5] != returnValue + 1) {\n        if (-1 < (int)((uint)*(ushort *)(inputArray + 3) << 0x1f)) {\n          return inputValue;\n        }\n        if (inputValue != 10) {\n          return inputValue;\n        }\n      }\n      returnValue = _fflush_r(inputPointer,inputArray);\n      if (returnValue == 0) {\n        return inputValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_input_00005404",
                "param_1": "inputPointer",
                "param_2": "inputValue",
                "param_3": "inputArray",
                "param_4": "inputValue2",
                "iVar1": "returnValue",
                "uVar2": "ushortValue",
                "puVar3": "charPointer"
            },
            "calling": [
                "puts",
                "putchar",
                "__sfputc_r"
            ],
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_parameters_000054a8",
            "code": "\nuint processParameters_000054a8(undefined4 *outputParam,undefined4 *inputParam)\n\n{\n  ushort bitFlag1;\n  dword offset;\n  ushort bitFlag2;\n  uint ushortValue1;\n  uint ushortValue2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputParam == &DAT_000079b8) {\n    inputParam = *(undefined4 **)(offset + 4);\n  }\n  else if (inputParam == (undefined4 *)&DAT_000079d8) {\n    inputParam = *(undefined4 **)(offset + 8);\n  }\n  else if (inputParam == (undefined4 *)&DAT_00007998) {\n    inputParam = *(undefined4 **)(offset + 0xc);\n  }\n  ushortValue1 = (uint)*(ushort *)(inputParam + 3);\n  bitFlag2 = *(ushort *)(inputParam + 3);\n  if (-1 < (int)(ushortValue1 << 0x1c)) {\n    if (-1 < (int)(ushortValue1 << 0x1b)) {\n      *outputParam = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(ushortValue1 << 0x1d) < 0) {\n      if ((undefined4 *)inputParam[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputParam[0xd] != inputParam + 0x11) {\n          _free_r(outputParam);\n        }\n        inputParam[0xd] = 0;\n      }\n      *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) & 0xffdb;\n      inputParam[1] = 0;\n      *inputParam = inputParam[4];\n    }\n    *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) | 8;\n  }\n  if ((inputParam[4] == 0) && ((*(ushort *)(inputParam + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputParam,inputParam);\n  }\n  bitFlag1 = *(ushort *)(inputParam + 3);\n  ushortValue1 = (uint)bitFlag1;\n  bitFlag2 = *(ushort *)(inputParam + 3);\n  ushortValue2 = ushortValue1 & 1;\n  if ((bitFlag1 & 1) == 0) {\n    if (-1 < (int)(ushortValue1 << 0x1e)) {\n      ushortValue2 = inputParam[5];\n    }\n    inputParam[2] = ushortValue2;\n  }\n  else {\n    inputParam[2] = 0;\n    inputParam[6] = -inputParam[5];\n  }\n  if (inputParam[4] != 0) {\n    return 0;\n  }\n  if ((bitFlag1 & 0x80) == 0) {\n    return ushortValue1 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputParam + 3) = bitFlag2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_parameters_000054a8",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "uVar1": "bitFlag1",
                "dVar2": "offset",
                "uVar3": "bitFlag2",
                "uVar4": "ushortValue1",
                "uVar5": "ushortValue2"
            },
            "calling": [
                "__swbuf_r",
                "_vfprintf_r",
                "puts"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "calculate_quotient_and_remainder_00005584",
            "code": "\nvoid calculateQuotientAndRemainder_00005584(uint *quotientAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientAndRemainder = quotient;\n  quotientAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "calculate_quotient_and_remainder_00005584",
                "param_1": "quotientAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "validate_structure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_substring_index_0000562c",
            "code": "\nint findSubstringIndex_0000562c(undefined4 lock,char *string,int *resultIndex)\n\n{\n  char currentChar;\n  int *currentOffset;\n  int comparisonResult;\n  char *currentPtr;\n  int *tempOffset;\n  int substringLength;\n  \n  __env_lock();\n  currentPtr = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentChar = *currentPtr;\n      if (currentChar == '\\0') {\n        substringLength = (int)currentPtr - (int)string;\n        currentOffset = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          tempOffset = currentOffset;\n          if (*tempOffset == 0) break;\n          comparisonResult = strncmp(*tempOffset,string,substringLength);\n          currentOffset = tempOffset + 1;\n          if ((comparisonResult == 0) && (comparisonResult = *tempOffset, *(char *)(comparisonResult + substringLength) == '=')) {\n            *resultIndex = (int)((int)tempOffset - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            __env_unlock(lock);\n            return comparisonResult + substringLength + 1;\n          }\n        }\n        break;\n      }\n      currentPtr = currentPtr + 1;\n    } while (currentChar != '=');\n  }\n  __env_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_substring_index_0000562c",
                "param_1": "lock",
                "param_2": "string",
                "param_3": "resultIndex",
                "cVar1": "currentChar",
                "piVar2": "currentOffset",
                "iVar3": "comparisonResult",
                "pcVar4": "currentPtr",
                "piVar5": "tempOffset",
                "iVar6": "substringLength"
            },
            "calling": [
                "_getenv_r"
            ],
            "called": [
                "__env_unlock",
                "__env_lock",
                "strncmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_environment_variables_000056a0",
            "code": "\nvoid find_environment_variables_000056a0(undefined4 environment,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  \n  param2_copy = param2;\n  param3_copy = param3;\n  _findenv_r(environment,param2,&param2_copy,param4,environment);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_environment_variables_000056a0",
                "param_1": "environment",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "param2_copy",
                "uStack_8": "param3_copy"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_findenv_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_initial_value_000056b0",
            "code": "\nuint32_t getInitialValue_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_initial_value_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime",
                "__tzcalc_limits"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_file_000056b8",
            "code": "\nundefined4 checkFile_000056b8(undefined4 fileDescriptor,int fileStats,undefined4 *fileType,uint *isExecutable)\n\n{\n  int status;\n  undefined4 result;\n  undefined statBuffer [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileStats + 0xe) < 0) ||\n     (status = _fstat_r(fileDescriptor,(int)*(short *)(fileStats + 0xe),statBuffer), status < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileStats + 0xc) << 0x18) < 0) {\n      result = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  result = 0x400;\nLAB_000056f8:\n  *fileType = result;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_file_000056b8",
                "param_1": "fileDescriptor",
                "param_2": "fileStats",
                "param_3": "fileType",
                "param_4": "isExecutable",
                "iVar1": "status",
                "uVar2": "result",
                "auStack_68": "statBuffer",
                "local_64": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "decode_function_00005700",
            "code": "\nvoid decodeFunction_00005700(int param1,int *param2)\n\n{\n  ushort decodedValue;\n  int allocatedMemory;\n  int decodedLength;\n  int *inputBuffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(param2 + 3) << 0x1e)) {\n    decodedLength = param1;\n    inputBuffer = param2;\n    decodedValue = __swhatbuf_r(param1,param2,&decodedLength,&inputBuffer);\n    allocatedMemory = _malloc_r(param1,decodedLength);\n    if (allocatedMemory != 0) {\n      *(undefined **)(param1 + 0x28) = &DAT_0000423d;\n      *param2 = allocatedMemory;\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x80;\n      param2[5] = decodedLength;\n      param2[4] = allocatedMemory;\n      if ((inputBuffer != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(param1,(int)*(short *)((int)param2 + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(param2 + 3) = decodedValue | *(ushort *)(param2 + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(param2 + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfffc | 2;\n  }\n  *param2 = (int)param2 + 0x47;\n  param2[4] = (int)param2 + 0x47;\n  param2[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "decode_function_00005700",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "decodedValue",
                "iVar2": "allocatedMemory",
                "local_18": "decodedLength",
                "local_14": "inputBuffer"
            },
            "calling": [
                "__srefill_r",
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "free_elf32_rel_00005780",
            "code": "\nvoid freeElf32Rel_00005780(undefined4 ptr)\n\n{\n  _free_r(relArray[16].r_offset,ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "free_elf32_rel_00005780",
                "param_1": "ptr",
                "Elf32_Rel_ARRAY_1fff0200": "relArray"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "acquire_recursive_retarget_lock_00005790",
            "code": "\nvoid acquireRecursiveRetargetLock_00005790(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "acquire_recursive_retarget_lock_00005790"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "release_recursive_lock_0000579c",
            "code": "\nvoid releaseRecursiveLock_0000579c(void)\n\n{\n  releaseLockRecursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "release_recursive_lock_0000579c",
                "__retarget_lock_release_recursive": "releaseLockRecursive"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_character_000057a8",
            "code": "\nint process_character_000057a8(undefined4 status,int character,undefined4 *buffer)\n\n{\n  int remaining_chars;\n  undefined *current_char_ptr;\n  \n  remaining_chars = buffer[2] + -1;\n  buffer[2] = remaining_chars;\n  if ((remaining_chars < 0) && ((remaining_chars < (int)buffer[6] || (character == 10)))) {\n    remaining_chars = __swbuf_r();\n    return remaining_chars;\n  }\n  current_char_ptr = (undefined *)*buffer;\n  *buffer = current_char_ptr + 1;\n  *current_char_ptr = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_character_000057a8",
                "param_1": "status",
                "param_2": "character",
                "param_3": "buffer",
                "iVar1": "remaining_chars",
                "puVar2": "current_char_ptr"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "write_to_buffer_000057d2",
            "code": "\nint write_to_buffer_000057d2(undefined4 stream,undefined4 param_2,undefined *buffer,int count)\n\n{\n  int result;\n  undefined *end_of_buffer;\n  int current_count;\n  \n  end_of_buffer = buffer + count;\n  current_count = count;\n  do {\n    if (buffer == end_of_buffer) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*buffer,param_2,count,current_count);\n    count = result + 1;\n    buffer = buffer + 1;\n  } while (count != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "write_to_buffer_000057d2",
                "param_1": "stream",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "result",
                "puVar2": "end_of_buffer",
                "iVar3": "current_count"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "print_formatted_string_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint printFormattedString_000057f8(int stream,undefined4 *format,byte *str,int *args)\n\n{\n  int size;\n  int result;\n  int *argPtr;\n  bool isDigit;\n  byte *ptr;\n  int recursiveLock;\n  byte *currentChar;\n  int *argList;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int fieldWidth;\n  int totalSize;\n  byte specifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined zeroFlag;\n  undefined4 poundFlag;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format == &DAT_000079b8) {\n    format = *(undefined4 **)(stream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_000079d8) {\n    format = *(undefined4 **)(stream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_00007998) {\n    format = *(undefined4 **)(stream + 0xc);\n  }\n  if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(format[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (size = __swsetup_r(stream,format), size != 0)) {\n    if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16)))\n    {\n      __retarget_lock_release_recursive(format[0x16]);\n    }\n    return -1;\n  }\n  totalSize = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = str;\n  argList = args;\nLAB_0000588e:\n  ptr = currentChar;\n  if (*ptr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentChar = ptr + 1;\n  if (*ptr == 0x25) {\nLAB_0000589a:\n    size = (int)ptr - (int)str;\n    if (size != 0) {\n      result = __sfputs_r(stream,format,str,size);\n      if (result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(format[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n          __retarget_lock_release_recursive(format[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalSize;\n      }\n      totalSize = totalSize + size;\n    }\n    if (*ptr == 0) goto LAB_00005a06;\n    precision = -1;\n    width = 0;\n    flags = 0;\n    fieldWidth = 0;\n    zeroFlag = 0;\n    poundFlag = 0;\n    currentChar = ptr + 1;\n    while( true ) {\n      ptr = currentChar + 1;\n      size = memchr(\"#-0+ \",*currentChar,5);\n      if (size == 0) break;\n      flags = 1 << (size - 0x7bfcU & 0xff) | flags;\n      currentChar = ptr;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      zeroFlag = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      zeroFlag = 0x2b;\n    }\n    if (*currentChar == 0x2a) {\n      argPtr = argList + 1;\n      fieldWidth = *argList;\n      argList = argPtr;\n      if (fieldWidth < 0) {\n        fieldWidth = -fieldWidth;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isDigit = false;\n      size = fieldWidth;\n      ptr = currentChar;\n      while( true ) {\n        if (9 < *ptr - 0x30) break;\n        size = size * 10 + (*ptr - 0x30);\n        isDigit = true;\n        ptr = ptr + 1;\n      }\n      if (isDigit) {\n        fieldWidth = size;\n      }\n    }\n    if (*ptr == 0x2e) {\n      if (ptr[1] == 0x2a) {\n        precision = *argList;\n        if (precision < 0) {\n          precision = -1;\n        }\n        ptr = ptr + 2;\n        argList = argList + 1;\n      }\n      else {\n        isDigit = false;\n        precision = 0;\n        size = 0;\n        while( true ) {\n          ptr = ptr + 1;\n          if (9 < *ptr - 0x30) break;\n          size = size * 10 + (*ptr - 0x30);\n          isDigit = true;\n        }\n        if (isDigit) {\n          precision = size;\n        }\n      }\n    }\n    size = memchr(&DAT_00007c02,*ptr,3);\n    if (size != 0) {\n      flags = flags | 0x40 << (size - 0x7c02U & 0xff);\n      ptr = ptr + 1;\n    }\n    str = ptr + 1;\n    specifier = *ptr;\n    size = memchr(\"efgEFG\",specifier,6);\n    if (size == 0) {\n      recursiveLock = _printf_i(stream,&flags,format,0x57d3,&argList);\n      if (recursiveLock == -1) goto LAB_00005a06;\n    }\n    else {\n      argList = (int *)(((int)argList + 7U & 0xfffffff8) + 8);\n    }\n    totalSize = totalSize + recursiveLock;\n    currentChar = str;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "print_formatted_string_000057f8",
                "param_1": "stream",
                "param_2": "format",
                "param_3": "str",
                "param_4": "args",
                "iVar1": "size",
                "iVar2": "result",
                "piVar3": "argPtr",
                "bVar4": "isDigit",
                "pbVar5": "ptr",
                "unaff_r7": "recursiveLock",
                "pbVar6": "currentChar",
                "local_8c": "argList",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "width",
                "local_7c": "fieldWidth",
                "local_74": "totalSize",
                "local_70": "specifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "zeroFlag",
                "local_30": "poundFlag"
            },
            "calling": [
                "iprintf"
            ],
            "called": [
                "__sfputs_r",
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "memchr",
                "__sinit",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "update_data_00005a58",
            "code": "\nundefined4\nupdateData_00005a58(undefined4 status,uint *data,uint *result,undefined4 param,code *callback)\n\n{\n  int index;\n  undefined4 retVal;\n  int returnValue;\n  uint maxValue;\n  uint counter;\n  bool isTrue;\n  \n  maxValue = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxValue = data[2];\n  }\n  *result = maxValue;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *result = maxValue + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *result); index = index + 1) {\n      returnValue = (*callback)(status,param,(int)data + 0x19,1);\n      if (returnValue == -1) goto LAB_00005afc;\n    }\n  }\n  maxValue = (uint)*(byte *)((int)data + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxValue + 0x43) = 0x30;\n    *(undefined *)((int)data + maxValue + 0x44) = *(undefined *)((int)data + 0x45);\n    maxValue = maxValue + 2;\n  }\n  index = (*callback)(status,param,(int)data + 0x43,maxValue);\n  if (index == -1) {\nLAB_00005afc:\n    retVal = 0xffffffff;\n  }\n  else {\n    maxValue = data[3];\n    isTrue = (*data & 6) == 4;\n    if (isTrue) {\n      maxValue = maxValue - *result;\n    }\n    if (isTrue) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    else {\n      maxValue = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxValue = maxValue + (data[2] - data[4]);\n    }\n    for (counter = 0; maxValue != counter; counter = counter + 1) {\n      index = (*callback)(status,param,(int)data + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    retVal = 0;\n  }\n  return retVal;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "update_data_00005a58",
                "param_1": "status",
                "param_2": "data",
                "param_3": "result",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "retVal",
                "iVar3": "returnValue",
                "uVar4": "maxValue",
                "uVar5": "counter",
                "bVar6": "isTrue"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "print_formatted_output_00005b34",
            "code": "\ncode * printFormattedOutput_00005b34(undefined4 formatString,uint *argList,undefined4 width,code *printFunction,uint **argPtr\n                   )\n\n{\n  bool isDivisible;\n  byte formatSpecifier;\n  int returnValue;\n  code *formattedOutput;\n  char *digits;\n  int status;\n  char *currentAddress;\n  uint value;\n  uint *argPtrTemp;\n  uint base;\n  uint **ptrPtrArgPtr;\n  char **ptrPtrChar;\n  uint stringLength;\n  char *currentPosition;\n  code *endPosition;\n  \n  formatSpecifier = *(byte *)(argList + 6);\n  currentAddress = (char *)((int)argList + 0x43);\n  endPosition = printFunction;\n  if (0x78 < formatSpecifier) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)argList + 0x42) = formatSpecifier;\nLAB_00005bdc:\n    currentAddress = (char *)((int)argList + 0x42);\n    value = 1;\nLAB_00005d28:\n    argList[4] = value;\n    *(undefined *)((int)argList + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (formatSpecifier < 99) {\n    if (formatSpecifier == 0) goto LAB_00005d06;\n    if (formatSpecifier == 0x58) {\n      digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)argList + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(formatSpecifier) {\n  case 99:\n    value = **argPtr;\n    *argPtr = *argPtr + 1;\n    *(char *)((int)argList + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *argList;\n    argPtrTemp = *argPtr;\n    if ((int)(base << 0x18) < 0) {\n      value = *argPtrTemp;\n      *argPtr = argPtrTemp + 1;\n    }\n    else {\n      value = *argPtrTemp;\n      *argPtr = argPtrTemp + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)argList + 0x43) = 0x2d;\n    }\n    digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ptrPtrArgPtr = (uint **)*argPtr;\n    base = *argList;\n    value = argList[5];\n    *argPtr = (uint *)(ptrPtrArgPtr + 1);\n    argPtrTemp = *ptrPtrArgPtr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *argPtrTemp = value;\n    }\n    else {\n      *(short *)argPtrTemp = (short)value;\n    }\nLAB_00005d06:\n    argList[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    argPtrTemp = *argPtr;\n    value = *argList;\n    *argPtr = argPtrTemp + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *argPtrTemp;\n    }\n    else {\n      value = (uint)*(ushort *)argPtrTemp;\n    }\n    digits = \"0123456789ABCDEF\";\n    if (formatSpecifier == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *argList = *argList | 0x20;\n  case 0x78:\n    digits = \"0123456789abcdef\";\n    *(undefined *)((int)argList + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *argList;\n    value = **argPtr;\n    *argPtr = *argPtr + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *argList = base | 0x20;\n    }\n    if (value == 0) {\n      *argList = *argList & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ptrPtrChar = (char **)*argPtr;\n    *argPtr = (uint *)(ptrPtrChar + 1);\n    currentAddress = *ptrPtrChar;\n    returnValue = memchr(currentAddress,0,argList[1],ptrPtrChar,formatString,argList,width);\n    if (returnValue != 0) {\n      argList[1] = returnValue - (int)currentAddress;\n    }\n    value = argList[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)argList + 0x43) = 0;\nLAB_00005c36:\n  stringLength = argList[1];\n  argList[2] = stringLength;\n  if (-1 < (int)stringLength) {\n    *argList = *argList & 0xfffffffb;\n  }\n  currentPosition = currentAddress;\n  if ((value != 0) || (stringLength != 0)) {\n    do {\n      currentPosition = currentPosition + -1;\n      *currentPosition = digits[value - base * (value / base)];\n      isDivisible = base <= value;\n      value = value / base;\n    } while (isDivisible);\n  }\n  if (((base == 8) && ((int)(*argList << 0x1f) < 0)) && ((int)argList[1] <= (int)argList[4])) {\n    currentPosition[-1] = '0';\n    currentPosition = currentPosition + -1;\n  }\n  argList[4] = (int)currentAddress - (int)currentPosition;\n  currentAddress = currentPosition;\nLAB_00005c84:\n  returnValue = _printf_common(formatString,argList,&endPosition,width,printFunction);\n  if ((returnValue == -1) || (returnValue = (*printFunction)(formatString,width,currentAddress,argList[4]), returnValue == -1)) {\nLAB_00005c98:\n    formattedOutput = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*argList << 0x1e) < 0) {\n      for (returnValue = 0; returnValue < (int)(argList[3] - (int)endPosition); returnValue = returnValue + 1) {\n        status = (*printFunction)(formatString,width,(int)argList + 0x19,1);\n        if (status == -1) goto LAB_00005c98;\n      }\n    }\n    formattedOutput = (code *)argList[3];\n    if ((int)(code *)argList[3] < (int)endPosition) {\n      formattedOutput = endPosition;\n    }\n  }\n  return formattedOutput;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "print_formatted_output_00005b34",
                "param_1": "formatString",
                "param_2": "argList",
                "param_3": "width",
                "param_4": "printFunction",
                "param_5": "argPtr",
                "bVar1": "isDivisible",
                "bVar2": "formatSpecifier",
                "iVar3": "returnValue",
                "pcVar4": "formattedOutput",
                "pcVar5": "digits",
                "iVar6": "status",
                "pcVar7": "currentAddress",
                "uVar8": "value",
                "puVar9": "argPtrTemp",
                "uVar10": "base",
                "uVar13": "stringLength",
                "pcVar14": "currentPosition",
                "local_24": "endPosition",
                "ppuVar11": "ptrPtrArgPtr",
                "ppcVar12": "ptrPtrChar"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "read_byte_from_stream_00005e10",
            "code": "\nuint readByteFromStream_00005e10(int stream,byte **buffer)\n\n{\n  int refillResult;\n  uint byteValue;\n  byte *currentByte;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == (byte **)&DAT_000079b8) {\n    buffer = *(byte ***)(stream + 4);\n  }\n  else if (buffer == (byte **)&DAT_000079d8) {\n    buffer = *(byte ***)(stream + 8);\n  }\n  else if (buffer == (byte **)&DAT_00007998) {\n    buffer = *(byte ***)(stream + 0xc);\n  }\n  refillResult = __srefill_r(stream,buffer);\n  if (refillResult == 0) {\n    buffer[1] = buffer[1] + -1;\n    currentByte = *buffer;\n    *buffer = currentByte + 1;\n    byteValue = (uint)*currentByte;\n  }\n  else {\n    byteValue = 0xffffffff;\n  }\n  return byteValue;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "read_byte_from_stream_00005e10",
                "param_1": "stream",
                "param_2": "buffer",
                "iVar1": "refillResult",
                "uVar2": "byteValue",
                "pbVar3": "currentByte"
            },
            "calling": [
                "getchar"
            ],
            "called": [
                "__srefill_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "parse_input_00005e68",
            "code": "\nvoid parseInput_00005e68(undefined4 input,undefined4 formatString,undefined4 output1,undefined4 output2)\n\n{\n  undefined4 parsedInput;\n  undefined4 stringLength;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined4 inputCopy;\n  undefined4 parsedInputCopy;\n  undefined *pointerToLAB_00004dea_1;\n  undefined4 zero1;\n  undefined4 zero2;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  constant1 = 0x204;\n  parsedInput = input;\n  inputCopy = input;\n  param_3_copy = output1;\n  param_4_copy = output2;\n  stringLength = strlen();\n  pointerToLAB_00004dea_1 = &LAB_00004dea_1;\n  zero1 = 0;\n  zero2 = 0;\n  constant2 = 0xffff;\n  parsedInputCopy = stringLength;\n  __ssvfiscanf_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&parsedInput,formatString,&param_3_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "parse_input_00005e68",
                "param_1": "input",
                "param_2": "formatString",
                "param_3": "output1",
                "param_4": "output2",
                "local_80": "parsedInput",
                "local_7c": "stringLength",
                "local_74": "constant1",
                "local_72": "constant2",
                "local_70": "inputCopy",
                "local_6c": "parsedInputCopy",
                "local_5c": "pointerToLAB_00004dea_1",
                "local_4c": "zero1",
                "local_38": "zero2",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "__ssvfiscanf_r",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentCharacter;\n  \n  do {\n    currentCharacter = *source;\n    *destination = currentCharacter;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentCharacter != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentCharacter"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_ptr;\n  \n  current_ptr = input_string;\n  do {\n    next_char = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_ptr"
            },
            "calling": [
                "_tzset_unlocked",
                "siscanf"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *result,byte *input,byte **next,uint base)\n\n{\n  uint parsedNumber;\n  uint charCode;\n  byte negative;\n  int parseResult;\n  uint digit;\n  uint maxValue;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    charCode = (uint)*currentChar;\n    negative = (&DAT_00007a99)[charCode] & 8;\n  } while (((&DAT_00007a99)[charCode] & 8) != 0);\n  if (charCode == 0x2d) {\n    charCode = (uint)*nextChar;\n    negative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (charCode == 0x2b) {\n    charCode = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (charCode != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (charCode != 0x30)) goto LAB_00005f26;\n  if ((*nextChar & 0xdf) == 0x58) {\n    charCode = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    charCode = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  parseResult = 0;\n  maxValue = 0xffffffff / base;\n  parsedNumber = 0;\n  do {\n    digit = charCode - 0x30;\n    if (9 < digit) {\n      if (charCode - 0x41 < 0x1a) {\n        digit = charCode - 0x37;\n      }\n      else {\n        if (0x19 < charCode - 0x61) break;\n        digit = charCode - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((parseResult < 0) || (maxValue < parsedNumber)) ||\n       ((maxValue == parsedNumber && ((int)~(base * maxValue) < (int)digit)))) {\n      parseResult = -1;\n    }\n    else {\n      parsedNumber = parsedNumber * base + digit;\n      parseResult = 1;\n    }\n    charCode = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (parseResult < 0) {\n    *result = 0x22;\n    parsedNumber = 0xffffffff;\n    if (next == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      parsedNumber = -parsedNumber;\n    }\n    if (next == (byte **)0x0) {\n      return parsedNumber;\n    }\n    if (parseResult == 0) goto LAB_00005fb8;\n  }\n  input = nextChar + -1;\nLAB_00005fb8:\n  *next = input;\n  return parsedNumber;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "next",
                "param_4": "base",
                "uVar1": "parsedNumber",
                "uVar2": "charCode",
                "bVar3": "negative",
                "iVar4": "parseResult",
                "uVar5": "digit",
                "uVar6": "maxValue",
                "pbVar7": "currentChar",
                "pbVar8": "nextChar"
            },
            "calling": [
                "strtoul"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_unsigned_long_00005fd8",
            "code": "\nvoid parseUnsignedLong_00005fd8(undefined4 str,undefined4 endptr,undefined4 base)\n\n{\n  _strtoul_l_isra_0(Elf32_Rel_ARRAY_1fff0200[16].r_offset,str,endptr,base);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_unsigned_long_00005fd8",
                "param_1": "str",
                "param_2": "endptr",
                "param_3": "base"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_strtoul_l.isra.0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "acquire_recursive_lock_00005fec",
            "code": "\nvoid acquire_recursive_lock_00005fec(void)\n\n{\n  acquire_lock_recursive(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "acquire_recursive_lock_00005fec",
                "__retarget_lock_acquire_recursive": "acquire_lock_recursive"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "release_retarget_lock_00005ff8",
            "code": "\nvoid releaseRetargetLock_00005ff8(void)\n\n{\n  __retarget_lock_release_recursive(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "release_retarget_lock_00005ff8"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *input_buffer,uint byte_to_find,uint buffer_size)\n\n{\n  byte found_byte;\n  char is_byte_zero;\n  char is_byte_zero_2;\n  char is_byte_zero_3;\n  char is_byte_zero_4;\n  byte *next_byte;\n  uint *next_uint;\n  byte *result_ptr;\n  uint buffer_offset;\n  uint buffer_size_rounded;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool found_byte3;\n  bool found_byte4;\n  bool found_byte5;\n  bool found_byte6;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)buffer_size < 0x10) {\njoined_r0x00006070:\n    do {\n      if (buffer_size == 0) {\n        return (byte *)0x0;\n      }\n      next_uint = (uint *)((int)input_buffer + 1);\n      found_byte = *(byte *)input_buffer;\n      buffer_size = buffer_size - 1;\n      input_buffer = next_uint;\n    } while (found_byte != byte_to_find);\n  }\n  else {\n    buffer_offset = (uint)input_buffer & 7;\n    while( true ) {\n      if (buffer_offset == 0) {\n        buffer_offset = byte_to_find | byte_to_find << 8;\n        buffer_offset = buffer_offset | buffer_offset << 0x10;\n        buffer_size_rounded = buffer_size & 0xfffffff8;\n        do {\n          next_uint = input_buffer + 2;\n          buffer_size_rounded = buffer_size_rounded - 8;\n          xor_result_1 = *input_buffer ^ buffer_offset;\n          xor_result_2 = input_buffer[1] ^ buffer_offset;\n          is_byte_zero = -((char)xor_result_1 == '\\0');\n          is_byte_zero_2 = -((char)(xor_result_1 >> 8) == '\\0');\n          is_byte_zero_3 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          is_byte_zero_4 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(is_byte_zero_4,CONCAT12(is_byte_zero_3,CONCAT11(is_byte_zero_2,is_byte_zero)));\n          found_byte3 = (char)xor_result_2 != '\\0';\n          found_byte4 = (char)(xor_result_2 >> 8) != '\\0';\n          found_byte5 = (char)(xor_result_2 >> 0x10) != '\\0';\n          found_byte6 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(found_byte6 * is_byte_zero_4 - !found_byte6,\n                            CONCAT12(found_byte5 * is_byte_zero_3 - !found_byte5,\n                                     CONCAT11(found_byte4 * is_byte_zero_2 - !found_byte4,found_byte3 * is_byte_zero - !found_byte3)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              result_ptr = (byte *)((int)input_buffer + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              result_ptr = (byte *)((int)input_buffer + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              found_byte3 = (xor_result_1 & 0x100) == 0;\n              next_byte = result_ptr + 1;\n              if (found_byte3) {\n                found_byte3 = (xor_result_1 & 0x18000) == 0;\n                next_byte = result_ptr + 2;\n              }\n              result_ptr = next_byte;\n              if (found_byte3) {\n                result_ptr = result_ptr + 1;\n              }\n            }\n            return result_ptr + -1;\n          }\n          input_buffer = next_uint;\n        } while (buffer_size_rounded != 0);\n        buffer_size = buffer_size & 7;\n        goto joined_r0x00006070;\n      }\n      next_uint = (uint *)((int)input_buffer + 1);\n      buffer_size = buffer_size - 1;\n      if (*(byte *)input_buffer == byte_to_find) break;\n      buffer_offset = (uint)next_uint & 7;\n      input_buffer = next_uint;\n      if (buffer_size == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)next_uint + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "input_buffer",
                "param_2": "byte_to_find",
                "param_3": "buffer_size",
                "bVar1": "found_byte",
                "cVar2": "is_byte_zero",
                "cVar3": "is_byte_zero_2",
                "cVar4": "is_byte_zero_3",
                "cVar5": "is_byte_zero_4",
                "pbVar6": "next_byte",
                "puVar7": "next_uint",
                "pbVar8": "result_ptr",
                "uVar9": "buffer_offset",
                "uVar10": "buffer_size_rounded",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_vfprintf_r",
                "_printf_i",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int destOffset,undefined *sourceArray,int sourceLength)\n\n{\n  undefined *sourcePtr;\n  undefined *sourceEnd;\n  undefined *destPtr;\n  \n  sourceEnd = sourceArray + sourceLength;\n  destPtr = (undefined *)(destOffset + -1);\n  if (sourceArray != sourceEnd) {\n    do {\n      sourcePtr = sourceArray + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *sourceArray;\n      sourceArray = sourcePtr;\n    } while (sourcePtr != sourceEnd);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destOffset",
                "param_2": "sourceArray",
                "param_3": "sourceLength",
                "puVar1": "sourcePtr",
                "puVar2": "sourceEnd",
                "puVar3": "destPtr"
            },
            "calling": [
                "__submore",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "copy_memory_if_smaller_000060cc",
            "code": "\nint copyMemoryIfSmaller_000060cc(undefined4 context,int source,uint size,undefined4 option)\n\n{\n  int result;\n  uint usableSize;\n  \n  if (source != 0) {\n    if (size == 0) {\n      _free_r();\n      result = 0;\n    }\n    else {\n      usableSize = _malloc_usable_size_r();\n      result = source;\n      if ((usableSize < size) && (result = _malloc_r(context,size), result != 0)) {\n        memcpy(result,source,size);\n        _free_r(context,source);\n      }\n    }\n    return result;\n  }\n  result = _malloc_r(context,size,size,option);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "copy_memory_if_smaller_000060cc",
                "param_1": "context",
                "param_2": "source",
                "param_3": "size",
                "param_4": "option",
                "iVar1": "result",
                "uVar2": "usableSize"
            },
            "calling": [
                "__submore"
            ],
            "called": [
                "_malloc_r",
                "_free_r",
                "memcpy",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "update_data_00006192",
            "code": "\nundefined4 updateData_00006192(undefined4 result,undefined4 *data)\n\n{\n  if ((undefined4 *)data[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)data[13] != data + 0x11) {\n      _free_r();\n    }\n    data[1] = data[16];\n    data[13] = 0;\n    if (data[16] != 0) {\n      *data = data[15];\n      return 0;\n    }\n  }\n  *data = data[4];\n  data[1] = 0;\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "update_data_00006192",
                "param_1": "result",
                "param_2": "data",
                "param_2[0xd]": "data[13]",
                "param_2[1]": "data[1]",
                "param_2[0x10]": "data[16]",
                "param_2[0xf]": "data[15]"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_and_process_input_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parse_and_process_input_000061cc(undefined4 input_parameter,byte **input_data,byte *current_byte,int **output_data)\n\n{\n  int temp_var_1;\n  uint temp_var_2;\n  byte *temp_var_3;\n  uint temp_var_4;\n  int **output_data_ptr;\n  undefined temp_stack [256];\n  uint flag_1;\n  undefined4 flag_2;\n  uint temp_var_5;\n  int result;\n  int count;\n  undefined *temp_ptr;\n  int format_type;\n  undefined *func_ptr;\n  code *refill_func_ptr;\n  \n  result = 0;\n  count = 0;\n  func_ptr = &LAB_00006118_1;\n  refill_func_ptr = __ssrefill_r + 1;\n  output_data_ptr = output_data;\n  temp_ptr = temp_stack;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      temp_var_4 = (uint)*current_byte;\n      if (temp_var_4 == 0) {\n        return result;\n      }\n      temp_var_2 = (byte)(&DAT_00007a99)[temp_var_4] & 8;\n      temp_var_3 = current_byte + 1;\n      if (((&DAT_00007a99)[temp_var_4] & 8) == 0) break;\n      while (((current_byte = temp_var_3, 0 < (int)input_data[1] ||\n              (temp_var_1 = (*refill_func_ptr)(input_parameter,input_data), temp_var_1 == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**input_data] << 0x1c) < 0))) {\n        count = count + 1;\n        input_data[1] = input_data[1] + -1;\n        *input_data = *input_data + 1;\n      }\n    }\n    if (temp_var_4 == 0x25) break;\nLAB_00006352:\n    if (((int)input_data[1] < 1) && (temp_var_1 = (*refill_func_ptr)(input_parameter,input_data), temp_var_1 != 0))\n    goto LAB_00006380;\n    if (**input_data != temp_var_4) {\n      return result;\n    }\n    *input_data = *input_data + 1;\n    count = count + 1;\n    input_data[1] = input_data[1] + -1;\n    current_byte = temp_var_3;\n  }\n  temp_var_5 = temp_var_2;\n  flag_1 = temp_var_2;\n  if (current_byte[1] == 0x2a) {\n    temp_var_3 = current_byte + 2;\n    flag_1 = 0x10;\n  }\n  while( true ) {\n    temp_var_2 = (uint)*temp_var_3;\n    if (9 < temp_var_2 - 0x30) break;\n    temp_var_3 = temp_var_3 + 1;\n    temp_var_5 = (temp_var_5 * 10 + temp_var_2) - 0x30;\n  }\n  temp_var_1 = memchr(&DAT_00007c02,temp_var_2,3);\n  if (temp_var_1 != 0) {\n    flag_1 = 1 << (temp_var_1 - 0x7c02U & 0xff) | flag_1;\n    temp_var_3 = temp_var_3 + 1;\n  }\n  current_byte = temp_var_3 + 1;\n  temp_var_2 = (uint)*temp_var_3;\n  if (temp_var_2 < 0x79) {\n    if (0x57 < temp_var_2) {\n      switch(temp_var_2) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        current_byte = (byte *)__sccl(temp_stack,current_byte);\n        flag_1 = flag_1 | 0x40;\n        format_type = 1;\n        break;\n      case 99:\n        flag_1 = flag_1 | 0x40;\n        format_type = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag_2 = 10;\nLAB_000063a0:\n        if (temp_var_2 < 0x6f) {\n          format_type = 3;\n        }\n        else {\n          format_type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        format_type = 5;\n        break;\n      case 0x69:\n        flag_2 = 0;\n        format_type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag_1 << 0x1b)) {\n          if ((int)(flag_1 << 0x1f) < 0) {\n            *(short *)*output_data_ptr = (short)count;\n            output_data_ptr = output_data_ptr + 1;\n          }\n          else {\n            **output_data_ptr = count;\n            output_data_ptr = output_data_ptr + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag_2 = 8;\n        format_type = 4;\n        break;\n      case 0x70:\n        flag_1 = flag_1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag_1 = flag_1 | 0x200;\n        flag_2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        format_type = 2;\n      }\nLAB_000063ac:\n      if (((int)input_data[1] < 1) && (temp_var_1 = (*refill_func_ptr)(input_parameter,input_data), temp_var_1 != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag_1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**input_data] << 0x1c) < 0) {\n          count = count + 1;\n          temp_var_3 = input_data[1];\n          input_data[1] = temp_var_3 + -1;\n          if ((int)(temp_var_3 + -1) < 1) {\n            temp_var_1 = (*refill_func_ptr)(input_parameter,input_data);\n            if (temp_var_1 != 0) goto LAB_00006380;\n          }\n          else {\n            *input_data = *input_data + 1;\n          }\n        }\n      }\n      if (format_type < 3) {\n        temp_var_1 = _scanf_chars(input_parameter,&flag_1,input_data,&output_data_ptr);\n      }\n      else {\n        if (4 < format_type) goto LAB_000061f6;\n        temp_var_1 = _scanf_i(input_parameter,&flag_1,input_data,&output_data_ptr);\n      }\n      if (temp_var_1 == 1) {\n        return result;\n      }\n      if (temp_var_1 == 2) {\nLAB_00006380:\n        if (result == 0) {\nLAB_00006388:\n          result = -1;\n        }\n        else if ((*(ushort *)(input_data + 3) & 0x40) != 0) {\n          result = -1;\n        }\n        return result;\n      }\n      goto LAB_000061f6;\n    }\n    temp_var_3 = current_byte;\n    if (temp_var_2 == 0x25) goto LAB_00006352;\n    if (temp_var_2 < 0x26) {\n      if (temp_var_2 != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (temp_var_2 - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  format_type = 3;\n  flag_2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_and_process_input_000061cc",
                "param_1": "input_parameter",
                "param_2": "input_data",
                "param_3": "current_byte",
                "param_4": "output_data",
                "iVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "pbVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "local_2b0": "output_data_ptr",
                "auStack_2ac": "temp_stack",
                "local_1ac": "flag_1",
                "local_1a8": "flag_2",
                "local_1a4": "temp_var_5",
                "local_1a0": "result",
                "local_19c": "count",
                "local_198": "temp_ptr",
                "local_194": "format_type",
                "local_30": "func_ptr",
                "local_2c": "refill_func_ptr"
            },
            "calling": [
                "siscanf"
            ],
            "called": [
                "__ssrefill_r",
                "__sccl",
                "memchr",
                "_scanf_chars",
                "_scanf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_param,uint *data_array,byte **byte_array,undefined4 *output_param)\n\n{\n  int result;\n  uint temp;\n  byte **ptr_byte_array;\n  byte *byte_array_ptr;\n  byte *byte_ptr;\n  byte *byte_ptr2;\n  int counter;\n  \n  if (data_array[2] == 0) {\n    if (data_array[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    data_array[2] = temp;\n  }\n  if (-1 < (int)(*data_array << 0x1b)) {\n    ptr_byte_array = (byte **)*output_param;\n    *output_param = ptr_byte_array + 1;\n    byte_ptr = *ptr_byte_array;\n  }\n  counter = 0;\n  do {\n    temp = data_array[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(data_array[5] + (uint)**byte_array) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data_array & 0x10) == 0) && (data_array[3] = data_array[3] + 1, data_array[6] != 0)) {\n            *byte_ptr = 0;\n          }\n          data_array[4] = counter + data_array[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**byte_array] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byte_ptr2 = byte_ptr;\n    if (-1 < (int)(*data_array << 0x1b)) {\n      byte_ptr2 = byte_ptr + 1;\n      *byte_ptr = **byte_array;\n    }\n    byte_array_ptr = byte_array[1];\n    *byte_array = *byte_array + 1;\n    temp = data_array[2] - 1;\n    byte_array[1] = byte_array_ptr + -1;\n    counter = counter + 1;\n    data_array[2] = temp;\n    byte_ptr = byte_ptr2;\n    if ((temp == 0) ||\n       (((int)(byte_array_ptr + -1) < 1 &&\n        (result = (*(code *)data_array[0x60])(input_param,byte_array,temp,(code *)data_array[0x60],output_param),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_param",
                "param_2": "data_array",
                "param_3": "byte_array",
                "param_4": "output_param",
                "iVar1": "result",
                "uVar2": "temp",
                "ppbVar3": "ptr_byte_array",
                "pbVar4": "byte_array_ptr",
                "unaff_r6": "byte_ptr",
                "pbVar5": "byte_ptr2",
                "iVar6": "counter"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 input,uint *flags,byte **data,undefined4 *output)\n\n{\n  int result;\n  undefined4 returnValue;\n  code *comparisonFunction;\n  uint temp1;\n  byte *temp2;\n  uint temp3;\n  undefined4 *temp4;\n  uint *temp5;\n  uint *temp6;\n  uint *temp7;\n  int unaffectedVar;\n  int loopVar;\n  undefined *constants [4];\n  \n  constants[0] = &DAT_00007c2f;\n  constants[1] = &DAT_00007c32;\n  constants[2] = &DAT_00007c35;\n  comparisonFunction = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    comparisonFunction = (code *)&UNK_00005fd5;\n  }\n  temp3 = flags[2];\n  temp1 = temp3 - 1;\n  if (0x15c < temp1) {\n    unaffectedVar = temp3 - 0x15d;\n    temp3 = 0x15d;\n  }\n  if (0x15c < temp1) {\n    flags[2] = temp3;\n  }\n  temp7 = flags + 7;\n  if (temp1 < 0x15d) {\n    unaffectedVar = 0;\n  }\n  *flags = *flags | 0xd00;\n  loopVar = 0;\n  temp6 = temp7;\n  do {\n    result = memchr(constants[loopVar],**data,2);\n    if (result != 0) {\n      if (loopVar == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        temp1 = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = temp1;\n      }\n      else if (loopVar == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        temp1 = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      temp1 = flags[2];\n      flags[2] = temp1 - 1;\n      if (temp1 != 0) {\n        temp2 = *data;\n        *data = temp2 + 1;\n        temp5 = (uint *)((int)temp6 + 1);\n        *(byte *)temp6 = *temp2;\n        temp2 = data[1];\n        data[1] = temp2 + -1;\n        temp6 = temp5;\n        if (((int)(temp2 + -1) < 1) &&\n           (result = (*(code *)flags[0x60])(input,data), result != 0)) {\n          loopVar = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loopVar = loopVar + 1;\n  } while (loopVar != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  __sccl(flags[5],\"01234567]\" + (8 - flags[1]));\n  loopVar = 0;\n  while( true ) {\n    temp5 = temp6;\n    if (flags[2] == 0) break;\n    temp2 = *data;\n    temp1 = (uint)*temp2;\n    if (*(char *)(flags[5] + temp1) == '\\0') break;\n    if ((temp1 == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      loopVar = loopVar + 1;\n      if (unaffectedVar != 0) {\n        unaffectedVar = unaffectedVar + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      temp5 = (uint *)((int)temp6 + 1);\n      *(byte *)temp6 = *temp2;\n    }\n    temp2 = data[1];\n    data[1] = temp2 + -1;\n    if ((int)(temp2 + -1) < 1) {\n      result = (*(code *)flags[0x60])(input,data);\n      if (result != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    temp6 = temp5;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (temp7 < temp5) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)temp5 + -1),data);\n      temp5 = (uint *)((int)temp5 + -1);\n    }\n    if (temp5 == temp7) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)temp5 = 0;\n    returnValue = (*comparisonFunction)(input,temp7,0,flags[1]);\n    temp4 = (undefined4 *)*output;\n    temp1 = *flags;\n    *output = temp4 + 1;\n    temp4 = (undefined4 *)*temp4;\n    if ((temp1 & 0x20) == 0) {\n      if ((int)(temp1 << 0x1f) < 0) {\n        *(short *)temp4 = (short)returnValue;\n      }\n      else {\n        *temp4 = returnValue;\n      }\n    }\n    else {\n      *temp4 = returnValue;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)temp5 + flags[4] + (loopVar - (int)temp7));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "returnValue",
                "pcVar3": "comparisonFunction",
                "uVar4": "temp1",
                "pbVar5": "temp2",
                "uVar6": "temp3",
                "puVar7": "temp4",
                "puVar8": "temp5",
                "puVar9": "temp6",
                "puVar10": "temp7",
                "unaff_r9": "unaffectedVar",
                "iVar11": "loopVar",
                "local_34": "constants"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "__sccl",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *dataPtr,undefined4 *bufferPtr,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 temp1;\n  int temp2;\n  undefined4 temp3;\n  ushort ushortValue;\n  uint uintValue;\n  \n  if ((dataPtr != (undefined4 *)0x0) && (dataPtr[6] == 0)) {\n    __sinit();\n  }\n  if (bufferPtr == &DAT_000079b8) {\n    bufferPtr = (undefined4 *)dataPtr[1];\n  }\n  else if (bufferPtr == (undefined4 *)&DAT_000079d8) {\n    bufferPtr = (undefined4 *)dataPtr[2];\n  }\n  else if (bufferPtr == (undefined4 *)&DAT_00007998) {\n    bufferPtr = (undefined4 *)dataPtr[3];\n  }\n  ushortValue = *(ushort *)(bufferPtr + 3);\n  bufferPtr[1] = 0;\n  uintValue = (uint)*(ushort *)(bufferPtr + 3);\n  if ((int)(uintValue << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(uintValue << 0x1d) < 0) {\n    if ((undefined4 *)bufferPtr[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)bufferPtr[0xd] != bufferPtr + 0x11) {\n        _free_r(dataPtr);\n      }\n      bufferPtr[1] = bufferPtr[0x10];\n      bufferPtr[0xd] = 0;\n      if (bufferPtr[0x10] != 0) {\n        *bufferPtr = bufferPtr[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(uintValue << 0x1b)) {\n      *dataPtr = 9;\n      ushortValue = ushortValue | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(uintValue << 0x1c) < 0) {\n      temp2 = _fflush_r(dataPtr,bufferPtr,uintValue << 0x1c,uintValue,value2);\n      if (temp2 != 0) {\n        return 0xffffffff;\n      }\n      bufferPtr[2] = 0;\n      *(ushort *)(bufferPtr + 3) = *(ushort *)(bufferPtr + 3) & 0xfff7;\n      bufferPtr[6] = 0;\n    }\n    *(ushort *)(bufferPtr + 3) = *(ushort *)(bufferPtr + 3) | 4;\n  }\n  if (bufferPtr[4] == 0) {\n    __smakebuf_r(dataPtr,bufferPtr);\n  }\n  ushortValue = *(ushort *)(bufferPtr + 3);\n  temp1 = *(undefined2 *)(bufferPtr + 3);\n  if ((ushortValue & 3) != 0) {\n    *(undefined2 *)(bufferPtr + 3) = 1;\n    _fwalk(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(bufferPtr + 3) = temp1;\n    if ((ushortValue & 9) == 9) {\n      __sflush_r(dataPtr,bufferPtr);\n    }\n  }\n  temp3 = bufferPtr[4];\n  *bufferPtr = temp3;\n  temp2 = (*(code *)bufferPtr[9])(dataPtr,bufferPtr[8],temp3,bufferPtr[5]);\n  bufferPtr[1] = temp2;\n  if (0 < temp2) {\n    return 0;\n  }\n  ushortValue = *(ushort *)(bufferPtr + 3);\n  if (temp2 != 0) {\n    temp3 = 0;\n  }\n  else {\n    ushortValue = ushortValue | 0x20;\n  }\n  if (temp2 != 0) {\n    bufferPtr[1] = temp3;\n    ushortValue = ushortValue | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(bufferPtr + 3) = ushortValue;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "dataPtr",
                "param_2": "bufferPtr",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "ushortValue",
                "uVar5": "uintValue"
            },
            "calling": [
                "__srget_r"
            ],
            "called": [
                "_fflush_r",
                "_fwalk",
                "__smakebuf_r",
                "_free_r",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_data_0000687c",
            "code": "\nbyte * extract_data_0000687c(int size,byte *data)\n\n{\n  byte *result;\n  uint temp;\n  int index;\n  uint byte_val;\n  uint current_index;\n  uint end_index;\n  bool is_equal;\n  \n  byte_val = (uint)*data;\n  is_equal = byte_val == 0x5e;\n  if (is_equal) {\n    byte_val = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  index = size + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_equal;\n  } while (index != size + 0xff);\n  if (byte_val == 0) {\n    result = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      current_index = byte_val;\n      *(bool *)(size + current_index) = !is_equal;\n      data = data + 1;\n      while( true ) {\n        byte_val = (uint)data[-1];\n        if (byte_val != 0x2d) break;\n        end_index = (uint)*data;\n        if ((end_index == 0x5d) || (temp = current_index, (int)end_index < (int)current_index)) goto LAB_000068aa;\n        do {\n          temp = temp + 1;\n          *(bool *)(size + temp) = !is_equal;\n        } while ((int)temp < (int)end_index);\n        index = ~current_index + end_index;\n        if ((int)end_index <= (int)current_index) {\n          index = 0;\n        }\n        current_index = current_index + 1 + index;\n        data = data + 2;\n      }\n      result = data;\n    } while ((byte_val != 0x5d) && (result = data + -1, byte_val != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_data_0000687c",
                "param_1": "size",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp",
                "iVar3": "index",
                "uVar4": "byte_val",
                "uVar5": "current_index",
                "uVar6": "end_index",
                "bVar7": "is_equal"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_or_resize_buffer_000068f0",
            "code": "\nundefined4 allocate_or_resize_buffer_000068f0(undefined4 param,int *buffer)\n\n{\n  int new_buffer;\n  int buffer_size;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    new_buffer = _malloc_r(param,0x400);\n    if (new_buffer != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = new_buffer;\n      *(undefined *)(new_buffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(new_buffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(new_buffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = new_buffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    buffer_size = buffer[0xe];\n    new_buffer = _realloc_r(param,(int *)buffer[0xd],buffer_size << 1);\n    if (new_buffer != 0) {\n      memcpy(new_buffer + buffer_size,new_buffer,buffer_size);\n      buffer[0xd] = new_buffer;\n      buffer[0xe] = buffer_size << 1;\n      *buffer = new_buffer + buffer_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_or_resize_buffer_000068f0",
                "param_1": "param",
                "param_2": "buffer",
                "iVar1": "new_buffer",
                "iVar2": "buffer_size"
            },
            "calling": [],
            "called": [
                "_malloc_r",
                "memcpy",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_result_00006964",
            "code": "\nint calculateResult_00006964(undefined4 inputValue,int arrayOffset)\n\n{\n  int result;\n  \n  result = *(int *)(arrayOffset + -4) + -4;\n  if (*(int *)(arrayOffset + -4) < 0) {\n    result = result + *(int *)(arrayOffset + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_result_00006964",
                "param_1": "inputValue",
                "param_2": "arrayOffset",
                "iVar1": "result"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "calculate_dividend_remainder_00006974",
            "code": "\nundefined8 calculateDividendRemainder_00006974(int dividend,int divisor,int dividendRemainder,int divisorRemainder)\n\n{\n  int absoluteDivisor;\n  undefined8 quotientRemainder;\n  undefined remainderBuffer [8];\n  \n  if ((divisorRemainder == 0) && (dividendRemainder == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    absoluteDivisor = -divisor - (uint)(dividend != 0);\n    if (divisorRemainder < 0) {\n      quotientRemainder = __udivmoddi4(-dividend,absoluteDivisor,-dividendRemainder,-divisorRemainder - (uint)(dividendRemainder != 0),remainderBuffer);\n      return quotientRemainder;\n    }\n    quotientRemainder = __udivmoddi4(-dividend,absoluteDivisor,dividendRemainder,divisorRemainder,remainderBuffer);\n    return CONCAT44(-(int)((ulonglong)quotientRemainder >> 0x20) - (uint)((int)quotientRemainder != 0),-(int)quotientRemainder);\n  }\n  if (divisorRemainder < 0) {\n    quotientRemainder = __udivmoddi4(dividend,divisor,-dividendRemainder,-divisorRemainder - (uint)(dividendRemainder != 0),remainderBuffer);\n    return CONCAT44(-(int)((ulonglong)quotientRemainder >> 0x20) - (uint)((int)quotientRemainder != 0),-(int)quotientRemainder);\n  }\n  quotientRemainder = __udivmoddi4();\n  return quotientRemainder;\n}\n\n",
            "renaming": {
                "FUN_00006974": "calculate_dividend_remainder_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "dividendRemainder",
                "param_4": "divisorRemainder",
                "iVar1": "absoluteDivisor",
                "uVar2": "quotientRemainder",
                "local_8": "remainderBuffer"
            },
            "calling": [
                "gmtime_r"
            ],
            "called": [
                "__udivmoddi4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "calculate_division_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong calculateDivision_00006a14(uint dividend,uint dividend_1,uint divisor,uint divisor_1,uint *quotient_remainder)\n\n{\n  code *jmp_table;\n  uint quotient1;\n  int bit_shift;\n  uint uVar3;\n  uint quotient2;\n  uint remainder;\n  uint uVar6;\n  uint uVar7;\n  uint quotient3;\n  uint uVar9;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_1 == 0) {\n    if (dividend_1 < divisor) {\n      bit_shift = LZCOUNT(divisor);\n      remainder = divisor;\n      if (bit_shift != 0) {\n        remainder = divisor << bit_shift;\n        dividend_1 = dividend >> (0x20U - bit_shift & 0xff) | dividend_1 << bit_shift;\n        dividend = dividend << bit_shift;\n      }\n      uVar6 = remainder >> 0x10;\n      quotient3 = dividend_1 / uVar6;\n      uVar3 = dividend >> 0x10 | (dividend_1 - uVar6 * quotient3) * 0x10000;\n      quotient1 = quotient3 * (remainder & 0xffff);\n      quotient2 = quotient3;\n      if (uVar3 <= quotient1 && quotient1 - uVar3 != 0) {\n        carry_flag = CARRY4(remainder,uVar3);\n        uVar3 = remainder + uVar3;\n        quotient2 = quotient3 - 1;\n        if ((carry_flag == false) && (uVar3 <= quotient1 && quotient1 - uVar3 != 0)) {\n          quotient2 = quotient3 - 2;\n          uVar3 = uVar3 + remainder;\n        }\n      }\n      quotient3 = (uVar3 - quotient1) / uVar6;\n      uVar6 = dividend & 0xffff | ((uVar3 - quotient1) - uVar6 * quotient3) * 0x10000;\n      uVar3 = quotient3 * (remainder & 0xffff);\n      quotient1 = quotient3;\n      if (uVar6 <= uVar3 && uVar3 - uVar6 != 0) {\n        carry_flag = CARRY4(remainder,uVar6);\n        uVar6 = remainder + uVar6;\n        quotient1 = quotient3 - 1;\n        if ((carry_flag == false) && (uVar6 <= uVar3 && uVar3 - uVar6 != 0)) {\n          quotient1 = quotient3 - 2;\n          uVar6 = uVar6 + remainder;\n        }\n      }\n      uVar6 = uVar6 - uVar3;\n      quotient1 = quotient1 | quotient2 << 0x10;\n      remainder = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jmp_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jmp_table)();\n        return result;\n      }\n      bit_shift = LZCOUNT(divisor);\n      if (bit_shift == 0) {\n        dividend_1 = dividend_1 - divisor;\n        uVar9 = divisor >> 0x10;\n        uVar7 = divisor & 0xffff;\n        remainder = 1;\n        quotient2 = divisor;\n      }\n      else {\n        quotient2 = divisor << bit_shift;\n        uVar9 = quotient2 >> 0x10;\n        quotient1 = dividend_1 >> (0x20U - bit_shift & 0xff);\n        remainder = dividend >> (0x20U - bit_shift & 0xff) | dividend_1 << bit_shift;\n        uVar3 = quotient1 / uVar9;\n        uVar7 = quotient2 & 0xffff;\n        quotient3 = remainder >> 0x10 | (quotient1 - uVar9 * uVar3) * 0x10000;\n        uVar6 = uVar3 * uVar7;\n        dividend = dividend << bit_shift;\n        quotient1 = uVar3;\n        if (quotient3 <= uVar6 && uVar6 - quotient3 != 0) {\n          carry_flag = CARRY4(quotient2,quotient3);\n          quotient3 = quotient2 + quotient3;\n          quotient1 = uVar3 - 1;\n          if ((carry_flag == false) && (quotient3 <= uVar6 && uVar6 - quotient3 != 0)) {\n            quotient1 = uVar3 - 2;\n            quotient3 = quotient3 + quotient2;\n          }\n        }\n        uVar3 = (quotient3 - uVar6) / uVar9;\n        dividend_1 = remainder & 0xffff | ((quotient3 - uVar6) - uVar9 * uVar3) * 0x10000;\n        uVar6 = uVar3 * uVar7;\n        remainder = uVar3;\n        if (dividend_1 <= uVar6 && uVar6 - dividend_1 != 0) {\n          carry_flag = CARRY4(quotient2,dividend_1);\n          dividend_1 = quotient2 + dividend_1;\n          remainder = uVar3 - 1;\n          if ((carry_flag == false) && (dividend_1 <= uVar6 && uVar6 - dividend_1 != 0)) {\n            remainder = uVar3 - 2;\n            dividend_1 = dividend_1 + quotient2;\n          }\n        }\n        dividend_1 = dividend_1 - uVar6;\n        remainder = remainder | quotient1 << 0x10;\n      }\n      quotient3 = dividend_1 / uVar9;\n      uVar6 = dividend >> 0x10 | (dividend_1 - uVar9 * quotient3) * 0x10000;\n      quotient1 = uVar7 * quotient3;\n      uVar3 = quotient3;\n      if (uVar6 <= quotient1 && quotient1 - uVar6 != 0) {\n        carry_flag = CARRY4(quotient2,uVar6);\n        uVar6 = quotient2 + uVar6;\n        uVar3 = quotient3 - 1;\n        if ((carry_flag == false) && (uVar6 <= quotient1 && quotient1 - uVar6 != 0)) {\n          uVar3 = quotient3 - 2;\n          uVar6 = uVar6 + quotient2;\n        }\n      }\n      quotient3 = (uVar6 - quotient1) / uVar9;\n      uVar6 = dividend & 0xffff | ((uVar6 - quotient1) - uVar9 * quotient3) * 0x10000;\n      uVar7 = uVar7 * quotient3;\n      quotient1 = quotient3;\n      if (uVar6 <= uVar7 && uVar7 - uVar6 != 0) {\n        carry_flag = CARRY4(quotient2,uVar6);\n        uVar6 = quotient2 + uVar6;\n        quotient1 = quotient3 - 1;\n        if ((carry_flag == false) && (uVar6 <= uVar7 && uVar7 - uVar6 != 0)) {\n          quotient1 = quotient3 - 2;\n          uVar6 = uVar6 + quotient2;\n        }\n      }\n      uVar6 = uVar6 - uVar7;\n      quotient1 = quotient1 | uVar3 << 0x10;\n    }\n    if (quotient_remainder != (uint *)0x0) {\n      *quotient_remainder = uVar6 >> LZCOUNT(divisor);\n      quotient_remainder[1] = 0;\n    }\n  }\n  else if (dividend_1 < divisor_1) {\n    if (quotient_remainder != (uint *)0x0) {\n      *quotient_remainder = dividend;\n      quotient_remainder[1] = dividend_1;\n      return 0;\n    }\n    quotient1 = 0;\n    remainder = 0;\n  }\n  else {\n    bit_shift = LZCOUNT(divisor_1);\n    if (bit_shift != 0) {\n      uVar7 = 0x20 - bit_shift;\n      uVar3 = divisor >> (uVar7 & 0xff) | divisor_1 << bit_shift;\n      uVar9 = uVar3 >> 0x10;\n      quotient1 = dividend_1 >> (uVar7 & 0xff);\n      remainder = dividend >> (uVar7 & 0xff) | dividend_1 << bit_shift;\n      uVar6 = quotient1 / uVar9;\n      quotient2 = remainder >> 0x10 | (quotient1 - uVar9 * uVar6) * 0x10000;\n      quotient3 = uVar6 * (uVar3 & 0xffff);\n      dividend = dividend << bit_shift;\n      quotient1 = uVar6;\n      if (quotient2 <= quotient3 && quotient3 - quotient2 != 0) {\n        carry_flag = CARRY4(uVar3,quotient2);\n        quotient2 = uVar3 + quotient2;\n        quotient1 = uVar6 - 1;\n        if ((carry_flag == false) && (quotient2 <= quotient3 && quotient3 - quotient2 != 0)) {\n          quotient1 = uVar6 - 2;\n          quotient2 = quotient2 + uVar3;\n        }\n      }\n      uVar6 = (quotient2 - quotient3) / uVar9;\n      quotient2 = remainder & 0xffff | ((quotient2 - quotient3) - uVar9 * uVar6) * 0x10000;\n      quotient3 = uVar6 * (uVar3 & 0xffff);\n      remainder = uVar6;\n      if (quotient2 <= quotient3 && quotient3 - quotient2 != 0) {\n        carry_flag = CARRY4(uVar3,quotient2);\n        quotient2 = uVar3 + quotient2;\n        remainder = uVar6 - 1;\n        if ((carry_flag == false) && (quotient2 <= quotient3 && quotient3 - quotient2 != 0)) {\n          remainder = uVar6 - 2;\n          quotient2 = quotient2 + uVar3;\n        }\n      }\n      remainder = remainder | quotient1 << 0x10;\n      result = (ulonglong)remainder * (ulonglong)(divisor << bit_shift);\n      if (CONCAT44(quotient2 - quotient3,dividend) < result) {\n        result = result - CONCAT44(uVar3,divisor << bit_shift);\n        remainder = remainder - 1;\n      }\n      if (quotient_remainder != (uint *)0x0) {\n        quotient1 = ((quotient2 - quotient3) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient_remainder = quotient1 << (uVar7 & 0xff) | dividend - (uint)result >> bit_shift;\n        quotient_remainder[1] = quotient1 >> bit_shift;\n      }\n      return (ulonglong)remainder;\n    }\n    if ((divisor_1 < dividend_1) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_1 = (dividend_1 - divisor_1) - (uint)carry_flag;\n      quotient1 = 1;\n    }\n    else {\n      quotient1 = 0;\n    }\n    remainder = 0;\n    if (quotient_remainder != (uint *)0x0) {\n      *quotient_remainder = dividend;\n      quotient_remainder[1] = dividend_1;\n    }\n  }\n  return CONCAT44(remainder,quotient1);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "calculate_division_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_1",
                "param_3": "divisor",
                "param_4": "divisor_1",
                "param_5": "quotient_remainder",
                "UNRECOVERED_JUMPTABLE": "jmp_table",
                "uVar1": "quotient1",
                "iVar2": "bit_shift",
                "uVar4": "quotient2",
                "uVar5": "remainder",
                "uVar8": "quotient3",
                "bVar10": "carry_flag",
                "uVar11": "result"
            },
            "calling": [
                "__aeabi_ldivmod"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 131917,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_0000099c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001448",
            "FUN_000015d0",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ],
        [
            "FUN_00000d76",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_00001628",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00002028",
            "FUN_0000258c"
        ],
        [
            "FUN_000013b8",
            "FUN_000017dc"
        ]
    ],
    "locked_functions": []
}