{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "execute_startup_function_00000410",
            "code": "\nvoid execute_startup_function_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "execute_startup_function_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "check_and_update_offset_00000428",
            "code": "\ndword checkAndUpdateOffset_00000428(undefined4 *output,int input)\n\n{\n  undefined4 result;\n  dword offset;\n  \n  result = FUN_00000cd0();\n  offset = array[0].r_offset;\n  if ((input + array[0].r_offset < 0x20030001) &&\n     (0x1fff0def < input + array[0].r_offset)) {\n    array[0].r_offset = input + array[0].r_offset;\n  }\n  else {\n    *output = 0xc;\n    offset = 0xffffffff;\n  }\n  FUN_00000d0c(result);\n  return offset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "check_and_update_offset_00000428",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "result",
                "local_c": "offset",
                "Elf32_Rel_ARRAY_1fff0200": "array"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "process_data_00000490",
            "code": "\nundefined4 processData_00000490(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(input3,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "process_data_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_value_000004f2",
            "code": "\nundefined4 initializeValueAndReturnValue_000004f2(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_value_000004f2",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_value_and_return_00000514",
            "code": "\nundefined4 initializeValueAndReturn_00000514(undefined4 *resultPointer)\n\n{\n  *resultPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_value_and_return_00000514",
                "param_1": "resultPointer"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_parameter_validity_00000534",
            "code": "\nundefined4 checkParameterValidity_00000534(undefined4 *output,int input)\n\n{\n  undefined4 isValid;\n  \n  *output = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_parameter_validity_00000534",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "convert_to_little_endian_00000566",
            "code": "\nint convertToLittleEndian_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "convert_to_little_endian_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "assign_previous_value_0000058e",
            "code": "\nvoid assignPreviousValue_0000058e(int *currentValue,undefined4 *newValue)\n\n{\n  if (*currentValue == 0) {\n    *newValue = newValue;\n  }\n  else {\n    *newValue = *(undefined4 *)*currentValue;\n    *(undefined4 **)*currentValue = newValue;\n  }\n  *currentValue = (int)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "assign_previous_value_0000058e",
                "param_1": "currentValue",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_and_reset_pointer_000005ca",
            "code": "\nundefined4 * extractAndResetPointer_000005ca(int *pointer)\n\n{\n  undefined4 *extractedPointer;\n  \n  if (*pointer == 0) {\n    extractedPointer = (undefined4 *)0x0;\n  }\n  else {\n    extractedPointer = *(undefined4 **)*pointer;\n    if (extractedPointer == (undefined4 *)*pointer) {\n      *pointer = 0;\n    }\n    else {\n      *(undefined4 *)*pointer = *extractedPointer;\n    }\n  }\n  return extractedPointer;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_and_reset_pointer_000005ca",
                "param_1": "pointer",
                "puVar1": "extractedPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "validate_data_00000610",
            "code": "\nundefined4 validateData_00000610(void)\n\n{\n  int address;\n  int index;\n  undefined4 validationResult;\n  \n  address = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (address == index + -8) {\n    validationResult = 0;\n  }\n  else {\n    if ((address != 0) && (*(char *)(address + 4) == '\\t')) {\n      *(undefined *)(address + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    validationResult = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return validationResult;\n}\n\n",
            "renaming": {
                "FUN_00000610": "validate_data_00000610",
                "iVar1": "address",
                "iVar2": "index",
                "uVar3": "validationResult"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid update_data_00000698(int data_ptr,uint new_value)\n\n{\n  if (new_value < 9) {\n    if ((8 < *(byte_value *)(data_ptr + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(byte_value *)(data_ptr + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte_value *)(data_ptr + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signed_byte *)(data_ptr + 5));\n    }\n  }\n  else if (*(byte_value *)(data_ptr + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(byte_value *)(data_ptr + 5) * 4,data_ptr + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signed_byte *)(data_ptr + 5);\n  }\n  *(char *)(data_ptr + 4) = (char)new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "byte": "byte_value",
                "sbyte": "signed_byte"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "validate_input_00000738",
            "code": "\nvoid validateInput_00000738(ushort input)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "validate_input_00000738",
                "param_1": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_memory_00000794",
            "code": "\nint * initializeMemory_00000794(void)\n\n{\n  int result;\n  int counter1;\n  undefined4 *pointer;\n  uint alignedAddress;\n  int counter2;\n  int loopCounter1;\n  int *stackPointer;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  counter1 = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  alignedAddress = (int)pointer + counter1 & 0xfffffffc;\n  stackPointer = (int *)(alignedAddress - 4);\n  *stackPointer = 0x77777777;\n  if (((uint)stackPointer & 7) != 0) {\n    stackPointer = (int *)(alignedAddress - 8);\n    *stackPointer = 0x88888888;\n  }\n  stackPointer[-1] = 0x1000000;\n  stackPointer[-2] = counter1 << 0xd;\n  stackPointer[-3] = 0x795;\n  stackPointer = stackPointer + -4;\n  *stackPointer = 0;\n  for (loopCounter1 = 3; 0 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    stackPointer = stackPointer + -1;\n    *stackPointer = loopCounter1;\n  }\n  stackPointer = stackPointer + -1;\n  *stackPointer = result;\n  for (counter2 = 0xb; 3 < counter2; counter2 = counter2 + -1) {\n    stackPointer = stackPointer + -1;\n    *stackPointer = counter2;\n  }\n  stackPointer[-1] = -3;\n  return stackPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_memory_00000794",
                "extraout_r1": "result",
                "iVar1": "counter1",
                "puVar2": "pointer",
                "uVar3": "alignedAddress",
                "iStack_1c": "counter2",
                "iStack_18": "loopCounter1",
                "piStack_14": "stackPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_array_000007dc",
            "code": "\nint * initializeArray_000007dc(undefined4 inputValue,int length,int offset,int alignment)\n\n{\n  uint alignedSize;\n  int i;\n  int j;\n  int *array;\n  \n  alignedSize = alignment + offset & 0xfffffffc;\n  array = (int *)(alignedSize - 4);\n  *array = 0x77777777;\n  if (((uint)array & 7) != 0) {\n    array = (int *)(alignedSize - 8);\n    *array = 0x88888888;\n  }\n  array[-1] = 0x1000000;\n  array[-2] = inputValue;\n  array[-3] = 0x795;\n  array = array + -4;\n  *array = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    array = array + -1;\n    *array = j;\n  }\n  array = array + -1;\n  *array = length;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    array = array + -1;\n    *array = i;\n  }\n  array[-1] = -3;\n  return array + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_array_000007dc",
                "param_1": "inputValue",
                "param_2": "length",
                "param_3": "offset",
                "param_4": "alignment",
                "uVar1": "alignedSize",
                "local_14": "i",
                "local_10": "j",
                "local_c": "array"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "find_last_offset_000008b8",
            "code": "\nint find_last_offset_000008b8(void)\n\n{\n  Elf32_Rel *current_rel_entry;\n  \n  for (current_rel_entry = (Elf32_Rel *)&DAT_1fff0000;\n      (current_rel_entry->r_offset == 0xe7fee7fe && (current_rel_entry < end_rel_array));\n      current_rel_entry = (Elf32_Rel *)&current_rel_entry->r_info) {\n  }\n  return ((int)end_rel_array - (int)current_rel_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "find_last_offset_000008b8",
                "local_c": "current_rel_entry",
                "Elf32_Rel_ARRAY_1fff0200": "end_rel_array"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_stack_pointer_00000900",
            "code": "\nundefined4 getStackPointer_00000900(void)\n\n{\n  undefined4 stackPointer;\n  \n  stackPointer = getMainStackPointer();\n  return stackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_stack_pointer_00000900",
                "uVar1": "stackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_max_memory_address_0000091c",
            "code": "\nundefined4 getMaxMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_max_memory_address_0000091c"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "execute_and_wait_00000930",
            "code": "\nvoid execute_and_wait_00000930(void)\n\n{\n  FUN_00000cf0();\n  trigger_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "execute_and_wait_00000930",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_memory_protection_flag_0000093c",
            "code": "\n\n\nvoid setMemoryProtectionFlag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_memory_protection_flag_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_address_00000a30",
            "code": "\nundefined * getNmiHandlerAddress_00000a30(void)\n\n{\n  int inputParameter;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return stackBaseAddress + -*(int *)(inputParameter + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_address_00000a30",
                "in_r3": "inputParameter",
                "&stack0xe000ffe0": "stackBaseAddress"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_ir_qinterrupts_with_check_00000cc0",
            "code": "\nundefined4 disableIRQinterruptsWithCheck_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 previousIRQstate;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  previousIRQstate = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    previousIRQstate = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return previousIRQstate;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_ir_qinterrupts_with_check_00000cc0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "previousIRQstate"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "get_interrupts_enabled_status_00000cd0",
            "code": "\nundefined4 getInterruptsEnabledStatus_00000cd0(void)\n\n{\n  bool isCurrentModePrivilegedResult;\n  undefined4 interruptsEnabledStatus;\n  \n  interruptsEnabledStatus = 0;\n  isCurrentModePrivilegedResult = (bool)checkCurrentModePrivileged();\n  if (isCurrentModePrivilegedResult) {\n    interruptsEnabledStatus = checkIRQInterruptsEnabled();\n  }\n  disableIRQInterrupts();\n  return interruptsEnabledStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "get_interrupts_enabled_status_00000cd0",
                "bVar1": "isCurrentModePrivilegedResult",
                "uVar2": "interruptsEnabledStatus",
                "isCurrentModePrivileged": "checkCurrentModePrivileged",
                "isIRQinterruptsEnabled": "checkIRQInterruptsEnabled",
                "disableIRQinterrupts": "disableIRQInterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_00000cf0",
            "code": "\nundefined4 checkIRQinterrupts_00000cf0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_00000cf0",
                "bVar1": "isPrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableInterruptsIfPrivileged_00000d0c(uint flags)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)checkPrivilegedMode();\n  if (isPrivileged) {\n    setIRQinterrupts((flags & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_if_privileged_00000d0c",
                "param_1": "flags",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "setIRQinterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_updated_value_00000d44",
            "code": "\nint calculate_updated_value_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_updated_value_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 input1,undefined input2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00000d44(input1,input2);\n  *resultPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_peripheral_00000d9c",
            "code": "\nvoid initializePeripheral_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_peripheral_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_system_00000db0",
            "code": "\nvoid initialize_system_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_program_00000dc0",
            "code": "\nvoid initializeProgram_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_program_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_communication_00000df4",
            "code": "\nvoid initializeCommunication_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_communication_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "execute_function_00000e14",
            "code": "\nundefined4 executeFunction_00000e14(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,input1,input2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "execute_function_00000e14",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "call_and_return_param2_00000e38",
            "code": "\nundefined4 callAndReturnParam2_00000e38(undefined4 inputParam,undefined4 outputParam)\n\n{\n  FUN_000015d0(0,inputParam,outputParam);\n  return outputParam;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "call_and_return_param2_00000e38",
                "param_1": "inputParam",
                "param_2": "outputParam"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid runInfiniteLoop_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_hardware_00000e64",
            "code": "\n\n\nvoid initializeHardware_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_hardware_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_structures_00000ed8",
            "code": "\nvoid initialize_data_structures_00000ed8(void)\n\n{\n  undefined4 link_register;\n  \n  FUN_00004c84(&DAT_00006f58,link_register);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_structures_00000ed8",
                "in_lr": "link_register"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panic_type,undefined4 panic_message)\n\n{\n  undefined4 local_var_1;\n  code *jump_table;\n  undefined4 local_var_2;\n  char local_var_3;\n  \n  local_var_2 = panic_message;\n  local_var_3 = panic_type;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_type == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",local_var_2);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jump_table = (code *)0xf4d;\n  FUN_00000e58();\n  local_var_1 = (int)&local_var_1 + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panic_type",
                "param_2": "panic_message",
                "uStack_18": "local_var_1",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "local_10": "local_var_2",
                "local_9": "local_var_3"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_00000f8c",
            "code": "\nvoid initializeMemory_00000f8c(void)\n\n{\n  uint shiftedValue;\n  undefined4 *pointer;\n  uint count;\n  int shiftedCount;\n  int *pointerToShiftedCount;\n  undefined4 constantValue;\n  undefined4 constant1;\n  undefined4 constant2;\n  dword localVariable;\n  \n  FUN_00000cd0();\n  localVariable = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  constant2 = 0;\n  constant1 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  localVariable = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  constant2 = 0;\n  constant1 = 0xf5d;\n  count = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  constantValue = 0xfd3;\n  shiftedValue = FUN_00000930();\n  shiftedValue = shiftedValue >> 0x1e;\n  pointer = (undefined4 *)(count * 0x100);\n  shiftedCount = (count >> 0x1d) << 0x11;\n  pointerToShiftedCount = &shiftedCount;\n  if ((shiftedValue & shiftedValue - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *pointer = 0;\n  pointer[1] = 0;\n  pointer[2] = shiftedValue - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_00000f8c",
                "uVar1": "shiftedValue",
                "puVar2": "pointer",
                "uVar3": "count",
                "iStack_24": "shiftedCount",
                "piStack_20": "pointerToShiftedCount",
                "uStack_1c": "constantValue",
                "local_18": "constant1",
                "local_14": "constant2",
                "local_10": "localVariable"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_param_00000fec",
            "code": "\nvoid initializeParam_00000fec(undefined4 *output,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *output = 0;\n  output[1] = 0;\n  output[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_param_00000fec",
                "param_1": "output",
                "param_2": "size",
                "param_1[1]": "output[1]",
                "param_1[2]": "output[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_item_and_insert_00001034",
            "code": "\nvoid findItemAndInsert_00001034(int **itemList,int itemData)\n\n{\n  int **currentItem;\n  \n  if (8 < *(byte *)(itemData + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentItem = itemList;\n      (*currentItem != (int *)0x0 && (*(byte *)((int)*currentItem + -3) <= *(byte *)(itemData + 5)));\n      currentItem = (int **)*currentItem) {\n  }\n  *(int **)(itemData + 8) = *currentItem;\n  *currentItem = (int *)(int **)(itemData + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_item_and_insert_00001034",
                "param_1": "itemList",
                "param_2": "itemData",
                "local_1c": "currentItem"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_array_size_000010a0",
            "code": "\nint calculate_array_size_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_array_size_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "process_data_000010d4",
            "code": "\nint processData_000010d4(uint length,int data,byte flag,uint options,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int returnValue;\n  uint alignedLength;\n  undefined4 *bufferPtr;\n  int adjustedDataLength;\n  uint adjustedDataPtr;\n  uint loopCounter;\n  short shortCounter;\n  short availableIndex;\n  \n  if (flag < 0x10) {\n    adjustedDataLength = data;\n    adjustedDataPtr = length;\n    if ((length & 3) != 0) {\n      adjustedDataLength = 4 - (length & 3);\n      adjustedDataPtr = adjustedDataLength + length;\n      adjustedDataLength = data - adjustedDataLength;\n    }\n    alignedLength = adjustedDataLength - 0x30U & 0xfffffffc;\n    bufferPtr = (undefined4 *)(alignedLength + adjustedDataPtr);\n    if ((options & 8) == 0) {\n      *(uint *)adjustedDataPtr = adjustedDataPtr;\n    }\n    else {\n      for (loopCounter = adjustedDataPtr; loopCounter < alignedLength + adjustedDataPtr; loopCounter = loopCounter + 4) {\n        *(uint *)loopCounter = loopCounter;\n      }\n    }\n    result1 = FUN_00000cd0();\n    availableIndex = 0;\n    for (shortCounter = 1; shortCounter < 0x21; shortCounter = shortCounter + 1) {\n      if (*(int *)(&DAT_1fff0358 + shortCounter * 4) == 0) {\n        availableIndex = shortCounter;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      FUN_00000d0c(result1);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = bufferPtr;\n      *(short *)((int)bufferPtr + 6) = availableIndex;\n      result2 = FUN_000007dc(param5,param6,adjustedDataPtr,alignedLength);\n      *bufferPtr = result2;\n      bufferPtr[9] = adjustedDataPtr;\n      bufferPtr[0xb] = data;\n      bufferPtr[10] = param7;\n      *(byte *)((int)bufferPtr + 5) = flag;\n      *(undefined *)(bufferPtr + 1) = 0;\n      bufferPtr[2] = 0;\n      bufferPtr[3] = 0;\n      bufferPtr[4] = 0;\n      FUN_00000fec(bufferPtr + 5,0);\n      bufferPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((options & 1) == 0) {\n        FUN_00000698(bufferPtr,10);\n        if ((options & 4) == 0) {\n          FUN_00000d0c(result1);\n          FUN_00000738(flag);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        FUN_00000698(bufferPtr,1);\n      }\n      FUN_00000d0c(result1);\n      returnValue = (int)availableIndex;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "process_data_000010d4",
                "param_1": "length",
                "param_2": "data",
                "param_3": "flag",
                "param_4": "options",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "returnValue",
                "uVar4": "alignedLength",
                "puVar5": "bufferPtr",
                "local_30": "adjustedDataLength",
                "local_2c": "adjustedDataPtr",
                "local_10": "loopCounter",
                "local_c": "shortCounter",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initializeSystem_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_0000129c",
            "code": "\nvoid initialize_0000129c(undefined4 data)\n\n{\n  FUN_00002434(data,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_0000129c",
                "param_1": "data"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "translate_and_process_data_000012b4",
            "code": "\nundefined4 translateAndProcessData_000012b4(int dataPointer,undefined dataValue)\n\n{\n  undefined4 translatedData;\n  \n  translatedData = FUN_00002364(dataPointer + 4,dataValue);\n  FUN_000024bc(dataPointer);\n  return translatedData;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "translate_and_process_data_000012b4",
                "param_1": "dataPointer",
                "param_2": "dataValue",
                "uVar1": "translatedData"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "check_condition_loop_000012e2",
            "code": "\nint check_condition_loop_000012e2(int input_parameter,undefined4 config_parameter_1,undefined4 config_parameter_2)\n\n{\n  int result;\n  \n  while( true ) {\n    result = FUN_0000231c(input_parameter + 4,config_parameter_1,config_parameter_2);\n    if (result != 0) break;\n    FUN_0000129c(input_parameter);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "check_condition_loop_000012e2",
                "param_1": "input_parameter",
                "param_2": "config_parameter_1",
                "param_3": "config_parameter_2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_execute_function_00001348",
            "code": "\nvoid checkAndExecuteFunction_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_execute_function_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculateOffset_00001360(uint address,int multiplier)\n\n{\n  return multiplier * 4 + (address & 0xf0000000 | (address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "address",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "initialize_pointer_00001392",
            "code": "\nvoid initializePointer_00001392(undefined4 ptr,undefined data)\n\n{\n  undefined4 *pointer;\n  \n  pointer = (undefined4 *)FUN_00001360(ptr,data);\n  *pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "initialize_pointer_00001392",
                "param_1": "ptr",
                "param_2": "data",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_data_000013b8",
            "code": "\nundefined4 initializeData_000013b8(int index,undefined4 value,undefined4 dataPtr,undefined4 infoPtr)\n\n{\n  undefined4 returnValue;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = dataPtr;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = infoPtr;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_data_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "dataPtr",
                "param_4": "infoPtr",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_data_00001448",
            "code": "\nvoid processData_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid updateConfiguration_000014c4(int index,uint divisor)\n\n{\n  byte *configData;\n  uint value1;\n  uint value2;\n  \n  configData = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  configData[3] = configData[3] & 0xf3;\n  configData[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (divisor << 4);\n  *configData = (byte)(value2 >> 8) & 0x1f;\n  configData[1] = (byte)value2;\n  configData[10] = (byte)((value1 << 2) / divisor + 1 >> 1) & 0x1f;\n  configData[0x10] = configData[0x10] | 0x88;\n  if ((configData[0x10] & 0x70) == 0) {\n    configData[0x13] = 0;\n  }\n  else {\n    configData[0x13] = (char)(2 << (configData[0x10] >> 4 & 7)) - 1;\n  }\n  configData[0x15] = 1;\n  configData[0x11] = 0xc0;\n  configData[3] = configData[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "divisor",
                "pbVar1": "configData",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int src,uint length)\n\n{\n  int address;\n  uint counter;\n  \n  address = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(address + 4));\n    *(undefined *)(address + 7) = *(undefined *)(counter + src);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "address",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "check_and_invoke_function_00001628",
            "code": "\nvoid checkAndInvokeFunction_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "check_and_invoke_function_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_system_00001688",
            "code": "\nvoid initializeSystem_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_system_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "initialize_memory_000016c8",
            "code": "\nvoid initializeMemory_000016c8(undefined4 input1,undefined input2)\n\n{\n  undefined4 *ptrToValue;\n  \n  ptrToValue = (undefined4 *)FUN_00001696(input1,input2);\n  *ptrToValue = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "initialize_memory_000016c8",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "ptrToValue"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_000016ec",
            "code": "\nvoid setFlag_000016ec(undefined4 flagAddress,undefined flagValue)\n\n{\n  undefined *flagPointer;\n  \n  flagPointer = (undefined *)FUN_00001696(flagAddress,flagValue);\n  *flagPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_000016ec",
                "param_1": "flagAddress",
                "param_2": "flagValue",
                "puVar1": "flagPointer"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 pointer,undefined data)\n\n{\n  undefined *memoryPointer;\n  \n  memoryPointer = (undefined *)FUN_00001696(pointer,data);\n  *memoryPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "pointer",
                "param_2": "data",
                "puVar1": "memoryPointer"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_data_00001734",
            "code": "\nvoid initializeData_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flag_bitmask_00001748",
            "code": "\nvoid updateFlagBitmask_00001748(byte inputByte)\n\n{\n  DAT_40064003 = inputByte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flag_bitmask_00001748",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_value_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateValue_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_value_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_hardware_000017dc",
            "code": "\n\n\nvoid initializeHardware_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_hardware_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_communication_000018bc",
            "code": "\nvoid initializeCommunication_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_communication_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_0000191c",
            "code": "\nvoid initialize_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_system_000019c0",
            "code": "\nvoid initializeSystem_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initialize_system_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initialize_data_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_device_00001a60",
            "code": "\nvoid initialize_device_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "process_input_00001b10",
            "code": "\nundefined4 processInput_00001b10(byte inputByte)\n\n{\n  undefined4 returnValue;\n  \n  if (inputByte < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)inputByte + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (inputByte != DAT_1fff0b74);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "process_input_00001b10",
                "param_1": "inputByte",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_execute_function_00001cf0",
            "code": "\nvoid check_and_execute_function_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_execute_function_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_new_value_00001d08",
            "code": "\nint calculate_new_value_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_new_value_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_return_value_to_one_00001d3a",
            "code": "\nvoid setReturnValueToOne_00001d3a(undefined4 arg1,undefined arg2)\n\n{\n  undefined4 *returnValuePointer;\n  \n  returnValuePointer = (undefined4 *)FUN_00001d08(arg1,arg2);\n  *returnValuePointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_return_value_to_one_00001d3a",
                "param_1": "arg1",
                "param_2": "arg2",
                "puVar1": "returnValuePointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "merge_param_with_constant_00001d5e",
            "code": "\nuint mergeParamWithConstant_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "merge_param_with_constant_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_param_mask_00001d80",
            "code": "\nuint applyParamMask_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_param_mask_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "trim_to_six_bits_00001dc0",
            "code": "\nushort trimToSixBits_00001dc0(ushort inputNumber)\n\n{\n  return inputNumber & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "trim_to_six_bits_00001dc0",
                "param_1": "inputNumber"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_data_00001ddc",
            "code": "\nvoid updateData_00001ddc(undefined2 inputData)\n\n{\n  char result;\n  \n  result = FUN_00001da2(inputData);\n  FUN_00001d3a(&DAT_40048038,result + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_data_00001ddc",
                "param_1": "inputData",
                "cVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int start_index,uint bit_field)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)bit_field >> 3) + start_index * 4) * 4) >> ((bit_field & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "start_index",
                "param_2": "bit_field"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bit_00001e44",
            "code": "\nvoid updateBit_00001e44(int offset,uint bitPosition,int bitValue)\n\n{\n  int shiftedIndex;\n  \n  shiftedIndex = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + offset * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedIndex + offset * 4) * 4) | bitValue << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bit_00001e44",
                "param_1": "offset",
                "param_2": "bitPosition",
                "param_3": "bitValue",
                "iVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "process_data_00001ec4",
            "code": "\nvoid processData_00001ec4(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00001e0c(inputParam1,inputParam2);\n  FUN_00001e44(inputParam1,inputParam2,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "process_data_00001ec4",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_data_and_set_flag_00001eea",
            "code": "\nundefined4 updateDataAndSetFlag_00001eea(undefined2 inputData,byte byteValue)\n\n{\n  uint index;\n  int ptrData;\n  int ptrDataIndex;\n  \n  FUN_00001f80(inputData,0);\n  if ((char)byteValue < '\\0') {\n    index = FUN_00001dc0(inputData);\n    ptrData = FUN_00001d80(inputData);\n    *(uint *)(ptrData + 0x14) = *(uint *)(ptrData + 0x14) | 1 << (index & 0xff);\n  }\n  else {\n    index = FUN_00001dc0(inputData);\n    ptrData = FUN_00001d80(inputData);\n    *(uint *)(ptrData + 0x14) = *(uint *)(ptrData + 0x14) & ~(1 << (index & 0xff));\n  }\n  ptrData = FUN_00001d5e(inputData);\n  ptrDataIndex = FUN_00001dc0(inputData);\n  *(uint *)(ptrData + ptrDataIndex * 4) = byteValue & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_data_and_set_flag_00001eea",
                "param_1": "inputData",
                "param_2": "byteValue",
                "uVar1": "index",
                "iVar2": "ptrData",
                "iVar3": "ptrDataIndex"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_value_00001f80",
            "code": "\nvoid updateValue_00001f80(undefined2 param1,undefined4 param2)\n\n{\n  int index1;\n  int index2;\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  uint oldValue;\n  \n  FUN_00001ddc(param1);\n  index1 = FUN_00001d5e(param1);\n  index2 = FUN_00001dc0(param1);\n  oldValue = *(uint *)(index1 + index2 * 4);\n  index1 = FUN_00001d5e(param1);\n  index2 = FUN_00001dc0(param1);\n  *(undefined4 *)(index1 + index2 * 4) = param2;\n  if ((oldValue & 0xf0000) != 0) {\n    tempValue1 = FUN_00001da2(param1);\n    tempValue2 = FUN_00001dc0(param1);\n    FUN_00001ec4(tempValue1,tempValue2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_value_00001f80",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "tempValue1",
                "uVar4": "tempValue2",
                "uVar5": "oldValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_value_00001ff6",
            "code": "\nvoid setBitValue_00001ff6(undefined2 inputParam)\n\n{\n  uint result1;\n  int result2;\n  \n  result1 = FUN_00001dc0(inputParam);\n  result2 = FUN_00001d80(inputParam);\n  *(int *)(result2 + 4) = 1 << (result1 & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_value_00001ff6",
                "param_1": "inputParam",
                "uVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "scan_and_execute_operations_00002028",
            "code": "\nvoid scanAndExecuteOperations_00002028(int data,undefined4 param)\n\n{\n  int operationIndex;\n  uint flags;\n  uint bitIndex;\n  \n  flags = *(uint *)(data + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((flags & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(data + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(data + 0xa0) = 1 << (bitIndex & 0xff);\n      operationIndex = FUN_00001e0c(param,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + operationIndex * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + operationIndex * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "scan_and_execute_operations_00002028",
                "param_1": "data",
                "param_2": "param",
                "iVar1": "operationIndex",
                "uVar2": "flags",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_memory_000020cc",
            "code": "\nvoid initialize_memory_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_memory_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_memory_000020f4",
            "code": "\nvoid initializeMemory_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_memory_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_memory_00002108",
            "code": "\nvoid initializeMemory_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_state_0000211c",
            "code": "\nvoid printProcessState_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 padding;\n  int stackSize;\n  int stackOffset;\n  dword baseAddress;\n  uint index;\n  undefined4 *currentFuncPtr;\n  undefined4 currentStackAddr;\n  undefined4 currentBaseAddr;\n  int isrStackSize;\n  short processIndex;\n  int totalStackSize;\n  int usedStackSize;\n  \n  padding = 0x515f;\n  usedStackSize = 0;\n  totalStackSize = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  isrStackSize = FUN_000008b8();\n  currentBaseAddr = FUN_0000091c();\n  currentStackAddr = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               isrStackSize,currentBaseAddr,currentStackAddr);\n  usedStackSize = usedStackSize + 0x200;\n  if (0 < isrStackSize) {\n    totalStackSize = isrStackSize + totalStackSize;\n  }\n  for (processIndex = 1; processIndex < 0x21; processIndex = processIndex + 1) {\n    currentFuncPtr = *(undefined4 **)(&DAT_1fff0358 + processIndex * 4);\n    if (currentFuncPtr != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(currentFuncPtr + 1);\n      baseAddress = (offset)[index];\n      stackOffset = (int)&padding + (uint)(8 < index);\n      stackSize = currentFuncPtr[0xb];\n      usedStackSize = stackSize + usedStackSize;\n      iVar1 = FUN_000010a0(currentFuncPtr[9]);\n      stackSize = stackSize - iVar1;\n      totalStackSize = stackSize + totalStackSize;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)currentFuncPtr + 6),currentFuncPtr[10],baseAddress,stackOffset,\n                   *(undefined *)((int)currentFuncPtr + 5),currentFuncPtr[0xb],stackSize,currentFuncPtr[9],*currentFuncPtr);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,usedStackSize,totalStackSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_state_0000211c",
                "local_40": "padding",
                "local_3c": "stackSize",
                "local_38": "stackOffset",
                "local_34": "baseAddress",
                "local_30": "index",
                "local_2c": "currentFuncPtr",
                "local_28": "currentStackAddr",
                "local_24": "currentBaseAddr",
                "local_20": "isrStackSize",
                "local_1a": "processIndex",
                "local_18": "totalStackSize",
                "local_14": "usedStackSize",
                "&Elf32_Rel_ARRAY_1fff0200[4].r_offset": "offset"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool isMatch;\n  \n  value = *(int *)(input + 0xc);\n  isMatch = *(int *)(input + 8) == value;\n  if (isMatch) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isMatch) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "isMatch",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_equality_00002294",
            "code": "\nundefined checkEquality_00002294(int address)\n\n{\n  undefined result;\n  int offset;\n  bool isEqual;\n  \n  offset = *(int *)(address + 4);\n  isEqual = *(int *)(address + 0xc) - *(int *)(address + 8) == offset;\n  if (isEqual) {\n    offset = 1;\n  }\n  result = (undefined)offset;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_equality_00002294",
                "param_1": "address",
                "iVar2": "offset",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "write_value_000022be",
            "code": "\nvoid writeValue_000022be(int *array,undefined value)\n\n{\n  uint currentValue;\n  \n  currentValue = array[3];\n  array[3] = currentValue + 1;\n  *(undefined *)((currentValue & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "write_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "currentValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_offset_000022f0",
            "code": "\nundefined incrementAndReturnOffset_000022f0(int *array)\n\n{\n  uint currentOffset;\n  \n  currentOffset = array[2];\n  array[2] = currentOffset + 1;\n  return *(undefined *)((currentOffset & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_offset_000022f0",
                "param_1": "array",
                "uVar1": "currentOffset"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_data_0000231c",
            "code": "\nint copy_data_0000231c(undefined4 src,undefined *dest,int size)\n\n{\n  undefined byte;\n  int result;\n  undefined *dest_ptr;\n  int remaining_size;\n  \n  dest_ptr = dest;\n  remaining_size = size;\n  while ((remaining_size != 0 && (result = FUN_00002270(src), result == 0))) {\n    byte = FUN_000022f0(src);\n    *dest_ptr = byte;\n    remaining_size = remaining_size + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return size - remaining_size;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_data_0000231c",
                "param_1": "src",
                "param_2": "dest",
                "param_3": "size",
                "uVar1": "byte",
                "iVar2": "result",
                "local_20": "dest_ptr",
                "local_14": "remaining_size"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_status_00002364",
            "code": "\nundefined4 check_status_00002364(undefined4 input_value,undefined other_parameter)\n\n{\n  int status;\n  undefined4 result;\n  \n  status = FUN_00002294(input_value);\n  if (status == 0) {\n    FUN_000022be(input_value,other_parameter);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_status_00002364",
                "param_1": "input_value",
                "param_2": "other_parameter",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "execute_initialization_00002396",
            "code": "\nvoid executeInitialization_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "execute_initialization_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined inputBuffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  returnValue = FUN_00002e6c(0,inputBuffer,0x80);\n  triggerSoftwareInterrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "inputBuffer",
                "software_interrupt": "triggerSoftwareInterrupt",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_system_call_000023c8",
            "code": "\nvoid executeSystemCall_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_system_call_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "initialize_application_000023d0",
            "code": "\nundefined4 initializeApplication_000023d0(undefined4 userInput)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = FUN_000023c8(1,userInput,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "initialize_application_000023d0",
                "param_1": "userInput",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "update_pointer_0000240c",
            "code": "\nundefined4 * updatePointer_0000240c(undefined4 *ptr)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*ptr;\n  if (nextPointer != (undefined4 *)0x0) {\n    *ptr = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "update_pointer_0000240c",
                "param_1": "ptr",
                "puVar1": "nextPointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "process_input_00002434",
            "code": "\nundefined4 processInput_00002434(int *input,int flag)\n\n{\n  int data;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  data = DAT_1fff03dc;\n  if (*input == 0) {\n    *input = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*input == -1) {\n      *input = data + 8;\n      *(undefined4 *)*input = 0;\n    }\n    else {\n      FUN_00001034(input,data);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "process_input_00002434",
                "param_1": "input",
                "param_2": "flag",
                "iVar1": "data",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "update_param_value_000024bc",
            "code": "\nvoid updateParamValue_000024bc(int *param)\n\n{\n  undefined tempVar;\n  undefined4 result;\n  int tempValue;\n  \n  result = FUN_00000cd0();\n  if (*param == 0) {\n    FUN_00000d0c(result);\n  }\n  else if (*param == -1) {\n    *param = 0;\n    FUN_00000d0c(result);\n  }\n  else {\n    tempValue = FUN_0000240c(param);\n    FUN_00000698(tempValue + -8,10);\n    if (*param == 0) {\n      *param = -1;\n    }\n    tempVar = *(undefined *)(tempValue + -3);\n    FUN_00000d0c(result);\n    FUN_00000738(tempVar);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "update_param_value_000024bc",
                "param_1": "param",
                "uVar1": "tempVar",
                "uVar2": "result",
                "iVar3": "tempValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_memory_00002538",
            "code": "\nvoid updateMemory_00002538(byte byteValue,uint updatedValue)\n\n{\n  if ((char)byteValue < '\\0') {\n    (&DAT_e000ed14)[byteValue & 0xf] = (char)((updatedValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteValue + -0x1fff1c00) = (char)((updatedValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "param_1": "byteValue",
                "param_2": "updatedValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_registers_0000258c",
            "code": "\n\n\nvoid initializeRegisters_0000258c(void)\n\n{\n  uint loopCounter;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (loopCounter = 0; loopCounter < 0x66; loopCounter = loopCounter + 1) {\n    FUN_00002538((int)(char)loopCounter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_registers_0000258c",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_application_000025f4",
            "code": "\nvoid initialize_application_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_application_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_and_process_data_00002600",
            "code": "\nundefined4 initializeAndProcessData_00002600(undefined4 inputData)\n\n{\n  undefined4 processedData;\n  \n  processedData = FUN_000047e4(inputData);\n  FUN_0000285c(processedData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_and_process_data_00002600",
                "param_1": "inputData",
                "uVar1": "processedData"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "extract_and_process_data_00002624",
            "code": "\nundefined4 extractAndProcessData_00002624(undefined4 inputData)\n\n{\n  undefined4 outputData;\n  undefined4 tempVar;\n  \n  outputData = FUN_0000281c();\n  tempVar = 0;\n  FUN_0000443c(&outputData,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "extract_and_process_data_00002624",
                "param_1": "inputData",
                "local_10": "outputData",
                "uStack_c": "tempVar"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_function_00002654",
            "code": "\nundefined4 initializeFunction_00002654(undefined4 inputParameter,undefined4 outputParameter,undefined4 additionalParameter)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputParameter);\n  DAT_1fff0d9c = outputParameter;\n  FUN_00002894(result,0x26f1,additionalParameter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_function_00002654",
                "param_1": "inputParameter",
                "param_2": "outputParameter",
                "param_3": "additionalParameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_and_process_data_00002690",
            "code": "\nundefined4 initializeAndProcessData_00002690(undefined4 inputData)\n\n{\n  undefined4 initializedData;\n  undefined4 counter;\n  \n  initializedData = FUN_000028f0();\n  counter = 0;\n  FUN_0000443c(&initializedData,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_and_process_data_00002690",
                "param_1": "inputData",
                "local_10": "initializedData",
                "uStack_c": "counter"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_000026c0",
            "code": "\nvoid initializeData_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_system_000026d8",
            "code": "\nvoid initialize_system_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_system_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_000026e4",
            "code": "\nvoid initialize_system_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_function_000026f0",
            "code": "\nvoid executeCallbackFunction_000026f0(undefined4 callbackParameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_function_000026f0",
                "param_1": "callbackParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "update_bit_at_offset_00002714",
            "code": "\nvoid updateBitAtOffset_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "update_bit_at_offset_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid updateData_00002744(byte dataIndex,uint value)\n\n{\n  if ((char)dataIndex < '\\0') {\n    (&DAT_e000ed14)[dataIndex & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)dataIndex + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "dataIndex",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_execute_function_00002798",
            "code": "\nvoid checkAndExecuteFunction_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_execute_function_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getBaseAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_protected_variable_0000285c",
            "code": "\n\n\nvoid setProtectedVariable_0000285c(undefined4 newValue)\n\n{\n  _DAT_4003d000 = newValue;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_protected_variable_0000285c",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int dataSize,undefined4 param1,undefined4 param2)\n\n{\n  _DAT_4003d008 = dataSize + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = param1;\n  DAT_1fff0da4 = param2;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "dataSize",
                "param_2": "param1",
                "param_3": "param2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_value_000028f0",
            "code": "\n\n\nint incrementDataValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "reset_function_00002910",
            "code": "\n\n\nvoid resetFunction_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "reset_function_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_on_0000294c",
            "code": "\n\n\nvoid setFlagOn_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_on_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_callbacks_00002994",
            "code": "\n\n\nvoid executeCallbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_callbacks_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_device_00002a00",
            "code": "\nvoid initializeDevice_00002a00(undefined4 deviceData)\n\n{\n  FUN_00004cb4(deviceData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_device_00002a00",
                "param_1": "deviceData"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_matching_value_00002a18",
            "code": "\nint findMatchingValue_00002a18(int *array,undefined4 value)\n\n{\n  int result;\n  int *paramArray;\n  undefined **ptrToReboot;\n  uint index;\n  int *currentArray;\n  \n  paramArray = array;\n  ptrToReboot = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    currentArray = (&paramArray)[index];\n    if (currentArray != (int *)0x0) {\n      for (; *currentArray != 0; currentArray = currentArray + 3) {\n        result = FUN_00004e52(*currentArray,value);\n        if (result == 0) {\n          return currentArray[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_matching_value_00002a18",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "result",
                "local_18": "paramArray",
                "local_14": "ptrToReboot",
                "local_10": "index",
                "local_c": "currentArray"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **commandDescription;\n  uint commandIndex;\n  int *currentParameter;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commandList;\n  commandDescription = &PTR_s_reboot_00007300;\n  for (commandIndex = 0; commandIndex < 2; commandIndex = commandIndex + 1) {\n    currentParameter = (&currentCommand)[commandIndex];\n    if (currentParameter != (int *)0x0) {\n      for (; *currentParameter != 0; currentParameter = currentParameter + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentParameter,currentParameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "commandDescription",
                "local_10": "commandIndex",
                "local_c": "currentParameter"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "parse_and_execute_command_00002b10",
            "code": "\nvoid parseAndExecuteCommand_00002b10(undefined4 param_1,byte *command)\n\n{\n  int result;\n  byte *nextChar;\n  byte *paramAndArg [3];\n  code *commandFunction;\n  char **args;\n  uint argCount;\n  byte quoteChar;\n  char *currentChar;\n  char *currentArg;\n  char **currentArgPtrs;\n  uint argIndex;\n  int backslashCount;\n  uint quoteCount;\n  byte *currentCharPtr;\n  \n  quoteCount = 0;\n  backslashCount = 0;\n  currentCharPtr = command;\n  while( true ) {\n    paramAndArg[0] = command;\n    paramAndArg[1] = (byte *)param_1;\n    if (0x20 < *currentCharPtr) {\n      if ((*currentCharPtr == 0x22) || (*currentCharPtr == 0x27)) {\n        quoteChar = *currentCharPtr;\n        do {\n          nextChar = currentCharPtr + 1;\n          if (*nextChar == 0) {\n            currentCharPtr = nextChar;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextChar == 0x5c) {\n            backslashCount = backslashCount + 1;\n            currentCharPtr = currentCharPtr + 2;\n            nextChar = currentCharPtr;\n            if (*currentCharPtr == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPtr = nextChar;\n        } while (quoteChar != *currentCharPtr);\n        if (0x20 < currentCharPtr[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharPtr == 0x5c) {\n            backslashCount = backslashCount + 1;\n            currentCharPtr = currentCharPtr + 1;\n            if (*currentCharPtr == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPtr = currentCharPtr + 1;\n          if (*currentCharPtr == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharPtr);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*currentCharPtr == 0) break;\n    *currentCharPtr = 0;\n    currentCharPtr = currentCharPtr + 1;\n  }\n  if (quoteCount != 0) {\n    argCount = quoteCount;\n    args = (char **)((int)paramAndArg - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    args[quoteCount] = (char *)0x0;\n    currentCharPtr = command;\n    for (argIndex = 0; currentArgPtrs = args, argIndex < quoteCount; argIndex = argIndex + 1) {\n      for (; *currentCharPtr == 0; currentCharPtr = currentCharPtr + 1) {\n      }\n      if ((*currentCharPtr == 0x22) || (*currentCharPtr == 0x27)) {\n        currentCharPtr = currentCharPtr + 1;\n      }\n      args[argIndex] = (char *)currentCharPtr;\n      for (; *currentCharPtr != 0; currentCharPtr = currentCharPtr + 1) {\n      }\n    }\n    for (; (backslashCount != 0 && (*currentArgPtrs != (char *)0x0)); currentArgPtrs = currentArgPtrs + 1) {\n      for (currentArg = *currentArgPtrs; *currentArg != '\\0'; currentArg = currentArg + 1) {\n        if (*currentArg == '\\') {\n          for (currentChar = currentArg; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          backslashCount = backslashCount + -1;\n          if (backslashCount == 0) break;\n        }\n      }\n    }\n    commandFunction = (code *)FUN_00002a18(param_1,*args);\n    if (commandFunction == (code *)0x0) {\n      result = FUN_00004e52(&DAT_00007214,*args);\n      if (result == 0) {\n        FUN_00002a88(paramAndArg[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*args);\n      }\n    }\n    else {\n      (*commandFunction)(quoteCount,args);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "parse_and_execute_command_00002b10",
                "param_2": "command",
                "iVar1": "result",
                "pbVar2": "nextChar",
                "local_48": "paramAndArg",
                "local_3c": "commandFunction",
                "local_38": "args",
                "local_34": "argCount",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentArg",
                "local_24": "currentArgPtrs",
                "local_20": "argIndex",
                "local_1c": "backslashCount",
                "local_18": "quoteCount",
                "local_14": "currentCharPtr"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "extract_and_modify_00002d94",
            "code": "\nuint extractAndModify_00002d94(undefined *buffer,int bufferLength)\n\n{\n  int inputChar;\n  byte byteValue;\n  bool isFirstChar;\n  undefined *currentChar;\n  \n  currentChar = buffer;\n  while( true ) {\n    if (bufferLength + -1 <= (int)currentChar - (int)buffer) {\n      return 0xffffffff;\n    }\n    inputChar = FUN_00004418();\n    if (inputChar < 0) break;\n    if ((inputChar == 0xd) || (inputChar == 10)) {\n      *currentChar = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      isFirstChar = currentChar == buffer;\n      if (isFirstChar) {\n        buffer = (undefined *)0x1;\n      }\n      byteValue = (byte)buffer;\n      if (!isFirstChar) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((inputChar == 8) || (inputChar == 0x7f)) {\n      if (currentChar != buffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputChar;\n      FUN_00002a00(inputChar);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "extract_and_modify_00002d94",
                "param_1": "buffer",
                "param_2": "bufferLength",
                "iVar1": "inputChar",
                "bVar2": "byteValue",
                "bVar3": "isFirstChar",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_system_00002e48",
            "code": "\nvoid initializeSystem_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relocationTable[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_system_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_data_00002e6c",
            "code": "\nvoid processData_00002e6c(undefined4 inputParam,undefined4 dataParam,undefined4 controlParam)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(dataParam,controlParam);\n    if (result == 0) {\n      FUN_00002b10(inputParam,dataParam);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_data_00002e6c",
                "param_1": "inputParam",
                "param_2": "dataParam",
                "param_3": "controlParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "initialize_application_00002e9c",
            "code": "\nundefined4 initializeApplication_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "initialize_application_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_00002eb4",
            "code": "\nundefined4 initialize_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceAddress)\n\n{\n  undefined4 deviceInfo;\n  undefined4 deviceType;\n  undefined buffer [8];\n  uint bytesRead;\n  \n  bytesRead = FUN_00003d64(deviceAddress,buffer);\n  if ((int)bytesRead < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceType = *(undefined4 *)(deviceAddress + 8);\n    deviceInfo = FUN_000039e8(*(undefined *)(*(int *)(deviceAddress + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceType,deviceInfo);\n    FUN_00003694(buffer,bytesRead & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceAddress",
                "uVar1": "deviceInfo",
                "uVar2": "deviceType",
                "auStack_1c": "buffer",
                "local_14": "bytesRead"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_and_process_data_00002f30",
            "code": "\nvoid iterateAndProcessData_00002f30(void)\n\n{\n  int counter;\n  undefined4 *dataPtr;\n  \n  counter = 0;\n  for (dataPtr = DAT_1fff0db0; dataPtr != (undefined4 *)0x0; dataPtr = (undefined4 *)*dataPtr) {\n    FUN_00002ecc(counter,dataPtr);\n    FUN_00004db8(&DAT_00007380);\n    counter = counter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_and_process_data_00002f30",
                "local_10": "counter",
                "local_c": "dataPtr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceClass = FUN_000039e8(*(undefined *)(deviceList[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceClass,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_command_00002fe0",
            "code": "\nvoid processCommand_00002fe0(int argc,undefined4 *argv)\n\n{\n  int status;\n  undefined4 deviceId;\n  \n  if (argc < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*argv,argv[1]);\n  }\n  else {\n    status = FUN_00004e52(argv[2],&DAT_000073d4);\n    if (status == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceId = FUN_00004042(argv[2]);\n      status = FUN_00003d24(deviceId);\n      if (status == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceId,status);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_command_00002fe0",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "status",
                "uVar2": "deviceId"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 deviceValue;\n  undefined2 deviceValues [4];\n  uint numValues;\n  int device;\n  undefined4 deviceId;\n  int i;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = FUN_00004042(argv[2]);\n    device = FUN_00003d24(deviceId);\n    if (device == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(deviceValues,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (i = 0; i < (int)numValues; i = i + 1) {\n        deviceValue = FUN_00004042(argv[i + 3]);\n        deviceValues[i] = deviceValue;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(device + 8));\n      FUN_00003694(deviceValues,numValues & 0xff);\n      numValues = FUN_00003d94(device,deviceValues);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "deviceValue",
                "auStack_20": "deviceValues",
                "local_18": "numValues",
                "local_14": "device",
                "local_10": "deviceId",
                "local_c": "i"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "check_input_and_perform_action_0000316c",
            "code": "\nundefined4 checkInputAndPerformAction_0000316c(int input,undefined4 *arguments)\n\n{\n  int result;\n  \n  if (input < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(arguments[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(input,arguments);\n    }\n    else {\n      result = FUN_00004e52(arguments[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(input,arguments);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "check_input_and_perform_action_0000316c",
                "param_1": "input",
                "param_2": "arguments",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_bell_000031e0",
            "code": "\nvoid ringAlarmBell_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_bell_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)Elf32_Rel_ARRAY_1fff0200 + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_information_0000328c",
            "code": "\nundefined4 extract_information_0000328c(undefined4 *input_array,int *output_array)\n\n{\n  int result;\n  int index;\n  short value;\n  \n  value = FUN_00004f84(*input_array,&index,10);\n  output_array[5] = value + -0x76c;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[4] = value + -1;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[3] = (int)value;\n  value = FUN_00004f84(input_array[1],&index,10);\n  output_array[2] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[1] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  *output_array = (int)value;\n  result = FUN_000031fc(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = result;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_information_0000328c",
                "param_1": "input_array",
                "param_2": "output_array",
                "iVar1": "result",
                "local_10": "index",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",dateTime[5] + 0x76c,dateTime[4] + 1,dateTime[3],\n               dateTime[2],dateTime[1],*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_status_000033c0",
            "code": "\nbool checkAlarmStatus_000033c0(void)\n\n{\n  int result;\n  undefined alarmData [36];\n  \n  result = FUN_00002690(alarmData);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(alarmData);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_status_000033c0",
                "auStack_2c": "alarmData",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined stackBuffer [36];\n  \n  result = FUN_0000328c(input,stackBuffer);\n  if (result == 0) {\n    result = FUN_00002654(stackBuffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "stackBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_system_time_00003444",
            "code": "\nbool getSystemTime_00003444(void)\n\n{\n  int errorCode;\n  undefined timeBuffer [36];\n  \n  errorCode = FUN_00002624(timeBuffer);\n  if (errorCode != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(timeBuffer);\n  }\n  return errorCode != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_system_time_00003444",
                "iVar1": "errorCode",
                "auStack_2c": "timeBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_00003478",
            "code": "\nundefined4 setTime_00003478(undefined4 input)\n\n{\n  int result;\n  undefined4 isError;\n  undefined dataBuffer [36];\n  \n  result = FUN_0000328c(input,dataBuffer);\n  if (result == 0) {\n    result = FUN_00002600(dataBuffer);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      isError = 1;\n    }\n    else {\n      isError = 0;\n    }\n  }\n  else {\n    isError = 1;\n  }\n  return isError;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_00003478",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "isError",
                "auStack_2c": "dataBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_rtc_usage_000034c0",
            "code": "\nundefined4 printRTCUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_rtc_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "execute_command_00003524",
            "code": "\nundefined4 executeCommand_00003524(int commandCode,int commandData)\n\n{\n  int result;\n  undefined4 success;\n  \n  if (commandCode < 2) {\n    FUN_000034c0();\n    success = 1;\n  }\n  else {\n    result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"poweron\",7);\n    if (result == 0) {\n      FUN_000026d8();\n    }\n    else {\n      result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"poweroff\",8);\n      if (result == 0) {\n        FUN_000026e4();\n      }\n      else {\n        result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"clearalarm\",8);\n        if (result == 0) {\n          FUN_000026c0();\n        }\n        else {\n          result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"getalarm\",8);\n          if (result == 0) {\n            FUN_000033c0();\n          }\n          else {\n            result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"setalarm\",8);\n            if ((result == 0) && (commandCode == 4)) {\n              FUN_000033f4(commandData + 8);\n            }\n            else {\n              result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"gettime\",7);\n              if (result == 0) {\n                FUN_00003444();\n              }\n              else {\n                result = FUN_00004e66(*(undefined4 *)(commandData + 4),\"settime\",7);\n                if ((result != 0) || (commandCode != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandData + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(commandData + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    success = 0;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_00003524": "execute_command_00003524",
                "param_1": "commandCode",
                "param_2": "commandData",
                "iVar1": "result",
                "uVar2": "success"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "initialize_system_00003688",
            "code": "\nvoid initialize_system_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "initialize_system_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObjectAddress,byte numBytes)\n\n{\n  undefined4 dataType;\n  char flag;\n  uint bitMask;\n  bool isBitSet;\n  undefined tempStack [8];\n  int stackIndex;\n  char charValue;\n  byte byteIndex;\n  \n  if ((dataObjectAddress == 0) || (3 < numBytes)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (byteIndex = 0; byteIndex < numBytes; byteIndex = byteIndex + 1) {\n      if (*(byte *)(dataObjectAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObjectAddress + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        flag = (char)bitMask;\n        if (!isBitSet) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        charValue = '\\0';\n      }\n      else {\nLAB_000036ee:\n        charValue = FUN_00003918((int)*(char *)(dataObjectAddress + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (numBytes < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",byteIndex);\n      }\n      if (charValue == '\\0') {\n        if (*(char *)(dataObjectAddress + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataObjectAddress + (uint)byteIndex * 2));\n        }\n        else if ((*(char *)(dataObjectAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObjectAddress + 7),4)) &&\n                (*(char *)(dataObjectAddress + 7) < '\\0')) {\n          stackIndex = FUN_00003e9e(tempStack,(int)*(short *)(dataObjectAddress + (uint)byteIndex * 2),\n                                  (int)*(char *)(dataObjectAddress + 7));\n          tempStack[stackIndex] = 0;\n          FUN_00004c84(&DAT_000077dc,tempStack);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataObjectAddress + (uint)byteIndex * 2),\n                       (int)*(char *)(dataObjectAddress + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataObjectAddress + (uint)byteIndex * 2),charValue);\n      }\n      dataType = FUN_00003810(*(undefined *)(dataObjectAddress + 6));\n      FUN_00004c84(&DAT_000077e8,dataType);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObjectAddress",
                "param_2": "numBytes",
                "uVar1": "dataType",
                "cVar2": "flag",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "tempStack",
                "local_10": "stackIndex",
                "local_a": "charValue",
                "local_9": "byteIndex"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_location_00003810",
            "code": "\nundefined * getMemoryLocation_00003810(undefined input)\n\n{\n  undefined *memoryLocation;\n  \n  switch(input) {\n  case 2:\n    memoryLocation = &DAT_000077ec;\n    break;\n  case 3:\n    memoryLocation = &DAT_000077f0;\n    break;\n  case 4:\n    memoryLocation = &DAT_000077f4;\n    break;\n  case 5:\n    memoryLocation = &DAT_000077f8;\n    break;\n  case 6:\n    memoryLocation = &DAT_000077fc;\n    break;\n  case 7:\n    memoryLocation = (undefined *)0x7800;\n    break;\n  case 8:\n    memoryLocation = &DAT_00007804;\n    break;\n  case 9:\n    memoryLocation = &DAT_00007808;\n    break;\n  case 10:\n    memoryLocation = &DAT_0000780c;\n    break;\n  case 0xb:\n    memoryLocation = &DAT_00007810;\n    break;\n  case 0xc:\n    memoryLocation = &DAT_00007814;\n    break;\n  case 0xd:\n    memoryLocation = &DAT_00007818;\n    break;\n  case 0xe:\n    memoryLocation = &DAT_0000781c;\n    break;\n  case 0xf:\n    memoryLocation = &DAT_00007820;\n    break;\n  case 0x10:\n    memoryLocation = &DAT_00007824;\n    break;\n  case 0x11:\n    memoryLocation = &DAT_0000782c;\n    break;\n  default:\n    memoryLocation = &DAT_00007834;\n    break;\n  case 0x13:\n    memoryLocation = &DAT_00007830;\n    break;\n  case 0x15:\n    memoryLocation = &DAT_00007828;\n  }\n  return memoryLocation;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_location_00003810",
                "param_1": "input",
                "puVar1": "memoryLocation"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_character_value_00003918",
            "code": "\nundefined4 getCharacterValue_00003918(undefined character)\n\n{\n  undefined4 characterValue;\n  \n  switch(character) {\n  case 2:\n    characterValue = 0x68;\n    break;\n  case 3:\n    characterValue = 0x6b;\n    break;\n  case 6:\n    characterValue = 0x4d;\n    break;\n  case 9:\n    characterValue = 0x47;\n    break;\n  case 0xc:\n    characterValue = 0x54;\n    break;\n  case 0xf:\n    characterValue = 0x50;\n    break;\n  case 0xf1:\n    characterValue = 0x66;\n    break;\n  default:\n    characterValue = 0;\n    break;\n  case 0xf4:\n    characterValue = 0x70;\n    break;\n  case 0xf7:\n    characterValue = 0x6e;\n    break;\n  case 0xfa:\n    characterValue = 0x75;\n    break;\n  case 0xfd:\n    characterValue = 0x6d;\n  }\n  return characterValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_character_value_00003918",
                "param_1": "character",
                "uVar1": "characterValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_sensor_or_action_name_000039e8",
            "code": "\nchar * getSensorOrActionName_000039e8(char character)\n\n{\n  char *newName;\n  \n  switch(character) {\n  case '\\0':\n    newName = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    newName = \"ACT_ANY\";\n    break;\n  case 'B':\n    newName = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    newName = \"ACT_SERVO\";\n    break;\n  case 'D':\n    newName = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    newName = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    newName = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    newName = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    newName = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    newName = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    newName = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    newName = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    newName = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    newName = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    newName = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    newName = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    newName = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    newName = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    newName = \"SENSE_UV\";\n    break;\n  case -0x74:\n    newName = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    newName = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    newName = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    newName = \"SENSE_CO2\";\n    break;\n  default:\n    if (character == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    newName = \"CLASS_UNKNOWN\";\n  }\n  return newName;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_sensor_or_action_name_000039e8",
                "param_1": "character",
                "pcVar1": "newName"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_in_list_00003d24",
            "code": "\nundefined4 * find_element_in_list_00003d24(int list_length)\n\n{\n  int element_count;\n  undefined4 *current_element;\n  \n  element_count = 0;\n  for (current_element = DAT_1fff0db0; (element_count < list_length && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    element_count = element_count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_in_list_00003d24",
                "param_1": "list_length",
                "local_10": "element_count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_or_error_00003d64",
            "code": "\nundefined4 execute_or_error_00003d64(int function_pointer,undefined4 argument)\n\n{\n  undefined4 result;\n  \n  if (function_pointer == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (***(code ***)(function_pointer + 0xc))(*(undefined4 *)(function_pointer + 4),argument);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_or_error_00003d64",
                "param_1": "function_pointer",
                "param_2": "argument",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int functionPointer,undefined4 inputParameter)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),inputParameter);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "functionPointer",
                "param_2": "inputParameter",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "get_digit_count_00003dc4",
            "code": "\nint get_digit_count_00003dc4(int input_offset,uint input_value)\n\n{\n  uint remainder;\n  char *output_str;\n  uint multiplier;\n  int digit_count;\n  \n  digit_count = 1;\n  if (input_value < 1000000000) {\n    for (multiplier = 10; multiplier <= input_value; multiplier = multiplier * 10) {\n      digit_count = digit_count + 1;\n    }\n  }\n  else {\n    digit_count = 10;\n  }\n  if (input_offset != 0) {\n    output_str = (char *)(digit_count + input_offset);\n    remainder = input_value;\n    do {\n      output_str = output_str + -1;\n      *output_str = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digit_count;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "get_digit_count_00003dc4",
                "param_1": "input_offset",
                "param_2": "input_value",
                "local_20": "remainder",
                "local_14": "output_str",
                "local_10": "multiplier",
                "local_c": "digit_count"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "calculate_result_00003e58",
            "code": "\nint calculate_result_00003e58(undefined *input_array,int input_length)\n\n{\n  int result;\n  int absolute_value;\n  undefined *updated_array;\n  \n  absolute_value = input_length;\n  updated_array = input_array;\n  if (-(input_length >> 0x1f) != 0) {\n    if (input_array != (undefined *)0x0) {\n      updated_array = input_array + 1;\n      *input_array = 0x2d;\n    }\n    absolute_value = -input_length;\n  }\n  result = FUN_00003dc4(updated_array,absolute_value);\n  return -(input_length >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "calculate_result_00003e58",
                "param_1": "input_array",
                "param_2": "input_length",
                "iVar1": "result",
                "local_18": "absolute_value",
                "local_14": "updated_array"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 input,short value,undefined4 config)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(input,(int)value,config);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "input",
                "param_2": "value",
                "param_3": "config",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "process_number_00003ec4",
            "code": "\nint processNumber_00003ec4(undefined *outputString,uint inputNumber,int numDigits)\n\n{\n  int result;\n  undefined4 decimalPart;\n  uint quotient;\n  int remainder;\n  int outputLength;\n  \n  if (numDigits + 7 < 0 != SCARRY4(numDigits,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  outputLength = 0;\n  if (numDigits == 0) {\n    outputLength = FUN_00003e58(outputString,inputNumber);\n  }\n  else if (numDigits < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + numDigits * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + numDigits * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputString != (undefined *)0x0) {\n        *outputString = 0x2d;\n      }\n      outputLength = 1;\n    }\n    if (outputString == (undefined *)0x0) {\n      result = FUN_00003e58(0,quotient);\n      outputLength = result + 1 + outputLength;\n    }\n    else {\n      result = FUN_00003e58(outputString + outputLength,quotient);\n      result = outputLength + result;\n      outputLength = result + 1;\n      outputString[result] = 0x2e;\n      decimalPart = FUN_00003e58(outputString + outputLength,remainder);\n      FUN_00003ff4(outputString + outputLength,decimalPart,-numDigits,0x30);\n    }\n    outputLength = -numDigits + outputLength;\n  }\n  else {\n    outputLength = FUN_00003e58(outputString,inputNumber);\n    if (outputString != (undefined *)0x0) {\n      FUN_00004622(outputString + outputLength,0x30,numDigits);\n    }\n    outputLength = numDigits + outputLength;\n  }\n  return outputLength;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "process_number_00003ec4",
                "param_1": "outputString",
                "param_2": "inputNumber",
                "param_3": "numDigits",
                "iVar1": "result",
                "uVar2": "decimalPart",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "outputLength"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_and_update_value_00003ff4",
            "code": "\nuint calculateAndUpdateValue_00003ff4(int inputValue,uint initialValue,uint targetValue,undefined undecidedValue)\n\n{\n  uint updatedValue;\n  \n  updatedValue = initialValue;\n  if ((initialValue < targetValue) && (updatedValue = targetValue, inputValue != 0)) {\n    FUN_000045ee((targetValue - initialValue) + inputValue,inputValue,initialValue);\n    FUN_00004622(inputValue,undecidedValue,targetValue - initialValue);\n  }\n  return updatedValue;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_and_update_value_00003ff4",
                "param_1": "inputValue",
                "param_2": "initialValue",
                "param_3": "targetValue",
                "param_4": "undecidedValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "initialize_values_00004042",
            "code": "\nvoid initializeValues_00004042(undefined4 inputParameter)\n\n{\n  FUN_00004f84(inputParameter,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "initialize_values_00004042",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *dataPtr,int *infoPtr)\n\n{\n  int tempVar1;\n  int *tempVar2;\n  uint ushortData;\n  ushort flags;\n  int tempVar3;\n  code *functionPtr;\n  int tempVar4;\n  uint tempVar5;\n  bool isZero;\n  \n  flags = *(ushort *)(infoPtr + 3);\n  ushortData = (uint)flags;\n  if ((int)(ushortData << 0x1c) < 0) {\n    tempVar1 = infoPtr[4];\n    if (tempVar1 != 0) {\n      tempVar3 = ushortData << 0x1e;\n      isZero = tempVar3 == 0;\n      tempVar4 = *infoPtr;\n      if (isZero) {\n        tempVar3 = infoPtr[5];\n      }\n      *infoPtr = tempVar1;\n      if (!isZero) {\n        tempVar3 = 0;\n      }\n      infoPtr[2] = tempVar3;\n      for (tempVar4 = tempVar4 - tempVar1; 0 < tempVar4; tempVar4 = tempVar4 - tempVar3) {\n        tempVar3 = (*(code *)infoPtr[10])(dataPtr,infoPtr[8],tempVar1,tempVar4);\n        if (tempVar3 < 1) {\n          *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        tempVar1 = tempVar1 + tempVar3;\n      }\n    }\n  }\n  else {\n    if ((infoPtr[1] < 1) && (infoPtr[0x10] < 1)) {\n      return 0;\n    }\n    functionPtr = (code *)infoPtr[0xb];\n    if (functionPtr == (code *)0x0) {\n      return 0;\n    }\n    tempVar5 = *dataPtr;\n    *dataPtr = 0;\n    if ((flags & 0x1000) == 0) {\n      tempVar1 = (*functionPtr)(dataPtr,infoPtr[8],ushortData & 0x1000,1);\n      if ((tempVar1 == -1) && (ushortData = *dataPtr, ushortData != 0)) {\n        if ((ushortData == 0x1d) || (ushortData == 0x16)) {\n          *dataPtr = tempVar5;\n          return 0;\n        }\n        flags = *(ushort *)(infoPtr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      tempVar1 = infoPtr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(infoPtr + 3) << 0x1d) < 0) &&\n       (tempVar1 = tempVar1 - infoPtr[1], infoPtr[0xd] != 0)) {\n      tempVar1 = tempVar1 - infoPtr[0x10];\n    }\n    tempVar1 = (*(code *)infoPtr[0xb])(dataPtr,infoPtr[8],tempVar1,0);\n    flags = *(ushort *)(infoPtr + 3);\n    if ((tempVar1 == -1) &&\n       ((0x1d < *dataPtr || (-1 < (int)((0x20400001U >> (*dataPtr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(infoPtr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    infoPtr[1] = 0;\n    *infoPtr = infoPtr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((tempVar1 != -1 || (*dataPtr == 0)))) {\n      infoPtr[0x15] = tempVar1;\n    }\n    tempVar2 = (int *)infoPtr[0xd];\n    *dataPtr = tempVar5;\n    if (tempVar2 != (int *)0x0) {\n      if (tempVar2 != infoPtr + 0x11) {\n        FUN_00004b34(dataPtr);\n      }\n      infoPtr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "dataPtr",
                "param_2": "infoPtr",
                "iVar1": "tempVar1",
                "piVar2": "tempVar2",
                "uVar3": "ushortData",
                "uVar4": "flags",
                "iVar5": "tempVar3",
                "pcVar6": "functionPtr",
                "iVar7": "tempVar4",
                "uVar8": "tempVar5",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int dataPointer,undefined4 *paramPointer)\n\n{\n  undefined4 result;\n  \n  if (paramPointer[4] != 0) {\n    if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (paramPointer == &DAT_000079b8) {\n      paramPointer = *(undefined4 **)(dataPointer + 4);\n    }\n    else if (paramPointer == (undefined4 *)&DAT_000079d8) {\n      paramPointer = *(undefined4 **)(dataPointer + 8);\n    }\n    else if (paramPointer == (undefined4 *)&DAT_00007998) {\n      paramPointer = *(undefined4 **)(dataPointer + 0xc);\n    }\n    if (*(short *)(paramPointer + 3) != 0) {\n      if ((-1 < (int)(paramPointer[0x19] << 0x1f)) && (-1 < (int)*(short *)(paramPointer + 3) << 0x16)) {\n        FUNC_000045e8(paramPointer[0x16]);\n      }\n      result = FUN_0000404c(dataPointer,paramPointer);\n      if ((int)(paramPointer[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(paramPointer + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(paramPointer[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "dataPointer",
                "param_2": "paramPointer",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocations_000041d0",
            "code": "\nuint process_relocations_000041d0(int base_address,undefined4 offset,undefined4 size)\n\n{\n  uint result;\n  int count;\n  dword *rel_array;\n  int rel_entry;\n  uint total_result;\n  int remaining_count;\n  undefined4 *symbol_table;\n  \n  if (base_address == 0) {\n    symbol_table = &DAT_000079f8;\n    rel_array = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    total_result = 0;\n    do {\n      remaining_count = rel_array[1];\n      rel_entry = rel_array[2];\n      while (remaining_count = remaining_count + -1, -1 < remaining_count) {\n        if ((1 < *(ushort *)(rel_entry + 0xc)) && (count = *(short *)(rel_entry + 0xe) + 1, count != 0)) {\n          result = FUN_00004158(0x1fff0284,rel_entry,size,count,symbol_table);\n          total_result = total_result | result;\n        }\n        rel_entry = rel_entry + 0x68;\n      }\n      rel_array = (dword *)*rel_array;\n    } while (rel_array != (dword *)0x0);\n    return total_result;\n  }\n  total_result = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,base_address);\n  return total_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocations_000041d0",
                "param_1": "base_address",
                "param_2": "offset",
                "param_3": "size",
                "uVar1": "result",
                "iVar2": "count",
                "pdVar3": "rel_array",
                "iVar4": "rel_entry",
                "uVar5": "total_result",
                "iVar6": "remaining_count",
                "puVar7": "symbol_table"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_param_000041f4",
            "code": "\nvoid initializeParam_000041f4(undefined4 *paramArray,undefined2 value1,undefined2 value2)\n\n{\n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[4] = 0;\n  paramArray[5] = 0;\n  paramArray[2] = 0;\n  *(undefined2 *)(paramArray + 3) = value1;\n  paramArray[25] = 0;\n  *(undefined2 *)((int)paramArray + 0xe) = value2;\n  paramArray[6] = 0;\n  FUN_00004622(paramArray + 0x17,0,8);\n  paramArray[9] = 0x4dc9;\n  paramArray[10] = 0x4def;\n  paramArray[0xb] = 0x4e27;\n  paramArray[8] = paramArray;\n  paramArray[0xc] = &constantLabel;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_param_000041f4",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "paramArray[1]",
                "param_1[4]": "paramArray[4]",
                "param_1[5]": "paramArray[5]",
                "param_1[2]": "paramArray[2]",
                "param_1[0x19]": "paramArray[25]",
                "param_1[6]": "paramArray[6]",
                "param_1[8]": "paramArray[8]",
                "&LAB_00004e4a_1": "&constantLabel"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_array_00004248",
            "code": "\nundefined4 * initializeArray_00004248(undefined4 arrayPointer,int arraySize)\n\n{\n  undefined4 *newArrayPointer;\n  int offset;\n  \n  offset = (arraySize + -1) * 0x68;\n  newArrayPointer = (undefined4 *)FUN_00004bd0(arrayPointer,offset + 0x74);\n  if (newArrayPointer != (undefined4 *)0x0) {\n    *newArrayPointer = 0;\n    newArrayPointer[1] = arraySize;\n    newArrayPointer[2] = newArrayPointer + 3;\n    FUN_00004622(newArrayPointer + 3,0,offset + 0x68);\n  }\n  return newArrayPointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_array_00004248",
                "param_1": "arrayPointer",
                "param_2": "arraySize",
                "puVar1": "newArrayPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_000042a4",
            "code": "\nvoid initializeData_000042a4(int dataPointer)\n\n{\n  undefined4 initialValue;\n  \n  FUN_0000428c();\n  if (*(int *)(dataPointer + 0x18) == 0) {\n    *(undefined4 *)(dataPointer + 0x48) = 0;\n    *(undefined4 *)(dataPointer + 0x4c) = 0;\n    *(undefined4 *)(dataPointer + 0x50) = 0;\n    initialValue = 0x1fff0284;\n    *(undefined **)(dataPointer + 0x28) = &DAT_0000423d;\n    if (dataPointer == 0x1fff0284) {\n      initialValue = 1;\n    }\n    if (dataPointer == 0x1fff0284) {\n      *(undefined4 *)(dataPointer + 0x18) = initialValue;\n    }\n    initialValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 4) = initialValue;\n    initialValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 8) = initialValue;\n    initialValue = FUN_00004314(dataPointer);\n    *(undefined4 *)(dataPointer + 0xc) = initialValue;\n    FUN_000041f4(*(undefined4 *)(dataPointer + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(dataPointer + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(dataPointer + 0xc),0x12,2);\n    *(undefined4 *)(dataPointer + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "param_1": "dataPointer",
                "uVar1": "initialValue"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "process_relocation_table_00004314",
            "code": "\nundefined4 * processRelocationTable_00004314(undefined4 *resultArray)\n\n{\n  dword temp;\n  int entryCount;\n  undefined4 *currentEntry;\n  dword *currentRelocation;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  currentRelocation = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    entryCount = currentRelocation[1];\n    currentEntry = (undefined4 *)currentRelocation[2];\n    while (entryCount = entryCount + -1, -1 < entryCount) {\n      if (*(short *)(currentEntry + 3) == 0) {\n        currentEntry[3] = 0xffff0001;\n        currentEntry[0x19] = 0;\n        FUNC_000045e4(currentEntry + 0x16);\n        FUN_00004280();\n        currentEntry[1] = 0;\n        currentEntry[2] = 0;\n        currentEntry[4] = 0;\n        currentEntry[5] = 0;\n        *currentEntry = 0;\n        currentEntry[6] = 0;\n        FUN_00004622(currentEntry + 0x17,0,8);\n        currentEntry[0xd] = 0;\n        currentEntry[0xe] = 0;\n        currentEntry[0x12] = 0;\n        currentEntry[0x13] = 0;\n        return currentEntry;\n      }\n      currentEntry = currentEntry + 0x1a;\n    }\n    if (*currentRelocation == 0) {\n      temp = FUN_00004248(resultArray,4);\n      *currentRelocation = temp;\n      if (temp == 0) {\n        FUN_00004280();\n        *resultArray = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    currentRelocation = (dword *)*currentRelocation;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "process_relocation_table_00004314",
                "param_1": "resultArray",
                "dVar1": "temp",
                "iVar2": "entryCount",
                "puVar3": "currentEntry",
                "pdVar4": "currentRelocation"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint process_data_000043a0(int data_length,code *callback_function)\n\n{\n  uint uVar1;\n  int *data_ptr;\n  int nested_data_ptr;\n  uint result;\n  int loop_counter;\n  \n  data_ptr = (int *)(data_length + 0x48);\n  result = 0;\n  do {\n    loop_counter = data_ptr[1];\n    nested_data_ptr = data_ptr[2];\n    while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n      if ((1 < *(ushort *)(nested_data_ptr + 0xc)) && (*(short *)(nested_data_ptr + 0xe) != -1)) {\n        uVar1 = (*callback_function)(nested_data_ptr);\n        result = result | uVar1;\n      }\n      nested_data_ptr = nested_data_ptr + 0x68;\n    }\n    data_ptr = (int *)*data_ptr;\n  } while (data_ptr != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "data_length",
                "param_2": "callback_function",
                "piVar2": "data_ptr",
                "iVar3": "nested_data_ptr",
                "uVar4": "result",
                "iVar5": "loop_counter"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "decode_and_process_data_00004418",
            "code": "\nuint decode_and_process_data_00004418(void)\n\n{\n  dword relocation_offset;\n  uint result;\n  byte **data_ptr;\n  byte *element_ptr;\n  \n  relocation_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(byte ***)(relocation_offset + 4);\n  if ((relocation_offset != 0) && (*(int *)(relocation_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_ptr == (byte **)&DAT_000079b8) {\n    data_ptr = *(byte ***)(relocation_offset + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_000079d8) {\n    data_ptr = *(byte ***)(relocation_offset + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_00007998) {\n    data_ptr = *(byte ***)(relocation_offset + 0xc);\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  element_ptr = data_ptr[1];\n  data_ptr[1] = element_ptr + -1;\n  if ((int)(element_ptr + -1) < 0) {\n    result = FUN_00005e10(relocation_offset,data_ptr);\n  }\n  else {\n    element_ptr = *data_ptr;\n    *data_ptr = element_ptr + 1;\n    result = (uint)*element_ptr;\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "decode_and_process_data_00004418",
                "dVar1": "relocation_offset",
                "uVar2": "result",
                "ppbVar3": "data_ptr",
                "pbVar4": "element_ptr"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateComponents_0000443c(undefined4 *dateParams,uint *dateComponents)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined4 tempVar6;\n  undefined4 tempVar7;\n  uint tempVar8;\n  bool isNegative;\n  \n  tempVar6 = *dateParams;\n  tempVar7 = dateParams[1];\n  tempVar1 = FUN_00006974(tempVar6,tempVar7,0x15180,0);\n  tempVar3 = 0x15180;\n  FUN_00006974(tempVar6,tempVar7,0x15180,0);\n  isNegative = (int)tempVar3 < 0;\n  if (isNegative) {\n    tempVar3 = tempVar3 + 0x15180;\n  }\n  if (isNegative) {\n    tempVar2 = tempVar1 + 0xafa6b;\n  }\n  else {\n    tempVar2 = tempVar1 + 0xafa6c;\n  }\n  dateComponents[2] = tempVar3 / 0xe10;\n  dateComponents[1] = (tempVar3 % 0xe10) / 0x3c;\n  *dateComponents = (tempVar3 % 0xe10) % 0x3c;\n  dateComponents[6] = (tempVar2 + 3) % 7;\n  tempVar3 = tempVar2;\n  if ((int)tempVar2 < 0) {\n    tempVar3 = tempVar2 - 0x23ab0;\n  }\n  tempVar2 = (tempVar3 / 0x23ab1) * -0x23ab1 + tempVar2;\n  tempVar4 = ((tempVar2 / 0x8eac + tempVar2) - tempVar2 / 0x5b4) - tempVar2 / 0x23ab0;\n  tempVar5 = tempVar4 / 0x16d;\n  tempVar2 = (tempVar5 / 100 - tempVar4 / 0x5b4) + tempVar2 + tempVar5 * -0x16d;\n  tempVar8 = tempVar2 * 5 + 2;\n  tempVar4 = tempVar8 / 0x99;\n  if (tempVar8 < 0x5fa) {\n    tempVar1 = 2;\n  }\n  else {\n    tempVar1 = -10;\n  }\n  tempVar8 = tempVar4 + tempVar1;\n  tempVar1 = (tempVar3 / 0x23ab1) * 400 + tempVar5;\n  if (tempVar8 < 2) {\n    tempVar1 = tempVar1 + 1;\n  }\n  if (tempVar2 < 0x132) {\n    if (((tempVar5 & 3) == 0) && (tempVar5 != (tempVar5 / 100) * 100)) {\n      tempVar3 = 1;\n    }\n    else {\n      tempVar3 = (uint)(tempVar5 % 400 == 0);\n    }\n    tempVar3 = tempVar2 + 0x3b + tempVar3;\n  }\n  else {\n    tempVar3 = tempVar2 - 0x132;\n  }\n  dateComponents[7] = tempVar3;\n  dateComponents[3] = (tempVar2 + 1) - (tempVar4 * 0x99 + 2) / 5;\n  dateComponents[4] = tempVar8;\n  dateComponents[5] = tempVar1 - 0x76c;\n  dateComponents[8] = 0;\n  return dateComponents;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "dateParams",
                "param_2": "dateComponents",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_function_set_0000459c",
            "code": "\nvoid executeFunctionSet_0000459c(void)\n\n{\n  code **functionPointer;\n  int index;\n  \n  functionPointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  FUN_00000410();\n  functionPointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointer)();\n    functionPointer = functionPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_function_set_0000459c",
                "ppcVar1": "functionPointer",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_reversed_subarray_000045ee",
            "code": "\nvoid copyReversedSubarray_000045ee(undefined *array1,undefined *array2,int length)\n\n{\n  undefined *dest;\n  undefined *src;\n  \n  src = array2 + length;\n  if ((array2 < array1) && (array1 < src)) {\n    dest = array1 + length;\n    while (dest != array1) {\n      src = src + -1;\n      dest = dest + -1;\n      *dest = *src;\n    }\n  }\n  else {\n    array1 = array1 + -1;\n    for (; array2 != src; array2 = array2 + 1) {\n      array1 = array1 + 1;\n      *array1 = *array2;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_reversed_subarray_000045ee",
                "param_1": "array1",
                "param_2": "array2",
                "param_3": "length",
                "puVar1": "dest",
                "puVar2": "src"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_array_with_value_00004622",
            "code": "\nvoid fillArrayWithValue_00004622(undefined *array,undefined value,int size)\n\n{\n  undefined *endPointer;\n  \n  endPointer = array + size;\n  for (; array != endPointer; array = array + 1) {\n    *array = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_array_with_value_00004622",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *dateTimeArray,uint daysToAdd,undefined4 stackParam)\n\n{\n  int monthDays;\n  uint daysRemaining;\n  uint leapYearCount;\n  int daysInMonth;\n  bool isNegative;\n  uint *tempArray;\n  uint currentDay;\n  undefined4 tempParam;\n  \n  tempArray = dateTimeArray;\n  currentDay = daysToAdd;\n  tempParam = stackParam;\n  if (0x3b < *dateTimeArray) {\n    FUN_00005584(&tempArray,*dateTimeArray,0x3c);\n    daysRemaining = dateTimeArray[1] + (int)tempArray;\n    dateTimeArray[1] = daysRemaining;\n    if ((int)currentDay < 0) {\n      daysRemaining = daysRemaining - 1;\n      *dateTimeArray = currentDay + 0x3c;\n    }\n    else {\n      *dateTimeArray = currentDay;\n    }\n    if ((int)currentDay < 0) {\n      dateTimeArray[1] = daysRemaining;\n    }\n  }\n  if (0x3b < dateTimeArray[1]) {\n    FUN_00005584(&tempArray,dateTimeArray[1],0x3c);\n    isNegative = (int)currentDay < 0;\n    leapYearCount = dateTimeArray[2] + (int)tempArray;\n    dateTimeArray[2] = leapYearCount;\n    daysRemaining = currentDay;\n    if (isNegative) {\n      daysRemaining = currentDay + 0x3c;\n      leapYearCount = leapYearCount - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[1] = daysRemaining;\n    }\n    if (isNegative) {\n      dateTimeArray[1] = daysRemaining;\n    }\n    if (isNegative) {\n      dateTimeArray[2] = leapYearCount;\n    }\n  }\n  if (0x17 < dateTimeArray[2]) {\n    FUN_00005584(&tempArray,dateTimeArray[2],0x18);\n    isNegative = (int)currentDay < 0;\n    leapYearCount = dateTimeArray[3] + (int)tempArray;\n    dateTimeArray[3] = leapYearCount;\n    daysRemaining = currentDay;\n    if (isNegative) {\n      daysRemaining = currentDay + 0x18;\n      leapYearCount = leapYearCount - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[2] = daysRemaining;\n    }\n    if (isNegative) {\n      dateTimeArray[2] = daysRemaining;\n    }\n    if (isNegative) {\n      dateTimeArray[3] = leapYearCount;\n    }\n  }\n  if (0xb < dateTimeArray[4]) {\n    FUN_00005584(&tempArray,dateTimeArray[4],0xc);\n    isNegative = (int)currentDay < 0;\n    daysRemaining = dateTimeArray[5] + (int)tempArray;\n    dateTimeArray[5] = daysRemaining;\n    if (isNegative) {\n      currentDay = currentDay + 0xc;\n      daysRemaining = daysRemaining - 1;\n    }\n    if (!isNegative) {\n      dateTimeArray[4] = currentDay;\n    }\n    if (isNegative) {\n      dateTimeArray[4] = currentDay;\n    }\n    if (isNegative) {\n      dateTimeArray[5] = daysRemaining;\n    }\n  }\n  daysRemaining = dateTimeArray[5];\n  if ((daysRemaining & 3) == 0) {\n    if (daysRemaining == (daysRemaining / 100) * 100) {\n      if ((daysRemaining + 0x76c) % 400 == 0) {\n        daysInMonth = 0x1d;\n      }\n      else {\n        daysInMonth = 0x1c;\n      }\n    }\n    else {\n      daysInMonth = 0x1d;\n    }\n  }\n  else {\n    daysInMonth = 0x1c;\n  }\n  if ((int)dateTimeArray[3] < 1) {\n    while ((int)dateTimeArray[3] < 1) {\n      daysRemaining = dateTimeArray[4];\n      dateTimeArray[4] = daysRemaining - 1;\n      if (daysRemaining - 1 == 0xffffffff) {\n        leapYearCount = dateTimeArray[5];\n        daysRemaining = leapYearCount - 1;\n        dateTimeArray[4] = 0xb;\n        dateTimeArray[5] = daysRemaining;\n        if ((daysRemaining & 3) == 0) {\n          if (daysRemaining == (daysRemaining / 100) * 100) {\n            if ((leapYearCount + 0x76b) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n      monthDays = daysInMonth;\n      if (dateTimeArray[4] != 1) {\n        monthDays = (&DAT_000079fc)[dateTimeArray[4]];\n      }\n      dateTimeArray[3] = monthDays + dateTimeArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      daysRemaining = dateTimeArray[4];\n      monthDays = daysInMonth;\n      if (daysRemaining != 1) {\n        monthDays = (&DAT_000079fc)[daysRemaining];\n      }\n      if ((int)dateTimeArray[3] <= monthDays) break;\n      dateTimeArray[3] = dateTimeArray[3] - monthDays;\n      dateTimeArray[4] = daysRemaining + 1;\n      if (daysRemaining + 1 == 0xc) {\n        leapYearCount = dateTimeArray[5];\n        daysRemaining = leapYearCount + 1;\n        dateTimeArray[4] = 0;\n        dateTimeArray[5] = daysRemaining;\n        if ((daysRemaining & 3) == 0) {\n          if (daysRemaining % 100 == 0) {\n            if ((leapYearCount + 0x76d) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "dateTimeArray",
                "param_2": "daysToAdd",
                "param_3": "stackParam",
                "iVar1": "monthDays",
                "uVar2": "daysRemaining",
                "uVar3": "leapYearCount",
                "iVar4": "daysInMonth",
                "bVar5": "isNegative",
                "local_20": "tempArray",
                "local_1c": "currentDay",
                "uStack_18": "tempParam"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_difference_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateDifference_000047e4(int *dateComponents)\n\n{\n  longlong totalSeconds64;\n  longlong adjustedSeconds;\n  int *timeComponents;\n  uint year;\n  int daysOffset;\n  int daysDifference;\n  int totalDays;\n  uint daysInYear;\n  uint i;\n  uint startYear;\n  int extraLeapDays;\n  uint endYear;\n  uint isNegative;\n  uint monthsOffset;\n  uint totalSeconds;\n  bool bVar16;\n  \n  timeComponents = (int *)FUN_000056b0();\n  FUN_00004634(dateComponents);\n  endYear = dateComponents[5];\n  extraLeapDays = dateComponents[3] + -1 + *(int *)(&DAT_00007a2c + dateComponents[4] * 4);\n  if (((1 < dateComponents[4]) && ((endYear & 3) == 0)) &&\n     ((endYear != (endYear / 100) * 100 || (endYear + 0x76c == ((endYear + 0x76c) / 400) * 400)))) {\n    extraLeapDays = extraLeapDays + 1;\n  }\n  dateComponents[7] = extraLeapDays;\n  if (20000 < (int)&DAT_00002710 + endYear) {\n    totalDays = -1;\n    daysOffset = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)endYear < 0x47) {\n    if (endYear != 0x46) {\n      for (i = 0x45; (int)endYear < (int)i; i = i - 1) {\n        if ((i & 3) == 0) {\n          if (i == (i / 100) * 100) {\n            if ((i + 0x76c) % 400 == 0) {\n              totalDays = 0x16e;\n            }\n            else {\n              totalDays = 0x16d;\n            }\n          }\n          else {\n            totalDays = 0x16e;\n          }\n        }\n        else {\n          totalDays = 0x16d;\n        }\n        extraLeapDays = extraLeapDays - totalDays;\n      }\n      if ((i & 3) == 0) {\n        if (endYear == (endYear / 100) * 100) {\n          totalDays = 0x16d;\n          if ((endYear + 0x76c) % 400 == 0) {\n            totalDays = 0x16e;\n          }\n        }\n        else {\n          totalDays = 0x16e;\n        }\n      }\n      else {\n        totalDays = 0x16d;\n      }\n      extraLeapDays = extraLeapDays - totalDays;\n    }\n  }\n  else {\n    i = 0x46;\n    do {\n      if ((i & 3) == 0) {\n        if (i % 100 == 0) {\n          if ((i + 0x76c) % 400 == 0) {\n            totalDays = 0x16e;\n          }\n          else {\n            totalDays = 0x16d;\n          }\n        }\n        else {\n          totalDays = 0x16e;\n        }\n      }\n      else {\n        totalDays = 0x16d;\n      }\n      i = i + 1;\n      extraLeapDays = extraLeapDays + totalDays;\n    } while (endYear != i);\n  }\n  totalSeconds64 = (longlong)extraLeapDays * 0x15180 + (longlong)(dateComponents[2] * 0xe10 + dateComponents[1] * 0x3c + *dateComponents)\n  ;\n  totalSeconds = (uint)totalSeconds64;\n  totalDays = (int)((ulonglong)totalSeconds64 >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  i = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    endYear = timeComponents[10];\n    totalDays = (uint)totalSeconds64 + endYear;\n    daysOffset = (int)((ulonglong)totalSeconds64 >> 0x20) +\n            ((int)endYear >> 0x1f) + (uint)CARRY4((uint)totalSeconds64,endYear);\n  }\n  else {\n    monthsOffset = dateComponents[8];\n    isNegative = monthsOffset;\n    if (0 < (int)monthsOffset) {\n      isNegative = 1;\n    }\n    if ((timeComponents[1] == dateComponents[5] + 0x76c) || (daysOffset = FUN_00004f98(), daysOffset != 0)) {\n      startYear = timeComponents[0x14];\n      year = timeComponents[0x12];\n      daysInYear = timeComponents[10];\n      i = year - daysInYear;\n      daysOffset = (timeComponents[0x13] - ((int)daysInYear >> 0x1f)) - (uint)(year < daysInYear);\n      if (((int)((totalDays - daysOffset) - (uint)(totalSeconds < i)) < 0 ==\n           (SBORROW4(totalDays,daysOffset) != SBORROW4(totalDays - daysOffset,(uint)(totalSeconds < i)))) &&\n         (daysDifference = (timeComponents[0x13] - ((int)startYear >> 0x1f)) - (uint)(year < startYear),\n         bVar16 = totalSeconds < year - startYear,\n         (int)((totalDays - daysDifference) - (uint)bVar16) < 0 !=\n         (SBORROW4(totalDays,daysDifference) != SBORROW4(totalDays - daysDifference,(uint)bVar16)))) goto LAB_00004a88;\n      year = timeComponents[8] - startYear;\n      daysDifference = (timeComponents[9] - ((int)startYear >> 0x1f)) - (uint)((uint)timeComponents[8] < startYear);\n      if (*timeComponents != 0) {\n        if ((int)((totalDays - daysDifference) - (uint)(totalSeconds < year)) < 0 ==\n            (SBORROW4(totalDays,daysDifference) != SBORROW4(totalDays - daysDifference,(uint)(totalSeconds < year))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        i = 0;\n        if ((int)monthsOffset < 0) goto LAB_00004934;\nLAB_00004a14:\n        totalSeconds = isNegative ^ i;\n        isNegative = i;\n        if (totalSeconds == 1) {\n          if (i == 0) {\n            totalDays = startYear - daysInYear;\n          }\n          else {\n            totalDays = daysInYear - startYear;\n          }\n          daysOffset = dateComponents[3];\n          *dateComponents = *dateComponents + totalDays;\n          adjustedSeconds = totalSeconds64 + totalDays;\n          FUN_00004634(dateComponents);\n          daysOffset = dateComponents[3] - daysOffset;\n          totalSeconds64 = totalSeconds64 + totalDays;\n          if (daysOffset != 0) {\n            if (daysOffset < 2) {\n              if (daysOffset == -2 || daysOffset + 2 < 0 != SCARRY4(daysOffset,2)) {\n                daysOffset = 1;\n              }\n            }\n            else {\n              daysOffset = -1;\n            }\n            totalDays = daysOffset + dateComponents[7];\n            extraLeapDays = extraLeapDays + daysOffset;\n            if (totalDays < 0) {\n              i = endYear - 1;\n              if ((i & 3) == 0) {\n                if (i == (i / 100) * 100) {\n                  totalDays = 0x16d;\n                  if ((endYear + 0x76b) % 400 != 0) {\n                    totalDays = 0x16c;\n                  }\n                }\n                else {\n                  totalDays = 0x16d;\n                }\n              }\n              else {\n                totalDays = 0x16c;\n              }\n            }\n            else {\n              if ((endYear & 3) == 0) {\n                if (endYear == (endYear / 100) * 100) {\n                  daysOffset = 0x16d;\n                  if ((endYear + 0x76c) % 400 == 0) {\n                    daysOffset = 0x16e;\n                  }\n                }\n                else {\n                  daysOffset = 0x16e;\n                }\n              }\n              else {\n                daysOffset = 0x16d;\n              }\n              if (daysOffset <= totalDays) {\n                totalDays = totalDays - daysOffset;\n              }\n            }\n            dateComponents[7] = totalDays;\n            totalSeconds64 = adjustedSeconds;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((totalDays - daysDifference) - (uint)(totalSeconds < year)) < 0 !=\n          (SBORROW4(totalDays,daysDifference) != SBORROW4(totalDays - daysDifference,(uint)(totalSeconds < year)))) {\nLAB_0000491e:\n        if ((int)((totalDays - daysOffset) - (uint)(totalSeconds < i)) < 0 ==\n            (SBORROW4(totalDays,daysOffset) != SBORROW4(totalDays - daysOffset,(uint)(totalSeconds < i))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)monthsOffset) {\n        i = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      i = isNegative;\n      if (isNegative != 1) goto LAB_00004934;\n    }\n    endYear = timeComponents[0x14];\n    totalDays = (uint)totalSeconds64 + endYear;\n    daysOffset = (int)((ulonglong)totalSeconds64 >> 0x20) +\n            ((int)endYear >> 0x1f) + (uint)CARRY4((uint)totalSeconds64,endYear);\n    i = 1;\n  }\n  FUN_000050f4();\n  dateComponents[8] = i;\n  dateComponents[6] = (extraLeapDays + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(daysOffset,totalDays);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_difference_000047e4",
                "param_1": "dateComponents",
                "piVar3": "timeComponents",
                "uVar4": "year",
                "iVar5": "daysOffset",
                "iVar6": "daysDifference",
                "iVar7": "totalDays",
                "uVar8": "daysInYear",
                "uVar9": "i",
                "uVar10": "startYear",
                "uVar12": "endYear",
                "uVar13": "isNegative",
                "uVar14": "monthsOffset",
                "uVar15": "totalSeconds",
                "lVar1": "totalSeconds64",
                "lVar2": "adjustedSeconds",
                "iVar11": "extraLeapDays"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "process_data_00004b34",
            "code": "\nvoid processData_00004b34(undefined4 *errorCode,int dataSize,undefined4 param3,undefined4 param4)\n\n{\n  int *temp1;\n  int **tempPtr1;\n  int **currPtr;\n  int **prevPtr;\n  int **nextPtr;\n  int **newDataPtr;\n  bool isConditionTrue;\n  \n  if (dataSize == 0) {\n    return;\n  }\n  newDataPtr = (int **)(dataSize + -4);\n  if (*(int *)(dataSize + -4) < 0) {\n    newDataPtr = (int **)((int)newDataPtr + *(int *)(dataSize + -4));\n  }\n  FUN_00005790();\n  prevPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newDataPtr[1] = (int *)0x0;\n    currPtr = tempPtr1;\n    DAT_1fff0db4 = newDataPtr;\n  }\n  else {\n    nextPtr = DAT_1fff0db4;\n    if (newDataPtr < DAT_1fff0db4) {\n      currPtr = (int **)*newDataPtr;\n      prevPtr = (int **)((int)newDataPtr + (int)currPtr);\n      isConditionTrue = DAT_1fff0db4 == prevPtr;\n      if (isConditionTrue) {\n        prevPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newDataPtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newDataPtr;\n      if (isConditionTrue) {\n        prevPtr = (int **)((int)prevPtr + (int)currPtr);\n        *newDataPtr = (int *)prevPtr;\n      }\n    }\n    else {\n      do {\n        prevPtr = nextPtr;\n        nextPtr = (int **)prevPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newDataPtr);\n      currPtr = (int **)*prevPtr;\n      if ((int **)((int)prevPtr + (int)currPtr) == newDataPtr) {\n        currPtr = (int **)((int)currPtr + (int)*newDataPtr);\n        *prevPtr = (int *)currPtr;\n        if (nextPtr == (int **)((int)prevPtr + (int)currPtr)) {\n          temp1 = *nextPtr;\n          prevPtr[1] = nextPtr[1];\n          currPtr = (int **)((int)currPtr + (int)temp1);\n          *prevPtr = (int *)currPtr;\n        }\n      }\n      else if (newDataPtr < (int **)((int)prevPtr + (int)currPtr)) {\n        *errorCode = 0xc;\n      }\n      else {\n        currPtr = (int **)((int)newDataPtr + (int)*newDataPtr);\n        isConditionTrue = nextPtr == currPtr;\n        if (isConditionTrue) {\n          currPtr = (int **)*nextPtr;\n          nextPtr = (int **)nextPtr[1];\n        }\n        newDataPtr[1] = (int *)nextPtr;\n        if (isConditionTrue) {\n          currPtr = (int **)((int)currPtr + (int)*newDataPtr);\n          *newDataPtr = (int *)currPtr;\n        }\n        prevPtr[1] = (int *)newDataPtr;\n      }\n    }\n  }\n  FUN_0000579c(errorCode,currPtr,prevPtr,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "process_data_00004b34",
                "param_1": "errorCode",
                "param_2": "dataSize",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "temp1",
                "extraout_r1": "tempPtr1",
                "ppiVar2": "currPtr",
                "ppiVar3": "prevPtr",
                "ppiVar4": "nextPtr",
                "ppiVar5": "newDataPtr",
                "bVar6": "isConditionTrue"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *buffer_ptr,uint buffer_size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prev_block_ptr;\n  int block_size;\n  uint offset;\n  uint *current_block_ptr;\n  uint new_block_size;\n  \n  new_block_size = (buffer_size + 3 & 0xfffffffc) + 8;\n  if (new_block_size < 0xc) {\n    new_block_size = 0xc;\n  }\n  if (((int)new_block_size < 0) || (new_block_size < buffer_size)) {\n    *buffer_ptr = 0xc;\n  }\n  else {\n    FUN_00005790();\n    prev_block_ptr = DAT_1fff0db4;\n    for (current_block_ptr = DAT_1fff0db4; current_block_ptr != (uint *)0x0; current_block_ptr = (uint *)current_block_ptr[1]) {\n      offset = *current_block_ptr - new_block_size;\n      if (-1 < (int)offset) {\n        if (0xb < offset) {\n          *current_block_ptr = offset;\n          current_block_ptr = (uint *)((int)current_block_ptr + offset);\n          goto LAB_00004c34;\n        }\n        if (prev_block_ptr == current_block_ptr) {\n          DAT_1fff0db4 = (uint *)current_block_ptr[1];\n        }\n        if (prev_block_ptr != current_block_ptr) {\n          prev_block_ptr[1] = (uint)(uint *)current_block_ptr[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev_block_ptr = current_block_ptr;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(buffer_ptr,0,prev_block_ptr,0,param_4);\n    }\n    prev_block_ptr = (uint *)FUN_00000428(buffer_ptr,new_block_size);\n    if ((prev_block_ptr != (uint *)0xffffffff) &&\n       ((current_block_ptr = (uint *)((int)prev_block_ptr + 3U & 0xfffffffc), prev_block_ptr == current_block_ptr ||\n        (block_size = FUN_00000428(buffer_ptr,(int)current_block_ptr - (int)prev_block_ptr), block_size != -1)))) {\nLAB_00004c34:\n      *current_block_ptr = new_block_size;\nLAB_00004c42:\n      FUN_0000579c(buffer_ptr);\n      new_block_size = (int)current_block_ptr + 0xbU & 0xfffffff8;\n      block_size = new_block_size - (int)(current_block_ptr + 1);\n      if (block_size == 0) {\n        return new_block_size;\n      }\n      *(uint *)((int)current_block_ptr + block_size) = (int)(current_block_ptr + 1) - new_block_size;\n      return new_block_size;\n    }\n    *buffer_ptr = 0xc;\n    FUN_0000579c(buffer_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "buffer_ptr",
                "param_2": "buffer_size",
                "puVar1": "prev_block_ptr",
                "iVar2": "block_size",
                "uVar3": "offset",
                "puVar4": "current_block_ptr",
                "uVar5": "new_block_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_relocation_00004c84",
            "code": "\nvoid processRelocation_00004c84(undefined4 ptr1,undefined4 ptr2,undefined4 ptr3,undefined4 ptr4)\n\n{\n  dword relocationOffset;\n  undefined4 originalParam1;\n  undefined4 originalParam2;\n  undefined4 originalParam3;\n  undefined4 originalParam4;\n  \n  relocationOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  originalParam1 = ptr1;\n  originalParam2 = ptr2;\n  originalParam3 = ptr3;\n  originalParam4 = ptr4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(relocationOffset,*(undefined4 *)(relocationOffset + 8),ptr1,&originalParam2,originalParam1,&originalParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_relocation_00004c84",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "ptr3",
                "param_4": "ptr4",
                "dVar1": "relocationOffset",
                "uVar2": "originalParam1",
                "uStack_c": "originalParam2",
                "uStack_8": "originalParam3",
                "uStack_4": "originalParam4"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "decode_and_process_data_00004cb4",
            "code": "\nuint decode_and_process_data_00004cb4(uint input_data)\n\n{\n  dword rel_offset;\n  undefined4 *data_ptr;\n  uint count;\n  undefined *temp_ptr;\n  undefined4 unused;\n  undefined4 unused;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(rel_offset + 8);\n  if ((rel_offset != 0) && (*(int *)(rel_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(rel_offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(rel_offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  count = data_ptr[2] - 1;\n  data_ptr[2] = count;\n  if (((int)count < 0) && (((int)count < (int)data_ptr[6] || (count = input_data & 0xff, count == 10))))\n  {\n    input_data = FUN_00005404(rel_offset,input_data,data_ptr,count,unused,unused);\n  }\n  else {\n    temp_ptr = (undefined *)*data_ptr;\n    *data_ptr = temp_ptr + 1;\n    *temp_ptr = (char)input_data;\n    input_data = input_data & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_data;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "decode_and_process_data_00004cb4",
                "param_1": "input_data",
                "dVar1": "rel_offset",
                "puVar2": "data_ptr",
                "uVar3": "count",
                "puVar4": "temp_ptr",
                "unaff_r4": "unused",
                "unaff_r5": "unused"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int input)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *string;\n  char **pointerArray;\n  undefined4 returnValue;\n  char *currentPointer;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  pointerArray = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (pointerArray == (char **)&DAT_000079b8) {\n    pointerArray = *(char ***)(offset + 4);\n  }\n  else if (pointerArray == (char **)&DAT_000079d8) {\n    pointerArray = *(char ***)(offset + 8);\n  }\n  else if (pointerArray == (char **)&DAT_00007998) {\n    pointerArray = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)pointerArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointerArray + 3) << 0x16))) {\n    FUNC_000045e8(pointerArray[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(pointerArray + 3) << 0x1c) < 0) && (pointerArray[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,pointerArray), result == 0)) {\n    currentPointer = (char *)(input + -1);\n    do {\n      while( true ) {\n        currentPointer = currentPointer + 1;\n        currentChar = *currentPointer;\n        string = pointerArray[2] + -1;\n        pointerArray[2] = string;\n        if (currentChar == '\\0') {\n          if (-1 < (int)string) {\n            currentPointer = *pointerArray;\n            returnValue = 10;\n            *pointerArray = currentPointer + 1;\n            *currentPointer = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,pointerArray);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)string < 0) && (((int)string < (int)pointerArray[6] || (currentChar == '\\n')))) break;\n        string = *pointerArray;\n        *pointerArray = string + 1;\n        *string = currentChar;\n      }\n      result = FUN_00005404(offset,currentChar,pointerArray);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)pointerArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointerArray + 3) << 0x16))) {\n    FUNC_000045ec(pointerArray[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "input",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "string",
                "ppcVar5": "pointerArray",
                "uVar6": "returnValue",
                "pcVar7": "currentPointer"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 data,int ptr)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = FUN_00000490(data,(int)*(short *)(ptr + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(ptr + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(ptr + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(ptr + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(ptr + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "data",
                "param_2": "ptr",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 arg1,int arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x17) < 0) {\n    FUN_000004f2(arg1,(int)*(short *)(arg2 + 0xe),0,2);\n  }\n  *(ushort *)(arg2 + 0xc) = *(ushort *)(arg2 + 0xc) & 0xefff;\n  result = FUN_00000e38(arg3,arg4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_status_00004e26",
            "code": "\nvoid updateStatus_00004e26(undefined4 status,int data)\n\n{\n  int result;\n  ushort newStatus;\n  bool isError;\n  \n  result = FUN_000004f2(status,(int)*(short *)(data + 0xe));\n  isError = result == -1;\n  if (isError) {\n    newStatus = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    newStatus = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(data + 0xc) = newStatus;\n  }\n  if (!isError) {\n    *(ushort *)(data + 0xc) = newStatus;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_status_00004e26",
                "param_1": "status",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "newStatus",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_and_subtract_00004e52",
            "code": "\nint compareAndSubtract_00004e52(byte *input1,byte *input2)\n\n{\n  byte currentByte;\n  uint inputByte;\n  bool isEqual;\n  \n  do {\n    inputByte = (uint)*input1;\n    currentByte = *input2;\n    isEqual = inputByte == 1;\n    if (inputByte != 0) {\n      isEqual = inputByte == currentByte;\n    }\n    input1 = input1 + 1;\n    input2 = input2 + 1;\n  } while (isEqual);\n  return inputByte - currentByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_and_subtract_00004e52",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "currentByte",
                "uVar2": "inputByte",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "calculate_difference_00004e66",
            "code": "\nint calculate_difference_00004e66(byte *buffer,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = buffer;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == buffer + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "calculate_difference_00004e66",
                "param_1": "buffer",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parseInteger_00004f84(byte *inputData,byte **parsedData,uint base)\n\n{\n  uint parsedValue;\n  uint currentChar;\n  uint isNegative;\n  uint digitValue;\n  int result;\n  uint maxValue;\n  uint divisor;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputData;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = isNegative + 0x7fffffff;\n  result = 0;\n  divisor = maxValue / base;\n  parsedValue = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (result != -1) {\n      if ((divisor < parsedValue) || ((divisor == parsedValue && ((int)(maxValue - base * divisor) < (int)digitValue)))) {\n        result = -1;\n      }\n      else {\n        parsedValue = parsedValue * base + digitValue;\n        result = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (result == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    parsedValue = maxValue;\n    if (parsedData == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      parsedValue = -parsedValue;\n    }\n    if (parsedData == (byte **)0x0) {\n      return parsedValue;\n    }\n    if (result == 0) goto LAB_00004f64;\n  }\n  inputData = nextByte + -1;\nLAB_00004f64:\n  *parsedData = inputData;\n  return parsedValue;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "inputData",
                "param_2": "parsedData",
                "param_3": "base",
                "uVar1": "parsedValue",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "iVar5": "result",
                "uVar6": "maxValue",
                "uVar7": "divisor",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_date_00004f98",
            "code": "\nundefined4 calculateDate_00004f98(uint inputYear)\n\n{\n  uint *dateInfoArray;\n  undefined4 isValid;\n  uint days;\n  int totalDays;\n  uint *dateInfo;\n  int extraDays;\n  uint isLeap;\n  int idx;\n  int dayOffset;\n  uint isDivisibleBy400;\n  \n  dateInfoArray = (uint *)FUN_000056b0();\n  if ((int)inputYear < 0x7b2) {\n    isValid = 0;\n  }\n  else {\n    extraDays = (inputYear - 0x7b2) * 0x16d + ((int)(inputYear - 0x7b1) >> 2) +\n            (inputYear - 0x76d) / 0xffffff9c + (inputYear - 0x641) / 400;\n    dateInfoArray[1] = inputYear;\n    isDivisibleBy400 = (uint)(inputYear % 400 == 0);\n    dateInfo = dateInfoArray;\n    do {\n      days = dateInfo[5];\n      if (*(char *)(dateInfo + 2) == 'J') {\n        if ((((inputYear & 3) == 0) && (inputYear % 100 != 0)) || (inputYear % 400 == 0)) {\n          if ((int)days < 0x3c) {\n            totalDays = 0;\n          }\n          else {\n            totalDays = 1;\n          }\n        }\n        else {\n          totalDays = 0;\n        }\n        totalDays = totalDays + extraDays + days + -1;\n      }\n      else if (*(char *)(dateInfo + 2) == 'D') {\n        totalDays = extraDays + days;\n      }\n      else {\n        isLeap = isDivisibleBy400;\n        if (((inputYear & 3) == 0) && (inputYear % 100 != 0)) {\n          isLeap = 1;\n        }\n        idx = 0;\n        totalDays = extraDays;\n        while( true ) {\n          idx = idx + 1;\n          if ((int)dateInfo[3] <= idx) break;\n          totalDays = totalDays + *(int *)(&UNK_00007b98 + idx * 4 + isLeap * 0x30);\n        }\n        dayOffset = days - (totalDays + 4U) % 7;\n        if (dayOffset < 0) {\n          dayOffset = dayOffset + 7;\n        }\n        for (dayOffset = (dateInfo[4] - 1) * 7 + dayOffset;\n            *(int *)(&UNK_00007b98 + idx * 4 + isLeap * 0x30) <= dayOffset; dayOffset = dayOffset + -7) {\n        }\n        totalDays = totalDays + dayOffset;\n      }\n      days = dateInfo[10] + totalDays * 0x15180 + dateInfo[6];\n      dateInfo[8] = days;\n      dateInfo[9] = (int)days >> 0x1f;\n      dateInfo = dateInfo + 10;\n    } while (dateInfoArray + 0x14 != dateInfo);\n    days = dateInfoArray[9];\n    isDivisibleBy400 = dateInfoArray[0x13];\n    *dateInfoArray = (uint)((int)((days - isDivisibleBy400) - (uint)(dateInfoArray[8] < dateInfoArray[0x12])) < 0 !=\n                    (SBORROW4(days,isDivisibleBy400) !=\n                    SBORROW4(days - isDivisibleBy400,(uint)(dateInfoArray[8] < dateInfoArray[0x12]))));\n    isValid = 1;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_date_00004f98",
                "param_1": "inputYear",
                "puVar1": "dateInfoArray",
                "uVar2": "isValid",
                "uVar3": "days",
                "iVar4": "totalDays",
                "puVar5": "dateInfo",
                "iVar6": "extraDays",
                "uVar7": "isLeap",
                "iVar8": "idx",
                "iVar9": "dayOffset",
                "uVar10": "isDivisibleBy400"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_data_address_000050e8",
            "code": "\nundefined * get_data_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_data_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_starting_address_000050f4",
            "code": "\nundefined * getStartingAddress_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_starting_address_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_binary_function_00005100",
            "code": "\nvoid parseBinaryFunction_00005100(void)\n\n{\n  dword offset;\n  int result;\n  char *parsedData;\n  int returnValue;\n  int parseResult;\n  undefined dataType;\n  char *tempVar;\n  bool isDataTypeM;\n  ushort *parsedValues1;\n  int *parsedValues1Len;\n  ushort *parsedValues2;\n  int *parsedValues2Len;\n  ushort value1;\n  ushort value2;\n  ushort value3;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int parseLength;\n  char *tempVarArray [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  result = FUN_000056b0();\n  parsedData = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (parsedData == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = parsedData;\n    DAT_1fff0ddc = parsedData;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (returnValue = FUN_00004e52(), returnValue != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    returnValue = FUN_00005ecc(parsedData);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,returnValue + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,parsedData);\n    }\n    if (*parsedData == ':') {\n      parsedData = parsedData + 1;\n    }\n    returnValue = FUN_00005e68(parsedData,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&parseLength);\n    if (0 < returnValue) {\n      tempVar = parsedData + parseLength;\n      if (parsedData[parseLength] == '-') {\n        tempVar = tempVar + 1;\n        returnValue = -1;\n      }\n      else {\n        if (parsedData[parseLength] == '+') {\n          tempVar = tempVar + 1;\n        }\n        returnValue = 1;\n      }\n      value2 = 0;\n      value3 = 0;\n      parsedValues1 = &value2;\n      parsedValues1Len = &parseLength;\n      parsedValues2 = &value3;\n      parsedValues2Len = &parseLength;\n      parseResult = FUN_00005e68(tempVar,\"%hu%n:%hu%n:%hu%n\",&value1,&parseLength,&value2,&parseLength,\n                           &value3,&parseLength);\n      if (0 < parseResult) {\n        *(uint *)(result + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * returnValue;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        tempVar = tempVar + parseLength;\n        returnValue = FUN_00005e68(tempVar,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&parseLength,parsedValues1,parsedValues1Len,parsedValues2,\n                             parsedValues2Len);\n        if (returnValue < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          parsedData = tempVar + parseLength;\n          if (tempVar[parseLength] == '-') {\n            parsedData = parsedData + 1;\n            returnValue = -1;\n          }\n          else {\n            if (tempVar[parseLength] == '+') {\n              parsedData = parsedData + 1;\n            }\n            returnValue = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          value3 = 0;\n          parseLength = 0;\n          parseResult = FUN_00005e68(parsedData,\"%hu%n:%hu%n:%hu%n\",&value1,&parseLength,&value2,&parseLength,\n                               &value3,&parseLength);\n          if (parseResult < 1) {\n            returnValue = *(int *)(result + 0x28) + -0xe10;\n          }\n          else {\n            returnValue = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3) * returnValue;\n          }\n          *(int *)(result + 0x50) = returnValue;\n          parsedData = parsedData + parseLength;\n          isDataTypeM = false;\n          returnValue = result;\n          while( true ) {\n            if (*parsedData == ',') {\n              parsedData = parsedData + 1;\n            }\n            if (*parsedData == 'M') {\n              parseResult = FUN_00005e68(parsedData,\"M%hu%n.%hu%n.%hu%n\",&value4,&parseLength,&value5,\n                                   &parseLength,&value6,&parseLength);\n              if (parseResult != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(returnValue + 0xc) = (uint)value4;\n              *(uint *)(returnValue + 0x10) = (uint)value5;\n              *(undefined *)(returnValue + 8) = 0x4d;\n              *(uint *)(returnValue + 0x14) = (uint)value6;\n              tempVar = parsedData + parseLength;\n            }\n            else {\n              if (*parsedData == 'J') {\n                parsedData = parsedData + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              value6 = FUN_00005fd8(parsedData,tempVarArray,10);\n              tempVar = tempVarArray[0];\n              if (tempVarArray[0] == parsedData) {\n                if (isDataTypeM) {\n                  *(undefined *)(result + 0x30) = 0x4d;\n                  *(undefined4 *)(result + 0x34) = 0xb;\n                  *(undefined4 *)(result + 0x38) = 1;\n                  *(undefined4 *)(result + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(result + 8) = 0x4d;\n                  *(undefined4 *)(result + 0xc) = 3;\n                  *(undefined4 *)(result + 0x10) = 2;\n                  *(undefined4 *)(result + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(returnValue + 8) = dataType;\n                *(uint *)(returnValue + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            value3 = 0;\n            parseLength = 0;\n            if (*tempVar == '/') {\n              FUN_00005e68(tempVar,&DAT_00007a85,&value1,&parseLength,&value2,&parseLength,&value3,\n                           &parseLength);\n            }\n            *(uint *)(returnValue + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)value3;\n            returnValue = returnValue + 0x28;\n            parsedData = tempVar + parseLength;\n            if (isDataTypeM) break;\n            isDataTypeM = true;\n          }\n          FUN_00004f98(*(undefined4 *)(result + 4));\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(result + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_binary_function_00005100",
                "dVar1": "offset",
                "iVar2": "result",
                "pcVar3": "parsedData",
                "iVar4": "returnValue",
                "iVar5": "parseResult",
                "uVar6": "dataType",
                "pcVar7": "tempVar",
                "bVar8": "isDataTypeM",
                "puVar9": "parsedValues1",
                "piVar10": "parsedValues1Len",
                "puVar11": "parsedValues2",
                "piVar12": "parsedValues2Len",
                "local_3c": "value1",
                "local_3a": "value2",
                "local_38": "value3",
                "local_36": "value4",
                "local_34": "value5",
                "local_32": "value6",
                "local_30": "parseLength",
                "local_2c": "tempVarArray"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int inputData,uint value,int *buffer,undefined4 param)\n\n{\n  int result;\n  uint ushortValue;\n  undefined *bytePtr;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(inputData + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(inputData + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(inputData + 0xc);\n  }\n  buffer[2] = buffer[6];\n  ushortValue = (uint)*(ushort *)(buffer + 3);\n  result = ushortValue << 0x1c;\n  if (((result < 0) && (ushortValue = buffer[4], ushortValue != 0)) ||\n     (result = FUN_000054a8(inputData,buffer,result,ushortValue,param), result == 0)) {\n    result = *buffer - buffer[4];\n    value = value & 0xff;\n    if ((result < buffer[5]) || (result = FUN_00004158(inputData,buffer), result == 0)) {\n      buffer[2] = buffer[2] + -1;\n      bytePtr = (undefined *)*buffer;\n      *buffer = (int)(bytePtr + 1);\n      *bytePtr = (char)value;\n      if (buffer[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      result = FUN_00004158(inputData,buffer);\n      if (result == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "inputData",
                "param_2": "value",
                "param_3": "buffer",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "ushortValue",
                "puVar3": "bytePtr"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_relocation_000054a8",
            "code": "\nuint processRelocation_000054a8(undefined4 *outputFunction,undefined4 *relocationEntry)\n\n{\n  ushort temp1;\n  dword relOffset;\n  ushort temp2;\n  uint temp3;\n  uint temp4;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (relocationEntry == &DAT_000079b8) {\n    relocationEntry = *(undefined4 **)(relOffset + 4);\n  }\n  else if (relocationEntry == (undefined4 *)&DAT_000079d8) {\n    relocationEntry = *(undefined4 **)(relOffset + 8);\n  }\n  else if (relocationEntry == (undefined4 *)&DAT_00007998) {\n    relocationEntry = *(undefined4 **)(relOffset + 0xc);\n  }\n  temp3 = (uint)*(ushort *)(relocationEntry + 3);\n  temp2 = *(ushort *)(relocationEntry + 3);\n  if (-1 < (int)(temp3 << 0x1c)) {\n    if (-1 < (int)(temp3 << 0x1b)) {\n      *outputFunction = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp3 << 0x1d) < 0) {\n      if ((undefined4 *)relocationEntry[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)relocationEntry[0xd] != relocationEntry + 0x11) {\n          FUN_00004b34(outputFunction);\n        }\n        relocationEntry[0xd] = 0;\n      }\n      *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) & 0xffdb;\n      relocationEntry[1] = 0;\n      *relocationEntry = relocationEntry[4];\n    }\n    *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) | 8;\n  }\n  if ((relocationEntry[4] == 0) && ((*(ushort *)(relocationEntry + 3) & 0x280) != 0x200)) {\n    FUN_00005700(outputFunction,relocationEntry);\n  }\n  temp1 = *(ushort *)(relocationEntry + 3);\n  temp3 = (uint)temp1;\n  temp2 = *(ushort *)(relocationEntry + 3);\n  temp4 = temp3 & 1;\n  if ((temp1 & 1) == 0) {\n    if (-1 < (int)(temp3 << 0x1e)) {\n      temp4 = relocationEntry[5];\n    }\n    relocationEntry[2] = temp4;\n  }\n  else {\n    relocationEntry[2] = 0;\n    relocationEntry[6] = -relocationEntry[5];\n  }\n  if (relocationEntry[4] != 0) {\n    return 0;\n  }\n  if ((temp1 & 0x80) == 0) {\n    return temp3 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(relocationEntry + 3) = temp2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_relocation_000054a8",
                "param_1": "outputFunction",
                "param_2": "relocationEntry",
                "dVar2": "relOffset",
                "uVar1": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "compute_remainder_and_division_00005584",
            "code": "\nvoid compute_remainder_and_division_00005584(uint *result,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "compute_remainder_and_division_00005584",
                "param_1": "result",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_key_value_pair_0000562c",
            "code": "\nint find_key_value_pair_0000562c(undefined4 param_addr,char *input_str,int *result)\n\n{\n  char current_char;\n  int *ptr;\n  int status;\n  char *str_ptr;\n  int *ptr_iter;\n  int str_offset;\n  \n  FUN_00005fec();\n  str_ptr = input_str;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *str_ptr;\n      if (current_char == '\\0') {\n        str_offset = (int)str_ptr - (int)input_str;\n        ptr = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          ptr_iter = ptr;\n          if (*ptr_iter == 0) break;\n          status = FUN_00004e66(*ptr_iter,input_str,str_offset);\n          ptr = ptr_iter + 1;\n          if ((status == 0) && (status = *ptr_iter, *(char *)(status + str_offset) == '=')) {\n            *result = (int)((int)ptr_iter - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param_addr);\n            return status + str_offset + 1;\n          }\n        }\n        break;\n      }\n      str_ptr = str_ptr + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param_addr);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_key_value_pair_0000562c",
                "param_1": "param_addr",
                "param_2": "input_str",
                "param_3": "result",
                "cVar1": "current_char",
                "piVar2": "ptr",
                "iVar3": "status",
                "pcVar4": "str_ptr",
                "piVar5": "ptr_iter",
                "iVar6": "str_offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "process_data_000056a0",
            "code": "\nvoid processData_000056a0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = input2;\n  temp2 = input3;\n  FUN_0000562c(input1,input2,&temp1,input4,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_c": "temp1",
                "uStack_8": "temp2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nuint32_t getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_access_permission_000056b8",
            "code": "\nundefined4 checkAccessPermission_000056b8(undefined4 param1,int param2,undefined4 *param3,uint *param4)\n\n{\n  int errorCode;\n  undefined4 result;\n  undefined tempArray [4];\n  uint localVar;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (errorCode = FUN_00000514(param1,(int)*(short *)(param2 + 0xe),tempArray), errorCode < 0)) {\n    *param4 = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      result = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *param4 = (uint)((localVar & 0xf000) == 0x2000);\n  }\n  result = 0x400;\nLAB_000056f8:\n  *param3 = result;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_access_permission_000056b8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "errorCode",
                "uVar2": "result",
                "auStack_68": "tempArray",
                "local_64": "localVar"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int inputValue,int *outputArray)\n\n{\n  ushort resultValue;\n  int tempValue;\n  int localValue1;\n  int *localValue2;\n  \n  if (-1 < (int)((uint)*(ushort *)(outputArray + 3) << 0x1e)) {\n    localValue1 = inputValue;\n    localValue2 = outputArray;\n    resultValue = FUN_000056b8(inputValue,outputArray,&localValue1,&localValue2);\n    tempValue = FUN_00004bd0(inputValue,localValue1);\n    if (tempValue != 0) {\n      *(undefined **)(inputValue + 0x28) = &DAT_0000423d;\n      *outputArray = tempValue;\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x80;\n      outputArray[5] = localValue1;\n      outputArray[4] = tempValue;\n      if ((localValue2 != (int *)0x0) &&\n         (tempValue = FUN_00000534(inputValue,(int)*(short *)((int)outputArray + 0xe)), tempValue != 0)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(outputArray + 3) = resultValue | *(ushort *)(outputArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(outputArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfffc | 2;\n  }\n  *outputArray = (int)outputArray + 0x47;\n  outputArray[4] = (int)outputArray + 0x47;\n  outputArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "inputValue",
                "param_2": "outputArray",
                "uVar1": "resultValue",
                "iVar2": "tempValue",
                "local_18": "localValue1",
                "local_14": "localValue2"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_relocation_00005780",
            "code": "\nvoid initializeRelocation_00005780(undefined4 offset)\n\n{\n  FUN_00004b34(relocationOffset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_relocation_00005780",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_1fff0200[16].r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_array_and_return_000057a8",
            "code": "\nint updateArrayAndReturn_000057a8(undefined4 initialValue,int newValue,undefined4 *array)\n\n{\n  int index;\n  undefined *currentElement;\n  \n  index = array[2] + -1;\n  array[2] = index;\n  if ((index < 0) && ((index < (int)array[6] || (newValue == 10)))) {\n    index = FUN_00005404();\n    return index;\n  }\n  currentElement = (undefined *)*array;\n  *array = currentElement + 1;\n  *currentElement = (char)newValue;\n  return newValue;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_array_and_return_000057a8",
                "param_1": "initialValue",
                "param_2": "newValue",
                "param_3": "array",
                "iVar1": "index",
                "puVar2": "currentElement"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint processData_000057d2(undefined4 arg1,undefined4 arg2,undefined *source,int length)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentIndex;\n  \n  endPtr = source + length;\n  currentIndex = length;\n  do {\n    if (source == endPtr) {\n      return 0;\n    }\n    result = FUN_000057a8(arg1,*source,arg2,length,currentIndex);\n    length = result + 1;\n    source = source + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "source",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentIndex"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_command_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parse_command_000057f8(int arg1,undefined4 *arg2,byte *buffer,int *result)\n\n{\n  int index;\n  int returnValue;\n  int *nextResult;\n  bool foundDigit;\n  byte *currentChar;\n  int tempVar;\n  byte *currentByte;\n  int *resultPtr;\n  uint flags;\n  int precision;\n  undefined4 uStack80;\n  int width;\n  int totalLength;\n  byte specifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined zeroFlag;\n  undefined4 lengthModifier;\n  \n  if ((arg1 != 0) && (*(int *)(arg1 + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (arg2 == &DAT_000079b8) {\n    arg2 = *(undefined4 **)(arg1 + 4);\n  }\n  else if (arg2 == (undefined4 *)&DAT_000079d8) {\n    arg2 = *(undefined4 **)(arg1 + 8);\n  }\n  else if (arg2 == (undefined4 *)&DAT_00007998) {\n    arg2 = *(undefined4 **)(arg1 + 0xc);\n  }\n  if ((-1 < (int)(arg2[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x16))) {\n    FUNC_000045e8(arg2[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x1c)) || (arg2[4] == 0)) &&\n     (index = FUN_000054a8(arg1,arg2), index != 0)) {\n    if ((-1 < (int)(arg2[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x16)))\n    {\n      FUNC_000045ec(arg2[0x16]);\n    }\n    return -1;\n  }\n  totalLength = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentByte = buffer;\n  resultPtr = result;\nLAB_0000588e:\n  currentChar = currentByte;\n  if (*currentChar != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  currentByte = currentChar + 1;\n  if (*currentChar == 0x25) {\nLAB_0000589a:\n    index = (int)currentChar - (int)buffer;\n    if (index != 0) {\n      returnValue = FUN_000057d2(arg1,arg2,buffer,index);\n      if (returnValue == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(arg2[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(arg2 + 3) << 0x16))) {\n          FUNC_000045ec(arg2[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(arg2 + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalLength;\n      }\n      totalLength = totalLength + index;\n    }\n    if (*currentChar == 0) goto LAB_00005a06;\n    precision = -1;\n    uStack80 = 0;\n    flags = 0;\n    width = 0;\n    zeroFlag = 0;\n    lengthModifier = 0;\n    currentByte = currentChar + 1;\n    while( true ) {\n      currentChar = currentByte + 1;\n      index = FUN_00006010(\"#-0+ \",*currentByte,5);\n      if (index == 0) break;\n      flags = 1 << (index - 0x7bfcU & 0xff) | flags;\n      currentByte = currentChar;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      zeroFlag = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      zeroFlag = 0x2b;\n    }\n    if (*currentByte == 0x2a) {\n      nextResult = resultPtr + 1;\n      width = *resultPtr;\n      resultPtr = nextResult;\n      if (width < 0) {\n        width = -width;\n        flags = flags | 2;\n      }\n    }\n    else {\n      foundDigit = false;\n      index = width;\n      currentChar = currentByte;\n      while( true ) {\n        if (9 < *currentChar - 0x30) break;\n        index = index * 10 + (*currentChar - 0x30);\n        foundDigit = true;\n        currentChar = currentChar + 1;\n      }\n      if (foundDigit) {\n        width = index;\n      }\n    }\n    if (*currentChar == 0x2e) {\n      if (currentChar[1] == 0x2a) {\n        precision = *resultPtr;\n        if (precision < 0) {\n          precision = -1;\n        }\n        currentChar = currentChar + 2;\n        resultPtr = resultPtr + 1;\n      }\n      else {\n        foundDigit = false;\n        precision = 0;\n        index = 0;\n        while( true ) {\n          currentChar = currentChar + 1;\n          if (9 < *currentChar - 0x30) break;\n          index = index * 10 + (*currentChar - 0x30);\n          foundDigit = true;\n        }\n        if (foundDigit) {\n          precision = index;\n        }\n      }\n    }\n    index = FUN_00006010(&DAT_00007c02,*currentChar,3);\n    if (index != 0) {\n      flags = flags | 0x40 << (index - 0x7c02U & 0xff);\n      currentChar = currentChar + 1;\n    }\n    buffer = currentChar + 1;\n    specifier = *currentChar;\n    index = FUN_00006010(\"efgEFG\",specifier,6);\n    if (index == 0) {\n      tempVar = FUN_00005b34(arg1,&flags,arg2,0x57d3,&resultPtr);\n      if (tempVar == -1) goto LAB_00005a06;\n    }\n    else {\n      resultPtr = (int *)(((int)resultPtr + 7U & 0xfffffff8) + 8);\n    }\n    totalLength = totalLength + tempVar;\n    currentByte = buffer;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_command_000057f8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "buffer",
                "param_4": "result",
                "iVar1": "index",
                "iVar2": "returnValue",
                "piVar3": "nextResult",
                "bVar4": "foundDigit",
                "pbVar5": "currentChar",
                "unaff_r7": "tempVar",
                "pbVar6": "currentByte",
                "local_8c": "resultPtr",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "uStack80",
                "local_7c": "width",
                "local_74": "totalLength",
                "local_70": "specifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "zeroFlag",
                "local_30": "lengthModifier"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "update_value_00005a58",
            "code": "\nundefined4\nupdateValue_00005a58(undefined4 param1,uint *source,uint *destination,undefined4 param4,code *callbackFunction)\n\n{\n  int index;\n  undefined4 returnValue;\n  int result;\n  uint maxValue;\n  uint counter;\n  bool isConditionMet;\n  \n  maxValue = source[4];\n  if ((int)source[4] < (int)source[2]) {\n    maxValue = source[2];\n  }\n  *destination = maxValue;\n  if (*(char *)((int)source + 0x43) != '\\0') {\n    *destination = maxValue + 1;\n  }\n  if ((int)(*source << 0x1a) < 0) {\n    *destination = *destination + 2;\n  }\n  if ((*source & 6) == 0) {\n    for (index = 0; index < (int)(source[3] - *destination); index = index + 1) {\n      result = (*callbackFunction)(param1,param4,(int)source + 0x19,1);\n      if (result == -1) goto LAB_00005afc;\n    }\n  }\n  maxValue = (uint)*(byte *)((int)source + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  if ((int)(*source << 0x1a) < 0) {\n    *(undefined *)((int)source + maxValue + 0x43) = 0x30;\n    *(undefined *)((int)source + maxValue + 0x44) = *(undefined *)((int)source + 0x45);\n    maxValue = maxValue + 2;\n  }\n  index = (*callbackFunction)(param1,param4,(int)source + 0x43,maxValue);\n  if (index == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maxValue = source[3];\n    isConditionMet = (*source & 6) == 4;\n    if (isConditionMet) {\n      maxValue = maxValue - *destination;\n    }\n    if (isConditionMet) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    else {\n      maxValue = 0;\n    }\n    if ((int)source[4] < (int)source[2]) {\n      maxValue = maxValue + (source[2] - source[4]);\n    }\n    for (counter = 0; maxValue != counter; counter = counter + 1) {\n      index = (*callbackFunction)(param1,param4,(int)source + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "update_value_00005a58",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "destination",
                "param_4": "param4",
                "param_5": "callbackFunction",
                "iVar1": "index",
                "uVar2": "returnValue",
                "iVar3": "result",
                "uVar4": "maxValue",
                "uVar5": "counter",
                "bVar6": "isConditionMet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_number_00005b34",
            "code": "\ncode * formatNumber_00005b34(undefined4 param1,uint *number,undefined4 param3,code *callback,uint **ptrArray\n                   )\n\n{\n  bool isGreater;\n  byte byteValue;\n  int intValue;\n  code *resultFunc;\n  char *hexDigits;\n  int loopVar;\n  char *strPtr;\n  uint digit;\n  uint *ptrValue;\n  uint baseValue;\n  uint **ptrToArray;\n  char **ptrToStrArray;\n  uint length;\n  char *strPtr2;\n  code *localCallback;\n  \n  byteValue = *(byte *)(number + 6);\n  strPtr = (char *)((int)number + 0x43);\n  localCallback = callback;\n  if (0x78 < byteValue) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)number + 0x42) = byteValue;\nLAB_00005bdc:\n    strPtr = (char *)((int)number + 0x42);\n    digit = 1;\nLAB_00005d28:\n    number[4] = digit;\n    *(undefined *)((int)number + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteValue < 99) {\n    if (byteValue == 0) goto LAB_00005d06;\n    if (byteValue == 0x58) {\n      hexDigits = \"0123456789ABCDEF\";\n      *(undefined *)((int)number + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteValue) {\n  case 99:\n    digit = **ptrArray;\n    *ptrArray = *ptrArray + 1;\n    *(char *)((int)number + 0x42) = (char)digit;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    baseValue = *number;\n    ptrValue = *ptrArray;\n    if ((int)(baseValue << 0x18) < 0) {\n      digit = *ptrValue;\n      *ptrArray = ptrValue + 1;\n    }\n    else {\n      digit = *ptrValue;\n      *ptrArray = ptrValue + 1;\n      if ((baseValue & 0x40) != 0) {\n        digit = (uint)(short)digit;\n      }\n    }\n    if ((int)digit < 0) {\n      digit = -digit;\n      *(undefined *)((int)number + 0x43) = 0x2d;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    baseValue = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ptrToArray = (uint **)*ptrArray;\n    baseValue = *number;\n    digit = number[5];\n    *ptrArray = (uint *)(ptrToArray + 1);\n    ptrValue = *ptrToArray;\n    if (((int)(baseValue << 0x18) < 0) || (-1 < (int)(baseValue << 0x19))) {\n      *ptrValue = digit;\n    }\n    else {\n      *(short *)ptrValue = (short)digit;\n    }\nLAB_00005d06:\n    number[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    ptrValue = *ptrArray;\n    digit = *number;\n    *ptrArray = ptrValue + 1;\n    if (((int)(digit << 0x18) < 0) || (-1 < (int)(digit << 0x19))) {\n      digit = *ptrValue;\n    }\n    else {\n      digit = (uint)*(ushort *)ptrValue;\n    }\n    hexDigits = \"0123456789ABCDEF\";\n    if (byteValue == 0x6f) {\n      baseValue = 8;\n    }\n    else {\n      baseValue = 10;\n    }\n    break;\n  case 0x70:\n    *number = *number | 0x20;\n  case 0x78:\n    hexDigits = \"0123456789abcdef\";\n    *(undefined *)((int)number + 0x45) = 0x78;\nLAB_00005ca8:\n    baseValue = *number;\n    digit = **ptrArray;\n    *ptrArray = *ptrArray + 1;\n    if ((-1 < (int)(baseValue << 0x18)) && ((int)(baseValue << 0x19) < 0)) {\n      digit = digit & 0xffff;\n    }\n    if ((int)(baseValue << 0x1f) < 0) {\n      *number = baseValue | 0x20;\n    }\n    if (digit == 0) {\n      *number = *number & 0xffffffdf;\n    }\n    baseValue = 0x10;\n    break;\n  case 0x73:\n    ptrToStrArray = (char **)*ptrArray;\n    *ptrArray = (uint *)(ptrToStrArray + 1);\n    strPtr = *ptrToStrArray;\n    intValue = FUN_00006010(strPtr,0,number[1],ptrToStrArray,param1,number,param3);\n    if (intValue != 0) {\n      number[1] = intValue - (int)strPtr;\n    }\n    digit = number[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)number + 0x43) = 0;\nLAB_00005c36:\n  length = number[1];\n  number[2] = length;\n  if (-1 < (int)length) {\n    *number = *number & 0xfffffffb;\n  }\n  strPtr2 = strPtr;\n  if ((digit != 0) || (length != 0)) {\n    do {\n      strPtr2 = strPtr2 + -1;\n      *strPtr2 = hexDigits[digit - baseValue * (digit / baseValue)];\n      isGreater = baseValue <= digit;\n      digit = digit / baseValue;\n    } while (isGreater);\n  }\n  if (((baseValue == 8) && ((int)(*number << 0x1f) < 0)) && ((int)number[1] <= (int)number[4])) {\n    strPtr2[-1] = '0';\n    strPtr2 = strPtr2 + -1;\n  }\n  number[4] = (int)strPtr - (int)strPtr2;\n  strPtr = strPtr2;\nLAB_00005c84:\n  intValue = FUN_00005a58(param1,number,&localCallback,param3,callback);\n  if ((intValue == -1) || (intValue = (*callback)(param1,param3,strPtr,number[4]), intValue == -1)) {\nLAB_00005c98:\n    resultFunc = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*number << 0x1e) < 0) {\n      for (intValue = 0; intValue < (int)(number[3] - (int)localCallback); intValue = intValue + 1) {\n        loopVar = (*callback)(param1,param3,(int)number + 0x19,1);\n        if (loopVar == -1) goto LAB_00005c98;\n      }\n    }\n    resultFunc = (code *)number[3];\n    if ((int)(code *)number[3] < (int)localCallback) {\n      resultFunc = localCallback;\n    }\n  }\n  return resultFunc;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_number_00005b34",
                "param_1": "param1",
                "param_2": "number",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "ptrArray",
                "bVar1": "isGreater",
                "bVar2": "byteValue",
                "iVar3": "intValue",
                "pcVar4": "resultFunc",
                "pcVar5": "hexDigits",
                "iVar6": "loopVar",
                "pcVar7": "strPtr",
                "uVar8": "digit",
                "puVar9": "ptrValue",
                "uVar10": "baseValue",
                "uVar13": "length",
                "pcVar14": "strPtr2",
                "local_24": "localCallback",
                "ppuVar11": "ptrToArray",
                "ppcVar12": "ptrToStrArray"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "decode_and_decrement_00005e10",
            "code": "\nuint decode_and_decrement_00005e10(int input,byte **data)\n\n{\n  int result;\n  uint output;\n  byte *current_byte;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data == (byte **)&DAT_000079b8) {\n    data = *(byte ***)(input + 4);\n  }\n  else if (data == (byte **)&DAT_000079d8) {\n    data = *(byte ***)(input + 8);\n  }\n  else if (data == (byte **)&DAT_00007998) {\n    data = *(byte ***)(input + 0xc);\n  }\n  result = FUN_00006768(input,data);\n  if (result == 0) {\n    data[1] = data[1] + -1;\n    current_byte = *data;\n    *data = current_byte + 1;\n    output = (uint)*current_byte;\n  }\n  else {\n    output = 0xffffffff;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "decode_and_decrement_00005e10",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "output",
                "pbVar3": "current_byte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_function_00005e68",
            "code": "\nvoid processFunction_00005e68(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 processedInput1;\n  undefined4 result;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined4 processedInput2;\n  undefined4 processedInput3;\n  undefined *pointer;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 processedInput4;\n  undefined4 processedInput5;\n  \n  constant1 = 0x204;\n  processedInput1 = input1;\n  processedInput2 = input1;\n  processedInput4 = input3;\n  processedInput5 = input4;\n  result = FUN_00005ecc();\n  pointer = &LAB_00004dea_1;\n  constant3 = 0;\n  constant4 = 0;\n  constant2 = 0xffff;\n  processedInput3 = result;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&processedInput1,input2,&processedInput4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_function_00005e68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_80": "processedInput1",
                "local_7c": "result",
                "local_74": "constant1",
                "local_72": "constant2",
                "local_70": "processedInput2",
                "local_6c": "processedInput3",
                "local_5c": "pointer",
                "local_4c": "constant3",
                "local_38": "constant4",
                "uStack_8": "processedInput4",
                "uStack_4": "processedInput5"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copy_string_00005ebc(char *destination,char *source)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "input_string",
                "pcVar3": "current_char_ptr",
                "pcVar2": "next_char_ptr",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *result,byte *input,byte **output,uint base)\n\n{\n  uint parsedNumber;\n  uint currentChar;\n  byte isNegative;\n  int isValid;\n  uint digit;\n  uint maxValue;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = input;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  isValid = 0;\n  maxValue = 0xffffffff / base;\n  parsedNumber = 0;\n  do {\n    digit = currentChar - 0x30;\n    if (9 < digit) {\n      if (currentChar - 0x41 < 0x1a) {\n        digit = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digit = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((isValid < 0) || (maxValue < parsedNumber)) ||\n       ((maxValue == parsedNumber && ((int)~(base * maxValue) < (int)digit)))) {\n      isValid = -1;\n    }\n    else {\n      parsedNumber = parsedNumber * base + digit;\n      isValid = 1;\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (isValid < 0) {\n    *result = 0x22;\n    parsedNumber = 0xffffffff;\n    if (output == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      parsedNumber = -parsedNumber;\n    }\n    if (output == (byte **)0x0) {\n      return parsedNumber;\n    }\n    if (isValid == 0) goto LAB_00005fb8;\n  }\n  input = nextByte + -1;\nLAB_00005fb8:\n  *output = input;\n  return parsedNumber;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "output",
                "param_4": "base",
                "uVar1": "parsedNumber",
                "uVar2": "currentChar",
                "bVar3": "isNegative",
                "iVar4": "isValid",
                "uVar5": "digit",
                "uVar6": "maxValue",
                "pbVar7": "currentByte",
                "pbVar8": "nextByte"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "process_relocation_00005fd8",
            "code": "\nvoid processRelocation_00005fd8(undefined4 offset,undefined4 param_a,undefined4 param_b)\n\n{\n  FUN_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset,param_a,param_b);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "process_relocation_00005fd8",
                "param_1": "offset",
                "param_2": "param_a",
                "param_3": "param_b"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_data_00005ff8",
            "code": "\nvoid initializeData_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_data_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint byte_to_find,uint data_size)\n\n{\n  byte current_byte;\n  char is_zero_1;\n  char is_zero_2;\n  char is_zero_3;\n  char is_zero_4;\n  byte *next_byte;\n  uint *next_word;\n  byte *found_sequence;\n  uint alignment_offset;\n  uint aligned_size;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool is_nonzero_1;\n  bool is_nonzero_2;\n  bool is_nonzero_3;\n  bool is_nonzero_4;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)data_size < 0x10) {\njoined_r0x00006070:\n    do {\n      if (data_size == 0) {\n        return (byte *)0x0;\n      }\n      next_word = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      data_size = data_size - 1;\n      data = next_word;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    alignment_offset = (uint)data & 7;\n    while( true ) {\n      if (alignment_offset == 0) {\n        alignment_offset = byte_to_find | byte_to_find << 8;\n        alignment_offset = alignment_offset | alignment_offset << 0x10;\n        aligned_size = data_size & 0xfffffff8;\n        do {\n          next_word = data + 2;\n          aligned_size = aligned_size - 8;\n          xor_result_1 = *data ^ alignment_offset;\n          xor_result_2 = data[1] ^ alignment_offset;\n          is_zero_1 = -((char)xor_result_1 == '\\0');\n          is_zero_2 = -((char)(xor_result_1 >> 8) == '\\0');\n          is_zero_3 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          is_zero_4 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(is_zero_4,CONCAT12(is_zero_3,CONCAT11(is_zero_2,is_zero_1)));\n          is_nonzero_1 = (char)xor_result_2 != '\\0';\n          is_nonzero_2 = (char)(xor_result_2 >> 8) != '\\0';\n          is_nonzero_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          is_nonzero_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(is_nonzero_4 * is_zero_4 - !is_nonzero_4,\n                            CONCAT12(is_nonzero_3 * is_zero_3 - !is_nonzero_3,\n                                     CONCAT11(is_nonzero_2 * is_zero_2 - !is_nonzero_2,is_nonzero_1 * is_zero_1 - !is_nonzero_1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              found_sequence = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              found_sequence = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              is_nonzero_1 = (xor_result_1 & 0x100) == 0;\n              next_byte = found_sequence + 1;\n              if (is_nonzero_1) {\n                is_nonzero_1 = (xor_result_1 & 0x18000) == 0;\n                next_byte = found_sequence + 2;\n              }\n              found_sequence = next_byte;\n              if (is_nonzero_1) {\n                found_sequence = found_sequence + 1;\n              }\n            }\n            return found_sequence + -1;\n          }\n          data = next_word;\n        } while (aligned_size != 0);\n        data_size = data_size & 7;\n        goto joined_r0x00006070;\n      }\n      next_word = (uint *)((int)data + 1);\n      data_size = data_size - 1;\n      if (*(byte *)data == byte_to_find) break;\n      alignment_offset = (uint)next_word & 7;\n      data = next_word;\n      if (data_size == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)next_word + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "data_size",
                "bVar1": "current_byte",
                "cVar2": "is_zero_1",
                "cVar3": "is_zero_2",
                "cVar4": "is_zero_3",
                "cVar5": "is_zero_4",
                "pbVar6": "next_byte",
                "puVar7": "next_word",
                "pbVar8": "found_sequence",
                "uVar9": "alignment_offset",
                "uVar10": "aligned_size",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "is_nonzero_1",
                "bVar14": "is_nonzero_2",
                "bVar15": "is_nonzero_3",
                "bVar16": "is_nonzero_4"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_data_000060b0",
            "code": "\nvoid copyData_000060b0(int outputOffset,undefined *inputData,int inputSize)\n\n{\n  undefined *currentInput;\n  undefined *endInput;\n  undefined *currentOutput;\n  \n  endInput = inputData + inputSize;\n  currentOutput = (undefined *)(outputOffset + -1);\n  if (inputData != endInput) {\n    do {\n      currentInput = inputData + 1;\n      currentOutput = currentOutput + 1;\n      *currentOutput = *inputData;\n      inputData = currentInput;\n    } while (currentInput != endInput);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_data_000060b0",
                "param_1": "outputOffset",
                "param_2": "inputData",
                "param_3": "inputSize",
                "puVar1": "currentInput",
                "puVar2": "endInput",
                "puVar3": "currentOutput"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "process_data_000060cc",
            "code": "\nint processData_000060cc(undefined4 input,int size,uint limit,undefined4 extraData)\n\n{\n  int result;\n  uint randomValue;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      randomValue = FUN_00006964();\n      result = size;\n      if ((randomValue < limit) && (result = FUN_00004bd0(input,limit), result != 0)) {\n        FUN_000060b0(result,size,limit);\n        FUN_00004b34(input,size);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(input,limit,limit,extraData);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "process_data_000060cc",
                "param_1": "input",
                "param_2": "size",
                "param_3": "limit",
                "param_4": "extraData",
                "iVar1": "result",
                "uVar2": "randomValue"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "update_parameter_00006192",
            "code": "\nundefined4 updateParameter_00006192(undefined4 input,undefined4 *parameters)\n\n{\n  if ((undefined4 *)ptr_to_param_d != (undefined4 *)0x0) {\n    if ((undefined4 *)ptr_to_param_d != parameters + 0x11) {\n      FUN_00004b34();\n    }\n    param_2_1 = param_2_10;\n    ptr_to_param_d = 0;\n    if (param_2_10 != 0) {\n      *parameters = param_2_f;\n      return 0;\n    }\n  }\n  *parameters = param_2_4;\n  param_2_1 = 0;\n  *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "update_parameter_00006192",
                "param_1": "input",
                "param_2": "parameters",
                "param_2[0xd]": "ptr_to_param_d",
                "param_2[1]": "param_2_1",
                "param_2[0x10]": "param_2_10",
                "param_2[0xf]": "param_2_f",
                "param_2[4]": "param_2_4"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_input_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseInput_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint tempVar;\n  byte *ptrByteVar;\n  uint byteVar;\n  int **ptrParam4;\n  undefined stackBuffer [256];\n  uint flag1;\n  undefined4 flag2;\n  uint tempFlag1;\n  int returnValue;\n  int counter1;\n  undefined *localBuffer;\n  int counter2;\n  undefined *ptrFunction1;\n  code *ptrFunction2;\n  \n  returnValue = 0;\n  counter1 = 0;\n  ptrFunction1 = &LAB_00006118_1;\n  ptrFunction2 = FUN_00006192 + 1;\n  ptrParam4 = param4;\n  localBuffer = stackBuffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      byteVar = (uint)*param3;\n      if (byteVar == 0) {\n        return returnValue;\n      }\n      tempVar = (byte)(&DAT_00007a99)[byteVar] & 8;\n      ptrByteVar = param3 + 1;\n      if (((&DAT_00007a99)[byteVar] & 8) == 0) break;\n      while (((param3 = ptrByteVar, 0 < (int)param2[1] ||\n              (result = (*ptrFunction2)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter1 = counter1 + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (byteVar == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*ptrFunction2)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != byteVar) {\n      return returnValue;\n    }\n    *param2 = *param2 + 1;\n    counter1 = counter1 + 1;\n    param2[1] = param2[1] + -1;\n    param3 = ptrByteVar;\n  }\n  tempFlag1 = tempVar;\n  flag1 = tempVar;\n  if (param3[1] == 0x2a) {\n    ptrByteVar = param3 + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    tempVar = (uint)*ptrByteVar;\n    if (9 < tempVar - 0x30) break;\n    ptrByteVar = ptrByteVar + 1;\n    tempFlag1 = (tempFlag1 * 10 + tempVar) - 0x30;\n  }\n  result = FUN_00006010(&DAT_00007c02,tempVar,3);\n  if (result != 0) {\n    flag1 = 1 << (result - 0x7c02U & 0xff) | flag1;\n    ptrByteVar = ptrByteVar + 1;\n  }\n  param3 = ptrByteVar + 1;\n  tempVar = (uint)*ptrByteVar;\n  if (tempVar < 0x79) {\n    if (0x57 < tempVar) {\n      switch(tempVar) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)FUN_0000687c(stackBuffer,param3);\n        flag1 = flag1 | 0x40;\n        counter2 = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        counter2 = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (tempVar < 0x6f) {\n          counter2 = 3;\n        }\n        else {\n          counter2 = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        counter2 = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        counter2 = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*ptrParam4 = (short)counter1;\n            ptrParam4 = ptrParam4 + 1;\n          }\n          else {\n            **ptrParam4 = counter1;\n            ptrParam4 = ptrParam4 + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        counter2 = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        counter2 = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*ptrFunction2)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter1 = counter1 + 1;\n          ptrByteVar = param2[1];\n          param2[1] = ptrByteVar + -1;\n          if ((int)(ptrByteVar + -1) < 1) {\n            result = (*ptrFunction2)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (counter2 < 3) {\n        result = FUN_000064bc(param1,&flag1,param2,&ptrParam4);\n      }\n      else {\n        if (4 < counter2) goto LAB_000061f6;\n        result = FUN_0000656c(param1,&flag1,param2,&ptrParam4);\n      }\n      if (result == 1) {\n        return returnValue;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    ptrByteVar = param3;\n    if (tempVar == 0x25) goto LAB_00006352;\n    if (tempVar < 0x26) {\n      if (tempVar != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (tempVar - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  counter2 = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_input_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "tempVar",
                "pbVar3": "ptrByteVar",
                "uVar4": "byteVar",
                "local_2b0": "ptrParam4",
                "auStack_2ac": "stackBuffer",
                "local_1ac": "flag1",
                "local_1a8": "flag2",
                "local_1a4": "tempFlag1",
                "local_1a0": "returnValue",
                "local_19c": "counter1",
                "local_198": "localBuffer",
                "local_194": "counter2",
                "local_30": "ptrFunction1",
                "local_2c": "ptrFunction2"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_value,uint *params,byte **data_ptrs,undefined4 *result_ptr)\n\n{\n  int temp_var_1;\n  uint temp_var_2;\n  byte **temp_var_3;\n  byte *temp_var_4;\n  byte *temp_var_5;\n  byte *temp_var_6;\n  int loop_counter;\n  \n  if (params[2] == 0) {\n    if (params[6] == 0) {\n      temp_var_2 = 1;\n    }\n    else {\n      temp_var_2 = 0xffffffff;\n    }\n    params[2] = temp_var_2;\n  }\n  if (-1 < (int)(*params << 0x1b)) {\n    temp_var_3 = (byte **)*result_ptr;\n    *result_ptr = temp_var_3 + 1;\n    temp_var_5 = *temp_var_3;\n  }\n  loop_counter = 0;\n  do {\n    temp_var_2 = params[6];\n    if (temp_var_2 != 0) {\n      if (temp_var_2 == 1) {\n        if (*(char *)(params[5] + (uint)**data_ptrs) == '\\0') {\n          if (loop_counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*params & 0x10) == 0) && (params[3] = params[3] + 1, params[6] != 0)) {\n            *temp_var_5 = 0;\n          }\n          params[4] = loop_counter + params[4];\n          return 0;\n        }\n      }\n      else if ((temp_var_2 != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data_ptrs] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    temp_var_6 = temp_var_5;\n    if (-1 < (int)(*params << 0x1b)) {\n      temp_var_6 = temp_var_5 + 1;\n      *temp_var_5 = **data_ptrs;\n    }\n    temp_var_4 = data_ptrs[1];\n    *data_ptrs = *data_ptrs + 1;\n    temp_var_2 = params[2] - 1;\n    data_ptrs[1] = temp_var_4 + -1;\n    loop_counter = loop_counter + 1;\n    params[2] = temp_var_2;\n    temp_var_5 = temp_var_6;\n    if ((temp_var_2 == 0) ||\n       (((int)(temp_var_4 + -1) < 1 &&\n        (temp_var_1 = (*(code *)params[0x60])(input_value,data_ptrs,temp_var_2,(code *)params[0x60],result_ptr),\n        temp_var_1 != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_value",
                "param_2": "params",
                "param_3": "data_ptrs",
                "param_4": "result_ptr",
                "iVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "ppbVar3": "temp_var_3",
                "pbVar4": "temp_var_4",
                "unaff_r6": "temp_var_5",
                "pbVar5": "temp_var_6",
                "iVar6": "loop_counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 param1,uint *param2,byte **param3,undefined4 *param4)\n\n{\n  int result;\n  undefined4 returnValue;\n  code *functionPointer;\n  uint tempValue;\n  byte *bytePointer;\n  uint tempVariable;\n  undefined4 *param4Pointer;\n  uint *bytePointer2;\n  uint *bytePointer3;\n  uint *bytePointer4;\n  int unaffected_r9;\n  int counter;\n  undefined *arrayOfBytes [4];\n  \n  arrayOfBytes[0] = &DAT_00007c2f;\n  arrayOfBytes[1] = &DAT_00007c32;\n  arrayOfBytes[2] = &DAT_00007c35;\n  functionPointer = (code *)&UNK_00004f81;\n  if (param2[6] != 3) {\n    functionPointer = (code *)&UNK_00005fd5;\n  }\n  tempVariable = param2[2];\n  tempValue = tempVariable - 1;\n  if (0x15c < tempValue) {\n    unaffected_r9 = tempVariable - 0x15d;\n    tempVariable = 0x15d;\n  }\n  if (0x15c < tempValue) {\n    param2[2] = tempVariable;\n  }\n  bytePointer4 = param2 + 7;\n  if (tempValue < 0x15d) {\n    unaffected_r9 = 0;\n  }\n  *param2 = *param2 | 0xd00;\n  counter = 0;\n  bytePointer3 = bytePointer4;\n  do {\n    result = FUN_00006010(arrayOfBytes[counter],**param3,2);\n    if (result != 0) {\n      if (counter == 1) {\n        if (param2[1] == 0) {\n          param2[1] = 8;\n          *param2 = *param2 | 0x200;\n        }\n        tempValue = *param2 & 0xfffffaff;\nLAB_000065f4:\n        *param2 = tempValue;\n      }\n      else if (counter == 2) {\n        if ((*param2 & 0x600) != 0x200) goto LAB_00006624;\n        param2[1] = 0x10;\n        tempValue = *param2 | 0x100;\n        goto LAB_000065f4;\n      }\n      tempValue = param2[2];\n      param2[2] = tempValue - 1;\n      if (tempValue != 0) {\n        bytePointer = *param3;\n        *param3 = bytePointer + 1;\n        bytePointer2 = (uint *)((int)bytePointer3 + 1);\n        *(byte *)bytePointer3 = *bytePointer;\n        bytePointer = param3[1];\n        param3[1] = bytePointer + -1;\n        bytePointer3 = bytePointer2;\n        if (((int)(bytePointer + -1) < 1) &&\n           (result = (*(code *)param2[0x60])(param1,param3), result != 0)) {\n          counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    counter = counter + 1;\n  } while (counter != 3);\n  if (param2[1] == 0) {\n    param2[1] = 10;\n  }\n  FUN_0000687c(param2[5],\"01234567]\" + (8 - param2[1]));\n  counter = 0;\n  while( true ) {\n    bytePointer2 = bytePointer3;\n    if (param2[2] == 0) break;\n    bytePointer = *param3;\n    tempValue = (uint)*bytePointer;\n    if (*(char *)(param2[5] + tempValue) == '\\0') break;\n    if ((tempValue == 0x30) && ((int)(*param2 << 0x14) < 0)) {\n      counter = counter + 1;\n      if (unaffected_r9 != 0) {\n        unaffected_r9 = unaffected_r9 + -1;\n        param2[2] = param2[2] + 1;\n      }\n    }\n    else {\n      *param2 = *param2 & 0xfffff6ff;\n      bytePointer2 = (uint *)((int)bytePointer3 + 1);\n      *(byte *)bytePointer3 = *bytePointer;\n    }\n    bytePointer = param3[1];\n    param3[1] = bytePointer + -1;\n    if ((int)(bytePointer + -1) < 1) {\n      result = (*(code *)param2[0x60])(param1,param3);\n      if (result != 0) break;\n    }\n    else {\n      *param3 = *param3 + 1;\n    }\n    param2[2] = param2[2] - 1;\n    bytePointer3 = bytePointer2;\n  }\nLAB_000066ca:\n  if ((int)(*param2 << 0x17) < 0) {\n    if (bytePointer4 < bytePointer2) {\n      (*(code *)param2[0x5f])(param1,*(byte *)((int)bytePointer2 + -1),param3);\n      bytePointer2 = (uint *)((int)bytePointer2 + -1);\n    }\n    if (bytePointer2 == bytePointer4) {\n      return 1;\n    }\n  }\n  if ((*param2 & 0x10) == 0) {\n    *(byte *)bytePointer2 = 0;\n    returnValue = (*functionPointer)(param1,bytePointer4,0,param2[1]);\n    param4Pointer = (undefined4 *)*param4;\n    tempValue = *param2;\n    *param4 = param4Pointer + 1;\n    param4Pointer = (undefined4 *)*param4Pointer;\n    if ((tempValue & 0x20) == 0) {\n      if ((int)(tempValue << 0x1f) < 0) {\n        *(short *)param4Pointer = (short)returnValue;\n      }\n      else {\n        *param4Pointer = returnValue;\n      }\n    }\n    else {\n      *param4Pointer = returnValue;\n    }\n    param2[3] = param2[3] + 1;\n  }\n  param2[4] = (uint)((int)bytePointer2 + param2[4] + (counter - (int)bytePointer4));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "returnValue",
                "pcVar3": "functionPointer",
                "uVar4": "tempValue",
                "pbVar5": "bytePointer",
                "uVar6": "tempVariable",
                "puVar7": "param4Pointer",
                "puVar8": "bytePointer2",
                "puVar9": "bytePointer3",
                "puVar10": "bytePointer4",
                "unaff_r9": "unaffected_r9",
                "iVar11": "counter",
                "local_34": "arrayOfBytes"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *dataPointer,undefined4 *infoPointer,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined2 var1;\n  int var2;\n  undefined4 var3;\n  ushort var4;\n  uint var5;\n  \n  if ((dataPointer != (undefined4 *)0x0) && (dataPointer[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (infoPointer == &DAT_000079b8) {\n    infoPointer = (undefined4 *)dataPointer[1];\n  }\n  else if (infoPointer == (undefined4 *)&DAT_000079d8) {\n    infoPointer = (undefined4 *)dataPointer[2];\n  }\n  else if (infoPointer == (undefined4 *)&DAT_00007998) {\n    infoPointer = (undefined4 *)dataPointer[3];\n  }\n  var4 = *(ushort *)(infoPointer + 3);\n  infoPointer[1] = 0;\n  var5 = (uint)*(ushort *)(infoPointer + 3);\n  if ((int)(var5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(var5 << 0x1d) < 0) {\n    if ((undefined4 *)infoPointer[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)infoPointer[0xd] != infoPointer + 0x11) {\n        FUN_00004b34(dataPointer);\n      }\n      infoPointer[1] = infoPointer[0x10];\n      infoPointer[0xd] = 0;\n      if (infoPointer[0x10] != 0) {\n        *infoPointer = infoPointer[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(var5 << 0x1b)) {\n      *dataPointer = 9;\n      var4 = var4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(var5 << 0x1c) < 0) {\n      var2 = FUN_00004158(dataPointer,infoPointer,var5 << 0x1c,var5,arg2);\n      if (var2 != 0) {\n        return 0xffffffff;\n      }\n      infoPointer[2] = 0;\n      *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) & 0xfff7;\n      infoPointer[6] = 0;\n    }\n    *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 4;\n  }\n  if (infoPointer[4] == 0) {\n    FUN_00005700(dataPointer,infoPointer);\n  }\n  var4 = *(ushort *)(infoPointer + 3);\n  var1 = *(undefined2 *)(infoPointer + 3);\n  if ((var4 & 3) != 0) {\n    *(undefined2 *)(infoPointer + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(infoPointer + 3) = var1;\n    if ((var4 & 9) == 9) {\n      FUN_0000404c(dataPointer,infoPointer);\n    }\n  }\n  var3 = infoPointer[4];\n  *infoPointer = var3;\n  var2 = (*(code *)infoPointer[9])(dataPointer,infoPointer[8],var3,infoPointer[5]);\n  infoPointer[1] = var2;\n  if (0 < var2) {\n    return 0;\n  }\n  var4 = *(ushort *)(infoPointer + 3);\n  if (var2 != 0) {\n    var3 = 0;\n  }\n  else {\n    var4 = var4 | 0x20;\n  }\n  if (var2 != 0) {\n    infoPointer[1] = var3;\n    var4 = var4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(infoPointer + 3) = var4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "dataPointer",
                "param_2": "infoPointer",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "var1",
                "iVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decode_and_modify_data_0000687c",
            "code": "\nbyte * decode_and_modify_data_0000687c(int data_length,byte *data)\n\n{\n  byte *decoded_data;\n  uint temp_var;\n  int loop_counter;\n  uint first_byte;\n  uint current_byte;\n  uint next_byte;\n  bool is_5e;\n  \n  first_byte = (uint)*data;\n  is_5e = first_byte == 0x5e;\n  if (is_5e) {\n    first_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  loop_counter = data_length + -1;\n  do {\n    loop_counter = loop_counter + 1;\n    *(bool *)loop_counter = is_5e;\n  } while (loop_counter != data_length + 0xff);\n  if (first_byte == 0) {\n    decoded_data = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      current_byte = first_byte;\n      *(bool *)(data_length + current_byte) = !is_5e;\n      data = data + 1;\n      while( true ) {\n        first_byte = (uint)data[-1];\n        if (first_byte != 0x2d) break;\n        next_byte = (uint)*data;\n        if ((next_byte == 0x5d) || (temp_var = current_byte, (int)next_byte < (int)current_byte)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(data_length + temp_var) = !is_5e;\n        } while ((int)temp_var < (int)next_byte);\n        loop_counter = ~current_byte + next_byte;\n        if ((int)next_byte <= (int)current_byte) {\n          loop_counter = 0;\n        }\n        current_byte = current_byte + 1 + loop_counter;\n        data = data + 2;\n      }\n      decoded_data = data;\n    } while ((first_byte != 0x5d) && (decoded_data = data + -1, first_byte != 0));\n  }\n  return decoded_data;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decode_and_modify_data_0000687c",
                "param_1": "data_length",
                "param_2": "data",
                "pbVar1": "decoded_data",
                "uVar2": "temp_var",
                "iVar3": "loop_counter",
                "uVar4": "first_byte",
                "uVar5": "current_byte",
                "uVar6": "next_byte",
                "bVar7": "is_5e"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "initialize_buffer_000068f0",
            "code": "\nundefined4 initializeBuffer_000068f0(undefined4 arg1,int *buffer)\n\n{\n  int newAddress;\n  int bufferSize;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    newAddress = FUN_00004bd0(arg1,0x400);\n    if (newAddress != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = newAddress;\n      *(undefined *)(newAddress + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(newAddress + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(newAddress + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = newAddress + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    bufferSize = buffer[0xe];\n    newAddress = FUN_000060cc(arg1,(int *)buffer[0xd],bufferSize << 1);\n    if (newAddress != 0) {\n      FUN_000060b0(newAddress + bufferSize,newAddress,bufferSize);\n      buffer[0xd] = newAddress;\n      buffer[0xe] = bufferSize << 1;\n      *buffer = newAddress + bufferSize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "initialize_buffer_000068f0",
                "param_1": "arg1",
                "param_2": "buffer",
                "iVar1": "newAddress",
                "iVar2": "bufferSize"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_result_00006964",
            "code": "\nint calculateResult_00006964(undefined4 result,int input)\n\n{\n  int sum;\n  \n  sum = *(int *)(input + -4) + -4;\n  if (*(int *)(input + -4) < 0) {\n    sum = sum + *(int *)(input + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_result_00006964",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "get_max_value_00006974",
            "code": "\nundefined8 get_max_value_00006974(int input1,int input2,int input3,int input4)\n\n{\n  int negative_input2;\n  undefined8 result;\n  undefined temp_array [8];\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 < 0) {\n      input1 = 0;\n      input2 = -0x80000000;\n    }\n    else if (input2 != 0 || input1 != 0) {\n      input2 = 0x7fffffff;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  if (input2 < 0) {\n    negative_input2 = -input2 - (uint)(input1 != 0);\n    if (input4 < 0) {\n      result = FUN_00006a14(-input1,negative_input2,-input3,-input4 - (uint)(input3 != 0),temp_array);\n      return result;\n    }\n    result = FUN_00006a14(-input1,negative_input2,input3,input4,temp_array);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (input4 < 0) {\n    result = FUN_00006a14(input1,input2,-input3,-input4 - (uint)(input3 != 0),temp_array);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "get_max_value_00006974",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "negative_input2",
                "uVar2": "result",
                "local_8": "temp_array"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divmod_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divmod_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jump_table;\n  uint quotient_low;\n  int leading_zeros;\n  uint dividend_temp;\n  uint temp1;\n  uint quotient_low_temp;\n  uint remainder_temp;\n  uint divisor_temp;\n  uint quotient_high_temp;\n  uint quotient_high;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      leading_zeros = LZCOUNT(divisor);\n      quotient_low_temp = divisor;\n      if (leading_zeros != 0) {\n        quotient_low_temp = divisor << leading_zeros;\n        dividend_high = dividend >> (0x20U - leading_zeros & 0xff) | dividend_high << leading_zeros;\n        dividend = dividend << leading_zeros;\n      }\n      remainder_temp = quotient_low_temp >> 0x10;\n      quotient_high_temp = dividend_high / remainder_temp;\n      dividend_temp = dividend >> 0x10 | (dividend_high - remainder_temp * quotient_high_temp) * 0x10000;\n      quotient_low = quotient_high_temp * (quotient_low_temp & 0xffff);\n      temp1 = quotient_high_temp;\n      if (dividend_temp <= quotient_low && quotient_low - dividend_temp != 0) {\n        carry_flag = CARRY4(quotient_low_temp,dividend_temp);\n        dividend_temp = quotient_low_temp + dividend_temp;\n        temp1 = quotient_high_temp - 1;\n        if ((carry_flag == false) && (dividend_temp <= quotient_low && quotient_low - dividend_temp != 0)) {\n          temp1 = quotient_high_temp - 2;\n          dividend_temp = dividend_temp + quotient_low_temp;\n        }\n      }\n      quotient_high_temp = (dividend_temp - quotient_low) / remainder_temp;\n      remainder_temp = dividend & 0xffff | ((dividend_temp - quotient_low) - remainder_temp * quotient_high_temp) * 0x10000;\n      dividend_temp = quotient_high_temp * (quotient_low_temp & 0xffff);\n      quotient_low = quotient_high_temp;\n      if (remainder_temp <= dividend_temp && dividend_temp - remainder_temp != 0) {\n        carry_flag = CARRY4(quotient_low_temp,remainder_temp);\n        remainder_temp = quotient_low_temp + remainder_temp;\n        quotient_low = quotient_high_temp - 1;\n        if ((carry_flag == false) && (remainder_temp <= dividend_temp && dividend_temp - remainder_temp != 0)) {\n          quotient_low = quotient_high_temp - 2;\n          remainder_temp = remainder_temp + quotient_low_temp;\n        }\n      }\n      remainder_temp = remainder_temp - dividend_temp;\n      quotient_low = quotient_low | temp1 << 0x10;\n      quotient_low_temp = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      leading_zeros = LZCOUNT(divisor);\n      if (leading_zeros == 0) {\n        dividend_high = dividend_high - divisor;\n        quotient_high = divisor >> 0x10;\n        divisor_temp = divisor & 0xffff;\n        quotient_low_temp = 1;\n        temp1 = divisor;\n      }\n      else {\n        temp1 = divisor << leading_zeros;\n        quotient_high = temp1 >> 0x10;\n        quotient_low = dividend_high >> (0x20U - leading_zeros & 0xff);\n        quotient_low_temp = dividend >> (0x20U - leading_zeros & 0xff) | dividend_high << leading_zeros;\n        dividend_temp = quotient_low / quotient_high;\n        divisor_temp = temp1 & 0xffff;\n        quotient_high_temp = quotient_low_temp >> 0x10 | (quotient_low - quotient_high * dividend_temp) * 0x10000;\n        remainder_temp = dividend_temp * divisor_temp;\n        dividend = dividend << leading_zeros;\n        quotient_low = dividend_temp;\n        if (quotient_high_temp <= remainder_temp && remainder_temp - quotient_high_temp != 0) {\n          carry_flag = CARRY4(temp1,quotient_high_temp);\n          quotient_high_temp = temp1 + quotient_high_temp;\n          quotient_low = dividend_temp - 1;\n          if ((carry_flag == false) && (quotient_high_temp <= remainder_temp && remainder_temp - quotient_high_temp != 0)) {\n            quotient_low = dividend_temp - 2;\n            quotient_high_temp = quotient_high_temp + temp1;\n          }\n        }\n        dividend_temp = (quotient_high_temp - remainder_temp) / quotient_high;\n        dividend_high = quotient_low_temp & 0xffff | ((quotient_high_temp - remainder_temp) - quotient_high * dividend_temp) * 0x10000;\n        remainder_temp = dividend_temp * divisor_temp;\n        quotient_low_temp = dividend_temp;\n        if (dividend_high <= remainder_temp && remainder_temp - dividend_high != 0) {\n          carry_flag = CARRY4(temp1,dividend_high);\n          dividend_high = temp1 + dividend_high;\n          quotient_low_temp = dividend_temp - 1;\n          if ((carry_flag == false) && (dividend_high <= remainder_temp && remainder_temp - dividend_high != 0)) {\n            quotient_low_temp = dividend_temp - 2;\n            dividend_high = dividend_high + temp1;\n          }\n        }\n        dividend_high = dividend_high - remainder_temp;\n        quotient_low_temp = quotient_low_temp | quotient_low << 0x10;\n      }\n      quotient_high_temp = dividend_high / quotient_high;\n      remainder_temp = dividend >> 0x10 | (dividend_high - quotient_high * quotient_high_temp) * 0x10000;\n      quotient_low = divisor_temp * quotient_high_temp;\n      dividend_temp = quotient_high_temp;\n      if (remainder_temp <= quotient_low && quotient_low - remainder_temp != 0) {\n        carry_flag = CARRY4(temp1,remainder_temp);\n        remainder_temp = temp1 + remainder_temp;\n        dividend_temp = quotient_high_temp - 1;\n        if ((carry_flag == false) && (remainder_temp <= quotient_low && quotient_low - remainder_temp != 0)) {\n          dividend_temp = quotient_high_temp - 2;\n          remainder_temp = remainder_temp + temp1;\n        }\n      }\n      quotient_high_temp = (remainder_temp - quotient_low) / quotient_high;\n      remainder_temp = dividend & 0xffff | ((remainder_temp - quotient_low) - quotient_high * quotient_high_temp) * 0x10000;\n      divisor_temp = divisor_temp * quotient_high_temp;\n      quotient_low = quotient_high_temp;\n      if (remainder_temp <= divisor_temp && divisor_temp - remainder_temp != 0) {\n        carry_flag = CARRY4(temp1,remainder_temp);\n        remainder_temp = temp1 + remainder_temp;\n        quotient_low = quotient_high_temp - 1;\n        if ((carry_flag == false) && (remainder_temp <= divisor_temp && divisor_temp - remainder_temp != 0)) {\n          quotient_low = quotient_high_temp - 2;\n          remainder_temp = remainder_temp + temp1;\n        }\n      }\n      remainder_temp = remainder_temp - divisor_temp;\n      quotient_low = quotient_low | dividend_temp << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = remainder_temp >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient_low = 0;\n    quotient_low_temp = 0;\n  }\n  else {\n    leading_zeros = LZCOUNT(divisor_high);\n    if (leading_zeros != 0) {\n      divisor_temp = 0x20 - leading_zeros;\n      dividend_temp = divisor >> (divisor_temp & 0xff) | divisor_high << leading_zeros;\n      quotient_high = dividend_temp >> 0x10;\n      quotient_low = dividend_high >> (divisor_temp & 0xff);\n      quotient_low_temp = dividend >> (divisor_temp & 0xff) | dividend_high << leading_zeros;\n      remainder_temp = quotient_low / quotient_high;\n      temp1 = quotient_low_temp >> 0x10 | (quotient_low - quotient_high * remainder_temp) * 0x10000;\n      quotient_high_temp = remainder_temp * (dividend_temp & 0xffff);\n      dividend = dividend << leading_zeros;\n      quotient_low = remainder_temp;\n      if (temp1 <= quotient_high_temp && quotient_high_temp - temp1 != 0) {\n        carry_flag = CARRY4(dividend_temp,temp1);\n        temp1 = dividend_temp + temp1;\n        quotient_low = remainder_temp - 1;\n        if ((carry_flag == false) && (temp1 <= quotient_high_temp && quotient_high_temp - temp1 != 0)) {\n          quotient_low = remainder_temp - 2;\n          temp1 = temp1 + dividend_temp;\n        }\n      }\n      remainder_temp = (temp1 - quotient_high_temp) / quotient_high;\n      temp1 = quotient_low_temp & 0xffff | ((temp1 - quotient_high_temp) - quotient_high * remainder_temp) * 0x10000;\n      quotient_high_temp = remainder_temp * (dividend_temp & 0xffff);\n      quotient_low_temp = remainder_temp;\n      if (temp1 <= quotient_high_temp && quotient_high_temp - temp1 != 0) {\n        carry_flag = CARRY4(dividend_temp,temp1);\n        temp1 = dividend_temp + temp1;\n        quotient_low_temp = remainder_temp - 1;\n        if ((carry_flag == false) && (temp1 <= quotient_high_temp && quotient_high_temp - temp1 != 0)) {\n          quotient_low_temp = remainder_temp - 2;\n          temp1 = temp1 + dividend_temp;\n        }\n      }\n      quotient_low_temp = quotient_low_temp | quotient_low << 0x10;\n      result = (ulonglong)quotient_low_temp * (ulonglong)(divisor << leading_zeros);\n      if (CONCAT44(temp1 - quotient_high_temp,dividend) < result) {\n        result = result - CONCAT44(dividend_temp,divisor << leading_zeros);\n        quotient_low_temp = quotient_low_temp - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient_low = ((temp1 - quotient_high_temp) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient_low << (divisor_temp & 0xff) | dividend - (uint)result >> leading_zeros;\n        remainder[1] = quotient_low >> leading_zeros;\n      }\n      return (ulonglong)quotient_low_temp;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n      quotient_low = 1;\n    }\n    else {\n      quotient_low = 0;\n    }\n    quotient_low_temp = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(quotient_low_temp,quotient_low);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divmod_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uVar1": "quotient_low",
                "iVar2": "leading_zeros",
                "uVar3": "dividend_temp",
                "uVar4": "temp1",
                "uVar5": "quotient_low_temp",
                "uVar6": "remainder_temp",
                "uVar7": "divisor_temp",
                "uVar8": "quotient_high_temp",
                "uVar9": "quotient_high",
                "bVar10": "carry_flag",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 138926,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}