{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_memory_00000410",
            "code": "\nvoid initializeMemory_00000410(void)\n\n{\n  initialize_memory_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_memory_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_relocation_offset_00000428",
            "code": "\ndword updateRelocationOffset_00000428(undefined4 *destinationPointer,int newOffset)\n\n{\n  undefined4 interruptStatus;\n  dword originalOffset;\n  \n  interruptStatus = check_irq_interrupts_status_00000cd0();\n  originalOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((newOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < newOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = newOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *destinationPointer = 0xc;\n    originalOffset = 0xffffffff;\n  }\n  enable_ir_qinterrupts_in_privileged_mode_00000d0c(interruptStatus);\n  return originalOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_relocation_offset_00000428",
                "param_1": "destinationPointer",
                "param_2": "newOffset",
                "uVar1": "interruptStatus",
                "local_c": "originalOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "find_last_equal_element_index_00000490",
            "code": "\nundefined4 findLastEqualElementIndex_00000490(undefined4 input1,undefined4 input2,undefined4 array,undefined4 element)\n\n{\n  undefined4 lastEqualElementIndex;\n  \n  lastEqualElementIndex = find_last_equal_element_index_00000e14(array,element);\n  return lastEqualElementIndex;\n}\n\n",
            "renaming": {
                "FUN_00000490": "find_last_equal_element_index_00000490",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "array",
                "param_4": "element",
                "uVar1": "lastEqualElementIndex"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initializeValueAndReturn_000004f2(undefined4 *outputValue)\n\n{\n  *outputValue = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "outputValue"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_pointer_00000514",
            "code": "\nundefined4 initializePointer_00000514(undefined4 *resultPointer)\n\n{\n  *resultPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_pointer_00000514",
                "param_1": "resultPointer"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_param_validity_00000534",
            "code": "\nundefined4 checkParamValidity_00000534(undefined4 *result,int inputParam)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((inputParam == 0) || (inputParam == 1)) || (inputParam == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_param_validity_00000534",
                "param_1": "result",
                "param_2": "inputParam",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "convert_to_int_00000566",
            "code": "\nint convertToInt_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "convert_to_int_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *sourcePointer,undefined4 *destinationPointer)\n\n{\n  if (*sourcePointer == 0) {\n    *destinationPointer = destinationPointer;\n  }\n  else {\n    *destinationPointer = *(undefined4 *)*sourcePointer;\n    *(undefined4 **)*sourcePointer = destinationPointer;\n  }\n  *sourcePointer = (int)destinationPointer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "sourcePointer",
                "param_2": "destinationPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_from_pointer_000005ca",
            "code": "\nundefined4 * extractValueFromPointer_000005ca(int *inputPtr)\n\n{\n  undefined4 *resultPtr;\n  \n  if (*inputPtr == 0) {\n    resultPtr = (undefined4 *)0x0;\n  }\n  else {\n    resultPtr = *(undefined4 **)*inputPtr;\n    if (resultPtr == (undefined4 *)*inputPtr) {\n      *inputPtr = 0;\n    }\n    else {\n      *(undefined4 *)*inputPtr = *resultPtr;\n    }\n  }\n  return resultPtr;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "inputPtr",
                "puVar1": "resultPtr"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "validate_and_update_data_00000610",
            "code": "\nundefined4 validate_and_update_data_00000610(void)\n\n{\n  int original_value;\n  int converted_index;\n  undefined4 result;\n  \n  original_value = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  converted_index = convert_index_to_int(DAT_1fff0424);\n  converted_index = **(int **)(&DAT_1fff03e4 + converted_index * 4);\n  if (original_value == converted_index + -8) {\n    result = 0;\n  }\n  else {\n    if ((original_value != 0) && (*(char *)(original_value + 4) == '\\t')) {\n      *(undefined *)(original_value + 4) = 10;\n    }\n    *(undefined *)(converted_index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(converted_index + -2);\n    result = 1;\n    DAT_1fff03dc = converted_index + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "validate_and_update_data_00000610",
                "iVar1": "original_value",
                "iVar2": "converted_index",
                "uVar3": "result",
                "convert_to_int_00000566": "convert_index_to_int"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_value_00000698",
            "code": "\nvoid updateValue_00000698(int input,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(input + 4)) &&\n       (extract_value_from_pointer_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(input + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(input + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(input + 5));\n    }\n  }\n  else if (*(byte *)(input + 4) < 9) {\n    update_pointer_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(input + 5) * 4,input + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(input + 5);\n  }\n  *(char *)(input + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_value_00000698",
                "param_1": "input",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_parameter_validity_00000738",
            "code": "\nvoid checkParameterValidity_00000738(ushort inputParam)\n\n{\n  int exceptionNumber;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputParam < *(byte *)(DAT_1fff03dc + 5))) {\n    exceptionNumber = get_exception_number_00000d2a();\n    if (exceptionNumber == 0) {\n      set_flag_in_register_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_parameter_validity_00000738",
                "param_1": "inputParam",
                "iVar1": "exceptionNumber"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_interrupt_handler_00000794",
            "code": "\nint * initializeInterruptHandler_00000794(void)\n\n{\n  int interruptStatus;\n  int counter;\n  undefined4 *ptrValue;\n  uint alignedPtrValue;\n  int loopCounter1;\n  int loopCounter2;\n  int *ptr;\n  \n  checkInterruptStatus();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  updateValue(DAT_1fff03dc,0);\n  ptrValue = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  runInterruptHandler();\n  alignedPtrValue = (int)ptrValue + counter & 0xfffffffc;\n  ptr = (int *)(alignedPtrValue - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedPtrValue - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = counter << 0xd;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    ptr = ptr + -1;\n    *ptr = loopCounter2;\n  }\n  ptr = ptr + -1;\n  *ptr = interruptStatus;\n  for (loopCounter1 = 0xb; 3 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    ptr = ptr + -1;\n    *ptr = loopCounter1;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_interrupt_handler_00000794",
                "extraout_r1": "interruptStatus",
                "iVar1": "counter",
                "puVar2": "ptrValue",
                "uVar3": "alignedPtrValue",
                "iStack_1c": "loopCounter1",
                "iStack_18": "loopCounter2",
                "piStack_14": "ptr",
                "check_irq_interrupts_status_00000cd0": "checkInterruptStatus",
                "update_value_00000698": "updateValue",
                "run_software_interrupt_handler_00000930": "runInterruptHandler"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param,int value,int size,int alignment)\n\n{\n  uint alignedSize;\n  int i;\n  int j;\n  int *ptr;\n  \n  alignedSize = alignment + size & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = value;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param",
                "param_2": "value",
                "param_3": "size",
                "param_4": "alignment",
                "uVar1": "alignedSize",
                "local_14": "i",
                "local_10": "j",
                "local_c": "ptr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_remaining_relocations_000008b8",
            "code": "\nint countRemainingRelocations_000008b8(void)\n\n{\n  Elf32_Rel *currentRelocation;\n  \n  for (currentRelocation = (Elf32_Rel *)&DAT_1fff0000;\n      (currentRelocation->r_offset == 0xe7fee7fe && (currentRelocation < endAddress));\n      currentRelocation = (Elf32_Rel *)&currentRelocation->r_info) {\n  }\n  return ((int)endAddress - (int)currentRelocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_remaining_relocations_000008b8",
                "local_c": "currentRelocation",
                "Elf32_Rel_ARRAY_1fff0200": "endAddress"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_stack_pointer_00000900",
            "code": "\nundefined4 getStackPointer_00000900(void)\n\n{\n  undefined4 stackPointer;\n  \n  stackPointer = getMainStackPointer();\n  return stackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_stack_pointer_00000900",
                "uVar1": "stackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_software_interrupt_handler_00000930",
            "code": "\nvoid runSoftwareInterruptHandler_00000930(void)\n\n{\n  checkIRQInterrupts();\n  triggerSoftwareInterrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_software_interrupt_handler_00000930",
                "check_irq_interrupts_00000cf0": "checkIRQInterrupts",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_flag_in_register_0000093c",
            "code": "\n\n\nvoid setFlagInRegister_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_flag_in_register_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_and_clear_memory_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_system_00000e64();\n  initialize_and_execute_functions_0000459c();\n  initialize_and_configure_memory_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_nmi_00000a30(void)\n\n{\n  int kernel_address;\n  \n  handle_kernel_panic_00000f04(4,\"NMI HANDLER\");\n  return &stack0xe000ffe0 + -*(int *)(kernel_address + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "kernel_address"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "check_irq_interrupts_status_00000cc0",
            "code": "\nundefined4 checkIRQInterruptsStatus_00000cc0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  handle_kernel_panic_00000f04(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)checkPrivilegeMode();\n  if (isCurrentModePrivileged) {\n    interruptsEnabled = checkIRQStatus();\n  }\n  disableIRQ();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "check_irq_interrupts_status_00000cc0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isCurrentModePrivileged",
                "isCurrentModePrivileged": "checkPrivilegeMode",
                "isIRQinterruptsEnabled": "checkIRQStatus",
                "disableIRQinterrupts": "disableIRQ"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_irq_interrupts_status_00000cd0",
            "code": "\nundefined4 checkIRQInterruptsStatus_00000cd0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabledStatus;\n  \n  interruptsEnabledStatus = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    interruptsEnabledStatus = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabledStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_irq_interrupts_status_00000cd0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "interruptsEnabledStatus"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_00000cf0",
            "code": "\nundefined4 checkIRQInterrupts_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_00000cf0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isPrivilegedMode"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_in_privileged_mode_00000d0c",
            "code": "\nvoid enableIRQinterruptsInPrivilegedMode_00000d0c(uint param)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkIfCurrentModeIsPrivileged();\n  if (isPrivilegedMode) {\n    enableIRQinterrupts((param & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_in_privileged_mode_00000d0c",
                "param_1": "param",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkIfCurrentModeIsPrivileged"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint offset_value,int multiplier)\n\n{\n  return multiplier * 4 + (offset_value & 0xf0000000 | (offset_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "offset_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 memoryAddress,undefined valueToStore)\n\n{\n  undefined4 *pointerToMemory;\n  \n  pointerToMemory = (undefined4 *)calculate_offset_00000d44(memoryAddress,valueToStore);\n  *pointerToMemory = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "memoryAddress",
                "param_2": "valueToStore",
                "puVar1": "pointerToMemory"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_memory_00000d9c",
            "code": "\nvoid clearMemory_00000d9c(void)\n\n{\n  clear_memory_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_memory_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_and_clear_memory_00000db0",
            "code": "\nvoid initialize_and_clear_memory_00000db0(void)\n\n{\n  initialize_memory_00000dcc();\n  clear_memory_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_and_clear_memory_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "check_irq_interrupts_00000dc0",
            "code": "\nvoid check_irq_interrupts_00000dc0(void)\n\n{\n  get_irq_interrupts_status();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "check_irq_interrupts_00000dc0",
                "check_irq_interrupts_status_00000cc0": "get_irq_interrupts_status"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_memory_00000df4",
            "code": "\nvoid initialize_memory_00000df4(void)\n\n{\n  initialize_memory_00000df4_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_memory_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "find_last_equal_element_index_00000e14",
            "code": "\nundefined4 find_last_equal_element_index_00000e14(undefined4 array_address,undefined4 element_value)\n\n{\n  undefined4 last_equal_element_index;\n  \n  last_equal_element_index = find_last_equal_element_index_00000e14_000012e2(0x1fff0204,array_address,element_value);\n  return last_equal_element_index;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "find_last_equal_element_index_00000e14",
                "param_1": "array_address",
                "param_2": "element_value",
                "uVar1": "last_equal_element_index"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_and_return_data_00000e38",
            "code": "\nundefined4 copy_and_return_data_00000e38(undefined4 source_data,undefined4 destination_data)\n\n{\n  copy_data_000015d0(0,source_data,destination_data);\n  return destination_data;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_and_return_data_00000e38",
                "param_1": "source_data",
                "param_2": "destination_data"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid run_infinite_loop_00000e58(void)\n\n{\n  check_irq_interrupts_status();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "check_irq_interrupts_status_00000cd0": "check_irq_interrupts_status"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_system_00000e64",
            "code": "\n\n\nvoid initialize_system_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_system_00000e64_and_hardware();\n  update_data_and_mask(0x2056,0x80);\n  update_data_and_mask(0x511a,0x80);\n  update_data_and_mask(0x2055,0x80);\n  set_bit_at_index(0x2056);\n  set_bit_at_index(0x511a);\n  set_bit_at_index(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_system_00000e64",
                "initialize_system_and_hardware_00001274": "initialize_system_and_hardware",
                "update_data_and_mask_00001eea": "update_data_and_mask",
                "set_bit_at_index_00001ff6": "set_bit_at_index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 initialReturn;\n  \n  process_and_format_data_00004c84(&DAT_00006f58,initialReturn);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "initialReturn"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char kernelPanicType,undefined4 panicMessage)\n\n{\n  undefined4 stackPointer;\n  code *jumpTable;\n  undefined4 panicMessageCopy;\n  char kernelPanicTypeCopy;\n  \n  panicMessageCopy = panicMessage;\n  kernelPanicTypeCopy = kernelPanicType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (kernelPanicType == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    process_and_format_data_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",panicMessageCopy);\n    print_process_information_0000211c();\n    process_and_format_data_00004c84(&DAT_00006f78);\n    process_and_format_data_00004c84(\"*** halted.\\n\\n\");\n  }\n  check_irq_interrupts_status_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  run_infinite_loop_00000e58();\n  stackPointer = (int)&stackPointer + 1;\n  FUNC_00002400();\n  process_and_format_data_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "kernelPanicType",
                "param_2": "panicMessage",
                "uStack_18": "stackPointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "panicMessageCopy",
                "local_9": "kernelPanicTypeCopy"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_and_configure_memory_00000f8c",
            "code": "\nvoid initialize_and_configure_memory_00000f8c(void)\n\n{\n  uint upper_bits;\n  undefined4 *ptr_array;\n  uint loop_index;\n  int temp_stack_var;\n  int *pointer_to_temp_stack_var;\n  undefined4 software_interrupt_code;\n  undefined4 local_18;\n  undefined4 local_14;\n  dword local_10;\n  \n  check_irq_interrupts_status_00000cd0();\n  local_10 = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  local_14 = 0;\n  local_18 = 0xf81;\n  initialize_memory_region_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  local_10 = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  local_14 = 0;\n  local_18 = 0xf5d;\n  loop_index = 0xc;\n  initialize_memory_region_000010d4(&DAT_1fff046c,0x600,7);\n  software_interrupt_code = 0xfd3;\n  upper_bits = run_software_interrupt_handler_00000930();\n  upper_bits = upper_bits >> 0x1e;\n  ptr_array = (undefined4 *)(loop_index * 0x100);\n  temp_stack_var = (loop_index >> 0x1d) << 0x11;\n  pointer_to_temp_stack_var = &temp_stack_var;\n  if ((upper_bits & upper_bits - 1) != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *ptr_array = 0;\n  ptr_array[1] = 0;\n  ptr_array[2] = upper_bits - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_and_configure_memory_00000f8c",
                "uVar1": "upper_bits",
                "puVar2": "ptr_array",
                "uVar3": "loop_index",
                "iStack_24": "temp_stack_var",
                "piStack_20": "pointer_to_temp_stack_var",
                "uStack_1c": "software_interrupt_code"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_param_00000fec",
            "code": "\nvoid initializeParam_00000fec(undefined4 *paramArray,uint arrayLength)\n\n{\n  if ((arrayLength & arrayLength - 1) != 0) {\n    handleKernelPanic(3,\"FAILED ASSERTION.\");\n  }\n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = arrayLength - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_param_00000fec",
                "param_1": "paramArray",
                "param_2": "arrayLength",
                "param_1[1]": "paramArray[1]",
                "param_1[2]": "paramArray[2]",
                "handle_kernel_panic_00000f04": "handleKernelPanic"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_and_update_pointer_00001034",
            "code": "\nvoid findAndUpdatePointer_00001034(int **pointerList,int kernelData)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(kernelData + 4)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerList;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(kernelData + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(kernelData + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(kernelData + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_and_update_pointer_00001034",
                "param_1": "pointerList",
                "param_2": "kernelData",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_offset_000010a0",
            "code": "\nint calculate_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_offset_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_memory_region_000010d4",
            "code": "\nint initializeMemoryRegion_000010d4(uint startAddress,int endAddress,byte size,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 interruptStatus;\n  undefined4 initializedValue;\n  int returnValue;\n  uint alignedEndAddress;\n  undefined4 *memoryPointer;\n  int alignmentOffset;\n  uint alignedStartAddress;\n  uint loopIndex;\n  short foundIndex;\n  short availableIndex;\n  \n  if (size < 0x10) {\n    alignmentOffset = endAddress;\n    alignedStartAddress = startAddress;\n    if ((startAddress & 3) != 0) {\n      alignmentOffset = 4 - (startAddress & 3);\n      alignedStartAddress = alignmentOffset + startAddress;\n      alignmentOffset = endAddress - alignmentOffset;\n    }\n    alignedEndAddress = alignmentOffset - 0x30U & 0xfffffffc;\n    memoryPointer = (undefined4 *)(alignedEndAddress + alignedStartAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedStartAddress = alignedStartAddress;\n    }\n    else {\n      for (loopIndex = alignedStartAddress; loopIndex < alignedEndAddress + alignedStartAddress; loopIndex = loopIndex + 4) {\n        *(uint *)loopIndex = loopIndex;\n      }\n    }\n    interruptStatus = check_irq_interrupts_status_00000cd0();\n    availableIndex = 0;\n    for (foundIndex = 1; foundIndex < 0x21; foundIndex = foundIndex + 1) {\n      if (*(int *)(&DAT_1fff0358 + foundIndex * 4) == 0) {\n        availableIndex = foundIndex;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      enable_ir_qinterrupts_in_privileged_mode_00000d0c(interruptStatus);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = memoryPointer;\n      *(short *)((int)memoryPointer + 6) = availableIndex;\n      initializedValue = initialize_memory_000007dc(param5,param6,alignedStartAddress,alignedEndAddress);\n      *memoryPointer = initializedValue;\n      memoryPointer[9] = alignedStartAddress;\n      memoryPointer[0xb] = endAddress;\n      memoryPointer[10] = param7;\n      *(byte *)((int)memoryPointer + 5) = size;\n      *(undefined *)(memoryPointer + 1) = 0;\n      memoryPointer[2] = 0;\n      memoryPointer[3] = 0;\n      memoryPointer[4] = 0;\n      initialize_param_00000fec(memoryPointer + 5,0);\n      memoryPointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_value_00000698(memoryPointer,10);\n        if ((flags & 4) == 0) {\n          enable_ir_qinterrupts_in_privileged_mode_00000d0c(interruptStatus);\n          check_parameter_validity_00000738(size);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        update_value_00000698(memoryPointer,1);\n      }\n      enable_ir_qinterrupts_in_privileged_mode_00000d0c(interruptStatus);\n      returnValue = (int)availableIndex;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_memory_region_000010d4",
                "param_1": "startAddress",
                "param_2": "endAddress",
                "param_3": "size",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "interruptStatus",
                "uVar2": "initializedValue",
                "iVar3": "returnValue",
                "uVar4": "alignedEndAddress",
                "puVar5": "memoryPointer",
                "local_30": "alignmentOffset",
                "local_2c": "alignedStartAddress",
                "local_10": "loopIndex",
                "local_c": "foundIndex",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_and_hardware_00001274",
            "code": "\nvoid initialize_system_and_hardware_00001274(void)\n\n{\n  initialize_data();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system();\n  initialize_hardware();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_and_hardware_00001274",
                "initialize_data_0000258c": "initialize_data",
                "initialize_system_00001c84": "initialize_system",
                "initialize_hardware_00002396": "initialize_hardware"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "handle_interrupts_0000129c",
            "code": "\nvoid handle_interrupts_0000129c(undefined4 handle)\n\n{\n  interrupt_handler(handle,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "handle_interrupts_0000129c",
                "param_1": "handle",
                "handle_interrupts_00002434": "interrupt_handler"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "update_and_handle_interrupt_000012b4",
            "code": "\nundefined4 updateAndHandleInterrupt_000012b4(int input,undefined value)\n\n{\n  undefined4 result;\n  \n  result = update_array_value_if_difference_equals2244_00002364(input + 4,value);\n  handle_interrupt_000024bc(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "update_and_handle_interrupt_000012b4",
                "param_1": "input",
                "param_2": "value",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "find_last_equal_element_index_000012e2",
            "code": "\nint findLastEqualElementIndex_000012e2(int array,undefined4 value1,undefined4 value2)\n\n{\n  int lastEqualIndex;\n  \n  while( true ) {\n    lastEqualIndex = find_last_equal_element_index_0000231c(array + 4,value1,value2);\n    if (lastEqualIndex != 0) break;\n    handle_interrupts_0000129c(array);\n  }\n  return lastEqualIndex;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "find_last_equal_element_index_000012e2",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "iVar1": "lastEqualIndex"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_flag_and_set_00001348",
            "code": "\nvoid check_flag_and_set_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_flag();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_flag_and_set_00001348",
                "set_flag_in_register_0000093c": "set_flag"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculateOffset_00001360(uint inputParam,int multiplier)\n\n{\n  return multiplier * 4 + (inputParam & 0xf0000000 | (inputParam & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "inputParam",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "initialize_memory_location_00001392",
            "code": "\nvoid initializeMemoryLocation_00001392(undefined4 inputPointer,undefined byteValue)\n\n{\n  undefined4 *memoryLocationPointer;\n  \n  memoryLocationPointer = (undefined4 *)calculate_offset_00001360(inputPointer,byteValue);\n  *memoryLocationPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "initialize_memory_location_00001392",
                "param_1": "inputPointer",
                "param_2": "byteValue",
                "puVar1": "memoryLocationPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_memory_000013b8",
            "code": "\nundefined4 initializeMemory_000013b8(int index,undefined4 status,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 returnValue;\n  \n  if (index != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  update_data_with_mask_00001448(index);\n  initialize_memory_location_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    update_memory_000014c4(index,status);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_memory_000013b8",
                "param_1": "index",
                "param_2": "status",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_data_with_mask_00001448",
            "code": "\nvoid updateDataWithMask_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    update_data_with_mask_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    update_data_with_mask_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_data_with_mask_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_memory_000014c4",
            "code": "\nvoid updateMemory_000014c4(int index,uint factor)\n\n{\n  byte *ptrByte;\n  uint value1;\n  uint value2;\n  \n  ptrByte = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  ptrByte[3] = ptrByte[3] & 0xf3;\n  ptrByte[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (factor << 4);\n  *ptrByte = (byte)(value2 >> 8) & 0x1f;\n  ptrByte[1] = (byte)value2;\n  ptrByte[10] = (byte)((value1 << 2) / factor + 1 >> 1) & 0x1f;\n  ptrByte[0x10] = ptrByte[0x10] | 0x88;\n  if ((ptrByte[0x10] & 0x70) == 0) {\n    ptrByte[0x13] = 0;\n  }\n  else {\n    ptrByte[0x13] = (char)(2 << (ptrByte[0x10] >> 4 & 7)) - 1;\n  }\n  ptrByte[0x15] = 1;\n  ptrByte[0x11] = 0xc0;\n  ptrByte[3] = ptrByte[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_memory_000014c4",
                "param_1": "index",
                "param_2": "factor",
                "pbVar1": "ptrByte",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int source,uint count)\n\n{\n  int pointer;\n  uint loopCounter;\n  \n  pointer = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (loopCounter = 0; loopCounter < count; loopCounter = loopCounter + 1) {\n    do {\n    } while (-1 < *(char *)(pointer + 4));\n    *(undefined *)(pointer + 7) = *(undefined *)(loopCounter + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "count",
                "iVar1": "pointer",
                "local_c": "loopCounter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_flagged_function_00001628",
            "code": "\nvoid executeFlaggedFunction_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  check_flag_and_set_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_flagged_function_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "execute_flagged_function_00001688",
            "code": "\nvoid execute_flagged_function_00001688(void)\n\n{\n  execute_flagged_function_00001688_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "execute_flagged_function_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_result_00001696",
            "code": "\nint calculateResult_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_result_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "initialize_result_000016c8",
            "code": "\nvoid initializeResult_000016c8(undefined4 input1,undefined input2)\n\n{\n  undefined4 *resultPtr;\n  \n  resultPtr = (undefined4 *)calculate_result_00001696(input1,input2);\n  *resultPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "initialize_result_000016c8",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "resultPtr"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "initialize_result_to_true_000016ec",
            "code": "\nvoid initializeResultToTrue_000016ec(undefined4 resultPointer,undefined data)\n\n{\n  undefined *resultPointer;\n  \n  resultPointer = (undefined *)calculate_result_00001696(resultPointer,data);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "initialize_result_to_true_000016ec",
                "param_1": "resultPointer",
                "param_2": "data",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 value1,undefined value2)\n\n{\n  undefined *resultPointer;\n  \n  resultPointer = (undefined *)calculate_result_00001696(value1,value2);\n  *resultPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_memory_00001734",
            "code": "\nvoid clearMemory_00001734(void)\n\n{\n  clear_memory_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_memory_00001734"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "set_bitwise_or_mask_00001748",
            "code": "\nvoid setBitwiseOrMask_00001748(byte value)\n\n{\n  DAT_40064003 = value | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "set_bitwise_or_mask_00001748",
                "param_1": "value"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "initialize_memory_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid initialize_memory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clear_memory(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "initialize_memory_00001778",
                "clear_memory_00001710": "clear_memory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_and_set_flags_000017dc",
            "code": "\n\n\nvoid initialize_and_set_flags_000017dc(void)\n\n{\n  initialize_result(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_and_set_flags_000017dc",
                "initialize_result_000016c8": "initialize_result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "clear_memory_and_initialize_result_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid clearMemoryAndInitializeResult_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  initializeResultToTrue(&DAT_40064001,0);\n  clearMemory(&DAT_40064000,1);\n  clearMemory(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "clear_memory_and_initialize_result_0000182c",
                "initialize_result_to_true_000016ec": "initializeResultToTrue",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_memory_000018bc",
            "code": "\nvoid initializeMemory_000018bc(void)\n\n{\n  applyBitwiseOrMask(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clearMemory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_memory_000018bc",
                "set_bitwise_or_mask_00001748": "applyBitwiseOrMask",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_and_wait_for_completion_0000191c",
            "code": "\nvoid initialize_and_wait_for_completion_0000191c(void)\n\n{\n  initialize_memory();\n  set_bitwise_or_mask(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_and_wait_for_completion_0000191c",
                "initialize_memory_00001778": "initialize_memory",
                "set_bitwise_or_mask_00001748": "set_bitwise_or_mask"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_function_00001960",
            "code": "\nvoid initializeFunction_00001960(void)\n\n{\n  set_bitwise_or_mask_00001748(0xa0);\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_function_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_and_clear_memory_000019c0",
            "code": "\nvoid initializeAndClearMemory_000019c0(void)\n\n{\n  initializeMemory();\n  setBitwiseOrMask(0x40);\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  clearStatusMemory();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_and_clear_memory_000019c0",
                "initialize_memory_00001778": "initializeMemory",
                "set_bitwise_or_mask_00001748": "setBitwiseOrMask",
                "clear_memory_00001710": "clearMemory",
                "clear_memory_00001734": "clearStatusMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_memory_00001a18",
            "code": "\nvoid initialize_memory_00001a18(void)\n\n{\n  initialize_result_to_true_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_and_clear_memory_00001a3c",
            "code": "\nvoid initializeAndClearMemory_00001a3c(void)\n\n{\n  initialize_result_to_true_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_and_clear_memory_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initializeMemory_00001a60(void)\n\n{\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  initialize_result_to_true_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_settings_00001ad4",
            "code": "\nvoid initializeSettings_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_settings_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_components_00001b10",
            "code": "\nundefined4 initializeComponents_00001b10(byte index)\n\n{\n  undefined4 returnValue;\n  \n  if (index < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)index + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_memory_000018bc();\n        break;\n      case 1:\n        initialize_and_wait_for_completion_0000191c();\n        break;\n      case 2:\n        initialize_function_00001960();\n        break;\n      case 3:\n        initialize_and_clear_memory_000019c0();\n        break;\n      case 4:\n        initialize_memory_00001a18();\n        break;\n      case 5:\n        initialize_and_clear_memory_00001a3c();\n        break;\n      case 6:\n        initialize_memory_00001a60();\n        break;\n      case 7:\n        initialize_settings_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (index != DAT_1fff0b74);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_components_00001b10",
                "param_1": "index",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clearMemory(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clearMemory(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  setBitwiseOrMask(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8",
                "clear_memory_00001710": "clearMemory",
                "set_bitwise_or_mask_00001748": "setBitwiseOrMask"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initialize_system_00001c84(void)\n\n{\n  undefined4 irq_interrupt_status;\n  \n  irq_interrupt_status = check_irq_interrupts_status();\n  initialize_system_00001c84();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  clear_memory_and_initialize_result();\n  initialize_and_set_flags();\n  initialize_components(7);\n  enable_ir_qinterrupts_in_privileged_mode(irq_interrupt_status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "irq_interrupt_status",
                "check_irq_interrupts_status_00000cd0": "check_irq_interrupts_status",
                "initialize_system_00001bb8": "initialize_system",
                "clear_memory_and_initialize_result_0000182c": "clear_memory_and_initialize_result",
                "initialize_and_set_flags_000017dc": "initialize_and_set_flags",
                "initialize_components_00001b10": "initialize_components",
                "enable_ir_qinterrupts_in_privileged_mode_00000d0c": "enable_ir_qinterrupts_in_privileged_mode"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_set_flag_00001cf0",
            "code": "\nvoid checkAndSetFlag_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    setFlagInRegister();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_set_flag_00001cf0",
                "set_flag_in_register_0000093c": "setFlagInRegister"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_new_value_00001d08",
            "code": "\nint calculate_new_value_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_new_value_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_new_value_00001d3a",
            "code": "\nvoid setNewValue_00001d3a(undefined4 input1,undefined input2)\n\n{\n  undefined4 *calculatedPointer;\n  \n  calculatedPointer = (undefined4 *)calculate_new_value_00001d08(input1,input2);\n  *calculatedPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_new_value_00001d3a",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "calculatedPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "combine_with_mask_00001d5e",
            "code": "\nuint combineWithMask_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "combine_with_mask_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "generate_masked_value_00001d80",
            "code": "\nuint generateMaskedValue_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "generate_masked_value_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "truncate_to_six_bits_00001dc0",
            "code": "\nushort truncateToSixBits_00001dc0(ushort input)\n\n{\n  return input & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "truncate_to_six_bits_00001dc0",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_new_value_from_bits_00001ddc",
            "code": "\nvoid setNewValueFromBits_00001ddc(undefined2 bits)\n\n{\n  char extractedBits;\n  \n  extractedBits = extract_bits_00001da2(bits);\n  set_new_value_00001d3a(&DAT_40048038,extractedBits + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_new_value_from_bits_00001ddc",
                "param_1": "bits",
                "cVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_data_at_offset_00001e44",
            "code": "\nvoid updateDataAtOffset_00001e44(int offset,uint bitPosition,int newValue)\n\n{\n  int byteOffset;\n  \n  byteOffset = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (byteOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (byteOffset + offset * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (byteOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (byteOffset + offset * 4) * 4) | newValue << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_data_at_offset_00001e44",
                "param_1": "offset",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "iVar1": "byteOffset"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_data_00001ec4",
            "code": "\nvoid updateData_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 extractedBits;\n  \n  extractedBits = extract_bits_00001e0c(input1,input2);\n  update_data_at_offset_00001e44(input1,input2,extractedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_data_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_data_and_mask_00001eea",
            "code": "\nundefined4 updateDataAndMask_00001eea(undefined2 data,byte mask)\n\n{\n  uint truncatedValue;\n  int maskedValue;\n  int combinedValue;\n  \n  update_data_with_mask_00001f80(data,0);\n  if ((char)mask < '\\0') {\n    truncatedValue = truncate_to_six_bits_00001dc0(data);\n    maskedValue = generate_masked_value_00001d80(data);\n    *(uint *)(maskedValue + 0x14) = *(uint *)(maskedValue + 0x14) | 1 << (truncatedValue & 0xff);\n  }\n  else {\n    truncatedValue = truncate_to_six_bits_00001dc0(data);\n    maskedValue = generate_masked_value_00001d80(data);\n    *(uint *)(maskedValue + 0x14) = *(uint *)(maskedValue + 0x14) & ~(1 << (truncatedValue & 0xff));\n  }\n  maskedValue = combine_with_mask_00001d5e(data);\n  combinedValue = truncate_to_six_bits_00001dc0(data);\n  *(uint *)(maskedValue + combinedValue * 4) = mask & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_data_and_mask_00001eea",
                "param_1": "data",
                "param_2": "mask",
                "uVar1": "truncatedValue",
                "iVar2": "maskedValue",
                "iVar3": "combinedValue"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_data_with_mask_00001f80",
            "code": "\nvoid updateDataWithMask_00001f80(undefined2 inputValue,undefined4 newValue)\n\n{\n  int combinedValue;\n  int truncatedValue;\n  undefined4 extractedBits;\n  undefined4 truncatedBits;\n  uint originalValue;\n  \n  setNewValueFromBits(inputValue);\n  combinedValue = combineWithMask(inputValue);\n  truncatedValue = truncateToSixBits(inputValue);\n  originalValue = *(uint *)(combinedValue + truncatedValue * 4);\n  combinedValue = combineWithMask(inputValue);\n  truncatedValue = truncateToSixBits(inputValue);\n  *(undefined4 *)(combinedValue + truncatedValue * 4) = newValue;\n  if ((originalValue & 0xf0000) != 0) {\n    extractedBits = extractBits(inputValue);\n    truncatedBits = truncateToSixBits(inputValue);\n    updateData(extractedBits,truncatedBits);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_data_with_mask_00001f80",
                "param_1": "inputValue",
                "param_2": "newValue",
                "iVar1": "combinedValue",
                "iVar2": "truncatedValue",
                "uVar3": "extractedBits",
                "uVar4": "truncatedBits",
                "uVar5": "originalValue",
                "set_new_value_from_bits_00001ddc": "setNewValueFromBits",
                "combine_with_mask_00001d5e": "combineWithMask",
                "truncate_to_six_bits_00001dc0": "truncateToSixBits",
                "extract_bits_00001da2": "extractBits",
                "update_data_00001ec4": "updateData"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_at_index_00001ff6",
            "code": "\nvoid setBitAtIndex_00001ff6(undefined2 inputValue)\n\n{\n  uint bitIndex;\n  int maskedValue;\n  \n  bitIndex = truncate_to_six_bits_00001dc0(inputValue);\n  maskedValue = generate_masked_value_00001d80(inputValue);\n  *(int *)(maskedValue + 4) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_at_index_00001ff6",
                "param_1": "inputValue",
                "uVar1": "bitIndex",
                "iVar2": "maskedValue"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_flags_00002028",
            "code": "\nvoid processFlags_00002028(int inputBuffer,undefined4 flagValue)\n\n{\n  int bitIndex;\n  uint flagMask;\n  uint bitCounter;\n  \n  flagMask = *(uint *)(inputBuffer + 0xa0);\n  for (bitCounter = 0; (int)bitCounter < 0x20; bitCounter = bitCounter + 1) {\n    if (((flagMask & 1 << (bitCounter & 0xff)) != 0) &&\n       ((*(uint *)(inputBuffer + bitCounter * 4) & 0xf0000) != 0)) {\n      *(int *)(inputBuffer + 0xa0) = 1 << (bitCounter & 0xff);\n      bitIndex = extract_bits_00001e0c(flagValue,bitCounter);\n      (**(code **)(&DAT_1fff0b78 + bitIndex * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + bitIndex * 0xc));\n    }\n  }\n  check_and_set_flag_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_flags_00002028",
                "param_1": "inputBuffer",
                "param_2": "flagValue",
                "iVar1": "bitIndex",
                "uVar2": "flagMask",
                "local_c": "bitCounter"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_flags_000020b8",
            "code": "\nvoid initializeFlags_000020b8(void)\n\n{\n  processFlags(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_flags_000020b8",
                "process_flags_00002028": "processFlags"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_process_flags_000020cc",
            "code": "\nvoid initializeProcessFlags_000020cc(void)\n\n{\n  setProcessFlags(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_process_flags_000020cc",
                "process_flags_00002028": "setProcessFlags"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_process_flags_000020e0",
            "code": "\nvoid initializeProcessFlags_000020e0(void)\n\n{\n  process_flags_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_process_flags_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_flags_000020f4",
            "code": "\nvoid initializeFlags_000020f4(void)\n\n{\n  setFlags(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_flags_000020f4",
                "process_flags_00002028": "setFlags"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_process_flags_00002108",
            "code": "\nvoid initializeProcessFlags_00002108(void)\n\n{\n  setProcessFlags(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_process_flags_00002108",
                "process_flags_00002028": "setProcessFlags"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_information_0000211c",
            "code": "\nvoid printProcessInformation_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 lineSeparator;\n  int remainingStackSpace;\n  int numberOfTabs;\n  dword relocationOffset;\n  uint relocationIndex;\n  undefined4 *currentPointer;\n  undefined4 memoryAddress;\n  undefined4 stackPointer;\n  int remainingRelocations;\n  short index;\n  int totalRelocations;\n  int usedStackSpace;\n  \n  lineSeparator = 0x515f;\n  usedStackSpace = 0;\n  totalRelocations = 0;\n  process_and_format_data_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  remainingRelocations = count_remaining_relocations_000008b8();\n  stackPointer = get_memory_address_0000091c();\n  memoryAddress = get_stack_pointer_00000900();\n  process_and_format_data_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               remainingRelocations,stackPointer,memoryAddress);\n  usedStackSpace = usedStackSpace + 0x200;\n  if (0 < remainingRelocations) {\n    totalRelocations = remainingRelocations + totalRelocations;\n  }\n  for (index = 1; index < 0x21; index = index + 1) {\n    currentPointer = *(undefined4 **)(&DAT_1fff0358 + index * 4);\n    if (currentPointer != (undefined4 *)0x0) {\n      relocationIndex = (uint)*(byte *)(currentPointer + 1);\n      relocationOffset = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[relocationIndex];\n      numberOfTabs = (int)&lineSeparator + (uint)(8 < relocationIndex);\n      remainingStackSpace = currentPointer[0xb];\n      usedStackSpace = remainingStackSpace + usedStackSpace;\n      iVar1 = calculate_offset_000010a0(currentPointer[9]);\n      remainingStackSpace = remainingStackSpace - iVar1;\n      totalRelocations = remainingStackSpace + totalRelocations;\n      process_and_format_data_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)currentPointer + 6),currentPointer[10],relocationOffset,numberOfTabs,\n                   *(undefined *)((int)currentPointer + 5),currentPointer[0xb],remainingStackSpace,currentPointer[9],*currentPointer);\n    }\n  }\n  process_and_format_data_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,usedStackSpace,totalRelocations);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_information_0000211c",
                "local_40": "lineSeparator",
                "local_3c": "remainingStackSpace",
                "local_38": "numberOfTabs",
                "local_34": "relocationOffset",
                "local_30": "relocationIndex",
                "local_2c": "currentPointer",
                "local_28": "memoryAddress",
                "local_24": "stackPointer",
                "local_20": "remainingRelocations",
                "local_1a": "index",
                "local_18": "totalRelocations",
                "local_14": "usedStackSpace"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = count_remaining_relocations_000008b8();\n  local_24 = get_memory_address_0000091c();\n  local_28 = get_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = calculate_offset_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int ptr)\n\n{\n  undefined result;\n  int value1;\n  bool isEqual;\n  \n  value1 = *(int *)(ptr + 0xc);\n  isEqual = *(int *)(ptr + 8) == value1;\n  if (isEqual) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "ptr",
                "iVar2": "value1",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_if_difference_equals_00002294",
            "code": "\nundefined checkIfDifferenceEquals_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool isEqual;\n  \n  difference = *(int *)(input + 4);\n  isEqual = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (isEqual) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_if_difference_equals_00002294",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "difference",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_array_value_000022be",
            "code": "\nvoid updateArrayValue_000022be(int *array,undefined newValue)\n\n{\n  uint currentValue;\n  \n  currentValue = array[3];\n  array[3] = currentValue + 1;\n  *(undefined *)((currentValue & array[1] - 1U) + *array) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_array_value_000022be",
                "param_1": "array",
                "param_2": "newValue",
                "uVar1": "currentValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_element_000022f0",
            "code": "\nundefined incrementAndReturnElement_000022f0(int *array)\n\n{\n  uint currentElement;\n  \n  currentElement = currentElement;\n  currentElement = currentElement + 1;\n  return *(undefined *)((currentElement & arrayLength - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_element_000022f0",
                "param_1": "array",
                "uVar1": "currentElement",
                "param_1[2]": "currentElement",
                "param_1[1]": "arrayLength"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "find_last_equal_element_index_0000231c",
            "code": "\nint findLastEqualElementIndex_0000231c(undefined4 array,undefined *output,int size)\n\n{\n  undefined element;\n  int equalityCheckResult;\n  undefined *outputPtr;\n  int remainingSize;\n  \n  outputPtr = output;\n  remainingSize = size;\n  while ((remainingSize != 0 && (equalityCheckResult = check_equality_00002270(array), equalityCheckResult == 0))) {\n    element = increment_and_return_element_000022f0(array);\n    *outputPtr = element;\n    remainingSize = remainingSize + -1;\n    outputPtr = outputPtr + 1;\n  }\n  return size - remainingSize;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "find_last_equal_element_index_0000231c",
                "param_1": "array",
                "param_2": "output",
                "param_3": "size",
                "uVar1": "element",
                "iVar2": "equalityCheckResult",
                "local_20": "outputPtr",
                "local_14": "remainingSize"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "update_array_value_if_difference_equals2244_00002364",
            "code": "\nundefined4 updateArrayValueIfDifferenceEquals2244_00002364(undefined4 inputValue,undefined inputArray)\n\n{\n  int differenceEquals2244;\n  undefined4 returnValue;\n  \n  differenceEquals2244 = check_if_difference_equals_00002294(inputValue);\n  if (differenceEquals2244 == 0) {\n    update_array_value_000022be(inputValue,inputArray);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "update_array_value_if_difference_equals2244_00002364",
                "param_1": "inputValue",
                "param_2": "inputArray",
                "iVar1": "differenceEquals2244",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_hardware_00002396",
            "code": "\nvoid initializeHardware_00002396(void)\n\n{\n  initialize_hardware_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_hardware_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined buffer [128];\n  \n  executeInterrupt(0);\n  processFile(\"Welcome to RIOT!\");\n  returnValue = inputLoop(0,buffer,0x80);\n  executeSoftwareInterrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "execute_interrupt_000023d0": "executeInterrupt",
                "process_file_00004db8": "processFile",
                "process_input_loop_00002e6c": "inputLoop",
                "software_interrupt": "executeSoftwareInterrupt",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_software_interrupt_000023c8",
            "code": "\nvoid executeSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_interrupt_000023d0",
            "code": "\nundefined4 execute_interrupt_000023d0(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = execute_software_interrupt_000023c8(1,input_param,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_interrupt_000023d0",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "copy_linked_list_0000240c",
            "code": "\nundefined4 * copy_linked_list_0000240c(undefined4 *head)\n\n{\n  undefined4 *current_node;\n  \n  current_node = (undefined4 *)*head;\n  if (current_node != (undefined4 *)0x0) {\n    *head = *current_node;\n  }\n  return current_node;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "copy_linked_list_0000240c",
                "param_1": "head",
                "puVar1": "current_node"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "handle_interrupts_00002434",
            "code": "\nundefined4 handleInterrupts_00002434(int *interruptStatus,int disableFlag)\n\n{\n  int tempVar;\n  undefined4 result;\n  \n  result = check_irq_interrupts_status_00000cd0();\n  tempVar = DAT_1fff03dc;\n  if (*interruptStatus == 0) {\n    *interruptStatus = -1;\n    enable_ir_qinterrupts_in_privileged_mode_00000d0c(result);\n    result = 1;\n  }\n  else if (disableFlag == 0) {\n    enable_ir_qinterrupts_in_privileged_mode_00000d0c(result);\n    result = 0;\n  }\n  else {\n    update_value_00000698(DAT_1fff03dc,2);\n    if (*interruptStatus == -1) {\n      *interruptStatus = tempVar + 8;\n      *(undefined4 *)*interruptStatus = 0;\n    }\n    else {\n      find_and_update_pointer_00001034(interruptStatus,tempVar);\n    }\n    enable_ir_qinterrupts_in_privileged_mode_00000d0c(result);\n    set_flag_in_register_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "handle_interrupts_00002434",
                "param_1": "interruptStatus",
                "param_2": "disableFlag",
                "iVar1": "tempVar",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "handle_interrupt_000024bc",
            "code": "\nvoid handleInterrupt_000024bc(int *interruptStatus)\n\n{\n  undefined interruptValue;\n  undefined4 interruptStatusValue;\n  int linkedListCopy;\n  \n  interruptStatusValue = check_irq_interrupts_status_00000cd0();\n  if (*interruptStatus == 0) {\n    enable_ir_qinterrupts_in_privileged_mode_00000d0c(interruptStatusValue);\n  }\n  else if (*interruptStatus == -1) {\n    *interruptStatus = 0;\n    enable_ir_qinterrupts_in_privileged_mode_00000d0c(interruptStatusValue);\n  }\n  else {\n    linkedListCopy = copy_linked_list_0000240c(interruptStatus);\n    update_value_00000698(linkedListCopy + -8,10);\n    if (*interruptStatus == 0) {\n      *interruptStatus = -1;\n    }\n    interruptValue = *(undefined *)(linkedListCopy + -3);\n    enable_ir_qinterrupts_in_privileged_mode_00000d0c(interruptStatusValue);\n    check_parameter_validity_00000738(interruptValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "handle_interrupt_000024bc",
                "param_1": "interruptStatus",
                "uVar1": "interruptValue",
                "uVar2": "interruptStatusValue",
                "iVar3": "linkedListCopy"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "set_byte_value_00002538",
            "code": "\nvoid setByteValue_00002538(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "set_byte_value_00002538",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_data_0000258c",
            "code": "\n\n\nvoid initializeData_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  set_byte_value_00002538(0xfffffffe,1);\n  set_byte_value_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    set_byte_value_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_data_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_hardware_000025f4",
            "code": "\nvoid initialize_hardware_000025f4(void)\n\n{\n  initialize_hardware_000025f4_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_hardware_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_registers_00002600",
            "code": "\nundefined4 initialize_registers_00002600(undefined4 input_date)\n\n{\n  undefined4 date_offset;\n  \n  date_offset = calculate_date_offset_000047e4(input_date);\n  initialize_registers_00002600_0000285c(date_offset);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_registers_00002600",
                "param_1": "input_date",
                "uVar1": "date_offset"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "initialize_date_components_00002624",
            "code": "\nundefined4 initializeDateComponents_00002624(undefined4 inputDate)\n\n{\n  undefined4 memoryAddress;\n  undefined4 stackCounter;\n  \n  memoryAddress = get_memory_address_0000281c();\n  stackCounter = 0;\n  calculate_date_components_0000443c(&memoryAddress,inputDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "initialize_date_components_00002624",
                "param_1": "inputDate",
                "local_10": "memoryAddress",
                "uStack_c": "stackCounter"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_and_offset_date_00002654",
            "code": "\nundefined4 initializeAndOffsetDate_00002654(undefined4 dateOffset,undefined4 memoryPointer,undefined4 param_3)\n\n{\n  undefined4 offset;\n  \n  offset = calculate_date_offset_000047e4(dateOffset);\n  DAT_1fff0d9c = memoryPointer;\n  initialize_memory_00002894(offset,0x26f1,param_3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_and_offset_date_00002654",
                "param_1": "dateOffset",
                "param_2": "memoryPointer",
                "uVar1": "offset"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_date_00002690",
            "code": "\nundefined4 initializeDate_00002690(undefined4 inputDate)\n\n{\n  undefined4 pointer;\n  undefined4 count;\n  \n  pointer = increment_pointer_000028f0();\n  count = 0;\n  calculate_date_components_0000443c(&pointer,inputDate);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_date_00002690",
                "param_1": "inputDate",
                "local_10": "pointer",
                "uStack_c": "count"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_memory_000026c0",
            "code": "\nvoid initializeMemory_000026c0(void)\n\n{\n  initialize_memory_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_memory_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_flags_000026d8",
            "code": "\nvoid initialize_flags_000026d8(void)\n\n{\n  set_initial_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_flags_000026d8",
                "set_flag_0000294c": "set_initial_flag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "clear_bit_000026e4",
            "code": "\nvoid clear_bit_000026e4(void)\n\n{\n  clear_bit_000026e4_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "clear_bit_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_function_000026f0",
            "code": "\nvoid executeCallbackFunction_000026f0(undefined4 callbackArgument)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackArgument);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_function_000026f0",
                "param_1": "callbackArgument"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "write_byte_to_memory_00002744",
            "code": "\nvoid writeByteToMemory_00002744(byte byteOffset,uint value)\n\n{\n  if ((char)byteOffset < '\\0') {\n    (&DAT_e000ed14)[byteOffset & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteOffset + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "write_byte_to_memory_00002744",
                "param_1": "byteOffset",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_set_flag_00002798",
            "code": "\nvoid check_and_set_flag_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_flag();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_set_flag_00002798",
                "set_flag_in_register_0000093c": "set_flag"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_hardware_000027b0",
            "code": "\n\n\nvoid initializeHardware_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  setInterruptFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_hardware_000027b0",
                "set_flag_0000294c": "setInterruptFlag"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_memory_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getMemoryAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_memory_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_registers_0000285c",
            "code": "\n\n\nvoid initializeRegisters_0000285c(undefined4 inputValue)\n\n{\n  _DAT_4003d000 = inputValue;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_registers_0000285c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_memory_00002894",
            "code": "\n\n\nvoid initializeMemory_00002894(int inputValue,undefined4 value1,undefined4 value2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value1;\n  DAT_1fff0da4 = value2;\n  write_byte_to_memory_00002744(0x2e,10);\n  set_bit_in_memory_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_memory_00002894",
                "param_1": "inputValue",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_pointer_000028f0",
            "code": "\n\n\nint incrementPointer_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_pointer_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "initialize_memory_00002910",
            "code": "\n\n\nvoid initializeMemory_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "initialize_memory_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_bit_00002970",
            "code": "\n\n\nvoid clearBit_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_bit_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_callbacks_00002994",
            "code": "\n\n\nvoid executeCallbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  check_and_set_flag_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_callbacks_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "process_data_00002a00",
            "code": "\nvoid process_data_00002a00(undefined4 input_data)\n\n{\n  process_data_00002a00_00004cb4(input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "process_data_00002a00",
                "param_1": "input_data"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "search_value_in_nested_arrays_00002a18",
            "code": "\nint searchValueInNestedArrays_00002a18(int *arrayOfArrays,undefined4 targetValue)\n\n{\n  int comparisonResult;\n  int *currentArray;\n  undefined **rebootStrings;\n  uint arrayIndex;\n  int *currentElement;\n  \n  currentArray = arrayOfArrays;\n  rebootStrings = &PTR_s_reboot_00007300;\n  arrayIndex = 0;\n  do {\n    if (1 < arrayIndex) {\n      return 0;\n    }\n    currentElement = (&currentArray)[arrayIndex];\n    if (currentElement != (int *)0x0) {\n      for (; *currentElement != 0; currentElement = currentElement + 3) {\n        comparisonResult = compare_bytes_00004e52(*currentElement,targetValue);\n        if (comparisonResult == 0) {\n          return currentElement[2];\n        }\n      }\n    }\n    arrayIndex = arrayIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "search_value_in_nested_arrays_00002a18",
                "param_1": "arrayOfArrays",
                "param_2": "targetValue",
                "iVar1": "comparisonResult",
                "local_18": "currentArray",
                "local_14": "rebootStrings",
                "local_10": "arrayIndex",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commands)\n\n{\n  int *currentCommand;\n  undefined **commandPtr;\n  uint i;\n  int *currentArg;\n  \n  process_and_format_data_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_file_00004db8(\"---------------------------------------\");\n  currentCommand = commands;\n  commandPtr = &PTR_s_reboot_00007300;\n  for (i = 0; i < 2; i = i + 1) {\n    currentArg = (&currentCommand)[i];\n    if (currentArg != (int *)0x0) {\n      for (; *currentArg != 0; currentArg = currentArg + 3) {\n        process_and_format_data_00004c84(\"%-20s %s\\n\",*currentArg,currentArg[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commands",
                "local_18": "currentCommand",
                "local_14": "commandPtr",
                "local_10": "i",
                "local_c": "currentArg"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_input_00002b10",
            "code": "\nvoid processInput_00002b10(undefined4 param,byte *inputBuffer)\n\n{\n  int result;\n  byte *nextChar;\n  byte *filePaths [3];\n  code *commandFunction;\n  char **arguments;\n  uint numArguments;\n  byte quoteChar;\n  char *currentChar;\n  char *currentString;\n  char **commandList;\n  uint index;\n  int numEscapes;\n  uint numStrings;\n  byte *currentPosition;\n  \n  numStrings = 0;\n  numEscapes = 0;\n  currentPosition = inputBuffer;\n  while( true ) {\n    filePaths[0] = inputBuffer;\n    filePaths[1] = (byte *)param;\n    if (0x20 < *currentPosition) {\n      if ((*currentPosition == 0x22) || (*currentPosition == 0x27)) {\n        quoteChar = *currentPosition;\n        do {\n          nextChar = currentPosition + 1;\n          if (*nextChar == 0) {\n            currentPosition = nextChar;\n            process_file_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextChar == 0x5c) {\n            numEscapes = numEscapes + 1;\n            currentPosition = currentPosition + 2;\n            nextChar = currentPosition;\n            if (*currentPosition == 0) {\n              process_file_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentPosition = nextChar;\n        } while (quoteChar != *currentPosition);\n        if (0x20 < currentPosition[1]) {\n          process_file_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentPosition == 0x5c) {\n            numEscapes = numEscapes + 1;\n            currentPosition = currentPosition + 1;\n            if (*currentPosition == 0) {\n              process_file_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentPosition = currentPosition + 1;\n          if (*currentPosition == 0x22) {\n            process_file_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentPosition);\n      }\n      numStrings = numStrings + 1;\n    }\n    if (*currentPosition == 0) break;\n    *currentPosition = 0;\n    currentPosition = currentPosition + 1;\n  }\n  if (numStrings != 0) {\n    numArguments = numStrings;\n    arguments = (char **)((int)filePaths - ((numStrings + 1) * 4 + 7 & 0xfffffff8));\n    arguments[numStrings] = (char *)0x0;\n    currentPosition = inputBuffer;\n    for (index = 0; commandList = arguments, index < numStrings; index = index + 1) {\n      for (; *currentPosition == 0; currentPosition = currentPosition + 1) {\n      }\n      if ((*currentPosition == 0x22) || (*currentPosition == 0x27)) {\n        currentPosition = currentPosition + 1;\n      }\n      arguments[index] = (char *)currentPosition;\n      for (; *currentPosition != 0; currentPosition = currentPosition + 1) {\n      }\n    }\n    for (; (numEscapes != 0 && (*commandList != (char *)0x0)); commandList = commandList + 1) {\n      for (currentString = *commandList; *currentString != '\\0'; currentString = currentString + 1) {\n        if (*currentString == '\\') {\n          for (currentChar = currentString; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          numEscapes = numEscapes + -1;\n          if (numEscapes == 0) break;\n        }\n      }\n    }\n    commandFunction = (code *)search_value_in_nested_arrays_00002a18(param,*arguments);\n    if (commandFunction == (code *)0x0) {\n      result = compare_bytes_00004e52(&DAT_00007214,*arguments);\n      if (result == 0) {\n        print_command_descriptions_00002a88(filePaths[1]);\n      }\n      else {\n        process_and_format_data_00004c84(\"shell: command not found: %s\\n\",*arguments);\n      }\n    }\n    else {\n      (*commandFunction)(numStrings,arguments);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_input_00002b10",
                "param_1": "param",
                "param_2": "inputBuffer",
                "iVar1": "result",
                "pbVar2": "nextChar",
                "local_48": "filePaths",
                "local_3c": "commandFunction",
                "local_38": "arguments",
                "local_34": "numArguments",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentString",
                "local_24": "commandList",
                "local_20": "index",
                "local_1c": "numEscapes",
                "local_18": "numStrings",
                "local_14": "currentPosition"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint process_input_00002d94(undefined *input_buffer,int buffer_size)\n\n{\n  int data_byte;\n  byte byte_value;\n  bool is_input_buffer_empty;\n  undefined *current_char;\n  \n  current_char = input_buffer;\n  while( true ) {\n    if (buffer_size + -1 <= (int)current_char - (int)input_buffer) {\n      return 0xffffffff;\n    }\n    data_byte = read_and_process_data_00004418();\n    if (data_byte < 0) break;\n    if ((data_byte == 0xd) || (data_byte == 10)) {\n      *current_char = 0;\n      process_data_00002a00(0xd);\n      process_data_00002a00(10);\n      is_input_buffer_empty = current_char == input_buffer;\n      if (is_input_buffer_empty) {\n        input_buffer = (undefined *)0x1;\n      }\n      byte_value = (byte)input_buffer;\n      if (!is_input_buffer_empty) {\n        byte_value = 0;\n      }\n      return (uint)byte_value;\n    }\n    if ((data_byte == 8) || (data_byte == 0x7f)) {\n      if (current_char != input_buffer) {\n        current_char = current_char + -1;\n        *current_char = 0;\n        process_data_00002a00(8);\n        process_data_00002a00(0x20);\n        process_data_00002a00(8);\n      }\n    }\n    else {\n      *current_char = (char)data_byte;\n      process_data_00002a00(data_byte);\n      current_char = current_char + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "input_buffer",
                "param_2": "buffer_size",
                "iVar1": "data_byte",
                "bVar2": "byte_value",
                "bVar3": "is_input_buffer_empty",
                "local_c": "current_char"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_data_processing_00002e48",
            "code": "\nvoid initializeDataProcessing_00002e48(void)\n\n{\n  processData(0x3e);\n  processData(0x20);\n  processRelocations(*(undefined4 *)(relocationsArray[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_data_processing_00002e48",
                "process_data_00002a00": "processData",
                "process_relocations_000041d0": "processRelocations",
                "Elf32_Rel_ARRAY_1fff0200": "relocationsArray"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_input_loop_00002e6c",
            "code": "\nvoid process_input_loop_00002e6c(undefined4 input_param,undefined4 data_param_1,undefined4 data_param_2)\n\n{\n  int process_result;\n  \n  initialize_data_processing_00002e48();\n  do {\n    process_result = process_input_00002d94(data_param_1,data_param_2);\n    if (process_result == 0) {\n      process_input_00002b10(input_param,data_param_1);\n    }\n    initialize_data_processing_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_input_loop_00002e6c",
                "param_1": "input_param",
                "param_2": "data_param_1",
                "param_3": "data_param_2",
                "iVar1": "process_result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "start_infinite_loop_00002e9c",
            "code": "\nundefined4 start_infinite_loop_00002e9c(void)\n\n{\n  start_infinite_loop_00002e9c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "start_infinite_loop_00002e9c",
                "start_infinite_loop_00003688": "start_infinite_loop"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "print_process_information_00002eb4",
            "code": "\nundefined4 print_process_information_00002eb4(void)\n\n{\n  print_process_information_00002eb4_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "print_process_information_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_data_from_device_00002ecc",
            "code": "\nvoid readDataFromDevice_00002ecc(undefined4 deviceNumber,int deviceInfo)\n\n{\n  undefined4 deviceName;\n  undefined4 dataObject;\n  undefined stackData [8];\n  uint numDataObjects;\n  \n  numDataObjects = execute_function_00003d64(deviceInfo,stackData);\n  if ((int)numDataObjects < 1) {\n    process_and_format_data_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    dataObject = *(undefined4 *)(deviceInfo + 8);\n    deviceName = get_device_name_000039e8(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    process_and_format_data_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,dataObject,deviceName);\n    display_data_objects_00003694(stackData,numDataObjects & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_data_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceInfo",
                "uVar1": "deviceName",
                "uVar2": "dataObject",
                "auStack_1c": "stackData",
                "local_14": "numDataObjects"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "read_and_process_device_data_00002f30",
            "code": "\nvoid read_and_process_device_data_00002f30(void)\n\n{\n  int index;\n  undefined4 *current_node;\n  \n  index = 0;\n  for (current_node = DAT_1fff0db0; current_node != (undefined4 *)0x0; current_node = (undefined4 *)*current_node) {\n    read_data_from_device_00002ecc(index,current_node);\n    process_file_00004db8(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "read_and_process_device_data_00002f30",
                "local_10": "index",
                "local_c": "current_node"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_data_00002f74",
            "code": "\nvoid printDeviceData_00002f74(void)\n\n{\n  undefined4 deviceName;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    process_file_00004db8(\"No devices found\");\n  }\n  else {\n    process_file_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceName = get_device_name_000039e8(*(undefined *)(deviceList[3] + 8));\n    process_and_format_data_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceName,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_data_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "deviceName"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_data_00002fe0",
            "code": "\nvoid processDeviceData_00002fe0(int numParams,undefined4 *params)\n\n{\n  int result;\n  undefined4 deviceID;\n  \n  if (numParams < 3) {\n    printUsage(\"usage: %s %s <device id>|all\\n\",*params,params[1]);\n  }\n  else {\n    result = compareDeviceID(params[2],&DAT_000073d4);\n    if (result == 0) {\n      processAllDevices();\n    }\n    else {\n      deviceID = parseDeviceID(params[2]);\n      result = findDeviceIndex(deviceID);\n      if (result == 0) {\n        printError(\"error: undefined device id given\");\n      }\n      else {\n        readDeviceData(deviceID,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_data_00002fe0",
                "param_1": "numParams",
                "param_2": "params",
                "iVar1": "result",
                "uVar2": "deviceID",
                "process_and_format_data_00004c84": "printUsage",
                "compare_bytes_00004e52": "compareDeviceID",
                "read_and_process_device_data_00002f30": "processAllDevices",
                "parse_and_print_number_00004042": "parseDeviceID",
                "find_element_00003d24": "findDeviceIndex",
                "process_file_00004db8": "printError",
                "read_data_from_device_00002ecc": "readDeviceData"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 parsedNum;\n  undefined2 values [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceId;\n  int index;\n  \n  if (argc < 4) {\n    process_and_format_data_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = parse_and_print_number_00004042(argv[2]);\n    deviceIndex = find_element_00003d24(deviceId);\n    if (deviceIndex == 0) {\n      process_file_00004db8(\"error: undefined device given\");\n    }\n    else {\n      memset_memory_range_00004622(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (index = 0; index < (int)numValues; index = index + 1) {\n        parsedNum = parse_and_print_number_00004042(argv[index + 3]);\n        values[index] = parsedNum;\n      }\n      process_and_format_data_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      display_data_objects_00003694(values,numValues & 0xff);\n      numValues = execute_function_with_param_00003d94(deviceIndex,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          process_and_format_data_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          process_and_format_data_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        process_and_format_data_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "parsedNum",
                "auStack_20": "values",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceId",
                "local_c": "index"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_device_command_0000316c",
            "code": "\nundefined4 process_device_command_0000316c(int command_type,undefined4 *command_args)\n\n{\n  int comparison_result;\n  \n  if (command_type < 2) {\n    print_device_data_00002f74();\n  }\n  else {\n    comparison_result = compare_bytes_00004e52(command_args[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      process_device_data_00002fe0(command_type,command_args);\n    }\n    else {\n      comparison_result = compare_bytes_00004e52(command_args[1],\"write\");\n      if (comparison_result == 0) {\n        write_to_device_0000305c(command_type,command_args);\n      }\n      else {\n        process_and_format_data_00004c84(\"usage: %s read|write\\n\",*command_args);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_device_command_0000316c",
                "param_1": "command_type",
                "param_2": "command_args",
                "iVar1": "comparison_result"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_file_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int totalDays,int month,int year)\n\n{\n  byte dayOffset;\n  int adjustedTotalDays;\n  \n  adjustedTotalDays = month;\n  if (month < 3) {\n    adjustedTotalDays = 1;\n  }\n  dayOffset = (byte)adjustedTotalDays;\n  if (2 < month) {\n    dayOffset = 0;\n  }\n  totalDays = totalDays - (uint)dayOffset;\n  adjustedTotalDays = totalDays;\n  if (totalDays < 0) {\n    adjustedTotalDays = totalDays + 3;\n  }\n  return ((((adjustedTotalDays >> 2) + totalDays) - totalDays / 100) + totalDays / 400 +\n          *(int *)((int)Elf32_Rel_ARRAY_1fff0200 + (month + -1) * 4 + 0x50) + year) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "totalDays",
                "param_2": "month",
                "param_3": "year",
                "bVar1": "dayOffset",
                "iVar2": "adjustedTotalDays"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_and_calculate_date_info_0000328c",
            "code": "\nundefined4 extractAndCalculateDateInfo_0000328c(undefined4 *dateString,int *dateInfoArray)\n\n{\n  int dayOfWeek;\n  int index;\n  short parsedValue;\n  \n  parsedValue = parse_number_00004f84(*dateString,&index,10);\n  dateInfoArray[5] = parsedValue + -0x76c;\n  parsedValue = parse_number_00004f84(index + 1,&index,10);\n  dateInfoArray[4] = parsedValue + -1;\n  parsedValue = parse_number_00004f84(index + 1,&index,10);\n  dateInfoArray[3] = (int)parsedValue;\n  parsedValue = parse_number_00004f84(dateString[1],&index,10);\n  dateInfoArray[2] = (int)parsedValue;\n  parsedValue = parse_number_00004f84(index + 1,&index,10);\n  dateInfoArray[1] = (int)parsedValue;\n  parsedValue = parse_number_00004f84(index + 1,&index,10);\n  *dateInfoArray = (int)parsedValue;\n  dayOfWeek = calculate_day_of_week_000031fc(dateInfoArray[5] + 0x76c,dateInfoArray[4] + 1,dateInfoArray[3]);\n  dateInfoArray[6] = dayOfWeek;\n  dateInfoArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_and_calculate_date_info_0000328c",
                "param_1": "dateString",
                "param_2": "dateInfoArray",
                "iVar1": "dayOfWeek",
                "local_10": "index",
                "local_a": "parsedValue"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateArray)\n\n{\n  process_and_format_data_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hours,minutes,*dateArray);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateArray",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hours",
                "param_1[1]": "minutes"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_date_time_and_print_000033c0",
            "code": "\nbool getDateTimeAndPrint_000033c0(void)\n\n{\n  int result;\n  undefined dateTimeBuffer [36];\n  \n  result = initialize_date_00002690(dateTimeBuffer);\n  if (result != 0) {\n    process_file_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    print_date_time_00003378(dateTimeBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_date_time_and_print_000033c0",
                "auStack_2c": "dateTimeBuffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "check_alarm_000033f4",
            "code": "\nundefined4 checkAlarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 status;\n  undefined dateInfo [36];\n  \n  result = extract_and_calculate_date_info_0000328c(input,dateInfo);\n  if (result == 0) {\n    result = initialize_and_offset_date_00002654(dateInfo,0x31e1,0);\n    if (result == -1) {\n      process_file_00004db8(\"rtc: error setting alarm\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "check_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_2c": "dateInfo"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = extract_and_calculate_date_info_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_and_offset_date_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "print_date_time_or_process_error_00003444",
            "code": "\nbool printDateTimeOrProcessError_00003444(void)\n\n{\n  int result;\n  undefined dateComponents [36];\n  \n  result = initialize_date_components_00002624(dateComponents);\n  if (result != 0) {\n    process_file_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    print_date_time_00003378(dateComponents);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "print_date_time_or_process_error_00003444",
                "iVar1": "result",
                "auStack_2c": "dateComponents"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_on_rtc_00003478",
            "code": "\nundefined4 setTimeOnRTC_00003478(undefined4 timeData)\n\n{\n  int extractResult;\n  undefined4 returnValue;\n  undefined dateInfo [36];\n  \n  extractResult = extract_and_calculate_date_info_0000328c(timeData,dateInfo);\n  if (extractResult == 0) {\n    extractResult = initialize_registers_00002600(dateInfo);\n    if (extractResult == -1) {\n      process_file_00004db8(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_on_rtc_00003478",
                "param_1": "timeData",
                "iVar1": "extractResult",
                "uVar2": "returnValue",
                "auStack_2c": "dateInfo"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = extract_and_calculate_date_info_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_registers_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  process_file_00004db8(\"usage: rtc <command> [arguments]\");\n  process_file_00004db8(\"commands:\");\n  process_file_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_file_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_file_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_file_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_file_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_file_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_file_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int numArgs,int args)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (numArgs < 2) {\n    print_usage_000034c0();\n    status = 1;\n  }\n  else {\n    result = find_difference_00004e66(*(undefined4 *)(args + 4),\"poweron\",7);\n    if (result == 0) {\n      initialize_flags_000026d8();\n    }\n    else {\n      result = find_difference_00004e66(*(undefined4 *)(args + 4),\"poweroff\",8);\n      if (result == 0) {\n        clear_bit_000026e4();\n      }\n      else {\n        result = find_difference_00004e66(*(undefined4 *)(args + 4),\"clearalarm\",8);\n        if (result == 0) {\n          initialize_memory_000026c0();\n        }\n        else {\n          result = find_difference_00004e66(*(undefined4 *)(args + 4),\"getalarm\",8);\n          if (result == 0) {\n            get_date_time_and_print_000033c0();\n          }\n          else {\n            result = find_difference_00004e66(*(undefined4 *)(args + 4),\"setalarm\",8);\n            if ((result == 0) && (numArgs == 4)) {\n              check_alarm_000033f4(args + 8);\n            }\n            else {\n              result = find_difference_00004e66(*(undefined4 *)(args + 4),\"gettime\",7);\n              if (result == 0) {\n                print_date_time_or_process_error_00003444();\n              }\n              else {\n                result = find_difference_00004e66(*(undefined4 *)(args + 4),\"settime\",7);\n                if ((result != 0) || (numArgs != 4)) {\n                  process_and_format_data_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(args + 4));\n                  print_usage_000034c0();\n                  return 1;\n                }\n                set_time_on_rtc_00003478(args + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "numArgs",
                "param_2": "args",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "start_infinite_loop_00003688",
            "code": "\nvoid startInfiniteLoop_00003688(void)\n\n{\n  runInfiniteLoop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "start_infinite_loop_00003688",
                "infinite_loop_00003658": "runInfiniteLoop"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_objects_00003694",
            "code": "\nvoid displayDataObjects_00003694(int dataObjectPtr,byte dataLength)\n\n{\n  undefined4 memoryAddress;\n  char bitFlag;\n  uint bitMask;\n  bool isBitSet;\n  undefined stackBuffer [8];\n  int bufferLength;\n  char mappedValue;\n  byte currentIndex;\n  \n  if ((dataObjectPtr == 0) || (3 < dataLength)) {\n    process_file_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_and_format_data_00004c84(\"Data:\");\n    for (currentIndex = 0; currentIndex < dataLength; currentIndex = currentIndex + 1) {\n      if (*(byte *)(dataObjectPtr + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObjectPtr + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        bitFlag = (char)bitMask;\n        if (!isBitSet) {\n          bitFlag = '\\0';\n        }\n        if (bitFlag == '\\0') goto LAB_000036ee;\n        mappedValue = '\\0';\n      }\n      else {\nLAB_000036ee:\n        mappedValue = map_param_to_value_00003918((int)*(char *)(dataObjectPtr + 7));\n      }\n      process_and_format_data_00004c84(&DAT_000077bc);\n      if (dataLength < 2) {\n        process_and_format_data_00004c84(\"     \");\n      }\n      else {\n        process_and_format_data_00004c84(\"[%u] \",currentIndex);\n      }\n      if (mappedValue == '\\0') {\n        if (*(char *)(dataObjectPtr + 7) == '\\0') {\n          process_and_format_data_00004c84(&DAT_000077d8,(int)*(short *)(dataObjectPtr + (uint)currentIndex * 2));\n        }\n        else if ((*(char *)(dataObjectPtr + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObjectPtr + 7),4)) &&\n                (*(char *)(dataObjectPtr + 7) < '\\0')) {\n          bufferLength = convert_integer_to_ascii_00003e9e(stackBuffer,(int)*(short *)(dataObjectPtr + (uint)currentIndex * 2),\n                                  (int)*(char *)(dataObjectPtr + 7));\n          stackBuffer[bufferLength] = 0;\n          process_and_format_data_00004c84(&DAT_000077dc,stackBuffer);\n        }\n        else {\n          process_and_format_data_00004c84(\"%iE%i\",(int)*(short *)(dataObjectPtr + (uint)currentIndex * 2),\n                       (int)*(char *)(dataObjectPtr + 7));\n        }\n      }\n      else {\n        process_and_format_data_00004c84(\"%6d %c\",(int)*(short *)(dataObjectPtr + (uint)currentIndex * 2),mappedValue);\n      }\n      memoryAddress = get_memory_address_00003810(*(undefined *)(dataObjectPtr + 6));\n      process_and_format_data_00004c84(&DAT_000077e8,memoryAddress);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_objects_00003694",
                "param_1": "dataObjectPtr",
                "param_2": "dataLength",
                "uVar1": "memoryAddress",
                "cVar2": "bitFlag",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "stackBuffer",
                "local_10": "bufferLength",
                "local_a": "mappedValue",
                "local_9": "currentIndex"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined inputValue)\n\n{\n  undefined *result;\n  \n  switch(inputValue) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "inputValue",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_param_to_value_00003918",
            "code": "\nundefined4 mapParamToValue_00003918(undefined input)\n\n{\n  undefined4 output;\n  \n  switch(input) {\n  case 2:\n    output = 0x68;\n    break;\n  case 3:\n    output = 0x6b;\n    break;\n  case 6:\n    output = 0x4d;\n    break;\n  case 9:\n    output = 0x47;\n    break;\n  case 0xc:\n    output = 0x54;\n    break;\n  case 0xf:\n    output = 0x50;\n    break;\n  case 0xf1:\n    output = 0x66;\n    break;\n  default:\n    output = 0;\n    break;\n  case 0xf4:\n    output = 0x70;\n    break;\n  case 0xf7:\n    output = 0x6e;\n    break;\n  case 0xfa:\n    output = 0x75;\n    break;\n  case 0xfd:\n    output = 0x6d;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_param_to_value_00003918",
                "param_1": "input",
                "uVar1": "output"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_device_name_000039e8",
            "code": "\nchar * getDeviceName_000039e8(char deviceClass)\n\n{\n  char *deviceName;\n  \n  switch(deviceClass) {\n  case '\\0':\n    deviceName = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    deviceName = \"ACT_ANY\";\n    break;\n  case 'B':\n    deviceName = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    deviceName = \"ACT_SERVO\";\n    break;\n  case 'D':\n    deviceName = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    deviceName = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    deviceName = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    deviceName = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    deviceName = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    deviceName = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    deviceName = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    deviceName = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    deviceName = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    deviceName = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    deviceName = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    deviceName = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    deviceName = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    deviceName = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    deviceName = \"SENSE_UV\";\n    break;\n  case -0x74:\n    deviceName = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    deviceName = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    deviceName = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    deviceName = \"SENSE_CO2\";\n    break;\n  default:\n    if (deviceClass == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    deviceName = \"CLASS_UNKNOWN\";\n  }\n  return deviceName;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_device_name_000039e8",
                "param_1": "deviceClass",
                "pcVar1": "deviceName"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_00003d24",
            "code": "\nundefined4 * findElement_00003d24(int numElements)\n\n{\n  int counter;\n  undefined4 *currentElement;\n  \n  counter = 0;\n  for (currentElement = DAT_1fff0db0; (counter < numElements && (currentElement != (undefined4 *)0x0));\n      currentElement = (undefined4 *)*currentElement) {\n    counter = counter + 1;\n  }\n  return currentElement;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_00003d24",
                "param_1": "numElements",
                "local_10": "counter",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 inputParameter)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),inputParameter);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "inputParameter",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_with_param_00003d94",
            "code": "\nundefined4 executeFunctionWithParam_00003d94(int functionPtr,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPtr == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(functionPtr + 0xc) + 4))(*(undefined4 *)(functionPtr + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_with_param_00003d94",
                "param_1": "functionPtr",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputOffset,uint inputNumber)\n\n{\n  uint remainder;\n  char *outputBuffer;\n  uint multiplier;\n  int digitCount;\n  \n  digitCount = 1;\n  if (inputNumber < 1000000000) {\n    for (multiplier = 10; multiplier <= inputNumber; multiplier = multiplier * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputOffset != 0) {\n    outputBuffer = (char *)(digitCount + inputOffset);\n    remainder = inputNumber;\n    do {\n      outputBuffer = outputBuffer + -1;\n      *outputBuffer = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputOffset",
                "param_2": "inputNumber",
                "local_20": "remainder",
                "local_14": "outputBuffer",
                "local_10": "multiplier",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "count_digits_00003e58",
            "code": "\nint countDigits_00003e58(undefined *str,int num)\n\n{\n  int result;\n  int absNum;\n  undefined *updatedStr;\n  \n  absNum = num;\n  updatedStr = str;\n  if (-(num >> 0x1f) != 0) {\n    if (str != (undefined *)0x0) {\n      updatedStr = str + 1;\n      *str = 0x2d;\n    }\n    absNum = -num;\n  }\n  result = countDigits_00003e58Helper(updatedStr,absNum);\n  return -(num >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "count_digits_00003e58",
                "param_1": "str",
                "param_2": "num",
                "local_18": "absNum",
                "local_14": "updatedStr",
                "count_digits_00003dc4": "countDigitsHelper",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "convert_integer_to_ascii_00003e9e",
            "code": "\nundefined4 convertIntegerToAscii_00003e9e(undefined4 value,short numDigits,undefined4 buffer)\n\n{\n  undefined4 result;\n  \n  result = convert_integer_to_ascii_00003ec4(value,(int)numDigits,buffer);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "convert_integer_to_ascii_00003e9e",
                "param_1": "value",
                "param_2": "numDigits",
                "param_3": "buffer",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "convert_integer_to_ascii_00003ec4",
            "code": "\nint convertIntegerToAscii_00003ec4(undefined *outputBuffer,uint inputInteger,int numDigits)\n\n{\n  int totalDigits;\n  undefined4 digitsAfterDecimal;\n  uint quotient;\n  int remainder;\n  int digitsWritten;\n  \n  if (numDigits + 7 < 0 != SCARRY4(numDigits,7)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  digitsWritten = 0;\n  if (numDigits == 0) {\n    digitsWritten = count_digits_00003e58(outputBuffer,inputInteger);\n  }\n  else if (numDigits < 1) {\n    quotient = inputInteger / *(uint *)(&DAT_00007978 + numDigits * -4);\n    remainder = inputInteger - *(uint *)(&DAT_00007978 + numDigits * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputInteger < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      digitsWritten = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      totalDigits = count_digits_00003e58(0,quotient);\n      digitsWritten = totalDigits + 1 + digitsWritten;\n    }\n    else {\n      totalDigits = count_digits_00003e58(outputBuffer + digitsWritten,quotient);\n      totalDigits = digitsWritten + totalDigits;\n      digitsWritten = totalDigits + 1;\n      outputBuffer[totalDigits] = 0x2e;\n      digitsAfterDecimal = count_digits_00003e58(outputBuffer + digitsWritten,remainder);\n      copy_and_clear_memory_00003ff4(outputBuffer + digitsWritten,digitsAfterDecimal,-numDigits,0x30);\n    }\n    digitsWritten = -numDigits + digitsWritten;\n  }\n  else {\n    digitsWritten = count_digits_00003e58(outputBuffer,inputInteger);\n    if (outputBuffer != (undefined *)0x0) {\n      memset_memory_range_00004622(outputBuffer + digitsWritten,0x30,numDigits);\n    }\n    digitsWritten = numDigits + digitsWritten;\n  }\n  return digitsWritten;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "convert_integer_to_ascii_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputInteger",
                "param_3": "numDigits",
                "iVar1": "totalDigits",
                "uVar2": "digitsAfterDecimal",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "digitsWritten"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_clear_memory_00003ff4",
            "code": "\nuint copy_and_clear_memory_00003ff4(int num_elements,uint src_start,uint src_end,undefined clear_value)\n\n{\n  uint new_src_start;\n  \n  new_src_start = src_start;\n  if ((src_start < src_end) && (new_src_start = src_end, num_elements != 0)) {\n    copy_range_000045ee((src_end - src_start) + num_elements,num_elements,src_start);\n    memset_memory_range_00004622(num_elements,clear_value,src_end - src_start);\n  }\n  return new_src_start;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_clear_memory_00003ff4",
                "param_1": "num_elements",
                "param_2": "src_start",
                "param_3": "src_end",
                "param_4": "clear_value",
                "uVar1": "new_src_start"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_and_print_number_00004042",
            "code": "\nvoid parseAndPrintNumber_00004042(undefined4 inputNumber)\n\n{\n  parseNumber(inputNumber,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_and_print_number_00004042",
                "param_1": "inputNumber",
                "parse_number_00004f84": "parseNumber"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 process_data_0000404c(uint *input_buffer,int *data_structure)\n\n{\n  int index;\n  int *temp_ptr;\n  uint input_value;\n  ushort flag;\n  int temp_var;\n  code *function_ptr;\n  int loop_counter;\n  uint temp_value;\n  bool is_zero;\n  \n  flag = *(ushort *)(data_structure + 3);\n  input_value = (uint)flag;\n  if ((int)(input_value << 0x1c) < 0) {\n    index = data_structure[4];\n    if (index != 0) {\n      temp_var = input_value << 0x1e;\n      is_zero = temp_var == 0;\n      loop_counter = *data_structure;\n      if (is_zero) {\n        temp_var = data_structure[5];\n      }\n      *data_structure = index;\n      if (!is_zero) {\n        temp_var = 0;\n      }\n      data_structure[2] = temp_var;\n      for (loop_counter = loop_counter - index; 0 < loop_counter; loop_counter = loop_counter - temp_var) {\n        temp_var = (*(code *)data_structure[10])(input_buffer,data_structure[8],index,loop_counter);\n        if (temp_var < 1) {\n          *(ushort *)(data_structure + 3) = *(ushort *)(data_structure + 3) | 0x40;\n          return 0xffffffff;\n        }\n        index = index + temp_var;\n      }\n    }\n  }\n  else {\n    if ((data_structure[1] < 1) && (data_structure[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (code *)data_structure[0xb];\n    if (function_ptr == (code *)0x0) {\n      return 0;\n    }\n    temp_value = *input_buffer;\n    *input_buffer = 0;\n    if ((flag & 0x1000) == 0) {\n      index = (*function_ptr)(input_buffer,data_structure[8],input_value & 0x1000,1);\n      if ((index == -1) && (input_value = *input_buffer, input_value != 0)) {\n        if ((input_value == 0x1d) || (input_value == 0x16)) {\n          *input_buffer = temp_value;\n          return 0;\n        }\n        flag = *(ushort *)(data_structure + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      index = data_structure[0x15];\n    }\n    if (((int)((uint)*(ushort *)(data_structure + 3) << 0x1d) < 0) &&\n       (index = index - data_structure[1], data_structure[0xd] != 0)) {\n      index = index - data_structure[0x10];\n    }\n    index = (*(code *)data_structure[0xb])(input_buffer,data_structure[8],index,0);\n    flag = *(ushort *)(data_structure + 3);\n    if ((index == -1) &&\n       ((0x1d < *input_buffer || (-1 < (int)((0x20400001U >> (*input_buffer & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(data_structure + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n    data_structure[1] = 0;\n    *data_structure = data_structure[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((index != -1 || (*input_buffer == 0)))) {\n      data_structure[0x15] = index;\n    }\n    temp_ptr = (int *)data_structure[0xd];\n    *input_buffer = temp_value;\n    if (temp_ptr != (int *)0x0) {\n      if (temp_ptr != data_structure + 0x11) {\n        initialize_data_00004b34(input_buffer);\n      }\n      data_structure[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "input_buffer",
                "param_2": "data_structure",
                "iVar1": "index",
                "piVar2": "temp_ptr",
                "uVar3": "input_value",
                "uVar4": "flag",
                "iVar5": "temp_var",
                "pcVar6": "function_ptr",
                "iVar7": "loop_counter",
                "uVar8": "temp_value",
                "bVar9": "is_zero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int inputParam,undefined4 *outputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (outputParam[4] != 0) {\n    if ((inputParam != 0) && (*(int *)(inputParam + 0x18) == 0)) {\n      initialize_memory_and_data_000042a4();\n    }\n    if (outputParam == &DAT_000079b8) {\n      outputParam = *(undefined4 **)(inputParam + 4);\n    }\n    else if (outputParam == (undefined4 *)&DAT_000079d8) {\n      outputParam = *(undefined4 **)(inputParam + 8);\n    }\n    else if (outputParam == (undefined4 *)&DAT_00007998) {\n      outputParam = *(undefined4 **)(inputParam + 0xc);\n    }\n    if (*(short *)(outputParam + 3) != 0) {\n      if ((-1 < (int)(outputParam[0x19] << 0x1f)) && (-1 < (int)*(short *)(outputParam + 3) << 0x16)) {\n        FUNC_000045e8(outputParam[0x16]);\n      }\n      returnValue = process_data_0000404c(inputParam,outputParam);\n      if ((int)(outputParam[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(outputParam + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(outputParam[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocations_000041d0",
            "code": "\nuint processRelocations_000041d0(int baseAddress,undefined4 size,undefined4 offset)\n\n{\n  uint result;\n  int offsetCount;\n  dword *relocationEntries;\n  int relocationEntry;\n  uint combinedResult;\n  int remainingOffsets;\n  undefined4 *elfHeader;\n  \n  if (baseAddress == 0) {\n    elfHeader = &DAT_000079f8;\n    relocationEntries = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combinedResult = 0;\n    do {\n      remainingOffsets = relocationEntries[1];\n      relocationEntry = relocationEntries[2];\n      while (remainingOffsets = remainingOffsets + -1, -1 < remainingOffsets) {\n        if ((1 < *(ushort *)(relocationEntry + 0xc)) && (offsetCount = *(short *)(relocationEntry + 0xe) + 1, offsetCount != 0)) {\n          result = process_data_00004158(0x1fff0284,relocationEntry,offset,offsetCount,elfHeader);\n          combinedResult = combinedResult | result;\n        }\n        relocationEntry = relocationEntry + 0x68;\n      }\n      relocationEntries = (dword *)*relocationEntries;\n    } while (relocationEntries != (dword *)0x0);\n    return combinedResult;\n  }\n  combinedResult = process_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,baseAddress);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocations_000041d0",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "offset",
                "uVar1": "result",
                "iVar2": "offsetCount",
                "pdVar3": "relocationEntries",
                "iVar4": "relocationEntry",
                "uVar5": "combinedResult",
                "iVar6": "remainingOffsets",
                "puVar7": "elfHeader"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_data_structure_000041f4",
            "code": "\nvoid initializeDataStructure_000041f4(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[4] = 0;\n  data[5] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[6] = 0;\n  clearMemoryRange(data + 0x17,0,8);\n  data[9] = 0x4dc9;\n  data[10] = 0x4def;\n  data[0xb] = 0x4e27;\n  data[8] = data;\n  data[0xc] = &someLabel;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_data_structure_000041f4",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "memset_memory_range_00004622": "clearMemoryRange",
                "LAB_00004e4a_1": "someLabel"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_and_initialize_memory_00004248",
            "code": "\nundefined4 * allocateAndInitializeMemory_00004248(undefined4 memorySize,int count)\n\n{\n  undefined4 *allocatedMemory;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  allocatedMemory = (undefined4 *)allocate_memory_00004bd0(memorySize,offset + 0x74);\n  if (allocatedMemory != (undefined4 *)0x0) {\n    *allocatedMemory = 0;\n    allocatedMemory[1] = count;\n    allocatedMemory[2] = allocatedMemory + 3;\n    memset_memory_range_00004622(allocatedMemory + 3,0,offset + 0x68);\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_memory_00004248",
                "param_1": "memorySize",
                "param_2": "count",
                "puVar1": "allocatedMemory",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_memory_and_data_000042a4",
            "code": "\nvoid initializeMemoryAndData_000042a4(int functionParam)\n\n{\n  undefined4 returnValue;\n  \n  initialize_memory_0000428c();\n  if (*(int *)(functionParam + 0x18) == 0) {\n    *(undefined4 *)(functionParam + 0x48) = 0;\n    *(undefined4 *)(functionParam + 0x4c) = 0;\n    *(undefined4 *)(functionParam + 0x50) = 0;\n    returnValue = 0x1fff0284;\n    *(undefined **)(functionParam + 0x28) = &DAT_0000423d;\n    if (functionParam == 0x1fff0284) {\n      returnValue = 1;\n    }\n    if (functionParam == 0x1fff0284) {\n      *(undefined4 *)(functionParam + 0x18) = returnValue;\n    }\n    returnValue = relocateSymbols(functionParam);\n    *(undefined4 *)(functionParam + 4) = returnValue;\n    returnValue = relocateSymbols(functionParam);\n    *(undefined4 *)(functionParam + 8) = returnValue;\n    returnValue = relocateSymbols(functionParam);\n    *(undefined4 *)(functionParam + 0xc) = returnValue;\n    initializeDataStructure(*(undefined4 *)(functionParam + 4),4,0);\n    initializeDataStructure(*(undefined4 *)(functionParam + 8),9,1);\n    initializeDataStructure(*(undefined4 *)(functionParam + 0xc),0x12,2);\n    *(undefined4 *)(functionParam + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_memory_and_data_000042a4",
                "param_1": "functionParam",
                "uVar1": "returnValue",
                "relocate_symbols_00004314": "relocateSymbols",
                "initialize_data_structure_000041f4": "initializeDataStructure"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "relocate_symbols_00004314",
            "code": "\nundefined4 * relocateSymbols_00004314(undefined4 *result_ptr)\n\n{\n  dword allocated_memory;\n  int num_symbols;\n  undefined4 *symbol_ptr;\n  dword *rel_array_ptr;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    initialize_memory_and_data_000042a4(0x1fff0284);\n  }\n  rel_array_ptr = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    num_symbols = rel_array_ptr[1];\n    symbol_ptr = (undefined4 *)rel_array_ptr[2];\n    while (num_symbols = num_symbols + -1, -1 < num_symbols) {\n      if (*(short *)(symbol_ptr + 3) == 0) {\n        symbol_ptr[3] = 0xffff0001;\n        symbol_ptr[0x19] = 0;\n        FUNC_000045e4(symbol_ptr + 0x16);\n        initialize_data_00004280();\n        symbol_ptr[1] = 0;\n        symbol_ptr[2] = 0;\n        symbol_ptr[4] = 0;\n        symbol_ptr[5] = 0;\n        *symbol_ptr = 0;\n        symbol_ptr[6] = 0;\n        memset_memory_range_00004622(symbol_ptr + 0x17,0,8);\n        symbol_ptr[0xd] = 0;\n        symbol_ptr[0xe] = 0;\n        symbol_ptr[0x12] = 0;\n        symbol_ptr[0x13] = 0;\n        return symbol_ptr;\n      }\n      symbol_ptr = symbol_ptr + 0x1a;\n    }\n    if (*rel_array_ptr == 0) {\n      allocated_memory = allocate_and_initialize_memory_00004248(result_ptr,4);\n      *rel_array_ptr = allocated_memory;\n      if (allocated_memory == 0) {\n        initialize_data_00004280();\n        *result_ptr = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    rel_array_ptr = (dword *)*rel_array_ptr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "relocate_symbols_00004314",
                "param_1": "result_ptr",
                "dVar1": "allocated_memory",
                "iVar2": "num_symbols",
                "puVar3": "symbol_ptr",
                "pdVar4": "rel_array_ptr"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        memset_memory_range_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_memory_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int dataOffset,code *callback)\n\n{\n  uint result;\n  int *ptr1;\n  int ptr2;\n  uint finalResult;\n  int loopCount;\n  \n  ptr1 = (int *)(dataOffset + 0x48);\n  finalResult = 0;\n  do {\n    loopCount = ptr1[1];\n    ptr2 = ptr1[2];\n    while (loopCount = loopCount + -1, -1 < loopCount) {\n      if ((1 < *(ushort *)(ptr2 + 0xc)) && (*(short *)(ptr2 + 0xe) != -1)) {\n        result = (*callback)(ptr2);\n        finalResult = finalResult | result;\n      }\n      ptr2 = ptr2 + 0x68;\n    }\n    ptr1 = (int *)*ptr1;\n  } while (ptr1 != (int *)0x0);\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "dataOffset",
                "param_2": "callback",
                "piVar2": "ptr1",
                "iVar3": "ptr2",
                "uVar1": "result",
                "uVar4": "finalResult",
                "iVar5": "loopCount"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "read_and_process_data_00004418",
            "code": "\nuint read_and_process_data_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **data_ptr;\n  byte *byte_ptr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4();\n  }\n  if (data_ptr == (byte **)&DAT_000079b8) {\n    data_ptr = *(byte ***)(offset + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_000079d8) {\n    data_ptr = *(byte ***)(offset + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_00007998) {\n    data_ptr = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  byte_ptr = data_ptr[1];\n  data_ptr[1] = byte_ptr + -1;\n  if ((int)(byte_ptr + -1) < 0) {\n    result = process_data_00005e10(offset,data_ptr);\n  }\n  else {\n    byte_ptr = *data_ptr;\n    *data_ptr = byte_ptr + 1;\n    result = (uint)*byte_ptr;\n  }\n  if ((-1 < (int)data_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "read_and_process_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "data_ptr",
                "pbVar4": "byte_ptr"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateComponents_0000443c(undefined4 *dateInput,uint *dateComponents)\n\n{\n  int quotient;\n  uint modifiedQuotient;\n  uint totalDays;\n  uint leapYears;\n  uint yearIncrement;\n  undefined4 year;\n  undefined4 month;\n  uint day;\n  bool isNegative;\n  \n  year = *dateInput;\n  month = dateInput[1];\n  quotient = divide_and_modulo_00006974(year,month,0x15180,0);\n  totalDays = 0x15180;\n  divide_and_modulo_00006974(year,month,0x15180,0);\n  isNegative = (int)totalDays < 0;\n  if (isNegative) {\n    totalDays = totalDays + 0x15180;\n  }\n  if (isNegative) {\n    modifiedQuotient = quotient + 0xafa6b;\n  }\n  else {\n    modifiedQuotient = quotient + 0xafa6c;\n  }\n  years = totalDays / 0xe10;\n  months = (totalDays % 0xe10) / 0x3c;\n  *dateComponents = (totalDays % 0xe10) % 0x3c;\n  dayOfWeek = (modifiedQuotient + 3) % 7;\n  totalDays = modifiedQuotient;\n  if ((int)modifiedQuotient < 0) {\n    totalDays = modifiedQuotient - 0x23ab0;\n  }\n  modifiedQuotient = (totalDays / 0x23ab1) * -0x23ab1 + modifiedQuotient;\n  leapYears = ((modifiedQuotient / 0x8eac + modifiedQuotient) - modifiedQuotient / 0x5b4) - modifiedQuotient / 0x23ab0;\n  yearIncrement = leapYears / 0x16d;\n  modifiedQuotient = (yearIncrement / 100 - leapYears / 0x5b4) + modifiedQuotient + yearIncrement * -0x16d;\n  day = modifiedQuotient * 5 + 2;\n  leapYears = day / 0x99;\n  if (day < 0x5fa) {\n    quotient = 2;\n  }\n  else {\n    quotient = -10;\n  }\n  day = leapYears + quotient;\n  quotient = (totalDays / 0x23ab1) * 400 + yearIncrement;\n  if (day < 2) {\n    quotient = quotient + 1;\n  }\n  if (modifiedQuotient < 0x132) {\n    if (((yearIncrement & 3) == 0) && (yearIncrement != (yearIncrement / 100) * 100)) {\n      totalDays = 1;\n    }\n    else {\n      totalDays = (uint)(yearIncrement % 400 == 0);\n    }\n    totalDays = modifiedQuotient + 0x3b + totalDays;\n  }\n  else {\n    totalDays = modifiedQuotient - 0x132;\n  }\n  modifiedMonth = totalDays;\n  modifiedDay = (modifiedQuotient + 1) - (leapYears * 0x99 + 2) / 5;\n  modifiedYear = day;\n  modifiedYearIncrement = quotient - 0x76c;\n  extraField = 0;\n  return dateComponents;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "dateInput",
                "param_2": "dateComponents",
                "iVar1": "quotient",
                "uVar2": "modifiedQuotient",
                "uVar3": "totalDays",
                "uVar4": "leapYears",
                "uVar5": "yearIncrement",
                "uVar6": "year",
                "uVar7": "month",
                "uVar8": "day",
                "bVar9": "isNegative",
                "param_2[2]": "years",
                "param_2[1]": "months",
                "param_2[6]": "dayOfWeek",
                "param_2[7]": "modifiedMonth",
                "param_2[3]": "modifiedDay",
                "param_2[4]": "modifiedYear",
                "param_2[5]": "modifiedYearIncrement",
                "param_2[8]": "extraField"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "initialize_and_execute_functions_0000459c",
            "code": "\nvoid initialize_and_execute_functions_0000459c(void)\n\n{\n  code **functionPointerArray;\n  int index;\n  \n  functionPointerArray = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  }\n  initialize_memory_00000410();\n  functionPointerArray = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "initialize_and_execute_functions_0000459c",
                "ppcVar1": "functionPointerArray",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_range_000045ee",
            "code": "\nvoid copyRange_000045ee(undefined *dest,undefined *src,int length)\n\n{\n  undefined *destEnd;\n  undefined *srcEnd;\n  \n  srcEnd = src + length;\n  if ((src < dest) && (dest < srcEnd)) {\n    destEnd = dest + length;\n    while (destEnd != dest) {\n      srcEnd = srcEnd + -1;\n      destEnd = destEnd + -1;\n      *destEnd = *srcEnd;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcEnd; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_range_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "destEnd",
                "puVar2": "srcEnd"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "memset_memory_range_00004622",
            "code": "\nvoid memset_memory_range_00004622(undefined *dest,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = dest + size;\n  for (; dest != end_address; dest = dest + 1) {\n    *dest = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "memset_memory_range_00004622",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_00004634",
            "code": "\nvoid updateDate_00004634(uint *dateArray,uint year,undefined4 param_3)\n\n{\n  int daysInMonth;\n  uint remainingDays;\n  uint leapYears;\n  int daysInYear;\n  bool isNegative;\n  uint *quotient;\n  uint day;\n  undefined4 param_3;\n  \n  quotient = dateArray;\n  day = year;\n  param_3 = param_3;\n  if (0x3b < *dateArray) {\n    divide_and_remainder_00005584(&quotient,*dateArray,0x3c);\n    remainingDays = dateArray[1] + (int)quotient;\n    dateArray[1] = remainingDays;\n    if ((int)day < 0) {\n      remainingDays = remainingDays - 1;\n      *dateArray = day + 0x3c;\n    }\n    else {\n      *dateArray = day;\n    }\n    if ((int)day < 0) {\n      dateArray[1] = remainingDays;\n    }\n  }\n  if (0x3b < dateArray[1]) {\n    divide_and_remainder_00005584(&quotient,dateArray[1],0x3c);\n    isNegative = (int)day < 0;\n    leapYears = dateArray[2] + (int)quotient;\n    dateArray[2] = leapYears;\n    remainingDays = day;\n    if (isNegative) {\n      remainingDays = day + 0x3c;\n      leapYears = leapYears - 1;\n    }\n    if (!isNegative) {\n      dateArray[1] = remainingDays;\n    }\n    if (isNegative) {\n      dateArray[1] = remainingDays;\n    }\n    if (isNegative) {\n      dateArray[2] = leapYears;\n    }\n  }\n  if (0x17 < dateArray[2]) {\n    divide_and_remainder_00005584(&quotient,dateArray[2],0x18);\n    isNegative = (int)day < 0;\n    leapYears = dateArray[3] + (int)quotient;\n    dateArray[3] = leapYears;\n    remainingDays = day;\n    if (isNegative) {\n      remainingDays = day + 0x18;\n      leapYears = leapYears - 1;\n    }\n    if (!isNegative) {\n      dateArray[2] = remainingDays;\n    }\n    if (isNegative) {\n      dateArray[2] = remainingDays;\n    }\n    if (isNegative) {\n      dateArray[3] = leapYears;\n    }\n  }\n  if (0xb < dateArray[4]) {\n    divide_and_remainder_00005584(&quotient,dateArray[4],0xc);\n    isNegative = (int)day < 0;\n    remainingDays = dateArray[5] + (int)quotient;\n    dateArray[5] = remainingDays;\n    if (isNegative) {\n      day = day + 0xc;\n      remainingDays = remainingDays - 1;\n    }\n    if (!isNegative) {\n      dateArray[4] = day;\n    }\n    if (isNegative) {\n      dateArray[4] = day;\n    }\n    if (isNegative) {\n      dateArray[5] = remainingDays;\n    }\n  }\n  remainingDays = dateArray[5];\n  if ((remainingDays & 3) == 0) {\n    if (remainingDays == (remainingDays / 100) * 100) {\n      if ((remainingDays + 0x76c) % 400 == 0) {\n        daysInYear = 0x1d;\n      }\n      else {\n        daysInYear = 0x1c;\n      }\n    }\n    else {\n      daysInYear = 0x1d;\n    }\n  }\n  else {\n    daysInYear = 0x1c;\n  }\n  if ((int)dateArray[3] < 1) {\n    while ((int)dateArray[3] < 1) {\n      remainingDays = dateArray[4];\n      dateArray[4] = remainingDays - 1;\n      if (remainingDays - 1 == 0xffffffff) {\n        leapYears = dateArray[5];\n        remainingDays = leapYears - 1;\n        dateArray[4] = 0xb;\n        dateArray[5] = remainingDays;\n        if ((remainingDays & 3) == 0) {\n          if (remainingDays == (remainingDays / 100) * 100) {\n            if ((leapYears + 0x76b) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n      daysInMonth = daysInYear;\n      if (dateArray[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateArray[4]];\n      }\n      dateArray[3] = daysInMonth + dateArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      remainingDays = dateArray[4];\n      daysInMonth = daysInYear;\n      if (remainingDays != 1) {\n        daysInMonth = (&DAT_000079fc)[remainingDays];\n      }\n      if ((int)dateArray[3] <= daysInMonth) break;\n      dateArray[3] = dateArray[3] - daysInMonth;\n      dateArray[4] = remainingDays + 1;\n      if (remainingDays + 1 == 0xc) {\n        leapYears = dateArray[5];\n        remainingDays = leapYears + 1;\n        dateArray[4] = 0;\n        dateArray[5] = remainingDays;\n        if ((remainingDays & 3) == 0) {\n          if (remainingDays % 100 == 0) {\n            if ((leapYears + 0x76d) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_00004634",
                "param_1": "dateArray",
                "param_2": "year",
                "iVar1": "daysInMonth",
                "uVar2": "remainingDays",
                "uVar3": "leapYears",
                "iVar4": "daysInYear",
                "bVar5": "isNegative",
                "local_20": "quotient",
                "local_1c": "day",
                "uStack_18": "param_3"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_offset_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateOffset_000047e4(int *dateParams)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *baseAddress;\n  uint tempVar4;\n  int tempVar5;\n  int tempVar6;\n  int tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  int dayOffset;\n  uint year;\n  uint isNegativeYear;\n  uint numDays;\n  uint tempVar15;\n  bool bVar16;\n  \n  baseAddress = (int *)get_base_address_000056b0();\n  update_date_00004634(dateParams);\n  year = dateParams[5];\n  dayOffset = dateParams[3] + -1 + *(int *)(&DAT_00007a2c + dateParams[4] * 4);\n  if (((1 < dateParams[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    dayOffset = dayOffset + 1;\n  }\n  dateParams[7] = dayOffset;\n  if (20000 < (int)&DAT_00002710 + year) {\n    tempVar7 = -1;\n    tempVar5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (tempVar9 = 0x45; (int)year < (int)tempVar9; tempVar9 = tempVar9 - 1) {\n        if ((tempVar9 & 3) == 0) {\n          if (tempVar9 == (tempVar9 / 100) * 100) {\n            if ((tempVar9 + 0x76c) % 400 == 0) {\n              tempVar7 = 0x16e;\n            }\n            else {\n              tempVar7 = 0x16d;\n            }\n          }\n          else {\n            tempVar7 = 0x16e;\n          }\n        }\n        else {\n          tempVar7 = 0x16d;\n        }\n        dayOffset = dayOffset - tempVar7;\n      }\n      if ((tempVar9 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          tempVar7 = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            tempVar7 = 0x16e;\n          }\n        }\n        else {\n          tempVar7 = 0x16e;\n        }\n      }\n      else {\n        tempVar7 = 0x16d;\n      }\n      dayOffset = dayOffset - tempVar7;\n    }\n  }\n  else {\n    tempVar9 = 0x46;\n    do {\n      if ((tempVar9 & 3) == 0) {\n        if (tempVar9 % 100 == 0) {\n          if ((tempVar9 + 0x76c) % 400 == 0) {\n            tempVar7 = 0x16e;\n          }\n          else {\n            tempVar7 = 0x16d;\n          }\n        }\n        else {\n          tempVar7 = 0x16e;\n        }\n      }\n      else {\n        tempVar7 = 0x16d;\n      }\n      tempVar9 = tempVar9 + 1;\n      dayOffset = dayOffset + tempVar7;\n    } while (year != tempVar9);\n  }\n  totalDays = (longlong)dayOffset * 0x15180 + (longlong)(dateParams[2] * 0xe10 + dateParams[1] * 0x3c + *dateParams)\n  ;\n  tempVar15 = (uint)totalDays;\n  tempVar7 = (int)((ulonglong)totalDays >> 0x20);\n  get_memory_address_000050e8();\n  parse_relocation_data_00005100();\n  tempVar9 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = baseAddress[10];\n    tempVar7 = (uint)totalDays + year;\n    tempVar5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)totalDays,year);\n  }\n  else {\n    numDays = dateParams[8];\n    isNegativeYear = numDays;\n    if (0 < (int)numDays) {\n      isNegativeYear = 1;\n    }\n    if ((baseAddress[1] == dateParams[5] + 0x76c) || (tempVar5 = calculate_date_offset_00004f98(), tempVar5 != 0)) {\n      tempVar10 = baseAddress[0x14];\n      tempVar4 = baseAddress[0x12];\n      tempVar8 = baseAddress[10];\n      tempVar9 = tempVar4 - tempVar8;\n      tempVar5 = (baseAddress[0x13] - ((int)tempVar8 >> 0x1f)) - (uint)(tempVar4 < tempVar8);\n      if (((int)((tempVar7 - tempVar5) - (uint)(tempVar15 < tempVar9)) < 0 ==\n           (SBORROW4(tempVar7,tempVar5) != SBORROW4(tempVar7 - tempVar5,(uint)(tempVar15 < tempVar9)))) &&\n         (tempVar6 = (baseAddress[0x13] - ((int)tempVar10 >> 0x1f)) - (uint)(tempVar4 < tempVar10),\n         bVar16 = tempVar15 < tempVar4 - tempVar10,\n         (int)((tempVar7 - tempVar6) - (uint)bVar16) < 0 !=\n         (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)bVar16)))) goto LAB_00004a88;\n      tempVar4 = baseAddress[8] - tempVar10;\n      tempVar6 = (baseAddress[9] - ((int)tempVar10 >> 0x1f)) - (uint)((uint)baseAddress[8] < tempVar10);\n      if (*baseAddress != 0) {\n        if ((int)((tempVar7 - tempVar6) - (uint)(tempVar15 < tempVar4)) < 0 ==\n            (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)(tempVar15 < tempVar4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempVar9 = 0;\n        if ((int)numDays < 0) goto LAB_00004934;\nLAB_00004a14:\n        tempVar15 = isNegativeYear ^ tempVar9;\n        isNegativeYear = tempVar9;\n        if (tempVar15 == 1) {\n          if (tempVar9 == 0) {\n            tempVar7 = tempVar10 - tempVar8;\n          }\n          else {\n            tempVar7 = tempVar8 - tempVar10;\n          }\n          tempVar5 = dateParams[3];\n          *dateParams = *dateParams + tempVar7;\n          updatedTotalDays = totalDays + tempVar7;\n          update_date_00004634(dateParams);\n          tempVar5 = dateParams[3] - tempVar5;\n          totalDays = totalDays + tempVar7;\n          if (tempVar5 != 0) {\n            if (tempVar5 < 2) {\n              if (tempVar5 == -2 || tempVar5 + 2 < 0 != SCARRY4(tempVar5,2)) {\n                tempVar5 = 1;\n              }\n            }\n            else {\n              tempVar5 = -1;\n            }\n            tempVar7 = tempVar5 + dateParams[7];\n            dayOffset = dayOffset + tempVar5;\n            if (tempVar7 < 0) {\n              tempVar9 = year - 1;\n              if ((tempVar9 & 3) == 0) {\n                if (tempVar9 == (tempVar9 / 100) * 100) {\n                  tempVar7 = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    tempVar7 = 0x16c;\n                  }\n                }\n                else {\n                  tempVar7 = 0x16d;\n                }\n              }\n              else {\n                tempVar7 = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  tempVar5 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    tempVar5 = 0x16e;\n                  }\n                }\n                else {\n                  tempVar5 = 0x16e;\n                }\n              }\n              else {\n                tempVar5 = 0x16d;\n              }\n              if (tempVar5 <= tempVar7) {\n                tempVar7 = tempVar7 - tempVar5;\n              }\n            }\n            dateParams[7] = tempVar7;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((tempVar7 - tempVar6) - (uint)(tempVar15 < tempVar4)) < 0 !=\n          (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)(tempVar15 < tempVar4)))) {\nLAB_0000491e:\n        if ((int)((tempVar7 - tempVar5) - (uint)(tempVar15 < tempVar9)) < 0 ==\n            (SBORROW4(tempVar7,tempVar5) != SBORROW4(tempVar7 - tempVar5,(uint)(tempVar15 < tempVar9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)numDays) {\n        tempVar9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempVar9 = isNegativeYear;\n      if (isNegativeYear != 1) goto LAB_00004934;\n    }\n    year = baseAddress[0x14];\n    tempVar7 = (uint)totalDays + year;\n    tempVar5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)totalDays,year);\n    tempVar9 = 1;\n  }\n  get_memory_pointer_000050f4();\n  dateParams[8] = tempVar9;\n  dateParams[6] = (dayOffset + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempVar5,tempVar7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_offset_000047e4",
                "param_1": "dateParams",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "baseAddress",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "iVar6": "tempVar6",
                "iVar7": "tempVar7",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "iVar11": "dayOffset",
                "uVar12": "year",
                "uVar13": "isNegativeYear",
                "uVar14": "numDays",
                "uVar15": "tempVar15"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "initialize_data_00004b34",
            "code": "\nvoid initialize_data_00004b34(undefined4 *output_ptr,int input_size,undefined4 param_3,undefined4 param_4)\n\n{\n  int *temp_ptr;\n  int **extraout_ptr;\n  int **data_ptr;\n  int **prev_ptr;\n  int **current_ptr;\n  int **new_ptr;\n  bool is_equal;\n  \n  if (input_size == 0) {\n    return;\n  }\n  new_ptr = (int **)(input_size + -4);\n  if (*(int *)(input_size + -4) < 0) {\n    new_ptr = (int **)((int)new_ptr + *(int *)(input_size + -4));\n  }\n  initialize_data_00004b34_part1();\n  prev_ptr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    new_ptr[1] = (int *)0x0;\n    data_ptr = extraout_ptr;\n    DAT_1fff0db4 = new_ptr;\n  }\n  else {\n    current_ptr = DAT_1fff0db4;\n    if (new_ptr < DAT_1fff0db4) {\n      data_ptr = (int **)*new_ptr;\n      prev_ptr = (int **)((int)new_ptr + (int)data_ptr);\n      is_equal = DAT_1fff0db4 == prev_ptr;\n      if (is_equal) {\n        prev_ptr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      new_ptr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = new_ptr;\n      if (is_equal) {\n        prev_ptr = (int **)((int)prev_ptr + (int)data_ptr);\n        *new_ptr = (int *)prev_ptr;\n      }\n    }\n    else {\n      do {\n        prev_ptr = current_ptr;\n        current_ptr = (int **)prev_ptr[1];\n        if (current_ptr == (int **)0x0) break;\n      } while (current_ptr <= new_ptr);\n      data_ptr = (int **)*prev_ptr;\n      if ((int **)((int)prev_ptr + (int)data_ptr) == new_ptr) {\n        data_ptr = (int **)((int)data_ptr + (int)*new_ptr);\n        *prev_ptr = (int *)data_ptr;\n        if (current_ptr == (int **)((int)prev_ptr + (int)data_ptr)) {\n          temp_ptr = *current_ptr;\n          prev_ptr[1] = current_ptr[1];\n          data_ptr = (int **)((int)data_ptr + (int)temp_ptr);\n          *prev_ptr = (int *)data_ptr;\n        }\n      }\n      else if (new_ptr < (int **)((int)prev_ptr + (int)data_ptr)) {\n        *output_ptr = 0xc;\n      }\n      else {\n        data_ptr = (int **)((int)new_ptr + (int)*new_ptr);\n        is_equal = current_ptr == data_ptr;\n        if (is_equal) {\n          data_ptr = (int **)*current_ptr;\n          current_ptr = (int **)current_ptr[1];\n        }\n        new_ptr[1] = (int *)current_ptr;\n        if (is_equal) {\n          data_ptr = (int **)((int)data_ptr + (int)*new_ptr);\n          *new_ptr = (int *)data_ptr;\n        }\n        prev_ptr[1] = (int *)new_ptr;\n      }\n    }\n  }\n  initialize_data_00004b34_part2(output_ptr,data_ptr,prev_ptr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "initialize_data_00004b34",
                "param_1": "output_ptr",
                "param_2": "input_size",
                "piVar1": "temp_ptr",
                "extraout_r1": "extraout_ptr",
                "ppiVar2": "data_ptr",
                "ppiVar3": "prev_ptr",
                "ppiVar4": "current_ptr",
                "ppiVar5": "new_ptr",
                "bVar6": "is_equal",
                "initialize_data_00005790": "initialize_data_part1",
                "initialize_data_0000579c": "initialize_data_part2"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *output_ptr,uint input_size,undefined4 constant_value_1,undefined4 constant_value_2)\n\n{\n  uint *prev_block_ptr;\n  int difference;\n  uint block_difference;\n  uint *block_ptr;\n  uint aligned_size;\n  \n  aligned_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < input_size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    initialize_data_00005790();\n    prev_block_ptr = DAT_1fff0db4;\n    for (block_ptr = DAT_1fff0db4; block_ptr != (uint *)0x0; block_ptr = (uint *)block_ptr[1]) {\n      block_difference = *block_ptr - aligned_size;\n      if (-1 < (int)block_difference) {\n        if (0xb < block_difference) {\n          *block_ptr = block_difference;\n          block_ptr = (uint *)((int)block_ptr + block_difference);\n          goto LAB_00004c34;\n        }\n        if (prev_block_ptr == block_ptr) {\n          DAT_1fff0db4 = (uint *)block_ptr[1];\n        }\n        if (prev_block_ptr != block_ptr) {\n          prev_block_ptr[1] = (uint)(uint *)block_ptr[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev_block_ptr = block_ptr;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = update_relocation_offset_00000428(output_ptr,0,prev_block_ptr,0,constant_value_2);\n    }\n    prev_block_ptr = (uint *)update_relocation_offset_00000428(output_ptr,aligned_size);\n    if ((prev_block_ptr != (uint *)0xffffffff) &&\n       ((block_ptr = (uint *)((int)prev_block_ptr + 3U & 0xfffffffc), prev_block_ptr == block_ptr ||\n        (difference = update_relocation_offset_00000428(output_ptr,(int)block_ptr - (int)prev_block_ptr), difference != -1)))) {\nLAB_00004c34:\n      *block_ptr = aligned_size;\nLAB_00004c42:\n      initialize_data_0000579c(output_ptr);\n      aligned_size = (int)block_ptr + 0xbU & 0xfffffff8;\n      difference = aligned_size - (int)(block_ptr + 1);\n      if (difference == 0) {\n        return aligned_size;\n      }\n      *(uint *)((int)block_ptr + difference) = (int)(block_ptr + 1) - aligned_size;\n      return aligned_size;\n    }\n    *output_ptr = 0xc;\n    initialize_data_0000579c(output_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "output_ptr",
                "param_2": "input_size",
                "param_3": "constant_value_1",
                "param_4": "constant_value_2",
                "puVar1": "prev_block_ptr",
                "iVar2": "difference",
                "uVar3": "block_difference",
                "puVar4": "block_ptr",
                "uVar5": "aligned_size"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_and_format_data_00004c84",
            "code": "\nvoid process_and_format_data_00004c84(undefined4 input_param,undefined4 output_param,undefined4 aux_param1,undefined4 aux_param2)\n\n{\n  dword rel_offset;\n  undefined4 input_copy;\n  undefined4 output_copy;\n  undefined4 aux_copy1;\n  undefined4 aux_copy2;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  input_copy = input_param;\n  output_copy = output_param;\n  aux_copy1 = aux_param1;\n  aux_copy2 = aux_param2;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_and_format_data_00004c84_000057f8(rel_offset,*(undefined4 *)(rel_offset + 8),input_param,&output_copy,input_copy,&output_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_and_format_data_00004c84",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "aux_param1",
                "param_4": "aux_param2",
                "dVar1": "rel_offset",
                "uVar2": "input_copy",
                "uStack_c": "output_copy",
                "uStack_8": "aux_copy1",
                "uStack_4": "aux_copy2"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_data_00004cb4",
            "code": "\nuint process_data_00004cb4(uint input_value)\n\n{\n  dword offset;\n  undefined4 *data_ptr;\n  uint temp_value;\n  undefined *byte_ptr;\n  undefined4 param_4;\n  undefined4 param_5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  temp_value = data_ptr[2] - 1;\n  data_ptr[2] = temp_value;\n  if (((int)temp_value < 0) && (((int)temp_value < (int)data_ptr[6] || (temp_value = input_value & 0xff, temp_value == 10))))\n  {\n    input_value = process_and_initialize_data_00005404(offset,input_value,data_ptr,temp_value,param_4,param_5);\n  }\n  else {\n    byte_ptr = (undefined *)*data_ptr;\n    *data_ptr = byte_ptr + 1;\n    *byte_ptr = (char)input_value;\n    input_value = input_value & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_data_00004cb4",
                "param_1": "input_value",
                "dVar1": "offset",
                "puVar2": "data_ptr",
                "uVar3": "temp_value",
                "puVar4": "byte_ptr",
                "unaff_r4": "param_4",
                "unaff_r5": "param_5"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_file_00004db8",
            "code": "\nundefined4 processFile_00004db8(int fileSize)\n\n{\n  char currentChar;\n  dword ELF_Rel_offset;\n  int result;\n  char *strPtr;\n  char **dataPtr;\n  undefined4 returnValue;\n  char *filePtr;\n  \n  ELF_Rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4();\n  }\n  dataPtr = *(char ***)(ELF_Rel_offset + 8);\n  if (*(int *)(ELF_Rel_offset + 0x18) == 0) {\n    initialize_memory_and_data_000042a4(ELF_Rel_offset);\n  }\n  if (dataPtr == (char **)&DAT_000079b8) {\n    dataPtr = *(char ***)(ELF_Rel_offset + 4);\n  }\n  else if (dataPtr == (char **)&DAT_000079d8) {\n    dataPtr = *(char ***)(ELF_Rel_offset + 8);\n  }\n  else if (dataPtr == (char **)&DAT_00007998) {\n    dataPtr = *(char ***)(ELF_Rel_offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataPtr + 3) << 0x1c) < 0) && (dataPtr[4] != (char *)0x0)) ||\n     (result = process_function_000054a8(ELF_Rel_offset,dataPtr), result == 0)) {\n    filePtr = (char *)(fileSize + -1);\n    do {\n      while( true ) {\n        filePtr = filePtr + 1;\n        currentChar = *filePtr;\n        strPtr = dataPtr[2] + -1;\n        dataPtr[2] = strPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)strPtr) {\n            filePtr = *dataPtr;\n            returnValue = 10;\n            *dataPtr = filePtr + 1;\n            *filePtr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_and_initialize_data_00005404(ELF_Rel_offset,10,dataPtr);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)strPtr < 0) && (((int)strPtr < (int)dataPtr[6] || (currentChar == '\\n')))) break;\n        strPtr = *dataPtr;\n        *dataPtr = strPtr + 1;\n        *strPtr = currentChar;\n      }\n      result = process_and_initialize_data_00005404(ELF_Rel_offset,currentChar,dataPtr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_file_00004db8",
                "param_1": "fileSize",
                "cVar1": "currentChar",
                "dVar2": "ELF_Rel_offset",
                "iVar3": "result",
                "pcVar4": "strPtr",
                "pcVar7": "filePtr",
                "ppcVar5": "dataPtr",
                "uVar6": "returnValue"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_values_00004dc8",
            "code": "\nvoid updateValues_00004dc8(undefined4 array,int data)\n\n{\n  int lastIndex;\n  uint newValue;\n  bool isValidElement;\n  \n  lastIndex = find_last_equal_element_index_00000490(array,(int)*(short *)(data + 0xe));\n  isValidElement = -1 < lastIndex;\n  if (isValidElement) {\n    newValue = *(int *)(data + 0x54) + lastIndex;\n  }\n  else {\n    newValue = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (isValidElement) {\n    *(uint *)(data + 0x54) = newValue;\n  }\n  if (!isValidElement) {\n    *(short *)(data + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_values_00004dc8",
                "param_1": "array",
                "param_2": "data",
                "iVar1": "lastIndex",
                "uVar2": "newValue",
                "bVar3": "isValidElement"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 outputBuffer,int inputBuffer,undefined4 sourceData,undefined4 destinationData)\n\n{\n  undefined4 returnValue;\n  \n  if ((int)((uint)*(ushort *)(inputBuffer + 0xc) << 0x17) < 0) {\n    initialize_value_and_return_000004f2(outputBuffer,(int)*(short *)(inputBuffer + 0xe),0,2);\n  }\n  *(ushort *)(inputBuffer + 0xc) = *(ushort *)(inputBuffer + 0xc) & 0xefff;\n  returnValue = copy_and_return_data_00000e38(sourceData,destinationData);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "param_3": "sourceData",
                "param_4": "destinationData",
                "uVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "initialize_value_and_set_flag_00004e26",
            "code": "\nvoid initializeValueAndSetFlag_00004e26(undefined4 param1,int param2)\n\n{\n  int initializedValue;\n  ushort updatedValue;\n  bool isInitializedValueNegative;\n  \n  initializedValue = initialize_value_and_return_000004f2(param1,(int)*(short *)(param2 + 0xe));\n  isInitializedValueNegative = initializedValue == -1;\n  if (isInitializedValueNegative) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = initializedValue;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isInitializedValueNegative) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isInitializedValueNegative) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "initialize_value_and_set_flag_00004e26",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initializedValue",
                "uVar2": "updatedValue",
                "bVar3": "isInitializedValueNegative"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_bytes_00004e52",
            "code": "\nint compare_bytes_00004e52(byte *byte_array1,byte *byte_array2)\n\n{\n  byte current_byte;\n  uint byte_difference;\n  bool is_match;\n  \n  do {\n    byte_difference = (uint)*byte_array1;\n    current_byte = *byte_array2;\n    is_match = byte_difference == 1;\n    if (byte_difference != 0) {\n      is_match = byte_difference == current_byte;\n    }\n    byte_array1 = byte_array1 + 1;\n    byte_array2 = byte_array2 + 1;\n  } while (is_match);\n  return byte_difference - current_byte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "byte_array1",
                "param_2": "byte_array2",
                "bVar1": "current_byte",
                "uVar2": "byte_difference",
                "bVar3": "is_match"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "find_difference_00004e66",
            "code": "\nint find_difference_00004e66(byte *data,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = data;\n    do {\n      current_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_value != 0);\n    difference = current_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "find_difference_00004e66",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_value"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint ch;\n  uint isNegative;\n  uint digit;\n  int compare;\n  uint maxResult;\n  uint maxDividend;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = input;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    ch = (uint)*currentChar;\n    isNegative = (byte)(&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextChar;\n    isNegative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00004ed6;\n  if ((*nextChar & 0xdf) == 0x58) {\n    ch = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxResult = isNegative + 0x7fffffff;\n  compare = 0;\n  maxDividend = maxResult / base;\n  result = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (compare != -1) {\n      if ((maxDividend < result) || ((maxDividend == result && ((int)(maxResult - base * maxDividend) < (int)digit)))) {\n        compare = -1;\n      }\n      else {\n        result = result * base + digit;\n        compare = 1;\n      }\n    }\n    ch = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (compare == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxResult;\n    if (output == (byte **)0x0) {\n      return maxResult;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (compare == 0) goto LAB_00004f64;\n  }\n  input = nextChar + -1;\nLAB_00004f64:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "input",
                "param_2": "output",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "ch",
                "uVar3": "isNegative",
                "uVar4": "digit",
                "iVar5": "compare",
                "uVar6": "maxResult",
                "uVar7": "maxDividend",
                "pbVar8": "currentChar",
                "pbVar9": "nextChar"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_date_offset_00004f98",
            "code": "\nundefined4 calculateDateOffset_00004f98(uint year)\n\n{\n  uint *baseAddress;\n  undefined4 returnValue;\n  uint dayOfWeek;\n  int temp1;\n  uint *currentMonthData;\n  int offset;\n  uint isLeapYear;\n  int temp2;\n  int adjustedOffset;\n  uint isDivisibleBy400;\n  \n  baseAddress = (uint *)get_base_address_000056b0();\n  if ((int)year < 0x7b2) {\n    returnValue = 0;\n  }\n  else {\n    offset = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    baseAddress[1] = year;\n    isDivisibleBy400 = (uint)(year % 400 == 0);\n    currentMonthData = baseAddress;\n    do {\n      dayOfWeek = currentMonthData[5];\n      if (*(char *)(currentMonthData + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            temp1 = 0;\n          }\n          else {\n            temp1 = 1;\n          }\n        }\n        else {\n          temp1 = 0;\n        }\n        temp1 = temp1 + offset + dayOfWeek + -1;\n      }\n      else if (*(char *)(currentMonthData + 2) == 'D') {\n        temp1 = offset + dayOfWeek;\n      }\n      else {\n        isLeapYear = isDivisibleBy400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYear = 1;\n        }\n        temp2 = 0;\n        temp1 = offset;\n        while( true ) {\n          temp2 = temp2 + 1;\n          if ((int)currentMonthData[3] <= temp2) break;\n          temp1 = temp1 + *(int *)(&UNK_00007b98 + temp2 * 4 + isLeapYear * 0x30);\n        }\n        adjustedOffset = dayOfWeek - (temp1 + 4U) % 7;\n        if (adjustedOffset < 0) {\n          adjustedOffset = adjustedOffset + 7;\n        }\n        for (adjustedOffset = (currentMonthData[4] - 1) * 7 + adjustedOffset;\n            *(int *)(&UNK_00007b98 + temp2 * 4 + isLeapYear * 0x30) <= adjustedOffset; adjustedOffset = adjustedOffset + -7) {\n        }\n        temp1 = temp1 + adjustedOffset;\n      }\n      dayOfWeek = currentMonthData[10] + temp1 * 0x15180 + currentMonthData[6];\n      currentMonthData[8] = dayOfWeek;\n      currentMonthData[9] = (int)dayOfWeek >> 0x1f;\n      currentMonthData = currentMonthData + 10;\n    } while (baseAddress + 0x14 != currentMonthData);\n    dayOfWeek = baseAddress[9];\n    isDivisibleBy400 = baseAddress[0x13];\n    *baseAddress = (uint)((int)((dayOfWeek - isDivisibleBy400) - (uint)(baseAddress[8] < baseAddress[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isDivisibleBy400) !=\n                    SBORROW4(dayOfWeek - isDivisibleBy400,(uint)(baseAddress[8] < baseAddress[0x12]))));\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_date_offset_00004f98",
                "param_1": "year",
                "puVar1": "baseAddress",
                "uVar2": "returnValue",
                "uVar3": "dayOfWeek",
                "iVar4": "temp1",
                "puVar5": "currentMonthData",
                "iVar6": "offset",
                "uVar7": "isLeapYear",
                "iVar8": "temp2",
                "iVar9": "adjustedOffset",
                "uVar10": "isDivisibleBy400"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * getMemoryAddress_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_pointer_000050f4",
            "code": "\nundefined * getMemoryPointer_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_pointer_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_relocation_data_00005100",
            "code": "\nvoid parseRelocationData_00005100(void)\n\n{\n  dword relOffset;\n  int baseAddress;\n  char *valueOffset;\n  int result;\n  int count;\n  undefined dataType;\n  char *currentOffset;\n  bool isFirst;\n  ushort *pFirstField1;\n  int *pFirstOffset1;\n  ushort *pFirstField2;\n  int *pFirstOffset2;\n  ushort field1a;\n  ushort field1b;\n  ushort field1c;\n  ushort field1d;\n  ushort field1e;\n  ushort field1f;\n  int length;\n  char *localBuffer [2];\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  baseAddress = get_base_address_000056b0();\n  valueOffset = (char *)find_value_offset_000056a0(relOffset,&DAT_00007a5c);\n  if (valueOffset == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = valueOffset;\n    DAT_1fff0ddc = valueOffset;\n    initialize_relocation_data_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (result = compare_bytes_00004e52(), result != 0)) {\n    initialize_relocation_data_00005780(DAT_1fff0dd4);\n    result = get_last_character_index_00005ecc(valueOffset);\n    DAT_1fff0dd4 = allocate_memory_00004bd0(relOffset,result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string_00005ebc(DAT_1fff0dd4,valueOffset);\n    }\n    if (*valueOffset == ':') {\n      valueOffset = valueOffset + 1;\n    }\n    result = process_binary_data_00005e68(valueOffset,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&length);\n    if (0 < result) {\n      currentOffset = valueOffset + length;\n      if (valueOffset[length] == '-') {\n        currentOffset = currentOffset + 1;\n        result = -1;\n      }\n      else {\n        if (valueOffset[length] == '+') {\n          currentOffset = currentOffset + 1;\n        }\n        result = 1;\n      }\n      field1b = 0;\n      field1c = 0;\n      pFirstField1 = &field1b;\n      pFirstOffset1 = &length;\n      pFirstField2 = &field1c;\n      pFirstOffset2 = &length;\n      count = process_binary_data_00005e68(currentOffset,\"%hu%n:%hu%n:%hu%n\",&field1a,&length,&field1b,&length,\n                           &field1c,&length);\n      if (0 < count) {\n        *(uint *)(baseAddress + 0x28) =\n             ((uint)field1a * 0xe10 + (uint)field1b * 0x3c + (uint)field1c) * result;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        currentOffset = currentOffset + length;\n        result = process_binary_data_00005e68(currentOffset,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&length,pFirstField1,pFirstOffset1,pFirstField2,\n                             pFirstOffset2);\n        if (result < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(baseAddress + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          valueOffset = currentOffset + length;\n          if (currentOffset[length] == '-') {\n            valueOffset = valueOffset + 1;\n            result = -1;\n          }\n          else {\n            if (currentOffset[length] == '+') {\n              valueOffset = valueOffset + 1;\n            }\n            result = 1;\n          }\n          field1a = 0;\n          field1b = 0;\n          field1c = 0;\n          length = 0;\n          count = process_binary_data_00005e68(valueOffset,\"%hu%n:%hu%n:%hu%n\",&field1a,&length,&field1b,&length,\n                               &field1c,&length);\n          if (count < 1) {\n            result = *(int *)(baseAddress + 0x28) + -0xe10;\n          }\n          else {\n            result = ((uint)field1a * 0xe10 + (uint)field1b * 0x3c + (uint)field1c) * result;\n          }\n          *(int *)(baseAddress + 0x50) = result;\n          valueOffset = valueOffset + length;\n          isFirst = false;\n          result = baseAddress;\n          while( true ) {\n            if (*valueOffset == ',') {\n              valueOffset = valueOffset + 1;\n            }\n            if (*valueOffset == 'M') {\n              count = process_binary_data_00005e68(valueOffset,\"M%hu%n.%hu%n.%hu%n\",&field1d,&length,&field1e,\n                                   &length,&field1f,&length);\n              if (count != 3) {\n                return;\n              }\n              if (0xb < field1d - 1) {\n                return;\n              }\n              if (4 < field1e - 1) {\n                return;\n              }\n              if (6 < field1f) {\n                return;\n              }\n              *(uint *)(result + 0xc) = (uint)field1d;\n              *(uint *)(result + 0x10) = (uint)field1e;\n              *(undefined *)(result + 8) = 0x4d;\n              *(uint *)(result + 0x14) = (uint)field1f;\n              currentOffset = valueOffset + length;\n            }\n            else {\n              if (*valueOffset == 'J') {\n                valueOffset = valueOffset + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              field1f = parse_integer_00005fd8(valueOffset,localBuffer,10);\n              currentOffset = localBuffer[0];\n              if (localBuffer[0] == valueOffset) {\n                if (isFirst) {\n                  *(undefined *)(baseAddress + 0x30) = 0x4d;\n                  *(undefined4 *)(baseAddress + 0x34) = 0xb;\n                  *(undefined4 *)(baseAddress + 0x38) = 1;\n                  *(undefined4 *)(baseAddress + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(baseAddress + 8) = 0x4d;\n                  *(undefined4 *)(baseAddress + 0xc) = 3;\n                  *(undefined4 *)(baseAddress + 0x10) = 2;\n                  *(undefined4 *)(baseAddress + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(result + 8) = dataType;\n                *(uint *)(result + 0x14) = (uint)field1f;\n              }\n            }\n            field1a = 2;\n            field1b = 0;\n            field1c = 0;\n            length = 0;\n            if (*currentOffset == '/') {\n              process_binary_data_00005e68(currentOffset,&DAT_00007a85,&field1a,&length,&field1b,&length,&field1c,\n                           &length);\n            }\n            *(uint *)(result + 0x18) =\n                 (uint)field1a * 0xe10 + (uint)field1b * 0x3c + (uint)field1c;\n            result = result + 0x28;\n            valueOffset = currentOffset + length;\n            if (isFirst) break;\n            isFirst = true;\n          }\n          calculate_date_offset_00004f98(*(undefined4 *)(baseAddress + 4));\n          DAT_1fff0ddc = *(char **)(baseAddress + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(baseAddress + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_relocation_data_00005100",
                "dVar1": "relOffset",
                "iVar2": "baseAddress",
                "pcVar3": "valueOffset",
                "iVar4": "result",
                "iVar5": "count",
                "uVar6": "dataType",
                "pcVar7": "currentOffset",
                "bVar8": "isFirst",
                "puVar9": "pFirstField1",
                "piVar10": "pFirstOffset1",
                "puVar11": "pFirstField2",
                "piVar12": "pFirstOffset2",
                "local_3c": "field1a",
                "local_3a": "field1b",
                "local_38": "field1c",
                "local_36": "field1d",
                "local_34": "field1e",
                "local_32": "field1f",
                "local_30": "length",
                "local_2c": "localBuffer"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_and_initialize_data_00005404",
            "code": "\nuint processAndInitializeData_00005404(int inputDataPtr,uint charToProcess,int *ptrArray,undefined4 param_4)\n\n{\n  int returnValue;\n  uint ushortValue;\n  undefined *charPointer;\n  \n  if ((inputDataPtr != 0) && (*(int *)(inputDataPtr + 0x18) == 0)) {\n    initializeMemoryAndData();\n  }\n  if (ptrArray == &DAT_000079b8) {\n    ptrArray = *(int **)(inputDataPtr + 4);\n  }\n  else if (ptrArray == (int *)&DAT_000079d8) {\n    ptrArray = *(int **)(inputDataPtr + 8);\n  }\n  else if (ptrArray == (int *)&DAT_00007998) {\n    ptrArray = *(int **)(inputDataPtr + 0xc);\n  }\n  ptrArray[2] = ptrArray[6];\n  ushortValue = (uint)*(ushort *)(ptrArray + 3);\n  returnValue = ushortValue << 0x1c;\n  if (((returnValue < 0) && (ushortValue = ptrArray[4], ushortValue != 0)) ||\n     (returnValue = processFunction(inputDataPtr,ptrArray,returnValue,ushortValue,param_4), returnValue == 0)) {\n    returnValue = *ptrArray - ptrArray[4];\n    charToProcess = charToProcess & 0xff;\n    if ((returnValue < ptrArray[5]) || (returnValue = processData(inputDataPtr,ptrArray), returnValue == 0)) {\n      ptrArray[2] = ptrArray[2] + -1;\n      charPointer = (undefined *)*ptrArray;\n      *ptrArray = (int)(charPointer + 1);\n      *charPointer = (char)charToProcess;\n      if (ptrArray[5] != returnValue + 1) {\n        if (-1 < (int)((uint)*(ushort *)(ptrArray + 3) << 0x1f)) {\n          return charToProcess;\n        }\n        if (charToProcess != 10) {\n          return charToProcess;\n        }\n      }\n      returnValue = processData(inputDataPtr,ptrArray);\n      if (returnValue == 0) {\n        return charToProcess;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_and_initialize_data_00005404",
                "param_1": "inputDataPtr",
                "param_2": "charToProcess",
                "param_3": "ptrArray",
                "initialize_memory_and_data_000042a4": "initializeMemoryAndData",
                "process_function_000054a8": "processFunction",
                "process_data_00004158": "processData",
                "iVar1": "returnValue",
                "uVar2": "ushortValue",
                "puVar3": "charPointer"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_function_000054a8",
            "code": "\nuint processFunction_000054a8(undefined4 *outputParam,undefined4 *inputParam)\n\n{\n  ushort bitFlag;\n  dword offset;\n  ushort temp;\n  uint ushortVal;\n  uint ushortVal2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputParam == &DAT_000079b8) {\n    inputParam = *(undefined4 **)(offset + 4);\n  }\n  else if (inputParam == (undefined4 *)&DAT_000079d8) {\n    inputParam = *(undefined4 **)(offset + 8);\n  }\n  else if (inputParam == (undefined4 *)&DAT_00007998) {\n    inputParam = *(undefined4 **)(offset + 0xc);\n  }\n  ushortVal = (uint)*(ushort *)(inputParam + 3);\n  temp = *(ushort *)(inputParam + 3);\n  if (-1 < (int)(ushortVal << 0x1c)) {\n    if (-1 < (int)(ushortVal << 0x1b)) {\n      *outputParam = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(ushortVal << 0x1d) < 0) {\n      if ((undefined4 *)inputParam[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputParam[0xd] != inputParam + 0x11) {\n          initialize_data_00004b34(outputParam);\n        }\n        inputParam[0xd] = 0;\n      }\n      *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) & 0xffdb;\n      inputParam[1] = 0;\n      *inputParam = inputParam[4];\n    }\n    *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) | 8;\n  }\n  if ((inputParam[4] == 0) && ((*(ushort *)(inputParam + 3) & 0x280) != 0x200)) {\n    initialize_memory_00005700(outputParam,inputParam);\n  }\n  bitFlag = *(ushort *)(inputParam + 3);\n  ushortVal = (uint)bitFlag;\n  temp = *(ushort *)(inputParam + 3);\n  ushortVal2 = ushortVal & 1;\n  if ((bitFlag & 1) == 0) {\n    if (-1 < (int)(ushortVal << 0x1e)) {\n      ushortVal2 = inputParam[5];\n    }\n    inputParam[2] = ushortVal2;\n  }\n  else {\n    inputParam[2] = 0;\n    inputParam[6] = -inputParam[5];\n  }\n  if (inputParam[4] != 0) {\n    return 0;\n  }\n  if ((bitFlag & 0x80) == 0) {\n    return ushortVal & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputParam + 3) = temp | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_function_000054a8",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "uVar1": "bitFlag",
                "dVar2": "offset",
                "uVar3": "temp",
                "uVar4": "ushortVal",
                "uVar5": "ushortVal2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_data_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divideAndRemainder_00005584(uint *quotient_and_remainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_and_remainder = quotient;\n  quotient_and_remainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotient_and_remainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_value_offset_0000562c",
            "code": "\nint find_value_offset_0000562c(undefined4 some_argument,char *input_string,int *result_index)\n\n{\n  char current_char;\n  int *ptr_arr;\n  int difference;\n  char *current_ptr;\n  int *ptr_elem;\n  int string_offset;\n  \n  initialize_memory_00005fec();\n  current_ptr = input_string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_ptr;\n      if (current_char == '\\0') {\n        string_offset = (int)current_ptr - (int)input_string;\n        ptr_arr = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          ptr_elem = ptr_arr;\n          if (*ptr_elem == 0) break;\n          difference = find_difference_00004e66(*ptr_elem,input_string,string_offset);\n          ptr_arr = ptr_elem + 1;\n          if ((difference == 0) && (difference = *ptr_elem, *(char *)(difference + string_offset) == '=')) {\n            *result_index = (int)((int)ptr_elem - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            initialize_memory_00005ff8(some_argument);\n            return difference + string_offset + 1;\n          }\n        }\n        break;\n      }\n      current_ptr = current_ptr + 1;\n    } while (current_char != '=');\n  }\n  initialize_memory_00005ff8(some_argument);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_value_offset_0000562c",
                "param_1": "some_argument",
                "param_2": "input_string",
                "param_3": "result_index",
                "cVar1": "current_char",
                "piVar2": "ptr_arr",
                "iVar3": "difference",
                "pcVar4": "current_ptr",
                "piVar5": "ptr_elem",
                "iVar6": "string_offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_value_offset_000056a0",
            "code": "\nvoid find_value_offset_000056a0(undefined4 input_param,undefined4 value_param,undefined4 output_param,undefined4 additional_param)\n\n{\n  undefined4 value_offset;\n  undefined4 output_offset;\n  \n  value_offset = value_param;\n  output_offset = output_param;\n  find_value_offset_000056a0_0000562c(input_param,value_param,&value_offset,additional_param,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_value_offset_000056a0",
                "param_1": "input_param",
                "param_2": "value_param",
                "param_3": "output_param",
                "param_4": "additional_param",
                "uStack_c": "value_offset",
                "uStack_8": "output_offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_base_address_000056b0",
            "code": "\nundefined4 getBaseAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_base_address_000056b0"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "initialize_and_check_permissions_000056b8",
            "code": "\nundefined4 initialize_and_check_permissions_000056b8(undefined4 input_parameter,int pointer_parameter,undefined4 *output_parameter,uint *flag_parameter)\n\n{\n  int result;\n  undefined4 status;\n  undefined local_buffer [4];\n  uint temp_value;\n  \n  if ((*(short *)(pointer_parameter + 0xe) < 0) ||\n     (result = initialize_pointer_00000514(input_parameter,(int)*(short *)(pointer_parameter + 0xe),local_buffer), result < 0)) {\n    *flag_parameter = 0;\n    if ((int)((uint)*(ushort *)(pointer_parameter + 0xc) << 0x18) < 0) {\n      status = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *flag_parameter = (uint)((temp_value & 0xf000) == 0x2000);\n  }\n  status = 0x400;\nLAB_000056f8:\n  *output_parameter = status;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "initialize_and_check_permissions_000056b8",
                "param_1": "input_parameter",
                "param_2": "pointer_parameter",
                "param_3": "output_parameter",
                "param_4": "flag_parameter",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_68": "local_buffer",
                "local_64": "temp_value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "initialize_memory_00005700",
            "code": "\nvoid initializeMemory_00005700(int param1,int *param2)\n\n{\n  ushort result;\n  int allocatedMemory;\n  int localParam1;\n  int *localParam2;\n  \n  if (-1 < (int)((uint)*(ushort *)(param2 + 3) << 0x1e)) {\n    localParam1 = param1;\n    localParam2 = param2;\n    result = initialize_and_check_permissions_000056b8(param1,param2,&localParam1,&localParam2);\n    allocatedMemory = allocate_memory_00004bd0(param1,localParam1);\n    if (allocatedMemory != 0) {\n      *(undefined **)(param1 + 0x28) = &DAT_0000423d;\n      *param2 = allocatedMemory;\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x80;\n      param2[5] = localParam1;\n      param2[4] = allocatedMemory;\n      if ((localParam2 != (int *)0x0) &&\n         (allocatedMemory = check_param_validity_00000534(param1,(int)*(short *)((int)param2 + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(param2 + 3) = result | *(ushort *)(param2 + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(param2 + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) & 0xfffc | 2;\n  }\n  *param2 = (int)param2 + 0x47;\n  param2[4] = (int)param2 + 0x47;\n  param2[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "initialize_memory_00005700",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "result",
                "iVar2": "allocatedMemory",
                "local_18": "localParam1",
                "local_14": "localParam2"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_relocation_data_00005780",
            "code": "\nvoid initializeRelocationData_00005780(undefined4 data)\n\n{\n  initialize_data_00004b34(relocationArray[16].offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_relocation_data_00005780",
                "param_1": "data",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_buffer_data_000057a8",
            "code": "\nint updateBufferData_000057a8(undefined4 defaultValue,int newData,undefined4 *buffer)\n\n{\n  int currentIndex;\n  undefined *currentPtr;\n  \n  currentIndex = buffer[2] + -1;\n  buffer[2] = currentIndex;\n  if ((currentIndex < 0) && ((currentIndex < (int)buffer[6] || (newData == 10)))) {\n    currentIndex = process_and_initialize_data_00005404();\n    return currentIndex;\n  }\n  currentPtr = (undefined *)*buffer;\n  *buffer = currentPtr + 1;\n  *currentPtr = (char)newData;\n  return newData;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_buffer_data_000057a8",
                "param_1": "defaultValue",
                "param_2": "newData",
                "param_3": "buffer",
                "iVar1": "currentIndex",
                "puVar2": "currentPtr"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "update_buffer_000057d2",
            "code": "\nint update_buffer_000057d2(undefined4 buffer,undefined4 data,undefined *input,int length)\n\n{\n  int result;\n  undefined *end;\n  int remaining;\n  \n  end = input + length;\n  remaining = length;\n  do {\n    if (input == end) {\n      return 0;\n    }\n    result = update_buffer_000057d2_data_000057a8(buffer,*input,data,length,remaining);\n    length = result + 1;\n    input = input + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "update_buffer_000057d2",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "input",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end",
                "iVar3": "remaining"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_and_format_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processAndFormatData_000057f8(int dataStruct,undefined4 *configParam,byte *inputString,int *outputBuffer)\n\n{\n  int resultCode;\n  int tmpVar;\n  int *ptrVar;\n  bool isDigit;\n  byte *bytePtr;\n  int unaff_r7;\n  byte *pointer;\n  int *outputPointer;\n  uint flags;\n  int numDecimal;\n  undefined4 uStack_80;\n  int numInteger;\n  int totalBytes;\n  byte formatChar;\n  undefined charSpaceHex;\n  undefined charSpaceOthers;\n  undefined charPositiveSign;\n  undefined4 local_30;\n  \n  if ((dataStruct != 0) && (*(int *)(dataStruct + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4();\n  }\n  if (configParam == &DAT_000079b8) {\n    configParam = *(undefined4 **)(dataStruct + 4);\n  }\n  else if (configParam == (undefined4 *)&DAT_000079d8) {\n    configParam = *(undefined4 **)(dataStruct + 8);\n  }\n  else if (configParam == (undefined4 *)&DAT_00007998) {\n    configParam = *(undefined4 **)(dataStruct + 0xc);\n  }\n  if ((-1 < (int)(configParam[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(configParam + 3) << 0x16))) {\n    FUNC_000045e8(configParam[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(configParam + 3) << 0x1c)) || (configParam[4] == 0)) &&\n     (resultCode = process_function_000054a8(dataStruct,configParam), resultCode != 0)) {\n    if ((-1 < (int)(configParam[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(configParam + 3) << 0x16)))\n    {\n      FUNC_000045ec(configParam[0x16]);\n    }\n    return -1;\n  }\n  totalBytes = 0;\n  charSpaceHex = 0x20;\n  charSpaceOthers = 0x30;\n  pointer = inputString;\n  outputPointer = outputBuffer;\nLAB_0000588e:\n  bytePtr = pointer;\n  if (*bytePtr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  pointer = bytePtr + 1;\n  if (*bytePtr == 0x25) {\nLAB_0000589a:\n    resultCode = (int)bytePtr - (int)inputString;\n    if (resultCode != 0) {\n      tmpVar = update_buffer_000057d2(dataStruct,configParam,inputString,resultCode);\n      if (tmpVar == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(configParam[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(configParam + 3) << 0x16))) {\n          FUNC_000045ec(configParam[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(configParam + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalBytes;\n      }\n      totalBytes = totalBytes + resultCode;\n    }\n    if (*bytePtr == 0) goto LAB_00005a06;\n    numDecimal = -1;\n    uStack_80 = 0;\n    flags = 0;\n    numInteger = 0;\n    charPositiveSign = 0;\n    local_30 = 0;\n    pointer = bytePtr + 1;\n    while( true ) {\n      bytePtr = pointer + 1;\n      resultCode = find_byte_sequence_00006010(\"#-0+ \",*pointer,5);\n      if (resultCode == 0) break;\n      flags = 1 << (resultCode - 0x7bfcU & 0xff) | flags;\n      pointer = bytePtr;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      charPositiveSign = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      charPositiveSign = 0x2b;\n    }\n    if (*pointer == 0x2a) {\n      ptrVar = outputPointer + 1;\n      numInteger = *outputPointer;\n      outputPointer = ptrVar;\n      if (numInteger < 0) {\n        numInteger = -numInteger;\n        flags = flags | 2;\n      }\n    }\n    else {\n      isDigit = false;\n      resultCode = numInteger;\n      bytePtr = pointer;\n      while( true ) {\n        if (9 < *bytePtr - 0x30) break;\n        resultCode = resultCode * 10 + (*bytePtr - 0x30);\n        isDigit = true;\n        bytePtr = bytePtr + 1;\n      }\n      if (isDigit) {\n        numInteger = resultCode;\n      }\n    }\n    if (*bytePtr == 0x2e) {\n      if (bytePtr[1] == 0x2a) {\n        numDecimal = *outputPointer;\n        if (numDecimal < 0) {\n          numDecimal = -1;\n        }\n        bytePtr = bytePtr + 2;\n        outputPointer = outputPointer + 1;\n      }\n      else {\n        isDigit = false;\n        numDecimal = 0;\n        resultCode = 0;\n        while( true ) {\n          bytePtr = bytePtr + 1;\n          if (9 < *bytePtr - 0x30) break;\n          resultCode = resultCode * 10 + (*bytePtr - 0x30);\n          isDigit = true;\n        }\n        if (isDigit) {\n          numDecimal = resultCode;\n        }\n      }\n    }\n    resultCode = find_byte_sequence_00006010(&DAT_00007c02,*bytePtr,3);\n    if (resultCode != 0) {\n      flags = flags | 0x40 << (resultCode - 0x7c02U & 0xff);\n      bytePtr = bytePtr + 1;\n    }\n    inputString = bytePtr + 1;\n    formatChar = *bytePtr;\n    resultCode = find_byte_sequence_00006010(\"efgEFG\",formatChar,6);\n    if (resultCode == 0) {\n      unaff_r7 = convert_number_to_hex_string_00005b34(dataStruct,&flags,configParam,0x57d3,&outputPointer);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      outputPointer = (int *)(((int)outputPointer + 7U & 0xfffffff8) + 8);\n    }\n    totalBytes = totalBytes + unaff_r7;\n    pointer = inputString;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_and_format_data_000057f8",
                "param_1": "dataStruct",
                "param_2": "configParam",
                "param_3": "inputString",
                "param_4": "outputBuffer",
                "iVar1": "resultCode",
                "iVar2": "tmpVar",
                "piVar3": "ptrVar",
                "bVar4": "isDigit",
                "pbVar5": "bytePtr",
                "pbVar6": "pointer",
                "local_8c": "outputPointer",
                "local_88": "flags",
                "local_84": "numDecimal",
                "local_7c": "numInteger",
                "local_74": "totalBytes",
                "local_70": "formatChar",
                "local_6f": "charSpaceHex",
                "local_6e": "charSpaceOthers",
                "local_45": "charPositiveSign"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_length_and_write_00005a58",
            "code": "\nundefined4\ncalculateLengthAndWrite_00005a58(undefined4 data,uint *ptrArray,uint *outputLength,undefined4 param4,code *callback)\n\n{\n  int loopIndex;\n  undefined4 returnValue;\n  int tempVar;\n  uint maxLength;\n  uint tempCounter;\n  bool isConditionMet;\n  \n  maxLength = ptrArray[4];\n  if ((int)ptrArray[4] < (int)ptrArray[2]) {\n    maxLength = ptrArray[2];\n  }\n  *outputLength = maxLength;\n  if (*(char *)((int)ptrArray + 0x43) != '\\0') {\n    *outputLength = maxLength + 1;\n  }\n  if ((int)(*ptrArray << 0x1a) < 0) {\n    *outputLength = *outputLength + 2;\n  }\n  if ((*ptrArray & 6) == 0) {\n    for (loopIndex = 0; loopIndex < (int)(ptrArray[3] - *outputLength); loopIndex = loopIndex + 1) {\n      tempVar = (*callback)(data,param4,(int)ptrArray + 0x19,1);\n      if (tempVar == -1) goto LAB_00005afc;\n    }\n  }\n  maxLength = (uint)*(byte *)((int)ptrArray + 0x43);\n  if (maxLength != 0) {\n    maxLength = 1;\n  }\n  if ((int)(*ptrArray << 0x1a) < 0) {\n    *(undefined *)((int)ptrArray + maxLength + 0x43) = 0x30;\n    *(undefined *)((int)ptrArray + maxLength + 0x44) = *(undefined *)((int)ptrArray + 0x45);\n    maxLength = maxLength + 2;\n  }\n  loopIndex = (*callback)(data,param4,(int)ptrArray + 0x43,maxLength);\n  if (loopIndex == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maxLength = ptrArray[3];\n    isConditionMet = (*ptrArray & 6) == 4;\n    if (isConditionMet) {\n      maxLength = maxLength - *outputLength;\n    }\n    if (isConditionMet) {\n      maxLength = maxLength & ~((int)maxLength >> 0x1f);\n    }\n    else {\n      maxLength = 0;\n    }\n    if ((int)ptrArray[4] < (int)ptrArray[2]) {\n      maxLength = maxLength + (ptrArray[2] - ptrArray[4]);\n    }\n    for (tempCounter = 0; maxLength != tempCounter; tempCounter = tempCounter + 1) {\n      loopIndex = (*callback)(data,param4,(int)ptrArray + 0x1a,1);\n      if (loopIndex == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_length_and_write_00005a58",
                "param_1": "data",
                "param_2": "ptrArray",
                "param_3": "outputLength",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "loopIndex",
                "uVar2": "returnValue",
                "iVar3": "tempVar",
                "uVar4": "maxLength",
                "uVar5": "tempCounter",
                "bVar6": "isConditionMet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "convert_number_to_hex_string_00005b34",
            "code": "\ncode * convertNumberToHexString_00005b34(undefined4 input,uint *number,undefined4 param_3,code *callback,uint **pPointer\n                   )\n\n{\n  bool isNegative;\n  byte byteValue;\n  int sequenceOffset;\n  code *output;\n  char *hexChars;\n  int callbackResult;\n  char *hex;\n  uint val;\n  uint *pVal;\n  uint base;\n  uint **pPointerPointer;\n  char **ppcVar;\n  uint sequenceLength;\n  char *pOutput;\n  code *localCallback;\n  \n  byteValue = *(byte *)(number + 6);\n  hex = (char *)((int)number + 0x43);\n  localCallback = callback;\n  if (0x78 < byteValue) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)number + 0x42) = byteValue;\nLAB_00005bdc:\n    hex = (char *)((int)number + 0x42);\n    val = 1;\nLAB_00005d28:\n    number[4] = val;\n    *(undefined *)((int)number + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteValue < 99) {\n    if (byteValue == 0) goto LAB_00005d06;\n    if (byteValue == 0x58) {\n      hexChars = \"0123456789ABCDEF\";\n      *(undefined *)((int)number + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteValue) {\n  case 99:\n    val = **pPointer;\n    *pPointer = *pPointer + 1;\n    *(char *)((int)number + 0x42) = (char)val;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *number;\n    pVal = *pPointer;\n    if ((int)(base << 0x18) < 0) {\n      val = *pVal;\n      *pPointer = pVal + 1;\n    }\n    else {\n      val = *pVal;\n      *pPointer = pVal + 1;\n      if ((base & 0x40) != 0) {\n        val = (uint)(short)val;\n      }\n    }\n    if ((int)val < 0) {\n      val = -val;\n      *(undefined *)((int)number + 0x43) = 0x2d;\n    }\n    hexChars = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    pPointerPointer = (uint **)*pPointer;\n    base = *number;\n    val = number[5];\n    *pPointer = (uint *)(pPointerPointer + 1);\n    pVal = *pPointerPointer;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *pVal = val;\n    }\n    else {\n      *(short *)pVal = (short)val;\n    }\nLAB_00005d06:\n    number[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    pVal = *pPointer;\n    val = *number;\n    *pPointer = pVal + 1;\n    if (((int)(val << 0x18) < 0) || (-1 < (int)(val << 0x19))) {\n      val = *pVal;\n    }\n    else {\n      val = (uint)*(ushort *)pVal;\n    }\n    hexChars = \"0123456789ABCDEF\";\n    if (byteValue == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *number = *number | 0x20;\n  case 0x78:\n    hexChars = \"0123456789abcdef\";\n    *(undefined *)((int)number + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *number;\n    val = **pPointer;\n    *pPointer = *pPointer + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      val = val & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *number = base | 0x20;\n    }\n    if (val == 0) {\n      *number = *number & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar = (char **)*pPointer;\n    *pPointer = (uint *)(ppcVar + 1);\n    hex = *ppcVar;\n    sequenceOffset = find_byte_sequence_00006010(hex,0,number[1],ppcVar,input,number,param_3);\n    if (sequenceOffset != 0) {\n      number[1] = sequenceOffset - (int)hex;\n    }\n    val = number[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)number + 0x43) = 0;\nLAB_00005c36:\n  sequenceLength = number[1];\n  number[2] = sequenceLength;\n  if (-1 < (int)sequenceLength) {\n    *number = *number & 0xfffffffb;\n  }\n  pOutput = hex;\n  if ((val != 0) || (sequenceLength != 0)) {\n    do {\n      pOutput = pOutput + -1;\n      *pOutput = hexChars[val - base * (val / base)];\n      isNegative = base <= val;\n      val = val / base;\n    } while (isNegative);\n  }\n  if (((base == 8) && ((int)(*number << 0x1f) < 0)) && ((int)number[1] <= (int)number[4])) {\n    pOutput[-1] = '0';\n    pOutput = pOutput + -1;\n  }\n  number[4] = (int)hex - (int)pOutput;\n  hex = pOutput;\nLAB_00005c84:\n  sequenceOffset = calculate_length_and_write_00005a58(input,number,&localCallback,param_3,callback);\n  if ((sequenceOffset == -1) || (sequenceOffset = (*callback)(input,param_3,hex,number[4]), sequenceOffset == -1)) {\nLAB_00005c98:\n    output = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*number << 0x1e) < 0) {\n      for (sequenceOffset = 0; sequenceOffset < (int)(number[3] - (int)localCallback); sequenceOffset = sequenceOffset + 1) {\n        callbackResult = (*callback)(input,param_3,(int)number + 0x19,1);\n        if (callbackResult == -1) goto LAB_00005c98;\n      }\n    }\n    output = (code *)number[3];\n    if ((int)(code *)number[3] < (int)localCallback) {\n      output = localCallback;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "convert_number_to_hex_string_00005b34",
                "param_1": "input",
                "param_2": "number",
                "param_4": "callback",
                "param_5": "pPointer",
                "bVar1": "isNegative",
                "bVar2": "byteValue",
                "iVar3": "sequenceOffset",
                "pcVar4": "output",
                "pcVar5": "hexChars",
                "iVar6": "callbackResult",
                "pcVar7": "hex",
                "uVar8": "val",
                "puVar9": "pVal",
                "uVar10": "base",
                "uVar13": "sequenceLength",
                "pcVar14": "pOutput",
                "local_24": "localCallback",
                "ppuVar11": "pPointerPointer",
                "ppcVar12": "ppcVar"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_data_00005e10",
            "code": "\nuint processData_00005e10(int data,byte **buffer)\n\n{\n  int result;\n  uint value;\n  byte *bytePtr;\n  \n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    initialize_memory_and_data_000042a4();\n  }\n  if (buffer == (byte **)&DAT_000079b8) {\n    buffer = *(byte ***)(data + 4);\n  }\n  else if (buffer == (byte **)&DAT_000079d8) {\n    buffer = *(byte ***)(data + 8);\n  }\n  else if (buffer == (byte **)&DAT_00007998) {\n    buffer = *(byte ***)(data + 0xc);\n  }\n  result = process_and_update_data_00006768(data,buffer);\n  if (result == 0) {\n    buffer[1] = buffer[1] + -1;\n    bytePtr = *buffer;\n    *buffer = bytePtr + 1;\n    value = (uint)*bytePtr;\n  }\n  else {\n    value = 0xffffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "param_1": "data",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "value",
                "pbVar3": "bytePtr"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_binary_data_00005e68",
            "code": "\nvoid processBinaryData_00005e68(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 processedData1;\n  undefined4 lastCharIndex;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined4 processedData2;\n  undefined4 processedData3;\n  undefined *pointer1;\n  undefined4 count1;\n  undefined4 count2;\n  undefined4 stackParam1;\n  undefined4 stackParam2;\n  \n  constant1 = 0x204;\n  processedData1 = inputParam1;\n  processedData2 = inputParam1;\n  stackParam1 = inputParam3;\n  stackParam2 = inputParam4;\n  lastCharIndex = get_last_character_index_00005ecc();\n  pointer1 = &LAB_00004dea_1;\n  count1 = 0;\n  count2 = 0;\n  constant2 = 0xffff;\n  processedData3 = lastCharIndex;\n  process_binary_data_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&processedData1,inputParam2,&stackParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_binary_data_00005e68",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_80": "processedData1",
                "local_7c": "lastCharIndex",
                "local_74": "constant1",
                "local_72": "constant2",
                "local_70": "processedData2",
                "local_6c": "processedData3",
                "local_5c": "pointer1",
                "local_4c": "count1",
                "local_38": "count2",
                "uStack_8": "stackParam1",
                "uStack_4": "stackParam2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "get_last_character_index_00005ecc",
            "code": "\nchar * get_last_character_index_00005ecc(char *str)\n\n{\n  char current_char;\n  char *next_character;\n  char *current_character;\n  \n  current_character = str;\n  do {\n    next_character = current_character + 1;\n    current_char = *current_character;\n    current_character = next_character;\n  } while (current_char != '\\0');\n  return next_character + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "get_last_character_index_00005ecc",
                "param_1": "str",
                "pcVar2": "next_character",
                "pcVar3": "current_character",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_integer_00005edc",
            "code": "\nuint parse_integer_00005edc(undefined4 *result,byte *input_string,byte **remaining_string,uint base)\n\n{\n  uint parsed_integer;\n  uint current_char;\n  byte is_negative;\n  int status;\n  uint digit_value;\n  uint max_value;\n  byte *ptr;\n  byte *next_char;\n  \n  next_char = input_string;\n  do {\n    ptr = next_char;\n    next_char = ptr + 1;\n    current_char = (uint)*ptr;\n    is_negative = (&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_char;\n    is_negative = 1;\n    next_char = ptr + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_char;\n    next_char = ptr + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00005f26;\n  if ((*next_char & 0xdf) == 0x58) {\n    current_char = (uint)next_char[1];\n    base = 0x10;\n    next_char = next_char + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  max_value = 0xffffffff / base;\n  parsed_integer = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (((status < 0) || (max_value < parsed_integer)) ||\n       ((max_value == parsed_integer && ((int)~(base * max_value) < (int)digit_value)))) {\n      status = -1;\n    }\n    else {\n      parsed_integer = parsed_integer * base + digit_value;\n      status = 1;\n    }\n    current_char = (uint)*next_char;\n    next_char = next_char + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsed_integer = 0xffffffff;\n    if (remaining_string == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      parsed_integer = -parsed_integer;\n    }\n    if (remaining_string == (byte **)0x0) {\n      return parsed_integer;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input_string = next_char + -1;\nLAB_00005fb8:\n  *remaining_string = input_string;\n  return parsed_integer;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_integer_00005edc",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "remaining_string",
                "param_4": "base",
                "uVar1": "parsed_integer",
                "uVar2": "current_char",
                "bVar3": "is_negative",
                "iVar4": "status",
                "uVar5": "digit_value",
                "uVar6": "max_value",
                "pbVar7": "ptr",
                "pbVar8": "next_char"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_integer_00005fd8",
            "code": "\nvoid parse_integer_00005fd8(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  parse_integer_00005fd8_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,input_1,input_2,input_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_integer_00005fd8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint byte_to_find,uint data_length)\n\n{\n  byte current_byte;\n  char is_matched_1;\n  char is_matched_2;\n  char is_matched_3;\n  char is_matched_4;\n  byte *next_byte;\n  uint *data_ptr;\n  byte *result_ptr;\n  uint ptr_alignment;\n  uint data_length_aligned;\n  uint byte_comparison_1;\n  uint byte_comparison_2;\n  bool is_matched_byte_1;\n  bool is_matched_byte_2;\n  bool is_matched_byte_3;\n  bool is_matched_byte_4;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)data_length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      data_length = data_length - 1;\n      data = data_ptr;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    ptr_alignment = (uint)data & 7;\n    while( true ) {\n      if (ptr_alignment == 0) {\n        ptr_alignment = byte_to_find | byte_to_find << 8;\n        ptr_alignment = ptr_alignment | ptr_alignment << 0x10;\n        data_length_aligned = data_length & 0xfffffff8;\n        do {\n          data_ptr = data + 2;\n          data_length_aligned = data_length_aligned - 8;\n          byte_comparison_1 = *data ^ ptr_alignment;\n          byte_comparison_2 = data[1] ^ ptr_alignment;\n          is_matched_1 = -((char)byte_comparison_1 == '\\0');\n          is_matched_2 = -((char)(byte_comparison_1 >> 8) == '\\0');\n          is_matched_3 = -((char)(byte_comparison_1 >> 0x10) == '\\0');\n          is_matched_4 = -((char)(byte_comparison_1 >> 0x18) == '\\0');\n          byte_comparison_1 = CONCAT13(is_matched_4,CONCAT12(is_matched_3,CONCAT11(is_matched_2,is_matched_1)));\n          is_matched_byte_1 = (char)byte_comparison_2 != '\\0';\n          is_matched_byte_2 = (char)(byte_comparison_2 >> 8) != '\\0';\n          is_matched_byte_3 = (char)(byte_comparison_2 >> 0x10) != '\\0';\n          is_matched_byte_4 = (char)(byte_comparison_2 >> 0x18) != '\\0';\n          byte_comparison_2 = CONCAT13(is_matched_byte_4 * is_matched_4 - !is_matched_byte_4,\n                            CONCAT12(is_matched_byte_3 * is_matched_3 - !is_matched_byte_3,\n                                     CONCAT11(is_matched_byte_2 * is_matched_2 - !is_matched_byte_2,is_matched_byte_1 * is_matched_1 - !is_matched_byte_1)));\n          if (byte_comparison_2 != 0) {\n            if (byte_comparison_1 == 0) {\n              result_ptr = (byte *)((int)data + 5);\n              byte_comparison_1 = byte_comparison_2;\n            }\n            else {\n              result_ptr = (byte *)((int)data + 1);\n            }\n            if ((byte_comparison_1 & 1) == 0) {\n              is_matched_byte_1 = (byte_comparison_1 & 0x100) == 0;\n              next_byte = result_ptr + 1;\n              if (is_matched_byte_1) {\n                is_matched_byte_1 = (byte_comparison_1 & 0x18000) == 0;\n                next_byte = result_ptr + 2;\n              }\n              result_ptr = next_byte;\n              if (is_matched_byte_1) {\n                result_ptr = result_ptr + 1;\n              }\n            }\n            return result_ptr + -1;\n          }\n          data = data_ptr;\n        } while (data_length_aligned != 0);\n        data_length = data_length & 7;\n        goto joined_r0x00006070;\n      }\n      data_ptr = (uint *)((int)data + 1);\n      data_length = data_length - 1;\n      if (*(byte *)data == byte_to_find) break;\n      ptr_alignment = (uint)data_ptr & 7;\n      data = data_ptr;\n      if (data_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)data_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "data_length",
                "bVar1": "current_byte",
                "cVar2": "is_matched_1",
                "cVar3": "is_matched_2",
                "cVar4": "is_matched_3",
                "cVar5": "is_matched_4",
                "pbVar6": "next_byte",
                "puVar7": "data_ptr",
                "pbVar8": "result_ptr",
                "uVar9": "ptr_alignment",
                "uVar10": "data_length_aligned",
                "uVar11": "byte_comparison_1",
                "uVar12": "byte_comparison_2",
                "bVar13": "is_matched_byte_1",
                "bVar14": "is_matched_byte_2",
                "bVar15": "is_matched_byte_3",
                "bVar16": "is_matched_byte_4"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int destinationIndex,undefined *sourceArray,int arrayLength)\n\n{\n  undefined *currentSource;\n  undefined *endSource;\n  undefined *currentDest;\n  \n  endSource = sourceArray + arrayLength;\n  currentDest = (undefined *)(destinationIndex + -1);\n  if (sourceArray != endSource) {\n    do {\n      currentSource = sourceArray + 1;\n      currentDest = currentDest + 1;\n      *currentDest = *sourceArray;\n      sourceArray = currentSource;\n    } while (currentSource != endSource);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destinationIndex",
                "param_2": "sourceArray",
                "param_3": "arrayLength",
                "puVar1": "currentSource",
                "puVar2": "endSource",
                "puVar3": "currentDest"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_and_copy_memory_000060cc",
            "code": "\nint allocateAndCopyMemory_000060cc(undefined4 ptr,int size,uint requiredSize,undefined4 param)\n\n{\n  int result;\n  uint sum;\n  \n  if (size != 0) {\n    if (requiredSize == 0) {\n      initialize_data_00004b34();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum_00006964();\n      result = size;\n      if ((sum < requiredSize) && (result = allocate_memory_00004bd0(ptr,requiredSize), result != 0)) {\n        copy_array_000060b0(result,size,requiredSize);\n        initialize_data_00004b34(ptr,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory_00004bd0(ptr,requiredSize,requiredSize,param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_and_copy_memory_000060cc",
                "param_1": "ptr",
                "param_2": "size",
                "param_3": "requiredSize",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "sum"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "initialize_data_00006192",
            "code": "\nundefined4 initialize_data_00006192(undefined4 value,undefined4 *ptr_array)\n\n{\n  if ((undefined4 *)ptr_array[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)ptr_array[13] != ptr_array + 0x11) {\n      initialize_data_00006192_00004b34();\n    }\n    ptr_array[1] = ptr_array[16];\n    ptr_array[13] = 0;\n    if (ptr_array[16] != 0) {\n      *ptr_array = ptr_array[0xf];\n      return 0;\n    }\n  }\n  *ptr_array = ptr_array[4];\n  ptr_array[1] = 0;\n  *(ushort *)(ptr_array + 3) = *(ushort *)(ptr_array + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "initialize_data_00006192",
                "param_1": "value",
                "param_2": "ptr_array",
                "param_2[0xd]": "ptr_array[13]",
                "param_2[1]": "ptr_array[1]",
                "param_2[0x10]": "ptr_array[16]",
                "param_2[4]": "ptr_array[4]"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_binary_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint processBinaryData_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int index;\n  uint value;\n  byte *currentByte;\n  uint tempValue;\n  int **resultArray;\n  undefined stackArray [256];\n  uint flag1;\n  undefined4 flag2;\n  uint flag3;\n  int returnValue;\n  int counter;\n  undefined *localArray;\n  int flag4;\n  undefined *functionPointer;\n  code *dataPointer;\n  \n  returnValue = 0;\n  counter = 0;\n  functionPointer = &LAB_00006118_1;\n  dataPointer = initialize_data_00006192 + 1;\n  resultArray = param4;\n  localArray = stackArray;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      tempValue = (uint)*param3;\n      if (tempValue == 0) {\n        return returnValue;\n      }\n      value = (byte)(&DAT_00007a99)[tempValue] & 8;\n      currentByte = param3 + 1;\n      if (((&DAT_00007a99)[tempValue] & 8) == 0) break;\n      while (((param3 = currentByte, 0 < (int)param2[1] ||\n              (index = (*dataPointer)(param1,param2), index == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (tempValue == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (index = (*dataPointer)(param1,param2), index != 0))\n    goto LAB_00006380;\n    if (**param2 != tempValue) {\n      return returnValue;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = currentByte;\n  }\n  flag3 = value;\n  flag1 = value;\n  if (param3[1] == 0x2a) {\n    currentByte = param3 + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    value = (uint)*currentByte;\n    if (9 < value - 0x30) break;\n    currentByte = currentByte + 1;\n    flag3 = (flag3 * 10 + value) - 0x30;\n  }\n  index = find_byte_sequence_00006010(&DAT_00007c02,value,3);\n  if (index != 0) {\n    flag1 = 1 << (index - 0x7c02U & 0xff) | flag1;\n    currentByte = currentByte + 1;\n  }\n  param3 = currentByte + 1;\n  value = (uint)*currentByte;\n  if (value < 0x79) {\n    if (0x57 < value) {\n      switch(value) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)extract_bytes_0000687c(stackArray,param3);\n        flag1 = flag1 | 0x40;\n        flag4 = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        flag4 = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (value < 0x6f) {\n          flag4 = 3;\n        }\n        else {\n          flag4 = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        flag4 = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        flag4 = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*resultArray = (short)counter;\n            resultArray = resultArray + 1;\n          }\n          else {\n            **resultArray = counter;\n            resultArray = resultArray + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        flag4 = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        flag4 = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (index = (*dataPointer)(param1,param2), index != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          currentByte = param2[1];\n          param2[1] = currentByte + -1;\n          if ((int)(currentByte + -1) < 1) {\n            index = (*dataPointer)(param1,param2);\n            if (index != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (flag4 < 3) {\n        index = process_data_000064bc(param1,&flag1,param2,&resultArray);\n      }\n      else {\n        if (4 < flag4) goto LAB_000061f6;\n        index = process_binary_data_0000656c(param1,&flag1,param2,&resultArray);\n      }\n      if (index == 1) {\n        return returnValue;\n      }\n      if (index == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    currentByte = param3;\n    if (value == 0x25) goto LAB_00006352;\n    if (value < 0x26) {\n      if (value != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (value - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  flag4 = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_binary_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "uVar2": "value",
                "pbVar3": "currentByte",
                "uVar4": "tempValue",
                "local_2b0": "resultArray",
                "auStack_2ac": "stackArray",
                "local_1ac": "flag1",
                "local_1a8": "flag2",
                "local_1a4": "flag3",
                "local_1a0": "returnValue",
                "local_19c": "counter",
                "local_198": "localArray",
                "local_194": "flag4",
                "local_30": "functionPointer",
                "local_2c": "dataPointer"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_value,uint *params_array,byte **byte_array_ptr,undefined4 *output_value_ptr)\n\n{\n  int return_value;\n  uint temp_value;\n  byte **byte_array_ptr_ptr;\n  byte *byte_array_ptr2;\n  byte *current_byte_ptr;\n  byte *current_byte;\n  int counter;\n  \n  if (params_array[2] == 0) {\n    if (params_array[6] == 0) {\n      temp_value = 1;\n    }\n    else {\n      temp_value = 0xffffffff;\n    }\n    params_array[2] = temp_value;\n  }\n  if (-1 < (int)(*params_array << 0x1b)) {\n    byte_array_ptr_ptr = (byte **)*output_value_ptr;\n    *output_value_ptr = byte_array_ptr_ptr + 1;\n    current_byte_ptr = *byte_array_ptr_ptr;\n  }\n  counter = 0;\n  do {\n    temp_value = params_array[6];\n    if (temp_value != 0) {\n      if (temp_value == 1) {\n        if (*(char *)(params_array[5] + (uint)**byte_array_ptr) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*params_array & 0x10) == 0) && (params_array[3] = params_array[3] + 1, params_array[6] != 0)) {\n            *current_byte_ptr = 0;\n          }\n          params_array[4] = counter + params_array[4];\n          return 0;\n        }\n      }\n      else if ((temp_value != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**byte_array_ptr] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    current_byte = current_byte_ptr;\n    if (-1 < (int)(*params_array << 0x1b)) {\n      current_byte = current_byte_ptr + 1;\n      *current_byte_ptr = **byte_array_ptr;\n    }\n    byte_array_ptr2 = byte_array_ptr[1];\n    *byte_array_ptr = *byte_array_ptr + 1;\n    temp_value = params_array[2] - 1;\n    byte_array_ptr[1] = byte_array_ptr2 + -1;\n    counter = counter + 1;\n    params_array[2] = temp_value;\n    current_byte_ptr = current_byte;\n    if ((temp_value == 0) ||\n       (((int)(byte_array_ptr2 + -1) < 1 &&\n        (return_value = (*(code *)params_array[0x60])(input_value,byte_array_ptr,temp_value,(code *)params_array[0x60],output_value_ptr),\n        return_value != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_value",
                "param_2": "params_array",
                "param_3": "byte_array_ptr",
                "param_4": "output_value_ptr",
                "iVar1": "return_value",
                "uVar2": "temp_value",
                "ppbVar3": "byte_array_ptr_ptr",
                "pbVar4": "byte_array_ptr2",
                "unaff_r6": "current_byte_ptr",
                "pbVar5": "current_byte",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_binary_data_0000656c",
            "code": "\nundefined4 process_binary_data_0000656c(undefined4 input_value,uint *param_array,byte **param_buffer,undefined4 *result_array)\n\n{\n  int sequence_index;\n  undefined4 modified_value;\n  code *function_pointer;\n  uint temp;\n  byte *temp_buffer;\n  uint sequence_length;\n  undefined4 *result_pointer;\n  uint *temp_pointer;\n  uint *pointer;\n  uint *temp_array_pointer;\n  int temp_value;\n  int iteration_counter;\n  undefined *sequence_buffer [4];\n  \n  sequence_buffer[0] = &DAT_00007c2f;\n  sequence_buffer[1] = &DAT_00007c32;\n  sequence_buffer[2] = &DAT_00007c35;\n  function_pointer = (code *)&UNK_00004f81;\n  if (param_array[6] != 3) {\n    function_pointer = (code *)&UNK_00005fd5;\n  }\n  sequence_length = param_array[2];\n  temp = sequence_length - 1;\n  if (0x15c < temp) {\n    temp_value = sequence_length - 0x15d;\n    sequence_length = 0x15d;\n  }\n  if (0x15c < temp) {\n    param_array[2] = sequence_length;\n  }\n  temp_array_pointer = param_array + 7;\n  if (temp < 0x15d) {\n    temp_value = 0;\n  }\n  *param_array = *param_array | 0xd00;\n  iteration_counter = 0;\n  pointer = temp_array_pointer;\n  do {\n    sequence_index = find_byte_sequence_00006010(sequence_buffer[iteration_counter],**param_buffer,2);\n    if (sequence_index != 0) {\n      if (iteration_counter == 1) {\n        if (param_array[1] == 0) {\n          param_array[1] = 8;\n          *param_array = *param_array | 0x200;\n        }\n        temp = *param_array & 0xfffffaff;\nLAB_000065f4:\n        *param_array = temp;\n      }\n      else if (iteration_counter == 2) {\n        if ((*param_array & 0x600) != 0x200) goto LAB_00006624;\n        param_array[1] = 0x10;\n        temp = *param_array | 0x100;\n        goto LAB_000065f4;\n      }\n      temp = param_array[2];\n      param_array[2] = temp - 1;\n      if (temp != 0) {\n        temp_buffer = *param_buffer;\n        *param_buffer = temp_buffer + 1;\n        temp_pointer = (uint *)((int)pointer + 1);\n        *(byte *)pointer = *temp_buffer;\n        temp_buffer = param_buffer[1];\n        param_buffer[1] = temp_buffer + -1;\n        pointer = temp_pointer;\n        if (((int)(temp_buffer + -1) < 1) &&\n           (sequence_index = (*(code *)param_array[0x60])(input_value,param_buffer), sequence_index != 0)) {\n          iteration_counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    iteration_counter = iteration_counter + 1;\n  } while (iteration_counter != 3);\n  if (param_array[1] == 0) {\n    param_array[1] = 10;\n  }\n  extract_bytes_0000687c(param_array[5],\"01234567]\" + (8 - param_array[1]));\n  iteration_counter = 0;\n  while( true ) {\n    temp_pointer = pointer;\n    if (param_array[2] == 0) break;\n    temp_buffer = *param_buffer;\n    temp = (uint)*temp_buffer;\n    if (*(char *)(param_array[5] + temp) == '\\0') break;\n    if ((temp == 0x30) && ((int)(*param_array << 0x14) < 0)) {\n      iteration_counter = iteration_counter + 1;\n      if (temp_value != 0) {\n        temp_value = temp_value + -1;\n        param_array[2] = param_array[2] + 1;\n      }\n    }\n    else {\n      *param_array = *param_array & 0xfffff6ff;\n      temp_pointer = (uint *)((int)pointer + 1);\n      *(byte *)pointer = *temp_buffer;\n    }\n    temp_buffer = param_buffer[1];\n    param_buffer[1] = temp_buffer + -1;\n    if ((int)(temp_buffer + -1) < 1) {\n      sequence_index = (*(code *)param_array[0x60])(input_value,param_buffer);\n      if (sequence_index != 0) break;\n    }\n    else {\n      *param_buffer = *param_buffer + 1;\n    }\n    param_array[2] = param_array[2] - 1;\n    pointer = temp_pointer;\n  }\nLAB_000066ca:\n  if ((int)(*param_array << 0x17) < 0) {\n    if (temp_array_pointer < temp_pointer) {\n      (*(code *)param_array[0x5f])(input_value,*(byte *)((int)temp_pointer + -1),param_buffer);\n      temp_pointer = (uint *)((int)temp_pointer + -1);\n    }\n    if (temp_pointer == temp_array_pointer) {\n      return 1;\n    }\n  }\n  if ((*param_array & 0x10) == 0) {\n    *(byte *)temp_pointer = 0;\n    modified_value = (*function_pointer)(input_value,temp_array_pointer,0,param_array[1]);\n    result_pointer = (undefined4 *)*result_array;\n    temp = *param_array;\n    *result_array = result_pointer + 1;\n    result_pointer = (undefined4 *)*result_pointer;\n    if ((temp & 0x20) == 0) {\n      if ((int)(temp << 0x1f) < 0) {\n        *(short *)result_pointer = (short)modified_value;\n      }\n      else {\n        *result_pointer = modified_value;\n      }\n    }\n    else {\n      *result_pointer = modified_value;\n    }\n    param_array[3] = param_array[3] + 1;\n  }\n  param_array[4] = (uint)((int)temp_pointer + param_array[4] + (iteration_counter - (int)temp_array_pointer));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_binary_data_0000656c",
                "param_1": "input_value",
                "param_2": "param_array",
                "param_3": "param_buffer",
                "param_4": "result_array",
                "iVar1": "sequence_index",
                "uVar2": "modified_value",
                "pcVar3": "function_pointer",
                "uVar4": "temp",
                "pbVar5": "temp_buffer",
                "uVar6": "sequence_length",
                "puVar7": "result_pointer",
                "puVar8": "temp_pointer",
                "puVar9": "pointer",
                "puVar10": "temp_array_pointer",
                "unaff_r9": "temp_value",
                "iVar11": "iteration_counter",
                "local_34": "sequence_buffer"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_and_update_data_00006768",
            "code": "\nundefined4\nprocess_and_update_data_00006768(undefined4 *buffer,undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  ushort tempVar4;\n  uint tempVar5;\n  \n  if ((buffer != (undefined4 *)0x0) && (buffer[6] == 0)) {\n    initialize_memory_and_data_000042a4();\n  }\n  if (data == &DAT_000079b8) {\n    data = (undefined4 *)buffer[1];\n  }\n  else if (data == (undefined4 *)&DAT_000079d8) {\n    data = (undefined4 *)buffer[2];\n  }\n  else if (data == (undefined4 *)&DAT_00007998) {\n    data = (undefined4 *)buffer[3];\n  }\n  tempVar4 = *(ushort *)(data + 3);\n  data[1] = 0;\n  tempVar5 = (uint)*(ushort *)(data + 3);\n  if ((int)(tempVar5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(tempVar5 << 0x1d) < 0) {\n    if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data[0xd] != data + 0x11) {\n        initialize_data_00004b34(buffer);\n      }\n      data[1] = data[0x10];\n      data[0xd] = 0;\n      if (data[0x10] != 0) {\n        *data = data[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(tempVar5 << 0x1b)) {\n      *buffer = 9;\n      tempVar4 = tempVar4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(tempVar5 << 0x1c) < 0) {\n      tempVar2 = process_data_00004158(buffer,data,tempVar5 << 0x1c,tempVar5,value2);\n      if (tempVar2 != 0) {\n        return 0xffffffff;\n      }\n      data[2] = 0;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfff7;\n      data[6] = 0;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 4;\n  }\n  if (data[4] == 0) {\n    initialize_memory_00005700(buffer,data);\n  }\n  tempVar4 = *(ushort *)(data + 3);\n  tempVar1 = *(undefined2 *)(data + 3);\n  if ((tempVar4 & 3) != 0) {\n    *(undefined2 *)(data + 3) = 1;\n    process_data_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(data + 3) = tempVar1;\n    if ((tempVar4 & 9) == 9) {\n      process_data_0000404c(buffer,data);\n    }\n  }\n  tempVar3 = data[4];\n  *data = tempVar3;\n  tempVar2 = (*(code *)data[9])(buffer,data[8],tempVar3,data[5]);\n  data[1] = tempVar2;\n  if (0 < tempVar2) {\n    return 0;\n  }\n  tempVar4 = *(ushort *)(data + 3);\n  if (tempVar2 != 0) {\n    tempVar3 = 0;\n  }\n  else {\n    tempVar4 = tempVar4 | 0x20;\n  }\n  if (tempVar2 != 0) {\n    data[1] = tempVar3;\n    tempVar4 = tempVar4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data + 3) = tempVar4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_and_update_data_00006768",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_bytes_0000687c",
            "code": "\nbyte * extractBytes_0000687c(int size,byte *data)\n\n{\n  byte *result;\n  uint nextByte;\n  int index;\n  uint firstByte;\n  uint currentByte;\n  uint endByte;\n  bool isInverted;\n  \n  firstByte = (uint)*data;\n  isInverted = firstByte == 0x5e;\n  if (isInverted) {\n    firstByte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  index = size + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = isInverted;\n  } while (index != size + 0xff);\n  if (firstByte == 0) {\n    result = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      currentByte = firstByte;\n      *(bool *)(size + currentByte) = !isInverted;\n      data = data + 1;\n      while( true ) {\n        firstByte = (uint)data[-1];\n        if (firstByte != 0x2d) break;\n        endByte = (uint)*data;\n        if ((endByte == 0x5d) || (nextByte = currentByte, (int)endByte < (int)currentByte)) goto LAB_000068aa;\n        do {\n          nextByte = nextByte + 1;\n          *(bool *)(size + nextByte) = !isInverted;\n        } while ((int)nextByte < (int)endByte);\n        index = ~currentByte + endByte;\n        if ((int)endByte <= (int)currentByte) {\n          index = 0;\n        }\n        currentByte = currentByte + 1 + index;\n        data = data + 2;\n      }\n      result = data;\n    } while ((firstByte != 0x5d) && (result = data + -1, firstByte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_bytes_0000687c",
                "param_1": "size",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "nextByte",
                "iVar3": "index",
                "uVar4": "firstByte",
                "uVar5": "currentByte",
                "uVar6": "endByte",
                "bVar7": "isInverted"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_or_expand_memory_000068f0",
            "code": "\nundefined4 allocate_or_expand_memory_000068f0(undefined4 param,int *memory_block)\n\n{\n  int new_memory_block;\n  int old_memory_size;\n  \n  if ((int *)memory_block[0xd] == memory_block + 0x11) {\n    new_memory_block = allocate_memory_00004bd0(param,0x400);\n    if (new_memory_block != 0) {\n      memory_block[0xe] = 0x400;\n      memory_block[0xd] = new_memory_block;\n      *(undefined *)(new_memory_block + 0x3ff) = *(undefined *)((int)memory_block + 0x46);\n      *(undefined *)(new_memory_block + 0x3fe) = *(undefined *)((int)memory_block + 0x45);\n      *(undefined *)(new_memory_block + 0x3fd) = *(undefined *)(memory_block + 0x11);\n      *memory_block = new_memory_block + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    old_memory_size = memory_block[0xe];\n    new_memory_block = allocate_and_copy_memory_000060cc(param,(int *)memory_block[0xd],old_memory_size << 1);\n    if (new_memory_block != 0) {\n      copy_array_000060b0(new_memory_block + old_memory_size,new_memory_block,old_memory_size);\n      memory_block[0xd] = new_memory_block;\n      memory_block[0xe] = old_memory_size << 1;\n      *memory_block = new_memory_block + old_memory_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_or_expand_memory_000068f0",
                "param_1": "param",
                "param_2": "memory_block",
                "iVar1": "new_memory_block",
                "iVar2": "old_memory_size"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 value,int array)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(array + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "value",
                "param_2": "array",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "divide_and_modulo_00006974",
            "code": "\nundefined8 divide_and_modulo_00006974(int dividend,int divisor,int dividend_sign,int divisor_sign)\n\n{\n  int adjusted_divisor;\n  undefined8 result;\n  undefined remainder [8];\n  \n  if ((divisor_sign == 0) && (dividend_sign == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    adjusted_divisor = -divisor - (uint)(dividend != 0);\n    if (divisor_sign < 0) {\n      result = divide_modulo_00006a14(-dividend,adjusted_divisor,-dividend_sign,-divisor_sign - (uint)(dividend_sign != 0),remainder);\n      return result;\n    }\n    result = divide_modulo_00006a14(-dividend,adjusted_divisor,dividend_sign,divisor_sign,remainder);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (divisor_sign < 0) {\n    result = divide_modulo_00006a14(dividend,divisor,-dividend_sign,-divisor_sign - (uint)(dividend_sign != 0),remainder);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = divide_modulo_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "divide_and_modulo_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "dividend_sign",
                "param_4": "divisor_sign",
                "iVar1": "adjusted_divisor",
                "uVar2": "result",
                "local_8": "remainder"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_modulo_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divide_Modulo_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint quotient;\n  int shift;\n  uint combined_divisor;\n  uint partial_quotient;\n  uint out_quotient_low;\n  uint out_quotient_high;\n  uint temp_dividend_low;\n  uint temp_dividend_high;\n  uint divisor_low;\n  bool bVar10;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift = LZCOUNT(divisor);\n      out_quotient_low = divisor;\n      if (shift != 0) {\n        out_quotient_low = divisor << shift;\n        dividend_high = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        dividend = dividend << shift;\n      }\n      out_quotient_high = out_quotient_low >> 0x10;\n      temp_dividend_high = dividend_high / out_quotient_high;\n      combined_divisor = dividend >> 0x10 | (dividend_high - out_quotient_high * temp_dividend_high) * 0x10000;\n      quotient = temp_dividend_high * (out_quotient_low & 0xffff);\n      partial_quotient = temp_dividend_high;\n      if (combined_divisor <= quotient && quotient - combined_divisor != 0) {\n        bVar10 = CARRY4(out_quotient_low,combined_divisor);\n        combined_divisor = out_quotient_low + combined_divisor;\n        partial_quotient = temp_dividend_high - 1;\n        if ((bVar10 == false) && (combined_divisor <= quotient && quotient - combined_divisor != 0)) {\n          partial_quotient = temp_dividend_high - 2;\n          combined_divisor = combined_divisor + out_quotient_low;\n        }\n      }\n      temp_dividend_high = (combined_divisor - quotient) / out_quotient_high;\n      out_quotient_high = dividend & 0xffff | ((combined_divisor - quotient) - out_quotient_high * temp_dividend_high) * 0x10000;\n      combined_divisor = temp_dividend_high * (out_quotient_low & 0xffff);\n      quotient = temp_dividend_high;\n      if (out_quotient_high <= combined_divisor && combined_divisor - out_quotient_high != 0) {\n        bVar10 = CARRY4(out_quotient_low,out_quotient_high);\n        out_quotient_high = out_quotient_low + out_quotient_high;\n        quotient = temp_dividend_high - 1;\n        if ((bVar10 == false) && (out_quotient_high <= combined_divisor && combined_divisor - out_quotient_high != 0)) {\n          quotient = temp_dividend_high - 2;\n          out_quotient_high = out_quotient_high + out_quotient_low;\n        }\n      }\n      out_quotient_high = out_quotient_high - combined_divisor;\n      quotient = quotient | partial_quotient << 0x10;\n      out_quotient_low = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        result = (*UNRECOVERED_JUMPTABLE)();\n        return result;\n      }\n      shift = LZCOUNT(divisor);\n      if (shift == 0) {\n        dividend_high = dividend_high - divisor;\n        divisor_low = divisor >> 0x10;\n        temp_dividend_low = divisor & 0xffff;\n        out_quotient_low = 1;\n        partial_quotient = divisor;\n      }\n      else {\n        partial_quotient = divisor << shift;\n        divisor_low = partial_quotient >> 0x10;\n        quotient = dividend_high >> (0x20U - shift & 0xff);\n        out_quotient_low = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        combined_divisor = quotient / divisor_low;\n        temp_dividend_low = partial_quotient & 0xffff;\n        temp_dividend_high = out_quotient_low >> 0x10 | (quotient - divisor_low * combined_divisor) * 0x10000;\n        out_quotient_high = combined_divisor * temp_dividend_low;\n        dividend = dividend << shift;\n        quotient = combined_divisor;\n        if (temp_dividend_high <= out_quotient_high && out_quotient_high - temp_dividend_high != 0) {\n          bVar10 = CARRY4(partial_quotient,temp_dividend_high);\n          temp_dividend_high = partial_quotient + temp_dividend_high;\n          quotient = combined_divisor - 1;\n          if ((bVar10 == false) && (temp_dividend_high <= out_quotient_high && out_quotient_high - temp_dividend_high != 0)) {\n            quotient = combined_divisor - 2;\n            temp_dividend_high = temp_dividend_high + partial_quotient;\n          }\n        }\n        combined_divisor = (temp_dividend_high - out_quotient_high) / divisor_low;\n        dividend_high = out_quotient_low & 0xffff | ((temp_dividend_high - out_quotient_high) - divisor_low * combined_divisor) * 0x10000;\n        out_quotient_high = combined_divisor * temp_dividend_low;\n        out_quotient_low = combined_divisor;\n        if (dividend_high <= out_quotient_high && out_quotient_high - dividend_high != 0) {\n          bVar10 = CARRY4(partial_quotient,dividend_high);\n          dividend_high = partial_quotient + dividend_high;\n          out_quotient_low = combined_divisor - 1;\n          if ((bVar10 == false) && (dividend_high <= out_quotient_high && out_quotient_high - dividend_high != 0)) {\n            out_quotient_low = combined_divisor - 2;\n            dividend_high = dividend_high + partial_quotient;\n          }\n        }\n        dividend_high = dividend_high - out_quotient_high;\n        out_quotient_low = out_quotient_low | quotient << 0x10;\n      }\n      temp_dividend_high = dividend_high / divisor_low;\n      out_quotient_high = dividend >> 0x10 | (dividend_high - divisor_low * temp_dividend_high) * 0x10000;\n      quotient = temp_dividend_low * temp_dividend_high;\n      combined_divisor = temp_dividend_high;\n      if (out_quotient_high <= quotient && quotient - out_quotient_high != 0) {\n        bVar10 = CARRY4(partial_quotient,out_quotient_high);\n        out_quotient_high = partial_quotient + out_quotient_high;\n        combined_divisor = temp_dividend_high - 1;\n        if ((bVar10 == false) && (out_quotient_high <= quotient && quotient - out_quotient_high != 0)) {\n          combined_divisor = temp_dividend_high - 2;\n          out_quotient_high = out_quotient_high + partial_quotient;\n        }\n      }\n      temp_dividend_high = (out_quotient_high - quotient) / divisor_low;\n      out_quotient_high = dividend & 0xffff | ((out_quotient_high - quotient) - divisor_low * temp_dividend_high) * 0x10000;\n      temp_dividend_low = temp_dividend_low * temp_dividend_high;\n      quotient = temp_dividend_high;\n      if (out_quotient_high <= temp_dividend_low && temp_dividend_low - out_quotient_high != 0) {\n        bVar10 = CARRY4(partial_quotient,out_quotient_high);\n        out_quotient_high = partial_quotient + out_quotient_high;\n        quotient = temp_dividend_high - 1;\n        if ((bVar10 == false) && (out_quotient_high <= temp_dividend_low && temp_dividend_low - out_quotient_high != 0)) {\n          quotient = temp_dividend_high - 2;\n          out_quotient_high = out_quotient_high + partial_quotient;\n        }\n      }\n      out_quotient_high = out_quotient_high - temp_dividend_low;\n      quotient = quotient | combined_divisor << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = out_quotient_high >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    out_quotient_low = 0;\n  }\n  else {\n    shift = LZCOUNT(divisor_high);\n    if (shift != 0) {\n      temp_dividend_low = 0x20 - shift;\n      combined_divisor = divisor >> (temp_dividend_low & 0xff) | divisor_high << shift;\n      divisor_low = combined_divisor >> 0x10;\n      quotient = dividend_high >> (temp_dividend_low & 0xff);\n      out_quotient_low = dividend >> (temp_dividend_low & 0xff) | dividend_high << shift;\n      out_quotient_high = quotient / divisor_low;\n      partial_quotient = out_quotient_low >> 0x10 | (quotient - divisor_low * out_quotient_high) * 0x10000;\n      temp_dividend_high = out_quotient_high * (combined_divisor & 0xffff);\n      dividend = dividend << shift;\n      quotient = out_quotient_high;\n      if (partial_quotient <= temp_dividend_high && temp_dividend_high - partial_quotient != 0) {\n        bVar10 = CARRY4(combined_divisor,partial_quotient);\n        partial_quotient = combined_divisor + partial_quotient;\n        quotient = out_quotient_high - 1;\n        if ((bVar10 == false) && (partial_quotient <= temp_dividend_high && temp_dividend_high - partial_quotient != 0)) {\n          quotient = out_quotient_high - 2;\n          partial_quotient = partial_quotient + combined_divisor;\n        }\n      }\n      out_quotient_high = (partial_quotient - temp_dividend_high) / divisor_low;\n      partial_quotient = out_quotient_low & 0xffff | ((partial_quotient - temp_dividend_high) - divisor_low * out_quotient_high) * 0x10000;\n      temp_dividend_high = out_quotient_high * (combined_divisor & 0xffff);\n      out_quotient_low = out_quotient_high;\n      if (partial_quotient <= temp_dividend_high && temp_dividend_high - partial_quotient != 0) {\n        bVar10 = CARRY4(combined_divisor,partial_quotient);\n        partial_quotient = combined_divisor + partial_quotient;\n        out_quotient_low = out_quotient_high - 1;\n        if ((bVar10 == false) && (partial_quotient <= temp_dividend_high && temp_dividend_high - partial_quotient != 0)) {\n          out_quotient_low = out_quotient_high - 2;\n          partial_quotient = partial_quotient + combined_divisor;\n        }\n      }\n      out_quotient_low = out_quotient_low | quotient << 0x10;\n      result = (ulonglong)out_quotient_low * (ulonglong)(divisor << shift);\n      if (CONCAT44(partial_quotient - temp_dividend_high,dividend) < result) {\n        result = result - CONCAT44(combined_divisor,divisor << shift);\n        out_quotient_low = out_quotient_low - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((partial_quotient - temp_dividend_high) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (temp_dividend_low & 0xff) | dividend - (uint)result >> shift;\n        remainder[1] = quotient >> shift;\n      }\n      return (ulonglong)out_quotient_low;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      bVar10 = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)bVar10;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    out_quotient_low = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(out_quotient_low,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_modulo_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "uVar1": "quotient",
                "iVar2": "shift",
                "uVar3": "combined_divisor",
                "uVar4": "partial_quotient",
                "uVar5": "out_quotient_low",
                "uVar6": "out_quotient_high",
                "uVar7": "temp_dividend_low",
                "uVar8": "temp_dividend_high",
                "uVar9": "divisor_low",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 138179,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}