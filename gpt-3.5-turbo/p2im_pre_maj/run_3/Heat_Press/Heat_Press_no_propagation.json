{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **data)\n\n{\n  int result;\n  \n  *data = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081210(*(byte *)((int)data + 6),1);\n    FUN_00081318(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    result = (**(code **)(**data + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **dataPointer)\n\n{\n  bool isOverLimit;\n  undefined undefinedVar;\n  char charVar;\n  int result;\n  byte byteVar;\n  \n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_00081318(*(byte *)((int)dataPointer + 6),0);\n  }\n  isOverLimit = false;\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  if (*(byte *)((int)dataPointer + 5) < 4) {\n    while (result = (**(code **)(**dataPointer + 8))(), result != 0) {\n      byteVar = *(byte *)((int)dataPointer + 0x49);\n      undefinedVar = (**(code **)(**dataPointer + 0xc))();\n      charVar = *(char *)((int)dataPointer + 0x49);\n      *(undefined *)((int)dataPointer + byteVar + 9) = undefinedVar;\n      byteVar = charVar + 1;\n      *(byte *)((int)dataPointer + 0x49) = byteVar;\n      if (0x3f < byteVar) {\n        isOverLimit = true;\n      }\n    }\n  }\n  *(short *)(dataPointer + 0x14) = *(short *)(dataPointer + 0x14) + 1;\n  if (isOverLimit) {\n    charVar = -3;\n    *(short *)(dataPointer + 0x15) = *(short *)(dataPointer + 0x15) + 1;\n  }\n  else {\n    charVar = *(char *)((int)dataPointer + 0x49);\n  }\n  return (int)charVar;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "dataPointer",
                "bVar1": "isOverLimit",
                "uVar2": "undefinedVar",
                "cVar3": "charVar",
                "iVar4": "result",
                "bVar5": "byteVar"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int input_address,uint length)\n\n{\n  int current_address;\n  uint checksum;\n  char bit_count;\n  uint bit;\n  \n  checksum = 0xffff;\n  for (current_address = input_address; (current_address - input_address & 0xffU) < length; current_address = current_address + 1) {\n    checksum = checksum ^ *(byte *)(current_address + 9);\n    bit_count = '\\b';\n    do {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_count = bit_count + -1;\n    } while (bit_count != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "input_address",
                "param_2": "length",
                "iVar1": "current_address",
                "uVar2": "checksum",
                "cVar3": "bit_count",
                "uVar4": "bit"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_param_and_call_functions_00080258",
            "code": "\nvoid updateParamAndCallFunctions_00080258(int **paramArray,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte byteValue;\n  undefined2 resultValue;\n  int loopIndex;\n  uint convertedByteValue;\n  \n  byteValue = *(byte *)((int)paramArray + 0x49);\n  convertedByteValue = (uint)byteValue;\n  resultValue = FUN_0008021c(paramArray,convertedByteValue,value2,value3,value3);\n  *(char *)((int)paramArray + convertedByteValue + 9) = (char)((ushort)resultValue >> 8);\n  *(char *)((int)paramArray + (convertedByteValue + 1 & 0xff) + 9) = (char)resultValue;\n  *(byte *)((int)paramArray + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_00081318(*(byte *)((int)paramArray + 6),1);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    (**(code **)(**paramArray + 4))(*paramArray,(int)paramArray + 9,*(undefined *)((int)paramArray + 0x49));\n  }\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_00081318(*(byte *)((int)paramArray + 6),0);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    do {\n      loopIndex = (**(code **)(**paramArray + 0xc))();\n    } while (-1 < loopIndex);\n  }\n  *(undefined *)((int)paramArray + 0x49) = 0;\n  loopIndex = thunk_FUN_00081714();\n  paramArray[0x17] = (int *)(loopIndex + (uint)*(ushort *)((int)paramArray + 0x56));\n  *(short *)((int)paramArray + 0x52) = *(short *)((int)paramArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_param_and_call_functions_00080258",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "byteValue",
                "uVar2": "resultValue",
                "iVar3": "loopIndex",
                "uVar4": "convertedByteValue"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_params_000802da",
            "code": "\nint validateParams_000802da(int inputBuffer,uint param1,uint param2,ushort *param3)\n\n{\n  char result;\n  byte byteVar;\n  undefined undefinedVar;\n  ushort ushortVar;\n  uint uintVar;\n  ushort *ushortPtr;\n  undefined param2_1;\n  undefined param2_2;\n  ushort param3_1;\n  \n  param2_1 = (undefined)param1;\n  param2_2 = (undefined)(param1 >> 8);\n  param3_1 = (ushort)param2;\n  uintVar = param2 & 0xffff;\n  if (*(char *)(inputBuffer + 4) != '\\0') {\n    result = -2;\n    goto end;\n  }\n  if (*(char *)(inputBuffer + 7) != '\\0') {\n    result = -1;\n    goto end;\n  }\n  if (0xf6 < ((param1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto end;\n  }\n  *(undefined *)(inputBuffer + 9) = param2_1;\n  *(undefined *)(inputBuffer + 10) = param2_2;\n  *(ushort **)(inputBuffer + 0x4c) = param3;\n  *(char *)(inputBuffer + 0xb) = (char)(param1 >> 0x18);\n  *(char *)(inputBuffer + 0xc) = (char)(param1 >> 0x10);\n  undefinedVar = (undefined)(param2 >> 8);\n  switch(param2_2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(inputBuffer + 0xd) = undefinedVar;\n    break;\n  case 5:\n    ushortVar = *param3;\n    if (ushortVar != 0) {\n      ushortVar = 1;\n    }\n    *(char *)(inputBuffer + 0xd) = -(char)ushortVar;\n    uintVar = 0;\n    break;\n  case 6:\n    *(char *)(inputBuffer + 0xd) = (char)(*param3 >> 8);\n    uintVar = (uint)*param3;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(param3_1 >> 3) & 0xfe;\n    if ((param2 & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(inputBuffer + 0xe) = (char)param2;\n    *(undefined *)(inputBuffer + 0xd) = undefinedVar;\n    *(byte *)(inputBuffer + 0xf) = byteVar;\n    undefinedVar = 7;\n    goto label1;\n  case 0x10:\n    *(undefined *)(inputBuffer + 0xd) = undefinedVar;\n    *(char *)(inputBuffer + 0xe) = (char)param2;\n    param3 = param3 + -1;\n    *(char *)(inputBuffer + 0xf) = (char)uintVar * '\\x02';\n    *(undefined *)(inputBuffer + 0x49) = 7;\n    ushortPtr = param3 + uintVar;\n    while (param3 != ushortPtr) {\n      byteVar = *(byte *)(inputBuffer + 0x49);\n      *(char *)(inputBuffer + (uint)byteVar + 9) = (char)(param3[1] >> 8);\n      uintVar = byteVar + 1 & 0xff;\n      *(char *)(inputBuffer + 0x49) = (char)uintVar;\n      param3 = param3 + 1;\n      *(char *)(uintVar + inputBuffer + 9) = (char)*param3;\n      *(byte *)(inputBuffer + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(inputBuffer + 0xe) = (char)uintVar;\n  undefinedVar = 6;\nlabel1:\n  *(undefined *)(inputBuffer + 0x49) = undefinedVar;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(inputBuffer);\n  *(undefined *)(inputBuffer + 7) = 1;\n  result = '\\0';\nend:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_params_000802da",
                "param_1": "inputBuffer",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "cVar1": "result",
                "bVar2": "byteVar",
                "uVar3": "undefinedVar",
                "uVar4": "ushortVar",
                "uVar5": "uintVar",
                "puVar6": "ushortPtr",
                "local_1c": "param2_1",
                "local_1b": "param2_2",
                "local_18": "param3_1",
                "LAB_000803cc": "end",
                "LAB_0008034a": "label1"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_increment_000803d4",
            "code": "\nundefined4 checkAndIncrement_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_increment_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int data,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined2 result;\n  int index;\n  byte counter;\n  uint convertedCounter;\n  int offset;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data + 0xb) >> 1 <= convertedCounter) break;\n    index = (convertedCounter * 2 + 3 & 0xff) + data;\n    offset = *(int *)(data + 0x4c);\n    result = FUN_000815f8(*(undefined *)(index + 9),*(undefined *)(index + 10),index,\n                         *(byte *)(data + 0xb),arg3);\n    *(undefined2 *)(offset + convertedCounter * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uVar1": "result",
                "iVar2": "index",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "offset"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_update_values_0008043e",
            "code": "\nint checkAndUpdateValues_0008043e(int **pPointer)\n\n{\n  char result;\n  uint statusCode;\n  int *thunkData;\n  int returnValue;\n  uint byteValue;\n  \n  if (*(byte *)((int)pPointer + 5) < 4) {\n    statusCode = (**(code **)(**pPointer + 8))();\n    byteValue = statusCode & 0xff;\n  }\n  thunkData = (int *)thunk_FUN_00081714();\n  if (pPointer[0x17] < thunkData) {\n    *(undefined *)(pPointer + 2) = 0xff;\n    *(undefined *)((int)pPointer + 7) = 0;\n    *(short *)(pPointer + 0x15) = *(short *)(pPointer + 0x15) + 1;\n  }\n  else if (7 < byteValue) {\n    FUN_000801b0(pPointer);\n    returnValue = FUN_000803d4(pPointer);\n    if (returnValue == 0) {\n      if (*(byte *)((int)pPointer + 10) - 3 < 2) {\n        FUN_00080410(pPointer);\n      }\n      *(undefined *)((int)pPointer + 7) = 0;\n      result = *(char *)((int)pPointer + 0x49);\n    }\n    else {\n      *(undefined *)((int)pPointer + 7) = 0;\n      result = (char)returnValue;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_update_values_0008043e",
                "param_1": "pPointer",
                "cVar1": "result",
                "uVar2": "statusCode",
                "piVar3": "thunkData",
                "iVar4": "returnValue",
                "unaff_r6": "byteValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initializeSystem_000804a8(void)\n\n{\n  int returnValue;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  returnValue = thunk_FUN_00081714();\n  DAT_200709e0 = returnValue + 1000;\n  returnValue = thunk_FUN_00081714();\n  DAT_20070a48 = returnValue + 1000;\n  returnValue = thunk_FUN_00081714();\n  DAT_20070934 = returnValue + 1000;\n  returnValue = thunk_FUN_00081714();\n  DAT_200708c0 = returnValue + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "check_and_process_data_000805d0",
            "code": "\n\n\nvoid checkAndProcessData_000805d0(void)\n\n{\n  uint dataSize;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  int index;\n  uint *pointerVar1;\n  undefined4 *pointerVar2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    dataSize = thunk_FUN_00081714();\n    if (DAT_200708c8 < dataSize) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      pointerVar2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*pointerVar2,pointerVar2[1],pointerVar2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      pointerVar2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    pointerVar1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *pointerVar1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (dataSize = thunk_FUN_00081714(), DAT_200708c0 < dataSize))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      index = thunk_FUN_00081714();\n      DAT_200708c0 = index + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      dataSize = thunk_FUN_00081714();\n      if (DAT_200708c0 < dataSize) {\n        DAT_2007090c = DAT_2007090c + 1;\n        index = thunk_FUN_00081714();\n        DAT_200708c0 = index + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        pointerVar1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      dataSize = thunk_FUN_00081714();\n      if (DAT_200708c0 < dataSize) {\n        DAT_2007090c = DAT_2007090c + 1;\n        index = thunk_FUN_00081714();\n        DAT_200708c0 = index + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  dataSize = thunk_FUN_00081714();\n  if (DAT_200709e0 < dataSize) {\n    tempVar1 = FUN_0008189c(DAT_20070940);\n    tempVar2 = FUN_00081730(tempVar1,DAT_200709c8);\n    tempVar1 = DAT_200708c4;\n    DAT_20070930 = tempVar2;\n    tempVar3 = FUN_00081734(tempVar2,DAT_200708c4);\n    tempVar3 = FUN_00081944(tempVar3,DAT_2007094c);\n    tempVar3 = FUN_00081734(tempVar3,DAT_20070914);\n    DAT_2007094c = tempVar3;\n    tempVar1 = FUN_00081730(tempVar2,tempVar1);\n    tempVar1 = FUN_00081944(tempVar1,DAT_200709c4);\n    tempVar1 = FUN_00081730(tempVar1,DAT_2007096c);\n    DAT_200709c4 = tempVar1;\n    tempVar4 = FUN_00081944(tempVar2,DAT_20070a4c);\n    tempVar4 = FUN_00081734(tempVar4,tempVar3);\n    FUN_00081734(tempVar4,tempVar1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = tempVar2;\n    DAT_20070914 = tempVar3;\n    DAT_2007096c = tempVar1;\n    index = thunk_FUN_00081714();\n    DAT_200709e0 = index + DAT_20070970;\n  }\n  tempVar1 = FUN_0008189c(DAT_20070970);\n  index = FUN_00081ca8(DAT_2007091c,tempVar1);\n  if (index != 0) {\n    DAT_2007091c = tempVar1;\n  }\n  index = FUN_00081c94(DAT_2007091c,0);\n  if (index != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "check_and_process_data_000805d0",
                "uVar1": "dataSize",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "iVar6": "index",
                "puVar7": "pointerVar1",
                "puVar8": "pointerVar2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int counter;\n  int nextCounter;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  counter = 0;\n  do {\n    nextCounter = counter + 1;\n    FUN_00081318(counter,0);\n    counter = nextCounter;\n  } while (nextCounter != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "counter",
                "iVar2": "nextCounter"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_components_00080c0c",
            "code": "\nvoid initializeComponents_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_components_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_run_initialization_functions_00080ce0",
            "code": "\nvoid checkAndRunInitializationFunctions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_run_initialization_functions_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_param_value_00080d2e",
            "code": "\nvoid updateParamValue_00080d2e(int ptr,undefined4 option,uint value)\n\n{\n  uint newParamValue;\n  \n  *(uint *)(ptr + 0x44) = value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    newParamValue = *(uint *)(ptr + 0x70) & *(uint *)(ptr + 0x70) & ~value;\n    break;\n  case 2:\n    newParamValue = *(uint *)(ptr + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(ptr + 0x70) = newParamValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(ptr + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_param_value_00080d2e",
                "param_1": "ptr",
                "param_2": "option",
                "param_3": "value",
                "uVar1": "newParamValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_values_00080d54",
            "code": "\nvoid updateValues_00080d54(undefined4 *array,undefined4 value,uint bitmask)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(bitmask << 0x1f) < 0;\n  array[0x11] = value;\n  if (isNegative) {\n    array[0x19] = value;\n  }\n  if (!isNegative) {\n    array[0x18] = value;\n  }\n  isNegative = (bitmask & 10) != 0;\n  if (isNegative) {\n    array[8] = value;\n  }\n  if (!isNegative) {\n    array[9] = value;\n  }\n  if (((int)(bitmask << 0x1e) < 0) || ((int)(bitmask << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_values_00080d54",
                "param_1": "array",
                "param_2": "value",
                "param_3": "bitmask",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_pointers_00080d7a",
            "code": "\nvoid updatePointers_00080d7a(undefined4 *pointers,undefined4 newValue,int isParam3Zero,int isParam4Zero,int isParam5Zero)\n\n{\n  pointers[0x11] = newValue;\n  if (isParam5Zero == 0) {\n    pointers[0x18] = newValue;\n  }\n  else {\n    pointers[0x19] = newValue;\n  }\n  if (isParam4Zero == 0) {\n    pointers[0x15] = newValue;\n  }\n  else {\n    pointers[0x14] = newValue;\n  }\n  if (isParam3Zero == 0) {\n    pointers[0xd] = newValue;\n  }\n  else {\n    pointers[0xc] = newValue;\n  }\n  pointers[4] = newValue;\n  *pointers = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_pointers_00080d7a",
                "param_1": "pointers",
                "param_2": "newValue",
                "param_3": "isParam3Zero",
                "param_4": "isParam4Zero",
                "param_5": "isParam5Zero"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_param_00080da0",
            "code": "\nundefined4 updateParam_00080da0(int data,int option,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(option) {\n  case 1:\n  case 2:\n    FUN_00080d2e(data,option,value);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(data + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(data + 0x60) = value;\n    }\n    break;\n  case 3:\n    FUN_00080d54(data,value,flag,0x80d55,data);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(data,value,option == 5,(flag << 0x1d) >> 0x1f,flag & 1,option,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_param_00080da0",
                "param_1": "data",
                "param_2": "option",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_intersection_00080e04",
            "code": "\nuint checkIntersection_00080e04(int inputPointer,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputPointer + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(inputPointer + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_intersection_00080e04",
                "param_1": "inputPointer",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "set_bit_if_not_set_00080e18",
            "code": "\n\n\nundefined4 setBitIfNotSet_00080e18(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "set_bit_if_not_set_00080e18",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_data_00080e9c",
            "code": "\n\n\nvoid initialize_data_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  array_variable[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_data_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "array_variable"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *output,uint inputSize,int thresholdFactor,int scalingFactor)\n\n{\n  uint numIntervals;\n  uint index;\n  uint thresholdTable [16];\n  \n  thresholdTable[0] = 0;\n  thresholdTable[1] = 8;\n  thresholdTable[2] = 0x10;\n  thresholdTable[3] = 0x18;\n  thresholdTable[4] = 0x40;\n  thresholdTable[5] = 0x50;\n  thresholdTable[6] = 0x60;\n  thresholdTable[7] = 0x70;\n  thresholdTable[8] = 0x200;\n  thresholdTable[9] = 0x240;\n  thresholdTable[10] = 0x280;\n  thresholdTable[11] = 0x2c0;\n  thresholdTable[12] = 0x300;\n  thresholdTable[13] = 0x340;\n  thresholdTable[14] = 0x380;\n  thresholdTable[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  numIntervals = inputSize / (uint)(thresholdFactor * 2);\n  if (inputSize == thresholdFactor * 2 * numIntervals) {\n    numIntervals = numIntervals - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(scalingFactor * (int)(((ulonglong)inputSize / (ulonglong)((numIntervals + 1) * 2)) / 1000000)) <=\n        thresholdTable[index]) {\n      output[1] = (index & 0xf) << 0x10 | (numIntervals & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "output",
                "param_2": "inputSize",
                "param_3": "thresholdFactor",
                "param_4": "scalingFactor",
                "uVar1": "numIntervals",
                "uVar2": "index",
                "local_58": "thresholdTable"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_data_00081034",
            "code": "\nvoid updateData_00081034(int dataAddress,uint newData,uint bitFlag)\n\n{\n  *(uint *)(dataAddress + 4) = newData | *(uint *)(dataAddress + 4) | (bitFlag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_data_00081034",
                "param_1": "dataAddress",
                "param_2": "newData",
                "param_3": "bitFlag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_registers_00081042",
            "code": "\nvoid updateRegisters_00081042(int baseAddress,uint value2,uint value1,uint value3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       value1 | *(uint *)(baseAddress + 4) | (value2 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_registers_00081042",
                "param_1": "baseAddress",
                "param_2": "value2",
                "param_3": "value1",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int address,uint bitPosition)\n\n{\n  *(int *)(address + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "address",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_memory_00081066",
            "code": "\nvoid initializeMemory_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_memory_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nundefined4 initialize_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_default_return_value_000811ae",
            "code": "\nundefined4 get_default_return_value_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_default_return_value_000811ae"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param",
                "param_2": "memoryAddress"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_default_000811be",
            "code": "\nundefined4 initializeDefault_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_default_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_default_value_000811c2",
            "code": "\nundefined4 getDefaultValue_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_default_value_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_000811c6",
            "code": "\nundefined4 initialize_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 param,int srcPointer,uint numBytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)numBytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(srcPointer + index);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "param",
                "param_2": "srcPointer",
                "param_3": "numBytes",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_data_value_thunk_00081714",
            "code": "\nundefined4 get_data_value_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_data_value_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "process_data_00081210",
            "code": "\n\n\nint processData_00081210(int input,int option)\n\n{\n  int result;\n  uint value1;\n  undefined4 value2;\n  uint value3;\n  byte mask1;\n  byte mask2;\n  int index1;\n  int index2;\n  \n  result = input;\n  if ((&DAT_00084d24)[input * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[input] & 0xf) == 4) {\n      result = FUN_0008105c(0x400c0000,(&DAT_00084d31)[input * 0x1c]);\n    }\n    mask2 = (&DAT_20070d94)[input];\n    mask1 = mask2 & 0xf;\n    if ((mask1 < 3) && (mask2 != 0)) {\n      if (mask1 == 2) {\n        if (option == 0) {\n          return result;\n        }\n      }\n      else if (mask1 == 1) {\n        if (option == 2) {\n          return result;\n        }\n      }\n      else if (mask1 == 3) {\n        if (option == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (option != 1) {\nLAB_0008126c:\n      if (option == 0) {\n        result = input * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        mask2 = (&DAT_20070d94)[input] & 0xf0 | 2;\n      }\n      else {\n        if (option != 2) {\n          return result;\n        }\n        result = input * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        mask2 = (&DAT_20070d94)[input] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[input] = mask2;\n      return result;\n    }\n    index1 = input * 0x1c;\n    index2 = *(int *)(&DAT_00084d18 + index1);\n    if (mask2 >> 4 == 0) {\n      value2 = 4;\n    }\n    else {\n      value2 = 5;\n    }\n    result = FUN_00080da0(index2,value2,*(undefined4 *)(&DAT_00084d1c + index1),\n                         *(undefined4 *)(&DAT_00084d28 + index1));\n    (&DAT_20070d94)[input] = (&DAT_20070d94)[input] & 0xf0 | 3;\n    if (*(int *)(index2 + 0x18) == -1) {\n      value1 = *(uint *)(&DAT_00084d20 + index1);\n      if (0x2c < value1) {\n        return 1;\n      }\n      if (value1 < 0x20) {\n        value1 = 1 << (value1 & 0xff);\n        value3 = _DAT_400e0618 & value1;\n        if (value3 == value1) {\n          _DAT_400e0614 = value3;\n        }\n      }\n      else {\n        value1 = 1 << (value1 - 0x20 & 0xff);\n        value3 = _DAT_400e0708 & value1;\n        if (value3 == value1) {\n          _DAT_400e0704 = value3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "input",
                "param_2": "option",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "bVar5": "mask1",
                "bVar6": "mask2",
                "iVar7": "index1",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_data_00081318",
            "code": "\nvoid updateData_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int ptr;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      FUN_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084d18 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = FUN_00080e04(ptr,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = data;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = data;\n      return;\n    }\n    FUN_00080d7a(ptr,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "ptr"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_r_info_is_zero_00081388",
            "code": "\nvoid execute_if_r_info_is_zero_00081388(void)\n\n{\n  if ((rel_array[6].info != 0xffffffff) &&\n     (rel_array[6].info = rel_array[6].info - 1,\n     rel_array[6].info == 0)) {\n    (*(code *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_r_info_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryAddress)\n\n{\n  FUN_00082504(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_parameter_000813c2",
            "code": "\nvoid updateParameter_000813c2(int param,undefined value)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(param + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(param + 0x84)) {\n    *(undefined *)(param + *(int *)(param + 0x80)) = value;\n    *(uint *)(param + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_parameter_000813c2",
                "param_1": "param",
                "param_2": "value",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_and_mask_000813e4",
            "code": "\nuint calculateDifferenceAndMask_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_and_mask_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPointer,undefined4 newValue)\n\n{\n  int tempVar1;\n  uint newIndex;\n  \n  tempVar1 = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(tempVar1 + 0x84) == *(int *)(tempVar1 + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(tempVar1 + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(tempVar1 + 0x84) == newIndex);\n    *(char *)(tempVar1 + *(int *)(tempVar1 + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "tempVar1",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_000814e4",
            "code": "\nvoid initializeFunction_000814e4(undefined4 *outputArray,undefined4 inputValue,undefined inputFlag,undefined4 parameter4,\n                 undefined4 parameter5,undefined4 parameter6)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputValue;\n  *outputArray = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(outputArray + 7) = inputFlag;\n  outputArray[4] = parameter5;\n  outputArray[8] = parameter4;\n  outputArray[5] = parameter6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_000814e4",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "inputFlag",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "param_6": "parameter6"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_module_00081508",
            "code": "\nvoid initializeModule_00081508(int moduleAddress,uint pageSize,undefined4 data)\n\n{\n  int tempVar1;\n  undefined4 *moduleDataPtr;\n  \n  FUN_00080e18(*(undefined4 *)(moduleAddress + 0x20));\n  moduleDataPtr = *(undefined4 **)(moduleAddress + 0x18);\n  moduleDataPtr[0x48] = 0x202;\n  *moduleDataPtr = 0xac;\n  moduleDataPtr[1] = data;\n  moduleDataPtr[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / pageSize >> 4;\n  moduleDataPtr[3] = 0xffffffff;\n  moduleDataPtr[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(moduleAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(moduleAddress + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(moduleAddress + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(moduleAddress + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *moduleDataPtr = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_module_00081508",
                "param_1": "moduleAddress",
                "param_2": "pageSize",
                "param_3": "data",
                "iVar1": "tempVar1",
                "puVar2": "moduleDataPtr"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_function_000815d4",
            "code": "\nundefined4 * initializeFunction_000815d4(undefined4 *outputArray,undefined4 inputValue)\n\n{\n  FUN_000814e4();\n  *outputArray = &PTR_FUN_00081454_1_000857d8;\n  outputArray[9] = inputValue;\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_function_000815d4",
                "param_1": "outputArray",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "merge_values_000815f8",
            "code": "\nuint mergeValues_000815f8(int inputValue,uint existingValue)\n\n{\n  return existingValue | inputValue << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "merge_values_000815f8",
                "param_1": "inputValue",
                "param_2": "existingValue"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "execute_function_000815fe",
            "code": "\nundefined4 * executeFunction_000815fe(undefined4 *inputParameter)\n\n{\n  FUN_00081e04(*inputParameter);\n  return inputParameter;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "execute_function_000815fe",
                "param_1": "inputParameter"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_and_clear_0008160c",
            "code": "\nvoid resetAndClear_0008160c(int *array)\n\n{\n  if (*array != 0) {\n    FUN_00081e04();\n  }\n  *array = 0;\n  array[2] = 0;\n  array[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_and_clear_0008160c",
                "param_1": "array",
                "param_1[1]": "array[1]",
                "param_1[2]": "array[2]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_and_check_value_00081622",
            "code": "\nint updateAndCheckValue_00081622(int *ptr_value,int count,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*ptr_value,count + 1,param_3,param_4,param_4);\n  if (result != 0) {\n    *ptr_value = result;\n    ptr_value[1] = count;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_and_check_value_00081622",
                "param_1": "ptr_value",
                "param_2": "count",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_pointer_validity_0008163a",
            "code": "\nundefined4 checkAndUpdatePointerValidity_0008163a(int *pointerArray,uint threshold)\n\n{\n  int returnValue;\n  \n  if ((*pointerArray == 0) || ((uint)pointerArray[1] < threshold)) {\n    returnValue = FUN_00081622(pointerArray);\n    if (returnValue == 0) {\n      return 0;\n    }\n    if (pointerArray[2] == 0) {\n      *(undefined *)*pointerArray = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_pointer_validity_0008163a",
                "param_1": "pointerArray",
                "param_2": "threshold",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_data_0008165c",
            "code": "\nundefined4 * updateData_0008165c(undefined4 *data,undefined4 value,undefined4 newData)\n\n{\n  int result;\n  \n  result = FUN_0008163a(data,newData);\n  if (result == 0) {\n    FUN_0008160c(data);\n  }\n  else {\n    data[2] = newData;\n    FUN_00082994(*data,value);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_data_0008165c",
                "param_1": "data",
                "param_2": "value",
                "param_3": "newData",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_param_array_00081682",
            "code": "\nundefined4 * initializeParamArray_00081682(undefined4 *paramArray,int paramValue)\n\n{\n  undefined4 result;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (paramValue != 0) {\n    result = FUN_00082a50(paramValue);\n    FUN_0008165c(paramArray,paramValue,result);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_param_array_00081682",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "uVar1": "result",
                "param_1[1]": "paramArray[1]",
                "param_1[2]": "paramArray[2]"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_application_loop_000816a8",
            "code": "\nvoid runApplicationLoop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_application_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_memory_000816d4",
            "code": "\n\n\nvoid initializeDataMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_memory_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_value_00081714",
            "code": "\nundefined4 get_global_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_value_00081730",
            "code": "\nuint calculateFloatingPointValue_00081730(uint input1,uint input2,undefined4 unusedParam,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint flippedInput2;\n  uint maskedInput1;\n  uint shiftedInput1;\n  uint result;\n  uint difference;\n  bool isZero;\n  \n  flippedInput2 = input2 ^ 0x80000000;\n  shiftedInput1 = input1 << 1;\n  isZero = shiftedInput1 == 0;\n  if (!isZero) {\n    input4 = input2 << 1;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedInput1 == input4;\n  }\n  shiftedInput1 = (int)shiftedInput1 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)input4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      shiftedInput1 = flippedInput2;\n      if (shiftedInput1 == -1) {\n        shiftedInput1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        flippedInput2 = shiftedInput1;\n      }\n      isZero = (shiftedInput1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (flippedInput2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = shiftedInput1 == flippedInput2;\n      }\n      if (!isZero) {\n        shiftedInput1 = shiftedInput1 | 0x400000;\n      }\n      return shiftedInput1;\n    }\n    if (((input1 ^ flippedInput2) & 0x7fffffff) != 0) {\n      if (shiftedInput1 == 0) {\n        input1 = flippedInput2;\n      }\n      return input1;\n    }\n    if (input1 != flippedInput2) {\n      return 0;\n    }\n    if ((shiftedInput1 & 0xff000000) == 0) {\n      flippedInput2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        flippedInput2 = flippedInput2 | 0x80000000;\n      }\n      return flippedInput2;\n    }\n    if (shiftedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shiftedInput1;\n  isZero = difference != 0;\n  result = shiftedInput1;\n  if (isZero && shiftedInput1 <= input4) {\n    result = shiftedInput1 + difference;\n  }\n  if (isZero && shiftedInput1 <= input4) {\n    flippedInput2 = flippedInput2 ^ input1;\n  }\n  if (isZero && shiftedInput1 <= input4) {\n    input1 = input1 ^ flippedInput2;\n  }\n  if (isZero && shiftedInput1 <= input4) {\n    flippedInput2 = flippedInput2 ^ input1;\n  }\n  if (input4 < shiftedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  maskedInput1 = flippedInput2 & 0xffffff | 0x800000;\n  if ((flippedInput2 & 0x80000000) != 0) {\n    maskedInput1 = -maskedInput1;\n  }\n  if (result == difference) {\n    maskedInput1 = maskedInput1 ^ 0x800000;\n    if (result == 0) {\n      shiftedInput1 = shiftedInput1 ^ 0x800000;\n      result = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + ((int)maskedInput1 >> (difference & 0xff));\n  maskedInput1 = maskedInput1 << (0x20 - difference & 0xff);\n  input1 = shiftedInput1 & 0x80000000;\n  if ((int)shiftedInput1 < 0) {\n    isZero = maskedInput1 != 0;\n    maskedInput1 = -maskedInput1;\n    shiftedInput1 = -shiftedInput1 - (uint)isZero;\n  }\n  if (shiftedInput1 < 0x800000) {\n    flippedInput2 = maskedInput1 & 0x80000000;\n    maskedInput1 = maskedInput1 << 1;\n    shiftedInput1 = shiftedInput1 * 2 + (uint)(flippedInput2 != 0);\n    flippedInput2 = result - 2;\n    if ((shiftedInput1 & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedInput1) - 8;\n      shiftedInput1 = shiftedInput1 << (difference & 0xff);\n      if ((int)flippedInput2 < (int)difference) {\n        shiftedInput1 = shiftedInput1 >> (-(flippedInput2 - difference) & 0xff);\n      }\n      else {\n        shiftedInput1 = shiftedInput1 + (flippedInput2 - difference) * 0x800000;\n      }\n      return shiftedInput1 | input1;\n    }\n  }\n  else {\n    flippedInput2 = result - 1;\n    if (0xffffff < shiftedInput1) {\n      flippedInput2 = shiftedInput1 & 1;\n      shiftedInput1 = shiftedInput1 >> 1;\n      maskedInput1 = (uint)(flippedInput2 != 0) << 0x1f | maskedInput1 >> 1;\n      flippedInput2 = result;\n      if (0xfd < result) goto LAB_0008186a;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + flippedInput2 * 0x800000 + (uint)(0x7fffffff < maskedInput1);\n  if (maskedInput1 == 0x80000000) {\n    shiftedInput1 = shiftedInput1 & 0xfffffffe;\n  }\n  return shiftedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_value_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unusedParam",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "flippedInput2",
                "uVar4": "maskedInput1",
                "uVar5": "shiftedInput1",
                "uVar6": "result",
                "uVar7": "difference",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_float_value_00081734",
            "code": "\nuint calculateFloatValue_00081734(uint inputValue1,uint inputValue2,undefined4 constantValue1,uint constantValue2)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint positiveValue1;\n  uint positiveValue2;\n  uint tempValue1;\n  uint tempValue2;\n  bool isEqual;\n  \n  positiveValue2 = inputValue1 << 1;\n  isEqual = positiveValue2 == 0;\n  if (!isEqual) {\n    constantValue2 = inputValue2 << 1;\n    isEqual = constantValue2 == 0;\n  }\n  if (!isEqual) {\n    isEqual = positiveValue2 == constantValue2;\n  }\n  shiftedValue1 = (int)positiveValue2 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedValue1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)constantValue2 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedValue2 = (int)(inputValue2 << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      positiveValue2 = inputValue2;\n      if (shiftedValue1 == -1) {\n        positiveValue2 = inputValue1;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        inputValue2 = positiveValue2;\n      }\n      isEqual = (positiveValue2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (inputValue2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = positiveValue2 == inputValue2;\n      }\n      if (!isEqual) {\n        positiveValue2 = positiveValue2 | 0x400000;\n      }\n      return positiveValue2;\n    }\n    if (((inputValue1 ^ inputValue2) & 0x7fffffff) != 0) {\n      if (positiveValue2 == 0) {\n        inputValue1 = inputValue2;\n      }\n      return inputValue1;\n    }\n    if (inputValue1 != inputValue2) {\n      return 0;\n    }\n    if ((positiveValue2 & 0xff000000) == 0) {\n      positiveValue2 = inputValue1 << 1;\n      if ((inputValue1 & 0x80000000) != 0) {\n        positiveValue2 = positiveValue2 | 0x80000000;\n      }\n      return positiveValue2;\n    }\n    if (positiveValue2 < 0xfe000000) {\n      return inputValue1 + 0x800000;\n    }\n    inputValue1 = inputValue1 & 0x80000000;\nLAB_0008186a:\n    return inputValue1 | 0x7f800000;\n  }\n  positiveValue2 = positiveValue2 >> 0x18;\n  constantValue2 = constantValue2 >> 0x18;\n  tempValue2 = constantValue2 - positiveValue2;\n  isEqual = tempValue2 != 0;\n  tempValue1 = positiveValue2;\n  if (isEqual && positiveValue2 <= constantValue2) {\n    tempValue1 = positiveValue2 + tempValue2;\n  }\n  if (isEqual && positiveValue2 <= constantValue2) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (isEqual && positiveValue2 <= constantValue2) {\n    inputValue1 = inputValue1 ^ inputValue2;\n  }\n  if (isEqual && positiveValue2 <= constantValue2) {\n    inputValue2 = inputValue2 ^ inputValue1;\n  }\n  if (constantValue2 < positiveValue2) {\n    tempValue2 = -tempValue2;\n  }\n  if (0x19 < tempValue2) {\n    return inputValue1;\n  }\n  positiveValue2 = inputValue1 & 0xffffff | 0x800000;\n  if ((inputValue1 & 0x80000000) != 0) {\n    positiveValue2 = -positiveValue2;\n  }\n  positiveValue1 = inputValue2 & 0xffffff | 0x800000;\n  if ((inputValue2 & 0x80000000) != 0) {\n    positiveValue1 = -positiveValue1;\n  }\n  if (tempValue1 == tempValue2) {\n    positiveValue1 = positiveValue1 ^ 0x800000;\n    if (tempValue1 == 0) {\n      positiveValue2 = positiveValue2 ^ 0x800000;\n      tempValue1 = 1;\n    }\n    else {\n      tempValue2 = tempValue2 - 1;\n    }\n  }\n  positiveValue2 = positiveValue2 + ((int)positiveValue1 >> (tempValue2 & 0xff));\n  positiveValue1 = positiveValue1 << (0x20 - tempValue2 & 0xff);\n  inputValue1 = positiveValue2 & 0x80000000;\n  if ((int)positiveValue2 < 0) {\n    isEqual = positiveValue1 != 0;\n    positiveValue1 = -positiveValue1;\n    positiveValue2 = -positiveValue2 - (uint)isEqual;\n  }\n  if (positiveValue2 < 0x800000) {\n    tempValue2 = positiveValue1 & 0x80000000;\n    positiveValue1 = positiveValue1 << 1;\n    positiveValue2 = positiveValue2 * 2 + (uint)(tempValue2 != 0);\n    tempValue2 = tempValue1 - 2;\n    if ((positiveValue2 & 0x800000) == 0) {\n      tempValue1 = LZCOUNT(positiveValue2) - 8;\n      positiveValue2 = positiveValue2 << (tempValue1 & 0xff);\n      if ((int)tempValue2 < (int)tempValue1) {\n        positiveValue2 = positiveValue2 >> (-(tempValue2 - tempValue1) & 0xff);\n      }\n      else {\n        positiveValue2 = positiveValue2 + (tempValue2 - tempValue1) * 0x800000;\n      }\n      return positiveValue2 | inputValue1;\n    }\n  }\n  else {\n    tempValue2 = tempValue1 - 1;\n    if (0xffffff < positiveValue2) {\n      tempValue2 = positiveValue2 & 1;\n      positiveValue2 = positiveValue2 >> 1;\n      positiveValue1 = (uint)(tempValue2 != 0) << 0x1f | positiveValue1 >> 1;\n      tempValue2 = tempValue1;\n      if (0xfd < tempValue1) goto LAB_0008186a;\n    }\n  }\n  positiveValue2 = positiveValue2 + tempValue2 * 0x800000 + (uint)(0x7fffffff < positiveValue1);\n  if (positiveValue1 == 0x80000000) {\n    positiveValue2 = positiveValue2 & 0xfffffffe;\n  }\n  return positiveValue2 | inputValue1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_float_value_00081734",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "constantValue1",
                "param_4": "constantValue2",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "positiveValue1",
                "uVar4": "positiveValue2",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_shifted_sum_00081894",
            "code": "\nuint calculateShiftedSum_00081894(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint shiftAmount;\n  int sumValue;\n  uint tempValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(inputValue);\n  shiftAmount = leadingZeroes - 8;\n  sumValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroes) {\n    tempValue = 0 << (shiftAmount & 0xff);\n    leadingZeroes = sumValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      leadingZeroes = leadingZeroes & 0xfffffffe;\n    }\n    return leadingZeroes;\n  }\n  shiftAmount = inputValue << leadingZeroes + 0x18;\n  leadingZeroes = sumValue + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeroes = leadingZeroes & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_shifted_sum_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "iVar3": "sumValue",
                "uVar4": "tempValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_something_0008189c",
            "code": "\nuint calculateSomething_0008189c(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint shiftValue;\n  uint isNegative;\n  int result;\n  \n  isNegative = inputValue & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = countLeadingZeroes(inputValue);\n  shiftValue = leadingZeroes - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeroes) {\n    leadingZeroes = 0 << (shiftValue & 0xff);\n    isNegative = result + (inputValue << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeroes);\n    if (leadingZeroes == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftValue = inputValue << leadingZeroes + 0x18;\n  isNegative = result + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftValue >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_something_0008189c",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftValue",
                "uVar3": "isNegative",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeroes"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float_00081944",
            "code": "\nuint calculateFloat_00081944(uint inputFloat1,uint inputFloat2,undefined4 inputValue1,uint inputValue2)\n\n{\n  longlong tempLongVar1;\n  uint resultFloat;\n  uint tempValue1;\n  int tempInt1;\n  int tempInt2;\n  uint tempValue2;\n  int tempInt3;\n  uint tempValue3;\n  bool isZeroValue;\n  bool isNegativeValue;\n  \n  tempValue1 = inputFloat1 >> 0x17 & 0xff;\n  isZeroValue = tempValue1 == 0;\n  if (!isZeroValue) {\n    inputValue2 = inputFloat2 >> 0x17 & 0xff;\n    isZeroValue = inputValue2 == 0;\n  }\n  if (!isZeroValue) {\n    isZeroValue = tempValue1 == 0xff;\n  }\n  if (!isZeroValue) {\n    isZeroValue = inputValue2 == 0xff;\n  }\n  if (isZeroValue) {\n    inputValue2 = inputFloat2 >> 0x17 & 0xff;\n    if (tempValue1 == 0xff || inputValue2 == 0xff) {\n      isZeroValue = inputFloat1 == 0 || inputFloat1 == 0x80000000;\n      resultFloat = inputFloat2;\n      if (inputFloat1 != 0 && inputFloat1 != 0x80000000) {\n        isZeroValue = inputFloat2 == 0;\n        resultFloat = inputFloat1;\n      }\n      if (!isZeroValue) {\n        isZeroValue = inputFloat2 == 0x80000000;\n      }\n      tempValue3 = resultFloat;\n      if (((isZeroValue) || ((tempValue1 == 0xff && ((resultFloat & 0x7fffff) != 0)))) ||\n         ((inputValue2 == 0xff && (tempValue3 = inputFloat2, (inputFloat2 & 0x7fffff) != 0)))) {\n        return tempValue3 | 0x7fc00000;\n      }\n      resultFloat = resultFloat ^ inputFloat2;\n      goto LAB_00081a94;\n    }\n    isZeroValue = (inputFloat1 & 0x7fffffff) == 0;\n    if (!isZeroValue) {\n      isZeroValue = (inputFloat2 & 0x7fffffff) == 0;\n    }\n    if (isZeroValue) {\n      return (inputFloat1 ^ inputFloat2) & 0x80000000;\n    }\n    isZeroValue = tempValue1 == 0;\n    resultFloat = inputFloat1 & 0x80000000;\n    while( true ) {\n      if (isZeroValue) {\n        inputFloat1 = inputFloat1 << 1;\n        isZeroValue = (inputFloat1 & 0x800000) == 0;\n      }\n      if (!isZeroValue) break;\n      tempValue1 = tempValue1 - 1;\n    }\n    inputFloat1 = inputFloat1 | resultFloat;\n    isZeroValue = inputValue2 == 0;\n    resultFloat = inputFloat2 & 0x80000000;\n    while( true ) {\n      if (isZeroValue) {\n        inputFloat2 = inputFloat2 << 1;\n        isZeroValue = (inputFloat2 & 0x800000) == 0;\n      }\n      if (!isZeroValue) break;\n      inputValue2 = inputValue2 - 1;\n    }\n    inputFloat2 = inputFloat2 | resultFloat;\n  }\n  tempInt1 = tempValue1 + inputValue2;\n  tempValue3 = inputFloat1 ^ inputFloat2;\n  tempValue1 = inputFloat1 << 9;\n  isZeroValue = tempValue1 == 0;\n  if (!isZeroValue) {\n    inputFloat2 = inputFloat2 << 9;\n    isZeroValue = inputFloat2 == 0;\n  }\n  if (isZeroValue) {\n    if (tempValue1 == 0) {\n      inputFloat2 = inputFloat2 << 9;\n    }\n    resultFloat = tempValue3 & 0x80000000 | inputFloat1 & 0x7fffff | inputFloat2 >> 9;\n    isNegativeValue = SBORROW4(tempInt1,0x7f);\n    tempInt2 = tempInt1 + -0x7f;\n    isZeroValue = tempInt2 == 0;\n    tempInt3 = tempInt2;\n    if (!isZeroValue && 0x7e < tempInt1) {\n      isNegativeValue = SBORROW4(0xff,tempInt2);\n      tempInt3 = 0xff - tempInt2;\n      isZeroValue = tempInt2 == 0xff;\n    }\n    if (!isZeroValue && tempInt3 < 0 == isNegativeValue) {\n      resultFloat = resultFloat | tempInt2 * 0x800000;\n    }\n    if (!isZeroValue && tempInt3 < 0 == isNegativeValue) {\n      return resultFloat;\n    }\n    resultFloat = resultFloat | 0x800000;\n    tempValue2 = 0;\n    isNegativeValue = SBORROW4(tempInt2,1);\n    tempValue3 = tempInt1 - 0x80;\n    isZeroValue = tempValue3 == 0;\n    tempValue1 = tempValue3;\n  }\n  else {\n    tempLongVar1 = (ulonglong)(tempValue1 >> 5 | 0x8000000) * (ulonglong)(inputFloat2 >> 5 | 0x8000000);\n    tempValue2 = (uint)tempLongVar1;\n    resultFloat = (uint)((ulonglong)tempLongVar1 >> 0x20);\n    isZeroValue = resultFloat < 0x800000;\n    if (isZeroValue) {\n      resultFloat = resultFloat << 1;\n    }\n    if (isZeroValue) {\n      resultFloat = resultFloat | tempValue2 >> 0x1f;\n      tempValue2 = tempValue2 << 1;\n    }\n    resultFloat = tempValue3 & 0x80000000 | resultFloat;\n    tempValue3 = (tempInt1 + -0x7f) - (uint)isZeroValue;\n    isNegativeValue = SBORROW4(tempValue3,0xfd);\n    isZeroValue = tempValue3 == 0xfd;\n    tempValue1 = tempValue3 - 0xfd;\n    if (tempValue3 < 0xfe) {\n      resultFloat = resultFloat + tempValue3 * 0x800000 + (uint)(0x7fffffff < tempValue2);\n      if (tempValue2 == 0x80000000) {\n        resultFloat = resultFloat & 0xfffffffe;\n      }\n      return resultFloat;\n    }\n  }\n  if (isZeroValue || (int)tempValue1 < 0 != isNegativeValue) {\n    isZeroValue = (int)(tempValue3 + 0x19) < 0;\n    if (tempValue3 == 0xffffffe7 || isZeroValue != SCARRY4(tempValue3,0x19)) {\n      resultFloat = resultFloat & 0x80000000;\n    }\n    if (tempValue3 != 0xffffffe7 && isZeroValue == SCARRY4(tempValue3,0x19)) {\n      tempValue1 = (resultFloat << 1) >> (-tempValue3 & 0xff);\n      tempValue3 = resultFloat << (tempValue3 + 0x20 & 0xff);\n      tempValue1 = ((uint)((resultFloat & 0x80000000) != 0) << 0x1f | tempValue1 >> 1) + (uint)((byte)tempValue1 & 1);\n      if ((tempValue2 | tempValue3 << 1) == 0) {\n        tempValue1 = tempValue1 & ~(tempValue3 >> 0x1f);\n      }\n      return tempValue1;\n    }\n    return resultFloat;\n  }\nLAB_00081a94:\n  return resultFloat & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float_00081944",
                "param_1": "inputFloat1",
                "param_2": "inputFloat2",
                "param_3": "inputValue1",
                "param_4": "inputValue2",
                "lVar1": "tempLongVar1",
                "uVar2": "resultFloat",
                "uVar3": "tempValue1",
                "iVar4": "tempInt1",
                "iVar5": "tempInt2",
                "uVar6": "tempValue2",
                "iVar7": "tempInt3",
                "uVar8": "tempValue3",
                "bVar9": "isZeroValue",
                "bVar10": "isNegativeValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_00081bf4",
            "code": "\nuint checkOverflow_00081bf4(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint twiceInput1;\n  uint twiceInput2;\n  uint combinedInput;\n  bool isZero;\n  \n  twiceInput1 = input1 * 2;\n  twiceInput2 = input2 * 2;\n  if (((int)twiceInput1 >> 0x18 == -1 || (int)twiceInput2 >> 0x18 == -1) &&\n     ((((int)twiceInput1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)twiceInput2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combinedInput = twiceInput1 | input2 & 0x7fffffff;\n  isZero = combinedInput == 0;\n  if (!isZero) {\n    combinedInput = input1 ^ input2;\n    isZero = combinedInput == 0;\n  }\n  isNegative = -1 < (int)combinedInput;\n  if (isNegative) {\n    input1 = twiceInput1 + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative && twiceInput2 <= twiceInput1) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || twiceInput2 > twiceInput1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_00081bf4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "twiceInput1",
                "uVar3": "twiceInput2",
                "uVar4": "combinedInput",
                "bVar1": "isNegative",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "execute_function_00081c54",
            "code": "\nvoid executeFunction_00081c54(undefined4 source,undefined4 destination)\n\n{\n  FUN_00081c5c(destination,source);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "execute_function_00081c54",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_values_00081c5c",
            "code": "\nundefined8 concatenateValues_00081c5c(undefined4 value1,undefined4 value2)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_values_00081c5c",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_cy_and_zr_00081c94",
            "code": "\nbool check_CY_and_ZR_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c5c();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_cy_and_zr_00081c94",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_devices_status_00081ca8",
            "code": "\nbool checkDevicesStatus_00081ca8(void)\n\n{\n  undefined isZeroFlagSet;\n  undefined isCarryFlagSet;\n  \n  FUN_00081c54();\n  return !(bool)isCarryFlagSet || (bool)isZeroFlagSet;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_devices_status_00081ca8",
                "in_ZR": "isZeroFlagSet",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "decode_value_00081cd0",
            "code": "\nuint decode_value_00081cd0(uint input_value)\n\n{\n  uint shifted_bits;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_bits = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_bits;\n  if (shifted_bits < 0x9f && difference != 0) {\n    shifted_bits = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_bits = -shifted_bits;\n    }\n    return shifted_bits;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "decode_value_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_bits",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "validate_param_00081d1c",
            "code": "\nuint validateParam_00081d1c(uint inputValue)\n\n{\n  uint shiftCount;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftCount = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftCount) {\n    return (inputValue << 8 | 0x80000000) >> (shiftCount & 0xff);\n  }\n  if ((shiftCount == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "validate_param_00081d1c",
                "param_1": "inputValue",
                "uVar1": "shiftCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "modify_elf_entry_00081d5c",
            "code": "\nundefined4 modify_elf_entry_00081d5c(dword value1,dword value2,dword value3)\n\n{\n  dword *new_array;\n  uint index;\n  uint bitwise_flag;\n  \n  if (rel_array[48].r_offset == 0) {\n    rel_array[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(rel_array[48].r_offset + 4);\n  new_array = (dword *)rel_array[48].r_offset;\n  if (0x1f < (int)index) {\n    new_array = (dword *)FUN_00081df4(400);\n    if (new_array == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *new_array = rel_array[48].r_offset;\n    new_array[1] = 0;\n    index = 0;\n    rel_array[48].r_offset = (dword)new_array;\n    new_array[0x62] = 0;\n    new_array[99] = 0;\n  }\n  bitwise_flag = 1 << (index & 0xff);\n  new_array[index + 0x22] = value1;\n  new_array[0x62] = new_array[0x62] | bitwise_flag;\n  new_array[index + 0x42] = value3;\n  new_array[99] = bitwise_flag | new_array[99];\n  new_array[1] = index + 1;\n  new_array[index + 2] = value2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "modify_elf_entry_00081d5c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "pdVar1": "new_array",
                "uVar2": "index",
                "uVar3": "bitwise_flag"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_function_set_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctionSet_00081d7c(void)\n\n{\n  int iterationCount;\n  code **functionPtrArray;\n  \n  FUNC_00085858();\n  functionPtrArray = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPtrArray = functionPtrArray + 1;\n    (**functionPtrArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_function_set_00081d7c",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPtrArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "execute_relocation_00081df4",
            "code": "\nvoid executeRelocation_00081df4(undefined4 param)\n\n{\n  FUN_00081e14(relocationTable[140].offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "execute_relocation_00081df4",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "execute_relocation_00081e04",
            "code": "\nvoid executeRelocation_00081e04(undefined4 param)\n\n{\n  FUN_00083d9c(relocationArray[140].r_offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "execute_relocation_00081e04",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_and_initialize_memory_block_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_initialize_memory_block_00081e14(undefined4 *output_ptr,uint size)\n\n{\n  dword r_info_142;\n  int temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  dword r_offset_141;\n  uint temp6;\n  int temp7;\n  undefined *ptr_temp;\n  dword r_offset_temp;\n  dword r_offset_temp2;\n  int temp8;\n  dword *pd_temp;\n  uint temp9;\n  undefined *ptr_temp2;\n  dword *pd_temp2;\n  uint temp10;\n  \n  if (size + 0xb < 0x17) {\n    temp9 = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    temp9 = size + 0xb & 0xfffffff8;\n    if (((int)temp9 < 0) || (temp9 < size)) {\nLAB_00081e7a:\n      *output_ptr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(output_ptr);\n  r_info_142 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (temp9 < 0x1f8) {\n    temp8 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + temp9);\n    if ((temp8 != temp9 + 0x20070464) ||\n       (temp1 = temp8 + 8, temp8 = *(int *)(temp8 + 0x14), temp1 != temp8)) {\n      temp4 = *(int *)(temp8 + 0xc);\n      temp7 = (*(uint *)(temp8 + 4) & 0xfffffffc) + temp8;\n      temp9 = *(uint *)(temp7 + 4);\n      temp1 = *(int *)(temp8 + 8);\n      *(int *)(temp1 + 0xc) = temp4;\n      *(int *)(temp4 + 8) = temp1;\n      *(uint *)(temp7 + 4) = temp9 | 1;\n      FUNC_0008259c(output_ptr);\n      return (int *)(temp8 + 8);\n    }\n    temp10 = (temp9 >> 3) + 2;\n  }\n  else {\n    temp10 = temp9 >> 9;\n    if (temp10 == 0) {\n      temp1 = 0x7e;\n      temp8 = 0x3f;\n    }\n    else if (temp10 < 5) {\n      temp8 = (temp9 >> 6) + 0x38;\n      temp1 = temp8 * 2;\n    }\n    else if (temp10 < 0x15) {\n      temp8 = temp10 + 0x5b;\n      temp1 = temp8 * 2;\n    }\n    else if (temp10 < 0x55) {\n      temp8 = (temp9 >> 0xc) + 0x6e;\n      temp1 = temp8 * 2;\n    }\n    else if (temp10 < 0x155) {\n      temp8 = (temp9 >> 0xf) + 0x77;\n      temp1 = temp8 * 2;\n    }\n    else if (temp10 < 0x555) {\n      temp8 = (temp9 >> 0x12) + 0x7c;\n      temp1 = temp8 * 2;\n    }\n    else {\n      temp1 = 0xfc;\n      temp8 = 0x7e;\n    }\n    for (r_offset_141 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp1]; temp1 * 4 + 0x20070464U != r_offset_141\n        ; r_offset_141 = *(dword *)(r_offset_141 + 0xc)) {\n      temp10 = *(uint *)(r_offset_141 + 4) & 0xfffffffc;\n      temp4 = temp10 - temp9;\n      if (0xf < temp4) {\n        temp8 = temp8 + -1;\n        break;\n      }\n      if (-1 < temp4) {\n        temp1 = temp10 + r_offset_141;\n        temp9 = *(uint *)(temp1 + 4);\n        temp4 = *(int *)(r_offset_141 + 0xc);\n        temp8 = *(int *)(r_offset_141 + 8);\n        *(int *)(temp8 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp8;\n        *(uint *)(temp1 + 4) = temp9 | 1;\n        FUNC_0008259c(output_ptr);\n        return (int *)(r_offset_141 + 8);\n      }\n    }\n    temp10 = temp8 + 1;\n  }\n  r_offset_141 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp3 = temp2 & 0xfffffffc;\n    temp5 = temp3 - temp9;\n    if (0xf < (int)temp5) {\n      r_offset_141 = temp9 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = temp9 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = r_offset_141;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = r_offset_141;\n      *(undefined4 *)(r_offset_141 + 0xc) = 0x2007046c;\n      *(undefined4 *)(r_offset_141 + 8) = 0x2007046c;\n      *(uint *)(r_offset_141 + 4) = temp5 | 1;\n      *(uint *)(r_offset_141 + temp5) = temp5;\n      FUNC_0008259c(output_ptr);\n      return (int *)(r_info_142 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp5) {\n      *(uint *)(temp3 + r_info_142 + 4) = *(uint *)(temp3 + r_info_142 + 4) | 1;\n      FUNC_0008259c(output_ptr);\n      return (int *)(r_info_142 + 8);\n    }\n    if (temp3 < 0x200) {\n      temp3 = temp2 & 0xfffffff8;\n      temp8 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp3);\n      r_offset_141 = 1 << ((int)(temp2 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(r_info_142 + 8) = temp8;\n      *(uint *)(r_info_142 + 0xc) = temp3 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = r_offset_141;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp3) = r_info_142;\n      *(dword *)(temp8 + 0xc) = r_info_142;\n    }\n    else {\n      temp5 = temp2 >> 9;\n      if (temp5 < 5) {\n        temp1 = (temp2 >> 6) + 0x38;\n        temp8 = temp1 * 2;\n      }\n      else if (temp5 < 0x15) {\n        temp1 = temp5 + 0x5b;\n        temp8 = temp1 * 2;\n      }\n      else if (temp5 < 0x55) {\n        temp1 = (temp2 >> 0xc) + 0x6e;\n        temp8 = temp1 * 2;\n      }\n      else if (temp5 < 0x155) {\n        temp1 = (temp2 >> 0xf) + 0x77;\n        temp8 = temp1 * 2;\n      }\n      else if (temp5 < 0x555) {\n        temp1 = (temp2 >> 0x12) + 0x7c;\n        temp8 = temp1 * 2;\n      }\n      else {\n        temp8 = 0xfc;\n        temp1 = 0x7e;\n      }\n      r_offset_141 = temp8 * 4 + 0x20070464;\n      r_offset_temp = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp8];\n      if (r_offset_temp == r_offset_141) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp1 >> 2 & 0xffU);\n        r_offset_temp2 = r_offset_temp;\n      }\n      else {\n        do {\n          r_offset_temp2 = r_offset_temp;\n          if ((*(uint *)(r_offset_temp + 4) & 0xfffffffc) <= temp3) break;\n          r_offset_temp = *(dword *)(r_offset_temp + 8);\n          r_offset_temp2 = r_offset_temp;\n        } while (r_offset_141 != r_offset_temp);\n        r_offset_temp = *(dword *)(r_offset_temp2 + 0xc);\n      }\n      r_offset_141 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(r_info_142 + 0xc) = r_offset_temp;\n      *(dword *)(r_info_142 + 8) = r_offset_temp2;\n      *(dword *)(r_offset_temp + 8) = r_info_142;\n      *(dword *)(r_offset_temp2 + 0xc) = r_info_142;\n    }\n  }\n  r_info_142 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp2 = 1 << ((int)temp10 >> 2 & 0xffU);\n  if (temp2 <= r_offset_141) {\n    if ((r_offset_141 & temp2) == 0) {\n      temp10 = temp10 & 0xfffffffc;\n      do {\n        temp2 = temp2 << 1;\n        temp10 = temp10 + 4;\n      } while ((r_offset_141 & temp2) == 0);\n    }\n    do {\n      pd_temp2 = &Elf32_Rel_ARRAY_20070000[temp10 + 0x8c].r_info;\n      pd_temp = pd_temp2;\n      temp3 = temp10;\n      do {\n        for (ptr_temp = (undefined *)pd_temp[3]; pd_temp != (dword *)ptr_temp;\n            ptr_temp = *(undefined **)(ptr_temp + 0xc)) {\n          temp5 = *(uint *)(ptr_temp + 4) & 0xfffffffc;\n          temp6 = temp5 - temp9;\n          if (0xf < (int)temp6) {\n            temp1 = *(int *)(ptr_temp + 8);\n            temp8 = *(int *)(ptr_temp + 0xc);\n            ptr_temp2 = ptr_temp + temp9;\n            *(uint *)(ptr_temp + 4) = temp9 | 1;\n            *(int *)(temp1 + 0xc) = temp8;\n            *(int *)(temp8 + 8) = temp1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)ptr_temp2;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)ptr_temp2;\n            *(undefined4 *)(ptr_temp2 + 0xc) = 0x2007046c;\n            *(undefined4 *)(ptr_temp2 + 8) = 0x2007046c;\n            *(uint *)(ptr_temp2 + 4) = temp6 | 1;\n            *(uint *)(ptr_temp2 + temp6) = temp6;\n            FUNC_0008259c(output_ptr);\n            return (int *)(ptr_temp + 8);\n          }\n          if (-1 < (int)temp6) {\n            temp8 = *(int *)(ptr_temp + 8);\n            temp1 = *(int *)(ptr_temp + 0xc);\n            *(uint *)(ptr_temp + temp5 + 4) = *(uint *)(ptr_temp + temp5 + 4) | 1;\n            *(int *)(temp8 + 0xc) = temp1;\n            *(int *)(temp1 + 8) = temp8;\n            FUNC_0008259c(output_ptr);\n            return (int *)(ptr_temp + 8);\n          }\n        }\n        temp3 = temp3 + 1;\n        pd_temp = pd_temp + 2;\n      } while ((temp3 & 3) != 0);\n      do {\n        temp5 = temp10 & 3;\n        ptr_temp = (undefined *)(pd_temp2 + -2);\n        temp10 = temp10 - 1;\n        if (temp5 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp2;\n          break;\n        }\n        pd_temp2 = (dword *)*pd_temp2;\n      } while (pd_temp2 == (dword *)ptr_temp);\n      temp2 = temp2 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp2 &&\n           temp2 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp10 = temp3, temp2 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp2) == 0; temp2 = temp2 << 1) {\n        temp10 = temp10 + 4;\n      }\n    } while( true );\n  }\n  temp10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((temp9 <= temp10) &&\n     (temp2 = temp10 - temp9, r_offset_141 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp2))\n  goto LAB_0008211e;\n  temp2 = Elf32_Rel_ARRAY_20070000[141].r_info + temp10;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp3 = temp9 + DAT_20071190 + 0x10;\n  }\n  else {\n    temp3 = temp9 + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  r_offset_141 = FUN_00082970(output_ptr,temp3);\n  if ((r_offset_141 == 0xffffffff) || ((r_offset_141 < temp2 && (r_info_142 != 0x20070464)))) {\n    temp10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    r_offset_141 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp5 = DAT_20071194 + temp3;\n    DAT_20071194 = temp5;\n    if ((temp2 == r_offset_141) && ((temp2 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 + temp10 | 1;\n    }\n    else {\n      r_offset_temp = r_offset_141;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        r_offset_temp = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = temp5 + (r_offset_141 - temp2);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = r_offset_temp;\n      temp2 = r_offset_141 & 7;\n      if (temp2 == 0) {\n        temp8 = 0x1000;\n      }\n      else {\n        r_offset_141 = r_offset_141 + (8 - temp2);\n        temp8 = 0x1008 - temp2;\n      }\n      temp8 = temp8 - (temp3 + r_offset_141 & 0xfff);\n      temp1 = FUN_00082970(output_ptr,temp8);\n      if (temp1 == -1) {\n        temp2 = 1;\n        temp8 = 0;\n      }\n      else {\n        temp2 = (temp1 - r_offset_141) + temp8 | 1;\n      }\n      temp5 = DAT_20071194 + temp8;\n      Elf32_Rel_ARRAY_20070000[141].r_info = r_offset_141;\n      DAT_20071194 = temp5;\n      *(uint *)(r_offset_141 + 4) = temp2;\n      if (r_info_142 != 0x20070464) {\n        if (temp10 < 0x10) {\n          *(undefined4 *)(r_offset_141 + 4) = 1;\n          temp10 = 0;\n          goto LAB_00082108;\n        }\n        temp10 = temp10 - 0xc & 0xfffffff8;\n        *(uint *)(r_info_142 + 4) = temp10 | *(uint *)(r_info_142 + 4) & 1;\n        *(undefined4 *)(r_info_142 + temp10 + 4) = 5;\n        *(undefined4 *)(r_info_142 + temp10 + 8) = 5;\n        if (0xf < temp10) {\n          FUN_00083d9c(output_ptr,r_info_142 + 8);\n          temp5 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temp5) {\n      DAT_2007118c = temp5;\n    }\n    if (DAT_20071188 < temp5) {\n      DAT_20071188 = temp5;\n    }\n    temp10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    r_offset_141 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  temp2 = temp10 - temp9;\n  if ((temp10 < temp9) || ((int)temp2 < 0x10)) {\n    FUNC_0008259c(output_ptr);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = temp9 + r_offset_141;\n  *(uint *)(r_offset_141 + 4) = temp9 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp2 | 1;\n  FUNC_0008259c(output_ptr);\n  return (int *)(r_offset_141 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_and_initialize_memory_block_00081e14",
                "param_1": "output_ptr",
                "param_2": "size",
                "dVar1": "r_info_142",
                "iVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "iVar5": "temp4",
                "uVar6": "temp5",
                "dVar7": "r_offset_141",
                "uVar8": "temp6",
                "iVar9": "temp7",
                "puVar10": "ptr_temp",
                "dVar11": "r_offset_temp",
                "dVar12": "r_offset_temp2",
                "iVar13": "temp8",
                "pdVar14": "pd_temp",
                "uVar15": "temp9",
                "puVar16": "ptr_temp2",
                "pdVar17": "pd_temp2",
                "uVar18": "temp10"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destStart;\n  undefined4 *srcStart;\n  uint remainingLength;\n  uint copyLength;\n  bool isRemaining;\n  \n  destStart = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      copyLength = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          srcStart = destStart;\n          isRemaining = copyLength != 0;\n          copyLength = copyLength - 1;\n          *(undefined *)srcStart = *(undefined *)destPtr;\n          destStart = (undefined4 *)((int)srcStart + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isRemaining);\n        *(undefined *)(undefined4 *)((int)srcStart + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcStart + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcStart + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copyLength = 4 - ((uint)destination & 3);\n      length = length - copyLength;\n      destPtr = destination;\n      srcStart = source;\n      if (((uint)destination & 1) != 0) {\n        srcStart = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destStart = destPtr;\n      source = srcStart;\n      if ((copyLength & 2) != 0) {\n        source = (undefined4 *)((int)srcStart + 2);\n        destStart = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcStart;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *destStart = *source;\n    destStart[1] = source[1];\n    destStart[2] = source[2];\n    destStart[3] = source[3];\n    destStart[4] = source[4];\n    destStart[5] = source[5];\n    destStart[6] = source[6];\n    destStart[7] = source[7];\n    destStart[8] = source[8];\n    destStart[9] = source[9];\n    destStart[10] = source[10];\n    destStart[0xb] = source[0xb];\n    destStart[0xc] = source[0xc];\n    destStart[0xd] = source[0xd];\n    destStart[0xe] = source[0xe];\n    destStart[0xf] = source[0xf];\n    destStart = destStart + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *destStart = *source;\n      destStart[1] = source[1];\n      destStart[2] = source[2];\n      destStart[3] = source[3];\n      destStart = destStart + 4;\n      source = source + 4;\n      isRemaining = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (isRemaining);\n  }\n  copyLength = remainingLength + 0xc;\n  srcStart = destStart;\n  destPtr = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = destPtr + 1;\n      *srcStart = *destPtr;\n      isRemaining = 3 < copyLength;\n      copyLength = copyLength - 4;\n      destStart = srcStart + 1;\n      srcStart = srcStart + 1;\n      destPtr = source;\n    } while (isRemaining);\n  }\nLAB_000823d0:\n  if (copyLength + 4 != 0) {\n    destPtr = destStart;\n    srcStart = source;\n    if ((copyLength & 1) != 0) {\n      srcStart = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destStart + 1);\n      *(undefined *)destStart = *(undefined *)source;\n    }\n    if ((copyLength + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcStart;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "destStart",
                "puVar3": "srcStart",
                "uVar4": "remainingLength",
                "uVar5": "copyLength",
                "bVar6": "isRemaining"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_reverse_array_00082438",
            "code": "\nvoid copyReverseArray_00082438(undefined4 *sourceArray,undefined4 *destinationArray,uint arrayLength)\n\n{\n  int index;\n  undefined4 *sourcePtr;\n  undefined4 *destinationPtr;\n  undefined4 *tempPtr;\n  uint tempValue;\n  undefined *tempBytePtr;\n  uint remainingBytes;\n  \n  if ((destinationArray < sourceArray) && (tempPtr = (undefined4 *)((int)destinationArray + arrayLength), sourceArray < tempPtr)) {\n    tempBytePtr = (undefined *)((int)sourceArray + arrayLength);\n    index = arrayLength - 1;\n    if (arrayLength != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        index = index + -1;\n        tempBytePtr = tempBytePtr + -1;\n        *tempBytePtr = *(undefined *)tempPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (arrayLength < 0x10) {\n    if (arrayLength == 0) {\n      return;\n    }\n  }\n  else if ((((uint)sourceArray | (uint)destinationArray) & 3) == 0) {\n    tempPtr = sourceArray;\n    destinationPtr = destinationArray;\n    do {\n      sourcePtr = tempPtr + 4;\n      *tempPtr = *destinationPtr;\n      tempPtr[1] = destinationPtr[1];\n      tempPtr[2] = destinationPtr[2];\n      tempPtr[3] = destinationPtr[3];\n      tempPtr = sourcePtr;\n      destinationPtr = destinationPtr + 4;\n    } while (sourcePtr != (undefined4 *)((int)sourceArray + (arrayLength - 0x10 & 0xfffffff0) + 0x10));\n    index = (arrayLength - 0x10 >> 4) + 1;\n    remainingBytes = arrayLength & 0xf;\n    destinationArray = destinationArray + index * 4;\n    sourceArray = sourceArray + index * 4;\n    tempValue = remainingBytes;\n    tempPtr = sourceArray;\n    destinationPtr = destinationArray;\n    if (3 < remainingBytes) {\n      do {\n        tempValue = tempValue - 4;\n        *tempPtr = *destinationPtr;\n        tempPtr = tempPtr + 1;\n        destinationPtr = destinationPtr + 1;\n      } while (3 < tempValue);\n      index = (remainingBytes - 4 & 0xfffffffc) + 4;\n      sourceArray = (undefined4 *)((int)sourceArray + index);\n      destinationArray = (undefined4 *)((int)destinationArray + index);\n      remainingBytes = arrayLength & 3;\n    }\n    arrayLength = remainingBytes;\n    if (arrayLength == 0) {\n      return;\n    }\n  }\n  tempPtr = sourceArray;\n  do {\n    destinationPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)destinationArray;\n    destinationArray = (undefined4 *)((int)destinationArray + 1);\n    tempPtr = destinationPtr;\n  } while (destinationPtr != (undefined4 *)(arrayLength + (int)sourceArray));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_reverse_array_00082438",
                "param_1": "sourceArray",
                "param_2": "destinationArray",
                "param_3": "arrayLength",
                "iVar1": "index",
                "puVar2": "sourcePtr",
                "puVar3": "destinationPtr",
                "puVar4": "tempPtr",
                "uVar5": "tempValue",
                "puVar6": "tempBytePtr",
                "uVar7": "remainingBytes"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "initialize_memory_00082504",
            "code": "\nvoid initializeMemory_00082504(undefined4 *memory,undefined value,uint size)\n\n{\n  undefined4 *currentAddress;\n  undefined4 *nextAddress;\n  undefined4 pattern;\n  uint remainingSize;\n  bool isSizeZero;\n  \n  if (((uint)memory & 3) != 0) {\n    isSizeZero = size == 0;\n    currentAddress = memory;\n    size = size - 1;\n    if (isSizeZero) {\n      return;\n    }\n    while( true ) {\n      memory = (undefined4 *)((int)currentAddress + 1);\n      *(undefined *)currentAddress = value;\n      if (((uint)memory & 3) == 0) break;\n      isSizeZero = size == 0;\n      currentAddress = memory;\n      size = size - 1;\n      if (isSizeZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingSize = size;\n    currentAddress = memory;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *currentAddress = pattern;\n        currentAddress[1] = pattern;\n        currentAddress[2] = pattern;\n        currentAddress[3] = pattern;\n        currentAddress = currentAddress + 4;\n      } while (currentAddress != (undefined4 *)((int)memory + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      memory = memory + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      currentAddress = memory;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *memory = pattern;\n      memory = memory + 1;\n    } while (3 < size);\n    memory = (undefined4 *)((int)currentAddress + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    currentAddress = memory;\n    do {\n      nextAddress = (undefined4 *)((int)currentAddress + 1);\n      *(undefined *)currentAddress = value;\n      currentAddress = nextAddress;\n    } while (nextAddress != (undefined4 *)(size + (int)memory));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "initialize_memory_00082504",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "currentAddress",
                "puVar2": "nextAddress",
                "uVar3": "pattern",
                "uVar4": "remainingSize",
                "bVar5": "isSizeZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "process_relocation_entry_000825a0",
            "code": "\nvoid processRelocationEntry_000825a0(undefined4 targetAddress,undefined4 param2)\n\n{\n  FUN_000825b0(relocationTable[140].offset,targetAddress,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "process_relocation_entry_000825a0",
                "param_1": "targetAddress",
                "param_2": "param2",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_memory_000825b0",
            "code": "\nint * allocate_memory_000825b0(undefined4 *output_buffer,int *existing_buffer,uint buffer_size)\n\n{\n  dword temp;\n  int *result;\n  uint temp2;\n  int temp3;\n  uint size;\n  int temp4;\n  int *temp_buffer;\n  uint adjusted_size;\n  uint aligned_size;\n  int *new_buffer;\n  \n  if (existing_buffer == (int *)0x0) {\n    result = (int *)FUN_00081e14(output_buffer,buffer_size);\n    return result;\n  }\n  FUNC_00082598();\n  size = existing_buffer[-1];\n  adjusted_size = size & 0xfffffffc;\n  result = existing_buffer + -2;\n  if (buffer_size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = buffer_size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < buffer_size) {\nLAB_0008267c:\n    *output_buffer = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjusted_size < (int)aligned_size) {\n    temp = (int)result + adjusted_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp) {\n      temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + adjusted_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)result + aligned_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + adjusted_size) - aligned_size | 1;\n        existing_buffer[-1] = aligned_size | existing_buffer[-1] & 1U;\n        FUNC_0008259c(output_buffer);\n        return existing_buffer;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp + 4) & 0xfffffffe) + temp + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + adjusted_size)) {\n        temp4 = *(int *)(temp + 0xc);\n        temp3 = *(int *)(temp + 8);\n        *(int *)(temp3 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp3;\n        adjusted_size = temp2 + adjusted_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp = 0;\n    }\n    if (-1 < (int)(size << 0x1f)) {\n      new_buffer = (int *)((int)result - existing_buffer[-2]);\n      size = (new_buffer[1] & 0xfffffffcU) + adjusted_size;\n      if (temp != 0) {\n        if (temp == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + size)) {\n            result = new_buffer + 2;\n            temp3 = *result;\n            temp4 = new_buffer[3];\n            adjusted_size = adjusted_size - 4;\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            if (adjusted_size < 0x25) {\n              temp_buffer = result;\n              if (0x13 < adjusted_size) {\n                new_buffer[2] = *existing_buffer;\n                new_buffer[3] = existing_buffer[1];\n                if (adjusted_size < 0x1c) {\n                  existing_buffer = existing_buffer + 2;\n                  temp_buffer = new_buffer + 4;\n                }\n                else {\n                  new_buffer[4] = existing_buffer[2];\n                  new_buffer[5] = existing_buffer[3];\n                  if (adjusted_size == 0x24) {\n                    new_buffer[6] = existing_buffer[4];\n                    temp_buffer = existing_buffer + 5;\n                    existing_buffer = existing_buffer + 6;\n                    new_buffer[7] = *temp_buffer;\n                    temp_buffer = new_buffer + 8;\n                  }\n                  else {\n                    existing_buffer = existing_buffer + 4;\n                    temp_buffer = new_buffer + 6;\n                  }\n                }\n              }\n              *temp_buffer = *existing_buffer;\n              temp_buffer[1] = existing_buffer[1];\n              temp_buffer[2] = existing_buffer[2];\n            }\n            else {\n              FUN_00082438(result,existing_buffer);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_buffer + aligned_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + size) - aligned_size | 1;\n            new_buffer[1] = aligned_size | new_buffer[1] & 1U;\n            FUNC_0008259c(output_buffer);\n            return result;\n          }\n        }\n        else {\n          temp2 = temp2 + size;\n          if ((int)aligned_size <= (int)temp2) {\n            temp4 = *(int *)(temp + 0xc);\n            temp3 = *(int *)(temp + 8);\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            temp_buffer = new_buffer + 2;\n            temp3 = *temp_buffer;\n            temp4 = new_buffer[3];\n            size = adjusted_size - 4;\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            adjusted_size = temp2;\n            if (size < 0x25) {\n              result = temp_buffer;\n              if (0x13 < size) {\n                new_buffer[2] = *existing_buffer;\n                new_buffer[3] = existing_buffer[1];\n                if (size < 0x1c) {\n                  existing_buffer = existing_buffer + 2;\n                  result = new_buffer + 4;\n                }\n                else {\n                  new_buffer[4] = existing_buffer[2];\n                  new_buffer[5] = existing_buffer[3];\n                  if (size == 0x24) {\n                    new_buffer[6] = existing_buffer[4];\n                    result = existing_buffer + 5;\n                    existing_buffer = existing_buffer + 6;\n                    new_buffer[7] = *result;\n                    result = new_buffer + 8;\n                  }\n                  else {\n                    existing_buffer = existing_buffer + 4;\n                    result = new_buffer + 6;\n                  }\n                }\n              }\n              *result = *existing_buffer;\n              result[1] = existing_buffer[1];\n              result[2] = existing_buffer[2];\n              size = new_buffer[1];\n              result = new_buffer;\n              existing_buffer = temp_buffer;\n            }\n            else {\n              FUN_00082438(temp_buffer,existing_buffer);\n              size = new_buffer[1];\n              result = new_buffer;\n              existing_buffer = temp_buffer;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)size) {\n        temp_buffer = new_buffer + 2;\n        temp3 = *temp_buffer;\n        temp4 = new_buffer[3];\n        temp2 = adjusted_size - 4;\n        *(int *)(temp3 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp3;\n        adjusted_size = size;\n        if (temp2 < 0x25) {\n          result = temp_buffer;\n          if (0x13 < temp2) {\n            new_buffer[2] = *existing_buffer;\n            new_buffer[3] = existing_buffer[1];\n            if (temp2 < 0x1c) {\n              existing_buffer = existing_buffer + 2;\n              result = new_buffer + 4;\n            }\n            else {\n              new_buffer[4] = existing_buffer[2];\n              new_buffer[5] = existing_buffer[3];\n              if (temp2 == 0x24) {\n                new_buffer[6] = existing_buffer[4];\n                result = existing_buffer + 5;\n                existing_buffer = existing_buffer + 6;\n                new_buffer[7] = *result;\n                result = new_buffer + 8;\n              }\n              else {\n                existing_buffer = existing_buffer + 4;\n                result = new_buffer + 6;\n              }\n            }\n          }\n          *result = *existing_buffer;\n          result[1] = existing_buffer[1];\n          result[2] = existing_buffer[2];\n          size = new_buffer[1];\n          result = new_buffer;\n          existing_buffer = temp_buffer;\n        }\n        else {\n          FUN_00082438(temp_buffer,existing_buffer);\n          size = new_buffer[1];\n          result = new_buffer;\n          existing_buffer = temp_buffer;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    new_buffer = (int *)FUN_00081e14(output_buffer,buffer_size);\n    if (new_buffer == (int *)0x0) goto LAB_000826a4;\n    size = existing_buffer[-1];\n    if (new_buffer + -2 != (int *)((size & 0xfffffffe) + (int)result)) {\n      adjusted_size = adjusted_size - 4;\n      if (adjusted_size < 0x25) {\n        result = existing_buffer;\n        temp_buffer = new_buffer;\n        if (0x13 < adjusted_size) {\n          *new_buffer = *existing_buffer;\n          new_buffer[1] = existing_buffer[1];\n          if (adjusted_size < 0x1c) {\n            result = existing_buffer + 2;\n            temp_buffer = new_buffer + 2;\n          }\n          else {\n            new_buffer[2] = existing_buffer[2];\n            new_buffer[3] = existing_buffer[3];\n            if (adjusted_size == 0x24) {\n              new_buffer[4] = existing_buffer[4];\n              new_buffer[5] = existing_buffer[5];\n              result = existing_buffer + 6;\n              temp_buffer = new_buffer + 6;\n            }\n            else {\n              result = existing_buffer + 4;\n              temp_buffer = new_buffer + 4;\n            }\n          }\n        }\n        *temp_buffer = *result;\n        temp_buffer[1] = result[1];\n        temp_buffer[2] = result[2];\n      }\n      else {\n        FUN_00082438(new_buffer,existing_buffer);\n      }\n      FUN_00083d9c(output_buffer,existing_buffer);\n      goto LAB_000826a4;\n    }\n    adjusted_size = adjusted_size + (new_buffer[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = adjusted_size - aligned_size;\n  new_buffer = existing_buffer;\n  if (temp2 < 0x10) {\n    result[1] = size & 1 | adjusted_size;\n    *(uint *)((int)result + adjusted_size + 4) = *(uint *)((int)result + adjusted_size + 4) | 1;\n  }\n  else {\n    result[1] = size & 1 | aligned_size;\n    *(uint *)((int)result + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)result + temp2 + aligned_size + 4) = *(uint *)((int)result + temp2 + aligned_size + 4) | 1;\n    FUN_00083d9c(output_buffer,(int)result + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(output_buffer);\n  return new_buffer;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_memory_000825b0",
                "param_1": "output_buffer",
                "param_2": "existing_buffer",
                "param_3": "buffer_size",
                "dVar1": "temp",
                "piVar2": "result",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "size",
                "iVar6": "temp4",
                "piVar7": "temp_buffer",
                "uVar8": "adjusted_size",
                "uVar9": "aligned_size",
                "piVar10": "new_buffer"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "find_data_in_array_00082970",
            "code": "\nvoid findDataInArray_00082970(int *result,undefined4 valueToFind)\n\n{\n  int index;\n  \n  DAT_200711bc = 0;\n  index = FUN_0008118c(valueToFind);\n  if ((index == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "find_data_in_array_00082970",
                "param_1": "result",
                "param_2": "valueToFind",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copyString_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextShort;\n  uint *nextPointer;\n  uint current;\n  uint temp;\n  uint *destPointer;\n  bool isZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextPointer = source;\n    if (((uint)source & 1) != 0) {\n      nextPointer = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextPointer;\n    if (((uint)nextPointer & 2) != 0) {\n      source = (uint *)((int)nextPointer + 2);\n      currentShort = *(ushort *)nextPointer;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  current = *source;\n  nextPointer = source + 1;\n  destPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current + 0xfefefeff & ~current & 0x80808080) != 0) goto LAB_000829f8;\n    destPointer = destination + 1;\n    *destination = current;\n    nextPointer = source + 2;\n    current = source[1];\n  }\n  while( true ) {\n    nextShort = nextPointer + 1;\n    temp = *nextPointer;\n    destination = destPointer;\n    if ((current + 0xfefefeff & ~current & 0x80808080) != 0) break;\n    destination = destPointer + 1;\n    *destPointer = current;\n    current = temp;\n    if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n    nextPointer = nextPointer + 2;\n    current = *nextShort;\n    destPointer = destPointer + 2;\n    *destination = temp;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)current;\n    temp = current & 0xff;\n    current = current >> 8 | current << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (temp != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextShort",
                "puVar4": "nextPointer",
                "uVar5": "current",
                "uVar6": "temp",
                "puVar7": "destPointer",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint value)\n\n{\n  int leadingZeros;\n  uint *ptrValue;\n  uint dataValue;\n  bool isZero;\n  \n  ptrValue = (uint *)(value & 0xfffffffc);\n  leadingZeros = -(value & 3);\n  dataValue = *ptrValue;\n  if ((value & 3) != 0) {\n    dataValue = dataValue | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptrValue = ptrValue + 1, (dataValue + 0xfefefeff & ~dataValue & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    dataValue = *ptrValue;\n  }\n  isZero = (dataValue & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (dataValue & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (dataValue & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "value",
                "iVar1": "leadingZeros",
                "puVar2": "ptrValue",
                "uVar3": "dataValue",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 input,int value,int **ptrArray)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr2;\n  uint counter1;\n  undefined4 *ptr3;\n  uint temp1;\n  uint temp2;\n  \n  if (-1 < *(int *)(value + 100) << 0x12) {\n    result = FUN_00083f34();\n    ptrArray[2] = (int *)0x0;\n    ptrArray[1] = (int *)0x0;\n    return result;\n  }\n  ptr2 = ptrArray[2];\n  ptr1 = *ptrArray;\n  while (ptr2 != (int *)0x0) {\n    temp1 = ptr1[1];\n    temp2 = temp1 >> 2;\n    if (temp2 != 0) {\n      ptr3 = (undefined4 *)(*ptr1 + -4);\n      counter1 = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        result = FUN_00083c40(input,*ptr3,value);\n        counter1 = counter1 + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (temp2 != counter1);\n      ptr2 = ptrArray[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (temp1 & 0xfffffffc));\n    ptrArray[2] = ptr2;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  ptrArray[2] = (int *)0x0;\n  ptrArray[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "input",
                "param_2": "value",
                "param_3": "ptrArray",
                "piVar1": "ptr1",
                "iVar2": "result",
                "piVar3": "ptr2",
                "uVar4": "counter1",
                "puVar5": "ptr3",
                "uVar6": "temp1",
                "uVar7": "temp2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "convert_int_to_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint convertIntToString_00082b38(int inputValue,int outputValue,int *******formatString,int **arguments)\n\n{\n  bool isPositive;\n  bool isLong;\n  bool isPrintableChar;\n  char signChar;\n  bool isZeroPadded;\n  int ********pargPointerArray;\n  int *intValue;\n  int result;\n  char paddingChar;\n  int *******formatIndex;\n  uint digit;\n  int **argumentsPointer;\n  uint formatFlags;\n  uint charValue;\n  int tempResult;\n  int ********pcurrentArgPointer;\n  int argIndex;\n  int *******remainingFormatString;\n  int *argValue;\n  int *******nextArgPointer;\n  uint tempVariable;\n  int *secondArgValue;\n  int *******remainingFormatString;\n  undefined4 uVar24;\n  int ********digitArrayPointer;\n  bool isNegative;\n  longlong combinedValue;\n  int *******maxArgLength;\n  int *******remainingArgLength;\n  int **currentArgValue;\n  int totalLength;\n  char *digitCharacters;\n  char signCharacter;\n  undefined paddingCharacter;\n  undefined flagCharacter;\n  int ********argPointerArray;\n  int numArgs;\n  int *******argPointerArray;\n  undefined tempChar;\n  char tempChar;\n  undefined tempChar2;\n  undefined argPointerArray [4];\n  int *******argPointerArray [16];\n  \n  if ((inputValue != 0) && (*(int *)(inputValue + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  formatFlags = (uint)*(ushort *)(outputValue + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(outputValue + 0xc) << 0x12)) {\n    formatFlags = formatFlags | 0x2000;\n    *(short *)(outputValue + 0xc) = (short)formatFlags;\n    *(uint *)(outputValue + 100) = *(uint *)(outputValue + 100) & 0xffffdfff;\n  }\n  if (((int)(formatFlags << 0x1c) < 0) && (*(int *)(outputValue + 0x10) != 0)) {\n    if ((formatFlags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(inputValue,outputValue);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(outputValue + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(outputValue + 0xe)) {\n    result = FUN_0008378c(inputValue,outputValue,formatString,arguments);\n    return result;\n  }\nLAB_00082b8a:\n  digitCharacters = (char *)0x0;\n  argPointerArray = (int *******)0x0;\n  numArgs = 0;\n  totalLength = 0;\n  pargPointerArray = (int ********)argPointerArray;\n  currentArgValue = arguments;\n  argPointerArray = (int ********)argPointerArray;\nLAB_00082b9e:\n  formatIndex = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      formatIndex = (int *******)((int)formatIndex + 1);\n      if (*(char *)formatIndex == '\\0') break;\n    } while (*(char *)formatIndex != '%');\n    nextArgPointer = (int *******)((int)formatIndex - (int)formatString);\n    if (nextArgPointer != (int *******)0x0) {\n      numArgs = numArgs + 1;\n      argPointerArray = (int *******)((int)argPointerArray + (int)nextArgPointer);\n      *pargPointerArray = formatString;\n      pargPointerArray[1] = nextArgPointer;\n      if (numArgs < 8) {\n        pargPointerArray = pargPointerArray + 2;\n      }\n      else {\n        if (argPointerArray == (int *******)0x0) {\n          totalLength = totalLength + (int)nextArgPointer;\n          numArgs = 0;\n          pargPointerArray = (int ********)argPointerArray;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n        pargPointerArray = (int ********)argPointerArray;\n        if (result != 0) goto LAB_000833de;\n      }\n      totalLength = totalLength + (int)nextArgPointer;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)formatIndex != '\\0') {\n    signCharacter = '\\0';\n    charValue = (uint)*(byte *)((int)formatIndex + 1);\n    formatFlags = 0;\n    isZeroPadded = false;\n    isLong = false;\n    isPositive = false;\n    isPrintableChar = false;\n    isNegative = false;\n    nextArgPointer = (int *******)0x0;\n    remainingArgLength = (int *******)0xffffffff;\n    formatString = (int *******)((int)formatIndex + 1);\nLAB_00082c12:\n    formatString = (int *******)((int)formatString + 1);\nLAB_00082c16:\n    switch(charValue) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (charValue != 0) {\n        maxArgLength = (int *******)0x1;\n        remainingArgLength = (int *******)0x1;\n        digitArrayPointer = (int ********)&tempChar;\n        tempChar = (char)charValue;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      isPrintableChar = true;\n      charValue = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2a:\n      nextArgPointer = (int *******)*currentArgValue;\n      currentArgValue = currentArgValue + 1;\n      if ((int)nextArgPointer < 0) {\n        nextArgPointer = (int *******)-(int)nextArgPointer;\n        goto switchD_00082c20_caseD_2d;\n      }\n      charValue = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2b:\n      charValue = (uint)*(byte *)formatString;\n      signCharacter = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      formatFlags = formatFlags | 4;\n      charValue = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x2e:\n      charValue = (uint)*(byte *)formatString;\n      formatIndex = (int *******)((int)formatString + 1);\n      if (charValue == 0x2a) {\n        charValue = (uint)*(byte *)((int)formatString + 1);\n        remainingArgLength = (int *******)*currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        formatString = formatIndex;\n        if ((int)remainingArgLength < 0) {\n          remainingArgLength = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = charValue - 0x30;\n      if (digit < 10) {\n        tempVariable = 0;\n        do {\n          formatString = (int *******)((int)formatIndex + 1);\n          charValue = (uint)*(byte *)formatIndex;\n          tempVariable = digit + tempVariable * 10;\n          digit = charValue - 0x30;\n          formatIndex = formatString;\n        } while (digit < 10);\n        remainingArgLength = (int *******)(tempVariable | (int)tempVariable >> 0x1f);\n      }\n      else {\n        remainingArgLength = (int *******)0x0;\n        formatString = formatIndex;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      formatFlags = formatFlags | 0x80;\n      charValue = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isLong = true;\n      if (isPositive == false) goto LAB_00083028;\nLAB_00082e98:\n      currentArgValue = (int **)((int)currentArgValue + 7U & 0xfffffff8);\n      argValue = *currentArgValue;\n      secondArgValue = currentArgValue[1];\n      currentArgValue = currentArgValue + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isLong = true;\n      if (isPositive != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)isLong << 4;\n      tempResult = (uint)isPositive << 5;\n      if ((isLong == 0) && (tempResult = (uint)isNegative << 6, isNegative != 0)) {\n        argValue = (int *)(uint)*(ushort *)currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        secondArgValue = (int *)0x0;\n      }\n      else {\n        result = tempResult;\n        argValue = *currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        secondArgValue = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isLong = true;\n      if (isPositive != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isLong) || (isNegative == false)) {\n        result = 1;\n        argValue = *currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        secondArgValue = (int *)0x0;\n      }\n      else {\n        secondArgValue = (int *)0x0;\n        argValue = (int *)(uint)*(ushort *)currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      digitCharacters = \"0123456789ABCDEF\";\n      if (isPositive == false) goto LAB_00083196;\nLAB_00082fb6:\n      argumentsPointer = (int **)((int)currentArgValue + 7U & 0xfffffff8);\n      currentArgValue = argumentsPointer + 2;\n      argValue = *argumentsPointer;\n      secondArgValue = argumentsPointer[1];\n      goto LAB_00082fca;\n    case 99:\n      argValue = *currentArgValue;\n      currentArgValue = currentArgValue + 1;\n      maxArgLength = (int *******)0x1;\n      tempChar = SUB41(argValue,0);\n      remainingArgLength = (int *******)0x1;\n      digitArrayPointer = (int ********)&tempChar;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isPositive != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isLong == false) && (isNegative != false)) {\n        argValue = (int *)(int)*(short *)currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        secondArgValue = (int *)((int)argValue >> 0x1f);\n      }\n      else {\n        argValue = *currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        secondArgValue = (int *)((int)argValue >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)secondArgValue < 0) {\n        isNegative = argValue != (int *)0x0;\n        argValue = (int *)-(int)argValue;\n        secondArgValue = (int *)(-(int)secondArgValue - (uint)isNegative);\n        signCharacter = '-';\n        signChar = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)remainingArgLength) {\n        formatFlags = formatFlags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      charValue = (uint)argValue | (uint)secondArgValue;\n      result = 1;\n      signChar = signCharacter;\n      goto joined_r0x00082d78;\n    case 0x68:\n      isNegative = true;\n      charValue = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x6c:\n      charValue = (uint)*(byte *)formatString;\n      if (charValue == 0x6c) {\n        isPositive = true;\n        charValue = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        isLong = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isPositive == false) {\n        if (isLong == false) {\n          if (isNegative) {\n            argValue = *currentArgValue;\n            currentArgValue = currentArgValue + 1;\n            *(short *)argValue = (short)totalLength;\n          }\n          else {\n            argValue = *currentArgValue;\n            currentArgValue = currentArgValue + 1;\n            *argValue = totalLength;\n          }\n        }\n        else {\n          argValue = *currentArgValue;\n          currentArgValue = currentArgValue + 1;\n          *argValue = totalLength;\n        }\n      }\n      else {\n        argValue = *currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        *argValue = totalLength;\n        argValue[1] = totalLength >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isPositive == false) goto LAB_00082f2a;\nLAB_00082d42:\n      argumentsPointer = (int **)((int)currentArgValue + 7U & 0xfffffff8);\n      currentArgValue = argumentsPointer + 2;\n      argValue = *argumentsPointer;\n      secondArgValue = argumentsPointer[1];\n      result = 0;\n      break;\n    case 0x70:\n      argValue = *currentArgValue;\n      currentArgValue = currentArgValue + 1;\n      flagCharacter = 0x78;\n      isZeroPadded = true;\n      secondArgValue = (int *)0x0;\n      paddingCharacter = 0x30;\n      digitCharacters = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isPositive = true;\n      charValue = (uint)*(byte *)formatString;\n      goto LAB_00082c12;\n    case 0x73:\n      digitArrayPointer = (int ********)*currentArgValue;\n      signCharacter = '\\0';\n      currentArgValue = currentArgValue + 1;\n      if (digitArrayPointer != (int ********)0x0) {\n        if ((int)remainingArgLength < 0) {\n          remainingArgLength = (int *******)FUN_00082a50(digitArrayPointer);\n          formatIndex = (int *******)0x0;\n          signChar = signCharacter;\n        }\n        else {\n          result = FUN_00084384(digitArrayPointer,0,remainingArgLength);\n          signChar = signCharacter;\n          if (result == 0) {\n            formatIndex = (int *******)0x0;\n          }\n          else {\n            remainingFormatString = (int *******)(result - (int)digitArrayPointer);\n            if ((int)remainingArgLength <= (int)(int *******)(result - (int)digitArrayPointer)) {\n              remainingFormatString = remainingArgLength;\n            }\n            formatIndex = (int *******)0x0;\n            remainingArgLength = remainingFormatString;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < remainingArgLength) {\n        remainingArgLength = (int *******)0x6;\n      }\n      maxArgLength = (int *******)((uint)remainingArgLength & ~((int)remainingArgLength >> 0x1f));\n      digitArrayPointer = (int ********)&UNK_00085840;\nLAB_00083012:\n      signCharacter = '\\0';\n      formatIndex = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isPositive) goto LAB_00082f7c;\nLAB_00082e62:\n      argumentsPointer = (int **)((int)currentArgValue + 7U & 0xfffffff8);\n      currentArgValue = argumentsPointer + 2;\n      argValue = *argumentsPointer;\n      secondArgValue = argumentsPointer[1];\n      result = 1;\n      break;\n    case 0x78:\n      digitCharacters = \"0123456789abcdef\";\n      if (isPositive != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isLong == false) && (isNegative != false)) {\n        secondArgValue = (int *)0x0;\n        argValue = (int *)(uint)*(ushort *)currentArgValue;\n        currentArgValue = currentArgValue + 1;\n      }\n      else {\n        argValue = *currentArgValue;\n        currentArgValue = currentArgValue + 1;\n        secondArgValue = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((isPrintableChar) && (((uint)argValue | (uint)secondArgValue) != 0)) {\n        isZeroPadded = true;\n        paddingCharacter = 0x30;\n        result = 2;\n        flagCharacter = (char)charValue;\n      }\n      else {\n        result = 2;\n      }\n    }\n    signCharacter = '\\0';\n    signChar = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)remainingArgLength) {\n      formatFlags = formatFlags & 0xffffff7f;\n    }\n    charValue = (uint)argValue | (uint)secondArgValue;\njoined_r0x00082d78:\n    combinedValue = CONCAT44(secondArgValue,argValue);\n    formatIndex = remainingArgLength;\n    if ((charValue == 0) && (remainingArgLength == (int *******)0x0)) {\n      digitArrayPointer = (int ********)argPointerArray;\n      if ((result != 0) || (!isPrintableChar)) goto LAB_00082da0;\n      digitArrayPointer = (int ********)(&tempChar + 1);\n      tempChar2 = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (secondArgValue != (int *)0x0 || (int *)0x9 < argValue) {\n        pcurrentArgPointer = (int ********)(&tempChar + 1);\n        do {\n          digitArrayPointer = pcurrentArgPointer;\n          uVar24 = (undefined4)((ulonglong)combinedValue >> 0x20);\n          paddingChar = '\\n';\n          FUN_00084750((int)combinedValue,uVar24,10,0);\n          *(char *)digitArrayPointer = paddingChar + '0';\n          combinedValue = FUN_00084750((int)combinedValue,uVar24,10,0);\n          pcurrentArgPointer = (int ********)((int)digitArrayPointer + -1);\n        } while (combinedValue != 0);\n        remainingArgLength = (int *******)((int)argPointerArray - (int)digitArrayPointer);\n        goto LAB_00082da0;\n      }\n      tempChar2 = (char)argValue + '0';\n      digitArrayPointer = (int ********)(&tempChar + 1);\n      goto LAB_0008351e;\n    }\n    pcurrentArgPointer = (int ********)(&tempChar + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      digitArrayPointer = pcurrentArgPointer;\n      charValue = (uint)argValue & 0xf;\n      argValue = (int *)((uint)argValue >> 4 | (int)secondArgValue << 0x1c);\n      secondArgValue = (int *)((uint)secondArgValue >> 4);\n      *(char *)digitArrayPointer = digitCharacters[charValue];\n      pcurrentArgPointer = (int ********)((int)digitArrayPointer + -1);\n    } while (((uint)argValue | (uint)secondArgValue) != 0);\n    remainingArgLength = (int *******)((int)argPointerArray - (int)digitArrayPointer);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (argPointerArray != (int *******)0x0) {\n    FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(outputValue + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalLength;\nLAB_0008337e:\n  do {\n    digitArrayPointer = pcurrentArgPointer;\n    intValue = (int *)((uint)argValue >> 3 | (int)secondArgValue << 0x1d);\n    secondArgValue = (int *)((uint)secondArgValue >> 3);\n    result = ((uint)argValue & 7) + 0x30;\n    *(char *)digitArrayPointer = (char)result;\n    pcurrentArgPointer = (int ********)((int)digitArrayPointer + -1);\n    argValue = intValue;\n  } while (((uint)intValue | (uint)secondArgValue) != 0);\n  if (isPrintableChar) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      remainingArgLength = (int *******)((int)argPointerArray - (int)digitArrayPointer);\n    }\n    else {\n      *(undefined *)((int)digitArrayPointer + -1) = 0x30;\n      digitArrayPointer = pcurrentArgPointer;\n      remainingArgLength = (int *******)((int)argPointerArray - (int)pcurrentArgPointer);\n    }\n  }\n  else {\nLAB_0008351e:\n    remainingArgLength = (int *******)((int)argPointerArray - (int)digitArrayPointer);\n  }\nLAB_00082da0:\n  maxArgLength = remainingArgLength;\n  if ((int)remainingArgLength < (int)formatIndex) {\n    maxArgLength = formatIndex;\n  }\n  if (signChar != '\\0') {\n    maxArgLength = (int *******)((int)maxArgLength + 1);\n  }\nLAB_00082dba:\n  if (isZeroPadded) {\n    maxArgLength = (int *******)((int)maxArgLength + 2);\n  }\n  if ((formatFlags == 0) &&\n     (remainingFormatString = (int *******)((int)nextArgPointer - (int)maxArgLength), 0 < (int)remainingFormatString)) {\n    if ((int)remainingFormatString < 0x11) {\n      numArgs = numArgs + 1;\n    }\n    else {\n      do {\n        remainingFormatString = remainingFormatString;\n        result = numArgs + 1;\n        argPointerArray = argPointerArray + 4;\n        *pargPointerArray = (int *******)0x85808;\n        pargPointerArray[1] = (int *******)0x10;\n        if (result < 8) {\n          tempResult = numArgs + 2;\n          pargPointerArray = pargPointerArray + 2;\n          numArgs = result;\n        }\n        else if (argPointerArray == (int *******)0x0) {\n          tempResult = 1;\n          pargPointerArray = (int ********)argPointerArray;\n          numArgs = 0;\n        }\n        else {\n          numArgs = result;\n          result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n          if (result != 0) goto LAB_000833de;\n          tempResult = numArgs + 1;\n          pargPointerArray = (int ********)argPointerArray;\n        }\n        remainingFormatString = remainingFormatString + -4;\n      } while (0x10 < (int)remainingFormatString);\n      remainingFormatString = remainingFormatString + -4;\n      numArgs = tempResult;\n    }\n    argPointerArray = (int *******)((int)argPointerArray + (int)remainingFormatString);\n    *pargPointerArray = (int *******)0x85808;\n    pargPointerArray[1] = remainingFormatString;\n    if (numArgs < 8) {\n      result = numArgs + 1;\n      pargPointerArray = pargPointerArray + 2;\n    }\n    else if (argPointerArray == (int *******)0x0) {\n      result = 1;\n      numArgs = 0;\n      pargPointerArray = (int ********)argPointerArray;\n    }\n    else {\n      result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n      if (result != 0) goto LAB_000833de;\n      result = numArgs + 1;\n      pargPointerArray = (int ********)argPointerArray;\n    }\n  }\n  else {\n    result = numArgs + 1;\n  }\n  tempResult = result;\n  if (signCharacter != '\\0') {\n    argPointerArray = (int *******)((int)argPointerArray + 1);\n    tempResult = 1;\n    *pargPointerArray = (int *******)&signCharacter;\n    pargPointerArray[1] = (int *******)0x1;\n    numArgs = result;\n    if (result < 8) {\n      tempResult = result + 1;\n      pargPointerArray = pargPointerArray + 2;\n    }\n    else if (argPointerArray == (int *******)0x0) {\n      numArgs = 0;\n      pargPointerArray = (int ********)argPointerArray;\n    }\n    else {\n      result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n      if (result != 0) goto LAB_000833de;\n      tempResult = numArgs + 1;\n      pargPointerArray = (int ********)argPointerArray;\n    }\n  }\n  result = tempResult;\n  argIndex = numArgs;\n  if (isZeroPadded) {\n    argPointerArray = (int *******)((int)argPointerArray + 2);\n    *pargPointerArray = (int *******)&paddingCharacter;\n    pargPointerArray[1] = (int *******)0x2;\n    if (tempResult < 8) {\n      result = tempResult + 1;\n      argIndex = tempResult;\n      pargPointerArray = pargPointerArray + 2;\n    }\n    else if (argPointerArray == (int *******)0x0) {\n      result = 1;\n      argIndex = 0;\n      pargPointerArray = (int ********)argPointerArray;\n    }\n    else {\n      numArgs = tempResult;\n      result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n      if (result != 0) goto LAB_000833de;\n      result = numArgs + 1;\n      argIndex = numArgs;\n      pargPointerArray = (int ********)argPointerArray;\n    }\n  }\n  numArgs = argIndex;\n  if ((formatFlags == 0x80) &&\n     (remainingFormatString = (int *******)((int)nextArgPointer - (int)maxArgLength), 0 < (int)remainingFormatString)) {\n    if (0x10 < (int)remainingFormatString) {\n      do {\n        while( true ) {\n          remainingFormatString = remainingFormatString;\n          numArgs = argIndex + 1;\n          argPointerArray = argPointerArray + 4;\n          *pargPointerArray = (int *******)&DAT_00085848;\n          pargPointerArray[1] = (int *******)0x10;\n          if (7 < numArgs) break;\n          result = argIndex + 2;\n          pargPointerArray = pargPointerArray + 2;\nLAB_0008348e:\n          argIndex = numArgs;\n          remainingFormatString = remainingFormatString + -4;\n          if ((int)(remainingFormatString + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (argPointerArray != (int *******)0x0) {\n          result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n          if (result == 0) {\n            result = numArgs + 1;\n            pargPointerArray = (int ********)argPointerArray;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        argIndex = 0;\n        remainingFormatString = remainingFormatString + -4;\n        pargPointerArray = (int ********)argPointerArray;\n      } while (0x10 < (int)(remainingFormatString + -4));\nLAB_000834b4:\n      remainingFormatString = remainingFormatString + -4;\n    }\n    argPointerArray = (int *******)((int)argPointerArray + (int)remainingFormatString);\n    *pargPointerArray = (int *******)&DAT_00085848;\n    pargPointerArray[1] = remainingFormatString;\n    numArgs = result;\n    if (result < 8) {\n      result = result + 1;\n      pargPointerArray = pargPointerArray + 2;\n    }\n    else if (argPointerArray == (int *******)0x0) {\n      result = 1;\n      numArgs = 0;\n      pargPointerArray = (int ********)argPointerArray;\n    }\n    else {\n      result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n      if (result != 0) goto LAB_000833de;\n      result = numArgs + 1;\n      pargPointerArray = (int ********)argPointerArray;\n    }\n  }\n  formatIndex = (int *******)((int)formatIndex - (int)remainingArgLength);\n  pcurrentArgPointer = (int ********)argPointerArray;\n  if ((int)formatIndex < 1) {\nLAB_000832c6:\n    argPointerArray = (int *******)((int)argPointerArray + (int)remainingArgLength);\n    *pargPointerArray = (int *******)digitArrayPointer;\n    pargPointerArray[1] = remainingArgLength;\n    remainingArgLength = argPointerArray;\n    numArgs = result;\n    if (result < 8) goto LAB_0008345a;\n    if (argPointerArray == (int *******)0x0) {\n      numArgs = 0;\n    }\n    else {\n      result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    tempResult = numArgs;\n    if (0x10 < (int)formatIndex) {\n      do {\n        while( true ) {\n          remainingFormatString = formatIndex;\n          numArgs = tempResult + 1;\n          argPointerArray = argPointerArray + 4;\n          *pargPointerArray = (int *******)&DAT_00085848;\n          pargPointerArray[1] = (int *******)0x10;\n          if (7 < numArgs) break;\n          result = tempResult + 2;\n          pargPointerArray = pargPointerArray + 2;\nLAB_00083282:\n          tempResult = numArgs;\n          formatIndex = remainingFormatString + -4;\n          if ((int)(remainingFormatString + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (argPointerArray != (int *******)0x0) {\n          result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n          if (result == 0) {\n            result = numArgs + 1;\n            pargPointerArray = (int ********)argPointerArray;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        pargPointerArray = (int ********)argPointerArray;\n        tempResult = 0;\n        formatIndex = remainingFormatString + -4;\n      } while (0x10 < (int)(remainingFormatString + -4));\nLAB_000832aa:\n      formatIndex = remainingFormatString + -4;\n    }\n    argPointerArray = (int *******)((int)argPointerArray + (int)formatIndex);\n    *pargPointerArray = (int *******)&DAT_00085848;\n    pargPointerArray[1] = formatIndex;\n    if (result < 8) {\n      result = result + 1;\n      pargPointerArray = pargPointerArray + 2;\n      goto LAB_000832c6;\n    }\n    if (argPointerArray != (int *******)0x0) {\n      numArgs = result;\n      result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n      if (result != 0) goto LAB_000833de;\n      result = numArgs + 1;\n      pargPointerArray = (int ********)argPointerArray;\n      goto LAB_000832c6;\n    }\n    argPointerArray[0] = remainingArgLength;\n    numArgs = 1;\n    pargPointerArray = (int ********)argPointerArray;\n    argPointerArray = (undefined  [4])digitArrayPointer;\nLAB_0008345a:\n    pcurrentArgPointer = pargPointerArray + 2;\n    argPointerArray = remainingArgLength;\n  }\n  if (((formatFlags & 4) != 0) &&\n     (formatIndex = (int *******)((int)nextArgPointer - (int)maxArgLength), 0 < (int)formatIndex)) {\n    result = numArgs;\n    if ((int)formatIndex < 0x11) {\n      tempResult = numArgs + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numArgs = result + 1;\n          argPointerArray = argPointerArray + 4;\n          *pcurrentArgPointer = (int *******)0x85808;\n          pcurrentArgPointer[1] = (int *******)0x10;\n          if (7 < numArgs) break;\n          tempResult = result + 2;\n          pcurrentArgPointer = pcurrentArgPointer + 2;\nLAB_00083316:\n          formatIndex = formatIndex + -4;\n          result = numArgs;\n          if ((int)formatIndex < 0x11) goto LAB_0008333e;\n        }\n        if (argPointerArray != (int *******)0x0) {\n          result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n          if (result == 0) {\n            tempResult = numArgs + 1;\n            pcurrentArgPointer = (int ********)argPointerArray;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        formatIndex = formatIndex + -4;\n        tempResult = 1;\n        result = 0;\n        pcurrentArgPointer = (int ********)argPointerArray;\n      } while (0x10 < (int)formatIndex);\n    }\nLAB_0008333e:\n    argPointerArray = (int *******)((int)argPointerArray + (int)formatIndex);\n    *pcurrentArgPointer = (int *******)0x85808;\n    pcurrentArgPointer[1] = formatIndex;\n    numArgs = tempResult;\n    if (7 < tempResult) {\n      if (argPointerArray == (int *******)0x0) {\n        if ((int)maxArgLength < (int)nextArgPointer) {\n          maxArgLength = nextArgPointer;\n        }\n        totalLength = totalLength + (int)maxArgLength;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(inputValue,outputValue,&argPointerArray);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)maxArgLength < (int)nextArgPointer) {\n    maxArgLength = nextArgPointer;\n  }\n  totalLength = totalLength + (int)maxArgLength;\n  if ((argPointerArray != (int *******)0x0) &&\n     (result = FUN_00082ac0(inputValue,outputValue,&argPointerArray), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  numArgs = 0;\n  pargPointerArray = (int ********)argPointerArray;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = charValue - 0x30;\n  nextArgPointer = (int *******)0x0;\n  formatIndex = formatString;\n  do {\n    formatString = (int *******)((int)formatIndex + 1);\n    charValue = (uint)*(byte *)formatIndex;\n    nextArgPointer = (int *******)(digit + (int)nextArgPointer * 10);\n    digit = charValue - 0x30;\n    formatIndex = formatString;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  charValue = (uint)*(byte *)formatString;\n  if (signCharacter == '\\0') {\n    signCharacter = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "convert_int_to_string_00082b38",
                "param_1": "inputValue",
                "param_2": "outputValue",
                "param_3": "formatString",
                "param_4": "arguments",
                "bVar1": "isPositive",
                "bVar2": "isLong",
                "bVar3": "isPrintableChar",
                "cVar4": "signChar",
                "bVar5": "isZeroPadded",
                "pppppppiVar6": "argPointerArray",
                "piVar7": "intValue",
                "iVar8": "result",
                "cVar9": "paddingChar",
                "pppppppiVar10": "formatIndex",
                "uVar11": "digit",
                "ppiVar12": "argumentsPointer",
                "uVar13": "formatFlags",
                "uVar14": "charValue",
                "iVar15": "tempResult",
                "pppppppiVar16": "currentArgPointer",
                "iVar17": "argIndex",
                "pppppppiVar18": "remainingFormatString",
                "piVar19": "argValue",
                "piVar22": "secondArgValue",
                "pppppppiVar20": "nextArgPointer",
                "uVar21": "tempVariable",
                "pppppppiVar23": "remainingFormatString",
                "ppppppppiVar25": "digitArrayPointer",
                "bVar26": "isNegative",
                "lVar27": "combinedValue",
                "local_dc": "maxArgLength",
                "local_d4": "remainingArgLength",
                "local_c8": "currentArgValue",
                "local_c4": "totalLength",
                "local_c0": "digitCharacters",
                "local_a1": "signCharacter",
                "local_a0": "paddingCharacter",
                "local_9f": "flagCharacter",
                "local_9c": "argPointerArray",
                "local_98": "numArgs",
                "local_94": "argPointerArray",
                "local_90": "tempChar",
                "cStack_6a": "tempChar",
                "local_69": "tempChar2",
                "local_68": "argPointerArray",
                "local_64": "argPointerArray"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint processData_0008378c(undefined4 inputPtr,int binaryPtr)\n\n{\n  int returnValue;\n  int resultValue;\n  undefined *stringArray [2];\n  undefined4 bufferSize;\n  ushort modifiedValue;\n  undefined2 shortValue;\n  undefined *bufferPtr;\n  undefined4 bufferSize1;\n  undefined4 variable_1;\n  undefined4 addressValue1;\n  undefined4 addressValue2;\n  undefined4 addressValue3;\n  undefined stackArray [1024];\n  \n  addressValue3 = *(undefined4 *)(binaryPtr + 100);\n  addressValue1 = *(undefined4 *)(binaryPtr + 0x1c);\n  shortValue = *(undefined2 *)(binaryPtr + 0xe);\n  addressValue2 = *(undefined4 *)(binaryPtr + 0x24);\n  stringArray[0] = stackArray;\n  modifiedValue = *(ushort *)(binaryPtr + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  bufferSize1 = 0x400;\n  variable_1 = 0;\n  bufferPtr = stringArray[0];\n  returnValue = FUN_00082b38(inputPtr,stringArray);\n  if ((-1 < returnValue) && (resultValue = FUN_00083adc(inputPtr,stringArray), resultValue != 0)) {\n    returnValue = -1;\n  }\n  if ((int)((uint)modifiedValue << 0x19) < 0) {\n    *(ushort *)(binaryPtr + 0xc) = *(ushort *)(binaryPtr + 0xc) | 0x40;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "inputPtr",
                "param_2": "binaryPtr",
                "iVar1": "returnValue",
                "iVar2": "resultValue",
                "local_488": "stringArray",
                "local_480": "bufferSize",
                "local_47c": "modifiedValue",
                "local_47a": "shortValue",
                "local_478": "bufferPtr",
                "local_474": "bufferSize1",
                "local_470": "variable_1",
                "local_46c": "addressValue1",
                "local_464": "addressValue2",
                "local_424": "addressValue3",
                "auStack_420": "stackArray"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "decode_and_process_data_00083808",
            "code": "\nundefined4 decode_and_process_data_00083808(undefined4 *output_status,int *input_data)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  temp_var4 = *(ushort *)(input_data + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var2 = input_data[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *output_status = 9;\n      *(ushort *)(input_data + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)input_data[0xc] != (int *)0x0) {\n        if ((int *)input_data[0xc] != input_data + 0x10) {\n          FUN_00083d9c(output_status);\n          temp_var4 = *(ushort *)(input_data + 3);\n        }\n        input_data[0xc] = 0;\n      }\n      temp_var2 = input_data[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *input_data = temp_var2;\n      input_data[1] = 0;\n    }\n    else {\n      temp_var2 = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    FUN_000842a4(output_status,input_data);\n    temp_var3 = (uint)*(ushort *)(input_data + 3);\n    temp_var2 = input_data[4];\n  }\n  if ((temp_var3 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      temp_var1 = input_data[5];\n    }\n    input_data[2] = temp_var1;\n  }\n  else {\n    input_data[6] = -input_data[5];\n    input_data[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0)) {\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "decode_and_process_data_00083808",
                "param_1": "output_status",
                "param_2": "input_data",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identityFunction_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "reverse_data_transfer_00083adc",
            "code": "\nundefined4 reverse_data_transfer_00083adc(int *source_array,int *destination_array)\n\n{\n  int *temp_ptr;\n  int temp_var1;\n  ushort temp_var2;\n  uint temp_var3;\n  int temp_var4;\n  code *callback_function;\n  undefined4 unaffected_var;\n  int temp_var5;\n  \n  if ((source_array != (int *)0x0) && (source_array[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(destination_array + 3) == 0) {\n    return 0;\n  }\n  temp_var2 = *(ushort *)(destination_array + 3);\n  if ((int)((uint)temp_var2 << 0x1c) < 0) {\n    temp_var5 = destination_array[4];\n    if (temp_var5 == 0) {\n      return 0;\n    }\n    temp_var1 = *destination_array;\n    if ((temp_var2 & 3) == 0) {\n      temp_var4 = destination_array[5];\n    }\n    else {\n      temp_var4 = 0;\n    }\n    *destination_array = temp_var5;\n    temp_var1 = temp_var1 - temp_var5;\n    destination_array[2] = temp_var4;\n    do {\n      if (temp_var1 < 1) {\n        return 0;\n      }\n      temp_var4 = (*(code *)destination_array[9])(source_array,destination_array[7],temp_var5,temp_var1,unaffected_var);\n      temp_var1 = temp_var1 - temp_var4;\n      temp_var5 = temp_var5 + temp_var4;\n    } while (0 < temp_var4);\nLAB_00083a54:\n    *(ushort *)(destination_array + 3) = *(ushort *)(destination_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(destination_array + 3) = temp_var2 | 0x800;\n  if ((destination_array[1] < 1) && (destination_array[0xf] < 1)) {\n    return 0;\n  }\n  callback_function = (code *)destination_array[10];\n  if (callback_function == (code *)0x0) {\n    return 0;\n  }\n  temp_var3 = (uint)(temp_var2 | 0x800);\n  temp_var5 = *source_array;\n  *source_array = 0;\n  if ((temp_var2 & 0x1000) == 0) {\n    temp_var1 = (*callback_function)(source_array,destination_array[7],temp_var3 & 0x1000,1);\n    if ((temp_var1 == -1) && (temp_var4 = *source_array, temp_var4 != 0)) {\n      if ((temp_var4 == 0x1d) || (temp_var4 == 0x16)) {\n        *source_array = temp_var5;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp_var3 = (uint)*(ushort *)(destination_array + 3);\n    callback_function = (code *)destination_array[10];\n  }\n  else {\n    temp_var1 = destination_array[0x14];\n  }\n  if (((int)(temp_var3 << 0x1d) < 0) && (temp_var1 = temp_var1 - destination_array[1], destination_array[0xc] != 0)) {\n    temp_var1 = temp_var1 - destination_array[0xf];\n  }\n  temp_var1 = (*callback_function)(source_array,destination_array[7],temp_var1,0);\n  if (temp_var1 == -1) {\n    temp_var4 = *source_array;\n    if (temp_var4 != 0) {\n      if ((temp_var4 != 0x1d) && (temp_var4 != 0x16)) {\n        *(ushort *)(destination_array + 3) = *(ushort *)(destination_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(destination_array + 3) = *(ushort *)(destination_array + 3) & 0xf7ff;\n      *destination_array = destination_array[4];\n      destination_array[1] = 0;\n      goto LAB_00083a00;\n    }\n    temp_var2 = *(ushort *)(destination_array + 3) & 0xf7ff;\n    destination_array[1] = 0;\n    *(ushort *)(destination_array + 3) = temp_var2;\n    *destination_array = destination_array[4];\n  }\n  else {\n    temp_var2 = *(ushort *)(destination_array + 3) & 0xf7ff;\n    *destination_array = destination_array[4];\n    *(ushort *)(destination_array + 3) = temp_var2;\n    destination_array[1] = 0;\n  }\n  if ((int)((uint)temp_var2 << 0x13) < 0) {\n    destination_array[0x14] = temp_var1;\n  }\nLAB_00083a00:\n  temp_ptr = (int *)destination_array[0xc];\n  *source_array = temp_var5;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != destination_array + 0x10) {\n    FUN_00083d9c(source_array);\n  }\n  destination_array[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "reverse_data_transfer_00083adc",
                "param_1": "source_array",
                "param_2": "destination_array",
                "piVar1": "temp_ptr",
                "iVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "iVar5": "temp_var4",
                "pcVar6": "callback_function",
                "unaff_r4": "unaffected_var",
                "iVar7": "temp_var5"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructureAddress)\n\n{\n  undefined4 *pointer1;\n  undefined4 *pointer2;\n  \n  if (*(int *)(dataStructureAddress + 0x38) == 0) {\n    pointer1 = *(undefined4 **)(dataStructureAddress + 4);\n    *(undefined **)(dataStructureAddress + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructureAddress + 0x2e4) = 3;\n    *(int *)(dataStructureAddress + 0x2e8) = dataStructureAddress + 0x2ec;\n    *(undefined4 *)(dataStructureAddress + 0x2e0) = 0;\n    *(undefined2 *)(pointer1 + 3) = 4;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    *(undefined2 *)((int)pointer1 + 0xe) = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    FUN_00082504(pointer1 + 0x17,0,8);\n    pointer2 = *(undefined4 **)(dataStructureAddress + 8);\n    pointer1[7] = pointer1;\n    pointer1[8] = &LAB_00084440_1;\n    pointer1[9] = 0x84465;\n    pointer1[10] = 0x8449d;\n    pointer1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)pointer2 + 0xe) = 1;\n    *(undefined2 *)(pointer2 + 3) = 9;\n    *pointer2 = 0;\n    pointer2[1] = 0;\n    pointer2[2] = 0;\n    pointer2[0x19] = 0;\n    pointer2[4] = 0;\n    pointer2[5] = 0;\n    pointer2[6] = 0;\n    FUN_00082504(pointer2 + 0x17,0,8);\n    pointer1 = *(undefined4 **)(dataStructureAddress + 0xc);\n    pointer2[7] = pointer2;\n    pointer2[8] = &LAB_00084440_1;\n    pointer2[9] = 0x84465;\n    pointer2[10] = 0x8449d;\n    pointer2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(pointer1 + 3) = 0x12;\n    *(undefined2 *)((int)pointer1 + 0xe) = 2;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    FUN_00082504(pointer1 + 0x17,0,8);\n    pointer1[7] = pointer1;\n    pointer1[8] = &LAB_00084440_1;\n    pointer1[9] = 0x84465;\n    pointer1[10] = 0x8449d;\n    pointer1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructureAddress + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructureAddress",
                "puVar1": "pointer1",
                "puVar2": "pointer2"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int index;\n  uint result;\n  uint currentByte;\n  byte *currentPtr;\n  uint counter;\n  byte value;\n  byte byteStack [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  index = FUN_00084298();\n  if ((index == 1) && (param2 - 1 < 0xff)) {\n    currentByte = param2 & 0xff;\n    value = (byte)currentByte;\n    result = 1;\n  }\n  else {\n    result = FUN_0008456c(param1,&value,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    currentByte = (uint)value;\n  }\n  counter = 0;\n  do {\n    currentPtr = param3[2] + -1;\n    param3[2] = currentPtr;\n    if ((int)currentPtr < 0) {\n      if ((int)param3[6] <= (int)currentPtr) {\n        **param3 = (byte)currentByte;\n        currentPtr = *param3;\n        currentByte = (uint)*currentPtr;\n        if (currentByte != 10) goto LAB_00083c90;\n      }\n      index = FUN_000844c4(param1,currentByte,param3);\n      if (index == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)currentByte;\n      currentPtr = *param3;\nLAB_00083c90:\n      *param3 = currentPtr + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    currentByte = (uint)byteStack[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "index",
                "uVar2": "result",
                "uVar3": "currentByte",
                "pbVar4": "currentPtr",
                "uVar5": "counter",
                "local_1c": "value",
                "abStack_1b": "byteStack"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "relocate_function_00083d00",
            "code": "\nundefined4 relocateFunction_00083d00(undefined4 param1,int param2)\n\n{\n  int result;\n  uint offset;\n  int adjustedOffset;\n  \n  FUNC_00082598();\n  offset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((offset - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = FUN_00082970(param1,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + offset) {\n      result = FUN_00082970(param1,-adjustedOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = offset - adjustedOffset | 1;\n        FUNC_0008259c(param1);\n        return 1;\n      }\n      adjustedOffset = FUN_00082970(param1,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "relocate_function_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "offset",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocation_00083d9c",
            "code": "\nvoid processRelocation_00083d9c(undefined4 param_1,int param_2)\n\n{\n  int previousElement;\n  bool isFirstElement;\n  uint elementSize;\n  dword currentElement;\n  int nextElement;\n  uint elementOffset;\n  dword previousElementPtr;\n  uint currentElementSize;\n  dword nextElementPtr;\n  \n  if (param_2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  elementSize = *(uint *)(param_2 + -4);\n  previousElementPtr = param_2 - 8;\n  elementOffset = elementSize & 0xfffffffe;\n  currentElement = previousElementPtr + elementOffset;\n  currentElementSize = *(uint *)(currentElement + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentElement) {\n    currentElementSize = currentElementSize + elementOffset;\n    if (-1 < (int)(elementSize << 0x1f)) {\n      previousElementPtr = previousElementPtr - *(int *)(param_2 + -8);\n      nextElement = *(int *)(previousElementPtr + 0xc);\n      previousElement = *(int *)(previousElementPtr + 8);\n      currentElementSize = currentElementSize + *(int *)(param_2 + -8);\n      *(int *)(previousElement + 0xc) = nextElement;\n      *(int *)(nextElement + 8) = previousElement;\n    }\n    currentElement = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(previousElementPtr + 4) = currentElementSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = previousElementPtr;\n    if (currentElement <= currentElementSize) {\n      FUN_00083d00(param_1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentElement + 4) = currentElementSize;\n    if ((elementSize & 1) == 0) {\n      previousElementPtr = previousElementPtr - *(int *)(param_2 + -8);\n      previousElement = *(int *)(previousElementPtr + 8);\n      elementOffset = elementOffset + *(int *)(param_2 + -8);\n      if (previousElement == 0x2007046c) {\n        isFirstElement = true;\n      }\n      else {\n        nextElement = *(int *)(previousElementPtr + 0xc);\n        *(int *)(previousElement + 0xc) = nextElement;\n        *(int *)(nextElement + 8) = previousElement;\n        isFirstElement = false;\n      }\n    }\n    else {\n      isFirstElement = false;\n    }\n    if (-1 < *(int *)(currentElement + currentElementSize + 4) << 0x1f) {\n      elementOffset = elementOffset + currentElementSize;\n      previousElement = *(int *)(currentElement + 8);\n      if ((!isFirstElement) && (previousElement == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = previousElementPtr;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = previousElementPtr;\n        *(undefined4 *)(previousElementPtr + 0xc) = 0x2007046c;\n        *(undefined4 *)(previousElementPtr + 8) = 0x2007046c;\n        *(uint *)(previousElementPtr + 4) = elementOffset | 1;\n        *(uint *)(previousElementPtr + elementOffset) = elementOffset;\n        goto LAB_00083e30;\n      }\n      nextElement = *(int *)(currentElement + 0xc);\n      *(int *)(previousElement + 0xc) = nextElement;\n      *(int *)(nextElement + 8) = previousElement;\n    }\n    *(uint *)(previousElementPtr + 4) = elementOffset | 1;\n    *(uint *)(previousElementPtr + elementOffset) = elementOffset;\n    if (!isFirstElement) {\n      if (elementOffset < 0x200) {\n        elementSize = elementOffset & 0xfffffff8;\n        previousElement = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + elementSize);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(elementOffset >> 3) >> 2 & 0xffU);\n        *(int *)(previousElementPtr + 8) = previousElement;\n        *(uint *)(previousElementPtr + 0xc) = elementSize + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + elementSize) = previousElementPtr;\n        *(dword *)(previousElement + 0xc) = previousElementPtr;\n        FUNC_0008259c(param_1);\n        return;\n      }\n      elementSize = elementOffset >> 9;\n      if (elementSize < 5) {\n        previousElement = (elementOffset >> 6) + 0x38;\n        nextElement = previousElement * 2;\n      }\n      else if (elementSize < 0x15) {\n        previousElement = elementSize + 0x5b;\n        nextElement = previousElement * 2;\n      }\n      else if (elementSize < 0x55) {\n        previousElement = (elementOffset >> 0xc) + 0x6e;\n        nextElement = previousElement * 2;\n      }\n      else if (elementSize < 0x155) {\n        previousElement = (elementOffset >> 0xf) + 0x77;\n        nextElement = previousElement * 2;\n      }\n      else if (elementSize < 0x555) {\n        previousElement = (elementOffset >> 0x12) + 0x7c;\n        nextElement = previousElement * 2;\n      }\n      else {\n        nextElement = 0xfc;\n        previousElement = 0x7e;\n      }\n      nextElementPtr = nextElement * 4 + 0x20070464;\n      currentElement = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextElement];\n      if (currentElement == nextElementPtr) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (previousElement >> 2 & 0xffU);\n        nextElementPtr = currentElement;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentElement + 4) & 0xfffffffc) <= elementOffset) break;\n          currentElement = *(dword *)(currentElement + 8);\n        } while (nextElementPtr != currentElement);\n        nextElementPtr = *(dword *)(currentElement + 0xc);\n      }\n      *(dword *)(previousElementPtr + 0xc) = nextElementPtr;\n      *(dword *)(previousElementPtr + 8) = currentElement;\n      *(dword *)(nextElementPtr + 8) = previousElementPtr;\n      *(dword *)(currentElement + 0xc) = previousElementPtr;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "process_relocation_00083d9c",
                "iVar1": "previousElement",
                "bVar2": "isFirstElement",
                "uVar3": "elementSize",
                "dVar4": "currentElement",
                "iVar5": "nextElement",
                "uVar6": "elementOffset",
                "dVar7": "previousElementPtr",
                "uVar8": "currentElementSize",
                "dVar9": "nextElementPtr"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *output,uint *data,uint **ptrArray)\n\n{\n  int returnValue;\n  uint tempVar1;\n  uint tempVar2;\n  ushort tempVar3;\n  uint tempVar4;\n  uint *pointerVar1;\n  uint *pointerVar2;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  \n  if (ptrArray[2] != (uint *)0x0) {\n    tempVar3 = *(ushort *)(data + 3);\n    tempVar4 = (uint)tempVar3;\n    if (((int)(tempVar4 << 0x1c) < 0) && (data[4] != 0)) {\n      pointerVar2 = *ptrArray;\n    }\n    else {\n      returnValue = FUN_00083808(output,data);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      tempVar3 = *(ushort *)(data + 3);\n      tempVar4 = (uint)tempVar3;\n      pointerVar2 = *ptrArray;\n    }\n    if ((tempVar3 & 2) == 0) {\n      tempVar1 = tempVar4 & 2;\n      tempVar7 = tempVar1;\n      tempVar5 = tempVar1;\n      tempVar9 = tempVar1;\n      if ((tempVar4 & 1) == 0) {\n        tempVar1 = 0;\n        tempVar7 = 0;\n        while( true ) {\n          while (tempVar1 == 0) {\n            tempVar7 = *pointerVar2;\n            pointerVar1 = pointerVar2 + 1;\n            pointerVar2 = pointerVar2 + 2;\n            tempVar1 = *pointerVar1;\n          }\n          tempVar5 = data[2];\n          if ((int)(tempVar4 << 0x16) < 0) {\n            if (tempVar1 < tempVar5) {\n              tempVar4 = *data;\n              tempVar5 = tempVar1;\n            }\n            else if ((tempVar4 & 0x480) == 0) {\n              tempVar4 = *data;\n            }\n            else {\n              returnValue = *data - data[4];\n              tempVar5 = returnValue + 1 + tempVar1;\n              tempVar6 = (int)(data[5] * 3) / 2;\n              if (tempVar5 <= tempVar6) {\n                tempVar5 = tempVar6;\n              }\n              if ((int)(tempVar4 << 0x15) < 0) {\n                tempVar6 = FUN_00081e14(output,tempVar5);\n                if (tempVar6 == 0) {\n                  *output = 0xc;\n                  tempVar3 = *(ushort *)(data + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(tempVar6,data[4],returnValue);\n                *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempVar6 = FUN_000825b0(output);\n                if (tempVar6 == 0) {\n                  FUN_00083d9c(output,data[4]);\n                  tempVar3 = *(ushort *)(data + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              tempVar4 = tempVar6 + returnValue;\n              data[4] = tempVar6;\n              data[5] = tempVar5;\n              *data = tempVar4;\n              data[2] = tempVar5 - returnValue;\n              tempVar5 = tempVar1;\n            }\n            FUN_00082438(tempVar4,tempVar7,tempVar5);\n            data[2] = data[2] - tempVar5;\n            *data = *data + tempVar5;\n            tempVar5 = tempVar1;\n          }\n          else if ((data[4] < *data) || (tempVar4 = data[5], tempVar1 < tempVar4)) {\n            if (tempVar1 < tempVar5) {\n              tempVar5 = tempVar1;\n            }\n            FUN_00082438(*data,tempVar7,tempVar5);\n            tempVar4 = data[2];\n            data[2] = tempVar4 - tempVar5;\n            *data = *data + tempVar5;\n            if ((tempVar4 - tempVar5 == 0) && (returnValue = FUN_00083adc(output,data), returnValue != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            tempVar5 = 0x7fffffff;\n            if (tempVar1 < 0x7fffffff) {\n              tempVar5 = tempVar1;\n            }\n            tempVar5 = (*(code *)data[9])(output,data[7],tempVar7,(tempVar5 / tempVar4) * tempVar4);\n            if ((int)tempVar5 < 1) goto LAB_0008402e;\n          }\n          pointerVar1 = ptrArray[2];\n          tempVar7 = tempVar7 + tempVar5;\n          tempVar1 = tempVar1 - tempVar5;\n          ptrArray[2] = (uint *)((int)pointerVar1 - tempVar5);\n          if ((uint *)((int)pointerVar1 - tempVar5) == (uint *)0x0) break;\n          tempVar4 = (uint)*(ushort *)(data + 3);\n        }\n      }\n      else {\n        do {\n          while (tempVar1 == 0) {\n            tempVar5 = *pointerVar2;\n            tempVar1 = pointerVar2[1];\n            tempVar9 = 0;\n            pointerVar2 = pointerVar2 + 2;\n          }\n          if (tempVar9 == 0) {\n            returnValue = FUN_00084384(tempVar5,10,tempVar1);\n            if (returnValue == 0) {\n              tempVar7 = tempVar1 + 1;\n              tempVar9 = 1;\n            }\n            else {\n              tempVar7 = (returnValue + 1) - tempVar5;\n              tempVar9 = 1;\n            }\n          }\n          tempVar6 = *data;\n          tempVar4 = tempVar7;\n          if (tempVar1 <= tempVar7) {\n            tempVar4 = tempVar1;\n          }\n          tempVar2 = data[5];\n          if ((data[4] < tempVar6) && (tempVar8 = data[2] + tempVar2, (int)tempVar8 < (int)tempVar4)) {\n            FUN_00082438(tempVar6,tempVar5,tempVar8);\n            *data = *data + tempVar8;\n            returnValue = FUN_00083adc(output,data);\n            if (returnValue != 0) goto LAB_0008402e;\n          }\n          else if ((int)tempVar4 < (int)tempVar2) {\n            FUN_00082438(tempVar6,tempVar5,tempVar4);\n            data[2] = data[2] - tempVar4;\n            *data = tempVar4 + *data;\n            tempVar8 = tempVar4;\n          }\n          else {\n            tempVar8 = (*(code *)data[9])(output,data[7],tempVar5,tempVar2);\n            if ((int)tempVar8 < 1) goto LAB_0008402e;\n          }\n          tempVar7 = tempVar7 - tempVar8;\n          if (tempVar7 == 0) {\n            returnValue = FUN_00083adc(output,data);\n            if (returnValue != 0) goto LAB_0008402e;\n            tempVar9 = 0;\n          }\n          pointerVar1 = ptrArray[2];\n          tempVar5 = tempVar5 + tempVar8;\n          tempVar1 = tempVar1 - tempVar8;\n          ptrArray[2] = (uint *)((int)pointerVar1 - tempVar8);\n        } while ((uint *)((int)pointerVar1 - tempVar8) != (uint *)0x0);\n      }\n    }\n    else {\n      tempVar1 = 0;\n      tempVar4 = 0;\n      do {\n        while( true ) {\n          tempVar7 = tempVar4;\n          if (0x7ffffbff < tempVar4) {\n            tempVar7 = 0x7ffffc00;\n          }\n          if (tempVar4 != 0) break;\n          tempVar1 = *pointerVar2;\n          tempVar4 = pointerVar2[1];\n          pointerVar2 = pointerVar2 + 2;\n        }\n        returnValue = (*(code *)data[9])(output,data[7],tempVar1,tempVar7);\n        if (returnValue < 1) {\nLAB_0008402e:\n          tempVar3 = *(ushort *)(data + 3);\nLAB_00084030:\n          *(ushort *)(data + 3) = tempVar3 | 0x40;\n          return 0xffffffff;\n        }\n        pointerVar1 = ptrArray[2];\n        tempVar1 = tempVar1 + returnValue;\n        tempVar4 = tempVar4 - returnValue;\n        ptrArray[2] = (uint *)((int)pointerVar1 - returnValue);\n      } while ((uint *)((int)pointerVar1 - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "data",
                "param_3": "ptrArray",
                "iVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "puVar6": "pointerVar1",
                "puVar7": "pointerVar2",
                "uVar8": "tempVar5",
                "uVar9": "tempVar6",
                "uVar10": "tempVar7",
                "uVar11": "tempVar8",
                "local_2c": "tempVar9"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_rel_info_00084298",
            "code": "\ndword getRelInfo_00084298(void)\n\n{\n  return Elf32_Rel_ARRAY_20070000[274].r_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_rel_info_00084298"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nvoid processData_000842a4(int inputParam1,int *inputParam2)\n\n{\n  ushort ushortValue;\n  int returnValue;\n  int statusValue;\n  uint convertedValue;\n  bool conditionalFlag;\n  undefined stackArray [4];\n  uint localValue;\n  \n  ushortValue = *(ushort *)(inputParam2 + 3);\n  convertedValue = (uint)ushortValue;\n  if ((int)(convertedValue << 0x1e) < 0) {\n    *inputParam2 = (int)inputParam2 + 0x43;\n    inputParam2[4] = (int)inputParam2 + 0x43;\n    inputParam2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)inputParam2 + 0xe)) {\n    returnValue = FUN_000846b4(inputParam1,(int)*(short *)((int)inputParam2 + 0xe),stackArray);\n    if (-1 < returnValue) {\n      conditionalFlag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (inputParam2[10] == 0x8449d)) {\n        returnValue = 0x400;\n        *(ushort *)(inputParam2 + 3) = *(ushort *)(inputParam2 + 3) | 0x400;\n        inputParam2[0x13] = 0x400;\n      }\n      else {\n        returnValue = 0x400;\n        *(ushort *)(inputParam2 + 3) = *(ushort *)(inputParam2 + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    ushortValue = *(ushort *)(inputParam2 + 3);\n    convertedValue = (uint)ushortValue;\n  }\n  *(ushort *)(inputParam2 + 3) = ushortValue | 0x800;\n  if ((convertedValue & 0x80) == 0) {\n    returnValue = 0x400;\n  }\n  else {\n    returnValue = 0x40;\n  }\n  conditionalFlag = false;\nLAB_00084300:\n  statusValue = FUN_00081e14(inputParam1,returnValue);\n  ushortValue = *(ushort *)(inputParam2 + 3);\n  if (statusValue == 0) {\n    if (-1 < (int)((uint)ushortValue << 0x16)) {\n      *(ushort *)(inputParam2 + 3) = ushortValue | 2;\n      *inputParam2 = (int)inputParam2 + 0x43;\n      inputParam2[4] = (int)inputParam2 + 0x43;\n      inputParam2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(inputParam1 + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(inputParam2 + 3) = ushortValue | 0x80;\n    *inputParam2 = statusValue;\n    inputParam2[4] = statusValue;\n    inputParam2[5] = returnValue;\n    if ((conditionalFlag) && (returnValue = FUN_000846dc(inputParam1,(int)*(short *)((int)inputParam2 + 0xe)), returnValue != 0))\n    {\n      *(ushort *)(inputParam2 + 3) = *(ushort *)(inputParam2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar1": "ushortValue",
                "iVar2": "returnValue",
                "iVar3": "statusValue",
                "uVar4": "convertedValue",
                "bVar5": "conditionalFlag",
                "auStack_54": "stackArray",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_next_occurrence_00084384",
            "code": "\nuint * find_next_occurrence_00084384(uint *data,char value,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current;\n  bool found;\n  \n  if (((uint)data & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      current = data;\n      do {\n        xor_result = *current ^ CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n        data = current;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        data = current + 1;\n        current = current + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != value) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto LAB_000843dc;\n      } while (*(char *)data != value);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != value) {\n    current = (uint *)((int)data + 1);\n    length = length - 1;\n    do {\n      data = current;\n      if (((uint)data & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      current = (uint *)((int)data + 1);\n      length = length - 1;\n    } while (*(char *)data != value);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_next_occurrence_00084384",
                "param_1": "data",
                "param_2": "value",
                "param_3": "length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current",
                "bVar4": "found"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *result,int data,undefined4 arg1,undefined4 arg2)\n\n{\n  int status;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(data + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_00084700(result,(int)*(short *)(data + 0xe),0,2);\n    value = *(ushort *)(data + 0xc);\n  }\n  *(ushort *)(data + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  status = FUN_000811cc((int)*(short *)(data + 0xe),arg1,arg2,arg2,unused1,unused2,\n                       unused3,unused4);\n  if ((status == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "result",
                "param_2": "data",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "status",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_value_based_on_condition_0008449c",
            "code": "\nvoid updateValueBasedOnCondition_0008449c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updatedValue;\n  \n  result = FUN_00084700(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_value_based_on_condition_0008449c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int data,uint value,undefined4 *array,undefined4 size)\n\n{\n  ushort value1;\n  uint value2;\n  undefined *pointer;\n  int count;\n  \n  if ((data != 0) && (*(int *)(data + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  value1 = *(ushort *)(array + 3);\n  value2 = (uint)value1;\n  array[2] = array[6];\n  if ((-1 < (int)(value2 << 0x1c)) || (count = array[4], count == 0)) {\n    count = FUN_00083808(data,array,value1,value2,size);\n    if (count != 0) {\n      return 0xffffffff;\n    }\n    value1 = *(ushort *)(array + 3);\n    count = array[4];\n    value2 = (uint)value1;\n  }\n  value = value & 0xff;\n  if ((int)(value2 << 0x12) < 0) {\n    pointer = (undefined *)*array;\n    count = (int)pointer - count;\n    if (count < (int)array[5]) {\nLAB_000844f6:\n      count = count + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    array[0x19] = array[0x19] & 0xffffdfff;\n    pointer = (undefined *)*array;\n    *(ushort *)(array + 3) = value1 | 0x2000;\n    count = (int)pointer - count;\n    if (count < (int)array[5]) goto LAB_000844f6;\n  }\n  count = FUN_00083adc(data,array);\n  if (count != 0) {\n    return 0xffffffff;\n  }\n  pointer = (undefined *)*array;\n  count = 1;\nLAB_000844f8:\n  array[2] = array[2] + -1;\n  *array = pointer + 1;\n  *pointer = (char)value;\n  if (((array[5] == count) ||\n      (((int)((uint)*(ushort *)(array + 3) << 0x1f) < 0 && (value == 10)))) &&\n     (count = FUN_00083adc(data,array), count != 0)) {\n    return 0xffffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "data",
                "param_2": "value",
                "param_3": "array",
                "param_4": "size",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "pointer",
                "iVar4": "count"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "execute_operation_0008456c",
            "code": "\nvoid executeOperation_0008456c(undefined4 *outputBuffer,int operationType,undefined4 inputSize,undefined4 *result)\n\n{\n  code *functionPointer;\n  undefined4 returnValue;\n  int operationResult;\n  undefined temporaryBuffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (operationType == 0) {\n    returnValue = FUN_00084290();\n    operationResult = (*functionPointer)(outputBuffer,temporaryBuffer,0,returnValue,result);\n  }\n  else {\n    returnValue = FUN_00084290();\n    operationResult = (*functionPointer)(outputBuffer,operationType,inputSize,returnValue,result);\n  }\n  if (operationResult == -1) {\n    *result = 0;\n    *outputBuffer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "execute_operation_0008456c",
                "param_1": "outputBuffer",
                "param_2": "operationType",
                "param_3": "inputSize",
                "param_4": "result",
                "pcVar1": "functionPointer",
                "uVar2": "returnValue",
                "iVar3": "operationResult",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "copy_integer_to_pointer_000845bc",
            "code": "\nundefined4 copy_integer_to_pointer_000845bc(undefined4 *output_pointer,undefined *input_pointer,uint integer_value)\n\n{\n  if (input_pointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (integer_value < 0x100) {\n    *input_pointer = (char)integer_value;\n    return 1;\n  }\n  *output_pointer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "copy_integer_to_pointer_000845bc",
                "param_1": "output_pointer",
                "param_2": "input_pointer",
                "param_3": "integer_value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_param_000846a4",
            "code": "\nundefined4 processParam_000846a4(int param)\n\n{\n  dword relOffset;\n  undefined4 result;\n  int returnValue;\n  \n  relOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(param + 0xc) != 0) {\n      result = FUN_00083adc(relOffset,param);\n      if ((*(code **)(param + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(param + 0x2c))(relOffset,*(undefined4 *)(param + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(param + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(relOffset,*(undefined4 *)(param + 0x10));\n      }\n      if (*(int *)(param + 0x30) != 0) {\n        if (*(int *)(param + 0x30) != param + 0x40) {\n          FUN_00083d9c(relOffset);\n        }\n        *(undefined4 *)(param + 0x30) = 0;\n      }\n      if (*(int *)(param + 0x44) != 0) {\n        FUN_00083d9c(relOffset);\n        *(undefined4 *)(param + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(param + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_param_000846a4",
                "param_1": "param",
                "dVar1": "relOffset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_and_assign_value_000846b4",
            "code": "\nvoid checkAndAssignValue_000846b4(int *outputValue,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811b4(inputParam1,inputParam2,inputParam2,0,inputParam3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_and_assign_value_000846b4",
                "param_1": "outputValue",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_and_update_value_000846dc",
            "code": "\nvoid checkAndUpdateValue_000846dc(int *result,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811be(inputValue);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_and_update_value_000846dc",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "check_and_assign_error_code_00084700",
            "code": "\nvoid checkAndAssignErrorCode_00084700(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int errorCode;\n  \n  DAT_200711bc = 0;\n  errorCode = FUN_000811c2(arg1,arg2,arg3);\n  if ((errorCode == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "check_and_assign_error_code_00084700",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "check_and_assign_result_00084728",
            "code": "\nvoid checkAndAssignResult_00084728(int *resultPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811c6(param2,param3,param4);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *resultPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "check_and_assign_result_00084728",
                "param_1": "resultPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "check_parameters_00084750",
            "code": "\nint checkParameters_00084750(int value1,int value2,int param3,int param4)\n\n{\n  int result;\n  \n  if ((param4 == 0) && (param3 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value1 = -1;\n    }\n    return value1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "check_parameters_00084750",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculate_difference_0008477c(uint input_value,int modifier,undefined4 param_a,undefined4 param_b,int *output_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_000847e0();\n  product = product * CONCAT44(param_b,param_a);\n  result = (uint)product;\n  *output_array = input_value - result;\n  output_array[1] = (modifier - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_value",
                "param_2": "modifier",
                "param_3": "param_a",
                "param_4": "param_b",
                "param_5": "output_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_values_000847ac",
            "code": "\nvoid subtractValues_000847ac(uint value1,int value2,undefined4 param3,undefined4 param4,int *resultArray)\n\n{\n  uint result1;\n  longlong result2;\n  \n  result2 = FUN_00084a80();\n  result2 = result2 * CONCAT44(param4,param3);\n  result1 = (uint)result2;\n  *resultArray = value1 - result1;\n  resultArray[1] = (value2 - (int)((ulonglong)result2 >> 0x20)) - (uint)(value1 < result1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_values_000847ac",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "resultArray",
                "uVar1": "result1",
                "lVar2": "result2"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "perform_division_000847e0",
            "code": "\nundefined8 performDivision_000847e0(uint dividend,uint divisor,uint remainder,uint quotient)\n\n{\n  longlong temp;\n  uint quotient1;\n  uint remainder1;\n  uint quotient2;\n  uint remainder2;\n  int shift;\n  uint partialDividend1;\n  uint partialDividend2;\n  uint isDividendNegative;\n  uint isDivisorNegative;\n  uint quotient3;\n  uint shiftedDivisor;\n  bool isSubtractionNeeded;\n  \n  if ((int)divisor < 0) {\n    isSubtractionNeeded = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)isSubtractionNeeded;\n    isDividendNegative = 0xffffffff;\n  }\n  else {\n    isDividendNegative = 0;\n  }\n  if ((int)quotient < 0) {\n    isDividendNegative = ~isDividendNegative;\n    isSubtractionNeeded = remainder != 0;\n    remainder = -remainder;\n    quotient = -quotient - (uint)isSubtractionNeeded;\n  }\n  if (quotient == 0) {\n    if (divisor < remainder) {\n      shift = LZCOUNT(remainder);\n      if (shift != 0) {\n        remainder1 = dividend >> (0x20U - shift & 0xff);\n        remainder = remainder << shift;\n        dividend = dividend << shift;\n        divisor = divisor << shift | remainder1;\n      }\n      quotient1 = remainder >> 0x10;\n      quotient2 = divisor / quotient1;\n      partialDividend1 = (remainder & 0xffff) * quotient2;\n      isDivisorNegative = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n      remainder1 = quotient2;\n      if (isDivisorNegative <= partialDividend1 && partialDividend1 - isDivisorNegative != 0) {\n        isSubtractionNeeded = CARRY4(isDivisorNegative,remainder);\n        isDivisorNegative = isDivisorNegative + remainder;\n        remainder1 = quotient2 - 1;\n        if ((isSubtractionNeeded == false) && (isDivisorNegative <= partialDividend1 && partialDividend1 - isDivisorNegative != 0)) {\n          remainder1 = quotient2 - 2;\n          isDivisorNegative = isDivisorNegative + remainder;\n        }\n      }\n      partialDividend2 = (isDivisorNegative - partialDividend1) / quotient1;\n      quotient2 = (remainder & 0xffff) * partialDividend2;\n      partialDividend1 = dividend & 0xffff | ((isDivisorNegative - partialDividend1) - quotient1 * partialDividend2) * 0x10000;\n      quotient1 = partialDividend2;\n      if (partialDividend1 <= quotient2 && quotient2 - partialDividend1 != 0) {\n        quotient1 = partialDividend2 - 1;\n        if ((CARRY4(partialDividend1,remainder) == false) &&\n           (partialDividend1 + remainder <= quotient2 && quotient2 - (partialDividend1 + remainder) != 0)) {\n          quotient1 = partialDividend2 - 2;\n        }\n      }\n      quotient1 = quotient1 | remainder1 << 0x10;\n      remainder1 = 0;\n    }\n    else {\n      if (remainder == 0) {\n        remainder = 1 / 0;\n      }\n      shift = LZCOUNT(remainder);\n      if (shift == 0) {\n        divisor = divisor - remainder;\n        quotient2 = remainder >> 0x10;\n        shiftedDivisor = remainder & 0xffff;\n        remainder1 = 1;\n      }\n      else {\n        remainder = remainder << shift;\n        remainder1 = divisor >> (0x20U - shift & 0xff);\n        quotient2 = remainder >> 0x10;\n        isDivisorNegative = remainder1 / quotient2;\n        shiftedDivisor = remainder & 0xffff;\n        partialDividend1 = shiftedDivisor * isDivisorNegative;\n        partialDividend2 = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        remainder1 = partialDividend2 >> 0x10 | (remainder1 - quotient2 * isDivisorNegative) * 0x10000;\n        dividend = dividend << shift;\n        quotient1 = isDivisorNegative;\n        if (remainder1 <= partialDividend1 && partialDividend1 - remainder1 != 0) {\n          isSubtractionNeeded = CARRY4(remainder1,remainder);\n          remainder1 = remainder1 + remainder;\n          quotient1 = isDivisorNegative - 1;\n          if ((isSubtractionNeeded == false) && (remainder1 <= partialDividend1 && partialDividend1 - remainder1 != 0)) {\n            quotient1 = isDivisorNegative - 2;\n            remainder1 = remainder1 + remainder;\n          }\n        }\n        remainder2 = (remainder1 - partialDividend1) / quotient2;\n        isDivisorNegative = shiftedDivisor * remainder2;\n        divisor = partialDividend2 & 0xffff | ((remainder1 - partialDividend1) - quotient2 * remainder2) * 0x10000;\n        remainder1 = remainder2;\n        if (divisor <= isDivisorNegative && isDivisorNegative - divisor != 0) {\n          isSubtractionNeeded = CARRY4(divisor,remainder);\n          divisor = divisor + remainder;\n          remainder1 = remainder2 - 1;\n          if ((isSubtractionNeeded == false) && (divisor <= isDivisorNegative && isDivisorNegative - divisor != 0)) {\n            remainder1 = remainder2 - 2;\n            divisor = divisor + remainder;\n          }\n        }\n        divisor = divisor - isDivisorNegative;\n        remainder1 = remainder1 | quotient1 << 0x10;\n      }\n      quotient1 = divisor / quotient2;\n      isDivisorNegative = shiftedDivisor * quotient1;\n      partialDividend2 = dividend >> 0x10 | (divisor - quotient2 * quotient1) * 0x10000;\n      partialDividend1 = quotient1;\n      if (partialDividend2 <= isDivisorNegative && isDivisorNegative - partialDividend2 != 0) {\n        isSubtractionNeeded = CARRY4(partialDividend2,remainder);\n        partialDividend2 = partialDividend2 + remainder;\n        partialDividend1 = quotient1 - 1;\n        if ((isSubtractionNeeded == false) && (partialDividend2 <= isDivisorNegative && isDivisorNegative - partialDividend2 != 0)) {\n          partialDividend1 = quotient1 - 2;\n          partialDividend2 = partialDividend2 + remainder;\n        }\n      }\n      remainder2 = (partialDividend2 - isDivisorNegative) / quotient2;\n      shiftedDivisor = shiftedDivisor * remainder2;\n      quotient2 = dividend & 0xffff | ((partialDividend2 - isDivisorNegative) - quotient2 * remainder2) * 0x10000;\n      quotient1 = remainder2;\n      if (quotient2 <= shiftedDivisor && shiftedDivisor - quotient2 != 0) {\n        quotient1 = remainder2 - 1;\n        if ((CARRY4(quotient2,remainder) == false) &&\n           (quotient2 + remainder <= shiftedDivisor && shiftedDivisor - (quotient2 + remainder) != 0)) {\n          quotient1 = remainder2 - 2;\n        }\n      }\n      quotient1 = quotient1 | partialDividend1 << 0x10;\n    }\n  }\n  else if (divisor < quotient) {\n    remainder1 = 0;\n    quotient1 = 0;\n  }\n  else {\n    shift = LZCOUNT(quotient);\n    if (shift == 0) {\n      if ((quotient < divisor) || (remainder <= dividend)) {\n        remainder1 = 0;\n        quotient1 = 1;\n      }\n      else {\n        quotient1 = 0;\n        remainder1 = 0;\n      }\n    }\n    else {\n      remainder1 = 0x20 - shift;\n      quotient2 = divisor >> (remainder1 & 0xff);\n      shiftedDivisor = remainder >> (remainder1 & 0xff) | quotient << shift;\n      isDivisorNegative = shiftedDivisor >> 0x10;\n      quotient1 = quotient2 / isDivisorNegative;\n      partialDividend2 = (shiftedDivisor & 0xffff) * quotient1;\n      partialDividend1 = divisor << shift | dividend >> (remainder1 & 0xff);\n      quotient2 = partialDividend1 >> 0x10 | (quotient2 - isDivisorNegative * quotient1) * 0x10000;\n      remainder1 = quotient1;\n      if (quotient2 <= partialDividend2 && partialDividend2 - quotient2 != 0) {\n        isSubtractionNeeded = CARRY4(quotient2,shiftedDivisor);\n        quotient2 = quotient2 + shiftedDivisor;\n        remainder1 = quotient1 - 1;\n        if ((isSubtractionNeeded == false) && (quotient2 <= partialDividend2 && partialDividend2 - quotient2 != 0)) {\n          remainder1 = quotient1 - 2;\n          quotient2 = quotient2 + shiftedDivisor;\n        }\n      }\n      remainder2 = (quotient2 - partialDividend2) / isDivisorNegative;\n      quotient3 = (shiftedDivisor & 0xffff) * remainder2;\n      quotient2 = partialDividend1 & 0xffff | ((quotient2 - partialDividend2) - isDivisorNegative * remainder2) * 0x10000;\n      quotient1 = remainder2;\n      if (quotient2 <= quotient3 && quotient3 - quotient2 != 0) {\n        isSubtractionNeeded = CARRY4(quotient2,shiftedDivisor);\n        quotient2 = quotient2 + shiftedDivisor;\n        quotient1 = remainder2 - 1;\n        if ((isSubtractionNeeded == false) && (quotient2 <= quotient3 && quotient3 - quotient2 != 0)) {\n          quotient1 = remainder2 - 2;\n          quotient2 = quotient2 + shiftedDivisor;\n        }\n      }\n      quotient1 = quotient1 | remainder1 << 0x10;\n      temp = (ulonglong)quotient1 * (ulonglong)(remainder << shift);\n      partialDividend1 = (uint)((ulonglong)temp >> 0x20);\n      remainder1 = 0;\n      if ((quotient2 - quotient3 < partialDividend1) ||\n         ((quotient2 - quotient3 == partialDividend1 && (dividend << shift < (uint)temp)))) {\n        quotient1 = quotient1 - 1;\n        remainder1 = 0;\n      }\n    }\n  }\n  if (isDividendNegative != 0) {\n    isSubtractionNeeded = quotient1 != 0;\n    quotient1 = -quotient1;\n    remainder1 = -remainder1 - (uint)isSubtractionNeeded;\n  }\n  return CONCAT44(remainder1,quotient1);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "perform_division_000847e0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "quotient",
                "lVar1": "temp",
                "uVar2": "quotient1",
                "uVar3": "remainder1",
                "uVar4": "quotient2",
                "uVar5": "remainder2",
                "iVar6": "shift",
                "uVar7": "partialDividend1",
                "uVar8": "partialDividend2",
                "uVar9": "isDividendNegative",
                "uVar10": "isDivisorNegative",
                "uVar11": "quotient3",
                "uVar12": "shiftedDivisor",
                "bVar13": "isSubtractionNeeded"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "divisible_remainder_00084a80",
            "code": "\nulonglong divisibleRemainder_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint resultHigh;\n  uint quotientHigh;\n  uint quotientLow;\n  uint product;\n  uint temp1;\n  uint temp2;\n  uint divisorQuotient;\n  uint divisorProduct;\n  int numBits;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      numBits = LZCOUNT(quotient);\n      if (numBits == 0) {\n        divisor = divisor - quotient;\n        quotientHigh = quotient >> 0x10;\n        product = quotient & 0xffff;\n        resultHigh = 1;\n      }\n      else {\n        quotient = quotient << numBits;\n        divisorQuotient = divisor >> (0x20U - numBits & 0xff);\n        quotientHigh = quotient >> 0x10;\n        divisorProduct = divisorQuotient / quotientHigh;\n        product = quotient & 0xffff;\n        resultHigh = product * divisorProduct;\n        temp1 = dividend >> (0x20U - numBits & 0xff) | divisor << numBits;\n        quotientLow = temp1 >> 0x10 | (divisorQuotient - quotientHigh * divisorProduct) * 0x10000;\n        dividend = dividend << numBits;\n        divisorQuotient = divisorProduct;\n        if (quotientLow <= resultHigh && resultHigh - quotientLow != 0) {\n          carryFlag = CARRY4(quotientLow,quotient);\n          quotientLow = quotientLow + quotient;\n          divisorQuotient = divisorProduct - 1;\n          if ((carryFlag == false) && (quotientLow <= resultHigh && resultHigh - quotientLow != 0)) {\n            divisorQuotient = divisorProduct - 2;\n            quotientLow = quotientLow + quotient;\n          }\n        }\n        temp2 = (quotientLow - resultHigh) / quotientHigh;\n        divisorProduct = product * temp2;\n        divisor = temp1 & 0xffff | ((quotientLow - resultHigh) - quotientHigh * temp2) * 0x10000;\n        resultHigh = temp2;\n        if (divisor <= divisorProduct && divisorProduct - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          resultHigh = temp2 - 1;\n          if ((carryFlag == false) && (divisor <= divisorProduct && divisorProduct - divisor != 0)) {\n            resultHigh = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - divisorProduct;\n        resultHigh = resultHigh | divisorQuotient << 0x10;\n      }\n      divisorProduct = divisor / quotientHigh;\n      quotientLow = product * divisorProduct;\n      temp1 = dividend >> 0x10 | (divisor - quotientHigh * divisorProduct) * 0x10000;\n      divisorQuotient = divisorProduct;\n      if (temp1 <= quotientLow && quotientLow - temp1 != 0) {\n        carryFlag = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        divisorQuotient = divisorProduct - 1;\n        if ((carryFlag == false) && (temp1 <= quotientLow && quotientLow - temp1 != 0)) {\n          divisorQuotient = divisorProduct - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      divisorProduct = (temp1 - quotientLow) / quotientHigh;\n      product = product * divisorProduct;\n      temp1 = dividend & 0xffff | ((temp1 - quotientLow) - quotientHigh * divisorProduct) * 0x10000;\n      quotientHigh = divisorProduct;\n      if (temp1 <= product && product - temp1 != 0) {\n        quotientHigh = divisorProduct - 1;\n        if ((CARRY4(temp1,quotient) == false) &&\n           (temp1 + quotient <= product && product - (temp1 + quotient) != 0)) {\n          quotientHigh = divisorProduct - 2;\n        }\n      }\n      return CONCAT44(resultHigh,quotientHigh | divisorQuotient << 0x10);\n    }\n    numBits = LZCOUNT(quotient);\n    if (numBits != 0) {\n      divisorQuotient = dividend >> (0x20U - numBits & 0xff);\n      quotient = quotient << numBits;\n      dividend = dividend << numBits;\n      divisor = divisorQuotient | divisor << numBits;\n    }\n    resultHigh = quotient >> 0x10;\n    quotientHigh = divisor / resultHigh;\n    product = (quotient & 0xffff) * quotientHigh;\n    divisorProduct = dividend >> 0x10 | (divisor - resultHigh * quotientHigh) * 0x10000;\n    divisorQuotient = quotientHigh;\n    if (divisorProduct <= product && product - divisorProduct != 0) {\n      carryFlag = CARRY4(divisorProduct,quotient);\n      divisorProduct = divisorProduct + quotient;\n      divisorQuotient = quotientHigh - 1;\n      if ((carryFlag == false) && (divisorProduct <= product && product - divisorProduct != 0)) {\n        divisorQuotient = quotientHigh - 2;\n        divisorProduct = divisorProduct + quotient;\n      }\n    }\n    temp1 = (divisorProduct - product) / resultHigh;\n    quotientHigh = (quotient & 0xffff) * temp1;\n    product = dividend & 0xffff | ((divisorProduct - product) - resultHigh * temp1) * 0x10000;\n    resultHigh = temp1;\n    if (product <= quotientHigh && quotientHigh - product != 0) {\n      resultHigh = temp1 - 1;\n      if ((CARRY4(product,quotient) == false) &&\n         (product + quotient <= quotientHigh && quotientHigh - (product + quotient) != 0)) {\n        resultHigh = temp1 - 2;\n      }\n    }\n    resultHigh = resultHigh | divisorQuotient << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    numBits = LZCOUNT(remainder);\n    if (numBits == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      resultHigh = 0;\n    }\n    else {\n      resultHigh = 0x20 - numBits;\n      divisorQuotient = divisor >> (resultHigh & 0xff);\n      quotientHigh = remainder << numBits | quotient >> (resultHigh & 0xff);\n      product = quotientHigh >> 0x10;\n      quotientLow = divisorQuotient / product;\n      divisorProduct = (quotientHigh & 0xffff) * quotientLow;\n      temp1 = dividend >> (resultHigh & 0xff) | divisor << numBits;\n      resultHigh = temp1 >> 0x10 | (divisorQuotient - product * quotientLow) * 0x10000;\n      divisorQuotient = quotientLow;\n      if (resultHigh <= divisorProduct && divisorProduct - resultHigh != 0) {\n        carryFlag = CARRY4(resultHigh,quotientHigh);\n        resultHigh = resultHigh + quotientHigh;\n        divisorQuotient = quotientLow - 1;\n        if ((carryFlag == false) && (resultHigh <= divisorProduct && divisorProduct - resultHigh != 0)) {\n          divisorQuotient = quotientLow - 2;\n          resultHigh = resultHigh + quotientHigh;\n        }\n      }\n      quotientLow = (resultHigh - divisorProduct) / product;\n      temp2 = (quotientHigh & 0xffff) * quotientLow;\n      product = temp1 & 0xffff | ((resultHigh - divisorProduct) - product * quotientLow) * 0x10000;\n      resultHigh = quotientLow;\n      if (product <= temp2 && temp2 - product != 0) {\n        carryFlag = CARRY4(product,quotientHigh);\n        product = product + quotientHigh;\n        resultHigh = quotientLow - 1;\n        if ((carryFlag == false) && (product <= temp2 && temp2 - product != 0)) {\n          resultHigh = quotientLow - 2;\n          product = product + quotientHigh;\n        }\n      }\n      resultHigh = resultHigh | divisorQuotient << 0x10;\n      result = (ulonglong)resultHigh * (ulonglong)(quotient << numBits);\n      divisorQuotient = (uint)((ulonglong)result >> 0x20);\n      if ((product - temp2 < divisorQuotient) || ((product - temp2 == divisorQuotient && (dividend << numBits < (uint)result)))\n         ) {\n        resultHigh = resultHigh - 1;\n      }\n    }\n  }\n  return (ulonglong)resultHigh;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "divisible_remainder_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "result",
                "uVar2": "resultHigh",
                "uVar3": "quotientHigh",
                "uVar4": "quotientLow",
                "uVar5": "product",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "divisorQuotient",
                "uVar9": "divisorProduct",
                "iVar10": "numBits",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 119332,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}