{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_not_set_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setFlagIfNotSet_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_not_set_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **dataPointer)\n\n{\n  int result;\n  \n  *dataPointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    updateParameter(*(byte *)((int)dataPointer + 6),1);\n    updateParameterPermissions(*(undefined *)((int)dataPointer + 6),0);\n  }\n  do {\n    result = (**(code **)(**dataPointer + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  *(undefined *)((int)dataPointer + 0x4a) = 0;\n  *(undefined2 *)(dataPointer + 0x15) = 0;\n  *(undefined2 *)((int)dataPointer + 0x52) = 0;\n  *(undefined2 *)(dataPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPointer",
                "iVar1": "result",
                "update_parameter_00081210": "updateParameter",
                "update_parameter_permissions_00081318": "updateParameterPermissions"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "update_permissions_000801b0",
            "code": "\nint updatePermissions_000801b0(int **parameter)\n\n{\n  bool foundOverflow;\n  undefined newValue;\n  char currentValue;\n  int returnValue;\n  byte counter;\n  \n  if (1 < *(byte *)((int)parameter + 6)) {\n    updatePermissions_000801b0(*(byte *)((int)parameter + 6),0);\n  }\n  foundOverflow = false;\n  *(undefined *)((int)parameter + 0x49) = 0;\n  if (*(byte *)((int)parameter + 5) < 4) {\n    while (returnValue = (**(code **)(**parameter + 8))(), returnValue != 0) {\n      counter = *(byte *)((int)parameter + 0x49);\n      newValue = (**(code **)(**parameter + 0xc))();\n      currentValue = *(char *)((int)parameter + 0x49);\n      *(undefined *)((int)parameter + counter + 9) = newValue;\n      counter = currentValue + 1;\n      *(byte *)((int)parameter + 0x49) = counter;\n      if (0x3f < counter) {\n        foundOverflow = true;\n      }\n    }\n  }\n  *(short *)(parameter + 0x14) = *(short *)(parameter + 0x14) + 1;\n  if (foundOverflow) {\n    currentValue = -3;\n    *(short *)(parameter + 0x15) = *(short *)(parameter + 0x15) + 1;\n  }\n  else {\n    currentValue = *(char *)((int)parameter + 0x49);\n  }\n  return (int)currentValue;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "update_permissions_000801b0",
                "param_1": "parameter",
                "bVar1": "foundOverflow",
                "uVar2": "newValue",
                "cVar3": "currentValue",
                "iVar4": "returnValue",
                "bVar5": "counter",
                "update_parameter_permissions_00081318": "updatePermissions"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculate_checksum_0008021c(int data_start,uint data_length)\n\n{\n  int current_index;\n  uint checksum;\n  char bit_counter;\n  uint bit_check;\n  \n  checksum = 0xffff;\n  for (current_index = data_start; (current_index - data_start & 0xffU) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    bit_counter = '\\b';\n    do {\n      bit_check = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit_check != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_counter = bit_counter + -1;\n    } while (bit_counter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "data_start",
                "param_2": "data_length",
                "iVar1": "current_index",
                "uVar2": "checksum",
                "cVar3": "bit_counter",
                "uVar4": "bit_check"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_permissions_00080258",
            "code": "\nvoid updateChecksumAndPermissions_00080258(int **pointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte byteValue;\n  undefined2 checksum;\n  int result;\n  uint byteValueConverted;\n  \n  byteValue = *(byte *)((int)pointer + 0x49);\n  byteValueConverted = (uint)byteValue;\n  checksum = calculateChecksum(pointer,byteValueConverted,value2,value3,value3);\n  *(char *)((int)pointer + byteValueConverted + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)pointer + (byteValueConverted + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)pointer + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)pointer + 6)) {\n    updateParameterPermissions(*(byte *)((int)pointer + 6),1);\n  }\n  if (*(byte *)((int)pointer + 5) < 4) {\n    (**(code **)(**pointer + 4))(*pointer,(int)pointer + 9,*(undefined *)((int)pointer + 0x49));\n  }\n  if (1 < *(byte *)((int)pointer + 6)) {\n    updateParameterPermissions(*(byte *)((int)pointer + 6),0);\n  }\n  if (*(byte *)((int)pointer + 5) < 4) {\n    do {\n      result = (**(code **)(**pointer + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)pointer + 0x49) = 0;\n  result = getGlobalData();\n  pointer[0x17] = (int *)(result + (uint)*(ushort *)((int)pointer + 0x56));\n  *(short *)((int)pointer + 0x52) = *(short *)((int)pointer + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_permissions_00080258",
                "param_1": "pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "bVar1": "byteValue",
                "uVar2": "checksum",
                "iVar3": "result",
                "uVar4": "byteValueConverted",
                "calculate_checksum_0008021c": "calculateChecksum",
                "update_parameter_permissions_00081318": "updateParameterPermissions",
                "get_global_data_thunk_00081714": "getGlobalData"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_parameters_000802da",
            "code": "\nint validate_parameters_000802da(int function_parameter,uint parameter_1,uint parameter_2,ushort *parameter_3)\n\n{\n  char result;\n  byte byte_value;\n  undefined undefined_value;\n  ushort ushort_value;\n  uint uint_value;\n  ushort *ushort_pointer;\n  undefined value_1;\n  undefined value_2;\n  ushort value_3;\n  \n  value_1 = (undefined)parameter_1;\n  value_2 = (undefined)(parameter_1 >> 8);\n  value_3 = (ushort)parameter_2;\n  uint_value = parameter_2 & 0xffff;\n  if (*(char *)(function_parameter + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(function_parameter + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((parameter_1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(function_parameter + 9) = value_1;\n  *(undefined *)(function_parameter + 10) = value_2;\n  *(ushort **)(function_parameter + 0x4c) = parameter_3;\n  *(char *)(function_parameter + 0xb) = (char)(parameter_1 >> 0x18);\n  *(char *)(function_parameter + 0xc) = (char)(parameter_1 >> 0x10);\n  undefined_value = (undefined)(parameter_2 >> 8);\n  switch(value_2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(function_parameter + 0xd) = undefined_value;\n    break;\n  case 5:\n    ushort_value = *parameter_3;\n    if (ushort_value != 0) {\n      ushort_value = 1;\n    }\n    *(char *)(function_parameter + 0xd) = -(char)ushort_value;\n    uint_value = 0;\n    break;\n  case 6:\n    *(char *)(function_parameter + 0xd) = (char)(*parameter_3 >> 8);\n    uint_value = (uint)*parameter_3;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_value = (byte)(value_3 >> 3) & 0xfe;\n    if ((parameter_2 & 0xf) != 0) {\n      byte_value = byte_value + 1;\n    }\n    *(char *)(function_parameter + 0xe) = (char)parameter_2;\n    *(undefined *)(function_parameter + 0xd) = undefined_value;\n    *(byte *)(function_parameter + 0xf) = byte_value;\n    undefined_value = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(function_parameter + 0xd) = undefined_value;\n    *(char *)(function_parameter + 0xe) = (char)parameter_2;\n    parameter_3 = parameter_3 + -1;\n    *(char *)(function_parameter + 0xf) = (char)uint_value * '\\x02';\n    *(undefined *)(function_parameter + 0x49) = 7;\n    ushort_pointer = parameter_3 + uint_value;\n    while (parameter_3 != ushort_pointer) {\n      byte_value = *(byte *)(function_parameter + 0x49);\n      *(char *)(function_parameter + (uint)byte_value + 9) = (char)(parameter_3[1] >> 8);\n      uint_value = byte_value + 1 & 0xff;\n      *(char *)(function_parameter + 0x49) = (char)uint_value;\n      parameter_3 = parameter_3 + 1;\n      *(char *)(uint_value + function_parameter + 9) = (char)*parameter_3;\n      *(byte *)(function_parameter + 0x49) = byte_value + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(function_parameter + 0xe) = (char)uint_value;\n  undefined_value = 6;\nLAB_0008034a:\n  *(undefined *)(function_parameter + 0x49) = undefined_value;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_permissions_00080258(function_parameter);\n  *(undefined *)(function_parameter + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_parameters_000802da",
                "param_1": "function_parameter",
                "param_2": "parameter_1",
                "param_3": "parameter_2",
                "param_4": "parameter_3",
                "cVar1": "result",
                "bVar2": "byte_value",
                "uVar3": "undefined_value",
                "uVar4": "ushort_value",
                "uVar5": "uint_value",
                "puVar6": "ushort_pointer",
                "local_1c": "value_1",
                "local_1b": "value_2",
                "local_18": "value_3"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_for_duplicate_000803d4",
            "code": "\nundefined4 checkForDuplicate_000803d4(int input)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input + 10) << 0x18) < 0) {\n    *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(input + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input + 0x54) = *(short *)(input + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_for_duplicate_000803d4",
                "param_1": "input",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "update_values_00080410",
            "code": "\nvoid updateValues_00080410(int inputAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combinedValue;\n  int updatedAddress;\n  byte count;\n  uint index;\n  int arrayAddress;\n  \n  count = 0;\n  while( true ) {\n    index = (uint)count;\n    count = count + 1;\n    if (*(byte *)(inputAddress + 0xb) >> 1 <= index) break;\n    updatedAddress = (index * 2 + 3 & 0xff) + inputAddress;\n    arrayAddress = *(int *)(inputAddress + 0x4c);\n    combinedValue = combine_values_000815f8(*(undefined *)(updatedAddress + 9),*(undefined *)(updatedAddress + 10),updatedAddress,\n                         *(byte *)(inputAddress + 0xb),param4);\n    *(undefined2 *)(arrayAddress + index * 2) = combinedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "update_values_00080410",
                "param_1": "inputAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combinedValue",
                "iVar2": "updatedAddress",
                "bVar3": "count",
                "uVar4": "index",
                "iVar5": "arrayAddress"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_0008043e",
            "code": "\nint processData_0008043e(int **data)\n\n{\n  char result;\n  uint returnValue;\n  int *globalData;\n  int duplicateCheck;\n  uint flag;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    returnValue = (**(code **)(**data + 8))();\n    flag = returnValue & 0xff;\n  }\n  globalData = (int *)get_global_data_thunk_00081714();\n  if (data[0x17] < globalData) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < flag) {\n    updatePermissions(data);\n    duplicateCheck = checkForDuplicate(data);\n    if (duplicateCheck == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        updateValues(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)duplicateCheck;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "globalData",
                "iVar4": "duplicateCheck",
                "unaff_r6": "flag",
                "update_permissions_000801b0": "updatePermissions",
                "check_for_duplicate_000803d4": "checkForDuplicate",
                "update_values_00080410": "updateValues"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_configuration_000804a8",
            "code": "\nundefined8 initialize_system_configuration_000804a8(void)\n\n{\n  int iVar1;\n  \n  update_configuration_parameter(1,0);\n  update_configuration_parameter(6,1);\n  update_configuration_parameter(0,1);\n  update_configuration_parameter(1,1);\n  update_configuration_parameter_permissions(0,0);\n  update_configuration_parameter_permissions(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_data_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_global_data_thunk_00081714();\n  iVar1 = get_global_data_thunk_00081714();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = get_global_data_thunk_00081714();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = get_global_data_thunk_00081714();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = get_global_data_thunk_00081714();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_configuration_000804a8",
                "update_parameter_00081210": "update_configuration_parameter",
                "update_parameter_permissions_00081318": "update_configuration_parameter_permissions"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint globalData;\n  undefined4 modValue1;\n  undefined4 floatValue1;\n  undefined4 modValue2;\n  undefined4 floatValue2;\n  int tempVar;\n  uint *ptrVar;\n  undefined4 *paramPtr;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    globalData = get_global_data_thunk_00081714();\n    if (DAT_200708c8 < globalData) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = calculate_modified_value_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_modified_value_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = calculate_modified_value_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_data_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      paramPtr = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_parameters_000802da(&DAT_200709e4,*paramPtr,paramPtr[1],paramPtr[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    process_data_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      paramPtr = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    process_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_data_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptrVar = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptrVar = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (globalData = get_global_data_thunk_00081714(), DAT_200708c0 < globalData))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      tempVar = get_global_data_thunk_00081714();\n      DAT_200708c0 = tempVar + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      globalData = get_global_data_thunk_00081714();\n      if (DAT_200708c0 < globalData) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar = get_global_data_thunk_00081714();\n        DAT_200708c0 = tempVar + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptrVar = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      globalData = get_global_data_thunk_00081714();\n      if (DAT_200708c0 < globalData) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar = get_global_data_thunk_00081714();\n        DAT_200708c0 = tempVar + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  globalData = get_global_data_thunk_00081714();\n  if (DAT_200709e0 < globalData) {\n    modValue1 = calculate_modified_value_0008189c(DAT_20070940);\n    floatValue1 = calculate_float_00081730(modValue1,DAT_200709c8);\n    modValue1 = DAT_200708c4;\n    DAT_20070930 = floatValue1;\n    modValue2 = calculate_floating_point_number_00081734(floatValue1,DAT_200708c4);\n    modValue2 = calculate_float_value_00081944(modValue2,DAT_2007094c);\n    modValue2 = calculate_floating_point_number_00081734(modValue2,DAT_20070914);\n    DAT_2007094c = modValue2;\n    modValue1 = calculate_float_00081730(floatValue1,modValue1);\n    modValue1 = calculate_float_value_00081944(modValue1,DAT_200709c4);\n    modValue1 = calculate_float_00081730(modValue1,DAT_2007096c);\n    DAT_200709c4 = modValue1;\n    floatValue2 = calculate_float_value_00081944(floatValue1,DAT_20070a4c);\n    floatValue2 = calculate_floating_point_number_00081734(floatValue2,modValue2);\n    calculate_floating_point_number_00081734(floatValue2,modValue1);\n    DAT_20070910 = extract_integer_00081cd0();\n    DAT_2007091c = calculate_modified_value_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = floatValue1;\n    DAT_20070914 = modValue2;\n    DAT_2007096c = modValue1;\n    tempVar = get_global_data_thunk_00081714();\n    DAT_200709e0 = tempVar + DAT_20070970;\n  }\n  modValue1 = calculate_modified_value_0008189c(DAT_20070970);\n  tempVar = check_concated_params_validity_00081ca8(DAT_2007091c,modValue1);\n  if (tempVar != 0) {\n    DAT_2007091c = modValue1;\n  }\n  tempVar = check_params_and_return_result_00081c94(DAT_2007091c,0);\n  if (tempVar != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = bitwise_shift_operation_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "globalData",
                "uVar2": "modValue1",
                "uVar3": "floatValue1",
                "uVar4": "modValue2",
                "uVar5": "floatValue2",
                "iVar6": "tempVar",
                "puVar7": "ptrVar",
                "puVar8": "paramPtr"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_memory_00080a68",
            "code": "\nvoid initializeMemory_00080a68(void)\n\n{\n  initialize_memory_00081682(&DAT_20070954,\"\");\n  updateRelocationEntry(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_memory_00080a68",
                "update_relocation_entry_00081d5c": "updateRelocationEntry"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_memory_and_parameters_00080ae4",
            "code": "\n\n\nvoid initializeMemoryAndParameters_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  initialize_memory_00080e9c();\n  _DAT_e000e014 = elfRelArray[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  executeFunctionSet();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    update_parameter_permissions_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter_00080da0(0x400e0e00,1,0x300,0);\n  update_parameter_permissions_00081318(0,1);\n  update_parameter_00080da0(0x400e0e00,1,0xc00,0);\n  update_parameter_00080da0(0x400e0e00,1,0x3000,0);\n  update_parameter_00080da0(0x400e1400,2,0x30,0);\n  update_parameter_00080da0(0x400e1000,1,0xc00,0);\n  update_parameter_00080da0(0x400e0e00,1,3,0);\n  update_parameter_00080da0(0x400e1000,1,0xc000,0);\n  check_and_set_bit_00080e18(0x25);\n  calculate_threshold_value_00080f9c(0x400c0000,elfRelArray[6].r_offset,20000000,0xc);\n  update_flags_00081042(0x400c0000,0,0x300000,1);\n  set_flag_in_memory_00081034(0x400c0000,0,0);\n  set_param_value_0008106e(0x400c0000,0xffffffff);\n  initialize_memory_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_memory_and_parameters_00080ae4",
                "Elf32_Rel_ARRAY_20070000": "elfRelArray",
                "execute_function_set_00081d7c": "executeFunctionSet",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_buffers_and_params_00080c0c",
            "code": "\nvoid initialize_buffers_and_params_00080c0c(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  initialize_buffer_000813a8(&DAT_20070b84);\n  initialize_buffer_000813a8(&DAT_20070ad8);\n  initialize_params_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param_3);\n  initialize_buffer_000813a8(&DAT_20070de4);\n  initialize_buffer_000813a8(&DAT_20070e6c);\n  initialize_buffer_000813a8(&DAT_20070ef4);\n  initialize_buffer_000813a8(&DAT_20070a50);\n  initialize_buffer_000813a8(&DAT_20070c84);\n  initialize_buffer_000813a8(&DAT_20070d0c);\n  initialize_and_set_params_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_and_set_params_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_and_set_params_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_buffers_and_params_00080c0c"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "calculate_and_handle_differences_00080ce0",
            "code": "\nvoid calculate_and_handle_differences_00080ce0(void)\n\n{\n  int difference_result;\n  \n  difference_result = calculate_difference(&DAT_20070b60);\n  if (difference_result != 0) {\n    FUNC_00080aa8();\n  }\n  difference_result = calculate_difference(&DAT_20070c0c);\n  if (difference_result != 0) {\n    FUNC_00080ab8();\n  }\n  difference_result = calculate_difference(&DAT_20070c34);\n  if (difference_result != 0) {\n    FUNC_00080aba();\n  }\n  difference_result = calculate_difference(&DAT_20070c5c);\n  if (difference_result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "calculate_and_handle_differences_00080ce0",
                "iVar1": "difference_result",
                "calculate_difference_000813e4": "calculate_difference"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_value_00080d2e",
            "code": "\nvoid updateValue_00080d2e(int baseAddress,undefined4 operation,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(operation) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "operation",
                "param_3": "newValue",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_param_values_00080d54",
            "code": "\nvoid updateParamValues_00080d54(undefined4 *parameterArray,undefined4 newValue,uint flags)\n\n{\n  bool isNegativeFlag;\n  \n  isNegativeFlag = (int)(flags << 0x1f) < 0;\n  parameterArray[0x11] = newValue;\n  if (isNegativeFlag) {\n    parameterArray[0x19] = newValue;\n  }\n  if (!isNegativeFlag) {\n    parameterArray[0x18] = newValue;\n  }\n  isNegativeFlag = (flags & 10) != 0;\n  if (isNegativeFlag) {\n    parameterArray[8] = newValue;\n  }\n  if (!isNegativeFlag) {\n    parameterArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    parameterArray[0x20] = newValue;\n  }\n  parameterArray[5] = newValue;\n  *parameterArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_param_values_00080d54",
                "param_1": "parameterArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegativeFlag"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_param_values_00080d7a",
            "code": "\nvoid setParamValues_00080d7a(undefined4 *resultArray,undefined4 paramValue,int isParamThreeZero,int isParamFourZero,int isParamFiveZero)\n\n{\n  resultArray[0x11] = paramValue;\n  if (isParamFiveZero == 0) {\n    resultArray[0x18] = paramValue;\n  }\n  else {\n    resultArray[0x19] = paramValue;\n  }\n  if (isParamFourZero == 0) {\n    resultArray[0x15] = paramValue;\n  }\n  else {\n    resultArray[0x14] = paramValue;\n  }\n  if (isParamThreeZero == 0) {\n    resultArray[0xd] = paramValue;\n  }\n  else {\n    resultArray[0xc] = paramValue;\n  }\n  resultArray[4] = paramValue;\n  *resultArray = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_param_values_00080d7a",
                "param_1": "resultArray",
                "param_2": "paramValue",
                "param_3": "isParamThreeZero",
                "param_4": "isParamFourZero",
                "param_5": "isParamFiveZero"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_parameter_00080da0",
            "code": "\nundefined4 updateParameter_00080da0(int deviceAddress,int paramType,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(paramType) {\n  case 1:\n  case 2:\n    updateValue(deviceAddress,paramType,newValue);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(deviceAddress + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(deviceAddress + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    updateParamValues(deviceAddress,newValue,flags,0x80d55,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    setParamValues(deviceAddress,newValue,paramType == 5,(flags << 0x1d) >> 0x1f,flags & 1,paramType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_parameter_00080da0",
                "param_1": "deviceAddress",
                "param_2": "paramType",
                "param_3": "newValue",
                "param_4": "flags",
                "bVar1": "isNegative",
                "update_value_00080d2e": "updateValue",
                "update_param_values_00080d54": "updateParamValues",
                "set_param_values_00080d7a": "setParamValues"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_permissions_00080e04",
            "code": "\nuint check_permissions_00080e04(int ptr_data,uint permission_mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(ptr_data + 8) & permission_mask;\n  if (result != 0) {\n    if ((permission_mask & *(uint *)(ptr_data + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_permissions_00080e04",
                "param_1": "ptr_data",
                "param_2": "permission_mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndSetBit_00080e18(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "array"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  process_data_loop_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_value_00080f9c",
            "code": "\nundefined4 calculateThresholdValue_00080f9c(undefined4 *outputArray,uint inputValue,int constantA,int constantB)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholdArray [16];\n  \n  thresholdArray[0] = 0;\n  thresholdArray[1] = 8;\n  thresholdArray[2] = 0x10;\n  thresholdArray[3] = 0x18;\n  thresholdArray[4] = 0x40;\n  thresholdArray[5] = 0x50;\n  thresholdArray[6] = 0x60;\n  thresholdArray[7] = 0x70;\n  thresholdArray[8] = 0x200;\n  thresholdArray[9] = 0x240;\n  thresholdArray[10] = 0x280;\n  thresholdArray[11] = 0x2c0;\n  thresholdArray[12] = 0x300;\n  thresholdArray[13] = 0x340;\n  thresholdArray[14] = 0x380;\n  thresholdArray[15] = 0x3c0;\n  *outputArray = 1;\n  outputArray[1] = 0;\n  outputArray[0x48] = 0x202;\n  outputArray[0x41] = 0;\n  outputArray[0x45] = 0;\n  quotient = inputValue / (uint)(constantA * 2);\n  if (inputValue == constantA * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(constantB * (int)(((ulonglong)inputValue / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholdArray[index]) {\n      outputArray[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | outputArray[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_value_00080f9c",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "constantA",
                "param_4": "constantB",
                "local_58": "thresholdArray",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "set_flag_in_memory_00081034",
            "code": "\nvoid setFlagInMemory_00081034(int memoryAddress,uint flagValue,uint bitValue)\n\n{\n  *(uint *)(memoryAddress + 4) = flagValue | *(uint *)(memoryAddress + 4) | (bitValue & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "set_flag_in_memory_00081034",
                "param_1": "memoryAddress",
                "param_2": "flagValue",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_flags_00081042",
            "code": "\nvoid updateFlags_00081042(int dataPtr,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataPtr + 4) =\n       value2 | *(uint *)(dataPtr + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int functionPointer,uint bitIndex)\n\n{\n  *(int *)(functionPointer + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "functionPointer",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_memory_00081066",
            "code": "\nvoid initializeMemory_00081066(int memAddress)\n\n{\n  *(undefined4 *)(memAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_memory_00081066",
                "param_1": "memAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nvoid initialize_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184",
                "undefined4": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int input)\n\n{\n  int previousSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSum = DAT_20071180;\n  DAT_20071180 = input + DAT_20071180;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "input",
                "iVar1": "previousSum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_default_value_000811ae",
            "code": "\nuint32_t get_default_value_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_default_value_000811ae",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param_1,int offset)\n\n{\n  *(undefined4 *)(offset + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_2": "offset"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_program_000811be",
            "code": "\nundefined4 initializeProgram_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_program_000811be"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_default_value_000811c2",
            "code": "\nundefined4 get_default_value_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_default_value_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_return_value_000811c6",
            "code": "\nundefined4 getReturnValue_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_return_value_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "update_bytes_000811cc",
            "code": "\n\n\nuint updateBytes_000811cc(undefined4 data,int source,uint size)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)size; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return size & ~((int)size >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "update_bytes_000811cc",
                "param_1": "data",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_global_data_thunk_00081714",
            "code": "\nundefined4 getGlobalData_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_global_data_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "update_parameter_00081210",
            "code": "\n\n\nint updateParameter_00081210(int index,int type)\n\n{\n  int result;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte mask1;\n  byte mask2;\n  int offset;\n  int param;\n  \n  result = index;\n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 4) {\n      result = setBit(0x400c0000,(&DAT_00084d31)[index * 0x1c]);\n    }\n    mask2 = (&DAT_20070d94)[index];\n    mask1 = mask2 & 0xf;\n    if ((mask1 < 3) && (mask2 != 0)) {\n      if (mask1 == 2) {\n        if (type == 0) {\n          return result;\n        }\n      }\n      else if (mask1 == 1) {\n        if (type == 2) {\n          return result;\n        }\n      }\n      else if (mask1 == 3) {\n        if (type == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (type != 1) {\nLAB_0008126c:\n      if (type == 0) {\n        result = index * 0x1c;\n        checkAndSetBit(*(undefined4 *)(&DAT_00084d20 + result));\n        result = updateParameter_000812102(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        mask2 = (&DAT_20070d94)[index] & 0xf0 | 2;\n      }\n      else {\n        if (type != 2) {\n          return result;\n        }\n        result = index * 0x1c;\n        checkAndSetBit(*(undefined4 *)(&DAT_00084d20 + result));\n        result = updateParameter_000812102(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        mask2 = (&DAT_20070d94)[index] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[index] = mask2;\n      return result;\n    }\n    offset = index * 0x1c;\n    param = *(int *)(&DAT_00084d18 + offset);\n    if (mask2 >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    result = updateParameter_000812102(param,tempVar2,*(undefined4 *)(&DAT_00084d1c + offset),\n                         *(undefined4 *)(&DAT_00084d28 + offset));\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf0 | 3;\n    if (*(int *)(param + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084d20 + offset);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "update_parameter_00081210",
                "param_1": "index",
                "param_2": "type",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "mask1",
                "bVar6": "mask2",
                "iVar7": "offset",
                "iVar8": "param",
                "set_bit_0008105c": "setBit",
                "check_and_set_bit_00080e18": "checkAndSetBit",
                "update_parameter_00080da0": "updateParameter2"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_parameter_permissions_00081318",
            "code": "\nvoid updateParameterPermissions_00081318(int index,int value,undefined4 newValue)\n\n{\n  int permissionCheckResult;\n  undefined4 permissionValue;\n  int parameterAddress;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      update_parameter_00081210(index,1,newValue,5,index,value,newValue);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    parameterAddress = *(int *)(&DAT_00084d18 + index * 0x1c);\n    permissionValue = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    permissionCheckResult = check_permissions_00080e04(parameterAddress,permissionValue);\n    if (permissionCheckResult == 0) {\n      if (value != 0) {\n        *(undefined4 *)(parameterAddress + 100) = permissionValue;\n        return;\n      }\n      *(undefined4 *)(parameterAddress + 0x60) = permissionValue;\n      return;\n    }\n    set_param_values_00080d7a(parameterAddress,permissionValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_parameter_permissions_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "newValue",
                "iVar1": "permissionCheckResult",
                "uVar2": "permissionValue",
                "iVar3": "parameterAddress"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_function_if_condition_met_00081388",
            "code": "\nvoid executeFunctionIfConditionMet_00081388(void)\n\n{\n  if ((relocationArray[6].relocationInfo != 0xffffffff) &&\n     (relocationArray[6].relocationInfo = relocationArray[6].relocationInfo - 1,\n     relocationArray[6].relocationInfo == 0)) {\n    (*(code *)((int)&relocationArray[0].relocationOffset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_function_if_condition_met_00081388",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "relocationInfo",
                "r_offset": "relocationOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_buffer_000813a8",
            "code": "\nint initializeBuffer_000813a8(int buffer)\n\n{\n  copyAndPadBuffer(buffer,0,0x80);\n  *(undefined4 *)(buffer + 0x80) = 0;\n  *(undefined4 *)(buffer + 0x84) = 0;\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_buffer_000813a8",
                "param_1": "buffer",
                "copy_and_pad_buffer_00082504": "copyAndPadBuffer"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_buffer_000813c2",
            "code": "\nvoid updateBuffer_000813c2(int bufferAddress,undefined newData)\n\n{\n  uint newAddress;\n  \n  newAddress = *(int *)(bufferAddress + 0x80) + 1U & 0x7f;\n  if (newAddress != *(uint *)(bufferAddress + 0x84)) {\n    *(undefined *)(bufferAddress + *(int *)(bufferAddress + 0x80)) = newData;\n    *(uint *)(bufferAddress + 0x80) = newAddress;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_buffer_000813c2",
                "param_1": "bufferAddress",
                "param_2": "newData",
                "uVar1": "newAddress"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPointer,undefined4 newData)\n\n{\n  int offset;\n  uint currentValue;\n  \n  offset = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(offset + 0x84) == *(int *)(offset + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newData;\n  }\n  else {\n    currentValue = *(int *)(offset + 0x80) + 1U & 0x8000007f;\n    if ((int)currentValue < 0) {\n      currentValue = (currentValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(offset + 0x84) == currentValue);\n    *(char *)(offset + *(int *)(offset + 0x80)) = (char)newData;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = currentValue;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPointer",
                "param_2": "newData",
                "iVar1": "offset",
                "uVar2": "currentValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_params_000814e4",
            "code": "\nvoid initializeParams_000814e4(undefined4 *params,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  params[1] = 0;\n  params[2] = 1000;\n  params[6] = value1;\n  *params = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(params + 7) = value2;\n  params[4] = value4;\n  params[8] = value3;\n  params[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_params_000814e4",
                "param_1": "params",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_peripheral_00081508",
            "code": "\nvoid initializePeripheral_00081508(int peripheralAddress,uint divisor,undefined4 initValue)\n\n{\n  int tempVar1;\n  undefined4 *peripheralData;\n  \n  check_and_set_bit_00080e18(*(undefined4 *)(peripheralAddress + 0x20));\n  peripheralData = *(undefined4 **)(peripheralAddress + 0x18);\n  peripheralData[0x48] = 0x202;\n  *peripheralData = 0xac;\n  peripheralData[1] = initValue;\n  peripheralData[8] = array[6].offset / divisor >> 4;\n  peripheralData[3] = 0xffffffff;\n  peripheralData[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(peripheralAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(peripheralAddress + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(peripheralAddress + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(peripheralAddress + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *peripheralData = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_peripheral_00081508",
                "param_1": "peripheralAddress",
                "param_2": "divisor",
                "param_3": "initValue",
                "iVar1": "tempVar1",
                "puVar2": "peripheralData",
                "Elf32_Rel_ARRAY_20070000": "array",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_and_set_params_000815d4",
            "code": "\nundefined4 * initialize_and_set_params_000815d4(undefined4 *output_array,undefined4 input_param)\n\n{\n  initialize_params();\n  *output_array = &PTR_update_data_00081454_1_000857d8;\n  output_array[9] = input_param;\n  return output_array;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_and_set_params_000815d4",
                "param_1": "output_array",
                "param_2": "input_param",
                "initialize_params_000814e4": "initialize_params",
                "param_1[9]": "output_array[9]"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "process_relocation_000815fe",
            "code": "\nundefined4 * process_relocation_000815fe(undefined4 *relocation_entry)\n\n{\n  process_relocation_000815fe_entry_00081e04(*relocation_entry);\n  return relocation_entry;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "process_relocation_000815fe",
                "param_1": "relocation_entry"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_relocation_entry_0008160c",
            "code": "\nvoid reset_relocation_entry_0008160c(int *relocation_entry)\n\n{\n  if (*relocation_entry != 0) {\n    process_relocation_entry_00081e04();\n  }\n  *relocation_entry = 0;\n  relocation_entry[2] = 0;\n  relocation_entry[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_relocation_entry_0008160c",
                "param_1": "relocation_entry"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "init_and_allocate_memory_00081622",
            "code": "\nint init_and_allocate_memory_00081622(int *ptr_param_1,int param_2_count,undefined4 param_3_value,undefined4 param_4_value)\n\n{\n  int result;\n  \n  result = initialize_and_allocate_memory_000825a0(*ptr_param_1,param_2_count + 1,param_3_value,param_4_value,param_4_value);\n  if (result != 0) {\n    *ptr_param_1 = result;\n    ptr_param_1[1] = param_2_count;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "init_and_allocate_memory_00081622",
                "param_1": "ptr_param_1",
                "param_2": "param_2_count",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_allocate_memory_0008163a",
            "code": "\nundefined4 check_and_allocate_memory_0008163a(int *array,uint size)\n\n{\n  int result;\n  \n  if ((*array == 0) || ((uint)array[1] < size)) {\n    result = init_and_allocate_memory_00081622(array);\n    if (result == 0) {\n      return 0;\n    }\n    if (array[2] == 0) {\n      *(undefined *)*array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_allocate_memory_0008163a",
                "param_1": "array",
                "param_2": "size",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "initialize_memory_0008165c",
            "code": "\nundefined4 * initializeMemory_0008165c(undefined4 *memoryPtr,undefined4 sourceString,undefined4 size)\n\n{\n  int allocationStatus;\n  \n  allocationStatus = check_and_allocate_memory_0008163a(memoryPtr,size);\n  if (allocationStatus == 0) {\n    reset_relocation_entry_0008160c(memoryPtr);\n  }\n  else {\n    memoryPtr[2] = size;\n    string_copy_00082994(*memoryPtr,sourceString);\n  }\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "initialize_memory_0008165c",
                "param_1": "memoryPtr",
                "param_2": "sourceString",
                "param_3": "size",
                "iVar1": "allocationStatus"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_memory_00081682",
            "code": "\nundefined4 * initializeMemory_00081682(undefined4 *result,int input)\n\n{\n  undefined4 leadingZeros;\n  \n  *result = 0;\n  result[1] = 0;\n  result[2] = 0;\n  if (input != 0) {\n    leadingZeros = count_leading_zeros_00082a50(input);\n    initialize_memory_0008165c(result,input,leadingZeros);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_memory_00081682",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "leadingZeros"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "process_data_loop_000816a8",
            "code": "\nvoid process_data_loop_000816a8(void)\n\n{\n  initialize_data();\n  initialize_memory_and_parameters();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initialize_system_configuration();\n  do {\n    process_data();\n    calculate_and_handle_differences();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "process_data_loop_000816a8",
                "initialize_data_000816d4": "initialize_data",
                "initialize_memory_and_parameters_00080ae4": "initialize_memory_and_parameters",
                "initialize_system_configuration_000804a8": "initialize_system_configuration",
                "process_data_000805d0": "process_data",
                "calculate_and_handle_differences_00080ce0": "calculate_and_handle_differences"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initializeData_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_value_00081714",
            "code": "\nundefined4 get_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_value_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculateFloat_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint modifiedInput2;\n  uint modifiedTemp1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isConditionMet;\n  \n  modifiedInput2 = input2 ^ 0x80000000;\n  temp1 = input1 << 1;\n  isConditionMet = temp1 == 0;\n  if (!isConditionMet) {\n    input4 = input2 << 1;\n    isConditionMet = input4 == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = temp1 == input4;\n  }\n  shiftedInput1 = (int)temp1 >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shiftedInput1 == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)input4 >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      temp1 = modifiedInput2;\n      if (shiftedInput1 == -1) {\n        temp1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        modifiedInput2 = temp1;\n      }\n      isConditionMet = (temp1 & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (modifiedInput2 & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = temp1 == modifiedInput2;\n      }\n      if (!isConditionMet) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ modifiedInput2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = modifiedInput2;\n      }\n      return input1;\n    }\n    if (input1 != modifiedInput2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      modifiedInput2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        modifiedInput2 = modifiedInput2 | 0x80000000;\n      }\n      return modifiedInput2;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp3 = input4 - temp1;\n  isConditionMet = temp3 != 0;\n  temp2 = temp1;\n  if (isConditionMet && temp1 <= input4) {\n    temp2 = temp1 + temp3;\n  }\n  if (isConditionMet && temp1 <= input4) {\n    modifiedInput2 = modifiedInput2 ^ input1;\n  }\n  if (isConditionMet && temp1 <= input4) {\n    input1 = input1 ^ modifiedInput2;\n  }\n  if (isConditionMet && temp1 <= input4) {\n    modifiedInput2 = modifiedInput2 ^ input1;\n  }\n  if (input4 < temp1) {\n    temp3 = -temp3;\n  }\n  if (0x19 < temp3) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  modifiedTemp1 = modifiedInput2 & 0xffffff | 0x800000;\n  if ((modifiedInput2 & 0x80000000) != 0) {\n    modifiedTemp1 = -modifiedTemp1;\n  }\n  if (temp2 == temp3) {\n    modifiedTemp1 = modifiedTemp1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = temp1 + ((int)modifiedTemp1 >> (temp3 & 0xff));\n  modifiedTemp1 = modifiedTemp1 << (0x20 - temp3 & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isConditionMet = modifiedTemp1 != 0;\n    modifiedTemp1 = -modifiedTemp1;\n    temp1 = -temp1 - (uint)isConditionMet;\n  }\n  if (temp1 < 0x800000) {\n    modifiedInput2 = modifiedTemp1 & 0x80000000;\n    modifiedTemp1 = modifiedTemp1 << 1;\n    temp1 = temp1 * 2 + (uint)(modifiedInput2 != 0);\n    modifiedInput2 = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp3 = leadingZeroCount(temp1) - 8;\n      temp1 = temp1 << (temp3 & 0xff);\n      if ((int)modifiedInput2 < (int)temp3) {\n        temp1 = temp1 >> (-(modifiedInput2 - temp3) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (modifiedInput2 - temp3) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    modifiedInput2 = temp2 - 1;\n    if (0xffffff < temp1) {\n      modifiedInput2 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      modifiedTemp1 = (uint)(modifiedInput2 != 0) << 0x1f | modifiedTemp1 >> 1;\n      modifiedInput2 = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + modifiedInput2 * 0x800000 + (uint)(0x7fffffff < modifiedTemp1);\n  if (modifiedTemp1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "modifiedInput2",
                "uVar4": "modifiedTemp1",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "bVar8": "isConditionMet",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_number_00081734",
            "code": "\nuint calculateFloatingPointNumber_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  \n  temp1 = input1 << 1;\n  isZero = temp1 == 0;\n  if (!isZero) {\n    input4 = input2 << 1;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = temp1 == input4;\n  }\n  shiftedInput1 = (int)temp1 >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)input4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      temp1 = input2;\n      if (shiftedInput1 == -1) {\n        temp1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = temp1;\n      }\n      isZero = (temp1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = temp1 == input2;\n      }\n      if (!isZero) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp3 = input4 - temp1;\n  isZero = temp3 != 0;\n  temp2 = temp1;\n  if (isZero && temp1 <= input4) {\n    temp2 = temp1 + temp3;\n  }\n  if (isZero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && temp1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < temp1) {\n    temp3 = -temp3;\n  }\n  if (0x19 < temp3) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp2 == temp3) {\n    result1 = result1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result1 >> (temp3 & 0xff));\n  result1 = result1 << (0x20 - temp3 & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    temp1 = -temp1 - (uint)isZero;\n  }\n  if (temp1 < 0x800000) {\n    temp3 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    temp1 = temp1 * 2 + (uint)(temp3 != 0);\n    temp3 = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)temp3 < (int)temp2) {\n        temp1 = temp1 >> (-(temp3 - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (temp3 - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    temp3 = temp2 - 1;\n    if (0xffffff < temp1) {\n      temp3 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result1 = (uint)(temp3 != 0) << 0x1f | result1 >> 1;\n      temp3 = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + temp3 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_number_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "bVar7": "isZero"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_modified_value_00081894",
            "code": "\nuint calculateModifiedValue_00081894(uint inputValue)\n\n{\n  uint leadingZerosCount;\n  uint shiftedLZCount;\n  int intermediateValue;\n  uint shiftedZeroFlag;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZerosCount = LZCOUNT(inputValue);\n  shiftedLZCount = leadingZerosCount - 8;\n  intermediateValue = shiftedLZCount * -0x800000 + 0x4a800000;\n  if (7 < leadingZerosCount) {\n    shiftedZeroFlag = 0 << (shiftedLZCount & 0xff);\n    leadingZerosCount = intermediateValue + (inputValue << (shiftedLZCount & 0xff)) +\n            (0U >> (0x20 - shiftedLZCount & 0xff)) + (uint)(0x7fffffff < shiftedZeroFlag);\n    if (shiftedZeroFlag == 0x80000000) {\n      leadingZerosCount = leadingZerosCount & 0xfffffffe;\n    }\n    return leadingZerosCount;\n  }\n  shiftedLZCount = inputValue << leadingZerosCount + 0x18;\n  leadingZerosCount = intermediateValue + ((inputValue >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftedLZCount >> 0x1f));\n  if ((shiftedLZCount & 0x7fffffff) == 0) {\n    leadingZerosCount = leadingZerosCount & ~(shiftedLZCount >> 0x1f);\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_modified_value_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftedLZCount",
                "iVar3": "intermediateValue",
                "uVar4": "shiftedZeroFlag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_modified_value_0008189c",
            "code": "\nuint calculateModifiedValue_0008189c(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint shiftAmount;\n  uint isNegative;\n  int modifiedValue;\n  \n  isNegative = inputValue & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(inputValue);\n  shiftAmount = leadingZeroes - 8;\n  modifiedValue = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeroes) {\n    leadingZeroes = 0 << (shiftAmount & 0xff);\n    isNegative = modifiedValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeroes);\n    if (leadingZeroes == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = inputValue << leadingZeroes + 0x18;\n  isNegative = modifiedValue + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_modified_value_0008189c",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "modifiedValue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_float_value_00081944",
            "code": "\nuint calculateFloatValue_00081944(uint number1,uint number2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint byteValue1;\n  int sum;\n  int diff;\n  uint lowerBitsProduct;\n  int diff2;\n  uint bitsResult;\n  bool isZero;\n  bool overflow;\n  \n  byteValue1 = number1 >> 0x17 & 0xff;\n  isZero = byteValue1 == 0;\n  if (!isZero) {\n    param4 = number2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = byteValue1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = number2 >> 0x17 & 0xff;\n    if (byteValue1 == 0xff || param4 == 0xff) {\n      isZero = number1 == 0 || number1 == 0x80000000;\n      result = number2;\n      if (number1 != 0 && number1 != 0x80000000) {\n        isZero = number2 == 0;\n        result = number1;\n      }\n      if (!isZero) {\n        isZero = number2 == 0x80000000;\n      }\n      bitsResult = result;\n      if (((isZero) || ((byteValue1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (bitsResult = number2, (number2 & 0x7fffff) != 0)))) {\n        return bitsResult | 0x7fc00000;\n      }\n      result = result ^ number2;\n      goto LAB_00081a94;\n    }\n    isZero = (number1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (number2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (number1 ^ number2) & 0x80000000;\n    }\n    isZero = byteValue1 == 0;\n    result = number1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        number1 = number1 << 1;\n        isZero = (number1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      byteValue1 = byteValue1 - 1;\n    }\n    number1 = number1 | result;\n    isZero = param4 == 0;\n    result = number2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        number2 = number2 << 1;\n        isZero = (number2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    number2 = number2 | result;\n  }\n  sum = byteValue1 + param4;\n  bitsResult = number1 ^ number2;\n  byteValue1 = number1 << 9;\n  isZero = byteValue1 == 0;\n  if (!isZero) {\n    number2 = number2 << 9;\n    isZero = number2 == 0;\n  }\n  if (isZero) {\n    if (byteValue1 == 0) {\n      number2 = number2 << 9;\n    }\n    result = bitsResult & 0x80000000 | number1 & 0x7fffff | number2 >> 9;\n    overflow = subtractOverflow(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero = diff == 0;\n    diff2 = diff;\n    if (!isZero && 0x7e < sum) {\n      overflow = subtractOverflow(0xff,diff);\n      diff2 = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && diff2 < 0 == overflow) {\n      result = result | diff * 0x800000;\n    }\n    if (!isZero && diff2 < 0 == overflow) {\n      return result;\n    }\n    result = result | 0x800000;\n    lowerBitsProduct = 0;\n    overflow = subtractOverflow(diff,1);\n    bitsResult = sum - 0x80;\n    isZero = bitsResult == 0;\n    byteValue1 = bitsResult;\n  }\n  else {\n    product = (ulonglong)(byteValue1 >> 5 | 0x8000000) * (ulonglong)(number2 >> 5 | 0x8000000);\n    lowerBitsProduct = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | lowerBitsProduct >> 0x1f;\n      lowerBitsProduct = lowerBitsProduct << 1;\n    }\n    result = bitsResult & 0x80000000 | result;\n    bitsResult = (sum + -0x7f) - (uint)isZero;\n    overflow = subtractOverflow(bitsResult,0xfd);\n    isZero = bitsResult == 0xfd;\n    byteValue1 = bitsResult - 0xfd;\n    if (bitsResult < 0xfe) {\n      result = result + bitsResult * 0x800000 + (uint)(0x7fffffff < lowerBitsProduct);\n      if (lowerBitsProduct == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)byteValue1 < 0 != overflow) {\n    isZero = (int)(bitsResult + 0x19) < 0;\n    if (bitsResult == 0xffffffe7 || isZero != addOverflow(bitsResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (bitsResult != 0xffffffe7 && isZero == addOverflow(bitsResult,0x19)) {\n      byteValue1 = (result << 1) >> (-bitsResult & 0xff);\n      bitsResult = result << (bitsResult + 0x20 & 0xff);\n      byteValue1 = ((uint)((result & 0x80000000) != 0) << 0x1f | byteValue1 >> 1) + (uint)((byte)byteValue1 & 1);\n      if ((lowerBitsProduct | bitsResult << 1) == 0) {\n        byteValue1 = byteValue1 & ~(bitsResult >> 0x1f);\n      }\n      return byteValue1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_float_value_00081944",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "byteValue1",
                "iVar4": "sum",
                "iVar5": "diff",
                "uVar6": "lowerBitsProduct",
                "iVar7": "diff2",
                "uVar8": "bitsResult",
                "bVar9": "isZero",
                "bVar10": "overflow",
                "SBORROW4": "subtractOverflow",
                "SCARRY4": "addOverflow"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "calculate_result_00081bf4",
            "code": "\nuint calculate_result_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative_result;\n  uint twice_input_1;\n  uint twice_input_2;\n  uint combined_inputs;\n  bool is_zero_combined;\n  \n  twice_input_1 = input_1 * 2;\n  twice_input_2 = input_2 * 2;\n  if (((int)twice_input_1 >> 0x18 == -1 || (int)twice_input_2 >> 0x18 == -1) &&\n     ((((int)twice_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)twice_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = twice_input_1 | input_2 & 0x7fffffff;\n  is_zero_combined = combined_inputs == 0;\n  if (!is_zero_combined) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero_combined = combined_inputs == 0;\n  }\n  is_negative_result = -1 < (int)combined_inputs;\n  if (is_negative_result) {\n    input_1 = twice_input_1 + input_2 * -2;\n    is_zero_combined = input_1 == 0;\n  }\n  if ((is_negative_result && twice_input_2 <= twice_input_1) && !is_zero_combined) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_result || twice_input_2 > twice_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero_combined) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "calculate_result_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "twice_input_1",
                "uVar3": "twice_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative_result",
                "bVar5": "is_zero_combined"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "concatenate_params_00081c54",
            "code": "\nvoid concatenateParams_00081c54(undefined4 paramA,undefined4 paramB)\n\n{\n  concatenate_params_00081c5c(paramB,paramA);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "concatenate_params_00081c54",
                "param_1": "paramA",
                "param_2": "paramB"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenateParams_00081c5c(undefined4 firstParam,undefined4 secondParam)\n\n{\n  calculate_result_00081bf4();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_params_and_return_result_00081c94",
            "code": "\nbool check_params_and_return_result_00081c94(void)\n\n{\n  undefined is_concatenation_zero_result;\n  undefined is_concatenation_successful;\n  \n  concatenate_params_00081c5c();\n  return !(bool)is_concatenation_successful || (bool)is_concatenation_zero_result;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_params_and_return_result_00081c94",
                "in_CY": "is_concatenation_successful",
                "in_ZR": "is_concatenation_zero_result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_concated_params_validity_00081ca8",
            "code": "\nbool checkConcatedParamsValidity_00081ca8(void)\n\n{\n  undefined concatParam1;\n  undefined concatParam2;\n  \n  concatenate_params_00081c54();\n  return !(bool)concatParam2 || (bool)concatParam1;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_concated_params_validity_00081ca8",
                "in_ZR": "concatParam1",
                "in_CY": "concatParam2"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "extract_integer_00081cd0",
            "code": "\nuint extract_integer_00081cd0(uint original_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (original_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (original_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (original_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((original_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((original_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  original_value = original_value & 0x80000000;\n  if (original_value == 0) {\n    original_value = 0x7fffffff;\n  }\n  return original_value;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "extract_integer_00081cd0",
                "param_1": "original_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "bitwise_shift_operation_00081d1c",
            "code": "\nuint bitwise_shift_operation_00081d1c(uint input_value)\n\n{\n  uint shift_count;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_count = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_count) {\n    return (input_value << 8 | 0x80000000) >> (shift_count & 0xff);\n  }\n  if ((shift_count == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "bitwise_shift_operation_00081d1c",
                "param_1": "input_value",
                "uVar1": "shift_count"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword newValue,dword dataAddress,dword bitmask)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitPosition;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)initialize_memory_block_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitPosition = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = newValue;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitPosition;\n  relocationEntry[index + 0x42] = bitmask;\n  relocationEntry[99] = bitPosition | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = dataAddress;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "newValue",
                "param_2": "dataAddress",
                "param_3": "bitmask",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitPosition"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_function_set_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_function_set_00081d7c(void)\n\n{\n  int iteration_count;\n  code **function_list;\n  \n  FUNC_00085858();\n  function_list = (code **)0x85860;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_list = function_list + 1;\n    (**function_list)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_function_set_00081d7c",
                "iVar1": "iteration_count",
                "ppcVar2": "function_list"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "initialize_memory_block_00081df4",
            "code": "\nvoid initializeMemoryBlock_00081df4(undefined4 parameter1)\n\n{\n  allocate_and_initialize_memory_block_00081e14(relArray[140].offset,parameter1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "initialize_memory_block_00081df4",
                "param_1": "parameter1",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "process_relocation_entry_00081e04",
            "code": "\nvoid process_relocation_entry_00081e04(undefined4 input_parameter)\n\n{\n  process_relocation_entries_00083d9c(relocation_array[140].offset,input_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "process_relocation_entry_00081e04",
                "param_1": "input_parameter",
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_and_initialize_memory_block_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_initialize_memory_block_00081e14(undefined4 *output_pointer,uint size)\n\n{\n  dword rel_info_1;\n  int temporary_var_1;\n  uint temporary_var_2;\n  uint temporary_var_3;\n  int temporary_var_4;\n  uint temporary_var_5;\n  dword rel_info_2;\n  uint temporary_var_6;\n  int temporary_var_7;\n  undefined *ptr_1;\n  dword rel_info_3;\n  dword rel_info_4;\n  int temporary_var_8;\n  dword *ptr_2;\n  uint aligned_size;\n  undefined *ptr_3;\n  dword *ptr_4;\n  uint temporary_var_9;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081e7a:\n      *output_pointer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(output_pointer);\n  rel_info_1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size < 0x1f8) {\n    temporary_var_8 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size);\n    if ((temporary_var_8 != aligned_size + 0x20070464) ||\n       (temporary_var_1 = temporary_var_8 + 8, temporary_var_8 = *(int *)(temporary_var_8 + 0x14), temporary_var_1 != temporary_var_8)) {\n      temporary_var_4 = *(int *)(temporary_var_8 + 0xc);\n      temporary_var_7 = (*(uint *)(temporary_var_8 + 4) & 0xfffffffc) + temporary_var_8;\n      aligned_size = *(uint *)(temporary_var_7 + 4);\n      temporary_var_1 = *(int *)(temporary_var_8 + 8);\n      *(int *)(temporary_var_1 + 0xc) = temporary_var_4;\n      *(int *)(temporary_var_4 + 8) = temporary_var_1;\n      *(uint *)(temporary_var_7 + 4) = aligned_size | 1;\n      FUNC_0008259c(output_pointer);\n      return (int *)(temporary_var_8 + 8);\n    }\n    temporary_var_9 = (aligned_size >> 3) + 2;\n  }\n  else {\n    temporary_var_9 = aligned_size >> 9;\n    if (temporary_var_9 == 0) {\n      temporary_var_1 = 0x7e;\n      temporary_var_8 = 0x3f;\n    }\n    else if (temporary_var_9 < 5) {\n      temporary_var_8 = (aligned_size >> 6) + 0x38;\n      temporary_var_1 = temporary_var_8 * 2;\n    }\n    else if (temporary_var_9 < 0x15) {\n      temporary_var_8 = temporary_var_9 + 0x5b;\n      temporary_var_1 = temporary_var_8 * 2;\n    }\n    else if (temporary_var_9 < 0x55) {\n      temporary_var_8 = (aligned_size >> 0xc) + 0x6e;\n      temporary_var_1 = temporary_var_8 * 2;\n    }\n    else if (temporary_var_9 < 0x155) {\n      temporary_var_8 = (aligned_size >> 0xf) + 0x77;\n      temporary_var_1 = temporary_var_8 * 2;\n    }\n    else if (temporary_var_9 < 0x555) {\n      temporary_var_8 = (aligned_size >> 0x12) + 0x7c;\n      temporary_var_1 = temporary_var_8 * 2;\n    }\n    else {\n      temporary_var_1 = 0xfc;\n      temporary_var_8 = 0x7e;\n    }\n    for (rel_info_2 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temporary_var_1]; temporary_var_1 * 4 + 0x20070464U != rel_info_2\n        ; rel_info_2 = *(dword *)(rel_info_2 + 0xc)) {\n      temporary_var_9 = *(uint *)(rel_info_2 + 4) & 0xfffffffc;\n      temporary_var_4 = temporary_var_9 - aligned_size;\n      if (0xf < temporary_var_4) {\n        temporary_var_8 = temporary_var_8 + -1;\n        break;\n      }\n      if (-1 < temporary_var_4) {\n        temporary_var_1 = temporary_var_9 + rel_info_2;\n        aligned_size = *(uint *)(temporary_var_1 + 4);\n        temporary_var_4 = *(int *)(rel_info_2 + 0xc);\n        temporary_var_8 = *(int *)(rel_info_2 + 8);\n        *(int *)(temporary_var_8 + 0xc) = temporary_var_4;\n        *(int *)(temporary_var_4 + 8) = temporary_var_8;\n        *(uint *)(temporary_var_1 + 4) = aligned_size | 1;\n        FUNC_0008259c(output_pointer);\n        return (int *)(rel_info_2 + 8);\n      }\n    }\n    temporary_var_9 = temporary_var_8 + 1;\n  }\n  rel_info_2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temporary_var_2 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temporary_var_3 = temporary_var_2 & 0xfffffffc;\n    temporary_var_5 = temporary_var_3 - aligned_size;\n    if (0xf < (int)temporary_var_5) {\n      rel_info_2 = aligned_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = rel_info_2;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = rel_info_2;\n      *(undefined4 *)(rel_info_2 + 0xc) = 0x2007046c;\n      *(undefined4 *)(rel_info_2 + 8) = 0x2007046c;\n      *(uint *)(rel_info_2 + 4) = temporary_var_5 | 1;\n      *(uint *)(rel_info_2 + temporary_var_5) = temporary_var_5;\n      FUNC_0008259c(output_pointer);\n      return (int *)(rel_info_1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temporary_var_5) {\n      *(uint *)(temporary_var_3 + rel_info_1 + 4) = *(uint *)(temporary_var_3 + rel_info_1 + 4) | 1;\n      FUNC_0008259c(output_pointer);\n      return (int *)(rel_info_1 + 8);\n    }\n    if (temporary_var_3 < 0x200) {\n      temporary_var_3 = temporary_var_2 & 0xfffffff8;\n      temporary_var_8 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temporary_var_3);\n      rel_info_2 = 1 << ((int)(temporary_var_2 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(rel_info_1 + 8) = temporary_var_8;\n      *(uint *)(rel_info_1 + 0xc) = temporary_var_3 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = rel_info_2;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temporary_var_3) = rel_info_1;\n      *(dword *)(temporary_var_8 + 0xc) = rel_info_1;\n    }\n    else {\n      temporary_var_5 = temporary_var_2 >> 9;\n      if (temporary_var_5 < 5) {\n        temporary_var_1 = (temporary_var_2 >> 6) + 0x38;\n        temporary_var_8 = temporary_var_1 * 2;\n      }\n      else if (temporary_var_5 < 0x15) {\n        temporary_var_1 = temporary_var_5 + 0x5b;\n        temporary_var_8 = temporary_var_1 * 2;\n      }\n      else if (temporary_var_5 < 0x55) {\n        temporary_var_1 = (temporary_var_2 >> 0xc) + 0x6e;\n        temporary_var_8 = temporary_var_1 * 2;\n      }\n      else if (temporary_var_5 < 0x155) {\n        temporary_var_1 = (temporary_var_2 >> 0xf) + 0x77;\n        temporary_var_8 = temporary_var_1 * 2;\n      }\n      else if (temporary_var_5 < 0x555) {\n        temporary_var_1 = (temporary_var_2 >> 0x12) + 0x7c;\n        temporary_var_8 = temporary_var_1 * 2;\n      }\n      else {\n        temporary_var_8 = 0xfc;\n        temporary_var_1 = 0x7e;\n      }\n      rel_info_2 = temporary_var_8 * 4 + 0x20070464;\n      rel_info_3 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temporary_var_8];\n      if (rel_info_3 == rel_info_2) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temporary_var_1 >> 2 & 0xffU);\n        rel_info_4 = rel_info_3;\n      }\n      else {\n        do {\n          rel_info_4 = rel_info_3;\n          if ((*(uint *)(rel_info_3 + 4) & 0xfffffffc) <= temporary_var_3) break;\n          rel_info_3 = *(dword *)(rel_info_3 + 8);\n          rel_info_4 = rel_info_3;\n        } while (rel_info_2 != rel_info_3);\n        rel_info_3 = *(dword *)(rel_info_4 + 0xc);\n      }\n      rel_info_2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(rel_info_1 + 0xc) = rel_info_3;\n      *(dword *)(rel_info_1 + 8) = rel_info_4;\n      *(dword *)(rel_info_3 + 8) = rel_info_1;\n      *(dword *)(rel_info_4 + 0xc) = rel_info_1;\n    }\n  }\n  rel_info_1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temporary_var_2 = 1 << ((int)temporary_var_9 >> 2 & 0xffU);\n  if (temporary_var_2 <= rel_info_2) {\n    if ((rel_info_2 & temporary_var_2) == 0) {\n      temporary_var_9 = temporary_var_9 & 0xfffffffc;\n      do {\n        temporary_var_2 = temporary_var_2 << 1;\n        temporary_var_9 = temporary_var_9 + 4;\n      } while ((rel_info_2 & temporary_var_2) == 0);\n    }\n    do {\n      ptr_4 = &Elf32_Rel_ARRAY_20070000[temporary_var_9 + 0x8c].r_info;\n      ptr_2 = ptr_4;\n      temporary_var_3 = temporary_var_9;\n      do {\n        for (ptr_1 = (undefined *)ptr_2[3]; ptr_2 != (dword *)ptr_1;\n            ptr_1 = *(undefined **)(ptr_1 + 0xc)) {\n          temporary_var_5 = *(uint *)(ptr_1 + 4) & 0xfffffffc;\n          temporary_var_6 = temporary_var_5 - aligned_size;\n          if (0xf < (int)temporary_var_6) {\n            temporary_var_1 = *(int *)(ptr_1 + 8);\n            temporary_var_8 = *(int *)(ptr_1 + 0xc);\n            ptr_3 = ptr_1 + aligned_size;\n            *(uint *)(ptr_1 + 4) = aligned_size | 1;\n            *(int *)(temporary_var_1 + 0xc) = temporary_var_8;\n            *(int *)(temporary_var_8 + 8) = temporary_var_1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)ptr_3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)ptr_3;\n            *(undefined4 *)(ptr_3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(ptr_3 + 8) = 0x2007046c;\n            *(uint *)(ptr_3 + 4) = temporary_var_6 | 1;\n            *(uint *)(ptr_3 + temporary_var_6) = temporary_var_6;\n            FUNC_0008259c(output_pointer);\n            return (int *)(ptr_1 + 8);\n          }\n          if (-1 < (int)temporary_var_6) {\n            temporary_var_8 = *(int *)(ptr_1 + 8);\n            temporary_var_1 = *(int *)(ptr_1 + 0xc);\n            *(uint *)(ptr_1 + temporary_var_5 + 4) = *(uint *)(ptr_1 + temporary_var_5 + 4) | 1;\n            *(int *)(temporary_var_8 + 0xc) = temporary_var_1;\n            *(int *)(temporary_var_1 + 8) = temporary_var_8;\n            FUNC_0008259c(output_pointer);\n            return (int *)(ptr_1 + 8);\n          }\n        }\n        temporary_var_3 = temporary_var_3 + 1;\n        ptr_2 = ptr_2 + 2;\n      } while ((temporary_var_3 & 3) != 0);\n      do {\n        temporary_var_5 = temporary_var_9 & 3;\n        ptr_1 = (undefined *)(ptr_4 + -2);\n        temporary_var_9 = temporary_var_9 - 1;\n        if (temporary_var_5 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temporary_var_2;\n          break;\n        }\n        ptr_4 = (dword *)*ptr_4;\n      } while (ptr_4 == (dword *)ptr_1);\n      temporary_var_2 = temporary_var_2 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temporary_var_2 &&\n           temporary_var_2 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temporary_var_9 = temporary_var_3, temporary_var_2 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temporary_var_2) == 0; temporary_var_2 = temporary_var_2 << 1) {\n        temporary_var_9 = temporary_var_9 + 4;\n      }\n    } while( true );\n  }\n  temporary_var_9 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= temporary_var_9) &&\n     (temporary_var_2 = temporary_var_9 - aligned_size, rel_info_2 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temporary_var_2))\n  goto LAB_0008211e;\n  temporary_var_2 = Elf32_Rel_ARRAY_20070000[141].r_info + temporary_var_9;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temporary_var_3 = aligned_size + DAT_20071190 + 0x10;\n  }\n  else {\n    temporary_var_3 = aligned_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  rel_info_2 = check_and_update_sum_00082970(output_pointer,temporary_var_3);\n  if ((rel_info_2 == 0xffffffff) || ((rel_info_2 < temporary_var_2 && (rel_info_1 != 0x20070464)))) {\n    temporary_var_9 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_info_2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temporary_var_5 = DAT_20071194 + temporary_var_3;\n    DAT_20071194 = temporary_var_5;\n    if ((temporary_var_2 == rel_info_2) && ((temporary_var_2 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temporary_var_3 + temporary_var_9 | 1;\n    }\n    else {\n      rel_info_3 = rel_info_2;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        rel_info_3 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = temporary_var_5 + (rel_info_2 - temporary_var_2);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = rel_info_3;\n      temporary_var_2 = rel_info_2 & 7;\n      if (temporary_var_2 == 0) {\n        temporary_var_8 = 0x1000;\n      }\n      else {\n        rel_info_2 = rel_info_2 + (8 - temporary_var_2);\n        temporary_var_8 = 0x1008 - temporary_var_2;\n      }\n      temporary_var_8 = temporary_var_8 - (temporary_var_3 + rel_info_2 & 0xfff);\n      temporary_var_1 = check_and_update_sum_00082970(output_pointer,temporary_var_8);\n      if (temporary_var_1 == -1) {\n        temporary_var_2 = 1;\n        temporary_var_8 = 0;\n      }\n      else {\n        temporary_var_2 = (temporary_var_1 - rel_info_2) + temporary_var_8 | 1;\n      }\n      temporary_var_5 = DAT_20071194 + temporary_var_8;\n      Elf32_Rel_ARRAY_20070000[141].r_info = rel_info_2;\n      DAT_20071194 = temporary_var_5;\n      *(uint *)(rel_info_2 + 4) = temporary_var_2;\n      if (rel_info_1 != 0x20070464) {\n        if (temporary_var_9 < 0x10) {\n          *(undefined4 *)(rel_info_2 + 4) = 1;\n          temporary_var_9 = 0;\n          goto LAB_00082108;\n        }\n        temporary_var_9 = temporary_var_9 - 0xc & 0xfffffff8;\n        *(uint *)(rel_info_1 + 4) = temporary_var_9 | *(uint *)(rel_info_1 + 4) & 1;\n        *(undefined4 *)(rel_info_1 + temporary_var_9 + 4) = 5;\n        *(undefined4 *)(rel_info_1 + temporary_var_9 + 8) = 5;\n        if (0xf < temporary_var_9) {\n          process_relocation_entries_00083d9c(output_pointer,rel_info_1 + 8);\n          temporary_var_5 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temporary_var_5) {\n      DAT_2007118c = temporary_var_5;\n    }\n    if (DAT_20071188 < temporary_var_5) {\n      DAT_20071188 = temporary_var_5;\n    }\n    temporary_var_9 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_info_2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  temporary_var_2 = temporary_var_9 - aligned_size;\n  if ((temporary_var_9 < aligned_size) || ((int)temporary_var_2 < 0x10)) {\n    FUNC_0008259c(output_pointer);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size + rel_info_2;\n  *(uint *)(rel_info_2 + 4) = aligned_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temporary_var_2 | 1;\n  FUNC_0008259c(output_pointer);\n  return (int *)(rel_info_2 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_and_initialize_memory_block_00081e14",
                "param_1": "output_pointer",
                "param_2": "size",
                "dVar1": "rel_info_1",
                "iVar2": "temporary_var_1",
                "uVar3": "temporary_var_2",
                "uVar4": "temporary_var_3",
                "iVar5": "temporary_var_4",
                "uVar6": "temporary_var_5",
                "dVar7": "rel_info_2",
                "uVar8": "temporary_var_6",
                "iVar9": "temporary_var_7",
                "puVar10": "ptr_1",
                "dVar11": "rel_info_3",
                "dVar12": "rel_info_4",
                "iVar13": "temporary_var_8",
                "pdVar14": "ptr_2",
                "uVar15": "aligned_size",
                "puVar16": "ptr_3",
                "pdVar17": "ptr_4",
                "uVar18": "temporary_var_9"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dstPtr;\n  undefined4 *srcPtr;\n  undefined4 *dstPtrTemp;\n  uint remainingSize;\n  uint adjustedSize;\n  bool isSizeRemaining;\n  \n  srcPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      adjustedSize = size - 4;\n      if (3 < size) {\n        do {\n          dstPtr = source;\n          dstPtrTemp = srcPtr;\n          isSizeRemaining = adjustedSize != 0;\n          adjustedSize = adjustedSize - 1;\n          *(undefined *)dstPtrTemp = *(undefined *)dstPtr;\n          srcPtr = (undefined4 *)((int)dstPtrTemp + 1);\n          source = (undefined4 *)((int)dstPtr + 1);\n        } while (isSizeRemaining);\n        *(undefined *)(undefined4 *)((int)dstPtrTemp + 1) =\n             *(undefined *)(undefined4 *)((int)dstPtr + 1);\n        *(undefined *)((int)dstPtrTemp + 2) = *(undefined *)((int)dstPtr + 2);\n        *(undefined *)((int)dstPtrTemp + 3) = *(undefined *)((int)dstPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      adjustedSize = 4 - ((uint)destination & 3);\n      size = size - adjustedSize;\n      dstPtr = destination;\n      dstPtrTemp = source;\n      if (((uint)destination & 1) != 0) {\n        dstPtrTemp = (undefined4 *)((int)source + 1);\n        dstPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPtr = dstPtr;\n      source = dstPtrTemp;\n      if ((adjustedSize & 2) != 0) {\n        source = (undefined4 *)((int)dstPtrTemp + 2);\n        srcPtr = (undefined4 *)((int)dstPtr + 2);\n        *(undefined2 *)dstPtr = *(undefined2 *)dstPtrTemp;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *srcPtr = *source;\n    srcPtr[1] = source[1];\n    srcPtr[2] = source[2];\n    srcPtr[3] = source[3];\n    srcPtr[4] = source[4];\n    srcPtr[5] = source[5];\n    srcPtr[6] = source[6];\n    srcPtr[7] = source[7];\n    srcPtr[8] = source[8];\n    srcPtr[9] = source[9];\n    srcPtr[10] = source[10];\n    srcPtr[0xb] = source[0xb];\n    srcPtr[0xc] = source[0xc];\n    srcPtr[0xd] = source[0xd];\n    srcPtr[0xe] = source[0xe];\n    srcPtr[0xf] = source[0xf];\n    srcPtr = srcPtr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *srcPtr = *source;\n      srcPtr[1] = source[1];\n      srcPtr[2] = source[2];\n      srcPtr[3] = source[3];\n      srcPtr = srcPtr + 4;\n      source = source + 4;\n      isSizeRemaining = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isSizeRemaining);\n  }\n  adjustedSize = remainingSize + 0xc;\n  dstPtrTemp = srcPtr;\n  dstPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = dstPtr + 1;\n      *dstPtrTemp = *dstPtr;\n      isSizeRemaining = 3 < adjustedSize;\n      adjustedSize = adjustedSize - 4;\n      srcPtr = dstPtrTemp + 1;\n      dstPtrTemp = dstPtrTemp + 1;\n      dstPtr = source;\n    } while (isSizeRemaining);\n  }\nLAB_000823d0:\n  if (adjustedSize + 4 != 0) {\n    dstPtr = srcPtr;\n    dstPtrTemp = source;\n    if ((adjustedSize & 1) != 0) {\n      dstPtrTemp = (undefined4 *)((int)source + 1);\n      dstPtr = (undefined4 *)((int)srcPtr + 1);\n      *(undefined *)srcPtr = *(undefined *)source;\n    }\n    if ((adjustedSize + 4 & 2) != 0) {\n      *(undefined2 *)dstPtr = *(undefined2 *)dstPtrTemp;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dstPtr",
                "puVar2": "srcPtr",
                "puVar3": "dstPtrTemp",
                "uVar4": "remainingSize",
                "uVar5": "adjustedSize",
                "bVar6": "isSizeRemaining"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_region_00082438",
            "code": "\nvoid copyMemoryRegion_00082438(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  int count;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint temp;\n  undefined *tempBuf;\n  uint remaining;\n  \n  if ((source < destination) && (tempPtr = (undefined4 *)((int)source + size), destination < tempPtr)) {\n    tempBuf = (undefined *)((int)destination + size);\n    count = size - 1;\n    if (size != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        count = count + -1;\n        tempBuf = tempBuf + -1;\n        *tempBuf = *(undefined *)tempPtr;\n      } while (count != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    tempPtr = destination;\n    srcPtr = source;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n    count = (size - 0x10 >> 4) + 1;\n    remaining = size & 0xf;\n    source = source + count * 4;\n    destination = destination + count * 4;\n    temp = remaining;\n    tempPtr = destination;\n    srcPtr = source;\n    if (3 < remaining) {\n      do {\n        temp = temp - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < temp);\n      count = (remaining - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + count);\n      source = (undefined4 *)((int)source + count);\n      remaining = size & 3;\n    }\n    size = remaining;\n    if (size == 0) {\n      return;\n    }\n  }\n  tempPtr = destination;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_region_00082438",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "count",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "temp",
                "puVar6": "tempBuf",
                "uVar7": "remaining"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "copy_and_pad_buffer_00082504",
            "code": "\nvoid copyAndPadBuffer_00082504(undefined4 *destBuffer,undefined value,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *tempPtr;\n  undefined4 paddedValue;\n  uint tempLength;\n  bool isLengthZero;\n  \n  if (((uint)destBuffer & 3) != 0) {\n    isLengthZero = length == 0;\n    destPtr = destBuffer;\n    length = length - 1;\n    if (isLengthZero) {\n      return;\n    }\n    while( true ) {\n      destBuffer = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      if (((uint)destBuffer & 3) == 0) break;\n      isLengthZero = length == 0;\n      destPtr = destBuffer;\n      length = length - 1;\n      if (isLengthZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    paddedValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    tempLength = length;\n    destPtr = destBuffer;\n    if (0xf < length) {\n      tempLength = length - 0x10;\n      do {\n        *destPtr = paddedValue;\n        destPtr[1] = paddedValue;\n        destPtr[2] = paddedValue;\n        destPtr[3] = paddedValue;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destBuffer + (tempLength & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      destBuffer = destBuffer + ((tempLength >> 4) + 1) * 4;\n      tempLength = length;\n      destPtr = destBuffer;\n      if (length < 4) goto LAB_00082580;\n    }\n    do {\n      length = length - 4;\n      *destBuffer = paddedValue;\n      destBuffer = destBuffer + 1;\n    } while (3 < length);\n    destBuffer = (undefined4 *)((int)destPtr + (tempLength - 4 & 0xfffffffc) + 4);\n    length = tempLength & 3;\n  }\nLAB_00082580:\n  if (length != 0) {\n    destPtr = destBuffer;\n    do {\n      tempPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = tempPtr;\n    } while (tempPtr != (undefined4 *)(length + (int)destBuffer));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "copy_and_pad_buffer_00082504",
                "param_1": "destBuffer",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "tempPtr",
                "uVar3": "paddedValue",
                "uVar4": "tempLength",
                "bVar5": "isLengthZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "initialize_and_allocate_memory_000825a0",
            "code": "\nvoid initialize_and_allocate_memory_000825a0(undefined4 arg1,undefined4 arg2)\n\n{\n  allocate_and_initialize_memory_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "initialize_and_allocate_memory_000825a0",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_and_initialize_memory_000825b0",
            "code": "\nint * allocate_and_initialize_memory_000825b0(undefined4 *param_ptr,int *memory_block,uint block_size)\n\n{\n  dword temp_var1;\n  int *result_ptr;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  int *temp_ptr1;\n  uint temp_var6;\n  uint temp_var7;\n  int *temp_ptr2;\n  \n  if (memory_block == (int *)0x0) {\n    result_ptr = (int *)allocate_and_initialize_memory_000825b0_block_00081e14(param_ptr,block_size);\n    return result_ptr;\n  }\n  FUNC_00082598();\n  temp_var4 = memory_block[-1];\n  temp_var6 = temp_var4 & 0xfffffffc;\n  result_ptr = memory_block + -2;\n  if (block_size + 0xb < 0x17) {\n    temp_var7 = 0x10;\n  }\n  else {\n    temp_var7 = block_size + 0xb & 0xfffffff8;\n    if ((int)temp_var7 < 0) goto LAB_0008267c;\n  }\n  if (temp_var7 < block_size) {\nLAB_0008267c:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_var6 < (int)temp_var7) {\n    temp_var1 = (int)result_ptr + temp_var6;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_var1) {\n      temp_var2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_var1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(temp_var7 + 0x10) <= (int)(temp_var2 + temp_var6)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)result_ptr + temp_var7;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_var2 + temp_var6) - temp_var7 | 1;\n        memory_block[-1] = temp_var7 | memory_block[-1] & 1U;\n        FUNC_0008259c(param_ptr);\n        return memory_block;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      temp_var2 = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)temp_var7 <= (int)(temp_var2 + temp_var6)) {\n        temp_var5 = *(int *)(temp_var1 + 0xc);\n        temp_var3 = *(int *)(temp_var1 + 8);\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var2 + temp_var6;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_var2 = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(temp_var4 << 0x1f)) {\n      temp_ptr2 = (int *)((int)result_ptr - memory_block[-2]);\n      temp_var4 = (temp_ptr2[1] & 0xfffffffcU) + temp_var6;\n      if (temp_var1 != 0) {\n        if (temp_var1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(temp_var7 + 0x10) <= (int)(temp_var2 + temp_var4)) {\n            result_ptr = temp_ptr2 + 2;\n            temp_var3 = *result_ptr;\n            temp_var5 = temp_ptr2[3];\n            temp_var6 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            if (temp_var6 < 0x25) {\n              temp_ptr1 = result_ptr;\n              if (0x13 < temp_var6) {\n                temp_ptr2[2] = *memory_block;\n                temp_ptr2[3] = memory_block[1];\n                if (temp_var6 < 0x1c) {\n                  memory_block = memory_block + 2;\n                  temp_ptr1 = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = memory_block[2];\n                  temp_ptr2[5] = memory_block[3];\n                  if (temp_var6 == 0x24) {\n                    temp_ptr2[6] = memory_block[4];\n                    temp_ptr1 = memory_block + 5;\n                    memory_block = memory_block + 6;\n                    temp_ptr2[7] = *temp_ptr1;\n                    temp_ptr1 = temp_ptr2 + 8;\n                  }\n                  else {\n                    memory_block = memory_block + 4;\n                    temp_ptr1 = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr1 = *memory_block;\n              temp_ptr1[1] = memory_block[1];\n              temp_ptr1[2] = memory_block[2];\n            }\n            else {\n              copy_memory_region_00082438(result_ptr,memory_block);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp_ptr2 + temp_var7;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_var2 + temp_var4) - temp_var7 | 1;\n            temp_ptr2[1] = temp_var7 | temp_ptr2[1] & 1U;\n            FUNC_0008259c(param_ptr);\n            return result_ptr;\n          }\n        }\n        else {\n          temp_var2 = temp_var2 + temp_var4;\n          if ((int)temp_var7 <= (int)temp_var2) {\n            temp_var5 = *(int *)(temp_var1 + 0xc);\n            temp_var3 = *(int *)(temp_var1 + 8);\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_ptr1 = temp_ptr2 + 2;\n            temp_var3 = *temp_ptr1;\n            temp_var5 = temp_ptr2[3];\n            temp_var4 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_var6 = temp_var2;\n            if (temp_var4 < 0x25) {\n              result_ptr = temp_ptr1;\n              if (0x13 < temp_var4) {\n                temp_ptr2[2] = *memory_block;\n                temp_ptr2[3] = memory_block[1];\n                if (temp_var4 < 0x1c) {\n                  memory_block = memory_block + 2;\n                  result_ptr = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = memory_block[2];\n                  temp_ptr2[5] = memory_block[3];\n                  if (temp_var4 == 0x24) {\n                    temp_ptr2[6] = memory_block[4];\n                    result_ptr = memory_block + 5;\n                    memory_block = memory_block + 6;\n                    temp_ptr2[7] = *result_ptr;\n                    result_ptr = temp_ptr2 + 8;\n                  }\n                  else {\n                    memory_block = memory_block + 4;\n                    result_ptr = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *result_ptr = *memory_block;\n              result_ptr[1] = memory_block[1];\n              result_ptr[2] = memory_block[2];\n              temp_var4 = temp_ptr2[1];\n              result_ptr = temp_ptr2;\n              memory_block = temp_ptr1;\n            }\n            else {\n              copy_memory_region_00082438(temp_ptr1,memory_block);\n              temp_var4 = temp_ptr2[1];\n              result_ptr = temp_ptr2;\n              memory_block = temp_ptr1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)temp_var7 <= (int)temp_var4) {\n        temp_ptr1 = temp_ptr2 + 2;\n        temp_var3 = *temp_ptr1;\n        temp_var5 = temp_ptr2[3];\n        temp_var2 = temp_var6 - 4;\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var4;\n        if (temp_var2 < 0x25) {\n          result_ptr = temp_ptr1;\n          if (0x13 < temp_var2) {\n            temp_ptr2[2] = *memory_block;\n            temp_ptr2[3] = memory_block[1];\n            if (temp_var2 < 0x1c) {\n              memory_block = memory_block + 2;\n              result_ptr = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = memory_block[2];\n              temp_ptr2[5] = memory_block[3];\n              if (temp_var2 == 0x24) {\n                temp_ptr2[6] = memory_block[4];\n                result_ptr = memory_block + 5;\n                memory_block = memory_block + 6;\n                temp_ptr2[7] = *result_ptr;\n                result_ptr = temp_ptr2 + 8;\n              }\n              else {\n                memory_block = memory_block + 4;\n                result_ptr = temp_ptr2 + 6;\n              }\n            }\n          }\n          *result_ptr = *memory_block;\n          result_ptr[1] = memory_block[1];\n          result_ptr[2] = memory_block[2];\n          temp_var4 = temp_ptr2[1];\n          result_ptr = temp_ptr2;\n          memory_block = temp_ptr1;\n        }\n        else {\n          copy_memory_region_00082438(temp_ptr1,memory_block);\n          temp_var4 = temp_ptr2[1];\n          result_ptr = temp_ptr2;\n          memory_block = temp_ptr1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr2 = (int *)allocate_and_initialize_memory_000825b0_block_00081e14(param_ptr,block_size);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000826a4;\n    temp_var4 = memory_block[-1];\n    if (temp_ptr2 + -2 != (int *)((temp_var4 & 0xfffffffe) + (int)result_ptr)) {\n      temp_var6 = temp_var6 - 4;\n      if (temp_var6 < 0x25) {\n        result_ptr = memory_block;\n        temp_ptr1 = temp_ptr2;\n        if (0x13 < temp_var6) {\n          *temp_ptr2 = *memory_block;\n          temp_ptr2[1] = memory_block[1];\n          if (temp_var6 < 0x1c) {\n            result_ptr = memory_block + 2;\n            temp_ptr1 = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = memory_block[2];\n            temp_ptr2[3] = memory_block[3];\n            if (temp_var6 == 0x24) {\n              temp_ptr2[4] = memory_block[4];\n              temp_ptr2[5] = memory_block[5];\n              result_ptr = memory_block + 6;\n              temp_ptr1 = temp_ptr2 + 6;\n            }\n            else {\n              result_ptr = memory_block + 4;\n              temp_ptr1 = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr1 = *result_ptr;\n        temp_ptr1[1] = result_ptr[1];\n        temp_ptr1[2] = result_ptr[2];\n      }\n      else {\n        copy_memory_region_00082438(temp_ptr2,memory_block);\n      }\n      process_relocation_entries_00083d9c(param_ptr,memory_block);\n      goto LAB_000826a4;\n    }\n    temp_var6 = temp_var6 + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_var2 = temp_var6 - temp_var7;\n  temp_ptr2 = memory_block;\n  if (temp_var2 < 0x10) {\n    result_ptr[1] = temp_var4 & 1 | temp_var6;\n    *(uint *)((int)result_ptr + temp_var6 + 4) = *(uint *)((int)result_ptr + temp_var6 + 4) | 1;\n  }\n  else {\n    result_ptr[1] = temp_var4 & 1 | temp_var7;\n    *(uint *)((int)result_ptr + temp_var7 + 4) = temp_var2 | 1;\n    *(uint *)((int)result_ptr + temp_var2 + temp_var7 + 4) = *(uint *)((int)result_ptr + temp_var2 + temp_var7 + 4) | 1;\n    process_relocation_entries_00083d9c(param_ptr,(int)result_ptr + temp_var7 + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(param_ptr);\n  return temp_ptr2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_and_initialize_memory_000825b0",
                "param_1": "param_ptr",
                "param_2": "memory_block",
                "param_3": "block_size",
                "dVar1": "temp_var1",
                "piVar2": "result_ptr",
                "uVar3": "temp_var2",
                "iVar4": "temp_var3",
                "uVar5": "temp_var4",
                "iVar6": "temp_var5",
                "piVar7": "temp_ptr1",
                "uVar8": "temp_var6",
                "uVar9": "temp_var7",
                "piVar10": "temp_ptr2"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_and_update_sum_00082970",
            "code": "\nvoid checkAndUpdateSum_00082970(int *resultPtr,undefined4 input)\n\n{\n  int sum;\n  \n  DAT_200711bc = 0;\n  sum = calculate_sum_0008118c(input);\n  if ((sum == -1) && (DAT_200711bc != 0)) {\n    *resultPtr = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_and_update_sum_00082970",
                "param_1": "resultPtr",
                "param_2": "input",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "string_copy_00082994",
            "code": "\nvoid stringCopy_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextPointer;\n  uint *nextPointer2;\n  uint currentUint;\n  uint tempUint;\n  uint *destinationPointer;\n  bool isZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextPointer2 = source;\n    if (((uint)source & 1) != 0) {\n      nextPointer2 = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextPointer2;\n    if (((uint)nextPointer2 & 2) != 0) {\n      source = (uint *)((int)nextPointer2 + 2);\n      currentShort = *(ushort *)nextPointer2;\n      isZero = (currentShort & 0xff) == 0;\n      if (isZero) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZero = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  currentUint = *source;\n  nextPointer2 = source + 1;\n  destinationPointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) goto LAB_000829f8;\n    destinationPointer = destination + 1;\n    *destination = currentUint;\n    nextPointer2 = source + 2;\n    currentUint = source[1];\n  }\n  while( true ) {\n    nextPointer = nextPointer2 + 1;\n    tempUint = *nextPointer2;\n    destination = destinationPointer;\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) break;\n    destination = destinationPointer + 1;\n    *destinationPointer = currentUint;\n    currentUint = tempUint;\n    if ((tempUint + 0xfefefeff & ~tempUint & 0x80808080) != 0) break;\n    nextPointer2 = nextPointer2 + 2;\n    currentUint = *nextPointer;\n    destinationPointer = destinationPointer + 2;\n    *destination = tempUint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentUint;\n    tempUint = currentUint & 0xff;\n    currentUint = currentUint >> 8 | currentUint << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (tempUint != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "string_copy_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextPointer",
                "puVar4": "nextPointer2",
                "uVar5": "currentUint",
                "uVar6": "tempUint",
                "puVar7": "destinationPointer",
                "bVar8": "isZero"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZeros;\n  uint *dataPointer;\n  uint dataValue;\n  bool isByteZero;\n  \n  dataPointer = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  dataValue = *dataPointer;\n  if ((input & 3) != 0) {\n    dataValue = dataValue | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (dataPointer = dataPointer + 1, (dataValue + 0xfefefeff & ~dataValue & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    dataValue = *dataPointer;\n  }\n  isByteZero = (dataValue & 0xff) == 0;\n  if (!isByteZero) {\n    leadingZeros = leadingZeros + 1;\n    isByteZero = (dataValue & 0xff00) == 0;\n  }\n  if (!isByteZero) {\n    leadingZeros = leadingZeros + 1;\n    isByteZero = (dataValue & 0xff0000) == 0;\n  }\n  if (!isByteZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "dataPointer",
                "uVar3": "dataValue",
                "bVar4": "isByteZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint process_data_00082ac0(undefined4 config,int data_offset,int **data)\n\n{\n  int *data_ptr;\n  int result;\n  int *current_data;\n  uint iteration;\n  undefined4 *ptr_to_data;\n  uint value1;\n  uint value2;\n  \n  if (-1 < *(int *)(data_offset + 100) << 0x12) {\n    result = process_data_00082ac0_00083f34();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  current_data = data[2];\n  data_ptr = *data;\n  while (current_data != (int *)0x0) {\n    value1 = data_ptr[1];\n    value2 = value1 >> 2;\n    if (value2 != 0) {\n      ptr_to_data = (undefined4 *)(*data_ptr + -4);\n      iteration = 0;\n      do {\n        ptr_to_data = ptr_to_data + 1;\n        result = process_data_00082ac0_00083c40(config,*ptr_to_data,data_offset);\n        iteration = iteration + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (value2 != iteration);\n      current_data = data[2];\n    }\n    current_data = (int *)((int)current_data - (value1 & 0xfffffffc));\n    data[2] = current_data;\n    data_ptr = data_ptr + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "config",
                "param_2": "data_offset",
                "param_3": "data",
                "piVar1": "data_ptr",
                "iVar2": "result",
                "piVar3": "current_data",
                "uVar4": "iteration",
                "puVar5": "ptr_to_data",
                "uVar6": "value1",
                "uVar7": "value2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = process_relocation_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeros_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_char_in_buffer_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_result_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_result_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint processData_0008378c(undefined4 inputParam1,int inputParam2)\n\n{\n  int returnValue;\n  int processingResult;\n  undefined *localArray [2];\n  undefined4 localConstant1;\n  ushort localVariable1;\n  undefined2 localVariable2;\n  undefined *localPointer;\n  undefined4 localConstant2;\n  undefined4 localConstant3;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined4 localVariable5;\n  undefined temporaryStack [1024];\n  \n  localVariable5 = *(undefined4 *)(inputParam2 + 100);\n  localVariable3 = *(undefined4 *)(inputParam2 + 0x1c);\n  localVariable2 = *(undefined2 *)(inputParam2 + 0xe);\n  localVariable4 = *(undefined4 *)(inputParam2 + 0x24);\n  localArray[0] = temporaryStack;\n  localVariable1 = *(ushort *)(inputParam2 + 0xc) & 0xfffd;\n  localConstant1 = 0x400;\n  localConstant2 = 0x400;\n  localConstant3 = 0;\n  localPointer = localArray[0];\n  returnValue = FUNC_00082b38(inputParam1,localArray);\n  if ((-1 < returnValue) && (processingResult = process_data_00083adc(inputParam1,localArray), processingResult != 0)) {\n    returnValue = -1;\n  }\n  if ((int)((uint)localVariable1 << 0x19) < 0) {\n    *(ushort *)(inputParam2 + 0xc) = *(ushort *)(inputParam2 + 0xc) | 0x40;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "returnValue",
                "iVar2": "processingResult",
                "local_488": "localArray",
                "local_480": "localConstant1",
                "local_47c": "localVariable1",
                "local_47a": "localVariable2",
                "local_478": "localPointer",
                "local_474": "localConstant2",
                "local_470": "localConstant3",
                "local_46c": "localVariable3",
                "local_464": "localVariable4",
                "local_424": "localVariable5",
                "auStack_420": "temporaryStack"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_relocation_00083808",
            "code": "\nundefined4 process_relocation_00083808(undefined4 *output,int *input)\n\n{\n  int condition1;\n  int condition2;\n  uint value;\n  ushort flag;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  flag = *(ushort *)(input + 3);\n  value = (uint)flag;\n  if ((int)(value << 0x1c) < 0) {\n    condition2 = input[4];\n  }\n  else {\n    if (-1 < (int)(value << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(value << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          process_relocation_00083808_entries_00083d9c(output);\n          flag = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      condition2 = input[4];\n      flag = flag & 0xffdb;\n      *input = condition2;\n      input[1] = 0;\n    }\n    else {\n      condition2 = input[4];\n    }\n    *(ushort *)(input + 3) = flag | 8;\n    value = (uint)(flag | 8);\n  }\n  if ((condition2 == 0) && ((value & 0x280) != 0x200)) {\n    process_input_data_000842a4(output,input);\n    value = (uint)*(ushort *)(input + 3);\n    condition2 = input[4];\n  }\n  if ((value & 1) == 0) {\n    condition1 = 0;\n    if (-1 < (int)(value << 0x1e)) {\n      condition1 = input[5];\n    }\n    input[2] = condition1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((condition2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_relocation_00083808",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "condition1",
                "iVar2": "condition2",
                "uVar3": "value",
                "uVar4": "flag"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 process_data_00083adc(int *data,int *info)\n\n{\n  int *ptr1;\n  int var1;\n  ushort flag;\n  uint temp;\n  int var2;\n  code *func_ptr;\n  undefined4 result;\n  int var3;\n  \n  if ((data != (int *)0x0) && (data[0xe] == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  if (*(short *)(info + 3) == 0) {\n    return 0;\n  }\n  flag = *(ushort *)(info + 3);\n  if ((int)((uint)flag << 0x1c) < 0) {\n    var3 = info[4];\n    if (var3 == 0) {\n      return 0;\n    }\n    var1 = *info;\n    if ((flag & 3) == 0) {\n      var2 = info[5];\n    }\n    else {\n      var2 = 0;\n    }\n    *info = var3;\n    var1 = var1 - var3;\n    info[2] = var2;\n    do {\n      if (var1 < 1) {\n        return 0;\n      }\n      var2 = (*(code *)info[9])(data,info[7],var3,var1,result);\n      var1 = var1 - var2;\n      var3 = var3 + var2;\n    } while (0 < var2);\nLAB_00083a54:\n    *(ushort *)(info + 3) = *(ushort *)(info + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info + 3) = flag | 0x800;\n  if ((info[1] < 1) && (info[0xf] < 1)) {\n    return 0;\n  }\n  func_ptr = (code *)info[10];\n  if (func_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flag | 0x800);\n  var3 = *data;\n  *data = 0;\n  if ((flag & 0x1000) == 0) {\n    var1 = (*func_ptr)(data,info[7],temp & 0x1000,1);\n    if ((var1 == -1) && (var2 = *data, var2 != 0)) {\n      if ((var2 == 0x1d) || (var2 == 0x16)) {\n        *data = var3;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp = (uint)*(ushort *)(info + 3);\n    func_ptr = (code *)info[10];\n  }\n  else {\n    var1 = info[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (var1 = var1 - info[1], info[0xc] != 0)) {\n    var1 = var1 - info[0xf];\n  }\n  var1 = (*func_ptr)(data,info[7],var1,0);\n  if (var1 == -1) {\n    var2 = *data;\n    if (var2 != 0) {\n      if ((var2 != 0x1d) && (var2 != 0x16)) {\n        *(ushort *)(info + 3) = *(ushort *)(info + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info + 3) = *(ushort *)(info + 3) & 0xf7ff;\n      *info = info[4];\n      info[1] = 0;\n      goto LAB_00083a00;\n    }\n    flag = *(ushort *)(info + 3) & 0xf7ff;\n    info[1] = 0;\n    *(ushort *)(info + 3) = flag;\n    *info = info[4];\n  }\n  else {\n    flag = *(ushort *)(info + 3) & 0xf7ff;\n    *info = info[4];\n    *(ushort *)(info + 3) = flag;\n    info[1] = 0;\n  }\n  if ((int)((uint)flag << 0x13) < 0) {\n    info[0x14] = var1;\n  }\nLAB_00083a00:\n  ptr1 = (int *)info[0xc];\n  *data = var3;\n  if (ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr1 != info + 0x10) {\n    process_relocation_entries_00083d9c(data);\n  }\n  info[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "data",
                "param_2": "info",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "uVar3": "flag",
                "uVar4": "temp",
                "iVar5": "var2",
                "pcVar6": "func_ptr",
                "unaff_r4": "result",
                "iVar7": "var3"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructuresPtr)\n\n{\n  undefined4 *buffer1Ptr;\n  undefined4 *buffer2Ptr;\n  \n  if (*(int *)(dataStructuresPtr + 0x38) == 0) {\n    buffer1Ptr = *(undefined4 **)(dataStructuresPtr + 4);\n    *(undefined **)(dataStructuresPtr + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructuresPtr + 0x2e4) = 3;\n    *(int *)(dataStructuresPtr + 0x2e8) = dataStructuresPtr + 0x2ec;\n    *(undefined4 *)(dataStructuresPtr + 0x2e0) = 0;\n    *(undefined2 *)(buffer1Ptr + 3) = 4;\n    *buffer1Ptr = 0;\n    buffer1Ptr[1] = 0;\n    buffer1Ptr[2] = 0;\n    buffer1Ptr[0x19] = 0;\n    *(undefined2 *)((int)buffer1Ptr + 0xe) = 0;\n    buffer1Ptr[4] = 0;\n    buffer1Ptr[5] = 0;\n    buffer1Ptr[6] = 0;\n    copy_and_pad_buffer_00082504(buffer1Ptr + 0x17,0,8);\n    buffer2Ptr = *(undefined4 **)(dataStructuresPtr + 8);\n    buffer1Ptr[7] = buffer1Ptr;\n    buffer1Ptr[8] = &LAB_00084440_1;\n    buffer1Ptr[9] = 0x84465;\n    buffer1Ptr[10] = 0x8449d;\n    buffer1Ptr[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)buffer2Ptr + 0xe) = 1;\n    *(undefined2 *)(buffer2Ptr + 3) = 9;\n    *buffer2Ptr = 0;\n    buffer2Ptr[1] = 0;\n    buffer2Ptr[2] = 0;\n    buffer2Ptr[0x19] = 0;\n    buffer2Ptr[4] = 0;\n    buffer2Ptr[5] = 0;\n    buffer2Ptr[6] = 0;\n    copy_and_pad_buffer_00082504(buffer2Ptr + 0x17,0,8);\n    buffer1Ptr = *(undefined4 **)(dataStructuresPtr + 0xc);\n    buffer2Ptr[7] = buffer2Ptr;\n    buffer2Ptr[8] = &LAB_00084440_1;\n    buffer2Ptr[9] = 0x84465;\n    buffer2Ptr[10] = 0x8449d;\n    buffer2Ptr[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(buffer1Ptr + 3) = 0x12;\n    *(undefined2 *)((int)buffer1Ptr + 0xe) = 2;\n    *buffer1Ptr = 0;\n    buffer1Ptr[1] = 0;\n    buffer1Ptr[2] = 0;\n    buffer1Ptr[0x19] = 0;\n    buffer1Ptr[4] = 0;\n    buffer1Ptr[5] = 0;\n    buffer1Ptr[6] = 0;\n    copy_and_pad_buffer_00082504(buffer1Ptr + 0x17,0,8);\n    buffer1Ptr[7] = buffer1Ptr;\n    buffer1Ptr[8] = &LAB_00084440_1;\n    buffer1Ptr[9] = 0x84465;\n    buffer1Ptr[10] = 0x8449d;\n    buffer1Ptr[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructuresPtr + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructuresPtr",
                "puVar1": "buffer1Ptr",
                "puVar2": "buffer2Ptr"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 flags,uint length,byte **data)\n\n{\n  int relocationInfo;\n  uint result;\n  uint currentByte;\n  byte *currentData;\n  uint counter;\n  byte tempByte;\n  byte tempData [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  relocationInfo = get_first_relocation_info_00084298();\n  if ((relocationInfo == 1) && (length - 1 < 0xff)) {\n    currentByte = length & 0xff;\n    tempByte = (byte)currentByte;\n    result = 1;\n  }\n  else {\n    result = execute_function_0008456c(flags,&tempByte,length,data + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return length;\n    }\n    currentByte = (uint)tempByte;\n  }\n  counter = 0;\n  do {\n    currentData = data[2] + -1;\n    data[2] = currentData;\n    if ((int)currentData < 0) {\n      if ((int)data[6] <= (int)currentData) {\n        **data = (byte)currentByte;\n        currentData = *data;\n        currentByte = (uint)*currentData;\n        if (currentByte != 10) goto LAB_00083c90;\n      }\n      relocationInfo = process_binary_data_000844c4(flags,currentByte,data);\n      if (relocationInfo == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)currentByte;\n      currentData = *data;\nLAB_00083c90:\n      *data = currentData + 1;\n    }\n    if (result <= counter + 1) {\n      return length;\n    }\n    currentByte = (uint)tempData[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "flags",
                "param_2": "length",
                "param_3": "data",
                "iVar1": "relocationInfo",
                "uVar2": "result",
                "uVar3": "currentByte",
                "pbVar4": "currentData",
                "uVar5": "counter",
                "local_1c": "tempByte",
                "abStack_1b": "tempData"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "calculate_offset_00083d00",
            "code": "\nundefined4 calculate_offset_00083d00(undefined4 input,int base_offset)\n\n{\n  int result;\n  uint rel_info_value;\n  int new_offset;\n  \n  FUNC_00082598();\n  rel_info_value = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  new_offset = ((rel_info_value - base_offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < new_offset) {\n    result = check_and_update_sum_00082970(input,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + rel_info_value) {\n      result = check_and_update_sum_00082970(input,-new_offset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - new_offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = rel_info_value - new_offset | 1;\n        FUNC_0008259c(input);\n        return 1;\n      }\n      new_offset = check_and_update_sum_00082970(input,0);\n      if (0xf < (int)(new_offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = new_offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             new_offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(input);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "calculate_offset_00083d00",
                "param_1": "input",
                "param_2": "base_offset",
                "iVar1": "result",
                "uVar2": "rel_info_value",
                "iVar3": "new_offset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocation_entries_00083d9c",
            "code": "\nvoid processRelocationEntries_00083d9c(undefined4 param,int dataPtr)\n\n{\n  int currentEntry;\n  bool isCurrentEntrySpecial;\n  uint entryCount;\n  dword currentRelocation;\n  int prevEntry;\n  uint offset;\n  dword relocationPtr;\n  uint size;\n  dword nextEntry;\n  \n  if (dataPtr == 0) {\n    return;\n  }\n  FUNC_00082598();\n  entryCount = *(uint *)(dataPtr + -4);\n  relocationPtr = dataPtr - 8;\n  offset = entryCount & 0xfffffffe;\n  currentRelocation = relocationPtr + offset;\n  size = *(uint *)(currentRelocation + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentRelocation) {\n    size = size + offset;\n    if (-1 < (int)(entryCount << 0x1f)) {\n      relocationPtr = relocationPtr - *(int *)(dataPtr + -8);\n      prevEntry = *(int *)(relocationPtr + 0xc);\n      currentEntry = *(int *)(relocationPtr + 8);\n      size = size + *(int *)(dataPtr + -8);\n      *(int *)(currentEntry + 0xc) = prevEntry;\n      *(int *)(prevEntry + 8) = currentEntry;\n    }\n    currentRelocation = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(relocationPtr + 4) = size | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = relocationPtr;\n    if (currentRelocation <= size) {\n      calculate_offset_00083d00(param,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentRelocation + 4) = size;\n    if ((entryCount & 1) == 0) {\n      relocationPtr = relocationPtr - *(int *)(dataPtr + -8);\n      currentEntry = *(int *)(relocationPtr + 8);\n      offset = offset + *(int *)(dataPtr + -8);\n      if (currentEntry == 0x2007046c) {\n        isCurrentEntrySpecial = true;\n      }\n      else {\n        prevEntry = *(int *)(relocationPtr + 0xc);\n        *(int *)(currentEntry + 0xc) = prevEntry;\n        *(int *)(prevEntry + 8) = currentEntry;\n        isCurrentEntrySpecial = false;\n      }\n    }\n    else {\n      isCurrentEntrySpecial = false;\n    }\n    if (-1 < *(int *)(currentRelocation + size + 4) << 0x1f) {\n      offset = offset + size;\n      currentEntry = *(int *)(currentRelocation + 8);\n      if ((!isCurrentEntrySpecial) && (currentEntry == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = relocationPtr;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = relocationPtr;\n        *(undefined4 *)(relocationPtr + 0xc) = 0x2007046c;\n        *(undefined4 *)(relocationPtr + 8) = 0x2007046c;\n        *(uint *)(relocationPtr + 4) = offset | 1;\n        *(uint *)(relocationPtr + offset) = offset;\n        goto LAB_00083e30;\n      }\n      prevEntry = *(int *)(currentRelocation + 0xc);\n      *(int *)(currentEntry + 0xc) = prevEntry;\n      *(int *)(prevEntry + 8) = currentEntry;\n    }\n    *(uint *)(relocationPtr + 4) = offset | 1;\n    *(uint *)(relocationPtr + offset) = offset;\n    if (!isCurrentEntrySpecial) {\n      if (offset < 0x200) {\n        entryCount = offset & 0xfffffff8;\n        currentEntry = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryCount);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(relocationPtr + 8) = currentEntry;\n        *(uint *)(relocationPtr + 0xc) = entryCount + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryCount) = relocationPtr;\n        *(dword *)(currentEntry + 0xc) = relocationPtr;\n        FUNC_0008259c(param);\n        return;\n      }\n      entryCount = offset >> 9;\n      if (entryCount < 5) {\n        currentEntry = (offset >> 6) + 0x38;\n        prevEntry = currentEntry * 2;\n      }\n      else if (entryCount < 0x15) {\n        currentEntry = entryCount + 0x5b;\n        prevEntry = currentEntry * 2;\n      }\n      else if (entryCount < 0x55) {\n        currentEntry = (offset >> 0xc) + 0x6e;\n        prevEntry = currentEntry * 2;\n      }\n      else if (entryCount < 0x155) {\n        currentEntry = (offset >> 0xf) + 0x77;\n        prevEntry = currentEntry * 2;\n      }\n      else if (entryCount < 0x555) {\n        currentEntry = (offset >> 0x12) + 0x7c;\n        prevEntry = currentEntry * 2;\n      }\n      else {\n        prevEntry = 0xfc;\n        currentEntry = 0x7e;\n      }\n      nextEntry = prevEntry * 4 + 0x20070464;\n      currentRelocation = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[prevEntry];\n      if (currentRelocation == nextEntry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (currentEntry >> 2 & 0xffU);\n        nextEntry = currentRelocation;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentRelocation + 4) & 0xfffffffc) <= offset) break;\n          currentRelocation = *(dword *)(currentRelocation + 8);\n        } while (nextEntry != currentRelocation);\n        nextEntry = *(dword *)(currentRelocation + 0xc);\n      }\n      *(dword *)(relocationPtr + 0xc) = nextEntry;\n      *(dword *)(relocationPtr + 8) = currentRelocation;\n      *(dword *)(nextEntry + 8) = relocationPtr;\n      *(dword *)(currentRelocation + 0xc) = relocationPtr;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "process_relocation_entries_00083d9c",
                "param_1": "param",
                "param_2": "dataPtr",
                "iVar1": "currentEntry",
                "bVar2": "isCurrentEntrySpecial",
                "uVar3": "entryCount",
                "dVar4": "currentRelocation",
                "iVar5": "prevEntry",
                "uVar6": "offset",
                "dVar7": "relocationPtr",
                "uVar8": "size",
                "dVar9": "nextEntry"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *result,uint *data,uint **ptrToPtr)\n\n{\n  int returnValue;\n  uint temp1;\n  uint temp2;\n  ushort temp3;\n  uint temp4;\n  uint *ptr1;\n  uint *ptr2;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  \n  if (ptrToPtr[2] != (uint *)0x0) {\n    temp3 = *(ushort *)(data + 3);\n    temp4 = (uint)temp3;\n    if (((int)(temp4 << 0x1c) < 0) && (data[4] != 0)) {\n      ptr2 = *ptrToPtr;\n    }\n    else {\n      returnValue = process_relocation_00083808(result,data);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      temp3 = *(ushort *)(data + 3);\n      temp4 = (uint)temp3;\n      ptr2 = *ptrToPtr;\n    }\n    if ((temp3 & 2) == 0) {\n      temp1 = temp4 & 2;\n      temp7 = temp1;\n      temp5 = temp1;\n      temp9 = temp1;\n      if ((temp4 & 1) == 0) {\n        temp1 = 0;\n        temp7 = 0;\n        while( true ) {\n          while (temp1 == 0) {\n            temp7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp1 = *ptr1;\n          }\n          temp5 = data[2];\n          if ((int)(temp4 << 0x16) < 0) {\n            if (temp1 < temp5) {\n              temp4 = *data;\n              temp5 = temp1;\n            }\n            else if ((temp4 & 0x480) == 0) {\n              temp4 = *data;\n            }\n            else {\n              returnValue = *data - data[4];\n              temp5 = returnValue + 1 + temp1;\n              temp6 = (int)(data[5] * 3) / 2;\n              if (temp5 <= temp6) {\n                temp5 = temp6;\n              }\n              if ((int)(temp4 << 0x15) < 0) {\n                temp6 = allocate_and_initialize_memory_block_00081e14(result,temp5);\n                if (temp6 == 0) {\n                  *result = 0xc;\n                  temp3 = *(ushort *)(data + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_0008234c(temp6,data[4],returnValue);\n                *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp6 = allocate_and_initialize_memory_000825b0(result);\n                if (temp6 == 0) {\n                  process_relocation_entries_00083d9c(result,data[4]);\n                  temp3 = *(ushort *)(data + 3) & 0xff7f;\n                  *result = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp4 = temp6 + returnValue;\n              data[4] = temp6;\n              data[5] = temp5;\n              *data = temp4;\n              data[2] = temp5 - returnValue;\n              temp5 = temp1;\n            }\n            copy_memory_region_00082438(temp4,temp7,temp5);\n            data[2] = data[2] - temp5;\n            *data = *data + temp5;\n            temp5 = temp1;\n          }\n          else if ((data[4] < *data) || (temp4 = data[5], temp1 < temp4)) {\n            if (temp1 < temp5) {\n              temp5 = temp1;\n            }\n            copy_memory_region_00082438(*data,temp7,temp5);\n            temp4 = data[2];\n            data[2] = temp4 - temp5;\n            *data = *data + temp5;\n            if ((temp4 - temp5 == 0) && (returnValue = process_data_00083adc(result,data), returnValue != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            temp5 = 0x7fffffff;\n            if (temp1 < 0x7fffffff) {\n              temp5 = temp1;\n            }\n            temp5 = (*(code *)data[9])(result,data[7],temp7,(temp5 / temp4) * temp4);\n            if ((int)temp5 < 1) goto LAB_0008402e;\n          }\n          ptr1 = ptrToPtr[2];\n          temp7 = temp7 + temp5;\n          temp1 = temp1 - temp5;\n          ptrToPtr[2] = (uint *)((int)ptr1 - temp5);\n          if ((uint *)((int)ptr1 - temp5) == (uint *)0x0) break;\n          temp4 = (uint)*(ushort *)(data + 3);\n        }\n      }\n      else {\n        do {\n          while (temp1 == 0) {\n            temp5 = *ptr2;\n            temp1 = ptr2[1];\n            temp9 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (temp9 == 0) {\n            returnValue = find_char_in_buffer_00084384(temp5,10,temp1);\n            if (returnValue == 0) {\n              temp7 = temp1 + 1;\n              temp9 = 1;\n            }\n            else {\n              temp7 = (returnValue + 1) - temp5;\n              temp9 = 1;\n            }\n          }\n          temp6 = *data;\n          temp4 = temp7;\n          if (temp1 <= temp7) {\n            temp4 = temp1;\n          }\n          temp2 = data[5];\n          if ((data[4] < temp6) && (temp8 = data[2] + temp2, (int)temp8 < (int)temp4)) {\n            copy_memory_region_00082438(temp6,temp5,temp8);\n            *data = *data + temp8;\n            returnValue = process_data_00083adc(result,data);\n            if (returnValue != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp4 < (int)temp2) {\n            copy_memory_region_00082438(temp6,temp5,temp4);\n            data[2] = data[2] - temp4;\n            *data = temp4 + *data;\n            temp8 = temp4;\n          }\n          else {\n            temp8 = (*(code *)data[9])(result,data[7],temp5,temp2);\n            if ((int)temp8 < 1) goto LAB_0008402e;\n          }\n          temp7 = temp7 - temp8;\n          if (temp7 == 0) {\n            returnValue = process_data_00083adc(result,data);\n            if (returnValue != 0) goto LAB_0008402e;\n            temp9 = 0;\n          }\n          ptr1 = ptrToPtr[2];\n          temp5 = temp5 + temp8;\n          temp1 = temp1 - temp8;\n          ptrToPtr[2] = (uint *)((int)ptr1 - temp8);\n        } while ((uint *)((int)ptr1 - temp8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp1 = 0;\n      temp4 = 0;\n      do {\n        while( true ) {\n          temp7 = temp4;\n          if (0x7ffffbff < temp4) {\n            temp7 = 0x7ffffc00;\n          }\n          if (temp4 != 0) break;\n          temp1 = *ptr2;\n          temp4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        returnValue = (*(code *)data[9])(result,data[7],temp1,temp7);\n        if (returnValue < 1) {\nLAB_0008402e:\n          temp3 = *(ushort *)(data + 3);\nLAB_00084030:\n          *(ushort *)(data + 3) = temp3 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = ptrToPtr[2];\n        temp1 = temp1 + returnValue;\n        temp4 = temp4 - returnValue;\n        ptrToPtr[2] = (uint *)((int)ptr1 - returnValue);\n      } while ((uint *)((int)ptr1 - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "result",
                "param_2": "data",
                "param_3": "ptrToPtr",
                "iVar1": "returnValue",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "local_2c": "temp9"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_first_relocation_info_00084298",
            "code": "\ndword getFirstRelocationInfo_00084298(void)\n\n{\n  return relocationTable[274].r_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_first_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_input_data_000842a4",
            "code": "\nvoid processInputData_000842a4(int data,int *output)\n\n{\n  ushort value;\n  int memoryStatus;\n  int allocatedBlock;\n  uint convertedValue;\n  bool flag;\n  undefined stackArray [4];\n  uint localVariable;\n  \n  value = *(ushort *)(output + 3);\n  convertedValue = (uint)value;\n  if ((int)(convertedValue << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    memoryStatus = initialize_memory_000846b4(data,(int)*(short *)((int)output + 0xe),stackArray);\n    if (-1 < memoryStatus) {\n      flag = (localVariable & 0xf000) == 0x2000;\n      if (((localVariable & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        memoryStatus = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        memoryStatus = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    value = *(ushort *)(output + 3);\n    convertedValue = (uint)value;\n  }\n  *(ushort *)(output + 3) = value | 0x800;\n  if ((convertedValue & 0x80) == 0) {\n    memoryStatus = 0x400;\n  }\n  else {\n    memoryStatus = 0x40;\n  }\n  flag = false;\nLAB_00084300:\n  allocatedBlock = allocate_and_initialize_memory_block_00081e14(data,memoryStatus);\n  value = *(ushort *)(output + 3);\n  if (allocatedBlock == 0) {\n    if (-1 < (int)((uint)value << 0x16)) {\n      *(ushort *)(output + 3) = value | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(output + 3) = value | 0x80;\n    *output = allocatedBlock;\n    output[4] = allocatedBlock;\n    output[5] = memoryStatus;\n    if ((flag) && (memoryStatus = initialize_and_check_program_000846dc(data,(int)*(short *)((int)output + 0xe)), memoryStatus != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_input_data_000842a4",
                "param_1": "data",
                "param_2": "output",
                "uVar1": "value",
                "iVar2": "memoryStatus",
                "iVar3": "allocatedBlock",
                "uVar4": "convertedValue",
                "bVar5": "flag",
                "auStack_54": "stackArray",
                "local_50": "localVariable"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_char_in_buffer_00084384",
            "code": "\nuint * find_char_in_buffer_00084384(uint *buffer,char char_to_find,uint buffer_length)\n\n{\n  uint temp;\n  int i;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)buffer & 3) == 0) {\nLAB_000843b4:\n    if (3 < buffer_length) {\n      ptr = buffer;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(char_to_find,char_to_find),CONCAT11(char_to_find,char_to_find));\n        buffer = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        buffer_length = buffer_length - 4;\n        buffer = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < buffer_length);\n    }\n    if (buffer_length == 0) {\n      buffer = (uint *)0x0;\n    }\n    else if (*(char *)buffer != char_to_find) {\n      i = 0;\n      do {\n        buffer = (uint *)((int)buffer + 1);\n        found = i == buffer_length - 1;\n        i = i + 1;\n        if (found) goto LAB_000843dc;\n      } while (*(char *)buffer != char_to_find);\n    }\n  }\n  else if (buffer_length == 0) {\nLAB_000843dc:\n    buffer = (uint *)0x0;\n  }\n  else if (*(char *)buffer != char_to_find) {\n    ptr = (uint *)((int)buffer + 1);\n    buffer_length = buffer_length - 1;\n    do {\n      buffer = ptr;\n      if (((uint)buffer & 3) == 0) goto LAB_000843b4;\n      if (buffer_length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)buffer + 1);\n      buffer_length = buffer_length - 1;\n    } while (*(char *)buffer != char_to_find);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_char_in_buffer_00084384",
                "param_1": "buffer",
                "param_2": "char_to_find",
                "param_3": "buffer_length",
                "uVar1": "temp",
                "iVar2": "i",
                "puVar3": "ptr",
                "bVar4": "found"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "update_and_check_data_00084464",
            "code": "\nvoid updateAndCheckData_00084464(int *output,int input,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  ushort dataValue;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  dataValue = *(ushort *)(input + 0xc);\n  if ((int)((uint)dataValue << 0x17) < 0) {\n    get_default_value_if_error_00084700(output,(int)*(short *)(input + 0xe),0,2);\n    dataValue = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = dataValue & 0xefff;\n  DAT_200711bc = 0;\n  result = update_bytes_000811cc((int)*(short *)(input + 0xe),value1,value2,value2,temp1,temp2,\n                       temp3,temp4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "update_and_check_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "value1",
                "param_4": "value2",
                "unaff_r4": "temp1",
                "unaff_r5": "temp2",
                "unaff_r6": "temp3",
                "in_lr": "temp4",
                "uVar2": "dataValue",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_parameter_value_0008449c",
            "code": "\nvoid updateParameterValue_0008449c(undefined4 errorCode,int paramPointer)\n\n{\n  int defaultValue;\n  ushort updatedValue;\n  \n  defaultValue = get_default_value_if_error_00084700(errorCode,(int)*(short *)(paramPointer + 0xe));\n  if (defaultValue == -1) {\n    updatedValue = *(ushort *)(paramPointer + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(paramPointer + 0xc) | 0x1000;\n  }\n  if (defaultValue != -1) {\n    *(int *)(paramPointer + 0x50) = defaultValue;\n  }\n  *(ushort *)(paramPointer + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_parameter_value_0008449c",
                "param_1": "errorCode",
                "param_2": "paramPointer",
                "iVar1": "defaultValue",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_binary_data_000844c4",
            "code": "\nuint process_binary_data_000844c4(int binary_address,uint byte_value,undefined4 *data_structures,undefined4 relocation_param)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *pointer;\n  int index;\n  \n  if ((binary_address != 0) && (*(int *)(binary_address + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  ushort_value = *(ushort *)(data_structures + 3);\n  uint_value = (uint)ushort_value;\n  data_structures[2] = data_structures[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data_structures[4], index == 0)) {\n    index = process_relocation(binary_address,data_structures,ushort_value,uint_value,relocation_param);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_structures + 3);\n    index = data_structures[4];\n    uint_value = (uint)ushort_value;\n  }\n  byte_value = byte_value & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    pointer = (undefined *)*data_structures;\n    index = (int)pointer - index;\n    if (index < (int)data_structures[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_structures[0x19] = data_structures[0x19] & 0xffffdfff;\n    pointer = (undefined *)*data_structures;\n    *(ushort *)(data_structures + 3) = ushort_value | 0x2000;\n    index = (int)pointer - index;\n    if (index < (int)data_structures[5]) goto LAB_000844f6;\n  }\n  index = process_data(binary_address,data_structures);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  pointer = (undefined *)*data_structures;\n  index = 1;\nLAB_000844f8:\n  data_structures[2] = data_structures[2] + -1;\n  *data_structures = pointer + 1;\n  *pointer = (char)byte_value;\n  if (((data_structures[5] == index) ||\n      (((int)((uint)*(ushort *)(data_structures + 3) << 0x1f) < 0 && (byte_value == 10)))) &&\n     (index = process_data(binary_address,data_structures), index != 0)) {\n    return 0xffffffff;\n  }\n  return byte_value;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_binary_data_000844c4",
                "param_1": "binary_address",
                "param_2": "byte_value",
                "param_3": "data_structures",
                "param_4": "relocation_param",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "puVar3": "pointer",
                "iVar4": "index",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "process_relocation_00083808": "process_relocation",
                "process_data_00083adc": "process_data"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "execute_function_0008456c",
            "code": "\nvoid executeFunction_0008456c(undefined4 *functionParameter,int conditionalValue,undefined4 additionalParam,undefined4 *outputParameter)\n\n{\n  code *functionPointer;\n  undefined4 memoryAddress;\n  int returnValue;\n  undefined temporaryBuffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (conditionalValue == 0) {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*functionPointer)(functionParameter,temporaryBuffer,0,memoryAddress,outputParameter);\n  }\n  else {\n    memoryAddress = get_memory_address_00084290();\n    returnValue = (*functionPointer)(functionParameter,conditionalValue,additionalParam,memoryAddress,outputParameter);\n  }\n  if (returnValue == -1) {\n    *outputParameter = 0;\n    *functionParameter = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "execute_function_0008456c",
                "param_1": "functionParameter",
                "param_2": "conditionalValue",
                "param_3": "additionalParam",
                "param_4": "outputParameter",
                "pcVar1": "functionPointer",
                "uVar2": "memoryAddress",
                "iVar3": "returnValue",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "convert_integer_to_char_000845bc",
            "code": "\nundefined4 convert_integer_to_char_000845bc(undefined4 *output_integer,undefined *output_char,uint input_integer)\n\n{\n  if (output_char == (undefined *)0x0) {\n    return 0;\n  }\n  if (input_integer < 0x100) {\n    *output_char = (char)input_integer;\n    return 1;\n  }\n  *output_integer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "convert_integer_to_char_000845bc",
                "param_1": "output_integer",
                "param_2": "output_char",
                "param_3": "input_integer"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_and_initialize_000846a4",
            "code": "\nundefined4 process_and_initialize_000846a4(int input_parameter)\n\n{\n  dword base_address;\n  undefined4 result;\n  int error_code;\n  \n  base_address = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input_parameter != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083b14();\n    }\n    if (*(short *)(input_parameter + 0xc) != 0) {\n      result = process_data_00083adc(base_address,input_parameter);\n      if ((*(code **)(input_parameter + 0x2c) != (code *)0x0) &&\n         (error_code = (**(code **)(input_parameter + 0x2c))(base_address,*(undefined4 *)(input_parameter + 0x1c)), error_code < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_parameter + 0xc) << 0x18) < 0) {\n        process_relocation_entries_00083d9c(base_address,*(undefined4 *)(input_parameter + 0x10));\n      }\n      if (*(int *)(input_parameter + 0x30) != 0) {\n        if (*(int *)(input_parameter + 0x30) != input_parameter + 0x40) {\n          process_relocation_entries_00083d9c(base_address);\n        }\n        *(undefined4 *)(input_parameter + 0x30) = 0;\n      }\n      if (*(int *)(input_parameter + 0x44) != 0) {\n        process_relocation_entries_00083d9c(base_address);\n        *(undefined4 *)(input_parameter + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input_parameter + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_and_initialize_000846a4",
                "param_1": "input_parameter",
                "dVar1": "base_address",
                "uVar2": "result",
                "iVar3": "error_code"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_memory_000846b4",
            "code": "\nvoid initializeMemory_000846b4(int *outputPointer,undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = initialize_memory_000811b4(inputParam1,inputParam2,inputParam2,0,inputParam3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *outputPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_memory_000846b4",
                "param_1": "outputPointer",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputParam3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "initialize_and_check_program_000846dc",
            "code": "\nvoid initialize_and_check_program_000846dc(int *output_value,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = initialize_program_000811be(input_value);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output_value = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "initialize_and_check_program_000846dc",
                "param_1": "output_value",
                "param_2": "input_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "get_default_value_if_error_00084700",
            "code": "\nvoid get_default_value_if_error_00084700(int *result_ptr,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int default_value;\n  \n  DAT_200711bc = 0;\n  default_value = get_default_value_000811c2(arg1,arg2,arg3);\n  if ((default_value == -1) && (DAT_200711bc != 0)) {\n    *result_ptr = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "get_default_value_if_error_00084700",
                "param_1": "result_ptr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "default_value"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "check_return_value_and_update_00084728",
            "code": "\nvoid checkReturnValueAndUpdate_00084728(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = get_return_value_000811c6(arg1,arg2,arg3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "check_return_value_and_update_00084728",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_result_00084750",
            "code": "\nint calculate_result_00084750(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = subtract_and_store_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_unsigned_integers_0008477c",
            "code": "\nvoid subtractUnsignedIntegers_0008477c(uint minuend,int subtrahend,undefined4 multiplierLower32,undefined4 multiplierUpper32,int *resultArray)\n\n{\n  uint productLower32;\n  longlong product;\n  \n  product = divide_unsigned_numbers_000847e0();\n  product = product * CONCAT44(multiplierUpper32,multiplierLower32);\n  productLower32 = (uint)product;\n  *resultArray = minuend - productLower32;\n  resultArray[1] = (subtrahend - (int)((ulonglong)product >> 0x20)) - (uint)(minuend < productLower32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_unsigned_integers_0008477c",
                "param_1": "minuend",
                "param_2": "subtrahend",
                "param_3": "multiplierLower32",
                "param_4": "multiplierUpper32",
                "param_5": "resultArray",
                "uVar1": "productLower32",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_and_store_000847ac",
            "code": "\nvoid subtractAndStore_000847ac(uint input,int size,undefined4 param3,undefined4 param4,int *result)\n\n{\n  uint calc;\n  longlong product;\n  \n  product = divide_and_remainder_00084a80();\n  product = product * CONCAT44(param4,param3);\n  calc = (uint)product;\n  *result = input - calc;\n  result[1] = (size - (int)((ulonglong)product >> 0x20)) - (uint)(input < calc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_and_store_000847ac",
                "param_1": "input",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result",
                "uVar1": "calc",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_unsigned_numbers_000847e0",
            "code": "\nundefined8 divideUnsignedNumbers_000847e0(uint dividend,uint dividendEnd,uint divisor,uint divisorEnd)\n\n{\n  longlong tempLongVar;\n  uint quotient;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  int shiftAmount;\n  uint product1;\n  uint product2;\n  uint shift;\n  uint tempDividend;\n  uint tempQuotient;\n  uint multiplier;\n  bool isNegative;\n  \n  if ((int)dividendEnd < 0) {\n    isNegative = dividend != 0;\n    dividend = -dividend;\n    dividendEnd = -dividendEnd - (uint)isNegative;\n    shift = 0xffffffff;\n  }\n  else {\n    shift = 0;\n  }\n  if ((int)divisorEnd < 0) {\n    shift = ~shift;\n    isNegative = divisor != 0;\n    divisor = -divisor;\n    divisorEnd = -divisorEnd - (uint)isNegative;\n  }\n  if (divisorEnd == 0) {\n    if (dividendEnd < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        tempVar1 = dividend >> (0x20U - shiftAmount & 0xff);\n        divisor = divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n        dividendEnd = dividendEnd << shiftAmount | tempVar1;\n      }\n      quotient = divisor >> 0x10;\n      tempVar2 = dividendEnd / quotient;\n      product1 = (divisor & 0xffff) * tempVar2;\n      tempDividend = dividend >> 0x10 | (dividendEnd - quotient * tempVar2) * 0x10000;\n      tempVar1 = tempVar2;\n      if (tempDividend <= product1 && product1 - tempDividend != 0) {\n        isNegative = CARRY4(tempDividend,divisor);\n        tempDividend = tempDividend + divisor;\n        tempVar1 = tempVar2 - 1;\n        if ((isNegative == false) && (tempDividend <= product1 && product1 - tempDividend != 0)) {\n          tempVar1 = tempVar2 - 2;\n          tempDividend = tempDividend + divisor;\n        }\n      }\n      product2 = (tempDividend - product1) / quotient;\n      tempVar2 = (divisor & 0xffff) * product2;\n      product1 = dividend & 0xffff | ((tempDividend - product1) - quotient * product2) * 0x10000;\n      quotient = product2;\n      if (product1 <= tempVar2 && tempVar2 - product1 != 0) {\n        quotient = product2 - 1;\n        if ((CARRY4(product1,divisor) == false) &&\n           (product1 + divisor <= tempVar2 && tempVar2 - (product1 + divisor) != 0)) {\n          quotient = product2 - 2;\n        }\n      }\n      quotient = quotient | tempVar1 << 0x10;\n      tempVar1 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendEnd = dividendEnd - divisor;\n        tempVar2 = divisor >> 0x10;\n        multiplier = divisor & 0xffff;\n        tempVar1 = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        tempVar1 = dividendEnd >> (0x20U - shiftAmount & 0xff);\n        tempVar2 = divisor >> 0x10;\n        tempDividend = tempVar1 / tempVar2;\n        multiplier = divisor & 0xffff;\n        product1 = multiplier * tempDividend;\n        product2 = dividend >> (0x20U - shiftAmount & 0xff) | dividendEnd << shiftAmount;\n        tempVar1 = product2 >> 0x10 | (tempVar1 - tempVar2 * tempDividend) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotient = tempDividend;\n        if (tempVar1 <= product1 && product1 - tempVar1 != 0) {\n          isNegative = CARRY4(tempVar1,divisor);\n          tempVar1 = tempVar1 + divisor;\n          quotient = tempDividend - 1;\n          if ((isNegative == false) && (tempVar1 <= product1 && product1 - tempVar1 != 0)) {\n            quotient = tempDividend - 2;\n            tempVar1 = tempVar1 + divisor;\n          }\n        }\n        tempVar3 = (tempVar1 - product1) / tempVar2;\n        tempDividend = multiplier * tempVar3;\n        dividendEnd = product2 & 0xffff | ((tempVar1 - product1) - tempVar2 * tempVar3) * 0x10000;\n        tempVar1 = tempVar3;\n        if (dividendEnd <= tempDividend && tempDividend - dividendEnd != 0) {\n          isNegative = CARRY4(dividendEnd,divisor);\n          dividendEnd = dividendEnd + divisor;\n          tempVar1 = tempVar3 - 1;\n          if ((isNegative == false) && (dividendEnd <= tempDividend && tempDividend - dividendEnd != 0)) {\n            tempVar1 = tempVar3 - 2;\n            dividendEnd = dividendEnd + divisor;\n          }\n        }\n        dividendEnd = dividendEnd - tempDividend;\n        tempVar1 = tempVar1 | quotient << 0x10;\n      }\n      quotient = dividendEnd / tempVar2;\n      tempDividend = multiplier * quotient;\n      product2 = dividend >> 0x10 | (dividendEnd - tempVar2 * quotient) * 0x10000;\n      product1 = quotient;\n      if (product2 <= tempDividend && tempDividend - product2 != 0) {\n        isNegative = CARRY4(product2,divisor);\n        product2 = product2 + divisor;\n        product1 = quotient - 1;\n        if ((isNegative == false) && (product2 <= tempDividend && tempDividend - product2 != 0)) {\n          product1 = quotient - 2;\n          product2 = product2 + divisor;\n        }\n      }\n      tempVar3 = (product2 - tempDividend) / tempVar2;\n      multiplier = multiplier * tempVar3;\n      tempVar2 = dividend & 0xffff | ((product2 - tempDividend) - tempVar2 * tempVar3) * 0x10000;\n      quotient = tempVar3;\n      if (tempVar2 <= multiplier && multiplier - tempVar2 != 0) {\n        quotient = tempVar3 - 1;\n        if ((CARRY4(tempVar2,divisor) == false) &&\n           (tempVar2 + divisor <= multiplier && multiplier - (tempVar2 + divisor) != 0)) {\n          quotient = tempVar3 - 2;\n        }\n      }\n      quotient = quotient | product1 << 0x10;\n    }\n  }\n  else if (dividendEnd < divisorEnd) {\n    tempVar1 = 0;\n    quotient = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(divisorEnd);\n    if (shiftAmount == 0) {\n      if ((divisorEnd < dividendEnd) || (divisor <= dividend)) {\n        tempVar1 = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        tempVar1 = 0;\n      }\n    }\n    else {\n      tempVar1 = 0x20 - shiftAmount;\n      tempVar2 = dividendEnd >> (tempVar1 & 0xff);\n      multiplier = divisor >> (tempVar1 & 0xff) | divisorEnd << shiftAmount;\n      tempDividend = multiplier >> 0x10;\n      quotient = tempVar2 / tempDividend;\n      product2 = (multiplier & 0xffff) * quotient;\n      product1 = dividendEnd << shiftAmount | dividend >> (tempVar1 & 0xff);\n      tempVar2 = product1 >> 0x10 | (tempVar2 - tempDividend * quotient) * 0x10000;\n      tempVar1 = quotient;\n      if (tempVar2 <= product2 && product2 - tempVar2 != 0) {\n        isNegative = CARRY4(tempVar2,multiplier);\n        tempVar2 = tempVar2 + multiplier;\n        tempVar1 = quotient - 1;\n        if ((isNegative == false) && (tempVar2 <= product2 && product2 - tempVar2 != 0)) {\n          tempVar1 = quotient - 2;\n          tempVar2 = tempVar2 + multiplier;\n        }\n      }\n      tempVar3 = (tempVar2 - product2) / tempDividend;\n      tempQuotient = (multiplier & 0xffff) * tempVar3;\n      tempVar2 = product1 & 0xffff | ((tempVar2 - product2) - tempDividend * tempVar3) * 0x10000;\n      quotient = tempVar3;\n      if (tempVar2 <= tempQuotient && tempQuotient - tempVar2 != 0) {\n        isNegative = CARRY4(tempVar2,multiplier);\n        tempVar2 = tempVar2 + multiplier;\n        quotient = tempVar3 - 1;\n        if ((isNegative == false) && (tempVar2 <= tempQuotient && tempQuotient - tempVar2 != 0)) {\n          quotient = tempVar3 - 2;\n          tempVar2 = tempVar2 + multiplier;\n        }\n      }\n      quotient = quotient | tempVar1 << 0x10;\n      tempLongVar = (ulonglong)quotient * (ulonglong)(divisor << shiftAmount);\n      product1 = (uint)((ulonglong)tempLongVar >> 0x20);\n      tempVar1 = 0;\n      if ((tempVar2 - tempQuotient < product1) ||\n         ((tempVar2 - tempQuotient == product1 && (dividend << shiftAmount < (uint)tempLongVar)))) {\n        quotient = quotient - 1;\n        tempVar1 = 0;\n      }\n    }\n  }\n  if (shift != 0) {\n    isNegative = quotient != 0;\n    quotient = -quotient;\n    tempVar1 = -tempVar1 - (uint)isNegative;\n  }\n  return CONCAT44(tempVar1,quotient);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_unsigned_numbers_000847e0",
                "param_1": "dividend",
                "param_2": "dividendEnd",
                "param_3": "divisor",
                "param_4": "divisorEnd",
                "lVar1": "tempLongVar",
                "uVar2": "quotient",
                "uVar3": "tempVar1",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "iVar6": "shiftAmount",
                "uVar7": "product1",
                "uVar8": "product2",
                "uVar9": "shift",
                "uVar10": "tempDividend",
                "uVar11": "tempQuotient",
                "uVar12": "multiplier",
                "bVar13": "isNegative"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "divide_and_remainder_00084a80",
            "code": "\nulonglong divideAndRemainder_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong tmp1;\n  uint tmp2;\n  uint tmp3;\n  uint tmp4;\n  uint tmp5;\n  uint tmp6;\n  uint tmp7;\n  uint tmp8;\n  uint tmp9;\n  int shift;\n  bool carry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift = LZCOUNT(quotient);\n      if (shift == 0) {\n        divisor = divisor - quotient;\n        tmp3 = quotient >> 0x10;\n        tmp5 = quotient & 0xffff;\n        tmp2 = 1;\n      }\n      else {\n        quotient = quotient << shift;\n        tmp8 = divisor >> (0x20U - shift & 0xff);\n        tmp3 = quotient >> 0x10;\n        tmp9 = tmp8 / tmp3;\n        tmp5 = quotient & 0xffff;\n        tmp2 = tmp5 * tmp9;\n        tmp6 = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        tmp4 = tmp6 >> 0x10 | (tmp8 - tmp3 * tmp9) * 0x10000;\n        dividend = dividend << shift;\n        tmp8 = tmp9;\n        if (tmp4 <= tmp2 && tmp2 - tmp4 != 0) {\n          carry = CARRY4(tmp4,quotient);\n          tmp4 = tmp4 + quotient;\n          tmp8 = tmp9 - 1;\n          if ((carry == false) && (tmp4 <= tmp2 && tmp2 - tmp4 != 0)) {\n            tmp8 = tmp9 - 2;\n            tmp4 = tmp4 + quotient;\n          }\n        }\n        tmp7 = (tmp4 - tmp2) / tmp3;\n        tmp9 = tmp5 * tmp7;\n        divisor = tmp6 & 0xffff | ((tmp4 - tmp2) - tmp3 * tmp7) * 0x10000;\n        tmp2 = tmp7;\n        if (divisor <= tmp9 && tmp9 - divisor != 0) {\n          carry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          tmp2 = tmp7 - 1;\n          if ((carry == false) && (divisor <= tmp9 && tmp9 - divisor != 0)) {\n            tmp2 = tmp7 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - tmp9;\n        tmp2 = tmp2 | tmp8 << 0x10;\n      }\n      tmp9 = divisor / tmp3;\n      tmp4 = tmp5 * tmp9;\n      tmp6 = dividend >> 0x10 | (divisor - tmp3 * tmp9) * 0x10000;\n      tmp8 = tmp9;\n      if (tmp6 <= tmp4 && tmp4 - tmp6 != 0) {\n        carry = CARRY4(tmp6,quotient);\n        tmp6 = tmp6 + quotient;\n        tmp8 = tmp9 - 1;\n        if ((carry == false) && (tmp6 <= tmp4 && tmp4 - tmp6 != 0)) {\n          tmp8 = tmp9 - 2;\n          tmp6 = tmp6 + quotient;\n        }\n      }\n      tmp9 = (tmp6 - tmp4) / tmp3;\n      tmp5 = tmp5 * tmp9;\n      tmp6 = dividend & 0xffff | ((tmp6 - tmp4) - tmp3 * tmp9) * 0x10000;\n      tmp3 = tmp9;\n      if (tmp6 <= tmp5 && tmp5 - tmp6 != 0) {\n        tmp3 = tmp9 - 1;\n        if ((CARRY4(tmp6,quotient) == false) &&\n           (tmp6 + quotient <= tmp5 && tmp5 - (tmp6 + quotient) != 0)) {\n          tmp3 = tmp9 - 2;\n        }\n      }\n      return CONCAT44(tmp2,tmp3 | tmp8 << 0x10);\n    }\n    shift = LZCOUNT(quotient);\n    if (shift != 0) {\n      tmp8 = dividend >> (0x20U - shift & 0xff);\n      quotient = quotient << shift;\n      dividend = dividend << shift;\n      divisor = tmp8 | divisor << shift;\n    }\n    tmp2 = quotient >> 0x10;\n    tmp3 = divisor / tmp2;\n    tmp5 = (quotient & 0xffff) * tmp3;\n    tmp9 = dividend >> 0x10 | (divisor - tmp2 * tmp3) * 0x10000;\n    tmp8 = tmp3;\n    if (tmp9 <= tmp5 && tmp5 - tmp9 != 0) {\n      carry = CARRY4(tmp9,quotient);\n      tmp9 = tmp9 + quotient;\n      tmp8 = tmp3 - 1;\n      if ((carry == false) && (tmp9 <= tmp5 && tmp5 - tmp9 != 0)) {\n        tmp8 = tmp3 - 2;\n        tmp9 = tmp9 + quotient;\n      }\n    }\n    tmp6 = (tmp9 - tmp5) / tmp2;\n    tmp3 = (quotient & 0xffff) * tmp6;\n    tmp5 = dividend & 0xffff | ((tmp9 - tmp5) - tmp2 * tmp6) * 0x10000;\n    tmp2 = tmp6;\n    if (tmp5 <= tmp3 && tmp3 - tmp5 != 0) {\n      tmp2 = tmp6 - 1;\n      if ((CARRY4(tmp5,quotient) == false) &&\n         (tmp5 + quotient <= tmp3 && tmp3 - (tmp5 + quotient) != 0)) {\n        tmp2 = tmp6 - 2;\n      }\n    }\n    tmp2 = tmp2 | tmp8 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift = LZCOUNT(remainder);\n    if (shift == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      tmp2 = 0;\n    }\n    else {\n      tmp2 = 0x20 - shift;\n      tmp8 = divisor >> (tmp2 & 0xff);\n      tmp3 = remainder << shift | quotient >> (tmp2 & 0xff);\n      tmp5 = tmp3 >> 0x10;\n      tmp4 = tmp8 / tmp5;\n      tmp9 = (tmp3 & 0xffff) * tmp4;\n      tmp6 = dividend >> (tmp2 & 0xff) | divisor << shift;\n      tmp2 = tmp6 >> 0x10 | (tmp8 - tmp5 * tmp4) * 0x10000;\n      tmp8 = tmp4;\n      if (tmp2 <= tmp9 && tmp9 - tmp2 != 0) {\n        carry = CARRY4(tmp2,tmp3);\n        tmp2 = tmp2 + tmp3;\n        tmp8 = tmp4 - 1;\n        if ((carry == false) && (tmp2 <= tmp9 && tmp9 - tmp2 != 0)) {\n          tmp8 = tmp4 - 2;\n          tmp2 = tmp2 + tmp3;\n        }\n      }\n      tmp4 = (tmp2 - tmp9) / tmp5;\n      tmp7 = (tmp3 & 0xffff) * tmp4;\n      tmp5 = tmp6 & 0xffff | ((tmp2 - tmp9) - tmp5 * tmp4) * 0x10000;\n      tmp2 = tmp4;\n      if (tmp5 <= tmp7 && tmp7 - tmp5 != 0) {\n        carry = CARRY4(tmp5,tmp3);\n        tmp5 = tmp5 + tmp3;\n        tmp2 = tmp4 - 1;\n        if ((carry == false) && (tmp5 <= tmp7 && tmp7 - tmp5 != 0)) {\n          tmp2 = tmp4 - 2;\n          tmp5 = tmp5 + tmp3;\n        }\n      }\n      tmp2 = tmp2 | tmp8 << 0x10;\n      tmp1 = (ulonglong)tmp2 * (ulonglong)(quotient << shift);\n      tmp8 = (uint)((ulonglong)tmp1 >> 0x20);\n      if ((tmp5 - tmp7 < tmp8) || ((tmp5 - tmp7 == tmp8 && (dividend << shift < (uint)tmp1)))\n         ) {\n        tmp2 = tmp2 - 1;\n      }\n    }\n  }\n  return (ulonglong)tmp2;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "divide_and_remainder_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "tmp1",
                "uVar2": "tmp2",
                "uVar3": "tmp3",
                "uVar4": "tmp4",
                "uVar5": "tmp5",
                "uVar6": "tmp6",
                "uVar7": "tmp7",
                "uVar8": "tmp8",
                "uVar9": "tmp9",
                "iVar10": "shift",
                "bVar11": "carry"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 82778,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}