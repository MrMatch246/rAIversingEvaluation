{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input_value)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input_value"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_hardware_00080164",
            "code": "\nvoid initializeHardware_00080164(int **hardwareConfig)\n\n{\n  int result;\n  \n  *hardwareConfig = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)hardwareConfig + 6)) {\n    setPinMode(*(byte *)((int)hardwareConfig + 6),1);\n    writeDigitalValue(*(undefined *)((int)hardwareConfig + 6),0);\n  }\n  do {\n    result = (**(code **)(**hardwareConfig + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)hardwareConfig + 0x49) = 0;\n  *(undefined *)((int)hardwareConfig + 0x4a) = 0;\n  *(undefined2 *)(hardwareConfig + 0x15) = 0;\n  *(undefined2 *)((int)hardwareConfig + 0x52) = 0;\n  *(undefined2 *)(hardwareConfig + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_hardware_00080164",
                "param_1": "hardwareConfig",
                "iVar1": "result",
                "pinMode": "setPinMode",
                "digitalWrite": "writeDigitalValue"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **data)\n\n{\n  bool isOverflow;\n  undefined value;\n  char processedData;\n  int result;\n  byte counter;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (result = (**(code **)(**data + 8))(), result != 0) {\n      counter = *(byte *)((int)data + 0x49);\n      value = (**(code **)(**data + 0xc))();\n      processedData = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + counter + 9) = value;\n      counter = processedData + 1;\n      *(byte *)((int)data + 0x49) = counter;\n      if (0x3f < counter) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isOverflow) {\n    processedData = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    processedData = *(char *)((int)data + 0x49);\n  }\n  return (int)processedData;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "data",
                "bVar1": "isOverflow",
                "uVar2": "value",
                "cVar3": "processedData",
                "iVar4": "result",
                "bVar5": "counter"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int dataStartIndex,uint dataLength)\n\n{\n  int currentIndex;\n  uint xorResult;\n  char bitShiftCounter;\n  uint bitMask;\n  \n  xorResult = 0xffff;\n  for (currentIndex = dataStartIndex; (currentIndex - dataStartIndex & 0xffU) < dataLength; currentIndex = currentIndex + 1) {\n    xorResult = xorResult ^ *(byte *)(currentIndex + 9);\n    bitShiftCounter = '\\b';\n    do {\n      bitMask = xorResult & 1;\n      xorResult = xorResult >> 1;\n      if (bitMask != 0) {\n        xorResult = xorResult ^ 0xa001;\n      }\n      bitShiftCounter = bitShiftCounter + -1;\n    } while (bitShiftCounter != '\\0');\n  }\n  return (xorResult & 0xff) << 8 | xorResult >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "dataStartIndex",
                "param_2": "dataLength",
                "iVar1": "currentIndex",
                "uVar2": "xorResult",
                "cVar3": "bitShiftCounter",
                "uVar4": "bitMask"
            },
            "calling": [
                "sendTxBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "calculate_crc_and_store_00080258",
            "code": "\nvoid calculateCRCAndStore_00080258(int **dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byteValue;\n  undefined2 calculatedCRC;\n  int loopVariable;\n  uint byteValueAsUint;\n  \n  byteValue = *(byte *)((int)dataPointer + 0x49);\n  byteValueAsUint = (uint)byteValue;\n  calculatedCRC = calcCRC(dataPointer,byteValueAsUint,param3,param4,param4);\n  *(char *)((int)dataPointer + byteValueAsUint + 9) = (char)((ushort)calculatedCRC >> 8);\n  *(char *)((int)dataPointer + (byteValueAsUint + 1 & 0xff) + 9) = (char)calculatedCRC;\n  *(byte *)((int)dataPointer + 0x49) = byteValue + 2;\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    digitalWrite(*(byte *)((int)dataPointer + 6),1);\n  }\n  if (*(byte *)((int)dataPointer + 5) < 4) {\n    (**(code **)(**dataPointer + 4))(*dataPointer,(int)dataPointer + 9,*(undefined *)((int)dataPointer + 0x49));\n  }\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    digitalWrite(*(byte *)((int)dataPointer + 6),0);\n  }\n  if (*(byte *)((int)dataPointer + 5) < 4) {\n    do {\n      loopVariable = (**(code **)(**dataPointer + 0xc))();\n    } while (-1 < loopVariable);\n  }\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  loopVariable = millis();\n  dataPointer[0x17] = (int *)(loopVariable + (uint)*(ushort *)((int)dataPointer + 0x56));\n  *(short *)((int)dataPointer + 0x52) = *(short *)((int)dataPointer + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "calculate_crc_and_store_00080258",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "byteValue",
                "uVar2": "calculatedCRC",
                "iVar3": "loopVariable",
                "uVar4": "byteValueAsUint"
            },
            "calling": [
                "query"
            ],
            "called": [
                "millis",
                "calcCRC",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_and_send_data_000802da",
            "code": "\nint validateAndSendData_000802da(int bufferAddress,uint paramFlags,uint dataSize,ushort *dataBuffer)\n\n{\n  char errorCode;\n  byte tempByte;\n  undefined tempVar;\n  ushort tempUShort;\n  uint tempUInt;\n  ushort *tempBufferPtr;\n  undefined paramFlags_lowByte;\n  undefined paramFlags_highByte;\n  ushort dataSize_ushort;\n  \n  paramFlags_lowByte = (undefined)paramFlags;\n  paramFlags_highByte = (undefined)(paramFlags >> 8);\n  dataSize_ushort = (ushort)dataSize;\n  tempUInt = dataSize & 0xffff;\n  if (*(char *)(bufferAddress + 4) != '\\0') {\n    errorCode = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(bufferAddress + 7) != '\\0') {\n    errorCode = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((paramFlags & 0xff) - 1 & 0xff)) {\n    errorCode = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(bufferAddress + 9) = paramFlags_lowByte;\n  *(undefined *)(bufferAddress + 10) = paramFlags_highByte;\n  *(ushort **)(bufferAddress + 0x4c) = dataBuffer;\n  *(char *)(bufferAddress + 0xb) = (char)(paramFlags >> 0x18);\n  *(char *)(bufferAddress + 0xc) = (char)(paramFlags >> 0x10);\n  tempVar = (undefined)(dataSize >> 8);\n  switch(paramFlags_highByte) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(bufferAddress + 0xd) = tempVar;\n    break;\n  case 5:\n    tempUShort = *dataBuffer;\n    if (tempUShort != 0) {\n      tempUShort = 1;\n    }\n    *(char *)(bufferAddress + 0xd) = -(char)tempUShort;\n    tempUInt = 0;\n    break;\n  case 6:\n    *(char *)(bufferAddress + 0xd) = (char)(*dataBuffer >> 8);\n    tempUInt = (uint)*dataBuffer;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    tempByte = (byte)(dataSize_ushort >> 3) & 0xfe;\n    if ((dataSize & 0xf) != 0) {\n      tempByte = tempByte + 1;\n    }\n    *(char *)(bufferAddress + 0xe) = (char)dataSize;\n    *(undefined *)(bufferAddress + 0xd) = tempVar;\n    *(byte *)(bufferAddress + 0xf) = tempByte;\n    tempVar = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(bufferAddress + 0xd) = tempVar;\n    *(char *)(bufferAddress + 0xe) = (char)dataSize;\n    dataBuffer = dataBuffer + -1;\n    *(char *)(bufferAddress + 0xf) = (char)tempUInt * '\\x02';\n    *(undefined *)(bufferAddress + 0x49) = 7;\n    tempBufferPtr = dataBuffer + tempUInt;\n    while (dataBuffer != tempBufferPtr) {\n      tempByte = *(byte *)(bufferAddress + 0x49);\n      *(char *)(bufferAddress + (uint)tempByte + 9) = (char)(dataBuffer[1] >> 8);\n      tempUInt = tempByte + 1 & 0xff;\n      *(char *)(bufferAddress + 0x49) = (char)tempUInt;\n      dataBuffer = dataBuffer + 1;\n      *(char *)(tempUInt + bufferAddress + 9) = (char)*dataBuffer;\n      *(byte *)(bufferAddress + 0x49) = tempByte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(bufferAddress + 0xe) = (char)tempUInt;\n  tempVar = 6;\nLAB_0008034a:\n  *(undefined *)(bufferAddress + 0x49) = tempVar;\nswitchD_0008031e_caseD_7:\n  sendTxBuffer(bufferAddress);\n  *(undefined *)(bufferAddress + 7) = 1;\n  errorCode = '\\0';\nLAB_000803cc:\n  return (int)errorCode;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_and_send_data_000802da",
                "param_1": "bufferAddress",
                "param_2": "paramFlags",
                "param_3": "dataSize",
                "param_4": "dataBuffer",
                "cVar1": "errorCode",
                "bVar2": "tempByte",
                "uVar3": "tempVar",
                "uVar4": "tempUShort",
                "uVar5": "tempUInt",
                "puVar6": "tempBufferPtr",
                "local_1c": "paramFlags_lowByte",
                "local_1b": "paramFlags_highByte",
                "local_18": "dataSize_ushort"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_increment_value_000803d4",
            "code": "\nundefined4 checkAndIncrementValue_000803d4(int inputValue)\n\n{\n  int counter;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  counter = 0;\n  do {\n    if ((&DAT_00084d10)[counter] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    counter = counter + 1;\n  } while (counter != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_increment_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "counter"
            },
            "calling": [
                "poll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "extract_and_store_words_00080410",
            "code": "\nvoid extractAndStoreWords_00080410(int inputAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 word;\n  int currentAddress;\n  byte counter;\n  uint byteIndex;\n  int wordArrayAddress;\n  \n  counter = 0;\n  while( true ) {\n    byteIndex = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(inputAddress + 0xb) >> 1 <= byteIndex) break;\n    currentAddress = (byteIndex * 2 + 3 & 0xff) + inputAddress;\n    wordArrayAddress = *(int *)(inputAddress + 0x4c);\n    word = makeWord(*(undefined *)(currentAddress + 9),*(undefined *)(currentAddress + 10),currentAddress,\n                     *(byte *)(inputAddress + 0xb),param4);\n    *(undefined2 *)(wordArrayAddress + byteIndex * 2) = word;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "extract_and_store_words_00080410",
                "param_1": "inputAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "word",
                "iVar2": "currentAddress",
                "bVar3": "counter",
                "uVar4": "byteIndex",
                "iVar5": "wordArrayAddress"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_validation_0008043e",
            "code": "\nint checkValidation_0008043e(int **inputParams)\n\n{\n  char status;\n  uint returnValue;\n  int *currentTime;\n  int validationResult;\n  uint bufferSize;\n  \n  if (*(byte *)((int)inputParams + 5) < 4) {\n    returnValue = (**(code **)(**inputParams + 8))();\n    bufferSize = returnValue & 0xff;\n  }\n  currentTime = (int *)millis();\n  if (inputParams[0x17] < currentTime) {\n    *(undefined *)(inputParams + 2) = 0xff;\n    *(undefined *)((int)inputParams + 7) = 0;\n    *(short *)(inputParams + 0x15) = *(short *)(inputParams + 0x15) + 1;\n  }\n  else if (7 < bufferSize) {\n    getRxBuffer(inputParams);\n    validationResult = validateAnswer(inputParams);\n    if (validationResult == 0) {\n      if (*(byte *)((int)inputParams + 10) - 3 < 2) {\n        get_FC3(inputParams);\n      }\n      *(undefined *)((int)inputParams + 7) = 0;\n      status = *(char *)((int)inputParams + 0x49);\n    }\n    else {\n      *(undefined *)((int)inputParams + 7) = 0;\n      status = (char)validationResult;\n    }\n    goto LAB_000804a2;\n  }\n  status = '\\0';\nLAB_000804a2:\n  return (int)status;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_validation_0008043e",
                "param_1": "inputParams",
                "cVar1": "status",
                "uVar2": "returnValue",
                "piVar3": "currentTime",
                "iVar4": "validationResult",
                "unaff_r6": "bufferSize"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "millis",
                "getRxBuffer",
                "get_FC3",
                "validateAnswer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_peripherals_000804a8",
            "code": "\nundefined8 initializePeripherals_000804a8(void)\n\n{\n  int iVar1;\n  \n  pinMode(1,0);\n  pinMode(6,1);\n  pinMode(0,1);\n  pinMode(1,1);\n  digitalWrite(0,0);\n  digitalWrite(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initializeHardware(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = currentMillis();\n  iVar1 = currentMillis();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = currentMillis();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = currentMillis();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = currentMillis();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_peripherals_000804a8",
                "initialize_hardware_00080164": "initializeHardware",
                "millis": "currentMillis",
                "software_interrupt": "interrupt"
            },
            "calling": [
                "main"
            ],
            "called": [
                "millis",
                "pinMode",
                "digitalWrite",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_sensor_data_000805d0",
            "code": "\n\n\nvoid processSensorData_000805d0(void)\n\n{\n  uint currentMillis;\n  undefined4 timeDiff1;\n  undefined4 timeDiff2;\n  undefined4 timeDiff3;\n  undefined4 sumTimeDiff;\n  int currentTime;\n  uint *pointerVar;\n  undefined4 *pointerVar2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    currentMillis = millis();\n    if (DAT_200708c8 < currentMillis) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = __floatunsisf(DAT_200708d8);\n      DAT_2007094c = __floatsisf(DAT_200708da / 10);\n      DAT_200709c4 = __floatunsisf(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n    }\n    break;\n  case '\\x03':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      pointerVar2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      query(&DAT_200709e4,*pointerVar2,pointerVar2[1],pointerVar2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    poll(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      pointerVar2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = millis();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    pointerVar = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *pointerVar = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (currentMillis = millis(), DAT_200708c0 < currentMillis)) {\n      DAT_20070960 = DAT_20070960 + 1;\n      currentTime = millis();\n      DAT_200708c0 = currentTime + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      currentMillis = millis();\n      if (DAT_200708c0 < currentMillis) {\n        DAT_2007090c = DAT_2007090c + 1;\n        currentTime = millis();\n        DAT_200708c0 = currentTime + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        pointerVar = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      currentMillis = millis();\n      if (DAT_200708c0 < currentMillis) {\n        DAT_2007090c = DAT_2007090c + 1;\n        currentTime = millis();\n        DAT_200708c0 = currentTime + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  currentMillis = millis();\n  if (DAT_200709e0 < currentMillis) {\n    timeDiff1 = __floatsisf(DAT_20070940);\n    timeDiff2 = __aeabi_fsub(timeDiff1,DAT_200709c8);\n    timeDiff1 = DAT_200708c4;\n    DAT_20070930 = timeDiff2;\n    timeDiff3 = __addsf3(timeDiff2,DAT_200708c4);\n    timeDiff3 = __aeabi_fmul(timeDiff3,DAT_2007094c);\n    timeDiff3 = __addsf3(timeDiff3,DAT_20070914);\n    DAT_2007094c = timeDiff3;\n    timeDiff1 = __aeabi_fsub(timeDiff2,timeDiff1);\n    timeDiff1 = __aeabi_fmul(timeDiff1,DAT_200709c4);\n    timeDiff1 = __aeabi_fsub(timeDiff1,DAT_2007096c);\n    DAT_200709c4 = timeDiff1;\n    sumTimeDiff = __aeabi_fmul(timeDiff2,DAT_20070a4c);\n    sumTimeDiff = __addsf3(sumTimeDiff,timeDiff3);\n    __addsf3(sumTimeDiff,timeDiff1);\n    DAT_20070910 = __aeabi_f2iz();\n    DAT_2007091c = __floatsisf();\n    DAT_2007092c = 0;\n    DAT_200708c4 = timeDiff2;\n    DAT_20070914 = timeDiff3;\n    DAT_2007096c = timeDiff1;\n    currentTime = millis();\n    DAT_200709e0 = currentTime + DAT_20070970;\n  }\n  timeDiff1 = __floatsisf(DAT_20070970);\n  currentTime = __aeabi_fcmpge(DAT_2007091c,timeDiff1);\n  if (currentTime != 0) {\n    DAT_2007091c = timeDiff1;\n  }\n  currentTime = __aeabi_fcmple(DAT_2007091c,0);\n  if (currentTime != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = __fixunssfsi(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_sensor_data_000805d0",
                "uVar1": "currentMillis",
                "uVar2": "timeDiff1",
                "uVar3": "timeDiff2",
                "uVar4": "timeDiff3",
                "uVar5": "sumTimeDiff",
                "iVar6": "currentTime",
                "puVar7": "pointerVar",
                "puVar8": "pointerVar2"
            },
            "calling": [
                "main"
            ],
            "called": [
                "millis",
                "query",
                "__aeabi_f2iz",
                "__floatunsisf",
                "__addsf3",
                "__aeabi_fcmple",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "poll",
                "__floatsisf",
                "__fixunssfsi",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_application_00080a68",
            "code": "\nvoid initializeApplication_00080a68(void)\n\n{\n  String(&DAT_20070954,\"\");\n  __aeabi_atexit(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_application_00080a68"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  SystemInit();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    digitalWrite(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(0x400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(0x400e0e00,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,0x3000,0);\n  PIO_Configure(0x400e1400,2,0x30,0);\n  PIO_Configure(0x400e1000,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,3,0);\n  PIO_Configure(0x400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  adc_disable_all_channel(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "main"
            ],
            "called": [
                "adc_init",
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_all_channel",
                "adc_configure_timing",
                "digitalWrite",
                "adc_disable_interrupt",
                "adc_configure_trigger",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_communication_00080c0c",
            "code": "\nvoid initializeCommunication_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  RingBuffer(&DAT_20070b84);\n  RingBuffer(&DAT_20070ad8);\n  UARTClass(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  RingBuffer(&DAT_20070de4);\n  RingBuffer(&DAT_20070e6c);\n  RingBuffer(&DAT_20070ef4);\n  RingBuffer(&DAT_20070a50);\n  RingBuffer(&DAT_20070c84);\n  RingBuffer(&DAT_20070d0c);\n  USARTClass(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  USARTClass(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  USARTClass(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_communication_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "RingBuffer",
                "UARTClass",
                "USARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "process_serial_events_00080ce0",
            "code": "\nvoid processSerialEvents_00080ce0(void)\n\n{\n  int numAvailable;\n  \n  numAvailable = available(&DAT_20070b60);\n  if (numAvailable != 0) {\n    serialEvent();\n  }\n  numAvailable = available(&DAT_20070c0c);\n  if (numAvailable != 0) {\n    serialEvent1();\n  }\n  numAvailable = available(&DAT_20070c34);\n  if (numAvailable != 0) {\n    serialEvent2();\n  }\n  numAvailable = available(&DAT_20070c5c);\n  if (numAvailable != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "process_serial_events_00080ce0",
                "iVar1": "numAvailable"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent2",
                "serialEvent1",
                "available",
                "serialEvent3",
                "serialEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_data_00080d2e",
            "code": "\nvoid updateData_00080d2e(int dataPtr,undefined4 operation,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(dataPtr + 0x44) = value;\n  switch(operation) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(dataPtr + 0x70) & *(uint *)(dataPtr + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(dataPtr + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(dataPtr + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(dataPtr + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_data_00080d2e",
                "param_1": "dataPtr",
                "param_2": "operation",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "set_parameters_00080d54",
            "code": "\nvoid setParameters_00080d54(undefined4 *parameters,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  parameters[0x11] = value;\n  if (isNegative) {\n    parameters[0x19] = value;\n  }\n  if (!isNegative) {\n    parameters[0x18] = value;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    parameters[8] = value;\n  }\n  if (!isNegative) {\n    parameters[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    parameters[0x20] = value;\n  }\n  parameters[5] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "set_parameters_00080d54",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "initialize_param_values_00080d7a",
            "code": "\nvoid initializeParamValues_00080d7a(undefined4 *params,undefined4 value,int check1,int check2,int check3)\n\n{\n  params[0x11] = value;\n  if (check3 == 0) {\n    params[0x18] = value;\n  }\n  else {\n    params[0x19] = value;\n  }\n  if (check2 == 0) {\n    params[0x15] = value;\n  }\n  else {\n    params[0x14] = value;\n  }\n  if (check1 == 0) {\n    params[0xd] = value;\n  }\n  else {\n    params[0xc] = value;\n  }\n  params[4] = value;\n  *params = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "initialize_param_values_00080d7a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "check1",
                "param_4": "check2",
                "param_5": "check3"
            },
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "set_peripheral_00080da0",
            "code": "\nundefined4 setPeripheral_00080da0(int device,int mode,undefined4 config,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(mode) {\n  case 1:\n  case 2:\n    setPeripheral_00080da0Peripheral(device,mode,config);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = config;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = config;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = config;\n    }\n    break;\n  case 3:\n    setInput(device,config,flags,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    setOutput(device,config,mode == 5,(flags << 0x1d) >> 0x1f,flags & 1,mode,config\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "set_peripheral_00080da0",
                "param_1": "device",
                "param_2": "mode",
                "param_3": "config",
                "param_4": "flags",
                "bVar1": "isNegative",
                "PIO_SetPeripheral": "setPeripheralPeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "pinMode",
                "FUN_00080ae4"
            ],
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_operators_00080e04",
            "code": "\nuint check_bitwise_operators_00080e04(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_operators_00080e04",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 check_and_set_bit_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "calling": [
                "init",
                "pinMode",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfRelocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "elfRelocationArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f24": {
            "entrypoint": "0x00080f24",
            "current_name": "initialize_memory_00080f24",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid initializeMemory_00080f24(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  \n  for (index = 0; (undefined4 *)((int)&relArray[0].offset + index) < &DAT_2007089c\n      ; index = index + 4) {\n    *(undefined4 *)((int)&relArray[0].offset + index) =\n         *(undefined4 *)(&DAT_0008588c + index);\n  }\n  for (ptr = &DAT_2007089c; ptr < (undefined4 *)0x200711c0; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080f24": "initialize_memory_00080f24",
                "iVar1": "index",
                "puVar2": "ptr",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *outputArray,uint totalSize,int blockSize,int thresholdFactor)\n\n{\n  uint blockCount;\n  uint thresholdIndex;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *outputArray = 1;\n  outputArray[1] = 0;\n  outputArray[0x48] = 0x202;\n  outputArray[0x41] = 0;\n  outputArray[0x45] = 0;\n  blockCount = totalSize / (uint)(blockSize * 2);\n  if (totalSize == blockSize * 2 * blockCount) {\n    blockCount = blockCount - 1;\n  }\n  thresholdIndex = 0;\n  do {\n    if ((uint)(thresholdFactor * (int)(((ulonglong)totalSize / (ulonglong)((blockCount + 1) * 2)) / 1000000)) <=\n        thresholds[thresholdIndex]) {\n      outputArray[1] = (thresholdIndex & 0xf) << 0x10 | (blockCount & 0xff) << 8 | outputArray[1];\n      return 0;\n    }\n    thresholdIndex = thresholdIndex + 1;\n  } while (thresholdIndex != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "outputArray",
                "param_2": "totalSize",
                "param_3": "blockSize",
                "param_4": "thresholdFactor",
                "local_58": "thresholds",
                "uVar1": "blockCount",
                "uVar2": "thresholdIndex"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_config_00081034",
            "code": "\nvoid updateConfig_00081034(int configAddress,uint value,uint configFlag)\n\n{\n  *(uint *)(configAddress + 4) = value | *(uint *)(configAddress + 4) | (configFlag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_config_00081034",
                "param_1": "configAddress",
                "param_2": "value",
                "param_3": "configFlag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_data_00081042",
            "code": "\nvoid updateData_00081042(int dataAddress,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataAddress + 4) =\n       value2 | *(uint *)(dataAddress + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_data_00081042",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_0008105c",
            "code": "\nvoid setBit_0008105c(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "set_default_value_00081066",
            "code": "\nvoid setDefaultValue_00081066(int inputValue)\n\n{\n  *(undefined4 *)(inputValue + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_00081184",
            "code": "\nundefined4 initialize_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "add_and_return_previous_value_0008118c",
            "code": "\nint addAndReturnPreviousValue_0008118c(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "add_and_return_previous_value_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "determine_return_value_000811ae",
            "code": "\nuint32_t determineReturnValue_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "determine_return_value_000811ae",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_000811be",
            "code": "\nvoid initialize_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_000811be",
                "undefined4": "void"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nvoid initialize_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2",
                "undefined4": "void"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_default_value_000811c6",
            "code": "\nundefined4 get_default_value_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_default_value_000811c6"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_to_array_000811cc",
            "code": "\n\n\nuint copyBytesToArray_000811cc(undefined4 destArray,int srcArray,uint numBytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)numBytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(srcArray + i);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_array_000811cc",
                "param_1": "destArray",
                "param_2": "srcArray",
                "param_3": "numBytes",
                "iVar1": "i"
            },
            "calling": [
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081208": {
            "entrypoint": "0x00081208",
            "current_name": "FUN_00081208",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {},
            "calling": [
                "loop",
                "setup",
                "sendTxBuffer",
                "poll"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "disable_or_configure_peripheral_00081210",
            "code": "\n\n\nint disableOrConfigurePeripheral_00081210(int channel,int mode)\n\n{\n  int result;\n  uint pinIndex;\n  undefined4 functionMask;\n  uint pinMask;\n  byte channelType;\n  byte channelConfig;\n  int configIndex;\n  int pioConfig;\n  \n  result = channel;\n  if ((&DAT_00084d24)[channel * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[channel] & 0xf) == 4) {\n      result = adc_disable_channel(0x400c0000,(&DAT_00084d31)[channel * 0x1c]);\n    }\n    channelConfig = (&DAT_20070d94)[channel];\n    channelType = channelConfig & 0xf;\n    if ((channelType < 3) && (channelConfig != 0)) {\n      if (channelType == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (channelType == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (channelType == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        result = channel * 0x1c;\n        enablePeripheralClock(*(undefined4 *)(&DAT_00084d20 + result));\n        result = configurePIO(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),0);\n        channelConfig = (&DAT_20070d94)[channel] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = channel * 0x1c;\n        enablePeripheralClock(*(undefined4 *)(&DAT_00084d20 + result));\n        result = configurePIO(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),1);\n        channelConfig = (&DAT_20070d94)[channel] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[channel] = channelConfig;\n      return result;\n    }\n    configIndex = channel * 0x1c;\n    pioConfig = *(int *)(&DAT_00084d18 + configIndex);\n    if (channelConfig >> 4 == 0) {\n      functionMask = 4;\n    }\n    else {\n      functionMask = 5;\n    }\n    result = configurePIO(pioConfig,functionMask,*(undefined4 *)(&DAT_00084d1c + configIndex),\n                          *(undefined4 *)(&DAT_00084d28 + configIndex));\n    (&DAT_20070d94)[channel] = (&DAT_20070d94)[channel] & 0xf0 | 3;\n    if (*(int *)(pioConfig + 0x18) == -1) {\n      pinIndex = *(uint *)(&DAT_00084d20 + configIndex);\n      if (0x2c < pinIndex) {\n        return 1;\n      }\n      if (pinIndex < 0x20) {\n        pinIndex = 1 << (pinIndex & 0xff);\n        pinMask = _DAT_400e0618 & pinIndex;\n        if (pinMask == pinIndex) {\n          _DAT_400e0614 = pinMask;\n        }\n      }\n      else {\n        pinIndex = 1 << (pinIndex - 0x20 & 0xff);\n        pinMask = _DAT_400e0708 & pinIndex;\n        if (pinMask == pinIndex) {\n          _DAT_400e0704 = pinMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "disable_or_configure_peripheral_00081210",
                "param_1": "channel",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "pinIndex",
                "uVar3": "functionMask",
                "uVar4": "pinMask",
                "bVar5": "channelType",
                "bVar6": "channelConfig",
                "iVar7": "configIndex",
                "iVar8": "pioConfig",
                "pmc_enable_periph_clk": "enablePeripheralClock",
                "PIO_Configure": "configurePIO"
            },
            "calling": [
                "setup",
                "digitalWrite",
                "FUN_00080164"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "set_pin_mode_and_output_00081318",
            "code": "\nvoid setPinModeAndOutput_00081318(int pinNumber,int outputValue,undefined4 configuration)\n\n{\n  int outputStatus;\n  undefined4 outputData;\n  int portNumber;\n  \n  if ((&DAT_00084d24)[pinNumber * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber,1,configuration,5,pinNumber,outputValue,configuration);\n    }\n    (&DAT_20070d94)[pinNumber] = (&DAT_20070d94)[pinNumber] & 0xf | (byte)(outputValue << 4);\n    portNumber = *(int *)(&DAT_00084d18 + pinNumber * 0x1c);\n    outputData = *(undefined4 *)(&DAT_00084d1c + pinNumber * 0x1c);\n    outputStatus = PIO_GetOutputDataStatus(portNumber,outputData);\n    if (outputStatus == 0) {\n      if (outputValue != 0) {\n        *(undefined4 *)(portNumber + 100) = outputData;\n        return;\n      }\n      *(undefined4 *)(portNumber + 0x60) = outputData;\n      return;\n    }\n    PIO_SetOutput(portNumber,outputData,outputValue,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "set_pin_mode_and_output_00081318",
                "param_1": "pinNumber",
                "param_2": "outputValue",
                "param_3": "configuration",
                "iVar1": "outputStatus",
                "uVar2": "outputData",
                "iVar3": "portNumber"
            },
            "calling": [
                "getRxBuffer",
                "setup",
                "FUN_00080ae4",
                "sendTxBuffer",
                "FUN_00080164"
            ],
            "called": [
                "pinMode",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_r_info_valid_00081388",
            "code": "\nvoid execute_if_r_info_valid_00081388(void)\n\n{\n  if ((relocation_entries[6].relocation_info != 0xffffffff) &&\n     (relocation_entries[6].relocation_info = relocation_entries[6].relocation_info - 1,\n     relocation_entries[6].relocation_info == 0)) {\n    (*(function_pointer *)((int)&relocation_entries[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_r_info_valid_00081388",
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset",
                "code": "function_pointer"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryBuffer)\n\n{\n  clearMemory(memoryBuffer,0,0x80);\n  *(undefined4 *)(memoryBuffer + 0x80) = 0;\n  *(undefined4 *)(memoryBuffer + 0x84) = 0;\n  return memoryBuffer;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryBuffer",
                "memset": "clearMemory"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_and_store_value_000813c2",
            "code": "\nvoid updateAndStoreValue_000813c2(int dataPointer,undefined newValue)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(dataPointer + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(dataPointer + 0x84)) {\n    *(undefined *)(dataPointer + *(int *)(dataPointer + 0x80)) = newValue;\n    *(uint *)(dataPointer + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_and_store_value_000813c2",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_and_flag_00081454",
            "code": "\nundefined4 updateDataAndFlag_00081454(int dataAddress,undefined4 newValue)\n\n{\n  int dataPointer;\n  uint newIndex;\n  \n  dataPointer = *(int *)(dataAddress + 0x14);\n  if ((*(int *)(*(int *)(dataAddress + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(dataPointer + 0x84) == *(int *)(dataPointer + 0x80))) {\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(dataPointer + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(dataPointer + 0x84) == newIndex);\n    *(char *)(dataPointer + *(int *)(dataPointer + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataAddress + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_and_flag_00081454",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "iVar1": "dataPointer",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_000814e4",
            "code": "\nvoid initializeFunction_000814e4(undefined4 *functionParams,undefined4 param2,undefined param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6)\n\n{\n  param1_1 = 0;\n  param1_2 = 1000;\n  param1_6 = param2;\n  *functionParams = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(functionParams + 7) = param3;\n  param1_4 = param5;\n  param1_8 = param4;\n  param1_5 = param6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_000814e4",
                "param_1": "functionParams",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_1[1]": "param1_1",
                "param_1[2]": "param1_2",
                "param_1[6]": "param1_6",
                "param_1[4]": "param1_4",
                "param_1[8]": "param1_8",
                "param_1[5]": "param1_5"
            },
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_peripherals_00081508",
            "code": "\nvoid initializePeripherals_00081508(int peripheralAddress,uint divisor,undefined4 initialValue)\n\n{\n  int tempVariable1;\n  undefined4 *pointer1;\n  \n  pmc_enable_periph_clk(*(undefined4 *)(peripheralAddress + 0x20));\n  pointer1 = *(undefined4 **)(peripheralAddress + 0x18);\n  pointer1[0x48] = 0x202;\n  *pointer1 = 0xac;\n  pointer1[1] = initialValue;\n  pointer1[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / divisor >> 4;\n  pointer1[3] = 0xffffffff;\n  pointer1[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(peripheralAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(peripheralAddress + 0x1c) & 0x1f);\n  tempVariable1 = *(int *)(peripheralAddress + 0x10);\n  *(undefined4 *)(tempVariable1 + 0x84) = 0;\n  *(undefined4 *)(tempVariable1 + 0x80) = 0;\n  tempVariable1 = *(int *)(peripheralAddress + 0x14);\n  *(undefined4 *)(tempVariable1 + 0x84) = 0;\n  *(undefined4 *)(tempVariable1 + 0x80) = 0;\n  *pointer1 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_peripherals_00081508",
                "param_1": "peripheralAddress",
                "param_2": "divisor",
                "param_3": "initialValue",
                "iVar1": "tempVariable1",
                "puVar2": "pointer1"
            },
            "calling": [],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_uart_000815d4",
            "code": "\nundefined4 * initializeUART_000815d4(undefined4 *uartInstance,undefined4 inputValue)\n\n{\n  UARTClass();\n  *uartInstance = &PTR_FUN_00081454_1_000857d8;\n  uartInstanceIndex = inputValue;\n  return uartInstance;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_uart_000815d4",
                "param_1": "uartInstance",
                "param_2": "inputValue",
                "param_1[9]": "uartInstanceIndex"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "merge_bytes_000815f8",
            "code": "\nuint mergeBytes_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "merge_bytes_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "get_FC3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "free_memory_000815fe",
            "code": "\nundefined4 * freeMemory_000815fe(undefined4 *memoryPointer)\n\n{\n  free(*memoryPointer);\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "free_memory_000815fe",
                "param_1": "memoryPointer"
            },
            "calling": [],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_memory_0008160c",
            "code": "\nvoid resetMemory_0008160c(int *memoryPointer)\n\n{\n  if (*memoryPointer != 0) {\n    free();\n  }\n  *memoryPointer = 0;\n  memoryPointer[2] = 0;\n  memoryPointer[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_memory_0008160c",
                "param_1": "memoryPointer",
                "param_1[1]": "memoryPointer[1]",
                "param_1[2]": "memoryPointer[2]"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "reallocate_and_update_array_00081622",
            "code": "\nint reallocateAndUpdateArray_00081622(int *array,int newSize,undefined4 arg3,undefined4 arg4)\n\n{\n  int newArray;\n  \n  newArray = realloc(*array,newSize + 1,arg3,arg4,arg4);\n  if (newArray != 0) {\n    *array = newArray;\n    array[1] = newSize;\n    newArray = 1;\n  }\n  return newArray;\n}\n\n",
            "renaming": {
                "FUN_00081622": "reallocate_and_update_array_00081622",
                "param_1": "array",
                "param_2": "newSize",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "newArray"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_modify_buffer_0008163a",
            "code": "\nundefined4 checkAndModifyBuffer_0008163a(int *buffer,uint length)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < length)) {\n    result = changeBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_modify_buffer_0008163a",
                "param_1": "buffer",
                "param_2": "length",
                "iVar1": "result"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_data_record_0008165c",
            "code": "\nundefined4 * updateDataRecord_0008165c(undefined4 *dataRecord,undefined4 sourceString,undefined4 size)\n\n{\n  int reservationStatus;\n  \n  reservationStatus = reserve(dataRecord,size);\n  if (reservationStatus == 0) {\n    invalidate(dataRecord);\n  }\n  else {\n    dataRecord[2] = size;\n    strcpy(*dataRecord,sourceString);\n  }\n  return dataRecord;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_data_record_0008165c",
                "param_1": "dataRecord",
                "param_2": "sourceString",
                "param_3": "size",
                "iVar1": "reservationStatus"
            },
            "calling": [
                "String"
            ],
            "called": [
                "invalidate",
                "reserve",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_param_array_00081682",
            "code": "\nundefined4 * initializeParamArray_00081682(undefined4 *paramArray,int inputString)\n\n{\n  undefined4 stringLength;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (inputString != 0) {\n    stringLength = strlen(inputString);\n    copy(paramArray,inputString,stringLength);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_param_array_00081682",
                "param_1": "paramArray",
                "param_2": "inputString",
                "uVar1": "stringLength"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_system_000816a8",
            "code": "\nvoid runSystem_000816a8(void)\n\n{\n  setupWatchdog();\n  initializeSystem();\n  initializeVariant();\n  shortDelay(1);\n  setupEnvironment();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_system_000816a8",
                "_watchdogDefaultSetup": "setupWatchdog",
                "initialize_system_00080ae4": "initializeSystem",
                "initVariant": "initializeVariant",
                "delay": "shortDelay",
                "setup": "setupEnvironment",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "loop",
                "delay",
                "FUN_00080ae4",
                "setup",
                "initVariant",
                "_watchdogDefaultSetup",
                "serialEventRun"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initializeData_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_00081714",
            "code": "\nundefined4 get_data_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_00081714"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_float_00081730",
            "code": "\nuint calculate_float_00081730(uint number,uint mask,undefined4 value,uint shift)\n\n{\n  int upper_bits_1;\n  int upper_bits_2;\n  uint temp_1;\n  uint temp_2;\n  uint result_1;\n  uint result_2;\n  uint difference;\n  bool is_equal;\n  \n  temp_1 = mask ^ 0x80000000;\n  result_1 = number << 1;\n  is_equal = result_1 == 0;\n  if (!is_equal) {\n    shift = mask << 1;\n    is_equal = shift == 0;\n  }\n  if (!is_equal) {\n    is_equal = result_1 == shift;\n  }\n  upper_bits_1 = (int)result_1 >> 0x18;\n  if (!is_equal) {\n    is_equal = upper_bits_1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)shift >> 0x18 == -1;\n  }\n  if (is_equal) {\n    upper_bits_2 = (int)(mask << 1) >> 0x18;\n    if (upper_bits_1 == -1 || upper_bits_2 == -1) {\n      result_1 = temp_1;\n      if (upper_bits_1 == -1) {\n        result_1 = number;\n      }\n      if (upper_bits_1 != -1 || upper_bits_2 != -1) {\n        temp_1 = result_1;\n      }\n      is_equal = (result_1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp_1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result_1 == temp_1;\n      }\n      if (!is_equal) {\n        result_1 = result_1 | 0x400000;\n      }\n      return result_1;\n    }\n    if (((number ^ temp_1) & 0x7fffffff) != 0) {\n      if (result_1 == 0) {\n        number = temp_1;\n      }\n      return number;\n    }\n    if (number != temp_1) {\n      return 0;\n    }\n    if ((result_1 & 0xff000000) == 0) {\n      temp_1 = number << 1;\n      if ((number & 0x80000000) != 0) {\n        temp_1 = temp_1 | 0x80000000;\n      }\n      return temp_1;\n    }\n    if (result_1 < 0xfe000000) {\n      return number + 0x800000;\n    }\n    number = number & 0x80000000;\nLAB_0008186a:\n    return number | 0x7f800000;\n  }\n  result_1 = result_1 >> 0x18;\n  shift = shift >> 0x18;\n  difference = shift - result_1;\n  is_equal = difference != 0;\n  result_2 = result_1;\n  if (is_equal && result_1 <= shift) {\n    result_2 = result_1 + difference;\n  }\n  if (is_equal && result_1 <= shift) {\n    temp_1 = temp_1 ^ number;\n  }\n  if (is_equal && result_1 <= shift) {\n    number = number ^ temp_1;\n  }\n  if (is_equal && result_1 <= shift) {\n    temp_1 = temp_1 ^ number;\n  }\n  if (shift < result_1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return number;\n  }\n  result_1 = number & 0xffffff | 0x800000;\n  if ((number & 0x80000000) != 0) {\n    result_1 = -result_1;\n  }\n  temp_2 = temp_1 & 0xffffff | 0x800000;\n  if ((temp_1 & 0x80000000) != 0) {\n    temp_2 = -temp_2;\n  }\n  if (result_2 == difference) {\n    temp_2 = temp_2 ^ 0x800000;\n    if (result_2 == 0) {\n      result_1 = result_1 ^ 0x800000;\n      result_2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result_1 = result_1 + ((int)temp_2 >> (difference & 0xff));\n  temp_2 = temp_2 << (0x20 - difference & 0xff);\n  number = result_1 & 0x80000000;\n  if ((int)result_1 < 0) {\n    is_equal = temp_2 != 0;\n    temp_2 = -temp_2;\n    result_1 = -result_1 - (uint)is_equal;\n  }\n  if (result_1 < 0x800000) {\n    temp_1 = temp_2 & 0x80000000;\n    temp_2 = temp_2 << 1;\n    result_1 = result_1 * 2 + (uint)(temp_1 != 0);\n    temp_1 = result_2 - 2;\n    if ((result_1 & 0x800000) == 0) {\n      difference = LZCOUNT(result_1) - 8;\n      result_1 = result_1 << (difference & 0xff);\n      if ((int)temp_1 < (int)difference) {\n        result_1 = result_1 >> (-(temp_1 - difference) & 0xff);\n      }\n      else {\n        result_1 = result_1 + (temp_1 - difference) * 0x800000;\n      }\n      return result_1 | number;\n    }\n  }\n  else {\n    temp_1 = result_2 - 1;\n    if (0xffffff < result_1) {\n      temp_1 = result_1 & 1;\n      result_1 = result_1 >> 1;\n      temp_2 = (uint)(temp_1 != 0) << 0x1f | temp_2 >> 1;\n      temp_1 = result_2;\n      if (0xfd < result_2) goto LAB_0008186a;\n    }\n  }\n  result_1 = result_1 + temp_1 * 0x800000 + (uint)(0x7fffffff < temp_2);\n  if (temp_2 == 0x80000000) {\n    result_1 = result_1 & 0xfffffffe;\n  }\n  return result_1 | number;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "param_1": "number",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "shift",
                "iVar1": "upper_bits_1",
                "iVar2": "upper_bits_2",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "result_1",
                "uVar6": "result_2",
                "uVar7": "difference",
                "bVar8": "is_equal"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_float_00081734",
            "code": "\nuint calculateFloat_00081734(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result;\n  uint shiftedResult;\n  uint shiftedCounter;\n  uint difference;\n  bool isZero;\n  \n  shiftedResult = input1 << 1;\n  isZero = shiftedResult == 0;\n  if (!isZero) {\n    param4 = input2 << 1;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedResult == param4;\n  }\n  shiftedInput1 = (int)shiftedResult >> 0x18;\n  if (!isZero) {\n    isZero = shiftedInput1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)param4 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      shiftedResult = input2;\n      if (shiftedInput1 == -1) {\n        shiftedResult = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = shiftedResult;\n      }\n      isZero = (shiftedResult & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = shiftedResult == input2;\n      }\n      if (!isZero) {\n        shiftedResult = shiftedResult | 0x400000;\n      }\n      return shiftedResult;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shiftedResult == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shiftedResult & 0xff000000) == 0) {\n      shiftedResult = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shiftedResult = shiftedResult | 0x80000000;\n      }\n      return shiftedResult;\n    }\n    if (shiftedResult < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  shiftedResult = shiftedResult >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - shiftedResult;\n  isZero = difference != 0;\n  shiftedCounter = shiftedResult;\n  if (isZero && shiftedResult <= param4) {\n    shiftedCounter = shiftedResult + difference;\n  }\n  if (isZero && shiftedResult <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && shiftedResult <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && shiftedResult <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < shiftedResult) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedResult = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedResult = -shiftedResult;\n  }\n  result = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (shiftedCounter == difference) {\n    result = result ^ 0x800000;\n    if (shiftedCounter == 0) {\n      shiftedResult = shiftedResult ^ 0x800000;\n      shiftedCounter = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedResult = shiftedResult + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  input1 = shiftedResult & 0x80000000;\n  if ((int)shiftedResult < 0) {\n    isZero = result != 0;\n    result = -result;\n    shiftedResult = -shiftedResult - (uint)isZero;\n  }\n  if (shiftedResult < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    shiftedResult = shiftedResult * 2 + (uint)(difference != 0);\n    difference = shiftedCounter - 2;\n    if ((shiftedResult & 0x800000) == 0) {\n      shiftedCounter = LZCOUNT(shiftedResult) - 8;\n      shiftedResult = shiftedResult << (shiftedCounter & 0xff);\n      if ((int)difference < (int)shiftedCounter) {\n        shiftedResult = shiftedResult >> (-(difference - shiftedCounter) & 0xff);\n      }\n      else {\n        shiftedResult = shiftedResult + (difference - shiftedCounter) * 0x800000;\n      }\n      return shiftedResult | input1;\n    }\n  }\n  else {\n    difference = shiftedCounter - 1;\n    if (0xffffff < shiftedResult) {\n      difference = shiftedResult & 1;\n      shiftedResult = shiftedResult >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = shiftedCounter;\n      if (0xfd < shiftedCounter) goto LAB_0008186a;\n    }\n  }\n  shiftedResult = shiftedResult + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    shiftedResult = shiftedResult & 0xfffffffe;\n  }\n  return shiftedResult | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_float_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result",
                "uVar4": "shiftedResult",
                "uVar5": "shiftedCounter",
                "uVar6": "difference",
                "bVar7": "isZero"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_hash_00081894",
            "code": "\nuint calculateHash_00081894(uint inputValue)\n\n{\n  uint count;\n  uint shiftAmount;\n  int baseValue;\n  uint tempValue;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  count = getLeadingZeroCount(inputValue);\n  shiftAmount = count - 8;\n  baseValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < count) {\n    tempValue = 0 << (shiftAmount & 0xff);\n    count = baseValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < tempValue);\n    if (tempValue == 0x80000000) {\n      count = count & 0xfffffffe;\n    }\n    return count;\n  }\n  shiftAmount = inputValue << count + 0x18;\n  count = baseValue + ((inputValue >> (0x20 - (count + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    count = count & ~(shiftAmount >> 0x1f);\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_hash_00081894",
                "param_1": "inputValue",
                "uVar1": "count",
                "uVar2": "shiftAmount",
                "iVar3": "baseValue",
                "uVar4": "tempValue",
                "LZCOUNT": "getLeadingZeroCount"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_0008189c",
            "code": "\nuint calculate_0008189c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input_value & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input_value = -input_value;\n  }\n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = leading_zeros_count(input_value);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  sign_bit = result + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_0008189c",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit",
                "iVar4": "result",
                "LZCOUNT": "leading_zeros_count"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_00081944",
            "code": "\nuint calculateFloatingPoint_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint shift1;\n  int sumOfShifts;\n  int difference;\n  uint productLower;\n  int remainingShifts;\n  uint modifiedInput1;\n  bool check1;\n  bool check2;\n  \n  shift1 = input1 >> 0x17 & 0xff;\n  check1 = shift1 == 0;\n  if (!check1) {\n    param4 = input2 >> 0x17 & 0xff;\n    check1 = param4 == 0;\n  }\n  if (!check1) {\n    check1 = shift1 == 0xff;\n  }\n  if (!check1) {\n    check1 = param4 == 0xff;\n  }\n  if (check1) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (shift1 == 0xff || param4 == 0xff) {\n      check1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        check1 = input2 == 0;\n        result = input1;\n      }\n      if (!check1) {\n        check1 = input2 == 0x80000000;\n      }\n      modifiedInput1 = result;\n      if (((check1) || ((shift1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (modifiedInput1 = input2, (input2 & 0x7fffff) != 0)))) {\n        return modifiedInput1 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    check1 = (input1 & 0x7fffffff) == 0;\n    if (!check1) {\n      check1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (check1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    check1 = shift1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (check1) {\n        input1 = input1 << 1;\n        check1 = (input1 & 0x800000) == 0;\n      }\n      if (!check1) break;\n      shift1 = shift1 - 1;\n    }\n    input1 = input1 | result;\n    check1 = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (check1) {\n        input2 = input2 << 1;\n        check1 = (input2 & 0x800000) == 0;\n      }\n      if (!check1) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sumOfShifts = shift1 + param4;\n  modifiedInput1 = input1 ^ input2;\n  shift1 = input1 << 9;\n  check1 = shift1 == 0;\n  if (!check1) {\n    input2 = input2 << 9;\n    check1 = input2 == 0;\n  }\n  if (check1) {\n    if (shift1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = modifiedInput1 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    check2 = SBORROW4(sumOfShifts,0x7f);\n    difference = sumOfShifts + -0x7f;\n    check1 = difference == 0;\n    remainingShifts = difference;\n    if (!check1 && 0x7e < sumOfShifts) {\n      check2 = SBORROW4(0xff,difference);\n      remainingShifts = 0xff - difference;\n      check1 = difference == 0xff;\n    }\n    if (!check1 && remainingShifts < 0 == check2) {\n      result = result | difference * 0x800000;\n    }\n    if (!check1 && remainingShifts < 0 == check2) {\n      return result;\n    }\n    result = result | 0x800000;\n    productLower = 0;\n    check2 = SBORROW4(difference,1);\n    modifiedInput1 = sumOfShifts - 0x80;\n    check1 = modifiedInput1 == 0;\n    shift1 = modifiedInput1;\n  }\n  else {\n    product = (ulonglong)(shift1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    productLower = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    check1 = result < 0x800000;\n    if (check1) {\n      result = result << 1;\n    }\n    if (check1) {\n      result = result | productLower >> 0x1f;\n      productLower = productLower << 1;\n    }\n    result = modifiedInput1 & 0x80000000 | result;\n    modifiedInput1 = (sumOfShifts + -0x7f) - (uint)check1;\n    check2 = SBORROW4(modifiedInput1,0xfd);\n    check1 = modifiedInput1 == 0xfd;\n    shift1 = modifiedInput1 - 0xfd;\n    if (modifiedInput1 < 0xfe) {\n      result = result + modifiedInput1 * 0x800000 + (uint)(0x7fffffff < productLower);\n      if (productLower == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (check1 || (int)shift1 < 0 != check2) {\n    check1 = (int)(modifiedInput1 + 0x19) < 0;\n    if (modifiedInput1 == 0xffffffe7 || check1 != SCARRY4(modifiedInput1,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (modifiedInput1 != 0xffffffe7 && check1 == SCARRY4(modifiedInput1,0x19)) {\n      shift1 = (result << 1) >> (-modifiedInput1 & 0xff);\n      modifiedInput1 = result << (modifiedInput1 + 0x20 & 0xff);\n      shift1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shift1 >> 1) + (uint)((byte)shift1 & 1);\n      if ((productLower | modifiedInput1 << 1) == 0) {\n        shift1 = shift1 & ~(modifiedInput1 >> 0x1f);\n      }\n      return shift1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shift1",
                "iVar4": "sumOfShifts",
                "iVar5": "difference",
                "uVar6": "productLower",
                "iVar7": "remainingShifts",
                "uVar8": "modifiedInput1",
                "bVar9": "check1",
                "bVar10": "check2"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "multiply_and_check_00081bf4",
            "code": "\nuint multiplyAndCheck_00081bf4(uint result,uint input2)\n\n{\n  bool isNegative;\n  uint doubledInput1;\n  uint doubledInput2;\n  uint combined;\n  bool isZero;\n  \n  doubledInput1 = result * 2;\n  doubledInput2 = input2 * 2;\n  if (((int)doubledInput1 >> 0x18 == -1 || (int)doubledInput2 >> 0x18 == -1) &&\n     ((((int)doubledInput1 >> 0x18 == -1 && ((result & 0x7fffff) != 0)) ||\n      (((int)doubledInput2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined = doubledInput1 | input2 & 0x7fffffff;\n  isZero = combined == 0;\n  if (!isZero) {\n    combined = result ^ input2;\n    isZero = combined == 0;\n  }\n  isNegative = -1 < (int)combined;\n  if (isNegative) {\n    result = doubledInput1 + input2 * -2;\n    isZero = result == 0;\n  }\n  if ((isNegative && doubledInput2 <= doubledInput1) && !isZero) {\n    result = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || doubledInput2 > doubledInput1) {\n    result = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    result = result | 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "multiply_and_check_00081bf4",
                "param_1": "result",
                "param_2": "input2",
                "uVar2": "doubledInput1",
                "uVar3": "doubledInput2",
                "uVar4": "combined",
                "bVar1": "isNegative",
                "bVar5": "isZero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "compare_floats_00081c54",
            "code": "\nvoid compareFloats_00081c54(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenateParams_00081c5c(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmple"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "compare_floats_00081c94",
            "code": "\nbool compareFloats_00081c94(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "compare_floats_00081c94",
                "in_CY": "carryFlag",
                "in_ZR": "zeroFlag"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "is_any_operation_completed_00081ca8",
            "code": "\nbool is_any_operation_completed_00081ca8(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  __aeabi_cfrcmple();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "is_any_operation_completed_00081ca8",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "convert_to_signed_int_00081cd0",
            "code": "\nuint convertToSignedInt_00081cd0(uint inputNumber)\n\n{\n  uint shiftResult;\n  uint tempResult;\n  \n  if (inputNumber << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftResult = (inputNumber << 1) >> 0x18;\n  tempResult = 0x9e - shiftResult;\n  if (shiftResult < 0x9f && tempResult != 0) {\n    shiftResult = (inputNumber << 8 | 0x80000000) >> (tempResult & 0xff);\n    if ((inputNumber & 0x80000000) != 0) {\n      shiftResult = -shiftResult;\n    }\n    return shiftResult;\n  }\n  if ((tempResult == 0xffffff9f) && ((inputNumber & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputNumber = inputNumber & 0x80000000;\n  if (inputNumber == 0) {\n    inputNumber = 0x7fffffff;\n  }\n  return inputNumber;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_int_00081cd0",
                "param_1": "inputNumber",
                "uVar1": "shiftResult",
                "uVar2": "tempResult"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_param_validity_00081d1c",
            "code": "\nuint checkParamValidity_00081d1c(uint inputValue)\n\n{\n  uint shiftedValue;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftedValue = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftedValue) {\n    return (inputValue << 8 | 0x80000000) >> (shiftedValue & 0xff);\n  }\n  if ((shiftedValue == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_param_validity_00081d1c",
                "param_1": "inputValue",
                "uVar1": "shiftedValue"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "update_relocation_entry_00081d5c",
            "code": "\nundefined4 updateRelocationEntry_00081d5c(dword symbolAddress,dword value,dword type)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitmask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)malloc(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitmask = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = symbolAddress;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitmask;\n  relocationEntry[index + 0x42] = type;\n  relocationEntry[99] = bitmask | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "symbolAddress",
                "param_2": "value",
                "param_3": "type",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitmask"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "initialize_and_execute_functions_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid initialize_and_execute_functions_00081d7c(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  initialize();\n  function_pointers = (code **)0x85860;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "initialize_and_execute_functions_00081d7c",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers",
                "_init": "initialize"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "allocate_memory_00081df4",
            "code": "\nvoid allocateMemory_00081df4(undefined4 size)\n\n{\n  _malloc_r(relArray[140].r_offset,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "param_1": "size",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "free_elf32_rel_00081e04",
            "code": "\nvoid freeElf32Rel_00081e04(undefined4 ptr)\n\n{\n  _free_r(relArray[140].offset,ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "free_elf32_rel_00081e04",
                "param_1": "ptr",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "invalidate",
                "~String"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_block_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemoryBlock_00081e14(undefined4 *lock,uint size)\n\n{\n  dword info1;\n  int offset;\n  uint tempSize;\n  uint alignedSize;\n  int prevOffset;\n  uint diffSize;\n  dword info2;\n  uint tempOffset;\n  int tempSize2;\n  undefined *ptr;\n  dword prevInfo;\n  dword tempInfo;\n  int tempIndex;\n  dword *infoArray1;\n  uint adjustedSize;\n  undefined *ptr2;\n  dword *infoArray2;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    adjustedSize = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    adjustedSize = size + 0xb & 0xfffffff8;\n    if (((int)adjustedSize < 0) || (adjustedSize < size)) {\nLAB_00081e7a:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock);\n  info1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (adjustedSize < 0x1f8) {\n    tempIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + adjustedSize);\n    if ((tempIndex != adjustedSize + 0x20070464) ||\n       (offset = tempIndex + 8, tempIndex = *(int *)(tempIndex + 0x14), offset != tempIndex)) {\n      prevOffset = *(int *)(tempIndex + 0xc);\n      tempSize2 = (*(uint *)(tempIndex + 4) & 0xfffffffc) + tempIndex;\n      adjustedSize = *(uint *)(tempSize2 + 4);\n      offset = *(int *)(tempIndex + 8);\n      *(int *)(offset + 0xc) = prevOffset;\n      *(int *)(prevOffset + 8) = offset;\n      *(uint *)(tempSize2 + 4) = adjustedSize | 1;\n      __malloc_unlock(lock);\n      return (int *)(tempIndex + 8);\n    }\n    index = (adjustedSize >> 3) + 2;\n  }\n  else {\n    index = adjustedSize >> 9;\n    if (index == 0) {\n      offset = 0x7e;\n      tempIndex = 0x3f;\n    }\n    else if (index < 5) {\n      tempIndex = (adjustedSize >> 6) + 0x38;\n      offset = tempIndex * 2;\n    }\n    else if (index < 0x15) {\n      tempIndex = index + 0x5b;\n      offset = tempIndex * 2;\n    }\n    else if (index < 0x55) {\n      tempIndex = (adjustedSize >> 0xc) + 0x6e;\n      offset = tempIndex * 2;\n    }\n    else if (index < 0x155) {\n      tempIndex = (adjustedSize >> 0xf) + 0x77;\n      offset = tempIndex * 2;\n    }\n    else if (index < 0x555) {\n      tempIndex = (adjustedSize >> 0x12) + 0x7c;\n      offset = tempIndex * 2;\n    }\n    else {\n      offset = 0xfc;\n      tempIndex = 0x7e;\n    }\n    for (info2 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[offset]; offset * 4 + 0x20070464U != info2\n        ; info2 = *(dword *)(info2 + 0xc)) {\n      index = *(uint *)(info2 + 4) & 0xfffffffc;\n      prevOffset = index - adjustedSize;\n      if (0xf < prevOffset) {\n        tempIndex = tempIndex + -1;\n        break;\n      }\n      if (-1 < prevOffset) {\n        offset = index + info2;\n        adjustedSize = *(uint *)(offset + 4);\n        prevOffset = *(int *)(info2 + 0xc);\n        tempIndex = *(int *)(info2 + 8);\n        *(int *)(tempIndex + 0xc) = prevOffset;\n        *(int *)(prevOffset + 8) = tempIndex;\n        *(uint *)(offset + 4) = adjustedSize | 1;\n        __malloc_unlock(lock);\n        return (int *)(info2 + 8);\n      }\n    }\n    index = tempIndex + 1;\n  }\n  info2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    tempSize = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    alignedSize = tempSize & 0xfffffffc;\n    diffSize = alignedSize - adjustedSize;\n    if (0xf < (int)diffSize) {\n      info2 = adjustedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = adjustedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = info2;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = info2;\n      *(undefined4 *)(info2 + 0xc) = 0x2007046c;\n      *(undefined4 *)(info2 + 8) = 0x2007046c;\n      *(uint *)(info2 + 4) = diffSize | 1;\n      *(uint *)(info2 + diffSize) = diffSize;\n      __malloc_unlock(lock);\n      return (int *)(info1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)diffSize) {\n      *(uint *)(alignedSize + info1 + 4) = *(uint *)(alignedSize + info1 + 4) | 1;\n      __malloc_unlock(lock);\n      return (int *)(info1 + 8);\n    }\n    if (alignedSize < 0x200) {\n      alignedSize = tempSize & 0xfffffff8;\n      tempIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignedSize);\n      info2 = 1 << ((int)(tempSize >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(info1 + 8) = tempIndex;\n      *(uint *)(info1 + 0xc) = alignedSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = info2;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + alignedSize) = info1;\n      *(dword *)(tempIndex + 0xc) = info1;\n    }\n    else {\n      diffSize = tempSize >> 9;\n      if (diffSize < 5) {\n        offset = (tempSize >> 6) + 0x38;\n        tempIndex = offset * 2;\n      }\n      else if (diffSize < 0x15) {\n        offset = diffSize + 0x5b;\n        tempIndex = offset * 2;\n      }\n      else if (diffSize < 0x55) {\n        offset = (tempSize >> 0xc) + 0x6e;\n        tempIndex = offset * 2;\n      }\n      else if (diffSize < 0x155) {\n        offset = (tempSize >> 0xf) + 0x77;\n        tempIndex = offset * 2;\n      }\n      else if (diffSize < 0x555) {\n        offset = (tempSize >> 0x12) + 0x7c;\n        tempIndex = offset * 2;\n      }\n      else {\n        tempIndex = 0xfc;\n        offset = 0x7e;\n      }\n      info2 = tempIndex * 4 + 0x20070464;\n      prevInfo = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tempIndex];\n      if (prevInfo == info2) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (offset >> 2 & 0xffU);\n        tempInfo = prevInfo;\n      }\n      else {\n        do {\n          tempInfo = prevInfo;\n          if ((*(uint *)(prevInfo + 4) & 0xfffffffc) <= alignedSize) break;\n          prevInfo = *(dword *)(prevInfo + 8);\n          tempInfo = prevInfo;\n        } while (info2 != prevInfo);\n        prevInfo = *(dword *)(tempInfo + 0xc);\n      }\n      info2 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(info1 + 0xc) = prevInfo;\n      *(dword *)(info1 + 8) = tempInfo;\n      *(dword *)(prevInfo + 8) = info1;\n      *(dword *)(tempInfo + 0xc) = info1;\n    }\n  }\n  info1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  tempSize = 1 << ((int)index >> 2 & 0xffU);\n  if (tempSize <= info2) {\n    if ((info2 & tempSize) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        tempSize = tempSize << 1;\n        index = index + 4;\n      } while ((info2 & tempSize) == 0);\n    }\n    do {\n      infoArray2 = &Elf32_Rel_ARRAY_20070000[index + 0x8c].r_info;\n      infoArray1 = infoArray2;\n      alignedSize = index;\n      do {\n        for (ptr = (undefined *)infoArray1[3]; infoArray1 != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          diffSize = *(uint *)(ptr + 4) & 0xfffffffc;\n          tempOffset = diffSize - adjustedSize;\n          if (0xf < (int)tempOffset) {\n            offset = *(int *)(ptr + 8);\n            tempIndex = *(int *)(ptr + 0xc);\n            ptr2 = ptr + adjustedSize;\n            *(uint *)(ptr + 4) = adjustedSize | 1;\n            *(int *)(offset + 0xc) = tempIndex;\n            *(int *)(tempIndex + 8) = offset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)ptr2;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)ptr2;\n            *(undefined4 *)(ptr2 + 0xc) = 0x2007046c;\n            *(undefined4 *)(ptr2 + 8) = 0x2007046c;\n            *(uint *)(ptr2 + 4) = tempOffset | 1;\n            *(uint *)(ptr2 + tempOffset) = tempOffset;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)tempOffset) {\n            tempIndex = *(int *)(ptr + 8);\n            offset = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + diffSize + 4) = *(uint *)(ptr + diffSize + 4) | 1;\n            *(int *)(tempIndex + 0xc) = offset;\n            *(int *)(offset + 8) = tempIndex;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n        }\n        alignedSize = alignedSize + 1;\n        infoArray1 = infoArray1 + 2;\n      } while ((alignedSize & 3) != 0);\n      do {\n        diffSize = index & 3;\n        ptr = (undefined *)(infoArray2 + -2);\n        index = index - 1;\n        if (diffSize == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~tempSize;\n          break;\n        }\n        infoArray2 = (dword *)*infoArray2;\n      } while (infoArray2 == (dword *)ptr);\n      tempSize = tempSize * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= tempSize &&\n           tempSize - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (index = alignedSize, tempSize == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & tempSize) == 0; tempSize = tempSize << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((adjustedSize <= index) &&\n     (tempSize = index - adjustedSize, info2 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)tempSize))\n  goto LAB_0008211e;\n  tempSize = Elf32_Rel_ARRAY_20070000[141].r_info + index;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    alignedSize = adjustedSize + DAT_20071190 + 0x10;\n  }\n  else {\n    alignedSize = adjustedSize + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  info2 = _sbrk_r(lock,alignedSize);\n  if ((info2 == 0xffffffff) || ((info2 < tempSize && (info1 != 0x20070464)))) {\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    info2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    diffSize = DAT_20071194 + alignedSize;\n    DAT_20071194 = diffSize;\n    if ((tempSize == info2) && ((tempSize & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = alignedSize + index | 1;\n    }\n    else {\n      prevInfo = info2;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prevInfo = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = diffSize + (info2 - tempSize);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prevInfo;\n      tempSize = info2 & 7;\n      if (tempSize == 0) {\n        tempIndex = 0x1000;\n      }\n      else {\n        info2 = info2 + (8 - tempSize);\n        tempIndex = 0x1008 - tempSize;\n      }\n      tempIndex = tempIndex - (alignedSize + info2 & 0xfff);\n      offset = _sbrk_r(lock,tempIndex);\n      if (offset == -1) {\n        tempSize = 1;\n        tempIndex = 0;\n      }\n      else {\n        tempSize = (offset - info2) + tempIndex | 1;\n      }\n      diffSize = DAT_20071194 + tempIndex;\n      Elf32_Rel_ARRAY_20070000[141].r_info = info2;\n      DAT_20071194 = diffSize;\n      *(uint *)(info2 + 4) = tempSize;\n      if (info1 != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(info2 + 4) = 1;\n          index = 0;\n          goto LAB_00082108;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(info1 + 4) = index | *(uint *)(info1 + 4) & 1;\n        *(undefined4 *)(info1 + index + 4) = 5;\n        *(undefined4 *)(info1 + index + 8) = 5;\n        if (0xf < index) {\n          _free_r(lock,info1 + 8);\n          diffSize = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < diffSize) {\n      DAT_2007118c = diffSize;\n    }\n    if (DAT_20071188 < diffSize) {\n      DAT_20071188 = diffSize;\n    }\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    info2 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  tempSize = index - adjustedSize;\n  if ((index < adjustedSize) || ((int)tempSize < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = adjustedSize + info2;\n  *(uint *)(info2 + 4) = adjustedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = tempSize | 1;\n  __malloc_unlock(lock);\n  return (int *)(info2 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_block_00081e14",
                "param_1": "lock",
                "param_2": "size",
                "dVar1": "info1",
                "iVar2": "offset",
                "uVar3": "tempSize",
                "uVar4": "alignedSize",
                "iVar5": "prevOffset",
                "uVar6": "diffSize",
                "dVar7": "info2",
                "uVar8": "tempOffset",
                "iVar9": "tempSize2",
                "puVar10": "ptr",
                "dVar11": "prevInfo",
                "dVar12": "tempInfo",
                "iVar13": "tempIndex",
                "pdVar14": "infoArray1",
                "uVar15": "adjustedSize",
                "puVar16": "ptr2",
                "pdVar17": "infoArray2",
                "uVar18": "index"
            },
            "calling": [
                "__smakebuf_r",
                "__sfvwrite_r",
                "_realloc_r",
                "malloc"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *currentDest;\n  undefined4 *currentSrc;\n  uint remainingSize;\n  uint copySize;\n  bool isCopyNeeded;\n  \n  currentDest = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      copySize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = src;\n          currentSrc = currentDest;\n          isCopyNeeded = copySize != 0;\n          copySize = copySize - 1;\n          *(undefined *)currentSrc = *(undefined *)destPtr;\n          currentDest = (undefined4 *)((int)currentSrc + 1);\n          src = (undefined4 *)((int)destPtr + 1);\n        } while (isCopyNeeded);\n        *(undefined *)(undefined4 *)((int)currentSrc + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)currentSrc + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)currentSrc + 3) = *(undefined *)((int)destPtr + 3);\n        return dest;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      copySize = 4 - ((uint)dest & 3);\n      size = size - copySize;\n      destPtr = dest;\n      currentSrc = src;\n      if (((uint)dest & 1) != 0) {\n        currentSrc = (undefined4 *)((int)src + 1);\n        destPtr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      currentDest = destPtr;\n      src = currentSrc;\n      if ((copySize & 2) != 0) {\n        src = (undefined4 *)((int)currentSrc + 2);\n        currentDest = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)currentSrc;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *currentDest = *src;\n    currentDest[1] = src[1];\n    currentDest[2] = src[2];\n    currentDest[3] = src[3];\n    currentDest[4] = src[4];\n    currentDest[5] = src[5];\n    currentDest[6] = src[6];\n    currentDest[7] = src[7];\n    currentDest[8] = src[8];\n    currentDest[9] = src[9];\n    currentDest[10] = src[10];\n    currentDest[0xb] = src[0xb];\n    currentDest[0xc] = src[0xc];\n    currentDest[0xd] = src[0xd];\n    currentDest[0xe] = src[0xe];\n    currentDest[0xf] = src[0xf];\n    currentDest = currentDest + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *currentDest = *src;\n      currentDest[1] = src[1];\n      currentDest[2] = src[2];\n      currentDest[3] = src[3];\n      currentDest = currentDest + 4;\n      src = src + 4;\n      isCopyNeeded = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (isCopyNeeded);\n  }\n  copySize = remainingSize + 0xc;\n  currentSrc = currentDest;\n  destPtr = src;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      src = destPtr + 1;\n      *currentSrc = *destPtr;\n      isCopyNeeded = 3 < copySize;\n      copySize = copySize - 4;\n      currentDest = currentSrc + 1;\n      currentSrc = currentSrc + 1;\n      destPtr = src;\n    } while (isCopyNeeded);\n  }\nLAB_000823d0:\n  if (copySize + 4 != 0) {\n    destPtr = currentDest;\n    currentSrc = src;\n    if ((copySize & 1) != 0) {\n      currentSrc = (undefined4 *)((int)src + 1);\n      destPtr = (undefined4 *)((int)currentDest + 1);\n      *(undefined *)currentDest = *(undefined *)src;\n    }\n    if ((copySize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)currentSrc;\n    }\n  }\n  return dest;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "currentDest",
                "puVar3": "currentSrc",
                "uVar4": "remainingSize",
                "uVar5": "copySize",
                "bVar6": "isCopyNeeded"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "reverse_copy_00082438",
            "code": "\nvoid reverseCopy_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined *temp;\n  uint temp_remainder;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    temp = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp = temp + -1;\n        *temp = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    temp_remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp_size = temp_remainder;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < temp_remainder) {\n      do {\n        temp_size = temp_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      index = (temp_remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      temp_remainder = size & 3;\n    }\n    size = temp_remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "reverse_copy_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "uVar5": "temp_size",
                "puVar6": "temp",
                "uVar7": "temp_remainder"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_memory_with_byte_00082504",
            "code": "\nvoid fillMemoryWithByte_00082504(undefined4 *array,undefined byte,uint length)\n\n{\n  undefined4 *arrayPtr;\n  undefined4 *tempPtr;\n  undefined4 byteValue;\n  uint tempLength;\n  bool isZero;\n  \n  if (((uint)array & 3) != 0) {\n    isZero = length == 0;\n    arrayPtr = array;\n    length = length - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      array = (undefined4 *)((int)arrayPtr + 1);\n      *(undefined *)arrayPtr = byte;\n      if (((uint)array & 3) == 0) break;\n      isZero = length == 0;\n      arrayPtr = array;\n      length = length - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    byteValue = CONCAT22(CONCAT11(byte,byte),CONCAT11(byte,byte));\n    tempLength = length;\n    arrayPtr = array;\n    if (0xf < length) {\n      tempLength = length - 0x10;\n      do {\n        *arrayPtr = byteValue;\n        arrayPtr[1] = byteValue;\n        arrayPtr[2] = byteValue;\n        arrayPtr[3] = byteValue;\n        arrayPtr = arrayPtr + 4;\n      } while (arrayPtr != (undefined4 *)((int)array + (tempLength & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      array = array + ((tempLength >> 4) + 1) * 4;\n      tempLength = length;\n      arrayPtr = array;\n      if (length < 4) goto LAB_00082580;\n    }\n    do {\n      length = length - 4;\n      *array = byteValue;\n      array = array + 1;\n    } while (3 < length);\n    array = (undefined4 *)((int)arrayPtr + (tempLength - 4 & 0xfffffffc) + 4);\n    length = tempLength & 3;\n  }\nLAB_00082580:\n  if (length != 0) {\n    arrayPtr = array;\n    do {\n      tempPtr = (undefined4 *)((int)arrayPtr + 1);\n      *(undefined *)arrayPtr = byte;\n      arrayPtr = tempPtr;\n    } while (tempPtr != (undefined4 *)(length + (int)array));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_memory_with_byte_00082504",
                "param_1": "array",
                "param_2": "byte",
                "param_3": "length",
                "puVar1": "arrayPtr",
                "puVar2": "tempPtr",
                "uVar3": "byteValue",
                "uVar4": "tempLength",
                "bVar5": "isZero"
            },
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "resize_array_000825a0",
            "code": "\nvoid resizeArray_000825a0(undefined4 elementsSize,undefined4 newTotalSize)\n\n{\n  _realloc_r(relArray[140].r_offset,elementsSize,newTotalSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "resize_array_000825a0",
                "param_1": "elementsSize",
                "param_2": "newTotalSize",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_memory_000825b0",
            "code": "\nint * allocateMemory_000825b0(undefined4 *allocator,int *oldMemory,uint newSize)\n\n{\n  dword offset;\n  int *newMemory;\n  uint oldSize;\n  int tmpVar1;\n  uint alignedSize;\n  int tmpVar2;\n  int *tmpPtr1;\n  uint totalSize;\n  uint adjustedSize;\n  int *tmpPtr2;\n  \n  if (oldMemory == (int *)0x0) {\n    newMemory = (int *)_malloc_r(allocator,newSize);\n    return newMemory;\n  }\n  __malloc_lock();\n  alignedSize = oldMemory[-1];\n  totalSize = alignedSize & 0xfffffffc;\n  newMemory = oldMemory + -2;\n  if (newSize + 0xb < 0x17) {\n    adjustedSize = 0x10;\n  }\n  else {\n    adjustedSize = newSize + 0xb & 0xfffffff8;\n    if ((int)adjustedSize < 0) goto LAB_0008267c;\n  }\n  if (adjustedSize < newSize) {\nLAB_0008267c:\n    *allocator = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)totalSize < (int)adjustedSize) {\n    offset = (int)newMemory + totalSize;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == offset) {\n      oldSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(adjustedSize + 0x10) <= (int)(oldSize + totalSize)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemory + adjustedSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (oldSize + totalSize) - adjustedSize | 1;\n        oldMemory[-1] = adjustedSize | oldMemory[-1] & 1U;\n        __malloc_unlock(allocator);\n        return oldMemory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(offset + 4) & 0xfffffffe) + offset + 4) & 1) == 0) {\n      oldSize = *(uint *)(offset + 4) & 0xfffffffc;\n      if ((int)adjustedSize <= (int)(oldSize + totalSize)) {\n        tmpVar2 = *(int *)(offset + 0xc);\n        tmpVar1 = *(int *)(offset + 8);\n        *(int *)(tmpVar1 + 0xc) = tmpVar2;\n        *(int *)(tmpVar2 + 8) = tmpVar1;\n        totalSize = oldSize + totalSize;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      oldSize = 0;\n      offset = 0;\n    }\n    if (-1 < (int)(alignedSize << 0x1f)) {\n      tmpPtr2 = (int *)((int)newMemory - oldMemory[-2]);\n      alignedSize = (tmpPtr2[1] & 0xfffffffcU) + totalSize;\n      if (offset != 0) {\n        if (offset == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(adjustedSize + 0x10) <= (int)(oldSize + alignedSize)) {\n            newMemory = tmpPtr2 + 2;\n            tmpVar1 = *newMemory;\n            tmpVar2 = tmpPtr2[3];\n            totalSize = totalSize - 4;\n            *(int *)(tmpVar1 + 0xc) = tmpVar2;\n            *(int *)(tmpVar2 + 8) = tmpVar1;\n            if (totalSize < 0x25) {\n              tmpPtr1 = newMemory;\n              if (0x13 < totalSize) {\n                tmpPtr2[2] = *oldMemory;\n                tmpPtr2[3] = oldMemory[1];\n                if (totalSize < 0x1c) {\n                  oldMemory = oldMemory + 2;\n                  tmpPtr1 = tmpPtr2 + 4;\n                }\n                else {\n                  tmpPtr2[4] = oldMemory[2];\n                  tmpPtr2[5] = oldMemory[3];\n                  if (totalSize == 0x24) {\n                    tmpPtr2[6] = oldMemory[4];\n                    tmpPtr1 = oldMemory + 5;\n                    oldMemory = oldMemory + 6;\n                    tmpPtr2[7] = *tmpPtr1;\n                    tmpPtr1 = tmpPtr2 + 8;\n                  }\n                  else {\n                    oldMemory = oldMemory + 4;\n                    tmpPtr1 = tmpPtr2 + 6;\n                  }\n                }\n              }\n              *tmpPtr1 = *oldMemory;\n              tmpPtr1[1] = oldMemory[1];\n              tmpPtr1[2] = oldMemory[2];\n            }\n            else {\n              memmove(newMemory,oldMemory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)tmpPtr2 + adjustedSize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (oldSize + alignedSize) - adjustedSize | 1;\n            tmpPtr2[1] = adjustedSize | tmpPtr2[1] & 1U;\n            __malloc_unlock(allocator);\n            return newMemory;\n          }\n        }\n        else {\n          oldSize = oldSize + alignedSize;\n          if ((int)adjustedSize <= (int)oldSize) {\n            tmpVar2 = *(int *)(offset + 0xc);\n            tmpVar1 = *(int *)(offset + 8);\n            *(int *)(tmpVar1 + 0xc) = tmpVar2;\n            *(int *)(tmpVar2 + 8) = tmpVar1;\n            tmpPtr1 = tmpPtr2 + 2;\n            tmpVar1 = *tmpPtr1;\n            tmpVar2 = tmpPtr2[3];\n            alignedSize = totalSize - 4;\n            *(int *)(tmpVar1 + 0xc) = tmpVar2;\n            *(int *)(tmpVar2 + 8) = tmpVar1;\n            totalSize = oldSize;\n            if (alignedSize < 0x25) {\n              newMemory = tmpPtr1;\n              if (0x13 < alignedSize) {\n                tmpPtr2[2] = *oldMemory;\n                tmpPtr2[3] = oldMemory[1];\n                if (alignedSize < 0x1c) {\n                  oldMemory = oldMemory + 2;\n                  newMemory = tmpPtr2 + 4;\n                }\n                else {\n                  tmpPtr2[4] = oldMemory[2];\n                  tmpPtr2[5] = oldMemory[3];\n                  if (alignedSize == 0x24) {\n                    tmpPtr2[6] = oldMemory[4];\n                    newMemory = oldMemory + 5;\n                    oldMemory = oldMemory + 6;\n                    tmpPtr2[7] = *newMemory;\n                    newMemory = tmpPtr2 + 8;\n                  }\n                  else {\n                    oldMemory = oldMemory + 4;\n                    newMemory = tmpPtr2 + 6;\n                  }\n                }\n              }\n              *newMemory = *oldMemory;\n              newMemory[1] = oldMemory[1];\n              newMemory[2] = oldMemory[2];\n              alignedSize = tmpPtr2[1];\n              newMemory = tmpPtr2;\n              oldMemory = tmpPtr1;\n            }\n            else {\n              memmove(tmpPtr1,oldMemory);\n              alignedSize = tmpPtr2[1];\n              newMemory = tmpPtr2;\n              oldMemory = tmpPtr1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)adjustedSize <= (int)alignedSize) {\n        tmpPtr1 = tmpPtr2 + 2;\n        tmpVar1 = *tmpPtr1;\n        tmpVar2 = tmpPtr2[3];\n        oldSize = totalSize - 4;\n        *(int *)(tmpVar1 + 0xc) = tmpVar2;\n        *(int *)(tmpVar2 + 8) = tmpVar1;\n        totalSize = alignedSize;\n        if (oldSize < 0x25) {\n          newMemory = tmpPtr1;\n          if (0x13 < oldSize) {\n            tmpPtr2[2] = *oldMemory;\n            tmpPtr2[3] = oldMemory[1];\n            if (oldSize < 0x1c) {\n              oldMemory = oldMemory + 2;\n              newMemory = tmpPtr2 + 4;\n            }\n            else {\n              tmpPtr2[4] = oldMemory[2];\n              tmpPtr2[5] = oldMemory[3];\n              if (oldSize == 0x24) {\n                tmpPtr2[6] = oldMemory[4];\n                newMemory = oldMemory + 5;\n                oldMemory = oldMemory + 6;\n                tmpPtr2[7] = *newMemory;\n                newMemory = tmpPtr2 + 8;\n              }\n              else {\n                oldMemory = oldMemory + 4;\n                newMemory = tmpPtr2 + 6;\n              }\n            }\n          }\n          *newMemory = *oldMemory;\n          newMemory[1] = oldMemory[1];\n          newMemory[2] = oldMemory[2];\n          alignedSize = tmpPtr2[1];\n          newMemory = tmpPtr2;\n          oldMemory = tmpPtr1;\n        }\n        else {\n          memmove(tmpPtr1,oldMemory);\n          alignedSize = tmpPtr2[1];\n          newMemory = tmpPtr2;\n          oldMemory = tmpPtr1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    tmpPtr2 = (int *)_malloc_r(allocator,newSize);\n    if (tmpPtr2 == (int *)0x0) goto LAB_000826a4;\n    alignedSize = oldMemory[-1];\n    if (tmpPtr2 + -2 != (int *)((alignedSize & 0xfffffffe) + (int)newMemory)) {\n      totalSize = totalSize - 4;\n      if (totalSize < 0x25) {\n        newMemory = oldMemory;\n        tmpPtr1 = tmpPtr2;\n        if (0x13 < totalSize) {\n          *tmpPtr2 = *oldMemory;\n          tmpPtr2[1] = oldMemory[1];\n          if (totalSize < 0x1c) {\n            newMemory = oldMemory + 2;\n            tmpPtr1 = tmpPtr2 + 2;\n          }\n          else {\n            tmpPtr2[2] = oldMemory[2];\n            tmpPtr2[3] = oldMemory[3];\n            if (totalSize == 0x24) {\n              tmpPtr2[4] = oldMemory[4];\n              tmpPtr2[5] = oldMemory[5];\n              newMemory = oldMemory + 6;\n              tmpPtr1 = tmpPtr2 + 6;\n            }\n            else {\n              newMemory = oldMemory + 4;\n              tmpPtr1 = tmpPtr2 + 4;\n            }\n          }\n        }\n        *tmpPtr1 = *newMemory;\n        tmpPtr1[1] = newMemory[1];\n        tmpPtr1[2] = newMemory[2];\n      }\n      else {\n        memmove(tmpPtr2,oldMemory);\n      }\n      _free_r(allocator,oldMemory);\n      goto LAB_000826a4;\n    }\n    totalSize = totalSize + (tmpPtr2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  oldSize = totalSize - adjustedSize;\n  tmpPtr2 = oldMemory;\n  if (oldSize < 0x10) {\n    newMemory[1] = alignedSize & 1 | totalSize;\n    *(uint *)((int)newMemory + totalSize + 4) = *(uint *)((int)newMemory + totalSize + 4) | 1;\n  }\n  else {\n    newMemory[1] = alignedSize & 1 | adjustedSize;\n    *(uint *)((int)newMemory + adjustedSize + 4) = oldSize | 1;\n    *(uint *)((int)newMemory + oldSize + adjustedSize + 4) = *(uint *)((int)newMemory + oldSize + adjustedSize + 4) | 1;\n    _free_r(allocator,(int)newMemory + adjustedSize + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(allocator);\n  return tmpPtr2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_memory_000825b0",
                "param_1": "allocator",
                "param_2": "oldMemory",
                "param_3": "newSize",
                "dVar1": "offset",
                "piVar2": "newMemory",
                "uVar3": "oldSize",
                "iVar4": "tmpVar1",
                "uVar5": "alignedSize",
                "iVar6": "tmpVar2",
                "piVar7": "tmpPtr1",
                "uVar8": "totalSize",
                "uVar9": "adjustedSize",
                "piVar10": "tmpPtr2"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "memmove",
                "__malloc_lock",
                "__malloc_unlock",
                "_free_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "allocate_memory_00082970",
            "code": "\nvoid allocateMemory_00082970(int *resultPtr,undefined4 size)\n\n{\n  int allocatedSize;\n  \n  DAT_200711bc = 0;\n  allocatedSize = _sbrk(size);\n  if ((allocatedSize == -1) && (DAT_200711bc != 0)) {\n    *resultPtr = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "resultPtr",
                "param_2": "size",
                "iVar1": "allocatedSize"
            },
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copyString_00082994(uint *dest,uint *src)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *tempPtr;\n  uint *tempPtr2;\n  uint currentWord;\n  uint currentByte;\n  uint *destPtr;\n  bool isZeroByte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    tempPtr2 = src;\n    if (((uint)src & 1) != 0) {\n      tempPtr2 = (uint *)((int)src + 1);\n      currentChar = *(char *)src;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    src = tempPtr2;\n    if (((uint)tempPtr2 & 2) != 0) {\n      src = (uint *)((int)tempPtr2 + 2);\n      currentShort = *(ushort *)tempPtr2;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentWord = *src;\n  tempPtr2 = src + 1;\n  destPtr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_000829f8;\n    destPtr = dest + 1;\n    *dest = currentWord;\n    tempPtr2 = src + 2;\n    currentWord = src[1];\n  }\n  while( true ) {\n    tempPtr = tempPtr2 + 1;\n    currentByte = *tempPtr2;\n    dest = destPtr;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    dest = destPtr + 1;\n    *destPtr = currentWord;\n    currentWord = currentByte;\n    if ((currentByte + 0xfefefeff & ~currentByte & 0x80808080) != 0) break;\n    tempPtr2 = tempPtr2 + 2;\n    currentWord = *tempPtr;\n    destPtr = destPtr + 2;\n    *dest = currentByte;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)currentWord;\n    currentByte = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (currentByte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "tempPtr",
                "puVar4": "tempPtr2",
                "uVar5": "currentWord",
                "uVar6": "currentByte",
                "puVar7": "destPtr",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "copy"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int count;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  count = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((count + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    count = count + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    count = count + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    count = count + 1;\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "count",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "write_to_file_00082ac0",
            "code": "\nint writeToFile_00082ac0(undefined4 file,int bufferSize,int **buffer)\n\n{\n  int *currentBuffer;\n  int result;\n  int *remainingBuffer;\n  uint counter;\n  undefined4 *currentChar;\n  uint currentBufferSize;\n  uint shiftedBufferSize;\n  \n  if (-1 < *(int *)(bufferSize + 100) << 0x12) {\n    result = __sfvwrite_r();\n    buffer[2] = (int *)0x0;\n    buffer[1] = (int *)0x0;\n    return result;\n  }\n  remainingBuffer = buffer[2];\n  currentBuffer = *buffer;\n  while (remainingBuffer != (int *)0x0) {\n    currentBufferSize = currentBuffer[1];\n    shiftedBufferSize = currentBufferSize >> 2;\n    if (shiftedBufferSize != 0) {\n      currentChar = (undefined4 *)(*currentBuffer + -4);\n      counter = 0;\n      do {\n        currentChar = currentChar + 1;\n        result = _fputwc_r(file,*currentChar,bufferSize);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (shiftedBufferSize != counter);\n      remainingBuffer = buffer[2];\n    }\n    remainingBuffer = (int *)((int)remainingBuffer - (currentBufferSize & 0xfffffffc));\n    buffer[2] = remainingBuffer;\n    currentBuffer = currentBuffer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  buffer[2] = (int *)0x0;\n  buffer[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "write_to_file_00082ac0",
                "param_1": "file",
                "param_2": "bufferSize",
                "param_3": "buffer",
                "piVar1": "currentBuffer",
                "iVar2": "result",
                "piVar3": "remainingBuffer",
                "uVar4": "counter",
                "puVar5": "currentChar",
                "uVar6": "currentBufferSize",
                "uVar7": "shiftedBufferSize"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "print_formatted_string_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint printFormattedString_00082b38(int buffer,int formatString,int *******args,int **argsPointer)\n\n{\n  bool isLong;\n  bool isNegative;\n  bool isFlag;\n  char flagChar;\n  bool isWidth;\n  int ********argPointerArray;\n  int *argPointer;\n  int count;\n  char charValue;\n  int *******pppppppiVar10;\n  uint digitValue;\n  int **tempArgPointer;\n  uint flags;\n  uint formatChar;\n  int tempCount;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *argValue;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool isNegative6;\n  longlong lVar27;\n  int *******maxWidth;\n  int *******remainingWidth;\n  int **argPointerArrayPointer;\n  int length;\n  char *hexUpperCase;\n  char flag;\n  undefined padCharacter;\n  undefined hexPointer;\n  int ********argPointerArrayPointerPointer;\n  int argPointerArrayCount;\n  int *******argPointerArrayTotalLength;\n  undefined flagsChar;\n  char cStack_6a;\n  undefined hexArray;\n  undefined localVarsArray [4];\n  int *******local_64 [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  flags = (uint)*(ushort *)(formatString + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(formatString + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(formatString + 0xc) = (short)flags;\n    *(uint *)(formatString + 100) = *(uint *)(formatString + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(formatString + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    count = __swsetup_r(buffer,formatString);\n    if (count != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(formatString + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(formatString + 0xe)) {\n    count = __sbprintf(buffer,formatString,args,argsPointer);\n    return count;\n  }\nLAB_00082b8a:\n  hexUpperCase = (char *)0x0;\n  argPointerArrayTotalLength = (int *******)0x0;\n  argPointerArrayCount = 0;\n  length = 0;\n  argPointerArray = (int ********)localVarsArray;\n  argPointerArrayPointer = argsPointer;\n  argPointerArrayPointerPointer = (int ********)localVarsArray;\nLAB_00082b9e:\n  pppppppiVar10 = args;\n  if ((*(char *)args != '\\0') && (*(char *)args != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)args);\n    if (pppppppiVar20 != (int *******)0x0) {\n      argPointerArrayCount = argPointerArrayCount + 1;\n      argPointerArrayTotalLength = (int *******)((int)argPointerArrayTotalLength + (int)pppppppiVar20);\n      *argPointerArray = args;\n      argPointerArray[1] = pppppppiVar20;\n      if (argPointerArrayCount < 8) {\n        argPointerArray = argPointerArray + 2;\n      }\n      else {\n        if (argPointerArrayTotalLength == (int *******)0x0) {\n          length = length + (int)pppppppiVar20;\n          argPointerArrayCount = 0;\n          argPointerArray = (int ********)localVarsArray;\n          goto LAB_00082bee;\n        }\n        count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n        argPointerArray = (int ********)localVarsArray;\n        if (count != 0) goto LAB_000833de;\n      }\n      length = length + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    flag = '\\0';\n    formatChar = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    flags = 0;\n    isWidth = false;\n    isNegative = false;\n    isLong = false;\n    isFlag = false;\n    isNegative6 = false;\n    pppppppiVar20 = (int *******)0x0;\n    remainingWidth = (int *******)0xffffffff;\n    args = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    args = (int *******)((int)args + 1);\nLAB_00082c16:\n    switch(formatChar) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (formatChar != 0) {\n        maxWidth = (int *******)0x1;\n        remainingWidth = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&flagsChar;\n        flagsChar = (char)formatChar;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      isFlag = true;\n      formatChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*argPointerArrayPointer;\n      argPointerArrayPointer = argPointerArrayPointer + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      formatChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2b:\n      formatChar = (uint)*(byte *)args;\n      flag = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      formatChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x2e:\n      formatChar = (uint)*(byte *)args;\n      pppppppiVar10 = (int *******)((int)args + 1);\n      if (formatChar == 0x2a) {\n        formatChar = (uint)*(byte *)((int)args + 1);\n        remainingWidth = (int *******)*argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        args = pppppppiVar10;\n        if ((int)remainingWidth < 0) {\n          remainingWidth = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digitValue = formatChar - 0x30;\n      if (digitValue < 10) {\n        uVar21 = 0;\n        do {\n          args = (int *******)((int)pppppppiVar10 + 1);\n          formatChar = (uint)*(byte *)pppppppiVar10;\n          uVar21 = digitValue + uVar21 * 10;\n          digitValue = formatChar - 0x30;\n          pppppppiVar10 = args;\n        } while (digitValue < 10);\n        remainingWidth = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        remainingWidth = (int *******)0x0;\n        args = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      formatChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isNegative = true;\n      if (isLong == false) goto LAB_00083028;\nLAB_00082e98:\n      argPointerArrayPointer = (int **)((int)argPointerArrayPointer + 7U & 0xfffffff8);\n      argValue = *argPointerArrayPointer;\n      piVar22 = argPointerArrayPointer[1];\n      argPointerArrayPointer = argPointerArrayPointer + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isNegative = true;\n      if (isLong != false) goto LAB_00082d42;\nLAB_00082f2a:\n      count = (uint)isNegative << 4;\n      tempCount = (uint)isLong << 5;\n      if ((isNegative == 0) && (tempCount = (uint)isNegative6 << 6, isNegative6 != 0)) {\n        argValue = (int *)(uint)*(ushort *)argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        count = tempCount;\n        argValue = *argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isNegative = true;\n      if (isLong != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isNegative) || (isNegative6 == false)) {\n        count = 1;\n        argValue = *argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        argValue = (int *)(uint)*(ushort *)argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        count = 1;\n      }\n      break;\n    case 0x58:\n      hexUpperCase = \"0123456789ABCDEF\";\n      if (isLong == false) goto LAB_00083196;\nLAB_00082fb6:\n      tempArgPointer = (int **)((int)argPointerArrayPointer + 7U & 0xfffffff8);\n      argPointerArrayPointer = tempArgPointer + 2;\n      argValue = *tempArgPointer;\n      piVar22 = tempArgPointer[1];\n      goto LAB_00082fca;\n    case 99:\n      argValue = *argPointerArrayPointer;\n      argPointerArrayPointer = argPointerArrayPointer + 1;\n      maxWidth = (int *******)0x1;\n      flagsChar = SUB41(argValue,0);\n      remainingWidth = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&flagsChar;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isLong != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isNegative == false) && (isNegative6 != false)) {\n        argValue = (int *)(int)*(short *)argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        piVar22 = (int *)((int)argValue >> 0x1f);\n      }\n      else {\n        argValue = *argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        piVar22 = (int *)((int)argValue >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        isNegative6 = argValue != (int *)0x0;\n        argValue = (int *)-(int)argValue;\n        piVar22 = (int *)(-(int)piVar22 - (uint)isNegative6);\n        flag = '-';\n        flagChar = '-';\n        count = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)remainingWidth) {\n        flags = flags & 0xffffff7f;\n      }\n      isWidth = false;\n      formatChar = (uint)argValue | (uint)piVar22;\n      count = 1;\n      flagChar = flag;\n      goto joined_r0x00082d78;\n    case 0x68:\n      isNegative6 = true;\n      formatChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x6c:\n      formatChar = (uint)*(byte *)args;\n      if (formatChar == 0x6c) {\n        isLong = true;\n        formatChar = (uint)*(byte *)((int)args + 1);\n        args = (int *******)((int)args + 1);\n      }\n      else {\n        isNegative = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isLong == false) {\n        if (isNegative == false) {\n          if (isNegative6) {\n            argValue = *argPointerArrayPointer;\n            argPointerArrayPointer = argPointerArrayPointer + 1;\n            *(short *)argValue = (short)length;\n          }\n          else {\n            argValue = *argPointerArrayPointer;\n            argPointerArrayPointer = argPointerArrayPointer + 1;\n            *argValue = length;\n          }\n        }\n        else {\n          argValue = *argPointerArrayPointer;\n          argPointerArrayPointer = argPointerArrayPointer + 1;\n          *argValue = length;\n        }\n      }\n      else {\n        argValue = *argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        *argValue = length;\n        argValue[1] = length >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isLong == false) goto LAB_00082f2a;\nLAB_00082d42:\n      tempArgPointer = (int **)((int)argPointerArrayPointer + 7U & 0xfffffff8);\n      argPointerArrayPointer = tempArgPointer + 2;\n      argValue = *tempArgPointer;\n      piVar22 = tempArgPointer[1];\n      count = 0;\n      break;\n    case 0x70:\n      argValue = *argPointerArrayPointer;\n      argPointerArrayPointer = argPointerArrayPointer + 1;\n      hexPointer = 0x78;\n      isWidth = true;\n      piVar22 = (int *)0x0;\n      padCharacter = 0x30;\n      hexUpperCase = \"0123456789abcdef\";\n      count = 2;\n      break;\n    case 0x71:\n      isLong = true;\n      formatChar = (uint)*(byte *)args;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*argPointerArrayPointer;\n      flag = '\\0';\n      argPointerArrayPointer = argPointerArrayPointer + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)remainingWidth < 0) {\n          remainingWidth = (int *******)strlen(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          flagChar = flag;\n        }\n        else {\n          count = memchr(ppppppppiVar25,0,remainingWidth);\n          flagChar = flag;\n          if (count == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(count - (int)ppppppppiVar25);\n            if ((int)remainingWidth <= (int)(int *******)(count - (int)ppppppppiVar25)) {\n              pppppppiVar18 = remainingWidth;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            remainingWidth = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < remainingWidth) {\n        remainingWidth = (int *******)0x6;\n      }\n      maxWidth = (int *******)((uint)remainingWidth & ~((int)remainingWidth >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      flag = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isLong) goto LAB_00082f7c;\nLAB_00082e62:\n      tempArgPointer = (int **)((int)argPointerArrayPointer + 7U & 0xfffffff8);\n      argPointerArrayPointer = tempArgPointer + 2;\n      argValue = *tempArgPointer;\n      piVar22 = tempArgPointer[1];\n      count = 1;\n      break;\n    case 0x78:\n      hexUpperCase = \"0123456789abcdef\";\n      if (isLong != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isNegative == false) && (isNegative6 != false)) {\n        piVar22 = (int *)0x0;\n        argValue = (int *)(uint)*(ushort *)argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n      }\n      else {\n        argValue = *argPointerArrayPointer;\n        argPointerArrayPointer = argPointerArrayPointer + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((isFlag) && (((uint)argValue | (uint)piVar22) != 0)) {\n        isWidth = true;\n        padCharacter = 0x30;\n        count = 2;\n        hexPointer = (char)formatChar;\n      }\n      else {\n        count = 2;\n      }\n    }\n    flag = '\\0';\n    flagChar = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)remainingWidth) {\n      flags = flags & 0xffffff7f;\n    }\n    formatChar = (uint)argValue | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,argValue);\n    pppppppiVar10 = remainingWidth;\n    if ((formatChar == 0) && (remainingWidth == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)localVarsArray;\n      if ((count != 0) || (!isFlag)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      hexArray = '0';\n      goto LAB_00082d9a;\n    }\n    if (count == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < argValue) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          charValue = '\\n';\n          __aeabi_uldivmod((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = charValue + '0';\n          lVar27 = __aeabi_uldivmod((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        remainingWidth = (int *******)((int)localVarsArray - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      hexArray = (char)argValue + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (count != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      formatChar = (uint)argValue & 0xf;\n      argValue = (int *)((uint)argValue >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = hexUpperCase[formatChar];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)argValue | (uint)piVar22) != 0);\n    remainingWidth = (int *******)((int)localVarsArray - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (argPointerArrayTotalLength != (int *******)0x0) {\n    __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(formatString + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return length;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    argPointer = (int *)((uint)argValue >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    count = ((uint)argValue & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)count;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    argValue = argPointer;\n  } while (((uint)argPointer | (uint)piVar22) != 0);\n  if (isFlag) {\n    if (count == 0x30) {\nLAB_00082d9a:\n      remainingWidth = (int *******)((int)localVarsArray - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      remainingWidth = (int *******)((int)localVarsArray - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    remainingWidth = (int *******)((int)localVarsArray - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  maxWidth = remainingWidth;\n  if ((int)remainingWidth < (int)pppppppiVar10) {\n    maxWidth = pppppppiVar10;\n  }\n  if (flagChar != '\\0') {\n    maxWidth = (int *******)((int)maxWidth + 1);\n  }\nLAB_00082dba:\n  if (isWidth) {\n    maxWidth = (int *******)((int)maxWidth + 2);\n  }\n  if ((flags == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      argPointerArrayCount = argPointerArrayCount + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        count = argPointerArrayCount + 1;\n        argPointerArrayTotalLength = argPointerArrayTotalLength + 4;\n        *argPointerArray = (int *******)0x85808;\n        argPointerArray[1] = (int *******)0x10;\n        if (count < 8) {\n          tempCount = argPointerArrayCount + 2;\n          argPointerArray = argPointerArray + 2;\n          argPointerArrayCount = count;\n        }\n        else if (argPointerArrayTotalLength == (int *******)0x0) {\n          tempCount = 1;\n          argPointerArray = (int ********)localVarsArray;\n          argPointerArrayCount = 0;\n        }\n        else {\n          argPointerArrayCount = count;\n          count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n          if (count != 0) goto LAB_000833de;\n          tempCount = argPointerArrayCount + 1;\n          argPointerArray = (int ********)localVarsArray;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      argPointerArrayCount = tempCount;\n    }\n    argPointerArrayTotalLength = (int *******)((int)argPointerArrayTotalLength + (int)pppppppiVar18);\n    *argPointerArray = (int *******)0x85808;\n    argPointerArray[1] = pppppppiVar18;\n    if (argPointerArrayCount < 8) {\n      count = argPointerArrayCount + 1;\n      argPointerArray = argPointerArray + 2;\n    }\n    else if (argPointerArrayTotalLength == (int *******)0x0) {\n      count = 1;\n      argPointerArrayCount = 0;\n      argPointerArray = (int ********)localVarsArray;\n    }\n    else {\n      count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n      if (count != 0) goto LAB_000833de;\n      count = argPointerArrayCount + 1;\n      argPointerArray = (int ********)localVarsArray;\n    }\n  }\n  else {\n    count = argPointerArrayCount + 1;\n  }\n  tempCount = count;\n  if (flag != '\\0') {\n    argPointerArrayTotalLength = (int *******)((int)argPointerArrayTotalLength + 1);\n    tempCount = 1;\n    *argPointerArray = (int *******)&flag;\n    argPointerArray[1] = (int *******)0x1;\n    argPointerArrayCount = count;\n    if (count < 8) {\n      tempCount = count + 1;\n      argPointerArray = argPointerArray + 2;\n    }\n    else if (argPointerArrayTotalLength == (int *******)0x0) {\n      argPointerArrayCount = 0;\n      argPointerArray = (int ********)localVarsArray;\n    }\n    else {\n      count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n      if (count != 0) goto LAB_000833de;\n      tempCount = argPointerArrayCount + 1;\n      argPointerArray = (int ********)localVarsArray;\n    }\n  }\n  count = tempCount;\n  iVar17 = argPointerArrayCount;\n  if (isWidth) {\n    argPointerArrayTotalLength = (int *******)((int)argPointerArrayTotalLength + 2);\n    *argPointerArray = (int *******)&padCharacter;\n    argPointerArray[1] = (int *******)0x2;\n    if (tempCount < 8) {\n      count = tempCount + 1;\n      iVar17 = tempCount;\n      argPointerArray = argPointerArray + 2;\n    }\n    else if (argPointerArrayTotalLength == (int *******)0x0) {\n      count = 1;\n      iVar17 = 0;\n      argPointerArray = (int ********)localVarsArray;\n    }\n    else {\n      argPointerArrayCount = tempCount;\n      count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n      if (count != 0) goto LAB_000833de;\n      count = argPointerArrayCount + 1;\n      iVar17 = argPointerArrayCount;\n      argPointerArray = (int ********)localVarsArray;\n    }\n  }\n  argPointerArrayCount = iVar17;\n  if ((flags == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          argPointerArrayCount = iVar17 + 1;\n          argPointerArrayTotalLength = argPointerArrayTotalLength + 4;\n          *argPointerArray = (int *******)&DAT_00085848;\n          argPointerArray[1] = (int *******)0x10;\n          if (7 < argPointerArrayCount) break;\n          count = iVar17 + 2;\n          argPointerArray = argPointerArray + 2;\nLAB_0008348e:\n          iVar17 = argPointerArrayCount;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (argPointerArrayTotalLength != (int *******)0x0) {\n          count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n          if (count == 0) {\n            count = argPointerArrayCount + 1;\n            argPointerArray = (int ********)localVarsArray;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        count = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        argPointerArray = (int ********)localVarsArray;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    argPointerArrayTotalLength = (int *******)((int)argPointerArrayTotalLength + (int)pppppppiVar18);\n    *argPointerArray = (int *******)&DAT_00085848;\n    argPointerArray[1] = pppppppiVar18;\n    argPointerArrayCount = count;\n    if (count < 8) {\n      count = count + 1;\n      argPointerArray = argPointerArray + 2;\n    }\n    else if (argPointerArrayTotalLength == (int *******)0x0) {\n      count = 1;\n      argPointerArrayCount = 0;\n      argPointerArray = (int ********)localVarsArray;\n    }\n    else {\n      count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n      if (count != 0) goto LAB_000833de;\n      count = argPointerArrayCount + 1;\n      argPointerArray = (int ********)localVarsArray;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)remainingWidth);\n  ppppppppiVar16 = (int ********)localVarsArray;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    argPointerArrayTotalLength = (int *******)((int)argPointerArrayTotalLength + (int)remainingWidth);\n    *argPointerArray = (int *******)ppppppppiVar25;\n    argPointerArray[1] = remainingWidth;\n    remainingWidth = argPointerArrayTotalLength;\n    argPointerArrayCount = count;\n    if (count < 8) goto LAB_0008345a;\n    if (argPointerArrayTotalLength == (int *******)0x0) {\n      argPointerArrayCount = 0;\n    }\n    else {\n      count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n      if (count != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    tempCount = argPointerArrayCount;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          argPointerArrayCount = tempCount + 1;\n          argPointerArrayTotalLength = argPointerArrayTotalLength + 4;\n          *argPointerArray = (int *******)&DAT_00085848;\n          argPointerArray[1] = (int *******)0x10;\n          if (7 < argPointerArrayCount) break;\n          count = tempCount + 2;\n          argPointerArray = argPointerArray + 2;\nLAB_00083282:\n          tempCount = argPointerArrayCount;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (argPointerArrayTotalLength != (int *******)0x0) {\n          count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n          if (count == 0) {\n            count = argPointerArrayCount + 1;\n            argPointerArray = (int ********)localVarsArray;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        count = 1;\n        argPointerArray = (int ********)localVarsArray;\n        tempCount = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    argPointerArrayTotalLength = (int *******)((int)argPointerArrayTotalLength + (int)pppppppiVar10);\n    *argPointerArray = (int *******)&DAT_00085848;\n    argPointerArray[1] = pppppppiVar10;\n    if (count < 8) {\n      count = count + 1;\n      argPointerArray = argPointerArray + 2;\n      goto LAB_000832c6;\n    }\n    if (argPointerArrayTotalLength != (int *******)0x0) {\n      argPointerArrayCount = count;\n      count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n      if (count != 0) goto LAB_000833de;\n      count = argPointerArrayCount + 1;\n      argPointerArray = (int ********)localVarsArray;\n      goto LAB_000832c6;\n    }\n    local_64[0] = remainingWidth;\n    argPointerArrayCount = 1;\n    argPointerArray = (int ********)localVarsArray;\n    localVarsArray = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = argPointerArray + 2;\n    argPointerArrayTotalLength = remainingWidth;\n  }\n  if (((flags & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)maxWidth), 0 < (int)pppppppiVar10)) {\n    count = argPointerArrayCount;\n    if ((int)pppppppiVar10 < 0x11) {\n      tempCount = argPointerArrayCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argPointerArrayCount = count + 1;\n          argPointerArrayTotalLength = argPointerArrayTotalLength + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < argPointerArrayCount) break;\n          tempCount = count + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          count = argPointerArrayCount;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (argPointerArrayTotalLength != (int *******)0x0) {\n          count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n          if (count == 0) {\n            tempCount = argPointerArrayCount + 1;\n            ppppppppiVar16 = (int ********)localVarsArray;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        tempCount = 1;\n        count = 0;\n        ppppppppiVar16 = (int ********)localVarsArray;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    argPointerArrayTotalLength = (int *******)((int)argPointerArrayTotalLength + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    argPointerArrayCount = tempCount;\n    if (7 < tempCount) {\n      if (argPointerArrayTotalLength == (int *******)0x0) {\n        if ((int)maxWidth < (int)pppppppiVar20) {\n          maxWidth = pppppppiVar20;\n        }\n        length = length + (int)maxWidth;\n        goto LAB_00083422;\n      }\n      count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer);\n      if (count != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)maxWidth < (int)pppppppiVar20) {\n    maxWidth = pppppppiVar20;\n  }\n  length = length + (int)maxWidth;\n  if ((argPointerArrayTotalLength != (int *******)0x0) &&\n     (count = __sprint_r_part_0(buffer,formatString,&argPointerArrayPointerPointer), count != 0)) goto LAB_000833de;\nLAB_00083422:\n  argPointerArrayCount = 0;\n  argPointerArray = (int ********)localVarsArray;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digitValue = formatChar - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = args;\n  do {\n    args = (int *******)((int)pppppppiVar10 + 1);\n    formatChar = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(digitValue + (int)pppppppiVar20 * 10);\n    digitValue = formatChar - 0x30;\n    pppppppiVar10 = args;\n  } while (digitValue < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  formatChar = (uint)*(byte *)args;\n  if (flag == '\\0') {\n    flag = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "print_formatted_string_00082b38",
                "param_1": "buffer",
                "param_2": "formatString",
                "param_3": "args",
                "param_4": "argsPointer",
                "bVar1": "isLong",
                "bVar2": "isNegative",
                "bVar3": "isFlag",
                "cVar4": "flagChar",
                "bVar5": "isWidth",
                "ppppppppiVar6": "argPointerArray",
                "piVar7": "argPointer",
                "iVar8": "count",
                "cVar9": "charValue",
                "uVar11": "digitValue",
                "ppiVar12": "tempArgPointer",
                "uVar13": "flags",
                "uVar14": "formatChar",
                "piVar19": "argValue",
                "iVar15": "tempCount",
                "local_dc": "maxWidth",
                "local_d4": "remainingWidth",
                "local_c8": "argPointerArrayPointer",
                "local_c4": "length",
                "local_c0": "hexUpperCase",
                "local_a1": "flag",
                "local_a0": "padCharacter",
                "local_9f": "hexPointer",
                "local_9c": "argPointerArrayPointerPointer",
                "local_98": "argPointerArrayCount",
                "local_94": "argPointerArrayTotalLength",
                "local_90": "flagsChar",
                "local_69": "hexArray",
                "local_68": "localVarsArray"
            },
            "calling": [
                "__sbprintf"
            ],
            "called": [
                "__sprint_r.part.0",
                "strlen",
                "__sbprintf",
                "memchr",
                "__aeabi_uldivmod",
                "__sinit",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "print_formatted_data_0008378c",
            "code": "\nint printFormattedData_0008378c(undefined4 outputStream,int dataBuffer)\n\n{\n  int formattedDataLength;\n  int flushResult;\n  undefined *tempBuffer [2];\n  undefined4 bufferSize1;\n  ushort dataFlag;\n  undefined2 dataValue;\n  undefined *bufferPointer;\n  undefined4 bufferSize2;\n  undefined4 flushBufferSize;\n  undefined4 someValue;\n  undefined4 offsetValue;\n  undefined4 someConstantValue;\n  undefined dataBufferTemp [1024];\n  \n  someConstantValue = *(undefined4 *)(dataBuffer + 100);\n  someValue = *(undefined4 *)(dataBuffer + 0x1c);\n  dataValue = *(undefined2 *)(dataBuffer + 0xe);\n  offsetValue = *(undefined4 *)(dataBuffer + 0x24);\n  tempBuffer[0] = dataBufferTemp;\n  dataFlag = *(ushort *)(dataBuffer + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  flushBufferSize = 0;\n  bufferPointer = tempBuffer[0];\n  formattedDataLength = _vfiprintf_r(outputStream,tempBuffer);\n  if ((-1 < formattedDataLength) && (flushResult = _fflush_r(outputStream,tempBuffer), flushResult != 0)) {\n    formattedDataLength = -1;\n  }\n  if ((int)((uint)dataFlag << 0x19) < 0) {\n    *(ushort *)(dataBuffer + 0xc) = *(ushort *)(dataBuffer + 0xc) | 0x40;\n  }\n  return formattedDataLength;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "print_formatted_data_0008378c",
                "param_1": "outputStream",
                "param_2": "dataBuffer",
                "iVar1": "formattedDataLength",
                "iVar2": "flushResult",
                "local_488": "tempBuffer",
                "local_480": "bufferSize1",
                "local_47c": "dataFlag",
                "local_47a": "dataValue",
                "local_478": "bufferPointer",
                "local_474": "bufferSize2",
                "local_470": "flushBufferSize",
                "local_46c": "someValue",
                "local_464": "offsetValue",
                "local_424": "someConstantValue",
                "auStack_420": "dataBufferTemp"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "initialize_buffer_00083808",
            "code": "\nundefined4 initializeBuffer_00083808(undefined4 *outputErrorCode,int *inputParams)\n\n{\n  int valueA;\n  int valueB;\n  uint bitwiseFlag;\n  ushort ushortValue;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    __sinit();\n  }\n  ushortValue = *(ushort *)(inputParams + 3);\n  bitwiseFlag = (uint)ushortValue;\n  if ((int)(bitwiseFlag << 0x1c) < 0) {\n    valueB = inputParams[4];\n  }\n  else {\n    if (-1 < (int)(bitwiseFlag << 0x1b)) {\n      *outputErrorCode = 9;\n      *(ushort *)(inputParams + 3) = ushortValue | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(bitwiseFlag << 0x1d) < 0) {\n      if ((int *)inputParams[0xc] != (int *)0x0) {\n        if ((int *)inputParams[0xc] != inputParams + 0x10) {\n          _free_r(outputErrorCode);\n          ushortValue = *(ushort *)(inputParams + 3);\n        }\n        inputParams[0xc] = 0;\n      }\n      valueB = inputParams[4];\n      ushortValue = ushortValue & 0xffdb;\n      *inputParams = valueB;\n      inputParams[1] = 0;\n    }\n    else {\n      valueB = inputParams[4];\n    }\n    *(ushort *)(inputParams + 3) = ushortValue | 8;\n    bitwiseFlag = (uint)(ushortValue | 8);\n  }\n  if ((valueB == 0) && ((bitwiseFlag & 0x280) != 0x200)) {\n    __smakebuf_r(outputErrorCode,inputParams);\n    bitwiseFlag = (uint)*(ushort *)(inputParams + 3);\n    valueB = inputParams[4];\n  }\n  if ((bitwiseFlag & 1) == 0) {\n    valueA = 0;\n    if (-1 < (int)(bitwiseFlag << 0x1e)) {\n      valueA = inputParams[5];\n    }\n    inputParams[2] = valueA;\n  }\n  else {\n    inputParams[6] = -inputParams[5];\n    inputParams[2] = 0;\n  }\n  if ((valueB == 0) && ((int)((uint)*(ushort *)(inputParams + 3) << 0x18) < 0)) {\n    *(ushort *)(inputParams + 3) = *(ushort *)(inputParams + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "initialize_buffer_00083808",
                "param_1": "outputErrorCode",
                "param_2": "inputParams",
                "iVar1": "valueA",
                "iVar2": "valueB",
                "uVar3": "bitwiseFlag",
                "uVar4": "ushortValue"
            },
            "calling": [
                "__sfvwrite_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_00083974",
                "param_1": "input"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_function_00083adc",
            "code": "\nundefined4 processFunction_00083adc(int *inputData,int *outputData)\n\n{\n  int *tempVar1;\n  int tempVar2;\n  ushort tempVar3;\n  uint tempVar4;\n  int tempVar5;\n  code *functionPtr;\n  undefined4 returnValue;\n  int tempVar7;\n  \n  if ((inputData != (int *)0x0) && (inputData[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(outputData + 3) == 0) {\n    return 0;\n  }\n  tempVar3 = *(ushort *)(outputData + 3);\n  if ((int)((uint)tempVar3 << 0x1c) < 0) {\n    tempVar7 = outputData[4];\n    if (tempVar7 == 0) {\n      return 0;\n    }\n    tempVar2 = *outputData;\n    if ((tempVar3 & 3) == 0) {\n      tempVar5 = outputData[5];\n    }\n    else {\n      tempVar5 = 0;\n    }\n    *outputData = tempVar7;\n    tempVar2 = tempVar2 - tempVar7;\n    outputData[2] = tempVar5;\n    do {\n      if (tempVar2 < 1) {\n        return 0;\n      }\n      tempVar5 = (*(code *)outputData[9])(inputData,outputData[7],tempVar7,tempVar2,returnValue);\n      tempVar2 = tempVar2 - tempVar5;\n      tempVar7 = tempVar7 + tempVar5;\n    } while (0 < tempVar5);\nLAB_00083a54:\n    *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(outputData + 3) = tempVar3 | 0x800;\n  if ((outputData[1] < 1) && (outputData[0xf] < 1)) {\n    return 0;\n  }\n  functionPtr = (code *)outputData[10];\n  if (functionPtr == (code *)0x0) {\n    return 0;\n  }\n  tempVar4 = (uint)(tempVar3 | 0x800);\n  tempVar7 = *inputData;\n  *inputData = 0;\n  if ((tempVar3 & 0x1000) == 0) {\n    tempVar2 = (*functionPtr)(inputData,outputData[7],tempVar4 & 0x1000,1);\n    if ((tempVar2 == -1) && (tempVar5 = *inputData, tempVar5 != 0)) {\n      if ((tempVar5 == 0x1d) || (tempVar5 == 0x16)) {\n        *inputData = tempVar7;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    tempVar4 = (uint)*(ushort *)(outputData + 3);\n    functionPtr = (code *)outputData[10];\n  }\n  else {\n    tempVar2 = outputData[0x14];\n  }\n  if (((int)(tempVar4 << 0x1d) < 0) && (tempVar2 = tempVar2 - outputData[1], outputData[0xc] != 0)) {\n    tempVar2 = tempVar2 - outputData[0xf];\n  }\n  tempVar2 = (*functionPtr)(inputData,outputData[7],tempVar2,0);\n  if (tempVar2 == -1) {\n    tempVar5 = *inputData;\n    if (tempVar5 != 0) {\n      if ((tempVar5 != 0x1d) && (tempVar5 != 0x16)) {\n        *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) & 0xf7ff;\n      *outputData = outputData[4];\n      outputData[1] = 0;\n      goto LAB_00083a00;\n    }\n    tempVar3 = *(ushort *)(outputData + 3) & 0xf7ff;\n    outputData[1] = 0;\n    *(ushort *)(outputData + 3) = tempVar3;\n    *outputData = outputData[4];\n  }\n  else {\n    tempVar3 = *(ushort *)(outputData + 3) & 0xf7ff;\n    *outputData = outputData[4];\n    *(ushort *)(outputData + 3) = tempVar3;\n    outputData[1] = 0;\n  }\n  if ((int)((uint)tempVar3 << 0x13) < 0) {\n    outputData[0x14] = tempVar2;\n  }\nLAB_00083a00:\n  tempVar1 = (int *)outputData[0xc];\n  *inputData = tempVar7;\n  if (tempVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (tempVar1 != outputData + 0x10) {\n    _free_r(inputData);\n  }\n  outputData[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_function_00083adc",
                "param_1": "inputData",
                "param_2": "outputData",
                "piVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "pcVar6": "functionPtr",
                "unaff_r4": "returnValue",
                "iVar7": "tempVar7"
            },
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "fclose",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_parameters_00083b14",
            "code": "\nvoid initializeParameters_00083b14(int structData)\n\n{\n  undefined4 *ptrData1;\n  undefined4 *ptrData2;\n  \n  if (*(int *)(structData + 0x38) == 0) {\n    ptrData1 = *(undefined4 **)(structData + 4);\n    *(undefined **)(structData + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(structData + 0x2e4) = 3;\n    *(int *)(structData + 0x2e8) = structData + 0x2ec;\n    *(undefined4 *)(structData + 0x2e0) = 0;\n    *(undefined2 *)(ptrData1 + 3) = 4;\n    *ptrData1 = 0;\n    ptrData1[1] = 0;\n    ptrData1[2] = 0;\n    ptrData1[0x19] = 0;\n    *(undefined2 *)((int)ptrData1 + 0xe) = 0;\n    ptrData1[4] = 0;\n    ptrData1[5] = 0;\n    ptrData1[6] = 0;\n    memset(ptrData1 + 0x17,0,8);\n    ptrData2 = *(undefined4 **)(structData + 8);\n    ptrData1[7] = ptrData1;\n    ptrData1[8] = &LAB_00084440_1;\n    ptrData1[9] = 0x84465;\n    ptrData1[10] = 0x8449d;\n    ptrData1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptrData2 + 0xe) = 1;\n    *(undefined2 *)(ptrData2 + 3) = 9;\n    *ptrData2 = 0;\n    ptrData2[1] = 0;\n    ptrData2[2] = 0;\n    ptrData2[0x19] = 0;\n    ptrData2[4] = 0;\n    ptrData2[5] = 0;\n    ptrData2[6] = 0;\n    memset(ptrData2 + 0x17,0,8);\n    ptrData1 = *(undefined4 **)(structData + 0xc);\n    ptrData2[7] = ptrData2;\n    ptrData2[8] = &LAB_00084440_1;\n    ptrData2[9] = 0x84465;\n    ptrData2[10] = 0x8449d;\n    ptrData2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptrData1 + 3) = 0x12;\n    *(undefined2 *)((int)ptrData1 + 0xe) = 2;\n    *ptrData1 = 0;\n    ptrData1[1] = 0;\n    ptrData1[2] = 0;\n    ptrData1[0x19] = 0;\n    ptrData1[4] = 0;\n    ptrData1[5] = 0;\n    ptrData1[6] = 0;\n    memset(ptrData1 + 0x17,0,8);\n    ptrData1[7] = ptrData1;\n    ptrData1[8] = &LAB_00084440_1;\n    ptrData1[9] = 0x84465;\n    ptrData1[10] = 0x8449d;\n    ptrData1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(structData + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_parameters_00083b14",
                "param_1": "structData",
                "puVar1": "ptrData1",
                "puVar2": "ptrData2"
            },
            "calling": [
                "fclose",
                "_fflush_r",
                "__swbuf_r",
                "_vfiprintf_r",
                "__swsetup_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "convert_character_00083c40",
            "code": "\nuint convertCharacter_00083c40(undefined4 locale_settings,uint input_character,byte **output_buffer)\n\n{\n  int max_bytes;\n  uint converted_bytes;\n  uint converted_character;\n  byte *output_buffer_end;\n  uint iteration_count;\n  byte temp_character;\n  byte temp_buffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output_buffer + 3) << 0x12)) {\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x2000;\n    output_buffer[0x19] = (byte *)((uint)output_buffer[0x19] | 0x2000);\n  }\n  max_bytes = __locale_mb_cur_max();\n  if ((max_bytes == 1) && (input_character - 1 < 0xff)) {\n    converted_character = input_character & 0xff;\n    temp_character = (byte)converted_character;\n    converted_bytes = 1;\n  }\n  else {\n    converted_bytes = _wcrtomb_r(locale_settings,&temp_character,input_character,output_buffer + 0x17);\n    if (converted_bytes == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (converted_bytes == 0) {\n      return input_character;\n    }\n    converted_character = (uint)temp_character;\n  }\n  iteration_count = 0;\n  do {\n    output_buffer_end = output_buffer[2] + -1;\n    output_buffer[2] = output_buffer_end;\n    if ((int)output_buffer_end < 0) {\n      if ((int)output_buffer[6] <= (int)output_buffer_end) {\n        **output_buffer = (byte)converted_character;\n        output_buffer_end = *output_buffer;\n        converted_character = (uint)*output_buffer_end;\n        if (converted_character != 10) goto LAB_00083c90;\n      }\n      max_bytes = __swbuf_r(locale_settings,converted_character,output_buffer);\n      if (max_bytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_buffer = (byte)converted_character;\n      output_buffer_end = *output_buffer;\nLAB_00083c90:\n      *output_buffer = output_buffer_end + 1;\n    }\n    if (converted_bytes <= iteration_count + 1) {\n      return input_character;\n    }\n    converted_character = (uint)temp_buffer[iteration_count];\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "convert_character_00083c40",
                "param_1": "locale_settings",
                "param_2": "input_character",
                "param_3": "output_buffer",
                "iVar1": "max_bytes",
                "uVar2": "converted_bytes",
                "uVar3": "converted_character",
                "pbVar4": "output_buffer_end",
                "uVar5": "iteration_count",
                "local_1c": "temp_character",
                "abStack_1b": "temp_buffer"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "allocate_memory_00083d00",
            "code": "\nundefined4 allocate_memory_00083d00(undefined4 lock,int size)\n\n{\n  int result;\n  uint mask;\n  int adjusted_size;\n  \n  __malloc_lock();\n  mask = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjusted_size = ((mask - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_size) {\n    result = _sbrk_r(lock,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + mask) {\n      result = _sbrk_r(lock,-adjusted_size);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask - adjusted_size | 1;\n        __malloc_unlock(lock);\n        return 1;\n      }\n      adjusted_size = _sbrk_r(lock,0);\n      if (0xf < (int)(adjusted_size - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjusted_size - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjusted_size - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  __malloc_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "mask",
                "iVar3": "adjusted_size"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "deallocate_memory_00083d9c",
            "code": "\nvoid deallocateMemory_00083d9c(undefined4 lock,int address)\n\n{\n  int prevBlock;\n  bool isFreedBlock;\n  uint blockSize;\n  dword currentBlock;\n  int nextBlock;\n  uint alignedSize;\n  dword lastBlock;\n  uint newSize;\n  dword foundBlock;\n  \n  if (address == 0) {\n    return;\n  }\n  __malloc_lock();\n  blockSize = *(uint *)(address + -4);\n  lastBlock = address - 8;\n  alignedSize = blockSize & 0xfffffffe;\n  currentBlock = lastBlock + alignedSize;\n  newSize = *(uint *)(currentBlock + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentBlock) {\n    newSize = newSize + alignedSize;\n    if (-1 < (int)(blockSize << 0x1f)) {\n      lastBlock = lastBlock - *(int *)(address + -8);\n      nextBlock = *(int *)(lastBlock + 0xc);\n      prevBlock = *(int *)(lastBlock + 8);\n      newSize = newSize + *(int *)(address + -8);\n      *(int *)(prevBlock + 0xc) = nextBlock;\n      *(int *)(nextBlock + 8) = prevBlock;\n    }\n    currentBlock = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(lastBlock + 4) = newSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = lastBlock;\n    if (currentBlock <= newSize) {\n      _malloc_trim_r(lock,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentBlock + 4) = newSize;\n    if ((blockSize & 1) == 0) {\n      lastBlock = lastBlock - *(int *)(address + -8);\n      prevBlock = *(int *)(lastBlock + 8);\n      alignedSize = alignedSize + *(int *)(address + -8);\n      if (prevBlock == 0x2007046c) {\n        isFreedBlock = true;\n      }\n      else {\n        nextBlock = *(int *)(lastBlock + 0xc);\n        *(int *)(prevBlock + 0xc) = nextBlock;\n        *(int *)(nextBlock + 8) = prevBlock;\n        isFreedBlock = false;\n      }\n    }\n    else {\n      isFreedBlock = false;\n    }\n    if (-1 < *(int *)(currentBlock + newSize + 4) << 0x1f) {\n      alignedSize = alignedSize + newSize;\n      prevBlock = *(int *)(currentBlock + 8);\n      if ((!isFreedBlock) && (prevBlock == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = lastBlock;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = lastBlock;\n        *(undefined4 *)(lastBlock + 0xc) = 0x2007046c;\n        *(undefined4 *)(lastBlock + 8) = 0x2007046c;\n        *(uint *)(lastBlock + 4) = alignedSize | 1;\n        *(uint *)(lastBlock + alignedSize) = alignedSize;\n        goto LAB_00083e30;\n      }\n      nextBlock = *(int *)(currentBlock + 0xc);\n      *(int *)(prevBlock + 0xc) = nextBlock;\n      *(int *)(nextBlock + 8) = prevBlock;\n    }\n    *(uint *)(lastBlock + 4) = alignedSize | 1;\n    *(uint *)(lastBlock + alignedSize) = alignedSize;\n    if (!isFreedBlock) {\n      if (alignedSize < 0x200) {\n        blockSize = alignedSize & 0xfffffff8;\n        prevBlock = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + blockSize);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(alignedSize >> 3) >> 2 & 0xffU);\n        *(int *)(lastBlock + 8) = prevBlock;\n        *(uint *)(lastBlock + 0xc) = blockSize + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + blockSize) = lastBlock;\n        *(dword *)(prevBlock + 0xc) = lastBlock;\n        __malloc_unlock(lock);\n        return;\n      }\n      blockSize = alignedSize >> 9;\n      if (blockSize < 5) {\n        prevBlock = (alignedSize >> 6) + 0x38;\n        nextBlock = prevBlock * 2;\n      }\n      else if (blockSize < 0x15) {\n        prevBlock = blockSize + 0x5b;\n        nextBlock = prevBlock * 2;\n      }\n      else if (blockSize < 0x55) {\n        prevBlock = (alignedSize >> 0xc) + 0x6e;\n        nextBlock = prevBlock * 2;\n      }\n      else if (blockSize < 0x155) {\n        prevBlock = (alignedSize >> 0xf) + 0x77;\n        nextBlock = prevBlock * 2;\n      }\n      else if (blockSize < 0x555) {\n        prevBlock = (alignedSize >> 0x12) + 0x7c;\n        nextBlock = prevBlock * 2;\n      }\n      else {\n        nextBlock = 0xfc;\n        prevBlock = 0x7e;\n      }\n      foundBlock = nextBlock * 4 + 0x20070464;\n      currentBlock = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextBlock];\n      if (currentBlock == foundBlock) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (prevBlock >> 2 & 0xffU);\n        foundBlock = currentBlock;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentBlock + 4) & 0xfffffffc) <= alignedSize) break;\n          currentBlock = *(dword *)(currentBlock + 8);\n        } while (foundBlock != currentBlock);\n        foundBlock = *(dword *)(currentBlock + 0xc);\n      }\n      *(dword *)(lastBlock + 0xc) = foundBlock;\n      *(dword *)(lastBlock + 8) = currentBlock;\n      *(dword *)(foundBlock + 8) = lastBlock;\n      *(dword *)(currentBlock + 0xc) = lastBlock;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(lock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "deallocate_memory_00083d9c",
                "param_1": "lock",
                "param_2": "address",
                "iVar1": "prevBlock",
                "bVar2": "isFreedBlock",
                "uVar3": "blockSize",
                "dVar4": "currentBlock",
                "iVar5": "nextBlock",
                "uVar6": "alignedSize",
                "dVar7": "lastBlock",
                "uVar8": "newSize",
                "dVar9": "foundBlock"
            },
            "calling": [
                "free",
                "__sfvwrite_r",
                "_realloc_r",
                "fclose",
                "_fflush_r",
                "__swsetup_r",
                "_malloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *paramArray,uint *dataBuffer,uint **bufferState)\n\n{\n  int result;\n  uint count;\n  uint temp;\n  ushort flag;\n  uint var1;\n  uint *ptr1;\n  uint *ptr2;\n  uint var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  uint localVar;\n  \n  if (bufferState[2] != (uint *)0x0) {\n    flag = *(ushort *)(dataBuffer + 3);\n    var1 = (uint)flag;\n    if (((int)(var1 << 0x1c) < 0) && (dataBuffer[4] != 0)) {\n      ptr2 = *bufferState;\n    }\n    else {\n      result = setup(paramArray,dataBuffer);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(dataBuffer + 3);\n      var1 = (uint)flag;\n      ptr2 = *bufferState;\n    }\n    if ((flag & 2) == 0) {\n      count = var1 & 2;\n      var4 = count;\n      var2 = count;\n      localVar = count;\n      if ((var1 & 1) == 0) {\n        count = 0;\n        var4 = 0;\n        while( true ) {\n          while (count == 0) {\n            var4 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            count = *ptr1;\n          }\n          var2 = dataBuffer[2];\n          if ((int)(var1 << 0x16) < 0) {\n            if (count < var2) {\n              var1 = *dataBuffer;\n              var2 = count;\n            }\n            else if ((var1 & 0x480) == 0) {\n              var1 = *dataBuffer;\n            }\n            else {\n              result = *dataBuffer - dataBuffer[4];\n              var2 = result + 1 + count;\n              var3 = (int)(dataBuffer[5] * 3) / 2;\n              if (var2 <= var3) {\n                var2 = var3;\n              }\n              if ((int)(var1 << 0x15) < 0) {\n                var3 = allocateMemory(paramArray,var2);\n                if (var3 == 0) {\n                  *paramArray = 0xc;\n                  flag = *(ushort *)(dataBuffer + 3);\n                  goto LAB_00084030;\n                }\n                copyMemory(var3,dataBuffer[4],result);\n                *(ushort *)(dataBuffer + 3) = *(ushort *)(dataBuffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                var3 = reallocateMemory(paramArray);\n                if (var3 == 0) {\n                  freeMemory(paramArray,dataBuffer[4]);\n                  flag = *(ushort *)(dataBuffer + 3) & 0xff7f;\n                  *paramArray = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              var1 = var3 + result;\n              dataBuffer[4] = var3;\n              dataBuffer[5] = var2;\n              *dataBuffer = var1;\n              dataBuffer[2] = var2 - result;\n              var2 = count;\n            }\n            moveMemory(var1,var4,var2);\n            dataBuffer[2] = dataBuffer[2] - var2;\n            *dataBuffer = *dataBuffer + var2;\n            var2 = count;\n          }\n          else if ((dataBuffer[4] < *dataBuffer) || (var1 = dataBuffer[5], count < var1)) {\n            if (count < var2) {\n              var2 = count;\n            }\n            moveMemory(*dataBuffer,var4,var2);\n            var1 = dataBuffer[2];\n            dataBuffer[2] = var1 - var2;\n            *dataBuffer = *dataBuffer + var2;\n            if ((var1 - var2 == 0) && (result = flushBuffer(paramArray,dataBuffer), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            var2 = 0x7fffffff;\n            if (count < 0x7fffffff) {\n              var2 = count;\n            }\n            var2 = (*(code *)dataBuffer[9])(paramArray,dataBuffer[7],var4,(var2 / var1) * var1);\n            if ((int)var2 < 1) goto LAB_0008402e;\n          }\n          ptr1 = bufferState[2];\n          var4 = var4 + var2;\n          count = count - var2;\n          bufferState[2] = (uint *)((int)ptr1 - var2);\n          if ((uint *)((int)ptr1 - var2) == (uint *)0x0) break;\n          var1 = (uint)*(ushort *)(dataBuffer + 3);\n        }\n      }\n      else {\n        do {\n          while (count == 0) {\n            var2 = *ptr2;\n            count = ptr2[1];\n            localVar = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == 0) {\n            result = searchChar(var2,10,count);\n            if (result == 0) {\n              var4 = count + 1;\n              localVar = 1;\n            }\n            else {\n              var4 = (result + 1) - var2;\n              localVar = 1;\n            }\n          }\n          var3 = *dataBuffer;\n          var1 = var4;\n          if (count <= var4) {\n            var1 = count;\n          }\n          temp = dataBuffer[5];\n          if ((dataBuffer[4] < var3) && (var5 = dataBuffer[2] + temp, (int)var5 < (int)var1)) {\n            moveMemory(var3,var2,var5);\n            *dataBuffer = *dataBuffer + var5;\n            result = flushBuffer(paramArray,dataBuffer);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)var1 < (int)temp) {\n            moveMemory(var3,var2,var1);\n            dataBuffer[2] = dataBuffer[2] - var1;\n            *dataBuffer = var1 + *dataBuffer;\n            var5 = var1;\n          }\n          else {\n            var5 = (*(code *)dataBuffer[9])(paramArray,dataBuffer[7],var2,temp);\n            if ((int)var5 < 1) goto LAB_0008402e;\n          }\n          var4 = var4 - var5;\n          if (var4 == 0) {\n            result = flushBuffer(paramArray,dataBuffer);\n            if (result != 0) goto LAB_0008402e;\n            localVar = 0;\n          }\n          ptr1 = bufferState[2];\n          var2 = var2 + var5;\n          count = count - var5;\n          bufferState[2] = (uint *)((int)ptr1 - var5);\n        } while ((uint *)((int)ptr1 - var5) != (uint *)0x0);\n      }\n    }\n    else {\n      count = 0;\n      var1 = 0;\n      do {\n        while( true ) {\n          var4 = var1;\n          if (0x7ffffbff < var1) {\n            var4 = 0x7ffffc00;\n          }\n          if (var1 != 0) break;\n          count = *ptr2;\n          var1 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)dataBuffer[9])(paramArray,dataBuffer[7],count,var4);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(dataBuffer + 3);\nLAB_00084030:\n          *(ushort *)(dataBuffer + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = bufferState[2];\n        count = count + result;\n        var1 = var1 - result;\n        bufferState[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "paramArray",
                "param_2": "dataBuffer",
                "param_3": "bufferState",
                "iVar1": "result",
                "uVar2": "count",
                "uVar3": "temp",
                "uVar4": "flag",
                "uVar5": "var1",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "var2",
                "uVar9": "var3",
                "uVar10": "var4",
                "uVar11": "var5",
                "local_2c": "localVar",
                "__swsetup_r": "setup",
                "_malloc_r": "allocateMemory",
                "_realloc_r": "reallocateMemory",
                "_free_r": "freeMemory",
                "_fflush_r": "flushBuffer",
                "memmove": "moveMemory",
                "memcpy": "copyMemory",
                "memchr": "searchChar"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memmove",
                "_realloc_r",
                "memchr",
                "_free_r",
                "memcpy",
                "_fflush_r",
                "__swsetup_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return Elf32_Rel_ARRAY_20070000[274].relocation_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "r_info": "relocation_info"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_file_000842a4",
            "code": "\nvoid initializeFile_000842a4(int fileDescriptor,int *fileInformation)\n\n{\n  ushort fileFlags;\n  int fileStatus;\n  int allocationStatus;\n  uint fileFlagMask;\n  bool isExecutable;\n  undefined fileStat [4];\n  uint filePermissions;\n  \n  fileFlags = *(ushort *)(fileInformation + 3);\n  fileFlagMask = (uint)fileFlags;\n  if ((int)(fileFlagMask << 0x1e) < 0) {\n    *fileInformation = (int)fileInformation + 0x43;\n    fileInformation[4] = (int)fileInformation + 0x43;\n    fileInformation[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileInformation + 0xe)) {\n    fileStatus = _fstat_r(fileDescriptor,(int)*(short *)((int)fileInformation + 0xe),fileStat);\n    if (-1 < fileStatus) {\n      isExecutable = (filePermissions & 0xf000) == 0x2000;\n      if (((filePermissions & 0xf000) == 0x8000) && (fileInformation[10] == 0x8449d)) {\n        fileStatus = 0x400;\n        *(ushort *)(fileInformation + 3) = *(ushort *)(fileInformation + 3) | 0x400;\n        fileInformation[0x13] = 0x400;\n      }\n      else {\n        fileStatus = 0x400;\n        *(ushort *)(fileInformation + 3) = *(ushort *)(fileInformation + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    fileFlags = *(ushort *)(fileInformation + 3);\n    fileFlagMask = (uint)fileFlags;\n  }\n  *(ushort *)(fileInformation + 3) = fileFlags | 0x800;\n  if ((fileFlagMask & 0x80) == 0) {\n    fileStatus = 0x400;\n  }\n  else {\n    fileStatus = 0x40;\n  }\n  isExecutable = false;\nLAB_00084300:\n  allocationStatus = _malloc_r(fileDescriptor,fileStatus);\n  fileFlags = *(ushort *)(fileInformation + 3);\n  if (allocationStatus == 0) {\n    if (-1 < (int)((uint)fileFlags << 0x16)) {\n      *(ushort *)(fileInformation + 3) = fileFlags | 2;\n      *fileInformation = (int)fileInformation + 0x43;\n      fileInformation[4] = (int)fileInformation + 0x43;\n      fileInformation[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(fileDescriptor + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(fileInformation + 3) = fileFlags | 0x80;\n    *fileInformation = allocationStatus;\n    fileInformation[4] = allocationStatus;\n    fileInformation[5] = fileStatus;\n    if ((isExecutable) && (fileStatus = _isatty_r(fileDescriptor,(int)*(short *)((int)fileInformation + 0xe)), fileStatus != 0)) {\n      *(ushort *)(fileInformation + 3) = *(ushort *)(fileInformation + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_file_000842a4",
                "param_1": "fileDescriptor",
                "param_2": "fileInformation",
                "uVar1": "fileFlags",
                "iVar2": "fileStatus",
                "iVar3": "allocationStatus",
                "uVar4": "fileFlagMask",
                "bVar5": "isExecutable",
                "auStack_54": "fileStat",
                "local_50": "filePermissions"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_char_in_array_00084384",
            "code": "\nuint * find_char_in_array_00084384(uint *array,char target_char,uint array_length)\n\n{\n  uint temp_var;\n  int iVar2;\n  uint *array_ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < array_length) {\n      array_ptr = array;\n      do {\n        temp_var = *array_ptr ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        array = array_ptr;\n        if ((temp_var + 0xfefefeff & ~temp_var & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        array = array_ptr + 1;\n        array_ptr = array_ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target_char) {\n      iVar2 = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = iVar2 == array_length - 1;\n        iVar2 = iVar2 + 1;\n        if (is_last_index) goto LAB_000843dc;\n      } while (*(char *)array != target_char);\n    }\n  }\n  else if (array_length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target_char) {\n    array_ptr = (uint *)((int)array + 1);\n    array_length = array_length - 1;\n    do {\n      array = array_ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (array_length == 0) goto LAB_000843dc;\n      array_ptr = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)array != target_char);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_char_in_array_00084384",
                "param_1": "array",
                "param_2": "target_char",
                "param_3": "array_length",
                "uVar1": "temp_var",
                "puVar3": "array_ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "write_to_file_00084464",
            "code": "\nvoid writeToFile_00084464(int *fileDescriptor,int bufferPointer,undefined4 data,undefined4 length)\n\n{\n  int writeResult;\n  ushort flags;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  flags = *(ushort *)(bufferPointer + 0xc);\n  if ((int)((uint)flags << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(bufferPointer + 0xe),0,2);\n    flags = *(ushort *)(bufferPointer + 0xc);\n  }\n  *(ushort *)(bufferPointer + 0xc) = flags & 0xefff;\n  DAT_200711bc = 0;\n  writeResult = _write((int)*(short *)(bufferPointer + 0xe),data,length,length,unused1,unused2,unused3,\n                 unused4);\n  if ((writeResult == -1) && (DAT_200711bc != 0)) {\n    *fileDescriptor = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "write_to_file_00084464",
                "param_1": "fileDescriptor",
                "param_2": "bufferPointer",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "writeResult",
                "uVar2": "flags",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_file_pointer_0008449c",
            "code": "\nvoid updateFilePointer_0008449c(undefined4 fileDescriptor,int bufferAddress)\n\n{\n  int seekResult;\n  ushort updatedFlag;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(bufferAddress + 0xe));\n  if (seekResult == -1) {\n    updatedFlag = *(ushort *)(bufferAddress + 0xc) & 0xefff;\n  }\n  else {\n    updatedFlag = *(ushort *)(bufferAddress + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(bufferAddress + 0x50) = seekResult;\n  }\n  *(ushort *)(bufferAddress + 0xc) = updatedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_file_pointer_0008449c",
                "param_1": "fileDescriptor",
                "param_2": "bufferAddress",
                "iVar1": "seekResult",
                "uVar2": "updatedFlag"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_input_000844c4",
            "code": "\nuint processInput_000844c4(int context,uint inputChar,undefined4 *buffer,undefined4 size)\n\n{\n  ushort ushortValue;\n  uint intValue;\n  undefined *ptr;\n  int offset;\n  \n  if ((context != 0) && (*(int *)(context + 0x38) == 0)) {\n    __sinit();\n  }\n  ushortValue = *(ushort *)(buffer + 3);\n  intValue = (uint)ushortValue;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(intValue << 0x1c)) || (offset = buffer[4], offset == 0)) {\n    offset = __swsetup_r(context,buffer,ushortValue,intValue,size);\n    if (offset != 0) {\n      return 0xffffffff;\n    }\n    ushortValue = *(ushort *)(buffer + 3);\n    offset = buffer[4];\n    intValue = (uint)ushortValue;\n  }\n  inputChar = inputChar & 0xff;\n  if ((int)(intValue << 0x12) < 0) {\n    ptr = (undefined *)*buffer;\n    offset = (int)ptr - offset;\n    if (offset < (int)buffer[5]) {\nLAB_000844f6:\n      offset = offset + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = ushortValue | 0x2000;\n    offset = (int)ptr - offset;\n    if (offset < (int)buffer[5]) goto LAB_000844f6;\n  }\n  offset = _fflush_r(context,buffer);\n  if (offset != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*buffer;\n  offset = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = ptr + 1;\n  *ptr = (char)inputChar;\n  if (((buffer[5] == offset) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (inputChar == 10)))) &&\n     (offset = _fflush_r(context,buffer), offset != 0)) {\n    return 0xffffffff;\n  }\n  return inputChar;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_input_000844c4",
                "param_1": "context",
                "param_2": "inputChar",
                "param_3": "buffer",
                "param_4": "size",
                "uVar1": "ushortValue",
                "uVar2": "intValue",
                "puVar3": "ptr",
                "iVar4": "offset"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "_fflush_r",
                "__sinit",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "convert_to_locale_0008456c",
            "code": "\nvoid convertToLocale_0008456c(undefined4 *outputString,int inputLength,undefined4 additionalParam,undefined4 *result)\n\n{\n  code *functionPointer;\n  undefined4 localeCharset;\n  int returnValue;\n  undefined stackArray [12];\n  \n  functionPointer = DAT_20070898;\n  if (inputLength == 0) {\n    localeCharset = __locale_charset();\n    returnValue = (*functionPointer)(outputString,stackArray,0,localeCharset,result);\n  }\n  else {\n    localeCharset = __locale_charset();\n    returnValue = (*functionPointer)(outputString,inputLength,additionalParam,localeCharset,result);\n  }\n  if (returnValue == -1) {\n    *result = 0;\n    *outputString = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "convert_to_locale_0008456c",
                "param_1": "outputString",
                "param_2": "inputLength",
                "param_3": "additionalParam",
                "param_4": "result",
                "pcVar1": "functionPointer",
                "uVar2": "localeCharset",
                "iVar3": "returnValue",
                "auStack_24": "stackArray"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "set_value_or_error_000845bc",
            "code": "\nundefined4 set_value_or_error_000845bc(undefined4 *output_ptr,undefined *target_ptr,uint value)\n\n{\n  if (target_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *target_ptr = value_as_char;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "set_value_or_error_000845bc",
                "param_1": "output_ptr",
                "param_2": "target_ptr",
                "param_3": "value",
                "(char)param_3": "value_as_char"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "perform_cleanup_000846a4",
            "code": "\nundefined4 performCleanup_000846a4(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = _fflush_r(offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        _free_r(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          _free_r(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        _free_r(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(input + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "perform_cleanup_000846a4",
                "param_1": "input",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_file_status_000846b4",
            "code": "\nvoid check_file_status_000846b4(int *result,undefined4 file_descriptor,undefined4 stat_buf,undefined4 stat_size)\n\n{\n  int status;\n  \n  DAT_200711bc = 0;\n  status = _fstat(file_descriptor,stat_buf,stat_buf,0,stat_size);\n  if ((status == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_file_status_000846b4",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buf",
                "param_4": "stat_size",
                "iVar1": "status"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_isatty_and_assign_value_000846dc",
            "code": "\nvoid checkIsattyAndAssignValue_000846dc(int *outputValue,undefined4 fileDescriptor)\n\n{\n  int isTerminal;\n  \n  DAT_200711bc = 0;\n  isTerminal = _isatty(fileDescriptor);\n  if ((isTerminal == -1) && (DAT_200711bc != 0)) {\n    *outputValue = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_isatty_and_assign_value_000846dc",
                "param_1": "outputValue",
                "param_2": "fileDescriptor",
                "iVar1": "isTerminal"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "seek_and_save_00084700",
            "code": "\nvoid seekAndSave_00084700(int *result,undefined4 fileDescriptor,undefined4 offset,undefined4 origin)\n\n{\n  int seekResult;\n  \n  DAT_200711bc = 0;\n  seekResult = _lseek(fileDescriptor,offset,origin);\n  if ((seekResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "seek_and_save_00084700",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "origin",
                "iVar1": "seekResult"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "read_and_check_error_00084728",
            "code": "\nvoid readAndCheckError_00084728(int *result,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_200711bc = 0;\n  readResult = _read(fileDescriptor,buffer,count);\n  if ((readResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "read_and_check_error_00084728",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_result_00084750",
            "code": "\nint calculateResult_00084750(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculate_difference_0008477c(uint input_1,int input_2,undefined4 multiplier_1,undefined4 multiplier_2,int *output_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __divdi3();\n  product = product * CONCAT44(multiplier_2,multiplier_1);\n  result = (uint)product;\n  *output_array = input_1 - result;\n  output_array[1] = (input_2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_1 < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "multiplier_1",
                "param_4": "multiplier_2",
                "param_5": "output_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculate_difference_000847ac(uint input_value,int param_value,undefined4 concat_value_1,undefined4 concat_value_2,int *output_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(concat_value_2,concat_value_1);\n  result = (uint)product;\n  *output_array = input_value - result;\n  output_array[1] = (param_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "input_value",
                "param_2": "param_value",
                "param_3": "concat_value_1",
                "param_4": "concat_value_2",
                "param_5": "output_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_unsigned_000847e0",
            "code": "\nundefined8 divideUnsigned_000847e0(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper)\n\n{\n  longlong temp_1;\n  uint quotient_upper;\n  uint quotient_lower;\n  uint divisor_shifted;\n  uint divisor_lower;\n  int shift_count;\n  uint temp_2;\n  uint temp_3;\n  uint negative;\n  uint temp_4;\n  uint temp_5;\n  uint divisor_shifted_upper;\n  bool carry_flag;\n  \n  if ((int)dividend_upper < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_upper = -dividend_upper - (uint)carry_flag;\n    negative = 0xffffffff;\n  }\n  else {\n    negative = 0;\n  }\n  if ((int)divisor_upper < 0) {\n    negative = ~negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_upper = -divisor_upper - (uint)carry_flag;\n  }\n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      shift_count = LZCOUNT(divisor);\n      if (shift_count != 0) {\n        quotient_lower = dividend >> (0x20U - shift_count & 0xff);\n        divisor = divisor << shift_count;\n        dividend = dividend << shift_count;\n        dividend_upper = dividend_upper << shift_count | quotient_lower;\n      }\n      quotient_upper = divisor >> 0x10;\n      divisor_shifted = dividend_upper / quotient_upper;\n      temp_2 = (divisor & 0xffff) * divisor_shifted;\n      temp_4 = dividend >> 0x10 | (dividend_upper - quotient_upper * divisor_shifted) * 0x10000;\n      quotient_lower = divisor_shifted;\n      if (temp_4 <= temp_2 && temp_2 - temp_4 != 0) {\n        carry_flag = CARRY4(temp_4,divisor);\n        temp_4 = temp_4 + divisor;\n        quotient_lower = divisor_shifted - 1;\n        if ((carry_flag == false) && (temp_4 <= temp_2 && temp_2 - temp_4 != 0)) {\n          quotient_lower = divisor_shifted - 2;\n          temp_4 = temp_4 + divisor;\n        }\n      }\n      temp_3 = (temp_4 - temp_2) / quotient_upper;\n      divisor_shifted = (divisor & 0xffff) * temp_3;\n      temp_2 = dividend & 0xffff | ((temp_4 - temp_2) - quotient_upper * temp_3) * 0x10000;\n      quotient_upper = temp_3;\n      if (temp_2 <= divisor_shifted && divisor_shifted - temp_2 != 0) {\n        quotient_upper = temp_3 - 1;\n        if ((CARRY4(temp_2,divisor) == false) &&\n           (temp_2 + divisor <= divisor_shifted && divisor_shifted - (temp_2 + divisor) != 0)) {\n          quotient_upper = temp_3 - 2;\n        }\n      }\n      quotient_upper = quotient_upper | quotient_lower << 0x10;\n      quotient_lower = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend_upper = dividend_upper - divisor;\n        divisor_shifted = divisor >> 0x10;\n        divisor_shifted_upper = divisor & 0xffff;\n        quotient_lower = 1;\n      }\n      else {\n        divisor = divisor << shift_count;\n        quotient_lower = dividend_upper >> (0x20U - shift_count & 0xff);\n        divisor_shifted = divisor >> 0x10;\n        temp_4 = quotient_lower / divisor_shifted;\n        divisor_shifted_upper = divisor & 0xffff;\n        temp_2 = divisor_shifted_upper * temp_4;\n        temp_3 = dividend >> (0x20U - shift_count & 0xff) | dividend_upper << shift_count;\n        quotient_lower = temp_3 >> 0x10 | (quotient_lower - divisor_shifted * temp_4) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient_upper = temp_4;\n        if (quotient_lower <= temp_2 && temp_2 - quotient_lower != 0) {\n          carry_flag = CARRY4(quotient_lower,divisor);\n          quotient_lower = quotient_lower + divisor;\n          quotient_upper = temp_4 - 1;\n          if ((carry_flag == false) && (quotient_lower <= temp_2 && temp_2 - quotient_lower != 0)) {\n            quotient_upper = temp_4 - 2;\n            quotient_lower = quotient_lower + divisor;\n          }\n        }\n        divisor_lower = (quotient_lower - temp_2) / divisor_shifted;\n        temp_4 = divisor_shifted_upper * divisor_lower;\n        dividend_upper = temp_3 & 0xffff | ((quotient_lower - temp_2) - divisor_shifted * divisor_lower) * 0x10000;\n        quotient_lower = divisor_lower;\n        if (dividend_upper <= temp_4 && temp_4 - dividend_upper != 0) {\n          carry_flag = CARRY4(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          quotient_lower = divisor_lower - 1;\n          if ((carry_flag == false) && (dividend_upper <= temp_4 && temp_4 - dividend_upper != 0)) {\n            quotient_lower = divisor_lower - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - temp_4;\n        quotient_lower = quotient_lower | quotient_upper << 0x10;\n      }\n      quotient_upper = dividend_upper / divisor_shifted;\n      temp_4 = divisor_shifted_upper * quotient_upper;\n      temp_3 = dividend >> 0x10 | (dividend_upper - divisor_shifted * quotient_upper) * 0x10000;\n      temp_2 = quotient_upper;\n      if (temp_3 <= temp_4 && temp_4 - temp_3 != 0) {\n        carry_flag = CARRY4(temp_3,divisor);\n        temp_3 = temp_3 + divisor;\n        temp_2 = quotient_upper - 1;\n        if ((carry_flag == false) && (temp_3 <= temp_4 && temp_4 - temp_3 != 0)) {\n          temp_2 = quotient_upper - 2;\n          temp_3 = temp_3 + divisor;\n        }\n      }\n      divisor_lower = (temp_3 - temp_4) / divisor_shifted;\n      divisor_shifted_upper = divisor_shifted_upper * divisor_lower;\n      divisor_shifted = dividend & 0xffff | ((temp_3 - temp_4) - divisor_shifted * divisor_lower) * 0x10000;\n      quotient_upper = divisor_lower;\n      if (divisor_shifted <= divisor_shifted_upper && divisor_shifted_upper - divisor_shifted != 0) {\n        quotient_upper = divisor_lower - 1;\n        if ((CARRY4(divisor_shifted,divisor) == false) &&\n           (divisor_shifted + divisor <= divisor_shifted_upper && divisor_shifted_upper - (divisor_shifted + divisor) != 0)) {\n          quotient_upper = divisor_lower - 2;\n        }\n      }\n      quotient_upper = quotient_upper | temp_2 << 0x10;\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    quotient_lower = 0;\n    quotient_upper = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor_upper);\n    if (shift_count == 0) {\n      if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n        quotient_lower = 0;\n        quotient_upper = 1;\n      }\n      else {\n        quotient_upper = 0;\n        quotient_lower = 0;\n      }\n    }\n    else {\n      quotient_lower = 0x20 - shift_count;\n      divisor_shifted = dividend_upper >> (quotient_lower & 0xff);\n      divisor_shifted_upper = divisor >> (quotient_lower & 0xff) | divisor_upper << shift_count;\n      temp_4 = divisor_shifted_upper >> 0x10;\n      quotient_upper = divisor_shifted / temp_4;\n      temp_3 = (divisor_shifted_upper & 0xffff) * quotient_upper;\n      temp_2 = dividend_upper << shift_count | dividend >> (quotient_lower & 0xff);\n      divisor_shifted = temp_2 >> 0x10 | (divisor_shifted - temp_4 * quotient_upper) * 0x10000;\n      quotient_lower = quotient_upper;\n      if (divisor_shifted <= temp_3 && temp_3 - divisor_shifted != 0) {\n        carry_flag = CARRY4(divisor_shifted,divisor_shifted_upper);\n        divisor_shifted = divisor_shifted + divisor_shifted_upper;\n        quotient_lower = quotient_upper - 1;\n        if ((carry_flag == false) && (divisor_shifted <= temp_3 && temp_3 - divisor_shifted != 0)) {\n          quotient_lower = quotient_upper - 2;\n          divisor_shifted = divisor_shifted + divisor_shifted_upper;\n        }\n      }\n      divisor_lower = (divisor_shifted - temp_3) / temp_4;\n      temp_5 = (divisor_shifted_upper & 0xffff) * divisor_lower;\n      divisor_shifted = temp_2 & 0xffff | ((divisor_shifted - temp_3) - temp_4 * divisor_lower) * 0x10000;\n      quotient_upper = divisor_lower;\n      if (divisor_shifted <= temp_5 && temp_5 - divisor_shifted != 0) {\n        carry_flag = CARRY4(divisor_shifted,divisor_shifted_upper);\n        divisor_shifted = divisor_shifted + divisor_shifted_upper;\n        quotient_upper = divisor_lower - 1;\n        if ((carry_flag == false) && (divisor_shifted <= temp_5 && temp_5 - divisor_shifted != 0)) {\n          quotient_upper = divisor_lower - 2;\n          divisor_shifted = divisor_shifted + divisor_shifted_upper;\n        }\n      }\n      quotient_upper = quotient_upper | quotient_lower << 0x10;\n      temp_1 = (ulonglong)quotient_upper * (ulonglong)(divisor << shift_count);\n      temp_2 = (uint)((ulonglong)temp_1 >> 0x20);\n      quotient_lower = 0;\n      if ((divisor_shifted - temp_5 < temp_2) ||\n         ((divisor_shifted - temp_5 == temp_2 && (dividend << shift_count < (uint)temp_1)))) {\n        quotient_upper = quotient_upper - 1;\n        quotient_lower = 0;\n      }\n    }\n  }\n  if (negative != 0) {\n    carry_flag = quotient_upper != 0;\n    quotient_upper = -quotient_upper;\n    quotient_lower = -quotient_lower - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_lower,quotient_upper);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_unsigned_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "lVar1": "temp_1",
                "uVar2": "quotient_upper",
                "uVar3": "quotient_lower",
                "uVar4": "divisor_shifted",
                "uVar5": "divisor_lower",
                "iVar6": "shift_count",
                "uVar7": "temp_2",
                "uVar8": "temp_3",
                "uVar9": "negative",
                "uVar10": "temp_4",
                "uVar11": "temp_5",
                "uVar12": "divisor_shifted_upper",
                "bVar13": "carry_flag"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "arithmetic_operation_00084a80",
            "code": "\nulonglong arithmeticOperation_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint quotient4;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int shiftCount;\n  bool isCarry;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        quotient4 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shiftCount;\n        temp3 = divisor >> (0x20U - shiftCount & 0xff);\n        quotient2 = quotient >> 0x10;\n        temp4 = temp3 / quotient2;\n        quotient4 = quotient & 0xffff;\n        quotient1 = quotient4 * temp4;\n        temp1 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        quotient3 = temp1 >> 0x10 | (temp3 - quotient2 * temp4) * 0x10000;\n        dividend = dividend << shiftCount;\n        temp3 = temp4;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          isCarry = CARRY4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp3 = temp4 - 1;\n          if ((isCarry == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            temp3 = temp4 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        temp2 = (quotient3 - quotient1) / quotient2;\n        temp4 = quotient4 * temp2;\n        divisor = temp1 & 0xffff | ((quotient3 - quotient1) - quotient2 * temp2) * 0x10000;\n        quotient1 = temp2;\n        if (divisor <= temp4 && temp4 - divisor != 0) {\n          isCarry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = temp2 - 1;\n          if ((isCarry == false) && (divisor <= temp4 && temp4 - divisor != 0)) {\n            quotient1 = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp4;\n        quotient1 = quotient1 | temp3 << 0x10;\n      }\n      temp4 = divisor / quotient2;\n      quotient3 = quotient4 * temp4;\n      temp1 = dividend >> 0x10 | (divisor - quotient2 * temp4) * 0x10000;\n      temp3 = temp4;\n      if (temp1 <= quotient3 && quotient3 - temp1 != 0) {\n        isCarry = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        temp3 = temp4 - 1;\n        if ((isCarry == false) && (temp1 <= quotient3 && quotient3 - temp1 != 0)) {\n          temp3 = temp4 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      temp4 = (temp1 - quotient3) / quotient2;\n      quotient4 = quotient4 * temp4;\n      temp1 = dividend & 0xffff | ((temp1 - quotient3) - quotient2 * temp4) * 0x10000;\n      quotient2 = temp4;\n      if (temp1 <= quotient4 && quotient4 - temp1 != 0) {\n        quotient2 = temp4 - 1;\n        if ((CARRY4(temp1,quotient) == false) &&\n           (temp1 + quotient <= quotient4 && quotient4 - (temp1 + quotient) != 0)) {\n          quotient2 = temp4 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | temp3 << 0x10);\n    }\n    shiftCount = LZCOUNT(quotient);\n    if (shiftCount != 0) {\n      temp3 = dividend >> (0x20U - shiftCount & 0xff);\n      quotient = quotient << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = temp3 | divisor << shiftCount;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    quotient4 = (quotient & 0xffff) * quotient2;\n    temp4 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    temp3 = quotient2;\n    if (temp4 <= quotient4 && quotient4 - temp4 != 0) {\n      isCarry = CARRY4(temp4,quotient);\n      temp4 = temp4 + quotient;\n      temp3 = quotient2 - 1;\n      if ((isCarry == false) && (temp4 <= quotient4 && quotient4 - temp4 != 0)) {\n        temp3 = quotient2 - 2;\n        temp4 = temp4 + quotient;\n      }\n    }\n    temp1 = (temp4 - quotient4) / quotient1;\n    quotient2 = (quotient & 0xffff) * temp1;\n    quotient4 = dividend & 0xffff | ((temp4 - quotient4) - quotient1 * temp1) * 0x10000;\n    quotient1 = temp1;\n    if (quotient4 <= quotient2 && quotient2 - quotient4 != 0) {\n      quotient1 = temp1 - 1;\n      if ((CARRY4(quotient4,quotient) == false) &&\n         (quotient4 + quotient <= quotient2 && quotient2 - (quotient4 + quotient) != 0)) {\n        quotient1 = temp1 - 2;\n      }\n    }\n    quotient1 = quotient1 | temp3 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shiftCount;\n      temp3 = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << shiftCount | quotient >> (quotient1 & 0xff);\n      quotient4 = quotient2 >> 0x10;\n      quotient3 = temp3 / quotient4;\n      temp4 = (quotient2 & 0xffff) * quotient3;\n      temp1 = dividend >> (quotient1 & 0xff) | divisor << shiftCount;\n      quotient1 = temp1 >> 0x10 | (temp3 - quotient4 * quotient3) * 0x10000;\n      temp3 = quotient3;\n      if (quotient1 <= temp4 && temp4 - quotient1 != 0) {\n        isCarry = CARRY4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        temp3 = quotient3 - 1;\n        if ((isCarry == false) && (quotient1 <= temp4 && temp4 - quotient1 != 0)) {\n          temp3 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - temp4) / quotient4;\n      temp2 = (quotient2 & 0xffff) * quotient3;\n      quotient4 = temp1 & 0xffff | ((quotient1 - temp4) - quotient4 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (quotient4 <= temp2 && temp2 - quotient4 != 0) {\n        isCarry = CARRY4(quotient4,quotient2);\n        quotient4 = quotient4 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((isCarry == false) && (quotient4 <= temp2 && temp2 - quotient4 != 0)) {\n          quotient1 = quotient3 - 2;\n          quotient4 = quotient4 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | temp3 << 0x10;\n      result = (ulonglong)quotient1 * (ulonglong)(quotient << shiftCount);\n      temp3 = (uint)((ulonglong)result >> 0x20);\n      if ((quotient4 - temp2 < temp3) || ((quotient4 - temp2 == temp3 && (dividend << shiftCount < (uint)result)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "arithmetic_operation_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "result",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "quotient4",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4",
                "iVar10": "shiftCount",
                "bVar11": "isCarry"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 102913,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f24",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_000804a8",
            "FUN_000816a8"
        ]
    ],
    "locked_functions": []
}