{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_string_terminator_08000178",
            "code": "\nchar * findStringTerminator_08000178(char *str)\n\n{\n  char currentChar;\n  char *nextChar;\n  char *strPtr;\n  \n  strPtr = str;\n  do {\n    nextChar = strPtr + 1;\n    currentChar = *strPtr;\n    strPtr = nextChar;\n  } while (currentChar != '\\0');\n  return nextChar + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_string_terminator_08000178",
                "param_1": "str",
                "cVar1": "currentChar",
                "pcVar2": "nextChar",
                "pcVar3": "strPtr"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "send_software_interrupt_08000188",
            "code": "\nvoid sendSoftwareInterrupt_08000188(void)\n\n{\n  executeInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "send_software_interrupt_08000188",
                "software_interrupt": "executeInterrupt"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "send_interrupt_0800018c",
            "code": "\nundefined4 send_interrupt_0800018c(undefined4 data,undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = send_software_interrupt_08000188(1,data,0,0,unused_param3);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "send_interrupt_0800018c",
                "param_1": "data",
                "param_2": "unused_param1",
                "param_3": "unused_param2",
                "param_4": "unused_param3",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_data_08000214",
            "code": "\nvoid processData_08000214(uint value,undefined4 offsetValue,undefined4 param1,undefined4 param2)\n\n{\n  bool isValid;\n  int result;\n  \n  if (0x3b < (int)value) {\n    return;\n  }\n  result = get_offset_value_08002fa0(&DAT_200003d4,value,param1,param2,param2);\n  if (result == 3) {\n    if (value < 0x3c) {\n      if ((&DAT_0800a908)[value] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_character_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_character_080036ac((int)(char)(&DAT_0800a908)[value]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = check_param_0800738a((int)(char)(&DAT_0800a908)[value],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_data_080088e0(value,offsetValue);\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,value,offsetValue);\n  }\n  else if (result == 4) {\n    if (value < 0x3c) {\n      if ((&DAT_0800a908)[value] == -1) {\n        isValid = false;\n      }\n      else {\n        result = find_character_080036ac();\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = find_character_080036ac((int)(char)(&DAT_0800a908)[value]);\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      interpolate_and_update_array_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[value] * 3,offsetValue);\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,value,offsetValue);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_data_08000214",
                "param_1": "value",
                "param_2": "offsetValue",
                "param_3": "param1",
                "param_4": "param2",
                "bVar1": "isValid",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "process_data_and_write_0800021a",
            "code": "\nvoid process_data_and_write_0800021a(uint index,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool isValidCharacter;\n  int result;\n  \n  result = getOffsetValue(&DAT_200003d4,index,param_3,param_4,param_4);\n  if (result == 3) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = findCharacter();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = findCharacter((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = checkParameter((int)(char)(&DAT_0800a908)[index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_data_080088e0(index,value);\n    }\n    writeValueToMemory(&DAT_200003d4,index,value);\n  }\n  else if (result == 4) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        isValidCharacter = false;\n      }\n      else {\n        result = findCharacter();\n        if (result == 0) {\n          isValidCharacter = false;\n        }\n        else {\n          result = findCharacter((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            isValidCharacter = false;\n          }\n          else {\n            isValidCharacter = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidCharacter = false;\n    }\n    if (isValidCharacter) {\n      interpolateAndUpdateArray(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3,value);\n    }\n    writeValueToMemory(&DAT_200003d4,index,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "process_data_and_write_0800021a",
                "param_1": "index",
                "param_2": "value",
                "bVar1": "isValidCharacter",
                "iVar2": "result",
                "get_offset_value_08002fa0": "getOffsetValue",
                "write_value_to_memory_08002fc2": "writeValueToMemory",
                "find_character_080036ac": "findCharacter",
                "check_param_0800738a": "checkParameter",
                "interpolate_and_update_array_080026b0": "interpolateAndUpdateArray"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "process_input_08000488",
            "code": "\nvoid processInput_08000488(uint inputIndex,int condition)\n\n{\n  undefined4 dataProcessed;\n  \n  if ((int)inputIndex < 0xe) {\n    if (condition == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (inputIndex & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (inputIndex & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      dataProcessed = processData();\n      initializeInputProcessing(&DAT_200003d4,inputIndex,dataProcessed);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "process_input_08000488",
                "param_1": "inputIndex",
                "param_2": "condition",
                "uVar1": "dataProcessed",
                "process_data_08008880": "processData",
                "initialize_input_processing_08002ef2": "initializeInputProcessing"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_data_if_param1_is_1_080004d4",
            "code": "\nvoid initialize_data_if_param1_is_1_080004d4(int input_condition,int input_value)\n\n{\n  int counter;\n  undefined *data_ptr;\n  \n  if (input_condition != 1) {\n    return;\n  }\n  if (input_value == 0xffff) {\n    data_ptr = &DAT_2000022c;\n    for (counter = 0xb; -1 < counter; counter = counter + -1) {\n      initialize_data_08002580(data_ptr);\n      data_ptr = data_ptr + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_data_if_param1_is_1_080004d4",
                "param_1": "input_condition",
                "param_2": "input_value",
                "iVar1": "counter",
                "puVar2": "data_ptr"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "initialize_servo_08000500",
            "code": "\nvoid initialize_servo_08000500(int servo_index,int device_count,int device_size,undefined4 undefined_param)\n\n{\n  if (0xb < DAT_200001ed) {\n    send_processed_data_08002f14(&DAT_200003d4,\"Max servos attached\",device_size,undefined_param,undefined_param);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servo_index] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servo_index] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < device_count) && (0 < device_size)) {\n    process_and_initialize_device_080025ac(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servo_index] * 3,servo_index,device_count,device_size);\n    return;\n  }\n  initialize_device_08002634(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servo_index] * 3,servo_index);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "initialize_servo_08000500",
                "param_1": "servo_index",
                "param_2": "device_count",
                "param_3": "device_size",
                "param_4": "undefined_param"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "process_and_update_data_08000588",
            "code": "\nvoid processAndUpdateData_08000588(int inputIndex)\n\n{\n  process_data_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[inputIndex] * 3);\n  if (((&DAT_200001f0)[inputIndex] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[inputIndex];\n  }\n  (&DAT_200001f0)[inputIndex] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "process_and_update_data_08000588",
                "param_1": "inputIndex"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "process_pin_operation_080005f8",
            "code": "\nvoid process_pin_operation_080005f8(uint pin_number,int pin_mode)\n\n{\n  int offset_value;\n  char initialize_data;\n  bool check_condition;\n  uint processed_pin_number;\n  \n  offset_value = get_offset_value_08002fa0(&DAT_200003d4,pin_number);\n  if (offset_value != 0x7f) {\n    offset_value = get_offset_value_08002fa0(&DAT_200003d4,pin_number);\n    if (offset_value == 6) {\n      if (DAT_20000170 == '\\0') {\n        initialize_data = '\\0';\n      }\n      else {\n        initialize_data = DAT_20000170;\n        if (pin_mode == 6) {\n          initialize_data = '\\0';\n        }\n      }\n    }\n    else {\n      initialize_data = '\\0';\n    }\n    if (initialize_data != '\\0') {\n      initialize_data_080005e0();\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        check_condition = false;\n      }\n      else {\n        offset_value = find_character_080036ac();\n        if (offset_value == 0) {\n          check_condition = false;\n        }\n        else {\n          offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n          if (offset_value == 1) {\n            check_condition = false;\n          }\n          else if (pin_mode == 4) {\n            check_condition = false;\n          }\n          else {\n            check_condition = true;\n          }\n        }\n      }\n    }\n    else {\n      check_condition = false;\n    }\n    if (check_condition) {\n      if ((byte)(&DAT_200001f0)[pin_number] < 0xc) {\n        offset_value = extract_bit_from_table_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3);\n      }\n      else {\n        offset_value = 0;\n      }\n      if (offset_value != 0) {\n        process_and_update_data_08000588(pin_number);\n      }\n    }\n    processed_pin_number = pin_number - 0x2e & 0xff;\n    if (processed_pin_number < 0xe) {\n      if (pin_number < 0x3c) {\n        offset_value = (int)(char)(&DAT_0800a908)[pin_number];\n      }\n      else {\n        offset_value = -1;\n      }\n      offset_value = find_character_080036ac(offset_value);\n      if (offset_value == 0) {\n        check_condition = false;\n      }\n      else {\n        if (pin_number < 0x3c) {\n          offset_value = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          offset_value = -1;\n        }\n        offset_value = find_character_080036ac(offset_value);\n        if (offset_value == 1) {\n          check_condition = false;\n        }\n        else {\n          check_condition = true;\n        }\n      }\n    }\n    else {\n      check_condition = false;\n    }\n    if (check_condition) {\n      process_input_08000488(processed_pin_number,pin_mode == 2);\n    }\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        check_condition = false;\n      }\n      else {\n        offset_value = find_character_080036ac();\n        if (offset_value == 0) {\n          check_condition = false;\n        }\n        else {\n          offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n          if (offset_value == 1) {\n            check_condition = false;\n          }\n          else {\n            check_condition = true;\n          }\n        }\n      }\n    }\n    else {\n      check_condition = false;\n    }\n    if (check_condition) {\n      if ((pin_mode == 0) || (pin_mode == 0xb)) {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] | (byte)(1 << (pin_number & 7));\n      }\n      else {\n        (&DAT_20000174)[pin_number >> 3] = (&DAT_20000174)[pin_number >> 3] & ~(byte)(1 << (pin_number & 7));\n      }\n    }\n    write_value_to_memory_08002fc2(&DAT_200003d4,pin_number,0);\n    switch(pin_mode) {\n    case 0:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          check_condition = false;\n        }\n        else {\n          offset_value = find_character_080036ac();\n          if (offset_value == 0) {\n            check_condition = false;\n          }\n          else {\n            offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              check_condition = false;\n            }\n            else {\n              check_condition = true;\n            }\n          }\n        }\n      }\n      else {\n        check_condition = false;\n      }\n      if (check_condition) {\n        process_device_data_08008990(pin_number,0);\n        update_character_if_not_valid_08002fa8(&DAT_200003d4,pin_number,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          check_condition = false;\n        }\n        else {\n          offset_value = find_character_080036ac();\n          if (offset_value == 0) {\n            check_condition = false;\n          }\n          else {\n            offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              check_condition = false;\n            }\n            else {\n              check_condition = true;\n            }\n          }\n        }\n      }\n      else {\n        check_condition = false;\n      }\n      if (check_condition) {\n        offset_value = get_offset_value_08002fa0(&DAT_200003d4,pin_number);\n        if (offset_value == 3) {\n          update_memory_value_08008a24(pin_number,0);\n        }\n        process_device_data_08008990(pin_number,1);\n        update_character_if_not_valid_08002fa8(&DAT_200003d4,pin_number,1);\n        return;\n      }\n      break;\n    case 2:\n      if (processed_pin_number < 0xe) {\n        if (pin_number < 0x3c) {\n          offset_value = (int)(char)(&DAT_0800a908)[pin_number];\n        }\n        else {\n          offset_value = -1;\n        }\n        offset_value = find_character_080036ac(offset_value);\n        if (offset_value == 0) {\n          check_condition = false;\n        }\n        else {\n          if (pin_number < 0x3c) {\n            offset_value = (int)(char)(&DAT_0800a908)[pin_number];\n          }\n          else {\n            offset_value = -1;\n          }\n          offset_value = find_character_080036ac(offset_value);\n          if (offset_value == 1) {\n            check_condition = false;\n          }\n          else {\n            check_condition = true;\n          }\n        }\n      }\n      else {\n        check_condition = false;\n      }\n      if (check_condition) {\n        if (pin_number < 0x3c) {\n          if ((&DAT_0800a908)[pin_number] == -1) {\n            check_condition = false;\n          }\n          else {\n            offset_value = find_character_080036ac();\n            if (offset_value == 0) {\n              check_condition = false;\n            }\n            else {\n              offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n              if (offset_value == 1) {\n                check_condition = false;\n              }\n            }\n          }\n        }\n        else {\n          check_condition = false;\n        }\n        if (check_condition) {\n          process_device_data_08008990(pin_number,0);\n        }\n        update_character_if_not_valid_08002fa8(&DAT_200003d4,pin_number,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          offset_value = 0;\n        }\n        else {\n          offset_value = find_character_080036ac();\n          if (offset_value == 0) {\n            offset_value = 0;\n          }\n          else {\n            offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              offset_value = 0;\n            }\n            else {\n              offset_value = check_param_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        offset_value = 0;\n      }\n      if (offset_value != 0) {\n        process_device_data_08008990(pin_number,1);\n        process_data_080088e0(pin_number,0);\n        update_character_if_not_valid_08002fa8(&DAT_200003d4,pin_number,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          check_condition = false;\n        }\n        else {\n          offset_value = find_character_080036ac();\n          if (offset_value == 0) {\n            check_condition = false;\n          }\n          else {\n            offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              check_condition = false;\n            }\n            else {\n              check_condition = true;\n            }\n          }\n        }\n      }\n      else {\n        check_condition = false;\n      }\n      if (check_condition) {\n        update_character_if_not_valid_08002fa8(&DAT_200003d4,pin_number,4);\n        if (((byte)(&DAT_200001f0)[pin_number] != 0xff) &&\n           (offset_value = extract_bit_from_table_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pin_number] * 3),\n           offset_value != 0)) {\n          check_condition = false;\n        }\n        if (check_condition) {\n          initialize_servo_08000500(pin_number,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      send_processed_data_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          offset_value = 0;\n        }\n        else {\n          offset_value = find_character_080036ac();\n          if (offset_value == 0) {\n            offset_value = 0;\n          }\n          else {\n            offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              offset_value = 0;\n            }\n            else {\n              offset_value = check_param_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a69c);\n              if (offset_value == 0) {\n                offset_value = check_param_0800738a((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        offset_value = 0;\n      }\n      if (offset_value != 0) {\n        update_character_if_not_valid_08002fa8(&DAT_200003d4,pin_number,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pin_number < 0x3c) {\n        if ((&DAT_0800a908)[pin_number] == -1) {\n          check_condition = false;\n        }\n        else {\n          offset_value = find_character_080036ac();\n          if (offset_value == 0) {\n            check_condition = false;\n          }\n          else {\n            offset_value = find_character_080036ac((int)(char)(&DAT_0800a908)[pin_number]);\n            if (offset_value == 1) {\n              check_condition = false;\n            }\n            else {\n              check_condition = true;\n            }\n          }\n        }\n      }\n      else {\n        check_condition = false;\n      }\n      if (check_condition) {\n        process_device_data_08008990(pin_number,2);\n        update_character_if_not_valid_08002fa8(&DAT_200003d4,pin_number,0xb);\n        write_value_to_memory_08002fc2(&DAT_200003d4,pin_number,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "process_pin_operation_080005f8",
                "param_1": "pin_number",
                "param_2": "pin_mode",
                "iVar1": "offset_value",
                "cVar2": "initialize_data",
                "bVar3": "check_condition",
                "uVar4": "processed_pin_number"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "process_and_initialize_08000a64",
            "code": "\nvoid process_and_initialize_08000a64(void)\n\n{\n  int result;\n  uint counter;\n  \n  for (counter = 0; counter < 0x3c; counter = counter + 1 & 0xff) {\n    if (counter < 0x3c) {\n      if ((&DAT_0800a908)[counter] == -1) {\n        result = 0;\n      }\n      else {\n        result = find_character();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = find_character((int)(char)(&DAT_0800a908)[counter]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = check_parameter((int)(char)(&DAT_0800a908)[counter],&DAT_0800a69c);\n            if (result == 0) {\n              result = check_parameter((int)(char)(&DAT_0800a908)[counter],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_pin_operation(counter,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_memory(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "process_and_initialize_08000a64",
                "iVar1": "result",
                "uVar2": "counter",
                "find_character_080036ac": "find_character",
                "check_param_0800738a": "check_parameter",
                "process_pin_operation_080005f8": "process_pin_operation",
                "initialize_memory_08002a26": "initialize_memory"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_data_08000aec",
            "code": "\nvoid initialize_data_08000aec(void)\n\n{\n  bool isCharacterValid;\n  int characterIndex;\n  uint iteration;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initializeData();\n  }\n  for (iteration = 0; iteration < 5; iteration = iteration + 1 & 0xff) {\n    (&DAT_200001e8)[iteration] = 0;\n    (&DAT_20000174)[iteration] = 0;\n    (&DAT_20000180)[iteration] = 0;\n  }\n  for (iteration = 0; iteration < 0x3c; iteration = iteration + 1 & 0xff) {\n    if ((iteration - 0x2e & 0xff) < 0xe) {\n      if (iteration < 0x3c) {\n        characterIndex = (int)(char)(&DAT_0800a908)[iteration];\n      }\n      else {\n        characterIndex = -1;\n      }\n      characterIndex = findCharacter(characterIndex);\n      if (characterIndex == 0) {\n        isCharacterValid = false;\n      }\n      else {\n        if (iteration < 0x3c) {\n          characterIndex = (int)(char)(&DAT_0800a908)[iteration];\n        }\n        else {\n          characterIndex = -1;\n        }\n        characterIndex = findCharacter(characterIndex);\n        if (characterIndex == 1) {\n          isCharacterValid = false;\n        }\n        else {\n          isCharacterValid = true;\n        }\n      }\n    }\n    else {\n      isCharacterValid = false;\n    }\n    if (isCharacterValid) {\n      processPinOperation(iteration,2);\n    }\n    else {\n      if ((((iteration < 0x3c) && ((&DAT_0800a908)[iteration] != -1)) &&\n          (characterIndex = findCharacter(), characterIndex != 0)) &&\n         (characterIndex = findCharacter((int)(char)(&DAT_0800a908)[iteration]), characterIndex != 1)) {\n        isCharacterValid = true;\n      }\n      if (isCharacterValid) {\n        processPinOperation(iteration,1);\n      }\n    }\n    (&DAT_200001f0)[iteration] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_data_08000aec",
                "bVar1": "isCharacterValid",
                "iVar2": "characterIndex",
                "uVar3": "iteration",
                "initialize_data_080005e0": "initializeData",
                "find_character_080036ac": "findCharacter",
                "process_pin_operation_080005f8": "processPinOperation"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "decode_and_process_data_08000be8",
            "code": "\nvoid decodeAndProcessData_08000be8(int index,uint mask,int isDecodeRequired,undefined4 param_4)\n\n{\n  undefined1 *dataAddress;\n  undefined1 *processedData;\n  \n  dataAddress = &DAT_20000174;\n  processedData = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((isDecodeRequired != 0) ||\n     (dataAddress = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], processedData != dataAddress)) {\n    decode_and_process_data_08002efe(&DAT_200003d4,index,processedData,dataAddress,param_4);\n    (&DAT_20000180)[index] = (char)processedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "decode_and_process_data_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "isDecodeRequired",
                "puVar1": "dataAddress",
                "puVar2": "processedData"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "process_configuration_settings_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid processConfigurationSettings_08000ef8(void)\n\n{\n  byte bVar1;\n  int iVar2;\n  bool bVar3;\n  byte bVar4;\n  \n  bVar1 = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = findCharacter(3);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(2);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(1);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(10);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 4) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(2);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x13);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(3);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x15);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(4);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x14);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(5);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x1a);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(6);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(8);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(7);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    decode_and_process_data_08000be8(0,bVar4);\n  }\n  bVar1 = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = findCharacter(9);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(8);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x27);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(9);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x16);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 4) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(10);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(7);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0xb);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(6);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0xc);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(5);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0xd);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x19);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0xe);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x18);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0xf);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    decode_and_process_data_08000be8(1,bVar4,0);\n  }\n  bVar1 = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = findCharacter(0x2a);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x10);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x2c);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x11);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0xd);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x13);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0xe);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x14);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0xf);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x15);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x17);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x16);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x2d);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x17);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    decode_and_process_data_08000be8(2,bVar4,0);\n  }\n  bVar1 = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = findCharacter(0x2e);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x18);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x2f);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x19);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x30);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 4) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x1a);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x31);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x1b);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x22);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x1c);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x23);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x1d);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x2b);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x1e);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x32);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x1f);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    decode_and_process_data_08000be8(3,bVar4,0);\n  }\n  bVar1 = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar4 = 0;\n    }\n    else {\n      iVar2 = findCharacter(0x29);\n      if (iVar2 == 1) {\n        bVar4 = 0;\n      }\n      else if ((bVar1 & 1) == 0) {\n        bVar4 = 0;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x20);\n        if (iVar2 == 0) {\n          bVar4 = 0;\n        }\n        else {\n          bVar4 = 1;\n        }\n      }\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x28);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 2) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x21);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 2;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x26);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 4) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x22);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 4;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x25);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 8) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x23);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 8;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0xc);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x10) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x24);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x10;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0xb);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x20) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x25);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x20;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x1c);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x40) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x26);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x40;\n    }\n    iVar2 = findCharacter();\n    if (iVar2 == 0) {\n      bVar3 = false;\n    }\n    else {\n      iVar2 = findCharacter(0x1b);\n      if (iVar2 == 1) {\n        bVar3 = false;\n      }\n      else if ((bVar1 & 0x80) == 0) {\n        bVar3 = false;\n      }\n      else {\n        iVar2 = check_and_return_bit_08008a6c(0x27);\n        if (iVar2 == 0) {\n          bVar3 = false;\n        }\n        else {\n          bVar3 = true;\n        }\n      }\n    }\n    if (bVar3) {\n      bVar4 = bVar4 | 0x80;\n    }\n    decode_and_process_data_08000be8(4,bVar4,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "process_configuration_settings_08000ef8",
                "find_character_080036ac": "findCharacter"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initializeGateway_08001b48(void)\n\n{\n  processSubstring(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  setData(&DAT_200003d4,0xe0,0x8000215);\n  setData(&DAT_200003d4,0x90,&memoryLocation1);\n  setData(&DAT_200003d4,0xc0,0x8000489);\n  setData(&DAT_200003d4,0xd0,&memoryLocation2);\n  setData(&DAT_200003d4,0xf4,0x80005f9);\n  setData(&DAT_200003d4,0xf5,&memoryLocation3);\n  saveParameterToData(&DAT_200003d4,0xf0,0x8001cd1);\n  updateDatValue(&DAT_200003d4,0xff,0x8000aed);\n  initializeUART(&DAT_200003d4,0xe100);\n  initializeData();\n  sendInterrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "process_substring_08002e44": "processSubstring",
                "set_data_08002f2c": "setData",
                "save_parameter_to_data_08002f94": "saveParameterToData",
                "update_dat_value_08002f84": "updateDatValue",
                "initialize_uart_08003048": "initializeUART",
                "initialize_data_08000aec": "initializeData",
                "send_interrupt_0800018c": "sendInterrupt",
                "&LAB_080002ec_1": "&memoryLocation1",
                "&LAB_08000c18_1": "&memoryLocation2",
                "&LAB_080001a8_1": "&memoryLocation3"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "process_data_08001bf8",
            "code": "\nvoid process_data_08001bf8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  process_data_08001bf8_0800288c(&DAT_20000314,arg1,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "process_data_08001bf8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_next_byte_08001c08",
            "code": "\nundefined read_next_byte_08001c08(void)\n\n{\n  undefined byte;\n  \n  byte = get_next_byte(&DAT_20000314);\n  return byte;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_next_byte_08001c08",
                "uVar1": "byte",
                "get_next_byte_08002720": "get_next_byte"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_received_data_08001c18",
            "code": "\nvoid processReceivedData_08001c18(undefined4 dataBuffer,uint receivedDataSize,int expectedDataSize,undefined4 inputData)\n\n{\n  undefined currentByte;\n  int difference;\n  int difference2;\n  bool isDifferenceNonZero;\n  \n  if (receivedDataSize == 0xffffffff) {\n    receivedDataSize = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,dataBuffer);\n    process_data_08001bf8(receivedDataSize & 0xff);\n    process_input_and_check_08002a58(&DAT_20000314,inputData);\n  }\n  initialize_data_processing_08002c14(&DAT_20000314,dataBuffer,expectedDataSize);\n  difference = calculate_difference_0800270c(&DAT_20000314);\n  if (expectedDataSize < difference) {\n    send_processed_data_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    difference = calculate_difference_0800270c(&DAT_20000314);\n    if (difference < expectedDataSize) {\n      send_processed_data_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)dataBuffer;\n  DAT_20000131 = (undefined)receivedDataSize;\n  difference = 0;\n  while( true ) {\n    if (difference < expectedDataSize) {\n      difference2 = calculate_difference_0800270c(&DAT_20000314);\n      if (difference2 == 0) {\n        isDifferenceNonZero = false;\n      }\n      else {\n        isDifferenceNonZero = true;\n      }\n    }\n    else {\n      isDifferenceNonZero = false;\n    }\n    if (!isDifferenceNonZero) break;\n    currentByte = read_next_byte_08001c08();\n    (&DAT_20000132)[difference] = currentByte;\n    difference = difference + 1;\n  }\n  process_and_forward_data_08002f0a(&DAT_200003d4,0x77,expectedDataSize + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_received_data_08001c18",
                "param_1": "dataBuffer",
                "param_2": "receivedDataSize",
                "param_3": "expectedDataSize",
                "param_4": "inputData",
                "uVar1": "currentByte",
                "iVar2": "difference",
                "iVar3": "difference2",
                "bVar4": "isDifferenceNonZero"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "process_input_data_08001cd0",
            "code": "\nvoid processInputData_08001cd0(undefined4 inputType,int inputLength,byte *inputData,undefined4 inputOffset)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 offsetValue;\n  byte byte4;\n  char charVar;\n  int intVar1;\n  int intVar2;\n  uint loopIndex;\n  uint tempIndex;\n  int intVar3;\n  bool boolVar;\n  \n  switch(inputType) {\n  case 0x69:\n    executeCallback(&DAT_200003d4,0xf0);\n    executeCallback(&DAT_200003d4,0x6a);\n    for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n      tempIndex = loopIndex - 0x2e & 0xff;\n      if (tempIndex < 0xe) {\n        if (loopIndex < 0x3c) {\n          intVar1 = (int)(char)(&DAT_0800a908)[loopIndex];\n        }\n        else {\n          intVar1 = -1;\n        }\n        intVar1 = findCharacter(intVar1);\n        if (intVar1 == 0) {\n          tempIndex = 0x7f;\n        }\n        else {\n          if (loopIndex < 0x3c) {\n            intVar1 = (int)(char)(&DAT_0800a908)[loopIndex];\n          }\n          else {\n            intVar1 = -1;\n          }\n          intVar1 = findCharacter(intVar1);\n          if (intVar1 == 1) {\n            tempIndex = 0x7f;\n          }\n        }\n      }\n      else {\n        tempIndex = 0x7f;\n      }\n      executeCallback(&DAT_200003d4,tempIndex);\n    }\n    executeCallback(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    executeCallback(&DAT_200003d4,0xf0);\n    executeCallback(&DAT_200003d4,0x6c);\n    for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          boolVar = false;\n        }\n        else {\n          intVar1 = findCharacter();\n          if (intVar1 == 0) {\n            boolVar = false;\n          }\n          else {\n            intVar1 = findCharacter((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (intVar1 == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        executeCallback(&DAT_200003d4,0);\n        executeCallback(&DAT_200003d4,1);\n        executeCallback(&DAT_200003d4,0xb);\n        executeCallback(&DAT_200003d4,1);\n        executeCallback(&DAT_200003d4,1);\n        executeCallback(&DAT_200003d4,1);\n      }\n      if ((loopIndex - 0x2e & 0xff) < 0xe) {\n        if (loopIndex < 0x3c) {\n          intVar1 = (int)(char)(&DAT_0800a908)[loopIndex];\n        }\n        else {\n          intVar1 = -1;\n        }\n        intVar1 = findCharacter(intVar1);\n        if (intVar1 == 0) {\n          boolVar = false;\n        }\n        else {\n          if (loopIndex < 0x3c) {\n            intVar1 = (int)(char)(&DAT_0800a908)[loopIndex];\n          }\n          else {\n            intVar1 = -1;\n          }\n          intVar1 = findCharacter(intVar1);\n          if (intVar1 == 1) {\n            boolVar = false;\n          }\n          else {\n            boolVar = true;\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        executeCallback(&DAT_200003d4,2);\n        executeCallback(&DAT_200003d4,10);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          intVar1 = 0;\n        }\n        else {\n          intVar1 = findCharacter();\n          if (intVar1 == 0) {\n            intVar1 = 0;\n          }\n          else {\n            intVar1 = findCharacter((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (intVar1 == 1) {\n              intVar1 = 0;\n            }\n            else {\n              intVar1 = checkParam((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        intVar1 = 0;\n      }\n      if (intVar1 != 0) {\n        executeCallback(&DAT_200003d4,3);\n        executeCallback(&DAT_200003d4,8);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          boolVar = false;\n        }\n        else {\n          intVar1 = findCharacter();\n          if (intVar1 == 0) {\n            boolVar = false;\n          }\n          else {\n            intVar1 = findCharacter((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (intVar1 == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        executeCallback(&DAT_200003d4,4);\n        executeCallback(&DAT_200003d4,0xe);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          intVar1 = 0;\n        }\n        else {\n          intVar1 = findCharacter();\n          if (intVar1 == 0) {\n            intVar1 = 0;\n          }\n          else {\n            intVar1 = findCharacter((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (intVar1 == 1) {\n              intVar1 = 0;\n            }\n            else {\n              intVar1 = checkParam((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a69c);\n              if (intVar1 == 0) {\n                intVar1 = checkParam((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        intVar1 = 0;\n      }\n      if (intVar1 != 0) {\n        executeCallback(&DAT_200003d4,6);\n        executeCallback(&DAT_200003d4,1);\n      }\n      executeCallback(&DAT_200003d4,0x7f);\n    }\n    executeCallback(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (inputLength != 0) {\n      byte1 = *inputData;\n      executeCallback(&DAT_200003d4,0xf0);\n      executeCallback(&DAT_200003d4,0x6e);\n      executeCallback(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        offsetValue = getOffsetValue(&DAT_200003d4,byte1);\n        executeCallback(&DAT_200003d4,offsetValue);\n        loopIndex = getValueFromOffset(&DAT_200003d4,byte1);\n        executeCallback(&DAT_200003d4,loopIndex & 0x7f);\n        loopIndex = getValueFromOffset(&DAT_200003d4,byte1);\n        if ((loopIndex & 0xff80) != 0) {\n          intVar1 = getValueFromOffset(&DAT_200003d4,byte1);\n          executeCallback(&DAT_200003d4,(uint)(intVar1 << 0x12) >> 0x19);\n        }\n        loopIndex = getValueFromOffset(&DAT_200003d4,byte1);\n        if ((loopIndex & 0xc000) != 0) {\n          intVar1 = getValueFromOffset(&DAT_200003d4,byte1);\n          executeCallback(&DAT_200003d4,(uint)(intVar1 << 0xb) >> 0x19);\n        }\n      }\n      executeCallback(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < inputLength) {\n      loopIndex = (uint)inputData[1];\n      if (2 < inputLength) {\n        loopIndex = loopIndex | (uint)inputData[2] << 7;\n      }\n      if (3 < inputLength) {\n        loopIndex = loopIndex | (uint)inputData[3] << 0xe;\n      }\n      processData(*inputData,loopIndex);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < inputLength) {\n      loopIndex = (uint)*inputData;\n      byte1 = inputData[1];\n      byte4 = inputData[2];\n      byte2 = inputData[3];\n      byte3 = inputData[4];\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          boolVar = false;\n        }\n        else {\n          intVar1 = findCharacter();\n          if (intVar1 == 0) {\n            boolVar = false;\n          }\n          else {\n            intVar1 = findCharacter((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (intVar1 == 1) {\n              boolVar = false;\n            }\n            else {\n              boolVar = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar = false;\n      }\n      if (boolVar) {\n        if ((byte)(&DAT_200001f0)[loopIndex] < 0xc) {\n          intVar1 = extractBitFromTable(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[loopIndex] * 3);\n        }\n        else {\n          intVar1 = 0;\n        }\n        if (intVar1 != 0) {\n          processAndUpdateData4(loopIndex);\n        }\n        initializeServo6(loopIndex,(uint)byte1 + (uint)byte4 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        processPinOperation(loopIndex,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = inputData[1];\n    byte4 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      sendProcessedData4(&DAT_200003d4,\"10-bit addressing not supported\",byte4,byte1,inputOffset);\n      return;\n    }\n    byte2 = *inputData;\n    boolVar = (byte1 & 0x40) == 0;\n    if (byte4 < 0x19) {\n      switch(byte4) {\n      case 0:\n        initializeData2(&DAT_20000314,byte2);\n        for (loopIndex = 2; (int)loopIndex < inputLength; loopIndex = loopIndex + 2 & 0xff) {\n          processData5(inputData[loopIndex + 1] * -0x80 + inputData[loopIndex]);\n        }\n        processAndCheckInput10(&DAT_20000314);\n        return;\n      case 8:\n        if (inputLength == 6) {\n          intVar1 = (uint)inputData[2] + (uint)inputData[3] * 0x80;\n          charVar = inputData[4] + inputData[5] * -0x80;\n        }\n        else {\n          charVar = inputData[2] + inputData[3] * -0x80;\n          intVar1 = -1;\n        }\n        processReceivedData2(byte2,intVar1,charVar);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (inputLength == 6) {\n            intVar1 = (uint)inputData[2] + (uint)inputData[3] * 0x80;\n            charVar = inputData[4] + inputData[5] * -0x80;\n          }\n          else {\n            charVar = inputData[2] + inputData[3] * -0x80;\n            intVar1 = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          intVar2 = (int)DAT_20000004;\n          intVar3 = intVar2 * 0xc;\n          (&DAT_20000188)[intVar3] = byte2;\n          (&DAT_2000018c)[intVar2 * 3] = intVar1;\n          (&DAT_20000190)[intVar3] = charVar;\n          (&DAT_20000191)[intVar3] = boolVar;\n          return;\n        }\n        sendProcessedData4(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,boolVar,inputOffset);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (loopIndex = 0; intVar1 = DAT_20000004 + 1, (int)loopIndex < intVar1; loopIndex = loopIndex + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[loopIndex * 0xc]) goto LAB_08001e66;\n      }\n      loopIndex = 0;\nLAB_08001e66:\n      for (; (int)loopIndex < intVar1; loopIndex = loopIndex + 1 & 0xff) {\n        if (loopIndex < 8) {\n          intVar2 = (loopIndex + 1) * 0xc;\n          intVar3 = loopIndex * 0xc;\n          (&DAT_20000188)[intVar3] = (&DAT_20000188)[intVar2];\n          (&DAT_2000018c)[loopIndex * 3] = (&DAT_2000018c)[(loopIndex + 1) * 3];\n          (&DAT_20000190)[intVar3] = (&DAT_20000190)[intVar2];\n          (&DAT_20000191)[intVar3] = (&DAT_20000191)[intVar2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    intVar1 = (uint)*inputData + (uint)inputData[1] * 0x80;\n    if ((1 < inputLength) && (intVar1 != 0)) {\n      DAT_2000012c = intVar1;\n    }\n    if (DAT_20000170 == '\\0') {\n      process_and_initialize_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < inputLength) &&\n       (DAT_20000008 = (uint)*inputData + (uint)inputData[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "process_input_data_08001cd0",
                "param_1": "inputType",
                "param_2": "inputLength",
                "param_3": "inputData",
                "param_4": "inputOffset",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "uVar4": "offsetValue",
                "bVar5": "byte4",
                "cVar6": "charVar",
                "iVar7": "intVar1",
                "iVar8": "intVar2",
                "uVar9": "loopIndex",
                "uVar10": "tempIndex",
                "iVar11": "intVar3",
                "bVar12": "boolVar",
                "execute_callback_08002f1e": "executeCallback",
                "find_character_080036ac": "findCharacter",
                "check_param_0800738a": "checkParam",
                "get_offset_value_08002fa0": "getOffsetValue",
                "get_value_from_offset_08002fba": "getValueFromOffset",
                "process_data_08000214": "processData",
                "process_and_update_data_08000588": "processAndUpdateData4",
                "initialize_servo_08000500": "initializeServo6",
                "process_pin_operation_080005f8": "processPinOperation",
                "send_processed_data_08002f14": "sendProcessedData4",
                "process_and_check_input_08002ac0": "processAndCheckInput10",
                "initialize_data_08002a30": "initializeData2",
                "process_data_08001bf8": "processData5",
                "process_received_data_08001c18": "processReceivedData2",
                "extract_bit_from_table_080026f8": "extractBitFromTable"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_and_handle_input_080022f8",
            "code": "\nvoid process_and_handle_input_080022f8(void)\n\n{\n  bool isValid;\n  int nestedFuncResult;\n  undefined4 offsetValue;\n  uint loopIndex;\n  uint loopTempIndex;\n  \n  process_configuration_settings_08000ef8();\n  while (nestedFuncResult = execute_nested_function_08002ec4(&DAT_200003d4), nestedFuncResult != 0) {\n    process_input_08002ed2(&DAT_200003d4);\n  }\n  DAT_20000118 = initialize_global_value_08008abc();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n      loopTempIndex = loopIndex - 0x2e & 0xff;\n      if (loopTempIndex < 0xe) {\n        if (loopIndex < 0x3c) {\n          nestedFuncResult = (int)(char)(&DAT_0800a908)[loopIndex];\n        }\n        else {\n          nestedFuncResult = -1;\n        }\n        nestedFuncResult = find_character_080036ac(nestedFuncResult);\n        if (nestedFuncResult == 0) {\n          isValid = false;\n        }\n        else {\n          if (loopIndex < 0x3c) {\n            nestedFuncResult = (int)(char)(&DAT_0800a908)[loopIndex];\n          }\n          else {\n            nestedFuncResult = -1;\n          }\n          nestedFuncResult = find_character_080036ac(nestedFuncResult);\n          if (nestedFuncResult == 1) {\n            isValid = false;\n          }\n          else {\n            nestedFuncResult = get_offset_value_08002fa0(&DAT_200003d4,loopIndex);\n            if (nestedFuncResult == 2) {\n              isValid = true;\n            }\n            else {\n              isValid = false;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if ((isValid) && ((DAT_20000114 >> loopTempIndex & 1U) != 0)) {\n        offsetValue = process_data_08008880(loopTempIndex);\n        initialize_input_processing_08002ef2(&DAT_200003d4,loopTempIndex,offsetValue);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (loopIndex = 0; (int)loopIndex < DAT_20000004 + 1; loopIndex = loopIndex + 1 & 0xff) {\n        nestedFuncResult = loopIndex * 0xc;\n        process_received_data_08001c18((&DAT_20000188)[nestedFuncResult],(&DAT_2000018c)[loopIndex * 3],(&DAT_20000190)[nestedFuncResult],\n                     (&DAT_20000191)[nestedFuncResult]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_and_handle_input_080022f8",
                "iVar2": "nestedFuncResult",
                "uVar3": "offsetValue",
                "uVar4": "loopIndex",
                "uVar5": "loopTempIndex",
                "bVar1": "isValid"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_for_flag_08002400",
            "code": "\nundefined4 check_for_flag_08002400(int input)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(input * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_for_flag_08002400",
                "param_1": "input",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_program_0800242c",
            "code": "\nvoid initialize_program_0800242c(undefined4 paramA,undefined4 paramB,undefined4 paramC,undefined4 paramD)\n\n{\n  init_program(paramA,60000,0x5dc,&label,paramD);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_program_0800242c",
                "param_1": "paramA",
                "param_2": "paramB",
                "param_3": "paramC",
                "param_4": "paramD",
                "LAB_08002444_1": "label",
                "initialize_program_08007648": "init_program"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "initialize_timer_08002578",
            "code": "\nvoid initialize_timer_08002578(void)\n\n{\n  initialize_timer_08002578_080076e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "initialize_timer_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *data)\n\n{\n  char nextValue;\n  uint counter;\n  \n  counter = (uint)DAT_20000250;\n  if (0xb < counter) {\n    *data = 0xff;\n    return;\n  }\n  nextValue = DAT_20000250 + 1;\n  *data = DAT_20000250;\n  DAT_20000250 = nextValue;\n  *(undefined4 *)(&DAT_2000025c + counter * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "data",
                "cVar1": "nextValue",
                "uVar2": "counter"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "process_and_initialize_device_080025ac",
            "code": "\nbyte process_and_initialize_device_080025ac(byte *device_data,uint data_length,int offset_1,int offset_2)\n\n{\n  uint updated_data;\n  uint device_index;\n  uint data_divided;\n  int adjusted_offset;\n  \n  if (*device_data < 0xc) {\n    process_device_data(data_length,1,offset_1,*device_data,offset_2);\n    device_index = (uint)*device_data;\n    updated_data = (byte)(&DAT_20000258)[device_index * 8] & 0xffffffc0 | data_length & 0x3f;\n    (&DAT_20000258)[device_index * 8] = (char)updated_data;\n    adjusted_offset = -offset_1 + 0x220;\n    if (adjusted_offset < 0) {\n      adjusted_offset = -offset_1 + 0x223;\n    }\n    device_data[1] = (byte)((uint)(adjusted_offset << 0x16) >> 0x18);\n    adjusted_offset = -offset_2 + 0x960;\n    if (adjusted_offset < 0) {\n      adjusted_offset = -offset_2 + 0x963;\n    }\n    device_data[2] = (byte)((uint)(adjusted_offset << 0x16) >> 0x18);\n    data_divided = *device_data / 0xc;\n    adjusted_offset = check_flag(data_divided,updated_data,device_index,(uint)*device_data * -0x55555555);\n    if (adjusted_offset == 0) {\n      DAT_200002fc = (undefined)data_divided;\n      initialize_program();\n    }\n    (&DAT_20000258)[(uint)*device_data * 8] = (&DAT_20000258)[(uint)*device_data * 8] | 0x40;\n  }\n  return *device_data;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "process_and_initialize_device_080025ac",
                "param_1": "device_data",
                "param_2": "data_length",
                "param_3": "offset_1",
                "param_4": "offset_2",
                "uVar1": "updated_data",
                "uVar2": "device_index",
                "uVar3": "data_divided",
                "iVar4": "adjusted_offset",
                "process_device_data_08008990": "process_device_data",
                "check_for_flag_08002400": "check_flag",
                "initialize_program_0800242c": "initialize_program"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "initialize_device_08002634",
            "code": "\nvoid initialize_device_08002634(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  process_and_initialize_device_08002634_080025ac(input_1,input_2,0x220,0x960,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "initialize_device_08002634",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "process_data_08002644",
            "code": "\nvoid process_data_08002644(byte *data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte flag;\n  uint index;\n  int result;\n  \n  index = (uint)*data;\n  flag = (&DAT_20000258)[index * 8];\n  (&DAT_20000258)[index * 8] = flag & 0xbf;\n  result = check_for_flag_08002400(index / 0xc,param2,flag & 0xbf,index * -0x55555555,param4);\n  if (result == 0) {\n    initialize_timer_08002578(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "process_data_08002644",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "flag",
                "uVar2": "index",
                "iVar3": "result"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_array_0800267c",
            "code": "\nvoid updateArray_0800267c(byte *array,int size)\n\n{\n  int newValue;\n  \n  if (*array < 0xc) {\n    newValue = (0x88 - (char)array[1]) * 4;\n    if ((newValue - size == 0 || newValue < size) &&\n       (newValue = (600 - (char)array[2]) * 4,\n       size == newValue || size + (600 - (char)array[2]) * -4 < 0 != SBORROW4(size,newValue)))\n    {\n      newValue = size;\n    }\n    *(int *)(&DAT_2000025c + (uint)*array * 8) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_array_0800267c",
                "param_1": "array",
                "param_2": "size",
                "iVar1": "newValue"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "interpolate_and_update_array_080026b0",
            "code": "\nvoid interpolateAndUpdateArray_080026b0(int inputArray,int value)\n\n{\n  if (value < 0x220) {\n    if (value < 0) {\n      value = 0;\n    }\n    else if (0xb4 < value) {\n      value = 0xb4;\n    }\n    value = calculateInterpolation(value,0,0xb4,(0x88 - *(char *)(inputArray + 1)) * 4,\n                           (600 - *(char *)(inputArray + 2)) * 4);\n  }\n  updateArray(inputArray,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "interpolate_and_update_array_080026b0",
                "param_1": "inputArray",
                "param_2": "value",
                "calculate_interpolation_08008ef4": "calculateInterpolation",
                "update_array_0800267c": "updateArray"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "extract_bit_from_table_080026f8",
            "code": "\nuint extractBitFromTable_080026f8(byte *input)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*input * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "extract_bit_from_table_080026f8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "get_next_byte_08002720",
            "code": "\nuint getNextByte_08002720(void)\n\n{\n  uint byteIndex;\n  \n  byteIndex = (uint)DAT_200003b5;\n  if (byteIndex < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + byteIndex);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "get_next_byte_08002720",
                "uVar1": "byteIndex"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "process_data_080027f0",
            "code": "\nuint process_data_080027f0(int offset,undefined4 buffer,uint size)\n\n{\n  int result;\n  uint newSize;\n  \n  if (DAT_200003b4 == '\\0') {\n    result = copy_data_08007ede(offset + 0x14,buffer,size & 0xffff);\n    if (result == 0) {\n      return size;\n    }\n    return 0;\n  }\n  newSize = DAT_200003b8 + size;\n  if (DAT_200003c5 < newSize) {\n    if (newSize < 0x20) {\n      newSize = 0x20;\n    }\n    DAT_200003cc = allocate_and_process_data_080027f0_08009908(DAT_200003cc,newSize);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)newSize;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(offset + 4) = 1;\n    return 0;\n  }\n  copy_data_to_buffer_080091b0((uint)DAT_200003b6 + DAT_200003cc,buffer,size);\n  DAT_200003b6 = DAT_200003b6 + (char)size;\n  DAT_200003b8 = DAT_200003b6;\n  return size;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "process_data_080027f0",
                "param_1": "offset",
                "param_2": "buffer",
                "param_3": "size",
                "iVar1": "result",
                "uVar2": "newSize"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "process_data_0800288c",
            "code": "\nundefined4 processData_0800288c(int dataPointer,undefined inputData)\n\n{\n  undefined4 returnValue;\n  int copyResult;\n  uint length;\n  undefined inputByte;\n  \n  inputByte = inputData;\n  if (DAT_200003b4 == '\\0') {\n    copyResult = copy_data_08007ede(dataPointer + 0x14,&inputByte,1);\n    if (copyResult == 0) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    length = DAT_200003b8 + 1;\n    if (DAT_200003c5 < length) {\n      if (length < 0x20) {\n        length = 0x20;\n      }\n      DAT_200003cc = allocate_and_process_data_08009908(DAT_200003cc,length);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)length;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(dataPointer + 4) = 1;\n      returnValue = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = inputByte;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      returnValue = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "process_data_0800288c",
                "param_1": "dataPointer",
                "param_2": "inputData",
                "uVar1": "returnValue",
                "iVar2": "copyResult",
                "uVar3": "length",
                "local_11": "inputByte"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_parameter_0800291c",
            "code": "\nvoid initializeParameter_0800291c(undefined4 *parameterArray)\n\n{\n  parameterArray[1] = 0;\n  parameterArray[2] = 1000;\n  *parameterArray = &PTR_process_data_0800288c_1_0800a5a0;\n  *(undefined *)(parameterArray + 0x1b) = 0x19;\n  *(undefined *)((int)parameterArray + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_parameter_0800291c",
                "param_1": "parameterArray",
                "param_1[1]": "parameterArray[1]",
                "param_1[2]": "parameterArray[2]"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_if_parameter_is_one_08002948",
            "code": "\nvoid initialize_if_parameter_is_one_08002948(int parameter,int flag)\n\n{\n  if (parameter != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    initialize_data(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_if_parameter_is_one_08002948",
                "param_1": "parameter",
                "param_2": "flag",
                "initialize_parameter_0800291c": "initialize_data"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_memory_08002968",
            "code": "\nvoid initializeMemory_08002968(int memoryAddress,uint value)\n\n{\n  int shiftedValue;\n  int pinAddress;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory_080091c6(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shiftedValue = (value & 0x7f) << 1;\n  *(char *)(memoryAddress + 0x10) = (char)shiftedValue;\n  if (value == 0x33) {\n    *(undefined *)(memoryAddress + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(memoryAddress + 0x11) = 0;\n  }\n  pinAddress = memoryAddress + 0x14;\n  initialize_i2_c_pins_080077b0(pinAddress,100000,0x4000,shiftedValue,*(undefined *)(memoryAddress + 0x11));\n  if (*(char *)(memoryAddress + 0x11) == '\\0') {\n    update_memory_08007f8e(pinAddress,&LAB_08002774_1);\n    update_memory_08007f7c(pinAddress,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_memory_08002968",
                "param_1": "memoryAddress",
                "param_2": "value",
                "iVar1": "shiftedValue",
                "iVar2": "pinAddress"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_memory_08002a1c",
            "code": "\nvoid initializeMemory_08002a1c(undefined4 param1,undefined param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_memory_08002968(param1,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_memory_08002a1c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_memory_08002a26",
            "code": "\nvoid initializeMemory_08002a26(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  initialize_memory_08002a1c(arg1,0x33,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_memory_08002a26",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 unusedParameter,int inputValue)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(inputValue << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "unusedParameter",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "process_input_and_check_08002a58",
            "code": "\nundefined4 processInputAndCheck_08002a58(int input)\n\n{\n  int result;\n  undefined4 output;\n  \n  if (*(char *)(input + 0x11) == '\\0') {\n    output = 4;\n  }\n  else {\n    result = process_and_check_input_08007e74(input + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (result == 0) {\n      output = 0;\n    }\n    else if (result == 1) {\n      output = 1;\n    }\n    else {\n      output = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "process_input_and_check_08002a58",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "output"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "process_and_check_input_08002ac0",
            "code": "\nvoid process_and_check_input_08002ac0(undefined4 input_parameter_1,undefined4 input_parameter_2,undefined4 input_parameter_3,undefined4 input_parameter_4)\n\n{\n  process_input_and_check_08002a58(input_parameter_1,1,input_parameter_3,input_parameter_4,input_parameter_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "process_and_check_input_08002ac0",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "param_3": "input_parameter_3",
                "param_4": "input_parameter_4"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "allocate_and_update_data_08002acc",
            "code": "\nvoid allocateAndUpdateData_08002acc(uint inputSize,undefined4 unused1,undefined4 unused2,undefined4 unused3)\n\n{\n  if (DAT_200003c4 < inputSize) {\n    if (inputSize < 0x20) {\n      inputSize = 0x20;\n    }\n    DAT_200003c8 = allocate_and_process_data_08009908(DAT_200003c8,inputSize,unused2,(uint)DAT_200003c4,unused3);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)inputSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "allocate_and_update_data_08002acc",
                "param_1": "inputSize",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "process_data_08002b68",
            "code": "\nundefined4\nprocess_data_08002b68(undefined4 *array_ptr,uint array_size,undefined4 data_ptr,uint data_size,byte flag)\n\n{\n  int result;\n  uint flag_copy;\n  uint data_size_copy;\n  \n  flag_copy = (uint)flag;\n  if (*(char *)((int)array_ptr + 0x11) == '\\0') {\n    return 0;\n  }\n  data_size_copy = data_size;\n  allocate_and_update_data_08002acc(data_ptr);\n  if (DAT_200003c8 != 0) {\n    if (flag_copy != 0) {\n      initialize_data_08002a30(array_ptr,array_size);\n      if (3 < flag_copy) {\n        flag_copy = 3;\n      }\n      while( true ) {\n        if (flag_copy == 0) break;\n        (**(code **)*array_ptr)(array_ptr,data_size >> ((flag_copy - 1 & 0x1f) << 3) & 0xff);\n        flag_copy = flag_copy - 1 & 0xff;\n      }\n      process_input_and_check_08002a58(array_ptr,0);\n    }\n    result = process_and_check_data_08007f0e(array_ptr + 5,(array_size & 0x7f) << 1,DAT_200003c8,data_ptr,data_size_copy);\n    if (result != 0) {\n      data_ptr = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)data_ptr;\n    return data_ptr;\n  }\n  array_ptr[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "param_1": "array_ptr",
                "param_2": "array_size",
                "param_3": "data_ptr",
                "param_4": "data_size",
                "param_5": "flag",
                "iVar1": "result",
                "uVar2": "flag_copy",
                "uVar3": "data_size_copy"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "initialize_data_processing_08002c00",
            "code": "\nvoid initialize_data_processing_08002c00(void)\n\n{\n  process_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "initialize_data_processing_08002c00",
                "process_data_08002b68": "process_data"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "initialize_data_processing_08002c14",
            "code": "\nvoid initialize_data_processing_08002c14(void)\n\n{\n  initialize_data_processing_08002c14_08002c00();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "initialize_data_processing_08002c14"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_with_parameters_08002c1e",
            "code": "\nvoid initializeWithParameters_08002c1e(undefined4 param,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_if_parameter_is_one_08002948(1,0xffff,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_with_parameters_08002c1e",
                "param_1": "param",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 callback,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg1,arg2,arg2,DAT_200005d4,arg3);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "callback",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_function_08002ce0",
            "code": "\nint initialize_function_08002ce0(int input_param)\n\n{\n  int var_offset;\n  \n  initialize_variable(input_param + 0x40);\n  var_offset = input_param + 0x44;\n  initialize_data(var_offset,input_param,0x40);\n  *(undefined *)(input_param + 0xc4) = 0;\n  *(undefined4 *)(input_param + 200) = 0;\n  *(undefined *)(input_param + 0x1f8) = 0;\n  update_values(var_offset,0xe0,execute_callback_08002c2c + 1,0);\n  update_values(var_offset,0x90,&LAB_08002c40_1,0);\n  update_values(var_offset,0xc0,&LAB_08002c7c_1,0);\n  update_values(var_offset,0xd0,&LAB_08002c90_1,0);\n  update_values(var_offset,0xf4,&LAB_08002c54_1,0);\n  update_values(var_offset,0xf5,&LAB_08002c68_1,0);\n  update_data(var_offset,0x71,&LAB_08002ca4_1,0);\n  update_parameters(var_offset,0xf0,&LAB_08002cb8_1,0);\n  update_data_2(var_offset,0x79,&LAB_08002e1a_1,input_param);\n  assign_values_based_on_param(var_offset,0xf9,&LAB_08002dea_1,input_param);\n  assign_values_based_on_param(var_offset,0xff,&LAB_08002cd0_1,0);\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_function_08002ce0",
                "param_1": "input_param",
                "iVar1": "var_offset",
                "initialize_variable_0800314e": "initialize_variable",
                "initialize_data_080032bc": "initialize_data",
                "update_values_08003306": "update_values",
                "update_data_08003366": "update_data",
                "update_params_08003370": "update_parameters",
                "update_data_08003346": "update_data_2",
                "assign_values_based_on_param_08003350": "assign_values_based_on_param"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "initialize_if_param_1_is_1_08002dbc",
            "code": "\nvoid initialize_if_param_1_is_1_08002dbc(int input_param,int input_value)\n\n{\n  if (input_param != 1) {\n    return;\n  }\n  if (input_value == 0xffff) {\n    initialize_function_pointer(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "initialize_if_param_1_is_1_08002dbc",
                "param_1": "input_param",
                "param_2": "input_value",
                "initialize_function_08002ce0": "initialize_function_pointer"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_function_08002ddc",
            "code": "\nvoid execute_function_08002ddc(int input_param,undefined4 unused_param_1,undefined4 unused_param_2,undefined4 unused_param_3)\n\n{\n  execute_function_08002ddc_0800322c(input_param + 0x40,2,5,unused_param_3,unused_param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_function_08002ddc",
                "param_1": "input_param",
                "param_2": "unused_param_1",
                "param_3": "unused_param_2",
                "param_4": "unused_param_3"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "process_data_08002df6",
            "code": "\nvoid processData_08002df6(int data)\n\n{\n  undefined *dataPointer;\n  \n  if (*(byte *)(data + 0xc4) == 0) {\n    return;\n  }\n  dataPointer = *(undefined **)(data + 200);\n  process_data_080031ce(data + 0x40,*dataPointer,dataPointer[1],*(byte *)(data + 0xc4) - 2,dataPointer + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "process_data_08002df6",
                "param_1": "data",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "update_param_value_08002e26",
            "code": "\nvoid updateParamValue_08002e26(int param1,undefined4 param2)\n\n{\n  *(undefined4 *)(param1 + 0xc0) = param2;\n  setParamValue(param1 + 0x40);\n  executeFunction(param1);\n  processData(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "update_param_value_08002e26",
                "param_1": "param1",
                "param_2": "param2",
                "set_param_value_08003154": "setParamValue",
                "execute_function_08002ddc": "executeFunction",
                "process_data_08002df6": "processData"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "process_substring_08002e44",
            "code": "\nvoid processSubstring_08002e44(int result_buffer,int input_string,undefined param_3,undefined param_4)\n\n{\n  byte byte_value;\n  char string_terminator;\n  int substring_end_position;\n  int last_slash_position;\n  undefined *new_string;\n  \n  substring_end_position = find_substring_080099a4(input_string,\".cpp\");\n  last_slash_position = find_last_occurrence_0800997e(input_string,0x2f);\n  if (last_slash_position == 0) {\n    last_slash_position = find_last_occurrence_0800997e(input_string,0x5c);\n  }\n  if (last_slash_position != 0) {\n    input_string = last_slash_position + 1;\n  }\n  if (substring_end_position == 0) {\n    string_terminator = find_string_terminator_08000178(input_string);\n    *(char *)(result_buffer + 0xc4) = string_terminator + '\\x02';\n  }\n  else {\n    *(char *)(result_buffer + 0xc4) = ((char)substring_end_position - (char)input_string) + '\\x02';\n  }\n  processData(*(undefined4 *)(result_buffer + 200));\n  byte_value = *(byte *)(result_buffer + 0xc4);\n  new_string = (undefined *)allocateMemory(byte_value + 1);\n  *(undefined **)(result_buffer + 200) = new_string;\n  new_string[byte_value] = 0;\n  *new_string = param_3;\n  new_string[1] = param_4;\n  copyString(new_string + 2,input_string,*(byte *)(result_buffer + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "process_substring_08002e44",
                "param_1": "result_buffer",
                "param_2": "input_string",
                "bVar1": "byte_value",
                "cVar2": "string_terminator",
                "iVar3": "substring_end_position",
                "iVar4": "last_slash_position",
                "puVar5": "new_string",
                "process_data_080091a0": "processData",
                "allocate_memory_for_param_08009190": "allocateMemory",
                "copy_string_08009954": "copyString"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_nested_function_08002ec4",
            "code": "\nvoid executeNestedFunction_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_nested_function_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_input_08002ed2",
            "code": "\nvoid process_input_08002ed2(int input_data)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(input_data + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_parameter(input_data + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_input_08002ed2",
                "param_1": "input_data",
                "uVar1": "result",
                "process_parameter_08003474": "process_parameter"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "initialize_input_processing_08002ef2",
            "code": "\nvoid initializeInputProcessing_08002ef2(int inputData,undefined4 parameter1,undefined2 parameter2,undefined4 parameter3)\n\n{\n  process_input_08003158(inputData + 0x40,parameter1,parameter2,parameter3,parameter3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "initialize_input_processing_08002ef2",
                "param_1": "inputData",
                "param_2": "parameter1",
                "param_3": "parameter2",
                "param_4": "parameter3"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "decode_and_process_data_08002efe",
            "code": "\nvoid decode_and_process_data_08002efe(int data_pointer,undefined4 param2,undefined2 param3,undefined4 param4)\n\n{\n  decode_and_process_data_08002efe_0800319e(data_pointer + 0x40,param2,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "decode_and_process_data_08002efe",
                "param_1": "data_pointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "process_and_forward_data_08002f0a",
            "code": "\nvoid process_and_forward_data_08002f0a(int input_data)\n\n{\n  process_data(input_data + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "process_and_forward_data_08002f0a",
                "param_1": "input_data",
                "process_data_0800325a": "process_data"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "send_processed_data_08002f14",
            "code": "\nvoid sendProcessedData_08002f14(int originalData)\n\n{\n  processAndSendData(originalData + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "send_processed_data_08002f14",
                "param_1": "originalData",
                "process_and_send_data_080032a2": "processAndSendData"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_callback_08002f1e",
            "code": "\nvoid executeCallback_08002f1e(int callbackPointer)\n\n{\n  (**(code **)**(undefined4 **)(callbackPointer + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_callback_08002f1e",
                "param_1": "callbackPointer"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "set_data_08002f2c",
            "code": "\nvoid set_data_08002f2c(undefined4 flags,uint value,undefined4 new_value)\n\n{\n  undefined4 temp_value;\n  \n  if (value == 0xd0) {\n    DAT_200005f0 = new_value;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      DAT_200005e0 = new_value;\n      return;\n    }\n    temp_value = new_value;\n    if ((value != 0xf5) && (temp_value = DAT_200005e4, value == 0xe0)) {\n      DAT_200005d4 = new_value;\n      return;\n    }\n    DAT_200005e4 = temp_value;\n    return;\n  }\n  if (value == 0x90) {\n    DAT_200005dc = new_value;\n    return;\n  }\n  if (value != 0xc0) {\n    return;\n  }\n  DAT_200005ec = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "set_data_08002f2c",
                "param_1": "flags",
                "param_2": "value",
                "param_3": "new_value",
                "uVar1": "temp_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_dat_value_08002f84",
            "code": "\nvoid updateDATValue_08002f84(undefined4 unspecifiedValue,int inputValue,undefined4 newData)\n\n{\n  if (inputValue == 0xff) {\n    DAT_200005e8 = newData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_dat_value_08002f84",
                "param_1": "unspecifiedValue",
                "param_2": "inputValue",
                "param_3": "newData"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "save_parameter_to_data_08002f94",
            "code": "\nvoid saveParameterToData_08002f94(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  DAT_200005d0 = inputParam3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "save_parameter_to_data_08002f94",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_offset_value_08002fa0",
            "code": "\nundefined get_offset_value_08002fa0(int offset,int base_address)\n\n{\n  return *(undefined *)(base_address + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_offset_value_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_character_if_not_valid_08002fa8",
            "code": "\nvoid updateCharacterIfNotValid_08002fa8(int characterArray,int index,undefined newCharacter)\n\n{\n  if (*(char *)(characterArray + index + 0xcc) != '\\x7f') {\n    *(undefined *)(characterArray + index + 0xcc) = newCharacter;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_character_if_not_valid_08002fa8",
                "param_1": "characterArray",
                "param_2": "index",
                "param_3": "newCharacter"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_value_from_offset_08002fba",
            "code": "\nundefined4 get_value_from_offset_08002fba(int base_address,int offset)\n\n{\n  return *(undefined4 *)(base_address + (offset + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_value_from_offset_08002fba",
                "param_1": "base_address",
                "param_2": "offset"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "write_value_to_memory_08002fc2",
            "code": "\nvoid writeValueToMemory_08002fc2(int baseAddress,int indexOffset,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + (indexOffset + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "write_value_to_memory_08002fc2",
                "param_1": "baseAddress",
                "param_2": "indexOffset",
                "param_3": "value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "process_data_08002fca",
            "code": "\nvoid process_data_08002fca(undefined4 ptr_data,undefined4 ptr_value,int data_length,undefined4 ptr_other_data,\n                 undefined4 ptr_another_data)\n\n{\n  uint iteration_count;\n  \n  for (iteration_count = 0; (int)iteration_count < data_length; iteration_count = iteration_count + 1 & 0xff) {\n    FUNC_08008ac4(ptr_another_data);\n    update_memory_value_08008a24(ptr_value,1);\n    FUNC_08008ac4(ptr_other_data);\n    update_memory_value_08008a24(ptr_value,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "process_data_08002fca",
                "param_1": "ptr_data",
                "param_2": "ptr_value",
                "param_3": "data_length",
                "param_4": "ptr_other_data",
                "param_5": "ptr_another_data",
                "uVar1": "iteration_count"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "process_device_data_08003002",
            "code": "\nvoid processDeviceData_08003002(int dataPointer)\n\n{\n  if (*(char *)(dataPointer + 0x1f8) != '\\0') {\n    return;\n  }\n  processDeviceData_08003002Part1(0xd,1);\n  processData(dataPointer,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  processData(dataPointer,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "process_device_data_08003002",
                "param_1": "dataPointer",
                "process_device_data_08008990": "processDeviceDataPart1",
                "process_data_08002fca": "processData"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_uart_08003048",
            "code": "\nvoid initialize_uart_08003048(undefined4 device_id,undefined4 uart_config,undefined4 param_3,undefined4 param_4)\n\n{\n  configure_uart(&DAT_20000700,uart_config,6,param_4,param_4);\n  process_device_data(device_id);\n  update_param_value(device_id,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_uart_08003048",
                "param_1": "device_id",
                "param_2": "uart_config",
                "configure_uart_08008c44": "configure_uart",
                "process_device_data_08003002": "process_device_data",
                "update_param_value_08002e26": "update_param_value"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_and_process_0800307a",
            "code": "\nvoid decode_and_process_0800307a(undefined4 *output_buffer,uint input_length,byte *encoded_data,uint max_output_length)\n\n{\n  uint current_byte;\n  uint bit_position;\n  uint output_length;\n  uint byte_index;\n  \n  current_byte = (uint)*encoded_data;\n  if (max_output_length == 0) {\n    max_output_length = 0xffffffff;\n  }\n  byte_index = 0;\n  bit_position = 0;\n  output_length = 0;\n  while ((byte_index < input_length && (output_length < max_output_length))) {\n    (***(code ***)(undefined4 *)*output_buffer)\n              ((undefined4 *)*output_buffer,((uint)encoded_data[byte_index] << (bit_position & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)encoded_data[byte_index] >> (7 - bit_position & 0xff) & 0xff;\n    bit_position = bit_position + 1;\n    while ((output_length = output_length + 1, 6 < bit_position && (output_length < max_output_length))) {\n      (***(code ***)(undefined4 *)*output_buffer)((undefined4 *)*output_buffer,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_position = bit_position - 7;\n    }\n    byte_index = byte_index + 1;\n  }\n  if ((bit_position != 0) && (output_length < max_output_length)) {\n    (***(code ***)(undefined4 *)*output_buffer)((undefined4 *)*output_buffer,(1 << (bit_position & 0xff)) - 1U & current_byte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_and_process_0800307a",
                "param_1": "output_buffer",
                "param_2": "input_length",
                "param_3": "encoded_data",
                "param_4": "max_output_length",
                "uVar1": "current_byte",
                "uVar2": "bit_position",
                "uVar3": "output_length",
                "uVar4": "byte_index"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "process_data_08003106",
            "code": "\nvoid process_data_08003106(undefined4 *data_ptr,undefined4 val_1,undefined4 val_2,undefined4 val_3)\n\n{\n  undefined4 *ptr;\n  \n  ptr = (undefined4 *)*data_ptr;\n  if (ptr != (undefined4 *)0x0) {\n    (**(code **)*ptr)(ptr,0xf0);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x6f);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,val_1);\n    decode_and_process_data_08003106(data_ptr,val_2,val_3,val_2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "process_data_08003106",
                "param_1": "data_ptr",
                "param_2": "val_1",
                "param_3": "val_2",
                "param_4": "val_3",
                "puVar1": "ptr",
                "decode_and_process_0800307a": "decode_and_process_data"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_variable_0800314e",
            "code": "\nvoid initializeVariable_0800314e(undefined4 *variable)\n\n{\n  *variable = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_variable_0800314e",
                "param_1": "variable"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "set_param_value_08003154",
            "code": "\nvoid set_param_value_08003154(undefined4 *output_param,undefined4 input_param)\n\n{\n  *output_param = input_param;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "set_param_value_08003154",
                "param_1": "output_param",
                "param_2": "input_param"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "process_input_08003158",
            "code": "\nvoid processInput_08003158(undefined4 *dataArray,uint dataSize,ushort dataValue)\n\n{\n  undefined4 *dataPointer;\n  ushort encodedData;\n  \n  dataPointer = (undefined4 *)*dataArray;\n  if (dataPointer != (undefined4 *)0x0) {\n    encodedData = dataValue;\n    if (((int)dataSize < 0x10) && (dataValue < 0x4000)) {\n      (**(code **)*dataPointer)(dataPointer,dataSize | 0xe0);\n      decode_and_process_0800307a(dataArray,2,&encodedData);\n    }\n    else {\n      process_data_08003106(dataArray,dataSize,2,&encodedData);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "process_input_08003158",
                "param_1": "dataArray",
                "param_2": "dataSize",
                "param_3": "dataValue",
                "puVar1": "dataPointer",
                "local_a": "encodedData"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "decode_and_process_data_0800319e",
            "code": "\nvoid decode_and_process_data_0800319e(undefined4 *data_ptr,uint size,undefined2 initial_value)\n\n{\n  undefined4 *code_ptr;\n  undefined2 current_value;\n  \n  code_ptr = (undefined4 *)*data_ptr;\n  if (code_ptr != (undefined4 *)0x0) {\n    current_value = initial_value;\n    (**(code **)*code_ptr)(code_ptr,size & 0xf | 0x90);\n    decode_and_process_0800307a(data_ptr,2,&current_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "decode_and_process_data_0800319e",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "initial_value",
                "puVar1": "code_ptr",
                "local_a": "current_value"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "process_data_080031ce",
            "code": "\nvoid process_data_080031ce(undefined4 *data_ptr,undefined4 param_2,undefined4 param_3,uint param_4,int param_5\n                 )\n\n{\n  undefined4 *code_ptr;\n  uint counter;\n  \n  code_ptr = (undefined4 *)*data_ptr;\n  if (code_ptr != (undefined4 *)0x0) {\n    (**(code **)*code_ptr)(code_ptr,0xf0,param_3,*(code **)*code_ptr,param_4);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0x79);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_2);\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,param_3);\n    for (counter = 0; counter < param_4; counter = counter + 1) {\n      decode_and_process_0800307a(data_ptr,1,param_5 + counter,0);\n    }\n    (***(code ***)(undefined4 *)*data_ptr)((undefined4 *)*data_ptr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "process_data_080031ce",
                "param_1": "data_ptr",
                "puVar1": "code_ptr",
                "uVar2": "counter"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 argument1,undefined4 argument2)\n\n{\n  undefined4 *functionAddress;\n  \n  functionAddress = (undefined4 *)*functionPointer;\n  if (functionAddress != (undefined4 *)0x0) {\n    (**(code **)*functionAddress)(functionAddress,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,argument1);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,argument2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "argument1",
                "param_3": "argument2",
                "puVar1": "functionAddress"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "process_data_0800325a",
            "code": "\nvoid process_data_0800325a(undefined4 *input_buffer,undefined4 second_param,uint num_iterations,int offset)\n\n{\n  undefined4 *buffer_ptr;\n  uint iteration_counter;\n  \n  buffer_ptr = (undefined4 *)*input_buffer;\n  if (buffer_ptr != (undefined4 *)0x0) {\n    (**(code **)*buffer_ptr)(buffer_ptr,0xf0);\n    (***(code ***)(undefined4 *)*input_buffer)((undefined4 *)*input_buffer,second_param);\n    for (iteration_counter = 0; iteration_counter < num_iterations; iteration_counter = iteration_counter + 1) {\n      decode_and_process_0800307a(input_buffer,1,offset + iteration_counter,0);\n    }\n    (***(code ***)(undefined4 *)*input_buffer)((undefined4 *)*input_buffer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "process_data_0800325a",
                "param_1": "input_buffer",
                "param_2": "second_param",
                "param_3": "num_iterations",
                "param_4": "offset",
                "puVar1": "buffer_ptr",
                "uVar2": "iteration_counter"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "process_and_send_data_080032a2",
            "code": "\nvoid process_and_send_data_080032a2(undefined4 data_ptr,undefined4 string_ptr,undefined4 unused_param,undefined4 other_data_ptr)\n\n{\n  undefined4 terminator_ptr;\n  \n  terminator_ptr = find_string_terminator_08000178(string_ptr);\n  process_data_0800325a(data_ptr,0x71,terminator_ptr,string_ptr,other_data_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "process_and_send_data_080032a2",
                "param_1": "data_ptr",
                "param_2": "string_ptr",
                "param_3": "unused_param",
                "param_4": "other_data_ptr",
                "uVar1": "terminator_ptr"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_data_080032bc",
            "code": "\nvoid initializeData_080032bc(int dataPointer,int newValue,undefined4 newValue2)\n\n{\n  *(int *)(dataPointer + 4) = newValue;\n  *(undefined4 *)(dataPointer + 8) = newValue2;\n  *(undefined *)(dataPointer + 0xc) = 0;\n  *(undefined *)(dataPointer + 0xd) = 0;\n  *(undefined4 *)(dataPointer + 0x10) = 0;\n  *(undefined *)(dataPointer + 0x14) = 0;\n  *(undefined4 *)(dataPointer + 0x18) = 0;\n  *(undefined4 *)(dataPointer + 0x1c) = 0;\n  *(undefined4 *)(dataPointer + 0x20) = 0;\n  *(undefined4 *)(dataPointer + 0x24) = 0;\n  *(undefined4 *)(dataPointer + 0x28) = 0;\n  *(undefined4 *)(dataPointer + 0x2c) = 0;\n  *(undefined4 *)(dataPointer + 0x30) = 0;\n  *(undefined4 *)(dataPointer + 0x34) = 0;\n  *(undefined4 *)(dataPointer + 0x38) = 0;\n  *(undefined4 *)(dataPointer + 0x3c) = 0;\n  *(undefined4 *)(dataPointer + 0x40) = 0;\n  *(undefined4 *)(dataPointer + 0x44) = 0;\n  *(undefined4 *)(dataPointer + 0x48) = 0;\n  *(undefined4 *)(dataPointer + 0x4c) = 0;\n  *(undefined4 *)(dataPointer + 0x50) = 0;\n  *(undefined4 *)(dataPointer + 0x54) = 0;\n  *(undefined4 *)(dataPointer + 0x58) = 0;\n  *(undefined4 *)(dataPointer + 0x5c) = 0;\n  *(undefined4 *)(dataPointer + 0x60) = 0;\n  *(undefined4 *)(dataPointer + 100) = 0;\n  *(undefined4 *)(dataPointer + 0x68) = 0;\n  *(undefined4 *)(dataPointer + 0x6c) = 0;\n  *(undefined4 *)(dataPointer + 0x70) = 0;\n  *(undefined4 *)(dataPointer + 0x74) = 0;\n  *(undefined4 *)(dataPointer + 0x78) = 0;\n  *(bool *)dataPointer = newValue == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_data_080032bc",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "param_3": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "update_values_08003306",
            "code": "\nvoid updateValues_08003306(int baseAddress,uint value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0xd0) {\n    *(undefined4 *)(baseAddress + 0x58) = newValue1;\n    *(undefined4 *)(baseAddress + 0x28) = newValue2;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      *(undefined4 *)(baseAddress + 0x5c) = newValue1;\n      *(undefined4 *)(baseAddress + 0x2c) = newValue2;\n      return;\n    }\n    if (value == 0xf5) {\n      *(undefined4 *)(baseAddress + 0x60) = newValue1;\n      *(undefined4 *)(baseAddress + 0x30) = newValue2;\n    }\n    else if (value == 0xe0) {\n      *(undefined4 *)(baseAddress + 0x4c) = newValue1;\n      *(undefined4 *)(baseAddress + 0x1c) = newValue2;\n      return;\n    }\n    return;\n  }\n  if (value == 0x90) {\n    *(undefined4 *)(baseAddress + 0x50) = newValue1;\n    *(undefined4 *)(baseAddress + 0x20) = newValue2;\n    return;\n  }\n  if (value == 0xc0) {\n    *(undefined4 *)(baseAddress + 0x54) = newValue1;\n    *(undefined4 *)(baseAddress + 0x24) = newValue2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "update_values_08003306",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_data_08003346",
            "code": "\nvoid updateData_08003346(int dataAddress,int valueToCheck,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (valueToCheck == 0x79) {\n    *(undefined4 *)(dataAddress + 0x70) = newValue1;\n    *(undefined4 *)(dataAddress + 0x34) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "dataAddress",
                "param_2": "valueToCheck",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "assign_values_based_on_param_08003350",
            "code": "\nvoid assignValuesBasedOnParam_08003350(int targetAddress,int paramValue,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (paramValue == 0xf9) {\n    *(undefined4 *)(targetAddress + 0x74) = newValue1;\n    *(undefined4 *)(targetAddress + 0x38) = newValue2;\n    return;\n  }\n  if (paramValue != 0xff) {\n    return;\n  }\n  *(undefined4 *)(targetAddress + 0x78) = newValue1;\n  *(undefined4 *)(targetAddress + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "assign_values_based_on_param_08003350",
                "param_1": "targetAddress",
                "param_2": "paramValue",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_data_08003366",
            "code": "\nvoid updateData_08003366(int baseAddress,int valueToCheck,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (valueToCheck == 0x71) {\n    *(undefined4 *)(baseAddress + 0x68) = newValue1;\n    *(undefined4 *)(baseAddress + 0x40) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_data_08003366",
                "param_1": "baseAddress",
                "param_2": "valueToCheck",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "update_params_08003370",
            "code": "\nvoid updateParams_08003370(int baseAddress,undefined4 param2,undefined4 newValue1,undefined4 newValue2)\n\n{\n  *(undefined4 *)(baseAddress + 0x6c) = newValue1;\n  *(undefined4 *)(baseAddress + 0x44) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "update_params_08003370",
                "param_1": "baseAddress",
                "param_2": "param2",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_parameter_value_08003376",
            "code": "\nvoid updateParameterValue_08003376(undefined *paramArray,undefined newValue,uint index)\n\n{\n  bool isOutOfRange;\n  \n  if (index < *(uint *)(paramArray + 8)) {\n    isOutOfRange = false;\n  }\n  else {\n    isOutOfRange = true;\n    if (*(code **)(paramArray + 100) != (code *)0x0) {\n      *paramArray = 1;\n      (**(code **)(paramArray + 100))(*(undefined4 *)(paramArray + 0x3c));\n      if (index < *(uint *)(paramArray + 8)) {\n        isOutOfRange = false;\n      }\n      else {\n        isOutOfRange = true;\n      }\n    }\n  }\n  if (!isOutOfRange) {\n    *(undefined *)(*(int *)(paramArray + 4) + index) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_parameter_value_08003376",
                "param_1": "paramArray",
                "param_2": "newValue",
                "param_3": "index",
                "bVar1": "isOutOfRange"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copyAndShiftBits_080033a8(undefined4 undefinedArg,uint sourceSize,int sourceArray)\n\n{\n  byte currentByte;\n  int destinationIndex;\n  uint sourceIndex;\n  \n  destinationIndex = 0;\n  for (sourceIndex = 0; sourceIndex < sourceSize; sourceIndex = sourceIndex + 2) {\n    currentByte = *(byte *)(sourceArray + sourceIndex);\n    *(byte *)(sourceArray + destinationIndex) = currentByte;\n    *(byte *)(sourceArray + destinationIndex) = *(char *)(sourceArray + sourceIndex + 1) << 7 | currentByte;\n    destinationIndex = destinationIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "undefinedArg",
                "param_2": "sourceSize",
                "param_3": "sourceArray",
                "iVar2": "destinationIndex",
                "uVar3": "sourceIndex",
                "bVar1": "currentByte"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_parameter_080033cc",
            "code": "\nvoid processParameter_080033cc(int paramAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int shiftedBits;\n  char *paramPointer;\n  \n  paramPointer = *(char **)(paramAddress + 4);\n  firstChar = *paramPointer;\n  if (firstChar == 'q') {\n    if (*(int *)(paramAddress + 0x68) != 0) {\n      shiftedBits = copy_and_shift_bits_080033a8(paramAddress,*(int *)(paramAddress + 0x18) + -1,paramPointer + 1,paramPointer,param4);\n      update_parameter_value_08003376(paramAddress,0,shiftedBits + 1);\n      (**(code **)(paramAddress + 0x68))(*(undefined4 *)(paramAddress + 0x40),*(int *)(paramAddress + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(paramAddress + 0x70) != (code *)0x0) {\n      if (*(uint *)(paramAddress + 0x18) < 3) {\n        (**(code **)(paramAddress + 0x70))(*(undefined4 *)(paramAddress + 0x34),0,0);\n        return;\n      }\n      shiftedBits = copy_and_shift_bits_080033a8(paramAddress,*(uint *)(paramAddress + 0x18) - 3,paramPointer + 3,paramPointer,param4);\n      update_parameter_value_08003376(paramAddress,0,shiftedBits + 3);\n      shiftedBits = *(int *)(paramAddress + 4);\n      (**(code **)(paramAddress + 0x70))\n                (*(undefined4 *)(paramAddress + 0x34),*(undefined *)(shiftedBits + 1),*(undefined *)(shiftedBits + 2)\n                 ,shiftedBits + 3);\n      return;\n    }\n  }\n  else if (*(code **)(paramAddress + 0x6c) != (code *)0x0) {\n    (**(code **)(paramAddress + 0x6c))\n              (*(undefined4 *)(paramAddress + 0x44),firstChar,*(int *)(paramAddress + 0x18) + -1,paramPointer + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_parameter_080033cc",
                "param_1": "paramAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "shiftedBits",
                "pcVar3": "paramPointer"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "clear_memory_0800344a",
            "code": "\nvoid clearMemory_0800344a(int memoryAddress)\n\n{\n  uint index;\n  \n  *(undefined4 *)(memoryAddress + 0x10) = 0;\n  *(undefined *)(memoryAddress + 0xc) = 0;\n  *(undefined *)(memoryAddress + 0xd) = 0;\n  for (index = 0; index < *(uint *)(memoryAddress + 8); index = index + 1) {\n    *(undefined *)(*(int *)(memoryAddress + 4) + index) = 0;\n  }\n  *(undefined *)(memoryAddress + 0x14) = 0;\n  *(undefined4 *)(memoryAddress + 0x18) = 0;\n  if (*(code **)(memoryAddress + 0x78) != (code *)0x0) {\n    (**(code **)(memoryAddress + 0x78))(*(undefined4 *)(memoryAddress + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "clear_memory_0800344a",
                "param_1": "memoryAddress",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_parameter_08003474",
            "code": "\nvoid process_parameter_08003474(int param_pointer,uint param_value)\n\n{\n  byte byte_value;\n  \n  if (*(char *)(param_pointer + 0x14) != '\\0') {\n    if (param_value != 0xf7) {\n      update_parameter_value_08003376(param_pointer,param_value,*(undefined4 *)(param_pointer + 0x18));\n      *(int *)(param_pointer + 0x18) = *(int *)(param_pointer + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(param_pointer + 0x14) = 0;\n    process_parameter_08003474_080033cc();\n    return;\n  }\n  if ((*(int *)(param_pointer + 0x10) == 0) || (0x7f < (int)param_value)) {\n    if ((int)param_value < 0xf0) {\n      *(byte *)(param_pointer + 0xd) = (byte)param_value & 0xf;\n      param_value = param_value & 0xf0;\n    }\n    if (param_value == 0xf0) {\n      *(undefined *)(param_pointer + 0x14) = 1;\n      *(undefined4 *)(param_pointer + 0x18) = 0;\n      return;\n    }\n    if (param_value < 0xf1) {\n      if (param_value != 0xc0) {\n        if (param_value < 0xc1) {\n          if (param_value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (param_value == 0xd0) goto LAB_0800359c;\n          if (param_value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(param_pointer + 0x10) = 2;\n        *(char *)(param_pointer + 0xc) = (char)param_value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(param_pointer + 0x10) = 1;\n      *(char *)(param_pointer + 0xc) = (char)param_value;\n      return;\n    }\n    if (param_value != 0xf9) {\n      if (0xf9 < param_value) {\n        if (param_value == 0xff) {\n          clear_memory_0800344a(param_pointer);\n          return;\n        }\n        return;\n      }\n      if (1 < param_value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(param_pointer + 0x74) != (code *)0x0) {\n      (**(code **)(param_pointer + 0x74))(*(undefined4 *)(param_pointer + 0x38));\n    }\n  }\n  else {\n    *(int *)(param_pointer + 0x10) = *(int *)(param_pointer + 0x10) + -1;\n    update_parameter_value_08003376();\n    if ((*(int *)(param_pointer + 0x10) == 0) && (byte_value = *(byte *)(param_pointer + 0xc), byte_value != 0)) {\n      if (byte_value == 0xd0) {\n        if (*(code **)(param_pointer + 0x58) != (code *)0x0) {\n          (**(code **)(param_pointer + 0x58))\n                    (*(undefined4 *)(param_pointer + 0x28),*(undefined *)(param_pointer + 0xd),\n                     **(undefined **)(param_pointer + 4));\n        }\n      }\n      else if (byte_value < 0xd1) {\n        if (byte_value == 0x90) {\n          if (*(code **)(param_pointer + 0x50) != (code *)0x0) {\n            (**(code **)(param_pointer + 0x50))\n                      (*(undefined4 *)(param_pointer + 0x20),*(undefined *)(param_pointer + 0xd),\n                       (uint)(*(byte **)(param_pointer + 4))[1] + (uint)**(byte **)(param_pointer + 4) * 0x80);\n          }\n        }\n        else if ((byte_value == 0xc0) && (*(code **)(param_pointer + 0x54) != (code *)0x0)) {\n          (**(code **)(param_pointer + 0x54))\n                    (*(undefined4 *)(param_pointer + 0x24),*(undefined *)(param_pointer + 0xd),\n                     **(undefined **)(param_pointer + 4));\n        }\n      }\n      else if (byte_value == 0xf4) {\n        if (*(code **)(param_pointer + 0x5c) != (code *)0x0) {\n          (**(code **)(param_pointer + 0x5c))\n                    (*(undefined4 *)(param_pointer + 0x2c),(*(undefined **)(param_pointer + 4))[1],\n                     **(undefined **)(param_pointer + 4));\n        }\n      }\n      else if (byte_value == 0xf5) {\n        if (*(code **)(param_pointer + 0x60) != (code *)0x0) {\n          (**(code **)(param_pointer + 0x60))\n                    (*(undefined4 *)(param_pointer + 0x30),(*(undefined **)(param_pointer + 4))[1],\n                     **(undefined **)(param_pointer + 4));\n        }\n      }\n      else if ((byte_value == 0xe0) && (*(code **)(param_pointer + 0x4c) != (code *)0x0)) {\n        (**(code **)(param_pointer + 0x4c))\n                  (*(undefined4 *)(param_pointer + 0x1c),*(undefined *)(param_pointer + 0xd),\n                   (uint)(*(byte **)(param_pointer + 4))[1] + (uint)**(byte **)(param_pointer + 4) * 0x80);\n      }\n      *(undefined *)(param_pointer + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_parameter_08003474",
                "param_1": "param_pointer",
                "param_2": "param_value",
                "bVar1": "byte_value"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_device_080035b8",
            "code": "\nvoid initializeDevice_080035b8(void)\n\n{\n  int result;\n  uint data;\n  undefined4 local_54 [2];\n  undefined4 param7;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 local_30 [4];\n  undefined4 setting1;\n  undefined4 setting2;\n  undefined4 setting3;\n  undefined4 setting4;\n  undefined4 setting5;\n  \n  flagSettings = 2;\n  setting1 = 1;\n  setting2 = 0x10;\n  setting3 = 2;\n  setting4 = 0;\n  setting5 = 0x380000;\n  result = checkAndUpdateFlags(local_30);\n  if (result != 0) {\n    infiniteLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  param1 = 0xf;\n  param2 = 2;\n  param3 = 0;\n  param4 = 0x400;\n  param5 = 0;\n  result = updateSettings(&param1);\n  if (result != 0) {\n    infiniteLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  param6 = 2;\n  param7 = 0x8000;\n  result = processParameters(local_54);\n  if (result != 0) {\n    infiniteLoop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  data = getData();\n  setLimitAndMode(data / 1000);\n  updateStatus(4);\n  updateValue(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_device_080035b8",
                "local_30[0]": "flagSettings",
                "local_20": "setting1",
                "local_1c": "setting2",
                "local_14": "setting3",
                "local_10": "setting4",
                "local_c": "setting5",
                "iVar1": "result",
                "local_44": "param1",
                "local_40": "param2",
                "local_3c": "param3",
                "local_38": "param4",
                "local_34": "param5",
                "local_54[0]": "param6",
                "local_4c": "param7",
                "uVar2": "data",
                "infinite_loop_080073e8": "infiniteLoop",
                "check_flags_and_update_08005460": "checkAndUpdateFlags",
                "update_settings_080058ac": "updateSettings",
                "process_params_08005aa4": "processParameters",
                "get_data_08005a1c": "getData",
                "set_limit_and_mode_08003fd8": "setLimitAndMode",
                "update_status_08004024": "updateStatus",
                "update_value_08003f30": "updateValue"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_080073ec();\n  execute_functions_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  run_gateway_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_devices_080036a2",
            "code": "\nvoid initialize_devices_080036a2(void)\n\n{\n  initialize_devices_080036a2_080072fa();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_devices_080036a2"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "find_character_080036ac",
            "code": "\nuint find_character_080036ac(int character)\n\n{\n  uint index;\n  \n  if ((uint)(character << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (character != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "find_character_080036ac",
                "param_1": "character",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "set_and_update_value_080036d8",
            "code": "\nundefined4 setAndUpdateValue_080036d8(uint value)\n\n{\n  int result;\n  \n  result = set_limit_and_mode_08003fd8(DAT_20000018 / (1000 / DAT_2000000c));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < value) {\n    return 1;\n  }\n  update_value_08003f30(0xffffffff,value,0);\n  DAT_20000010 = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "set_and_update_value_080036d8",
                "param_1": "value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_device_08003724",
            "code": "\n\n\nundefined4 initializeDevice_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  updateDataRegister(3);\n  setValueAndUpdate(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_device_08003724",
                "update_data_register_08003f0c": "updateDataRegister",
                "set_and_update_value_080036d8": "setValueAndUpdate"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "update_variable_08003748",
            "code": "\nvoid updateVariable_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "update_variable_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_global_value_08003760",
            "code": "\nundefined4 getGlobalValue_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_global_value_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "process_input_0800376c",
            "code": "\nundefined4 processInput_0800376c(uint **inputPtr,uint size)\n\n{\n  int globalValue1;\n  uint calculatedValue;\n  int localVariable;\n  undefined4 result;\n  uint *inputValues;\n  uint modifiedValue;\n  uint counter;\n  \n  counter = 0;\n  globalValue1 = get_global_value_08003760();\n  modifiedValue = DAT_20000018;\n  inputValues = *inputPtr;\n  if ((inputValues[2] & 0x100) == 0) {\n    if (((inputValues[1] & 0x100) == 0) && ((inputValues[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**inputPtr & 2) != 0) goto LAB_0800387e;\n      } while ((size == 0xffffffff) ||\n              ((size != 0 && (localVariable = get_global_value_08003760(), (uint)(localVariable - globalValue1) <= size))));\n      inputPtr[10] = (uint *)((uint)inputPtr[10] | 4);\n      *(undefined *)(inputPtr + 9) = 0;\n      result = 3;\n    }\n    else {\n      calculatedValue = calculate_value_08005bb8(2);\n      inputValues = *inputPtr;\n      if (((inputValues[4] & 0x24924924) == 0) && ((inputValues[3] & 0x924924) == 0)) {\n        if ((inputValues[4] & 0x12492492) == 0) {\n          if ((inputValues[3] & 0x492492) == 0) {\n            localVariable = 0x14;\n          }\n          else {\n            localVariable = 0x29;\n          }\n        }\n        else {\n          localVariable = 0x29;\n        }\n      }\n      else if (((inputValues[4] & 0x12492492) == 0) && ((inputValues[3] & 0x492492) == 0)) {\n        localVariable = 0x54;\n      }\n      else if ((inputValues[4] & 0x249249) == 0) {\n        if ((inputValues[3] & 0x249249) == 0) {\n          localVariable = 0x54;\n        }\n        else {\n          localVariable = 0xfc;\n        }\n      }\n      else {\n        localVariable = 0xfc;\n      }\n      modifiedValue = (modifiedValue / calculatedValue) * localVariable;\n      for (; counter <= modifiedValue && modifiedValue - counter != 0; counter = counter + 1) {\n        if ((size != 0xffffffff) &&\n           ((size == 0 || (localVariable = get_global_value_08003760(), size < (uint)(localVariable - globalValue1))))) {\n          inputPtr[10] = (uint *)((uint)inputPtr[10] | 4);\n          *(undefined *)(inputPtr + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **inputPtr = 0xffffffed;\n      inputPtr[10] = (uint *)((uint)inputPtr[10] | 0x200);\n      if (((*inputPtr)[2] & 0xe0000) == 0xe0000) {\n        if (inputPtr[3] == (uint *)0x0) {\n          inputPtr[10] = (uint *)((uint)inputPtr[10] & 0xfffffeff);\n          if (((uint)inputPtr[10] & 0x1000) == 0) {\n            inputPtr[10] = (uint *)((uint)inputPtr[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    inputPtr[10] = (uint *)((uint)inputPtr[10] | 0x20);\n    *(undefined *)(inputPtr + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "process_input_0800376c",
                "param_1": "inputPtr",
                "param_2": "size",
                "iVar1": "globalValue1",
                "uVar2": "calculatedValue",
                "iVar3": "localVariable",
                "uVar4": "result",
                "puVar5": "inputValues",
                "uVar6": "modifiedValue",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_value_080038dc",
            "code": "\nundefined4 getOffsetValue_080038dc(int *offsetPtr)\n\n{\n  return *(undefined4 *)(*offsetPtr + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "offsetPtr"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_parameters_080038e4",
            "code": "\nundefined4 update_parameters_080038e4(int *parameters,uint *values)\n\n{\n  undefined4 result;\n  uint index;\n  int count;\n  \n  if (*(char *)(parameters + 9) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(parameters + 9) = 1;\n    index = values[1];\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*parameters + 0x34) =\n           *values << (index & 0xff) | *(uint *)(*parameters + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*parameters + 0x30) =\n           *values << (index & 0xff) | *(uint *)(*parameters + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*parameters + 0x2c) =\n           *values << (index & 0xff) | *(uint *)(*parameters + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *values;\n    if (index < 10) {\n      *(uint *)(*parameters + 0x10) =\n           values[2] << (index * 3 & 0xff) |\n           *(uint *)(*parameters + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*parameters + 0xc) =\n           values[2] << (index & 0xff) | *(uint *)(*parameters + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*parameters == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*values == 0x10) {\n            for (count = (DAT_20000018 / 1000000) * 10; count != 0; count = count + -1) {\n            }\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        parameters[10] = parameters[10] | 0x20;\n        result = 1;\n      }\n    }\n    else {\n      result = 0;\n    }\n    *(undefined *)(parameters + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_parameters_080038e4",
                "param_1": "parameters",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "index",
                "local_c": "count"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_offset_value_08003a1c",
            "code": "\nundefined4 getOffsetValue_08003a1c(int baseAddress)\n\n{\n  return *(undefined4 *)(baseAddress + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_offset_value_08003a1c",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "check_and_update_flag_08003a20",
            "code": "\nundefined4 check_and_update_flag_08003a20(int *pointer_to_data,undefined4 value)\n\n{\n  int global_value_1;\n  undefined4 return_value;\n  int local_variable;\n  uint counter;\n  \n  local_variable = *pointer_to_data;\n  if ((*(uint *)(local_variable + 8) & 1) == 0) {\n    *(uint *)(local_variable + 8) = *(uint *)(local_variable + 8) | 1;\n    for (counter = DAT_20000018 / 1000000; counter != 0; counter = counter - 1) {\n    }\n    local_variable = get_global_value(pointer_to_data,value,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*pointer_to_data + 8) & 1) != 0) {\n        return 0;\n      }\n      global_value_1 = get_global_value();\n    } while ((uint)(global_value_1 - local_variable) < 3);\n    pointer_to_data[10] = pointer_to_data[10] | 0x10;\n    pointer_to_data[0xb] = pointer_to_data[0xb] | 1;\n    *(undefined *)(pointer_to_data + 9) = 0;\n    return_value = 1;\n  }\n  else {\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "check_and_update_flag_08003a20",
                "param_1": "pointer_to_data",
                "param_2": "value",
                "iVar1": "global_value_1",
                "iVar3": "local_variable",
                "uVar2": "return_value",
                "local_14": "counter",
                "get_global_value_08003760": "get_global_value"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "update_flag_08003aa0",
            "code": "\n\n\nint updateFlag_08003aa0(int *array)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(array + 9) != '\\x01') {\n    *(undefined *)(array + 9) = 1;\n    result = checkAndUpdateFlag();\n    if (result == 0) {\n      array[10] = array[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*array;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        array[10] = array[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          array[10] = array[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        array[10] = array[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          array[10] = array[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((array[10] & 0x1000U) == 0) {\n        array[0xb] = 0;\n      }\n      else {\n        array[0xb] = array[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(array + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *array;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(array + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "update_flag_08003aa0",
                "param_1": "array",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "value",
                "check_and_update_flag_08003a20": "checkAndUpdateFlag",
                "param_1[10]": "array[10]"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_and_update_values_08003b8c",
            "code": "\nundefined4 checkAndUpdateValues_08003b8c(int *pointer)\n\n{\n  int globalValue1;\n  int globalValue2;\n  \n  globalValue2 = *pointer;\n  if ((*(uint *)(globalValue2 + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(globalValue2 + 8) = *(uint *)(globalValue2 + 8) & 0xfffffffe;\n  globalValue2 = get_global_value_08003760();\n  do {\n    if ((*(uint *)(*pointer + 8) & 1) == 0) {\n      return 0;\n    }\n    globalValue1 = get_global_value_08003760();\n  } while ((uint)(globalValue1 - globalValue2) < 3);\n  pointer[10] = pointer[10] | 0x10;\n  pointer[0xb] = pointer[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_and_update_values_08003b8c",
                "param_1": "pointer",
                "iVar1": "globalValue1",
                "iVar2": "globalValue2"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "update_and_check_values_08003bd8",
            "code": "\nundefined4 update_and_check_values_08003bd8(int *parameters)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  \n  if (parameters == (int *)0x0) {\n    return 1;\n  }\n  if (parameters[10] == 0) {\n    parameters[0xb] = 0;\n    *(undefined *)(parameters + 9) = 0;\n    update_memory_address_08006ca8();\n  }\n  result = check_and_update_values_08003b8c(parameters);\n  if (((parameters[10] & 0x10U) == 0) && (result == 0)) {\n    parameters[10] = parameters[10] & 0xffffeefdU | 2;\n    value1 = parameters[1] | parameters[7] | parameters[3] << 1;\n    if (parameters[2] == 0x100) {\n      value2 = 0x100;\n    }\n    else {\n      value2 = 0;\n      if (parameters[2] == 1) {\n        value2 = 0x100;\n      }\n    }\n    if (parameters[5] == 1) {\n      if (parameters[3] == 0) {\n        value2 = value2 | (parameters[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        parameters[10] = parameters[10] | 0x20;\n        parameters[0xb] = parameters[0xb] | 1;\n      }\n    }\n    *(uint *)(*parameters + 4) = value2 | *(uint *)(*parameters + 4) & 0xffff16ff;\n    *(uint *)(*parameters + 8) = *(uint *)(*parameters + 8) & 0xffe1f7fd | value1;\n    if ((parameters[2] == 0x100) || (parameters[2] == 1)) {\n      value2 = (parameters[4] + -1) * 0x100000;\n    }\n    else {\n      value2 = 0;\n    }\n    *(uint *)(*parameters + 0x2c) = value2 | *(uint *)(*parameters + 0x2c) & 0xff0fffff;\n    if (value1 != (*(uint *)(*parameters + 8) & 0xff1f0efe)) {\n      parameters[10] = parameters[10] & 0xffffffedU | 0x10;\n      parameters[0xb] = parameters[0xb] | 1;\n      return 1;\n    }\n    parameters[0xb] = 0;\n    parameters[10] = parameters[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  parameters[10] = parameters[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "update_and_check_values_08003bd8",
                "param_1": "parameters",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "update_settings_08003ce8",
            "code": "\nint updateSettings_08003ce8(int *settings)\n\n{\n  int result;\n  \n  if (settings == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    settings[10] = settings[10] | 2;\n    result = check_and_update_values_08003b8c();\n    if (result == 0) {\n      *(undefined4 *)*settings = 0xffffffe0;\n      *(uint *)(*settings + 4) = *(uint *)(*settings + 4) & 0xff3f0000;\n      *(uint *)(*settings + 8) = *(uint *)(*settings + 8) & 0xff0106f0;\n      *(uint *)(*settings + 0xc) = *(uint *)(*settings + 0xc) & 0xff000000;\n      *(uint *)(*settings + 0x10) = *(uint *)(*settings + 0x10) & 0xc0000000;\n      *(uint *)(*settings + 0x14) = *(uint *)(*settings + 0x14) & 0xfffff000;\n      *(uint *)(*settings + 0x18) = *(uint *)(*settings + 0x18) & 0xfffff000;\n      *(uint *)(*settings + 0x1c) = *(uint *)(*settings + 0x1c) & 0xfffff000;\n      *(uint *)(*settings + 0x20) = *(uint *)(*settings + 0x20) & 0xfffff000;\n      *(uint *)(*settings + 0x24) = *(uint *)(*settings + 0x24) & 0xfffff000;\n      *(uint *)(*settings + 0x28) = *(uint *)(*settings + 0x28) & 0xfffff000;\n      *(uint *)(*settings + 0x2c) = *(uint *)(*settings + 0x2c) & 0xff000000;\n      *(uint *)(*settings + 0x2c) = *(uint *)(*settings + 0x2c) & 0xff000000;\n      *(uint *)(*settings + 0x30) = *(uint *)(*settings + 0x30) & 0xc0000000;\n      *(uint *)(*settings + 0x34) = *(uint *)(*settings + 0x34) & 0xc0000000;\n      *(uint *)(*settings + 0x38) = *(uint *)(*settings + 0x38) & 0xffc00000;\n      *(uint *)(*settings + 0x38) = *(uint *)(*settings + 0x38) & 0xffc00000;\n      update_settings_08006d24(settings);\n      settings[0xb] = 0;\n      settings[10] = 0;\n    }\n    *(undefined *)(settings + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "update_settings_08003ce8",
                "param_1": "settings",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "update_value_status_08003de4",
            "code": "\nint updateValueStatus_08003de4(int pointer)\n\n{\n  int result;\n  \n  if (*(char *)(pointer + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(pointer + 0x24) = 1;\n  result = validateAndUpdateValues();\n  if (result == 0) {\n    *(uint *)(pointer + 0x28) = *(uint *)(pointer + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(pointer + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "update_value_status_08003de4",
                "param_1": "pointer",
                "iVar1": "result",
                "check_and_update_values_08003b8c": "validateAndUpdateValues"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "process_data_08003e20",
            "code": "\nint process_data_08003e20(int *data)\n\n{\n  uint value1;\n  int result;\n  uint value2;\n  int global_value1;\n  int global_value2;\n  int iterations;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = check_and_update_values_08003b8c();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    value1 = DAT_20000018;\n    value2 = calculate_value_08005bb8(2);\n    for (iterations = value1 / value2 << 1; iterations != 0; iterations = iterations + -1) {\n    }\n    check_and_update_flag_08003a20(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    global_value1 = get_global_value_08003760();\n    while (global_value2 = *data, (*(uint *)(global_value2 + 8) & 8) != 0) {\n      global_value2 = get_global_value_08003760();\n      if (10 < (uint)(global_value2 - global_value1)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(global_value2 + 8) = *(uint *)(global_value2 + 8) | 4;\n    global_value1 = get_global_value_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      global_value2 = get_global_value_08003760();\n      if (10 < (uint)(global_value2 - global_value1)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "process_data_08003e20",
                "param_1": "data",
                "uVar1": "value1",
                "iVar2": "result",
                "uVar3": "value2",
                "iVar4": "global_value1",
                "iVar5": "global_value2",
                "local_14": "iterations"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_data_register_08003f0c",
            "code": "\n\n\nvoid updateDataRegister_08003f0c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_data_register_08003f0c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_value_08003f30",
            "code": "\n\n\nvoid updateValue_08003f30(uint input,uint mask,uint value)\n\n{\n  uint result;\n  uint maxRemainingBits;\n  \n  result = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  maxRemainingBits = 7 - result;\n  if (3 < maxRemainingBits) {\n    maxRemainingBits = 4;\n  }\n  if (result + 4 < 7) {\n    result = 0;\n  }\n  else {\n    result = result - 3;\n  }\n  result = (mask & (1 << (maxRemainingBits & 0xff)) - 1U) << (result & 0xff) |\n          (1 << (result & 0xff)) - 1U & value;\n  if ((int)input < 0) {\n    *(char *)((input & 0xf) + 0xe000ed14) = (char)(result << 4);\n  }\n  else {\n    *(char *)(input + 0xe000e400) = (char)(result << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_value_08003f30",
                "param_1": "input",
                "param_2": "mask",
                "param_3": "value",
                "uVar1": "result",
                "uVar2": "maxRemainingBits"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_in_array_08003f94",
            "code": "\nvoid setBitInArray_08003f94(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_in_array_08003f94",
                "param_1": "index"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid setBitInMemory_08003fb0(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_limit_and_mode_08003fd8",
            "code": "\n\n\nundefined4 set_limit_and_mode_08003fd8(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_limit_and_mode_08003fd8",
                "param_1": "value"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_at_position_08004004",
            "code": "\nvoid setBitAtPosition_08004004(uint position)\n\n{\n  if (-1 < (int)position) {\n    *(int *)(((position >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (position & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_at_position_08004004",
                "param_1": "position"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_status_08004024",
            "code": "\n\n\nvoid updateStatus_08004024(int status)\n\n{\n  if (status != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_status_08004024",
                "param_1": "status"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_08004046",
            "code": "\nvoid initialize_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "initialize_data_08004050",
            "code": "\n\n\nundefined4 initializeData_08004050(uint **data)\n\n{\n  uint *currentValue;\n  \n  if (*(char *)((int)data + 0x21) != '\\x02') {\n    data[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **data = **data & 0xfffffff1;\n  **data = **data & 0xfffffffe;\n  currentValue = *data;\n  if (currentValue == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (currentValue == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (currentValue == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (currentValue == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (currentValue == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (currentValue == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)data + 0x21) = 1;\n  *(undefined *)(data + 8) = 0;\n  if (data[0xd] != (uint *)0x0) {\n    (*(code *)data[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "initialize_data_08004050",
                "param_1": "data",
                "puVar1": "currentValue"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_flags_080040e8",
            "code": "\n\n\nvoid updateFlags_080040e8(uint *flagArray,uint *controlArray)\n\n{\n  uint *flagPtr;\n  uint bitMask;\n  uint bitCheck;\n  uint counter;\n  uint controlValue;\n  uint updateValue;\n  int index1;\n  int index2;\n  \n  updateValue = 0;\n  counter = 0;\n  do {\n    if (0xf < counter) {\n      return;\n    }\n    bitMask = 1 << (counter & 0xff);\n    bitCheck = *controlArray & bitMask;\n    if (bitMask == bitCheck) {\n      controlValue = controlArray[1];\n      if (controlValue == 0x12) {\n        updateValue = controlArray[3] + 0xc;\n      }\n      else if (controlValue < 0x13) {\n        if (controlValue == 2) {\n          updateValue = controlArray[3] + 8;\n        }\n        else if (controlValue < 3) {\n          if (controlValue == 0) goto LAB_0800423a;\n          if (controlValue == 1) {\n            updateValue = controlArray[3];\n          }\n        }\n        else if (controlValue == 3) {\n          updateValue = 0;\n        }\n        else if (controlValue == 0x11) {\n          updateValue = controlArray[3] + 4;\n        }\n      }\n      else if (controlValue == 0x10210000) {\nLAB_0800423a:\n        if (controlArray[2] == 0) {\n          updateValue = 4;\n        }\n        else if (controlArray[2] == 1) {\n          flagArray[4] = bitMask;\n          updateValue = 8;\n        }\n        else {\n          flagArray[5] = bitMask;\n          updateValue = 8;\n        }\n      }\n      else if (controlValue < 0x10210001) {\n        if ((controlValue == 0x10110000) || (controlValue == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((controlValue == 0x10310000) || ((controlValue == 0x10320000 || (controlValue == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = counter;\n      flagPtr = flagArray;\n      if (0xff < bitCheck) {\n        bitMask = counter - 8;\n        flagPtr = flagArray + 1;\n      }\n      *flagPtr = *flagPtr & ~(0xf << (bitMask << 2 & 0xff)) | updateValue << (bitMask << 2 & 0xff);\n      if ((controlArray[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        index1 = (counter & 3) << 2;\n        if (flagArray == (uint *)0x40010800) {\n          index2 = 0;\n        }\n        else if (flagArray == (uint *)0x40010c00) {\n          index2 = 1;\n        }\n        else if (flagArray == (uint *)0x40011000) {\n          index2 = 2;\n        }\n        else if (flagArray == (uint *)0x40011400) {\n          index2 = 3;\n        }\n        else {\n          index2 = 4;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000) & ~(0xf << index1) | index2 << index1;\n        if ((controlArray[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitCheck;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitCheck;\n        }\n        if ((controlArray[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitCheck;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitCheck;\n        }\n        if ((controlArray[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitCheck;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitCheck;\n        }\n        if ((controlArray[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitCheck;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_flags_080040e8",
                "param_1": "flagArray",
                "param_2": "controlArray",
                "puVar1": "flagPtr",
                "uVar2": "bitMask",
                "uVar3": "bitCheck",
                "uVar4": "counter",
                "uVar5": "controlValue",
                "uVar6": "updateValue",
                "iVar7": "index1",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int data_address,uint bitmask)\n\n{\n  if ((bitmask & *(uint *)(data_address + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "data_address",
                "param_2": "bitmask"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_param_value_080042e2",
            "code": "\nvoid set_param_value_080042e2(int target_address,int new_value,int shift_required)\n\n{\n  if (shift_required == 0) {\n    *(int *)(target_address + 0x10) = new_value << 0x10;\n    return;\n  }\n  *(int *)(target_address + 0x10) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "target_address",
                "param_2": "new_value",
                "param_3": "shift_required"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_and_process_data_080042f0",
            "code": "\n\n\nvoid update_and_process_data_080042f0(uint input_value)\n\n{\n  if ((_DAT_40010414 & input_value) != 0) {\n    _DAT_40010414 = input_value;\n    validate_and_execute_data_processing();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_and_process_data_080042f0",
                "param_1": "input_value",
                "check_and_process_data_08009094": "validate_and_execute_data_processing"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_data_based_on_conditions_0800430c",
            "code": "\nundefined4 updateDataBasedOnConditions_0800430c(int *inputData)\n\n{\n  if (*(char *)((int)inputData + 0x3e) == '@') {\n    if (valueAtIndex0x14 == 0) {\n      *(uint *)(*inputData + 0x10) = valueAtIndex0x11 & 0xfe;\n    }\n    else {\n      *(uint *)(*inputData + 0x10) = valueAtIndex0x11 & 0xffU | 1;\n    }\n  }\n  else if (valueAtIndex4 == 0x4000) {\n    if (*(char *)((int)inputData + 0x3d) == '!') {\n      *(uint *)(*inputData + 0x10) = valueAtIndex0x11 & 0xfe;\n    }\n    else {\n      *(uint *)(*inputData + 0x10) = valueAtIndex0x11 & 0xffU | 1;\n    }\n  }\n  else if (valueAtIndex0x14 == 0) {\n    *(uint *)(*inputData + 0x10) = (uint)(valueAtIndex0x11 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (valueAtIndex0x14 == 1) {\n    *(uint *)(*inputData + 0x10) = (uint)(valueAtIndex0x11 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_data_based_on_conditions_0800430c",
                "param_1": "inputData",
                "param_1[0x14]": "valueAtIndex0x14",
                "param_1[0x11]": "valueAtIndex0x11",
                "param_1[4]": "valueAtIndex4"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "store_byte_from_param_at_index_08004396",
            "code": "\nundefined4 storeByteFromParamAtIndex_08004396(int *paramArray)\n\n{\n  *(uint *)(*paramArray + 0x10) = arrayElementAtIndex & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "store_byte_from_param_at_index_08004396",
                "param_1": "paramArray",
                "param_1[0x11]": "arrayElementAtIndex"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "check_and_set_permissions_080043a2",
            "code": "\nundefined4 check_and_set_permissions_080043a2(uint **parameters)\n\n{\n  uint *pointer1;\n  \n  pointer1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((pointer2 != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((pointer2 == (uint *)0x0) && (pointer3 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      pointer2 = (uint *)((int)pointer2 + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (pointer1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          pointer1 = *parameters;\n          if ((pointer1_2 & 0x800) == 0) {\n            *pointer1 = *pointer1 | 0x200;\n          }\n          else {\n            *pointer1 = *pointer1 & 0xfffffbff;\n          }\n        }\n        else if (((pointer1 == (uint *)0x4) || (pointer1 == (uint *)0x8)) ||\n                (pointer4 == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        pointer1 = *parameters;\n        if ((pointer1_2 & 0x800) != 0) {\n          pointer1_2 = pointer1_2 | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        pointer1 = *parameters;\n        if ((pointer1_2 & 0x800) != 0) {\n          pointer1_2 = pointer1_2 | 0x1000;\n        }\n      }\n      pointer2 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "check_and_set_permissions_080043a2",
                "param_1": "parameters",
                "puVar1": "pointer1",
                "param_1[0x14]": "pointer2",
                "param_1[4]": "pointer3",
                "puVar1[1]": "pointer1_2",
                "param_1[0xc]": "pointer4"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_value_0800457c",
            "code": "\nundefined4 updateValue_0800457c(int *input)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)input + 0x2a) != 0) {\n    bytePointer = (byte *)input[9];\n    input[9] = (int)(bytePointer + 1);\n    *(uint *)(*input + 0x10) = (uint)*bytePointer;\n    *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_value_0800457c",
                "param_1": "input",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_short_value_0800459c",
            "code": "\nundefined4 updateShortValue_0800459c(int *array)\n\n{\n  undefined *ptrToData;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptrToData = (undefined *)array[9];\n    array[9] = (int)(ptrToData + 1);\n    *ptrToData = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_short_value_0800459c",
                "param_1": "array",
                "puVar1": "ptrToData"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "calculate_shift_080045c0",
            "code": "\nundefined4 calculateShift_080045c0(uint **parameters)\n\n{\n  bool isSmallValue;\n  uint shiftedData;\n  uint *pointer;\n  uint shiftedDataDivided;\n  \n  if (parameters == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)parameters + 0x3d) == '\\0') {\n    *(undefined *)(parameters + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x24;\n  **parameters = **parameters & 0xfffffffe;\n  shiftedData = getShiftedData();\n  if (parameters[1] < (uint *)0x186a1) {\n    if (shiftedData < 2000000) {\n      isSmallValue = true;\n    }\n    else {\n      isSmallValue = false;\n    }\n  }\n  else {\n    isSmallValue = shiftedData < 4000000;\n  }\n  if (isSmallValue) {\n    return 1;\n  }\n  shiftedDataDivided = shiftedData / 1000000;\n  (*parameters)[1] = shiftedDataDivided;\n  if ((uint *)0x186a0 < parameters[1]) {\n    shiftedDataDivided = (shiftedDataDivided * 300) / 1000;\n  }\n  (*parameters)[8] = shiftedDataDivided + 1;\n  pointer = parameters[1];\n  if (pointer < (uint *)0x186a1) {\n    shiftedData = (shiftedData - 1) / (uint)((int)pointer << 1) + 1 & 0xfff;\n    if (shiftedData < 4) {\n      shiftedData = 4;\n    }\n  }\n  else {\n    if (parameters[2] == (uint *)0x0) {\n      shiftedDataDivided = (shiftedData - 1) / (uint)((int)pointer * 3);\n    }\n    else {\n      shiftedDataDivided = (shiftedData - 1) / (uint)((int)pointer * 0x19);\n    }\n    if ((shiftedDataDivided + 1 & 0xfff) == 0) {\n      shiftedData = 1;\n    }\n    else if (parameters[2] == (uint *)0x0) {\n      shiftedData = (shiftedData - 1) / (uint)((int)pointer * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      shiftedData = (shiftedData - 1) / (uint)((int)pointer * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*parameters)[7] = shiftedData;\n  **parameters = (uint)parameters[7] | (uint)parameters[8];\n  (*parameters)[2] = (uint)parameters[4] | (uint)parameters[3];\n  (*parameters)[3] = (uint)parameters[5] | (uint)parameters[6];\n  **parameters = **parameters | 1;\n  parameters[0x10] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3d) = 0x20;\n  parameters[0xc] = (uint *)0x0;\n  *(undefined *)((int)parameters + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "calculate_shift_080045c0",
                "param_1": "parameters",
                "bVar1": "isSmallValue",
                "uVar2": "shiftedData",
                "puVar3": "pointer",
                "uVar4": "shiftedDataDivided",
                "get_shifted_data_08005a28": "getShiftedData"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "process_input_08004728",
            "code": "\nundefined4 processInput_08004728(uint **inputData,uint *param1,uint *param2,undefined2 param3)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)inputData + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        inputData[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputData + 0x3d) = 0x20;\n        *(undefined *)(inputData + 0xf) = 0;\n        return 3;\n      }\n      ptr = *inputData;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(inputData + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputData + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **inputData = **inputData & 0xfffff7ff;\n      *(undefined *)((int)inputData + 0x3d) = 0x21;\n      *(undefined *)((int)inputData + 0x3e) = 0x10;\n      result = 0;\n      inputData[0x10] = (uint *)0x0;\n      inputData[9] = param2;\n      *(undefined2 *)((int)inputData + 0x2a) = param3;\n      inputData[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(inputData + 10) = *(undefined2 *)((int)inputData + 0x2a);\n      inputData[0x11] = param1;\n      **inputData = **inputData | 0x100;\n      *(undefined *)(inputData + 0xf) = 0;\n      (*inputData)[1] = (*inputData)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004728": "process_input_08004728",
                "param_1": "inputData",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "process_data_080047f4",
            "code": "\nundefined4 processData_080047f4(uint **dataPtr,uint *paramPtr1,uint *paramPtr2,undefined2 paramVal)\n\n{\n  undefined4 result;\n  uint *dataValuePtr;\n  int counter;\n  \n  if (*(char *)((int)dataPtr + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        dataPtr[0xc] = (uint *)0x0;\n        *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n        *(undefined *)(dataPtr + 0xf) = 0;\n        return 3;\n      }\n      dataValuePtr = *dataPtr;\n      counter = counter + -1;\n    } while ((dataValuePtr[6] & 2) != 0);\n    if (*(char *)(dataPtr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xf) = 1;\n      if ((*dataValuePtr & 1) == 0) {\n        *dataValuePtr = *dataValuePtr | 1;\n      }\n      **dataPtr = **dataPtr & 0xfffff7ff;\n      *(undefined *)((int)dataPtr + 0x3d) = 0x22;\n      *(undefined *)((int)dataPtr + 0x3e) = 0x10;\n      result = 0;\n      dataPtr[0x10] = (uint *)0x0;\n      dataPtr[9] = paramPtr2;\n      *(undefined2 *)((int)dataPtr + 0x2a) = paramVal;\n      dataPtr[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(dataPtr + 10) = *(undefined2 *)((int)dataPtr + 0x2a);\n      dataPtr[0x11] = paramPtr1;\n      **dataPtr = **dataPtr | 0x400;\n      **dataPtr = **dataPtr | 0x100;\n      *(undefined *)(dataPtr + 0xf) = 0;\n      (*dataPtr)[1] = (*dataPtr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "dataPtr",
                "param_2": "paramPtr1",
                "param_3": "paramPtr2",
                "param_4": "paramVal",
                "uVar1": "result",
                "puVar2": "dataValuePtr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "validate_and_initialize_data_080048c8",
            "code": "\nundefined4 validate_and_initialize_data_080048c8(uint **data_ptr,uint *input_data,int input_length,uint *output_data)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)data_ptr + 0x3d) == left_parenthesis) {\n    if (input_data == (uint *)0x0) {\n      result = 1;\n    }\n    else if (input_length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xf) = 1;\n      ptr = *data_ptr;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data_ptr = **data_ptr & 0xfffff7ff;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x29;\n      *(undefined *)((int)data_ptr + 0x3e) = 0x20;\n      result = 0;\n      data_ptr[0x10] = (uint *)0x0;\n      data_ptr[9] = input_data;\n      *(short *)((int)data_ptr + 0x2a) = short_input_length;\n      data_ptr[0xb] = output_data;\n      *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n      *(undefined *)(data_ptr + 0xf) = 0;\n      (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "validate_and_initialize_data_080048c8",
                "param_1": "data_ptr",
                "param_2": "input_data",
                "param_3": "input_length",
                "param_4": "output_data",
                "uVar1": "result",
                "puVar2": "ptr",
                "'('": "left_parenthesis",
                "(short)param_3": "short_input_length"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "check_param_validity_08004954",
            "code": "\nundefined4 checkParamValidity_08004954(uint **paramList,uint *secondParam,int count,uint *fourthParam)\n\n{\n  undefined4 result;\n  uint *ptrVar;\n  \n  if (*(char *)((int)paramList + 0x3d) == '(') {\n    if (secondParam == (uint *)0x0) {\n      result = 1;\n    }\n    else if (count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(paramList + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(paramList + 0xf) = 1;\n      ptrVar = *paramList;\n      if ((*ptrVar & 1) == 0) {\n        *ptrVar = *ptrVar | 1;\n      }\n      **paramList = **paramList & 0xfffff7ff;\n      *(undefined *)((int)paramList + 0x3d) = 0x2a;\n      *(undefined *)((int)paramList + 0x3e) = 0x20;\n      result = 0;\n      param1_0x10 = (uint *)0x0;\n      param1_9 = secondParam;\n      *(short *)((int)paramList + 0x2a) = (short)count;\n      param1_0xb = fourthParam;\n      *(undefined2 *)(paramList + 10) = *(undefined2 *)((int)paramList + 0x2a);\n      *(undefined *)(paramList + 0xf) = 0;\n      (*paramList)[1] = (*paramList)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "check_param_validity_08004954",
                "param_1": "paramList",
                "param_2": "secondParam",
                "param_3": "count",
                "param_4": "fourthParam",
                "uVar1": "result",
                "puVar2": "ptrVar",
                "param_1[0x10]": "param1_0x10",
                "param_1[9]": "param1_9",
                "param_1[0xb]": "param1_0xb"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_memory_080049e0",
            "code": "\nundefined4 initializeMemory_080049e0(uint **memoryPointer)\n\n{\n  uint *memoryValuePointer;\n  \n  if (*(char *)((int)memoryPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)memoryPointer + 0x3d) = 0x28;\n  memoryValuePointer = *memoryPointer;\n  if ((*memoryValuePointer & 1) == 0) {\n    *memoryValuePointer = *memoryValuePointer | 1;\n  }\n  **memoryPointer = **memoryPointer | 0x400;\n  (*memoryPointer)[1] = (*memoryPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_memory_080049e0",
                "param_1": "memoryPointer",
                "puVar1": "memoryValuePointer"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "process_data_08004a24",
            "code": "\nundefined4 processData_08004a24(int *data)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "process_data_08004a24",
                "param_1": "data",
                "cVar1": "charValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "update_value_08004a76",
            "code": "\nundefined4 updateValue_08004a76(int *array)\n\n{\n  char charValue;\n  undefined *pointer;\n  \n  charValue = *(char *)((int)array + 0x3d);\n  if (*(short *)((int)array + 0x2a) != 0) {\n    pointer = (undefined *)array[9];\n    array[9] = (int)(pointer + 1);\n    *pointer = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n    if ((*(short *)((int)array + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xfffffbff;\n      status = 0x22;\n      *(undefined *)((int)array + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "update_value_08004a76",
                "param_1": "array",
                "cVar1": "charValue",
                "puVar2": "pointer",
                "param_1[0xc]": "status"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_and_return_08004ac2",
            "code": "\nundefined4 process_and_return_08004ac2(int *data_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 data_value;\n  uint data_flag;\n  \n  data_flag = *(uint *)(*data_ptr + 0x18);\n  if ((data_flag & 0x80) == 0) {\n    data_value = *(undefined2 *)(data_ptr + 3);\n  }\n  else {\n    data_value = *(undefined2 *)(data_ptr + 6);\n  }\n  process_data_08007fa0(data_ptr,(*(uint *)(*data_ptr + 0x18) & 4) == 0,data_value,data_flag,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_and_return_08004ac2",
                "param_1": "data_ptr",
                "uVar1": "data_value",
                "uVar2": "data_flag"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "set_config_and_execute_08004aec",
            "code": "\nundefined4 setConfigAndExecute_08004aec(uint **config)\n\n{\n  if (((config[11] == (uint *)0x4) || (config[11] == (uint *)0x8)) &&\n     (*(char *)((int)config + 0x3d) == '(')) {\n    config[11] = (uint *)0xffff0000;\n    (*config)[1] = (*config)[1] & 0xfffff8ff;\n    (*config)[5] = 0xfffffbff;\n    **config = **config & 0xfffffbff;\n    config[12] = (uint *)0x0;\n    *(undefined *)((int)config + 0x3d) = 0x20;\n    *(undefined *)((int)config + 0x3e) = 0;\n    initializeAndExecute();\n  }\n  else if (*(char *)((int)config + 0x3d) == '!') {\n    config[11] = (uint *)0xffff0000;\n    config[12] = (uint *)0x21;\n    *(undefined *)((int)config + 0x3d) = 0x20;\n    *(undefined *)((int)config + 0x3e) = 0;\n    (*config)[1] = (*config)[1] & 0xfffff8ff;\n    (*config)[5] = 0xfffffbff;\n    **config = **config & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*config)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "set_config_and_execute_08004aec",
                "param_1": "config",
                "param_1[0xb]": "config[11]",
                "param_1[0xc]": "config[12]",
                "initialize_and_execute_08007ff0": "initializeAndExecute"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_parameter_08004b82",
            "code": "\nundefined4 processParameter_08004b82(uint **parameters)\n\n{\n  char parameterValue;\n  uint *pointerValue;\n  \n  parameterValue = *(char *)((int)parameters + 0x3d);\n  pointerValue = parameters[0xb];\n  if ((*(short *)(parameters + 10) == 0) && (parameterValue == '!')) {\n    if ((pointerValue == (uint *)0x4) || ((pointerValue == (uint *)0x8 || (pointerValue == (uint *)0xffff0000)))) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n      **parameters = **parameters | 0x200;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      if (*(char *)((int)parameters + 0x3e) == '@') {\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n      parameters[0xc] = (uint *)0x11;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((parameterValue == '!') || ((*(char *)((int)parameters + 0x3e) == '@' && (parameterValue == '\\\"')))) {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)parameters + 0x3e) == '@') {\n      if (parameters[0x14] == (uint *)0x0) {\n        if (parameters[0x13] == (uint *)0x1) {\n          (*parameters)[4] = (uint)parameters[0x12] & 0xff;\n          parameters[0x14] = (uint *)((int)parameters[0x14] + 2);\n        }\n        else {\n          (*parameters)[4] = (uint)((int)parameters[0x12] << 0x10) >> 0x18;\n          parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n        }\n      }\n      else if (parameters[0x14] == (uint *)0x1) {\n        (*parameters)[4] = (uint)parameters[0x12] & 0xff;\n        parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n      }\n      else if (parameters[0x14] == (uint *)0x2) {\n        if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n          **parameters = **parameters | 0x100;\n        }\n        else if (*(char *)((int)parameters + 0x3d) == '!') {\n          pointerValue = parameters[9];\n          parameters[9] = (uint *)((int)pointerValue + 1);\n          (*parameters)[4] = (uint)*(byte *)pointerValue;\n          *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointerValue = parameters[9];\n      parameters[9] = (uint *)((int)pointerValue + 1);\n      (*parameters)[4] = (uint)*(byte *)pointerValue;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_parameter_08004b82",
                "param_1": "parameters",
                "cVar1": "parameterValue",
                "puVar2": "pointerValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_params_08004ccc",
            "code": "\nundefined4 processParams_08004ccc(uint **params)\n\n{\n  uint *dataPtr;\n  \n  dataPtr = params[0xb];\n  if (*(char *)((int)params + 0x3d) == '!') {\n    if (*(short *)((int)params + 0x2a) == 0) {\n      if (((dataPtr == (uint *)0x4) || (dataPtr == (uint *)0x8)) || (dataPtr == (uint *)0xffff0000)) {\n        (*params)[1] = (*params)[1] & 0xfffff8ff;\n        **params = **params | 0x200;\n        params[0xc] = (uint *)0x0;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        if (*(char *)((int)params + 0x3e) == '@') {\n          *(undefined *)((int)params + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)params + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*params)[1] = (*params)[1] & 0xfffff8ff;\n        params[0xc] = (uint *)0x11;\n        *(undefined *)((int)params + 0x3e) = 0;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      dataPtr = params[9];\n      params[9] = (uint *)((int)dataPtr + 1);\n      (*params)[4] = (uint)*(byte *)dataPtr;\n      *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_params_08004ccc",
                "param_1": "params",
                "puVar1": "dataPtr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "update_permissions_08004d6c",
            "code": "\nundefined4 updatePermissions_08004d6c(uint **permissions)\n\n{\n  uint *pointer1;\n  \n  if (*(char *)((int)permissions + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)permissions + 0x2a) < 4) {\n      if (*(ushort *)((int)permissions + 0x2a) - 2 < 2) {\n        if (pointer2 == (uint *)0x2) {\n          **permissions = **permissions | 0x400;\n        }\n        else {\n          **permissions = **permissions & 0xfffffbff;\n          **permissions = **permissions | 0x800;\n        }\n        (*permissions)[1] = (*permissions)[1] & 0xfffffbff;\n      }\n      else {\n        if (pointer2 == (uint *)0x2) {\n          **permissions = **permissions | 0x400;\n        }\n        else {\n          **permissions = **permissions & 0xfffffbff;\n        }\n        (*permissions)[1] = (*permissions)[1] & 0xfffff8ff;\n        pointer1 = pointer3;\n        pointer3 = (uint *)((int)pointer1 + 1);\n        *(char *)pointer1 = (char)(*permissions)[4];\n        *(short *)((int)permissions + 0x2a) = *(short *)((int)permissions + 0x2a) + -1;\n        *(undefined *)((int)permissions + 0x3d) = 0x20;\n        pointer4 = (uint *)0x0;\n        if (*(char *)((int)permissions + 0x3e) == '@') {\n          *(undefined *)((int)permissions + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)permissions + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      pointer1 = pointer3;\n      pointer3 = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*permissions)[4];\n      *(short *)((int)permissions + 0x2a) = *(short *)((int)permissions + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "update_permissions_08004d6c",
                "param_1": "permissions",
                "puVar1": "pointer1",
                "param_1[0xb]": "pointer2",
                "param_1[9]": "pointer3",
                "param_1[0xc]": "pointer4"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_data_08004e3c",
            "code": "\nundefined4 processData_08004e3c(uint **data)\n\n{\n  uint *pointer1;\n  \n  pointer1 = data[0xb];\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((pointer1 == (uint *)0x4) || (pointer1 == (uint *)0x8)) || (pointer1 == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    pointer1 = data[9];\n    data[9] = (uint *)((int)pointer1 + 1);\n    *(char *)pointer1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((pointer1 == (uint *)0x4) || (pointer1 == (uint *)0x8)) || (pointer1 == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (pointer1 == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    pointer1 = data[9];\n    data[9] = (uint *)((int)pointer1 + 1);\n    *(char *)pointer1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    pointer1 = data[9];\n    data[9] = (uint *)((int)pointer1 + 1);\n    *(char *)pointer1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    pointer1 = data[9];\n    data[9] = (uint *)((int)pointer1 + 1);\n    *(char *)pointer1 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "pointer1"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_data_08004f3c",
            "code": "\nvoid processData_08004f3c(uint **data)\n\n{\n  int result;\n  uint *tempPtr;\n  uint *tempPtr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  tempPtr2 = *data;\n  if ((tempPtr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((tempPtr2[5] & 0x40) != 0) {\n        tempPtr = data[9];\n        data[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)tempPtr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08004f3a(data);\n    }\n    else {\n      if ((tempPtr2[5] & 0x40) != 0) {\n        tempPtr = data[9];\n        data[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)tempPtr2[4];\n      }\n      initialize_if_memory_not_initialized_08008020(data);\n    }\n  }\n  else {\n    tempPtr2[1] = tempPtr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)&LAB_080053cc_1;\n      result = initialize_data_08004050(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          tempPtr2 = data[9];\n          data[9] = (uint *)((int)tempPtr2 + 1);\n          *(char *)tempPtr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)&LAB_080053cc_1;\n      result = initialize_data_08004050(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    initialize_and_execute_08007ff0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_data_08004f3c",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "tempPtr",
                "puVar3": "tempPtr2"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_data_08005084",
            "code": "\nundefined4 processData_08005084(uint **data)\n\n{\n  char character;\n  uint *ptrData;\n  uint *ptrData2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptrData = *data;\n  if ((ptrData[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptrData[5] & 4) != 0) {\n      ptrData2 = data[9];\n      data[9] = (uint *)((int)ptrData2 + 1);\n      *(char *)ptrData2 = (char)ptrData[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptrData = data[9];\n      data[9] = (uint *)((int)ptrData + 1);\n      *(char *)ptrData = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      initialize_and_execute_08007ff0();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    process_data_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_data_08005084",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "ptrData",
                "puVar3": "ptrData2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_permissions_08005188",
            "code": "\nvoid process_permissions_08005188(int *data)\n\n{\n  int ptr;\n  uint condition1;\n  uint condition2;\n  uint condition3;\n  \n  ptr = *data;\n  condition3 = *(uint *)(ptr + 0x18);\n  condition1 = *(uint *)(ptr + 0x14);\n  condition2 = *(uint *)(ptr + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((condition1 & 0x10001) == 0) || ((condition2 & 0x200) == 0)) {\n      if (((condition1 & 0x10008) == 0) || ((condition2 & 0x200) == 0)) {\n        if (((condition1 & 0x10002) != 0) && ((condition2 & 0x200) != 0)) {\n          check_and_set_permissions_080043a2(data);\n        }\n      }\n      else {\n        store_byte_from_param_at_index_08004396(data);\n      }\n    }\n    else {\n      update_data_based_on_conditions_0800430c(data);\n    }\n    if ((condition3 & 0x100004) == 0) {\n      if ((((condition1 & 0x10040) != 0) && ((condition2 & 0x400) != 0)) && ((condition1 & 0x10004) == 0)) {\n        update_permissions_08004d6c(data);\n        return;\n      }\n      if (((condition1 & 0x10004) != 0) && ((condition2 & 0x200) != 0)) {\n        process_data_08004e3c(data);\n        return;\n      }\n    }\n    else {\n      if ((((condition1 & 0x10080) != 0) && ((condition2 & 0x400) != 0)) && ((condition1 & 0x10004) == 0)) {\n        process_parameter_08004b82(data);\n        return;\n      }\n      if (((condition1 & 0x10004) != 0) && ((condition2 & 0x200) != 0)) {\n        process_params_08004ccc(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((condition1 & 0x10002) != 0) && ((condition2 & 0x200) != 0)) {\n      process_and_return_08004ac2();\n      return;\n    }\n    if (((condition1 & 0x10010) != 0) && ((condition2 & 0x200) != 0)) {\n      process_data_08005084(data);\n      return;\n    }\n    if ((condition3 & 0x100004) == 0) {\n      if ((((condition1 & 0x10040) != 0) && ((condition2 & 0x400) != 0)) && ((condition1 & 0x10004) == 0)) {\n        update_value_08004a76(data);\n        return;\n      }\n      if (((condition1 & 0x10004) != 0) && ((condition2 & 0x200) != 0)) {\n        update_short_value_0800459c(data);\n      }\n    }\n    else {\n      if ((((condition1 & 0x10080) != 0) && ((condition2 & 0x400) != 0)) && ((condition1 & 0x10004) == 0)) {\n        process_data_08004a24(data);\n        return;\n      }\n      if (((condition1 & 0x10004) != 0) && ((condition2 & 0x200) != 0)) {\n        update_value_0800457c(data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_permissions_08005188",
                "param_1": "data",
                "iVar1": "ptr",
                "uVar2": "condition1",
                "uVar3": "condition2",
                "uVar4": "condition3"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "process_configuration_080052f0",
            "code": "\nvoid process_configuration_080052f0(uint **config_data)\n\n{\n  char character_var;\n  uint *config_ptr;\n  uint config_flags;\n  uint option_flags;\n  \n  config_ptr = *config_data;\n  config_flags = config_ptr[5];\n  option_flags = config_ptr[1];\n  if (((config_flags & 0x10100) != 0) && ((option_flags & 0x100) != 0)) {\n    config_data[16] = (uint *)((uint)config_data[16] | 1);\n    config_ptr[5] = 0xfffffeff;\n    **config_data = **config_data | 0x8000;\n  }\n  if (((config_flags & 0x10200) != 0) && ((option_flags & 0x100) != 0)) {\n    config_data[16] = (uint *)((uint)config_data[16] | 2);\n    (*config_data)[5] = 0xfffffdff;\n  }\n  if (((config_flags & 0x10400) != 0) && ((option_flags & 0x100) != 0)) {\n    character_var = *(char *)((int)config_data + 0x3d);\n    if (((*(char *)((int)config_data + 0x3e) == ' ') && (*(short *)((int)config_data + 0x2a) == 0)) &&\n       (((character_var == '!' || (character_var == ')')) || ((character_var == '(' && (config_data[12] == (uint *)0x21)))))) {\n      set_and_execute_config(config_data);\n    }\n    else {\n      config_data[16] = (uint *)((uint)config_data[16] | 4);\n      if (*(char *)((int)config_data + 0x3e) == '\\x10') {\n        **config_data = **config_data | 0x200;\n      }\n      (*config_data)[5] = 0xfffffbff;\n    }\n  }\n  if (((config_flags & 0x10800) != 0) && ((option_flags & 0x100) != 0)) {\n    config_data[16] = (uint *)((uint)config_data[16] | 8);\n    (*config_data)[5] = 0xfffff7ff;\n  }\n  if (config_data[16] != (uint *)0x0) {\n    process_data(config_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "process_configuration_080052f0",
                "param_1": "config_data",
                "puVar2": "config_ptr",
                "uVar3": "config_flags",
                "uVar4": "option_flags",
                "cVar1": "character_var",
                "set_config_and_execute_08004aec": "set_and_execute_config",
                "process_data_08004f3c": "process_data",
                "param_1[0x10]": "config_data[16]",
                "param_1[0xc]": "config_data[12]"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_pointer_value_0800542a",
            "code": "\nundefined getPointerValue_0800542a(int inputValue)\n\n{\n  return *(undefined *)(inputValue + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_pointer_value_0800542a",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_pointer_value_08005430",
            "code": "\nundefined4 getPointerValue_08005430(int baseAddress)\n\n{\n  return *(undefined4 *)(baseAddress + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_pointer_value_08005430",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "calculate_delay_08005434",
            "code": "\nvoid calculateDelay_08005434(int inputValue)\n\n{\n  bool isDelayActive;\n  int delayCount;\n  \n  delayCount = inputValue * (DAT_20000018 / 8000);\n  do {\n    isDelayActive = delayCount != 0;\n    delayCount = delayCount + -1;\n  } while (isDelayActive);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "calculate_delay_08005434",
                "param_1": "inputValue",
                "local_4": "delayCount",
                "bVar1": "isDelayActive"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "check_flags_and_update_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 checkFlagsAndUpdate_08005460(uint *flags)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint value;\n  bool isConditionMet;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = flags[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        startTime = get_global_value_08003760();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = get_global_value_08003760();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = get_global_value_08003760();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = get_global_value_08003760();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = get_global_value_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = get_global_value_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | flags[5] << 3;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = get_global_value_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = get_global_value_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      calculate_delay_08005434(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isConditionMet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_global_value_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_global_value_08003760();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    value = flags[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = get_global_value_08003760();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = get_global_value_08003760();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = get_global_value_08003760();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isConditionMet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = get_global_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | flags[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | flags[8] | flags[9];\n        _DAT_42420060 = 1;\n        startTime = get_global_value_08003760();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = get_global_value_08003760();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = get_global_value_08003760();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = get_global_value_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = get_global_value_08003760();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "check_flags_and_update_08005460",
                "param_1": "flags",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "isConditionMet"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_delay_08005840",
            "code": "\n\n\nuint calculateDelay_08005840(void)\n\n{\n  uint uVar1;\n  undefined2 delayMultiplier;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  \n  data4 = 0x10100f0e;\n  data3 = 0xd0c0b0a;\n  data2 = 0x9080706;\n  data1 = 0x5040302;\n  delayMultiplier = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&data1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&delayMultiplier - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_delay_08005840",
                "local_1c": "delayMultiplier",
                "uStack_18": "data1",
                "uStack_14": "data2",
                "uStack_10": "data3",
                "uStack_c": "data4"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "update_settings_080058ac",
            "code": "\n\n\nundefined4 update_settings_080058ac(uint *settings,uint new_value)\n\n{\n  int start_time;\n  int current_time;\n  uint delay;\n  \n  if ((_DAT_40022000 & 7) < new_value) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | new_value;\n    if (new_value != (new_value & 7)) {\n      return 1;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | settings[2];\n  }\n  if ((*settings & 1) != 0) {\n    delay = settings[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_time();\n    if (settings[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (settings[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (new_value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | new_value;\n    if (new_value != (new_value & 7)) {\n      return 1;\n    }\n  }\n  if ((*settings & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | settings[3];\n  }\n  if ((*settings & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | settings[4] << 3;\n  }\n  delay = calculate_delay();\n  DAT_20000018 = delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  set_and_update_value(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "update_settings_080058ac",
                "param_1": "settings",
                "param_2": "new_value",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "delay",
                "get_global_value_08003760": "get_current_time",
                "calculate_delay_08005840": "calculate_delay",
                "set_and_update_value_080036d8": "set_and_update_value"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_system_080058d2",
            "code": "\n\n\nundefined4 initialize_system_080058d2(uint *flags,uint value)\n\n{\n  int start_time;\n  int current_time;\n  uint delay;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    delay = flags[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    start_time = get_current_time();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        current_time = get_current_time();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (value < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | value;\n    if (value != (value & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  delay = calculate_delay();\n  DAT_20000018 = delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  set_and_update_value(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_system_080058d2",
                "param_1": "flags",
                "param_2": "value",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "delay",
                "get_global_value_08003760": "get_current_time",
                "calculate_delay_08005840": "calculate_delay",
                "set_and_update_value_080036d8": "set_and_update_value"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_data_08005a1c",
            "code": "\nundefined4 get_data_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_data_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_shifted_data_08005a28",
            "code": "\n\n\nuint get_shifted_data_08005a28(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_shifted_data_08005a28",
                "uVar1": "data",
                "get_data_08005a1c": "get_data"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "shifted_data_value_08005a48",
            "code": "\n\n\nuint shiftedDataValue_08005a48(void)\n\n{\n  uint data;\n  \n  data = getData();\n  return data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "shifted_data_value_08005a48",
                "uVar1": "data",
                "get_data_08005a1c": "getData"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_params_08005a68",
            "code": "\n\n\nvoid initializeParams_08005a68(undefined4 *outputArray,uint *inputArrayPointer)\n\n{\n  *outputArray = 0xf;\n  outputArray[1] = _DAT_40021004 & 3;\n  outputArray[2] = _DAT_40021004 & 0xf0;\n  outputArray[3] = _DAT_40021004 & 0x700;\n  outputArray[4] = _DAT_40021004 >> 3 & 0x700;\n  *inputArrayPointer = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_params_08005a68",
                "param_1": "outputArray",
                "param_2": "inputArrayPointer"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "process_params_08005aa4",
            "code": "\n\n\nundefined4 processParams_08005aa4(uint *paramArray)\n\n{\n  uint var1;\n  uint var2;\n  int counter1;\n  int counter2;\n  bool isFlagSet;\n  \n  if ((*paramArray & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      counter1 = getGlobalValue();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        counter2 = getGlobalValue();\n        if (100 < (uint)(counter2 - counter1)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (paramArray[1] & 0x300))) {\n      var2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      var1 = _DAT_40021020 & 1;\n      _DAT_40021020 = var2;\n      if (var1 != 0) {\n        counter1 = getGlobalValue();\n        while ((_DAT_40021020 & 2) == 0) {\n          counter2 = getGlobalValue();\n          if (5000 < (uint)(counter2 - counter1)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | paramArray[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*paramArray & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | paramArray[2];\n  }\n  if ((*paramArray & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | paramArray[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "process_params_08005aa4",
                "param_1": "paramArray",
                "uVar1": "var1",
                "uVar2": "var2",
                "iVar3": "counter1",
                "iVar4": "counter2",
                "bVar5": "isFlagSet",
                "get_global_value_08003760": "getGlobalValue"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_value_08005bb8",
            "code": "\n\n\nuint calculateValue_08005bb8(int input)\n\n{\n  uint result;\n  undefined2 shiftedValue;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  constant4 = 0x10100f0e;\n  constant3 = 0xd0c0b0a;\n  constant2 = 0x9080706;\n  constant1 = 0x5040302;\n  shiftedValue = 0x201;\n  if (input == 2) {\n    result = shifted_data_value_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&shiftedValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&constant1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_value_08005bb8",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "shiftedValue",
                "uStack_20": "constant1",
                "uStack_1c": "constant2",
                "uStack_18": "constant3",
                "uStack_14": "constant4"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "check_and_execute_callback_08005cb4",
            "code": "\n\n\nvoid check_and_execute_callback_08005cb4(uint **input)\n\n{\n  if (((**input & 2) != 0) && (((*input)[1] & 2) != 0)) {\n    execute_callback();\n    (*input)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)input + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "check_and_execute_callback_08005cb4",
                "param_1": "input",
                "execute_callback_function_080073c0": "execute_callback"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "set_flags_and_values_08005cec",
            "code": "\nvoid setFlagsAndValues_08005cec(int address,uint *values)\n\n{\n  uint updatedFlags1;\n  uint updatedFlags2;\n  uint param2Value;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  updatedFlags2 = *(uint *)(address + 4);\n  param2Value = *values;\n  updatedFlags1 = *(uint *)(address + 0x20) & 0xfffffffd | values[2];\n  if (address == 0x40012c00) {\n    updatedFlags1 = (updatedFlags1 & 0xfffffff7 | values[3]) & 0xfffffffb;\n    updatedFlags2 = updatedFlags2 & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(address + 4) = updatedFlags2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | param2Value;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = updatedFlags1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "set_flags_and_values_08005cec",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updatedFlags1",
                "uVar2": "updatedFlags2",
                "uVar3": "param2Value"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_parameter_08005d48",
            "code": "\nvoid updateParameter_08005d48(int baseAddress,uint *parameterArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(baseAddress + 4);\n  updatedValue3 = *parameterArray;\n  updatedValue1 = *(uint *)(baseAddress + 0x20) & 0xfffffdff | parameterArray[2] << 8;\n  if (baseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | parameterArray[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | parameterArray[5] << 4 | parameterArray[6] << 4;\n  }\n  *(uint *)(baseAddress + 4) = updatedValue2;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(baseAddress + 0x3c) = parameterArray[1];\n  *(uint *)(baseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_parameter_08005d48",
                "param_1": "baseAddress",
                "param_2": "parameterArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_memory_region_08005dac",
            "code": "\nvoid updateMemoryRegion_08005dac(int memoryRegionAddress,int *paramArray)\n\n{\n  uint currentValue;\n  int paramValue1;\n  int paramValue2;\n  \n  *(uint *)(memoryRegionAddress + 0x20) = *(uint *)(memoryRegionAddress + 0x20) & 0xffffefff;\n  currentValue = *(uint *)(memoryRegionAddress + 4);\n  paramValue1 = *paramArray;\n  paramValue2 = paramArray[2];\n  if (memoryRegionAddress == 0x40012c00) {\n    currentValue = currentValue & 0xffffbfff | paramArray[5] << 6;\n  }\n  *(uint *)(memoryRegionAddress + 4) = currentValue;\n  *(uint *)(memoryRegionAddress + 0x1c) = *(uint *)(memoryRegionAddress + 0x1c) & 0xffff8cff | paramValue1 << 8;\n  *(int *)(memoryRegionAddress + 0x40) = paramArray[1];\n  *(uint *)(memoryRegionAddress + 0x20) = *(uint *)(memoryRegionAddress + 0x20) & 0xffffdfff | paramValue2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_memory_region_08005dac",
                "param_1": "memoryRegionAddress",
                "param_2": "paramArray",
                "uVar1": "currentValue",
                "iVar2": "paramValue1",
                "iVar3": "paramValue2"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "update_memory_values_08005df4",
            "code": "\nvoid updateMemoryValues_08005df4(uint **memoryArray)\n\n{\n  uint *currentValue;\n  \n  *(undefined *)((int)memoryArray + 0x3d) = 2;\n  currentValue = *memoryArray;\n  if ((currentValue[8] & 0x1111) == 0) {\n    if ((currentValue[8] & 0x444) == 0) {\n      *currentValue = *currentValue & 0xfffffffe;\n    }\n  }\n  update_memory_values_08007710(memoryArray);\n  *(undefined *)((int)memoryArray + 0x3d) = 0;\n  *(undefined *)(memoryArray + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "update_memory_values_08005df4",
                "param_1": "memoryArray",
                "puVar1": "currentValue"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "initialize_memory_08005e2e",
            "code": "\nvoid initialize_memory_08005e2e(uint **memory_array)\n\n{\n  uint *memory_pointer;\n  \n  *(undefined *)((int)memory_array + 0x3d) = 2;\n  memory_pointer = *memory_array;\n  if ((memory_pointer[8] & 0x1111) == 0) {\n    if ((memory_pointer[8] & 0x444) == 0) {\n      *memory_pointer = *memory_pointer & 0xfffffffe;\n    }\n  }\n  initialize_memory_08005e2e_values_08007110(memory_array);\n  *(undefined *)((int)memory_array + 0x3d) = 0;\n  *(undefined *)(memory_array + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "initialize_memory_08005e2e",
                "param_1": "memory_array",
                "puVar1": "memory_pointer"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "process_flags_08005e6e",
            "code": "\nvoid process_flags_08005e6e(int *flags)\n\n{\n  int value;\n  \n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 7) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      execute_callback();\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 7) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      execute_callback(flags);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 7) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      execute_callback(flags);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 7) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      execute_callback(flags);\n      FUNC_08005e6a(flags);\n    }\n    else {\n      FUNC_08005e68(flags);\n    }\n    *(undefined *)(flags + 7) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    subtract_four(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_080064ae(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_080064ac(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "process_flags_08005e6e",
                "param_1": "flags",
                "iVar1": "value",
                "execute_callback_if_flag_set_0800771c": "execute_callback",
                "execute_subtract_four_function_08007736": "subtract_four"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_08005fe8",
            "code": "\nvoid updateMemory_08005fe8(uint *memoryPtr,uint *dataPtr)\n\n{\n  uint valueToModify;\n  \n  valueToModify = *memoryPtr;\n  if ((((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n      (memoryPtr == (uint *)0x40000400)) || (memoryPtr == (uint *)0x40000800)) {\n    valueToModify = valueToModify & 0xffffff8f | dataPtr[1];\n  }\n  if (((memoryPtr == (uint *)0x40012c00) || (memoryPtr == (uint *)0x40000000)) ||\n     ((memoryPtr == (uint *)0x40000400 || (memoryPtr == (uint *)0x40000800)))) {\n    valueToModify = valueToModify & 0xfffffcff | dataPtr[3];\n  }\n  *memoryPtr = valueToModify & 0xffffff7f | dataPtr[5];\n  memoryPtr[0xb] = dataPtr[2];\n  memoryPtr[10] = *dataPtr;\n  if (memoryPtr == (uint *)0x40012c00) {\n    uRam40012c30 = dataPtr[4];\n  }\n  memoryPtr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_08005fe8",
                "param_1": "memoryPtr",
                "param_2": "dataPtr",
                "uVar1": "valueToModify"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_memory_update_08006060",
            "code": "\nundefined4 initializeMemoryUpdate_08006060(undefined4 *memoryPointer)\n\n{\n  if (memoryPointer != (undefined4 *)0x0) {\n    if (*(char *)((int)memoryPointer + 0x3d) == '\\0') {\n      *(undefined *)(memoryPointer + 0xf) = 0;\n      initialize_flags_08007708();\n    }\n    *(undefined *)((int)memoryPointer + 0x3d) = 2;\n    update_memory_08005fe8(*memoryPointer,memoryPointer + 1);\n    *(undefined *)((int)memoryPointer + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_memory_update_08006060",
                "param_1": "memoryPointer"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_or_update_memory_08006092",
            "code": "\nundefined4 initialize_or_update_memory_08006092(undefined4 *memory_ptr)\n\n{\n  if (memory_ptr != (undefined4 *)0x0) {\n    if (*(char *)((int)memory_ptr + 0x3d) == '\\0') {\n      *(undefined *)(memory_ptr + 0xf) = 0;\n      initialize_flags();\n    }\n    *(undefined *)((int)memory_ptr + 0x3d) = 2;\n    update_memory(*memory_ptr,memory_ptr + 1);\n    *(undefined *)((int)memory_ptr + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_or_update_memory_08006092",
                "param_1": "memory_ptr",
                "initialize_flags_08006e68": "initialize_flags",
                "update_memory_08005fe8": "update_memory"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_config_080060c4",
            "code": "\nvoid updateConfig_080060c4(int configAddress,int *configValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int inputValue;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(configAddress + 4);\n  inputValue = *configValues;\n  updatedValue1 = *(uint *)(configAddress + 0x20) & 0xffffffdf | configValues[2] << 4;\n  if (configAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | configValues[3] << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | configValues[5] << 2 | configValues[6] << 2;\n  }\n  *(uint *)(configAddress + 4) = updatedValue2;\n  *(uint *)(configAddress + 0x18) = *(uint *)(configAddress + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(configAddress + 0x38) = configValues[1];\n  *(uint *)(configAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_config_080060c4",
                "param_1": "configAddress",
                "param_2": "configValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "inputValue"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "handle_parameter_update_08006128",
            "code": "\nundefined4 handle_parameter_update_08006128(undefined4 *param_ptr,undefined4 param_2,undefined4 param_3)\n\n{\n  if (*(char *)(param_ptr + 0xf) != '\\x01') {\n    *(undefined *)(param_ptr + 0xf) = 1;\n    *(undefined *)((int)param_ptr + 0x3d) = 2;\n    switch(parameter_type) {\n    case 0:\n      set_flags_and_values(*param_ptr);\n      break;\n    case 4:\n      update_config(*param_ptr);\n      break;\n    case 8:\n      update_parameter(*param_ptr);\n      break;\n    case 0xc:\n      update_memory_region(*param_ptr);\n    }\n    *(undefined *)((int)param_ptr + 0x3d) = 1;\n    *(undefined *)(param_ptr + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "handle_parameter_update_08006128",
                "param_1": "param_ptr",
                "switch(param_3)": "switch(parameter_type)",
                "set_flags_and_values_08005cec": "set_flags_and_values",
                "update_config_080060c4": "update_config",
                "update_parameter_08005d48": "update_parameter",
                "update_memory_region_08005dac": "update_memory_region"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "update_flags_and_values_08006186",
            "code": "\nundefined4 update_flags_and_values_08006186(int *ptr_input,int ptr_config,undefined4 flag)\n\n{\n  if (*(char *)(ptr_input + 0xf) != '\\x01') {\n    *(undefined *)(ptr_input + 0xf) = 1;\n    *(undefined *)((int)ptr_input + 0x3d) = 2;\n    switch(flag) {\n    case 0:\n      set_flags_and_values(*ptr_input);\n      *(uint *)(*ptr_input + 0x18) = *(uint *)(*ptr_input + 0x18) | 8;\n      *(uint *)(*ptr_input + 0x18) = *(uint *)(*ptr_input + 0x18) & 0xfffffffb;\n      *(uint *)(*ptr_input + 0x18) = *(uint *)(*ptr_input + 0x18) | *(uint *)(ptr_config + 0x10);\n      break;\n    case 4:\n      update_config(*ptr_input);\n      *(uint *)(*ptr_input + 0x18) = *(uint *)(*ptr_input + 0x18) | 0x800;\n      *(uint *)(*ptr_input + 0x18) = *(uint *)(*ptr_input + 0x18) & 0xfffffbff;\n      *(uint *)(*ptr_input + 0x18) = *(uint *)(*ptr_input + 0x18) | *(int *)(ptr_config + 0x10) << 8;\n      break;\n    case 8:\n      update_parameter(*ptr_input);\n      *(uint *)(*ptr_input + 0x1c) = *(uint *)(*ptr_input + 0x1c) | 8;\n      *(uint *)(*ptr_input + 0x1c) = *(uint *)(*ptr_input + 0x1c) & 0xfffffffb;\n      *(uint *)(*ptr_input + 0x1c) = *(uint *)(*ptr_input + 0x1c) | *(uint *)(ptr_config + 0x10);\n      break;\n    case 0xc:\n      update_memory_region(*ptr_input);\n      *(uint *)(*ptr_input + 0x1c) = *(uint *)(*ptr_input + 0x1c) | 0x800;\n      *(uint *)(*ptr_input + 0x1c) = *(uint *)(*ptr_input + 0x1c) & 0xfffffbff;\n      *(uint *)(*ptr_input + 0x1c) = *(uint *)(*ptr_input + 0x1c) | *(int *)(ptr_config + 0x10) << 8;\n    }\n    *(undefined *)((int)ptr_input + 0x3d) = 1;\n    *(undefined *)(ptr_input + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "update_flags_and_values_08006186",
                "param_1": "ptr_input",
                "param_2": "ptr_config",
                "param_3": "flag",
                "set_flags_and_values_08005cec": "set_flags_and_values",
                "update_config_080060c4": "update_config",
                "update_parameter_08005d48": "update_parameter",
                "update_memory_region_08005dac": "update_memory_region"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bit_value_08006262",
            "code": "\nvoid updateBitValue_08006262(int data,uint bitIndex,int bitValue)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | bitValue << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bit_value_08006262",
                "param_1": "data",
                "param_2": "bitIndex",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "update_flags_and_values_08006280",
            "code": "\nundefined4 updateFlagsAndValues_08006280(uint **p_data,undefined4 flag)\n\n{\n  switch(flag) {\n  case 0:\n    (*p_data)[3] = (*p_data)[3] | 2;\n    break;\n  case 4:\n    (*p_data)[3] = (*p_data)[3] | 4;\n    break;\n  case 8:\n    (*p_data)[3] = (*p_data)[3] | 8;\n    break;\n  case 0xc:\n    (*p_data)[3] = (*p_data)[3] | 0x10;\n  }\n  updateBitValue(*p_data,flag,1);\n  if (*p_data == (uint *)0x40012c00) {\n    uRam40012c44 = uRam40012c44 | 0x8000;\n  }\n  **p_data = **p_data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "update_flags_and_values_08006280",
                "param_1": "p_data",
                "param_2": "flag",
                "update_bit_value_08006262": "updateBitValue"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_bitwise_flags_080062f4",
            "code": "\nundefined4 updateBitwiseFlags_080062f4(uint **input,undefined4 flag)\n\n{\n  uint *tempPointer;\n  \n  switch(flag) {\n  case 0:\n    (*input)[3] = (*input)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*input)[3] = (*input)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*input)[3] = (*input)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*input)[3] = (*input)[3] & 0xffffffef;\n  }\n  update_bit_value_08006262(*input,flag,0);\n  if (((*input == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  tempPointer = *input;\n  if (((tempPointer[8] & 0x1111) == 0) && ((tempPointer[8] & 0x444) == 0)) {\n    *tempPointer = *tempPointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_bitwise_flags_080062f4",
                "param_1": "input",
                "param_2": "flag",
                "puVar1": "tempPointer"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "update_bit_and_flag_08006390",
            "code": "\nundefined4 updateBitAndFlag_08006390(uint **bitPointer,undefined4 value)\n\n{\n  update_bit_value_08006262(*bitPointer,value,1);\n  if (*bitPointer == (uint *)0x40012c00) {\n    flagValue = flagValue | 0x8000;\n  }\n  **bitPointer = **bitPointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "update_bit_and_flag_08006390",
                "param_1": "bitPointer",
                "param_2": "value",
                "uRam40012c44": "flagValue"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_and_check_values_080063c0",
            "code": "\nundefined4 update_and_check_values_080063c0(uint **bit_array,undefined4 value)\n\n{\n  uint *temp_ptr;\n  \n  update_bit_value_08006262(*bit_array,value,0);\n  if (((*bit_array == (uint *)0x40012c00) && ((memory_location_1 & 0x1111) == 0)) &&\n     ((memory_location_1 & 0x444) == 0)) {\n    memory_location_2 = memory_location_2 & 0xffff7fff;\n  }\n  temp_ptr = *bit_array;\n  if (((temp_ptr[8] & 0x1111) == 0) && ((temp_ptr[8] & 0x444) == 0)) {\n    *temp_ptr = *temp_ptr & 0xfffffffe;\n  }\n  *(undefined *)((int)bit_array + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_and_check_values_080063c0",
                "param_1": "bit_array",
                "param_2": "value",
                "puVar1": "temp_ptr",
                "uRam40012c20": "memory_location_1",
                "uRam40012c44": "memory_location_2"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_bitwise_value_08006420",
            "code": "\nvoid updateBitwiseValue_08006420(int pointer,uint position,int value)\n\n{\n  *(uint *)(pointer + 0x20) = *(uint *)(pointer + 0x20) & ~(4 << (position & 0xff));\n  *(uint *)(pointer + 0x20) = *(uint *)(pointer + 0x20) | value << (position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_bitwise_value_08006420",
                "param_1": "pointer",
                "param_2": "position",
                "param_3": "value"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_bitwise_value_0800643c",
            "code": "\nundefined4 set_bitwise_value_0800643c(uint **bitwise_value,undefined4 update_flag)\n\n{\n  update_bitwise_value(*bitwise_value,update_flag,4);\n  (*bitwise_value)[0x11] = (*bitwise_value)[0x11] | 0x8000;\n  **bitwise_value = **bitwise_value | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_bitwise_value_0800643c",
                "param_1": "bitwise_value",
                "param_2": "update_flag",
                "update_bitwise_value_08006420": "update_bitwise_value"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "update_bitwise_values_08006460",
            "code": "\nundefined4 updateBitwiseValues_08006460(uint **inputData,undefined4 param)\n\n{\n  uint *pointer;\n  \n  update_bitwise_value_08006420(*inputData,param,0);\n  pointer = *inputData;\n  if (((pointer[8] & 0x1111) == 0) && ((pointer[8] & 0x444) == 0)) {\n    pointer[0x11] = pointer[0x11] & 0xffff7fff;\n  }\n  pointer = *inputData;\n  if (((pointer[8] & 0x1111) == 0) && ((pointer[8] & 0x444) == 0)) {\n    *pointer = *pointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "update_bitwise_values_08006460",
                "param_1": "inputData",
                "param_2": "param",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "clear_flags_080064b0",
            "code": "\nvoid clearFlags_080064b0(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xfffffedf;\n  *(uint *)(*ptr + 0x14) = *(uint *)(*ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "clear_flags_080064b0",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_data_080064cc",
            "code": "\nundefined4 processData_080064cc(int *inputArray)\n\n{\n  short count;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)inputArray + 0x39) != '!') {\n    return 2;\n  }\n  if (inputArray[2] == 0x1000) {\n    *(uint *)(*inputArray + 4) = *(ushort *)inputArray[8] & 0x1ff;\n    if (inputArray[4] == 0) {\n      inputArray[8] = inputArray[8] + 2;\n    }\n    else {\n      inputArray[8] = inputArray[8] + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)inputArray[8];\n    inputArray[8] = (int)(byte_ptr + 1);\n    *(uint *)(*inputArray + 4) = (uint)*byte_ptr;\n  }\n  count = *(short *)((int)inputArray + 0x26) + -1;\n  *(short *)((int)inputArray + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xffffff7f;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_data_080064cc",
                "param_1": "inputArray",
                "sVar1": "count",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "update_data_08006538",
            "code": "\nvoid updateData_08006538(int *data)\n\n{\n  int value1;\n  int value2;\n  int value3;\n  int value4;\n  int value5;\n  int value6;\n  int value7;\n  int value8;\n  int value9;\n  int value10;\n  \n  *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffcfff | data[3];\n  *(uint *)(*data + 0xc) =\n       data[2] | data[4] | data[5] | *(uint *)(*data + 0xc) & 0xffffe9f3;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffcff | data[6];\n  value10 = *data;\n  if (value10 != 0x40013800) {\n    value1 = get_shifted_data_08005a28();\n    value6 = data[1];\n    value2 = get_shifted_data_08005a28();\n    value7 = data[1];\n    value3 = get_shifted_data_08005a28();\n    value8 = data[1];\n    value4 = get_shifted_data_08005a28();\n    value9 = data[1];\n    value5 = get_shifted_data_08005a28();\n    *(uint *)(value10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(value4 * 0x19) / (uint)(value9 << 2) +\n                        (int)(((ulonglong)(uint)(value5 * 0x19) / (ulonglong)(uint)(data[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(value2 * 0x19) / (uint)(value7 << 2) +\n           (int)(((ulonglong)(uint)(value3 * 0x19) / (ulonglong)(uint)(value8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(value1 * 0x19) / (ulonglong)(uint)(value6 << 2)) / 100) * 0x10;\n    return;\n  }\n  value10 = shifted_data_value_08005a48();\n  value5 = data[1];\n  value1 = shifted_data_value_08005a48();\n  value6 = data[1];\n  value2 = shifted_data_value_08005a48();\n  value7 = data[1];\n  value3 = shifted_data_value_08005a48();\n  value8 = data[1];\n  value4 = shifted_data_value_08005a48();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(value3 * 0x19) / (uint)(value8 << 2) +\n                                (int)(((ulonglong)(uint)(value4 * 0x19) /\n                                      (ulonglong)(uint)(data[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(value1 * 0x19) / (uint)(value6 << 2) +\n                   (int)(((ulonglong)(uint)(value2 * 0x19) / (ulonglong)(uint)(value7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(value10 * 0x19) / (ulonglong)(uint)(value5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "update_data_08006538",
                "param_1": "data",
                "iVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4",
                "iVar5": "value5",
                "iVar6": "value6",
                "iVar7": "value7",
                "iVar8": "value8",
                "iVar9": "value9",
                "iVar10": "value10"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_parameters_080066e8",
            "code": "\nundefined4 checkParameters_080066e8(uint **parameterArray,uint flag,uint condition,int value,uint limit)\n\n{\n  int globalValue;\n  \n  do {\n    if (((flag & ~**parameterArray) == 0) != condition) {\n      return 0;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (globalValue = getGlobalValue(), (uint)(globalValue - value) <= limit))));\n  (*parameterArray)[3] = (*parameterArray)[3] & 0xfffffe5f;\n  (*parameterArray)[5] = (*parameterArray)[5] & 0xfffffffe;\n  *(undefined *)((int)parameterArray + 0x39) = 0x20;\n  *(undefined *)((int)parameterArray + 0x3a) = 0x20;\n  *(undefined *)(parameterArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "param_1": "parameterArray",
                "param_2": "flag",
                "param_3": "condition",
                "param_4": "value",
                "param_5": "limit",
                "iVar1": "globalValue",
                "get_global_value_08003760": "getGlobalValue"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "process_data_0800674e",
            "code": "\nundefined4 processData_0800674e(int *dataPtr)\n\n{\n  if (dataPtr != (int *)0x0) {\n    if (*(char *)((int)dataPtr + 0x39) == '\\0') {\n      *(undefined *)(dataPtr + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)dataPtr + 0x39) = 0x24;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) & 0xffffdfff;\n    updateData(dataPtr);\n    *(uint *)(*dataPtr + 0x10) = *(uint *)(*dataPtr + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPtr + 0x14) = *(uint *)(*dataPtr + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) | 0x2000;\n    value4 = 0;\n    *(undefined *)((int)dataPtr + 0x39) = 0x20;\n    *(undefined *)((int)dataPtr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "process_data_0800674e",
                "param_1": "dataPtr",
                "update_data_08006538": "updateData",
                "param_1[0xf]": "value4"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "verify_and_process_data_080067ac",
            "code": "\nundefined4 verifyAndProcessData_080067ac(int *data,ushort *values,int num_values,undefined4 magic_number)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if (values == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (num_values == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = 0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      status = get_global_value_08003760();\n      *(short *)(data + 9) = (short)num_values;\n      *(short *)((int)data + 0x26) = (short)num_values;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == 0x1000) {\n          result = check_parameters_080066e8(data,0x80,0,status,magic_number);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = *values & 0x1ff;\n          if (data[4] == 0) {\n            values = values + 1;\n          }\n          else {\n            values = (ushort *)((int)values + 1);\n          }\n        }\n        else {\n          result = check_parameters_080066e8(data,0x80,0,status,magic_number);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data + 4) = (uint)*(byte *)values;\n          values = (ushort *)((int)values + 1);\n        }\n      }\n      result = check_parameters_080066e8(data,0x40,0,status,magic_number);\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "verify_and_process_data_080067ac",
                "param_1": "data",
                "param_2": "values",
                "param_3": "num_values",
                "param_4": "magic_number",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "initialize_data_0800688e",
            "code": "\nundefined4 initializeData_0800688e(int *dataPointer,int value1,int value2)\n\n{\n  if (*(char *)((int)dataPointer + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(dataPointer + 0xe) != '\\x01') {\n    dataPointer[8] = value1;\n    *(short *)(dataPointer + 9) = (short)value2;\n    *(short *)((int)dataPointer + 0x26) = (short)value2;\n    dataPointer[0xf] = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 0x21;\n    *(undefined *)(dataPointer + 0xe) = 0;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "initialize_data_0800688e",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "dataPointer[8]",
                "param_1[0xf]": "dataPointer[0xf]"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_input_080068d6",
            "code": "\nundefined4 validate_input_080068d6(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    value3 = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    value6 = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_input_080068d6",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "value3",
                "param_1[0xf]": "value6"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "initialize_data_and_index_08006932",
            "code": "\nundefined4 initializeDataAndIndex_08006932(int *dataPointer)\n\n{\n  *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffffbf;\n  *(undefined *)((int)dataPointer + 0x39) = 0x20;\n  initialize_data_and_index_08008730();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "initialize_data_and_index_08006932",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_binary_data_0800694c",
            "code": "\nundefined4 processBinaryData_0800694c(int *data)\n\n{\n  byte *bytePtr;\n  short shortVar;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPtr = (undefined *)data[10];\n    data[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePtr = (byte *)data[10];\n    data[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  shortVar = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = shortVar;\n  if (shortVar != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_function_based_on_index_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_binary_data_0800694c",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "sVar2": "shortVar",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_data_080069ec",
            "code": "\nvoid process_data_080069ec(uint **data)\n\n{\n  int result;\n  uint flag;\n  uint *ptr;\n  uint flag2;\n  uint dataFlag;\n  \n  ptr = *data;\n  dataFlag = *ptr;\n  flag = ptr[3];\n  if ((((dataFlag & 0xf) == 0) && ((dataFlag & 0x20) != 0)) && ((flag & 0x20) != 0)) {\n    process_binary_data_0800694c(data);\n    return;\n  }\n  if (((dataFlag & 0xf) == 0) || ((flag2 = ptr[5] & 1, flag2 == 0 && ((flag & 0x120) == 0)))) {\n    if (((dataFlag & 0x80) != 0) && ((flag & 0x80) != 0)) {\n      process_data_080069ec_080064cc(data);\n      return;\n    }\n    if (((dataFlag & 0x40) != 0) && ((flag & 0x40) != 0)) {\n      initialize_data_and_index_08006932(data);\n    }\n  }\n  else {\n    if (((dataFlag & 1) != 0) && ((flag & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((dataFlag & 4) != 0) && (flag2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((dataFlag & 2) != 0) && (flag2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((dataFlag & 8) != 0) && (flag2 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((dataFlag & 0x20) != 0) && ((flag & 0x20) != 0)) {\n        process_binary_data_0800694c(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_0800877c(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      clear_flags_080064b0(data);\n      ptr = *data;\n      if ((ptr[5] & 0x40) == 0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      ptr[5] = ptr[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_0800877c(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      result = initialize_data_08004050(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_data_080069ec",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "flag",
                "puVar3": "ptr",
                "uVar4": "flag2",
                "uVar5": "dataFlag"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "address"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "check_bit_value_08006b28",
            "code": "\nuint checkBitValue_08006b28(uint value,int data)\n\n{\n  return *(uint *)(data + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "check_bit_value_08006b28",
                "param_1": "value",
                "param_2": "data"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "set_bit_in_array_08006b3e",
            "code": "\nvoid setBitInArray_08006b3e(uint bitPosition,int array)\n\n{\n  uint index;\n  \n  index = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (bitPosition & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "set_bit_in_array_08006b3e",
                "param_1": "bitPosition",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "update_bit_08006b5c",
            "code": "\nvoid updateBit_08006b5c(uint bitPosition,int arrayAddress)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedIndex * 4) = *(uint *)(arrayAddress + shiftedIndex * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "update_bit_08006b5c",
                "param_1": "bitPosition",
                "param_2": "arrayAddress",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_memory_address_08006b7c",
            "code": "\nundefined4 getMemoryAddress_08006b7c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_memory_address_08006b7c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "get_memory_address_08006bb8",
            "code": "\n\n\nundefined4 getMemoryAddress_08006bb8(undefined4 value)\n\n{\n  undefined4 memoryAddress;\n  \n  switch(value) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    memoryAddress = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    memoryAddress = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    memoryAddress = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    memoryAddress = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    memoryAddress = 0x40011800;\n    break;\n  default:\n    memoryAddress = 0;\n  }\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "get_memory_address_08006bb8",
                "param_1": "value",
                "uVar1": "memoryAddress"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "find_and_shift_value_08006c60",
            "code": "\nuint find_and_shift_value_08006c60(undefined4 value,undefined4 unk_param_2,undefined4 unk_param_3,undefined4 unk_param_4)\n\n{\n  int result;\n  uint shifted_value;\n  \n  result = find_value_or_default_08007376(value,&DAT_0800a5b8,unk_param_3,unk_param_4,unk_param_4);\n  shifted_value = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "find_and_shift_value_08006c60",
                "param_1": "value",
                "param_2": "unk_param_2",
                "param_3": "unk_param_3",
                "param_4": "unk_param_4",
                "iVar1": "result",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "find_value_with_default_08006c7c",
            "code": "\nundefined4 find_value_with_default_08006c7c(undefined4 value,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = find_value_or_default_08007376(value,&DAT_0800a6cc,param_3,param_4,param_4);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "find_value_with_default_08006c7c",
                "param_1": "value",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "update_memory_address_08006ca8",
            "code": "\n\n\nvoid update_memory_address_08006ca8(int *input_pointer,undefined4 param_value)\n\n{\n  undefined4 memory_address;\n  uint flags;\n  int input_value;\n  uint bit_mask;\n  undefined4 num_updates;\n  undefined4 counter;\n  \n  input_value = *input_pointer;\n  if (input_value == 0x40012400) {\n    flags = _DAT_40021018 | 0x200;\n    input_value = 0x200;\n    _DAT_40021018 = flags;\n  }\n  else {\n    flags = 0x40012800;\n    if (input_value == 0x40012800) {\n      flags = _DAT_40021018 | 0x400;\n      input_value = 0x400;\n      _DAT_40021018 = flags;\n    }\n  }\n  memory_address = get_memory_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,param_value,flags,input_value);\n  bit_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  num_updates = 3;\n  counter = 0;\n  update_flags_080040e8(memory_address,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "update_memory_address_08006ca8",
                "param_1": "input_pointer",
                "param_2": "param_value",
                "uVar1": "memory_address",
                "uVar2": "flags",
                "iVar3": "input_value",
                "local_18": "bit_mask",
                "local_14": "num_updates",
                "local_10": "counter"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_settings_08006d24",
            "code": "\n\n\nvoid updateSettings_08006d24(int *settings)\n\n{\n  if (*settings != 0x40012400) {\n    if (*settings == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_settings_08006d24",
                "param_1": "settings"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "validate_and_process_08006d80",
            "code": "\nundefined2 validate_and_process_08006d80(undefined4 input_value)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 result;\n  uint found_value;\n  undefined4 update_flag;\n  undefined4 update_status;\n  int processed_value;\n  undefined4 flag_1;\n  undefined4 flag_2;\n  undefined4 flag_3;\n  undefined4 flag_6;\n  undefined4 flag_4;\n  undefined4 flag_7;\n  undefined4 constant_value;\n  undefined4 flag_5;\n  \n  fill_memory_080091c6(&processed_value,0,0x30);\n  found_value = 0;\n  update_flag = 0;\n  update_status = 0;\n  result = 0;\n  processed_value = get_value_or_default_08007320(input_value,&DAT_0800a5b8);\n  if (processed_value == 0) {\n    result = 0;\n  }\n  else {\n    flag_1 = 0;\n    flag_2 = 0;\n    flag_3 = 0;\n    flag_4 = 0;\n    constant_value = 0xe0000;\n    flag_5 = 0;\n    flag_6 = 1;\n    flag_7 = 0;\n    DAT_20000014 = (undefined)input_value;\n    iVar1 = update_and_check_values(&processed_value);\n    if (iVar1 == 0) {\n      found_value = find_and_shift_value(input_value);\n      if (found_value < 0x12) {\n        update_flag = 1;\n        update_status = 2;\n        iVar1 = update_parameters(&processed_value,&found_value);\n        if (iVar1 == 0) {\n          iVar1 = process_data(&processed_value);\n          if (iVar1 == 0) {\n            iVar1 = update_flag(&processed_value);\n            if (iVar1 == 0) {\n              iVar1 = process_input(&processed_value,10);\n              if (iVar1 == 0) {\n                uVar2 = get_offset_value(&processed_value);\n                if ((uVar2 & 0x200) != 0) {\n                  result = get_offset_value_2(&processed_value);\n                }\n                iVar1 = update_value_status(&processed_value);\n                if (iVar1 == 0) {\n                  iVar1 = update_settings(&processed_value);\n                  if (iVar1 != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "validate_and_process_08006d80",
                "param_1": "input_value",
                "local_46": "result",
                "local_44": "found_value",
                "local_40": "update_flag",
                "local_3c": "update_status",
                "local_38": "processed_value",
                "local_34": "flag_1",
                "local_30": "flag_2",
                "local_2c": "flag_3",
                "local_24": "flag_4",
                "local_1c": "constant_value",
                "local_10": "flag_5",
                "local_28": "flag_6",
                "local_20": "flag_7",
                "update_and_check_values_08003bd8": "update_and_check_values",
                "find_and_shift_value_08006c60": "find_and_shift_value",
                "update_parameters_080038e4": "update_parameters",
                "process_data_08003e20": "process_data",
                "update_flag_08003aa0": "update_flag",
                "process_input_0800376c": "process_input",
                "get_offset_value_08003a1c": "get_offset_value",
                "get_offset_value_080038dc": "get_offset_value_2",
                "update_value_status_08003de4": "update_value_status",
                "update_settings_08003ce8": "update_settings"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_flags_08006e68",
            "code": "\n\n\nvoid initializeFlags_08006e68(undefined4 input)\n\n{\n  int value;\n  undefined4 memoryAddress;\n  uint flag;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  value = find_value_or_default_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  set_flags_08007438(input);\n  memoryAddress = get_memory_address_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  value1 = 2;\n  value2 = 0;\n  value3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(value << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  flag = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_flags_080040e8(memoryAddress,&flag);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_flags_08006e68",
                "param_1": "input",
                "iVar1": "value",
                "uVar2": "memoryAddress",
                "local_20": "flag",
                "local_1c": "value1",
                "local_18": "value2",
                "local_14": "value3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "initialize_memory_values_08007110",
            "code": "\nvoid initialize_memory_values_08007110(void)\n\n{\n  update_memory_values_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "initialize_memory_values_08007110"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_or_update_memory_08007118",
            "code": "\nvoid initializeOrUpdateMemory_08007118(undefined4 clockSource,uint divisionFactor,int value,undefined4 param,char flag)\n\n{\n  uint clock;\n  int valueResult;\n  int updateResult;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  int defaultValue;\n  int divisionResult;\n  undefined4 value8;\n  int value9;\n  undefined4 value10;\n  undefined4 value11;\n  undefined newValue;\n  \n  fill_memory_080091c6(&defaultValue,0,0x40);\n  value1 = 0;\n  value2 = 0;\n  value3 = 0;\n  value4 = 0;\n  value5 = 0;\n  value6 = 0;\n  value7 = 0;\n  defaultValue = get_value_or_default_08007320(clockSource,&DAT_0800a6cc);\n  if (defaultValue != 0) {\n    clock = process_clock_source_080075dc();\n    divisionResult = clock / divisionFactor - 1;\n    value9 = value + -1;\n    value10 = 0;\n    value8 = 0;\n    value11 = 0;\n    newValue = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)clockSource;\n      valueResult = initialize_or_update_memory_08006092(&defaultValue);\n      if (valueResult != 0) {\n        return;\n      }\n    }\n    valueResult = find_value_with_default_08006c7c(clockSource);\n    if ((((valueResult == 0) || (valueResult == 4)) || (valueResult == 8)) || ((valueResult == 0xc || (valueResult == 0x18)))) {\n      value1 = 0x60;\n      value3 = 0;\n      value5 = 0;\n      value4 = 0;\n      value7 = 0;\n      value6 = 0;\n      value2 = param;\n      updateResult = update_flags_and_values_08006186(&defaultValue,&value1,valueResult);\n      if (updateResult == 0) {\n        clock = find_value_or_default_08007376(clockSource,&DAT_0800a6cc);\n        if ((clock & 0x100000) == 0) {\n          update_bit_and_flag_08006390(&defaultValue,valueResult);\n        }\n        else {\n          set_bitwise_value_0800643c(&defaultValue,valueResult);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_or_update_memory_08007118",
                "param_1": "clockSource",
                "param_2": "divisionFactor",
                "param_3": "value",
                "param_4": "param",
                "param_5": "flag",
                "uVar1": "clock",
                "iVar2": "valueResult",
                "iVar3": "updateResult",
                "local_74": "value1",
                "local_70": "value2",
                "local_6c": "value3",
                "local_68": "value4",
                "local_64": "value5",
                "local_60": "value6",
                "local_5c": "value7",
                "local_58": "defaultValue",
                "local_54": "divisionResult",
                "local_50": "value8",
                "local_4c": "value9",
                "local_48": "value10",
                "local_44": "value11",
                "local_1b": "newValue"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "process_data_080071e4",
            "code": "\nvoid processData_080071e4(undefined4 inputData)\n\n{\n  int result;\n  uint foundValue;\n  int valuesArray [17];\n  \n  valuesArray[0] = get_value_or_default_08007320(inputData,&DAT_0800a6cc);\n  if ((valuesArray[0] != 0) &&\n     ((((result = find_value_with_default_08006c7c(inputData), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    foundValue = find_value_or_default_08007376(inputData,&DAT_0800a6cc);\n    if ((foundValue & 0x100000) == 0) {\n      update_and_check_values_080063c0(valuesArray,result);\n    }\n    else {\n      update_bitwise_values_08006460(valuesArray,result);\n    }\n    initialize_memory_08005e2e(valuesArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "process_data_080071e4",
                "param_1": "inputData",
                "iVar1": "result",
                "uVar2": "foundValue",
                "local_50": "valuesArray"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_global_value_0800723c",
            "code": "\nvoid initialize_global_value_0800723c(void)\n\n{\n  retrieve_global_value();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_global_value_0800723c",
                "get_global_value_08003760": "retrieve_global_value"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "initialize_and_update_08007246",
            "code": "\nvoid initialize_and_update_08007246(void)\n\n{\n  update_data();\n  initialize_data();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "initialize_and_update_08007246",
                "update_variable_08003748": "update_data",
                "initialize_08004046": "initialize_data"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_device_08007258",
            "code": "\n\n\nvoid initializeDevice_08007258(uint deviceID,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 memoryAddress;\n  uint bitMask;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 constant3;\n  \n  memoryAddress = get_memory_address_08006bb8((deviceID << 0x18) >> 0x1c);\n  bitMask = 1 << (deviceID & 0xf) & 0xffff;\n  constant3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((deviceID - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((deviceID == 0xf) || (deviceID == 0x13)) || (deviceID == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param2Copy = param2;\n  param3Copy = param3;\n  update_flags_080040e8(memoryAddress,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_device_08007258",
                "param_1": "deviceID",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "memoryAddress",
                "local_20": "bitMask",
                "local_1c": "param2Copy",
                "local_18": "param3Copy",
                "local_14": "constant3"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "set_param_value_based_on_flag_080072d8",
            "code": "\nvoid setParamValueBasedOnFlag_080072d8(undefined4 param1,undefined2 param2,int flag,undefined4 param4)\n\n{\n  if (flag == 0) {\n    set_param_value_080042e2(param1,param2,0,param4,param4);\n    return;\n  }\n  set_param_value_080042e2(param1,param2,1,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "set_param_value_based_on_flag_080072d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "check_bit_and_return_080072f0",
            "code": "\nvoid check_bit_and_return_080072f0(undefined4 input_1,undefined2 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  check_bit_080042d4(input_1,input_2,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "check_bit_and_return_080072f0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_devices_080072fa",
            "code": "\nvoid initialize_devices_080072fa(void)\n\n{\n  initialize_device_1();\n  initialize_device_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_devices_080072fa",
                "initialize_device_08003724": "initialize_device_1",
                "initialize_device_080035b8": "initialize_device_2"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_by_index_08007306",
            "code": "\nundefined4 find_value_by_index_08007306(int index,char *data_ptr)\n\n{\n  while( true ) {\n    if (*data_ptr == -1) {\n      return 0;\n    }\n    if (*data_ptr == index) break;\n    data_ptr = data_ptr + 0xc;\n  }\n  return *(undefined4 *)(data_ptr + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_by_index_08007306",
                "param_1": "index",
                "param_2": "data_ptr"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "get_value_or_default_08007320",
            "code": "\nundefined4 get_value_or_default_08007320(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value != -1) {\n    found_value = find_value_by_index_08007306();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "get_value_or_default_08007320",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_index_08007332",
            "code": "\nint find_index_08007332(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_index_08007332",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "get_valid_index_0800734a",
            "code": "\nundefined4 getValidIndex_0800734a(int input)\n\n{\n  undefined4 validIndex;\n  \n  if (input != 0) {\n    validIndex = find_index_08007332();\n    return validIndex;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "get_valid_index_0800734a",
                "param_1": "input",
                "uVar1": "validIndex"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_in_list_0800735a",
            "code": "\nundefined4 find_value_in_list_0800735a(int value_to_find,char *list_ptr)\n\n{\n  while( true ) {\n    if (*list_ptr == -1) {\n      return 0xffffffff;\n    }\n    if (*list_ptr == value_to_find) break;\n    list_ptr = list_ptr + 0xc;\n  }\n  return *(undefined4 *)(list_ptr + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_in_list_0800735a",
                "param_1": "value_to_find",
                "param_2": "list_ptr"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_value_or_default_08007376",
            "code": "\nundefined4 find_value_or_default_08007376(int value)\n\n{\n  undefined4 found_value;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  found_value = find_value_in_list_0800735a();\n  return found_value;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_value_or_default_08007376",
                "param_1": "value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_param_0800738a",
            "code": "\nundefined4 check_param_0800738a(int input_value,char *char_array)\n\n{\n  if (input_value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*char_array == -1) {\n      return 0;\n    }\n    if (input_value == *char_array) break;\n    char_array = char_array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_param_0800738a",
                "param_1": "input_value",
                "param_2": "char_array"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_non_zero_080073ae",
            "code": "\nint compareAndReturnNonZero_080073ae(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_non_zero_080073ae",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_function_080073c0",
            "code": "\nvoid executeCallbackFunction_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_function_080073c0"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_registers_080073ec",
            "code": "\n\n\nvoid initializeRegisters_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_registers_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "set_flags_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid set_flags_08007438(int *value)\n\n{\n  if (*value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = value;\n  }\n  if (*value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = value;\n  }\n  if (*value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = value;\n  }\n  if (*value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "set_flags_08007438",
                "param_1": "value"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_memory_values_080074e0",
            "code": "\n\n\nvoid updateMemoryValues_080074e0(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_memory_values_080074e0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "map_timer_irqn_to_value_08007544",
            "code": "\nundefined4 mapTimerIrqnToValue_08007544(uint irqn)\n\n{\n  if (irqn == 0xffffffff) {\n    return 0;\n  }\n  if (irqn == 0x40000400) {\n    return 0x1d;\n  }\n  if (irqn < 0x40000401) {\n    if (irqn == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (irqn == 0x40000800) {\n      return 0x1e;\n    }\n    if (irqn == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  handleUnknownIrqn(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "map_timer_irqn_to_value_08007544",
                "param_1": "irqn",
                "process_data_080098d8": "handleUnknownIrqn"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  logErrorMessage(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timerInstance",
                "process_data_080098d8": "logErrorMessage"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "process_clock_source_080075dc",
            "code": "\nint process_clock_source_080075dc(undefined4 clock_source)\n\n{\n  uint data_shift_count;\n  int result;\n  uint clock_source_value;\n  undefined4 param1;\n  undefined4 shifted_data_count;\n  undefined4 shifted_data_sum;\n  undefined4 shifted_data_value;\n  uint timer_instance;\n  uint shifted_data_flag;\n  \n  shifted_data_count = 0;\n  shifted_data_sum = 0;\n  shifted_data_value = 0;\n  timer_instance = 0;\n  shifted_data_flag = 0;\n  param1 = 0;\n  initialize_params_08005a68(&shifted_data_count,&param1);\n  result = check_timer_instance_08007594(clock_source);\n  data_shift_count = shifted_data_flag;\n  clock_source_value = timer_instance;\n  if (result == 1) {\n    result = get_shifted_data_08005a28();\n  }\n  else if (result == 2) {\n    result = shifted_data_value_08005a48();\n    clock_source_value = data_shift_count;\n  }\n  else {\n    process_data_080098d8(\"TIM: Unknown clock source\");\n    result = 0;\n    clock_source_value = 0;\n  }\n  if (clock_source_value != 0x500) {\n    if (clock_source_value < 0x501) {\n      if (clock_source_value != 0x400) {\n        return result;\n      }\n    }\n    else if ((clock_source_value != 0x600) && (clock_source_value != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "process_clock_source_080075dc",
                "param_1": "clock_source",
                "uVar1": "data_shift_count",
                "iVar2": "result",
                "uVar3": "clock_source_value",
                "local_20": "param1",
                "local_1c": "shifted_data_count",
                "local_18": "shifted_data_sum",
                "local_14": "shifted_data_value",
                "local_10": "timer_instance",
                "local_c": "shifted_data_flag"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_program_08007648",
            "code": "\nvoid initialize_program_08007648(undefined4 *program_data,undefined4 source_value,undefined4 update_parameter,undefined4 irq_number)\n\n{\n  char character_value;\n  uint clock_source;\n  int result;\n  undefined4 *pointer_to_data;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  \n  local_var1 = 0;\n  local_var2 = 0;\n  local_var3 = 0;\n  local_var4 = 0;\n  local_var5 = 0;\n  local_var6 = 0;\n  local_var7 = 0;\n  pointer_to_data = program_data + 1;\n  *program_data = 0x40000000;\n  program_data[1] = 0x40000000;\n  program_data[4] = source_value;\n  clock_source = process_clock_source_080075dc();\n  program_data[2] = clock_source / 1000000 - 1;\n  program_data[5] = 0;\n  program_data[3] = 0;\n  program_data[6] = 0;\n  program_data[0x13] = irq_number;\n  local_var1 = 0;\n  local_var3 = 0;\n  local_var5 = 0;\n  local_var4 = 0;\n  local_var6 = 0;\n  local_var7 = 0;\n  local_var2 = update_parameter;\n  character_value = map_timer_irqn_to_value_08007544(*program_data);\n  update_value_08003f30((int)character_value,0xe,0);\n  character_value = map_timer_irqn_to_value_08007544(*program_data);\n  set_bit_in_array_08003f94((int)character_value);\n  result = initialize_memory_update_08006060(pointer_to_data);\n  if ((result == 0) && (result = handle_parameter_update_08006128(pointer_to_data,&local_var1,0), result == 0)) {\n    update_flags_and_values_08006280(pointer_to_data,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_program_08007648",
                "param_1": "program_data",
                "param_2": "source_value",
                "param_3": "update_parameter",
                "param_4": "irq_number",
                "cVar1": "character_value",
                "uVar2": "clock_source",
                "iVar3": "result",
                "puVar4": "pointer_to_data",
                "local_34": "local_var1",
                "local_30": "local_var2",
                "local_2c": "local_var3",
                "local_28": "local_var4",
                "local_24": "local_var5",
                "local_20": "local_var6",
                "local_1c": "local_var7"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "initialize_timer_080076e0",
            "code": "\nvoid initializeTimer_080076e0(undefined4 *timerParams)\n\n{\n  char irqnValue;\n  int memoryUpdateResult;\n  \n  timerParams[0x13] = 0;\n  irqnValue = map_timer_irqn_to_value_08007544(*timerParams);\n  set_bit_in_memory_08003fb0((int)irqnValue);\n  memoryUpdateResult = update_memory_values_08005df4(timerParams + 1);\n  if (memoryUpdateResult == 0) {\n    update_bitwise_flags_080062f4(timerParams + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "initialize_timer_080076e0",
                "param_1": "timerParams",
                "cVar1": "irqnValue",
                "iVar2": "memoryUpdateResult"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_flags_08007708",
            "code": "\nvoid initialize_flags_08007708(void)\n\n{\n  set_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_flags_08007708",
                "set_flags_08007438": "set_flags"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "update_memory_values_08007710",
            "code": "\nvoid update_memory_values_08007710(void)\n\n{\n  update_memory_values_08007710_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "update_memory_values_08007710"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtract_four_08007718(int input_number)\n\n{\n  return input_number + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "input_number"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_callback_if_flag_set_0800771c",
            "code": "\nvoid executeCallbackIfFlagSet_0800771c(int callbackData)\n\n{\n  int callbackFunction;\n  \n  callbackFunction = getCallbackFunction();\n  if ((*(code **)(callbackFunction + 0x4c) != (code *)0x0) && (*(char *)(callbackData + 0x1c) == '\\x01')) {\n    (**(code **)(callbackFunction + 0x4c))(callbackFunction,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_callback_if_flag_set_0800771c",
                "param_1": "callbackData",
                "iVar1": "callbackFunction",
                "subtract_four_08007718": "getCallbackFunction"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_subtract_four_function_08007736",
            "code": "\nvoid executeSubtractFourFunction_08007736(void)\n\n{\n  int result;\n  \n  result = subtractFourFunction();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_subtract_four_function_08007736",
                "iVar1": "result",
                "subtract_four_08007718": "subtractFourFunction"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_function_address_08007744",
            "code": "\nundefined4 getFunctionAddress_08007744(int functionIndex)\n\n{\n  return *(undefined4 *)(*(int *)(functionIndex + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_function_address_08007744",
                "param_1": "functionIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "update_parameter_value_0800774a",
            "code": "\nvoid updateParameterValue_0800774a(int baseAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(baseAddress + 4) + 0x24) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "update_parameter_value_0800774a",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "write_data_to_ptr_08007750",
            "code": "\nvoid writeDataToPtr_08007750(int ptrBase,int index,undefined4 data)\n\n{\n  *(undefined4 *)(*(int *)(ptrBase + 4) + 0x34 + index * 4) = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "write_data_to_ptr_08007750",
                "param_1": "ptrBase",
                "param_2": "index",
                "param_3": "data"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_pins_080077b0",
            "code": "\n\n\nvoid initializeI2CPins_080077b0(int *i2cPins,int value1,int value2,int value3,undefined value4)\n\n{\n  int pinValue1;\n  int pinValue2;\n  undefined4 memoryAddress;\n  uint value4;\n  uint value5;\n  int *nextParam1;\n  uint shiftValue1;\n  uint shiftValue2;\n  uint shiftValue3;\n  undefined4 shiftValue4;\n  \n  if (i2cPins != (int *)0x0) {\n    nextParam1 = i2cPins + 1;\n    pinValue1 = get_value_or_default_08007320((int)*(char *)(i2cPins + 0x16),&DAT_0800a69c);\n    pinValue2 = get_value_or_default_08007320((int)*(char *)((int)i2cPins + 0x59),&DAT_0800a66c);\n    if ((pinValue1 == 0) || (pinValue2 == 0)) {\n      process_data_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      pinValue1 = compare_and_return_non_zero_080073ae(pinValue1,pinValue2);\n      *i2cPins = pinValue1;\n      if (pinValue1 == 0) {\n        process_data_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (pinValue1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)i2cPins + 0x5a) = 0x1f;\n          *(undefined *)((int)i2cPins + 0x5b) = 0x20;\n          DAT_20000668 = nextParam1;\n        }\n        if (*i2cPins == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)i2cPins + 0x5a) = 0x21;\n          *(undefined *)((int)i2cPins + 0x5b) = 0x22;\n          DAT_2000066c = nextParam1;\n        }\n        memoryAddress = get_memory_address_08006bb8((uint)((int)*(char *)((int)i2cPins + 0x59) << 0x18) >> 0x1c);\n        shiftValue1 = 1 << ((int)*(char *)((int)i2cPins + 0x59) & 0xfU) & 0xffff;\n        value4 = find_value_or_default_08007376((int)*(char *)((int)i2cPins + 0x59),&DAT_0800a66c);\n        value5 = find_value_or_default_08007376((int)*(char *)((int)i2cPins + 0x59),&DAT_0800a66c);\n        shiftValue2 = (value4 >> 3 & 1) << 4 | value5 & 7;\n        shiftValue4 = 3;\n        pinValue1 = find_value_or_default_08007376((int)*(char *)((int)i2cPins + 0x59),&DAT_0800a66c);\n        shiftValue3 = (uint)(pinValue1 << 0x1a) >> 0x1e;\n        pinValue1 = find_value_or_default_08007376((int)*(char *)((int)i2cPins + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value5 = 1;\n        value4 = _DAT_40021018;\n        switch((uint)(pinValue1 << 0x11) >> 0x19) {\n        case 1:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value5;\n          break;\n        case 2:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 3:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value5;\n          break;\n        case 4:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 5:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value5;\n          break;\n        case 6:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 7:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value5;\n          break;\n        case 8:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 9:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value5;\n          break;\n        case 10:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value5;\n          break;\n        case 0xb:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0xc:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value5;\n          break;\n        case 0xd:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value5;\n          break;\n        case 0xe:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0xf:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value5;\n          break;\n        case 0x10:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value5;\n          break;\n        case 0x11:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value5;\n          break;\n        case 0x12:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x13:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value5;\n          break;\n        case 0x14:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value5;\n          break;\n        case 0x15:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x16:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x17:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x1b:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x1c:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x21:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value5;\n          break;\n        case 0x22:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x23:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x24:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value5;\n        }\n        update_flags_080040e8(memoryAddress,&shiftValue1,value4,value5);\n        memoryAddress = get_memory_address_08006bb8((uint)((int)*(char *)(i2cPins + 0x16) << 0x18) >> 0x1c);\n        shiftValue1 = 1 << ((int)*(char *)(i2cPins + 0x16) & 0xfU) & 0xffff;\n        value4 = find_value_or_default_08007376((int)*(char *)(i2cPins + 0x16),&DAT_0800a69c);\n        value5 = find_value_or_default_08007376((int)*(char *)(i2cPins + 0x16),&DAT_0800a69c);\n        shiftValue2 = (value4 >> 3 & 1) << 4 | value5 & 7;\n        shiftValue4 = 3;\n        pinValue1 = find_value_or_default_08007376((int)*(char *)(i2cPins + 0x16),&DAT_0800a69c);\n        shiftValue3 = (uint)(pinValue1 << 0x1a) >> 0x1e;\n        pinValue1 = find_value_or_default_08007376((int)*(char *)(i2cPins + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        value5 = 1;\n        value4 = _DAT_40021018;\n        switch((uint)(pinValue1 << 0x11) >> 0x19) {\n        case 1:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = value5;\n          break;\n        case 2:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 3:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = value5;\n          break;\n        case 4:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 5:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = value5;\n          break;\n        case 6:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 7:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = value5;\n          break;\n        case 8:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 9:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = value5;\n          break;\n        case 10:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = value5;\n          break;\n        case 0xb:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0xc:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = value5;\n          break;\n        case 0xd:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = value5;\n          break;\n        case 0xe:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0xf:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = value5;\n          break;\n        case 0x10:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = value5;\n          break;\n        case 0x11:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = value5;\n          break;\n        case 0x12:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x13:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = value5;\n          break;\n        case 0x14:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = value5;\n          break;\n        case 0x15:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x16:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x17:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x1b:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x1c:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x21:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = value5;\n          break;\n        case 0x22:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x23:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = value5;\n          break;\n        case 0x24:\n          value4 = 0x40010000;\n          value5 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = value5;\n        }\n        update_flags_080040e8(memoryAddress,&shiftValue1,value4,value5);\n        i2cPins[1] = *i2cPins;\n        i2cPins[2] = value1;\n        i2cPins[3] = 0;\n        i2cPins[4] = value3;\n        i2cPins[7] = 0xff;\n        i2cPins[5] = value2;\n        i2cPins[6] = 0;\n        i2cPins[8] = 0;\n        i2cPins[9] = 0;\n        *(undefined *)((int)i2cPins + 0x41) = 0;\n        update_value_08003f30((int)*(char *)((int)i2cPins + 0x5a),0,1);\n        set_bit_in_array_08003f94((int)*(char *)((int)i2cPins + 0x5a));\n        update_value_08003f30((int)*(char *)((int)i2cPins + 0x5b),0,1);\n        set_bit_in_array_08003f94((int)*(char *)((int)i2cPins + 0x5b));\n        calculate_shift_080045c0(nextParam1);\n        *(undefined *)((int)i2cPins + 0x5d) = value4;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_pins_080077b0",
                "param_1": "i2cPins",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "iVar1": "pinValue1",
                "iVar2": "pinValue2",
                "uVar3": "memoryAddress",
                "uVar4": "value4",
                "uVar5": "value5",
                "piVar6": "nextParam1",
                "local_38": "shiftValue1",
                "local_34": "shiftValue2",
                "local_30": "shiftValue3",
                "local_2c": "shiftValue4"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "process_and_check_input_08007e74",
            "code": "\nint processAndCheckInput_08007e74(int inputSize,undefined4 paramTwo,undefined4 paramThree,undefined4 paramFour)\n\n{\n  int globalValue;\n  int processResult;\n  uint differenceValue;\n  int loopStatus;\n  int pointerOffset;\n  undefined4 paramFourCopy;\n  \n  paramFourCopy = paramFour;\n  globalValue = get_global_value_08003760();\n  differenceValue = 0;\n  loopStatus = 2;\n  do {\n    pointerOffset = inputSize + 4;\n    processResult = process_input_08004728(pointerOffset,paramTwo,paramThree,paramFour,paramFourCopy);\n    if (processResult == 0) {\n      loopStatus = 0;\n      while ((processResult = get_pointer_value_0800542a(pointerOffset), processResult != 0x20 && (loopStatus == 0))) {\n        processResult = get_global_value_08003760();\n        differenceValue = processResult - globalValue;\n        if (differenceValue < 0x65) {\n          processResult = get_pointer_value_08005430(pointerOffset);\n          if (processResult != 0) {\n            loopStatus = 2;\n          }\n        }\n        else {\n          loopStatus = 1;\n        }\n      }\n    }\n    processResult = get_pointer_value_08005430(pointerOffset);\n  } while ((processResult == 4) && (differenceValue < 100));\n  return loopStatus;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "process_and_check_input_08007e74",
                "param_1": "inputSize",
                "param_2": "paramTwo",
                "param_3": "paramThree",
                "param_4": "paramFour",
                "iVar1": "globalValue",
                "iVar2": "processResult",
                "uVar3": "differenceValue",
                "iVar4": "loopStatus",
                "iVar5": "pointerOffset",
                "uVar6": "paramFourCopy"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copyData_08007ede(int destAddress,int srcAddress,uint size)\n\n{\n  uint index;\n  \n  if (0x20 < size) {\n    return 2;\n  }\n  for (index = 0; index < size; index = index + 1 & 0xff) {\n    *(undefined *)(destAddress + index + 0x68) = *(undefined *)(srcAddress + index);\n    *(char *)(destAddress + 0x88) = *(char *)(destAddress + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "destAddress",
                "param_2": "srcAddress",
                "param_3": "size",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "process_and_check_data_08007f0e",
            "code": "\nint processAndCheckData_08007f0e(int dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int globalValue;\n  int result;\n  uint difference;\n  int status;\n  int tempPointer;\n  undefined4 originalParam4;\n  \n  originalParam4 = param4;\n  globalValue = getGlobalValue();\n  difference = 0;\n  status = 2;\n  do {\n    tempPointer = dataPointer + 4;\n    result = process_data_080047f4(tempPointer,param2,param3,param4,originalParam4);\n    if (result == 0) {\n      status = 0;\n      while ((result = get_pointer_value_0800542a(tempPointer), result != 0x20 && (status == 0))) {\n        result = getGlobalValue();\n        difference = result - globalValue;\n        if (difference < 0x65) {\n          result = get_pointer_value_08005430(tempPointer);\n          if (result != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    result = get_pointer_value_08005430(tempPointer);\n  } while ((result == 4) && (difference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "process_and_check_data_08007f0e",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "globalValue",
                "iVar2": "result",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "tempPointer",
                "uVar6": "originalParam4",
                "get_global_value_08003760()": "getGlobalValue()"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_08007f78",
            "code": "\nint subtractFour_08007f78(int inputValue)\n\n{\n  return inputValue + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_memory_08007f7c",
            "code": "\nvoid update_memory_08007f7c(int address,int value)\n\n{\n  if (address != 0) {\n    if (value != 0) {\n      *(int *)(address + 0x60) = value;\n      init_memory(address + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_memory_08007f7c",
                "param_1": "address",
                "param_2": "value",
                "initialize_memory_080049e0": "init_memory"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_memory_08007f8e",
            "code": "\nvoid updateMemory_08007f8e(int memoryAddress,int value)\n\n{\n  if (memoryAddress != 0) {\n    if (value != 0) {\n      *(int *)(memoryAddress + 100) = value;\n      initializeMemory(memoryAddress + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_memory_08007f8e",
                "param_1": "memoryAddress",
                "param_2": "value",
                "initialize_memory_080049e0": "initializeMemory"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "process_data_08007fa0",
            "code": "\nvoid processData_08007fa0(int input1,int input2,int input3,undefined4 input4)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (input3 == *(int *)(input1 + 0xc)) {\n    if (input2 == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      validateAndInitData(input1,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    checkParamValidity(input1,result + 0x68,0x20,8,input4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "process_data_08007fa0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "subtract_four_08007f78": "subtractFour",
                "validate_and_initialize_data_080048c8": "validateAndInitData",
                "check_param_validity_08004954": "checkParamValidity"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "initialize_and_execute_08007ff0",
            "code": "\nvoid initialize_and_execute_08007ff0(undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initialize_memory(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "initialize_and_execute_08007ff0",
                "param_1": "param",
                "iVar1": "result",
                "subtract_four_08007f78": "subtract_four",
                "initialize_memory_080049e0": "initialize_memory"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "initialize_if_memory_not_initialized_08008020",
            "code": "\nvoid initialize_if_memory_not_initialized_08008020(undefined4 input_param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initialize_memory(input_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "initialize_if_memory_not_initialized_08008020",
                "param_1": "input_param",
                "iVar1": "result",
                "subtract_four_08007f78": "subtract_four",
                "initialize_memory_080049e0": "initialize_memory"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "configure_uart_pins_08008078",
            "code": "\n\n\nvoid configure_uart_pins_08008078(int *pins)\n\n{\n  int uartPinValue;\n  int peripheralValue;\n  undefined4 memoryAddress;\n  uint pinValue;\n  uint pinMask;\n  uint pinConfig1;\n  uint pinConfig2;\n  undefined4 flag;\n  \n  if (pins != (int *)0x0) {\n    uartPinValue = get_value_or_default_08007320((int)*(char *)(pins + 0x16),&DAT_0800a864);\n    peripheralValue = get_value_or_default_08007320((int)*(char *)((int)pins + 0x59),&DAT_0800a81c);\n    if ((peripheralValue == 0) || (uartPinValue == 0)) {\n      process_data_080098d8(\"ERROR: at least one UART pin has no peripheral\\n\",peripheralValue);\n    }\n    else {\n      uartPinValue = compare_and_return_non_zero_080073ae(uartPinValue);\n      *pins = uartPinValue;\n      if (uartPinValue == 0) {\n        process_data_080098d8(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPinValue == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pins + 0x11) = 0;\n          *(undefined *)((int)pins + 0x5a) = 0x25;\n        }\n        else if (uartPinValue == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pins + 0x11) = 1;\n          *(undefined *)((int)pins + 0x5a) = 0x26;\n        }\n        else if (uartPinValue == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pins + 0x11) = 2;\n          *(undefined *)((int)pins + 0x5a) = 0x27;\n        }\n        memoryAddress = get_memory_address_08006bb8((uint)((int)*(char *)((int)pins + 0x59) << 0x18) >> 0x1c);\n        pinValue = find_value_or_default_08007376((int)*(char *)((int)pins + 0x59),&DAT_0800a81c);\n        pinMask = 1 << (*(byte *)((int)pins + 0x59) & 0xf) & 0xffff;\n        pinConfig1 = (pinValue >> 3 & 1) << 4 | pinValue & 7;\n        pinConfig2 = (pinValue << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinValue << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        flag = 3;\n        update_flags_080040e8(memoryAddress,&pinMask);\n        memoryAddress = get_memory_address_08006bb8((uint)((int)*(char *)(pins + 0x16) << 0x18) >> 0x1c);\n        pinValue = find_value_or_default_08007376((int)*(char *)(pins + 0x16),&DAT_0800a864);\n        pinMask = 1 << (*(byte *)(pins + 0x16) & 0xf) & 0xffff;\n        pinConfig1 = (pinValue >> 3 & 1) << 4 | pinValue & 7;\n        pinConfig2 = (pinValue << 0x1a) >> 0x1e;\n        update_flags_080040e8(memoryAddress,&pinMask);\n        (&DAT_200006c0)[*(byte *)(pins + 0x11)] = pins + 1;\n        pins[1] = *pins;\n        pins[2] = pins[0x12];\n        pins[3] = pins[0x13];\n        pins[4] = pins[0x14];\n        pins[5] = pins[0x15];\n        pins[6] = 0xc;\n        pins[7] = 0;\n        pins[8] = 0;\n        process_data_0800674e(pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "configure_uart_pins_08008078",
                "param_1": "pins",
                "iVar1": "uartPinValue",
                "iVar2": "peripheralValue",
                "uVar3": "memoryAddress",
                "uVar4": "pinValue",
                "local_20": "pinMask",
                "local_1c": "pinConfig1",
                "local_18": "pinConfig2",
                "local_14": "flag"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initializeUART_080084b0(void)\n\n{\n  int value1;\n  undefined4 value2;\n  \n  value1 = get_value_or_default_08007320(2,&DAT_0800a864);\n  if (value1 != 0) {\n    value2 = get_value_or_default_08007320(2,&DAT_0800a864);\n    DAT_20000075 = get_valid_index_0800734a(value2,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    configure_uart_pins_08008078(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_data_08008500",
            "code": "\nuint processData_08008500(undefined4 dataSize,uint flag)\n\n{\n  int globalVar1;\n  int globalVar2;\n  uint index;\n  \n  globalVar1 = get_global_value_08003760();\n  globalVar2 = get_value_or_default_08007320(2,&DAT_0800a864);\n  if (globalVar2 == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (globalVar2 = get_value_or_default_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != globalVar2))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_uart_080084b0(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    globalVar2 = verify_and_process_data_080067ac((&DAT_200006c0)[index],dataSize,flag & 0xffff,1000);\n    if (globalVar2 == 0) {\n      return flag;\n    }\n    globalVar2 = get_global_value_08003760();\n  } while ((uint)(globalVar2 - globalVar1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_data_08008500",
                "param_1": "dataSize",
                "param_2": "flag",
                "iVar1": "globalVar1",
                "iVar2": "globalVar2",
                "uVar3": "index"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_bytes_match_080085b8",
            "code": "\nbool checkBytesMatch_080085b8(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combine_bytes_08006b1c((&DAT_200006c0)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_bytes_match_080085b8",
                "param_1": "inputValue",
                "uVar1": "combinedBytes"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "is_combined_value_valid_080085dc",
            "code": "\nbool isCombinedValueValid_080085dc(int inputValue)\n\n{\n  uint combinedValue;\n  \n  combinedValue = combineBytes((&DAT_200006c0)[*(byte *)(inputValue + 0x44)]);\n  return (combinedValue & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "is_combined_value_valid_080085dc",
                "param_1": "inputValue",
                "uVar1": "combinedValue",
                "combine_bytes_08006b1c": "combineBytes"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "parse_input_08008600",
            "code": "\nundefined4 parseInput_08008600(int inputSize,undefined *outputBuffer,undefined4 arg1,undefined4 arg2)\n\n{\n  int matchResult;\n  \n  if (inputSize == 0) {\n    return 0xffffffff;\n  }\n  matchResult = check_bytes_match_080085b8();\n  if (matchResult == 0) {\n    *outputBuffer = *(undefined *)(inputSize + 0x45);\n    validate_input_080068d6((&DAT_200006c0)[*(byte *)(inputSize + 0x44)],inputSize + 0x45,1,&DAT_200006c0,arg2);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "parse_input_08008600",
                "param_1": "inputSize",
                "param_2": "outputBuffer",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "matchResult"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "update_data_0800863c",
            "code": "\nvoid updateData_0800863c(int dataPtr,undefined4 newValue,undefined4 param_3,undefined4 param_4)\n\n{\n  int matchResult;\n  uint byteValue;\n  \n  if (dataPtr != 0) {\n    matchResult = check_bytes_match_080085b8();\n    if (matchResult == 0) {\n      byteValue = (uint)*(byte *)(dataPtr + 0x44);\n      *(undefined4 *)(&DAT_20000670 + byteValue * 4) = newValue;\n      *(int *)(&DAT_20000684 + byteValue * 4) = dataPtr;\n      updateValue((int)*(char *)(dataPtr + 0x5a),0,1,byteValue,param_4);\n      setBitInArray((int)*(char *)(dataPtr + 0x5a));\n      validateInput((&DAT_200006c0)[*(byte *)(dataPtr + 0x44)],dataPtr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "update_data_0800863c",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "matchResult",
                "uVar2": "byteValue",
                "update_value_08003f30": "updateValue",
                "set_bit_in_array_08003f94": "setBitInArray",
                "validate_input_080068d6": "validateInput"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_data_and_initialize_08008694",
            "code": "\nvoid updateDataAndInitialize_08008694(int dataPointer,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataPointer != 0) {\n    byteValue = *(byte *)(dataPointer + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = dataPointer;\n    update_value_08003f30((int)*(char *)(dataPointer + 0x5a),0,2);\n    set_bit_in_array_08003f94((int)*(char *)(dataPointer + 0x5a));\n    initialize_data_0800688e((&DAT_200006c0)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 100) + (uint)*(ushort *)(dataPointer + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_data_and_initialize_08008694",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_value_index_080086e8",
            "code": "\nuint find_value_index_080086e8(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_value_index_080086e8",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_function_based_on_index_0800870c",
            "code": "\nvoid executeFunctionBasedOnIndex_0800870c(void)\n\n{\n  uint valueIndex;\n  \n  valueIndex = findValueIndex();\n  if (valueIndex < 5) {\n    (**(code **)(&DAT_20000670 + valueIndex * 4))(*(undefined4 *)(&DAT_20000684 + valueIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_function_based_on_index_0800870c",
                "uVar1": "valueIndex",
                "find_value_index_080086e8": "findValueIndex"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "initialize_data_and_index_08008730",
            "code": "\nvoid initializeDataAndIndex_08008730(void)\n\n{\n  uint valueIndex;\n  int result;\n  int dataPointer;\n  \n  valueIndex = findValueIndex();\n  dataPointer = *(int *)(&DAT_200006ac + valueIndex * 4);\n  if ((valueIndex < 5) && (result = (**(code **)(&DAT_20000698 + valueIndex * 4))(dataPointer), result != -1)) {\n    initializeData((&DAT_200006c0)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 100) + (uint)*(ushort *)(dataPointer + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "initialize_data_and_index_08008730",
                "uVar1": "valueIndex",
                "iVar2": "result",
                "iVar3": "dataPointer",
                "find_value_index_080086e8": "findValueIndex",
                "initialize_data_0800688e": "initializeData"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocateMemory_08008804(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocatedMemory = DAT_200006d4;\n  if (DAT_200006d4 + size <= stackEnd) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocatedMemory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "stackEnd"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "initialize_return_value_08008840",
            "code": "\nundefined4 initializeReturnValue_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "initialize_return_value_08008840"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "initialize_memory_08008846",
            "code": "\nundefined4 initializeMemory_08008846(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "initialize_memory_08008846",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "initialize_application_08008850",
            "code": "\nundefined4 initializeApplication_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "initialize_application_08008850"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "initialize_application_08008854",
            "code": "\nvoid initializeApplication_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "initialize_application_08008854",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_08008858",
            "code": "\nundefined4 initialize_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_08008858"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_data_0800885c",
            "code": "\nvoid process_data_0800885c(undefined4 input_param1,undefined4 data_param1,undefined4 data_param2,undefined4 data_param3)\n\n{\n  process_data_0800885c_08008500(data_param1,data_param2,data_param2,data_param3,data_param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_data_0800885c",
                "param_1": "input_param1",
                "param_2": "data_param1",
                "param_3": "data_param2",
                "param_4": "data_param3"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "initialize_function_0800887c",
            "code": "\nuint32_t initializeFunction_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "initialize_function_0800887c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "process_data_08008880",
            "code": "\nuint process_data_08008880(uint input_value)\n\n{\n  bool is_less_than_threshold;\n  char result_character;\n  uint output_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_less_than_threshold = true;\n    }\n    else {\n      is_less_than_threshold = false;\n    }\n  }\n  else {\n    is_less_than_threshold = input_value < 0x3c;\n  }\n  if (is_less_than_threshold) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    result_character = (&DAT_0800a908)[input_value];\n  }\n  else {\n    result_character = -1;\n  }\n  if (result_character == -1) {\n    output_value = 0;\n  }\n  else {\n    output_value = validate_and_process_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return output_value >> (0xc - DAT_20000088 & 0xff);\n      }\n      return output_value << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return output_value;\n}\n\n",
            "renaming": {
                "FUN_08008880": "process_data_08008880",
                "param_1": "input_value",
                "bVar1": "is_less_than_threshold",
                "cVar2": "result_character",
                "uVar3": "output_value"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "process_data_080088e0",
            "code": "\nvoid process_data_080088e0(uint device_id,uint data_value)\n\n{\n  int check_result;\n  int bit_value;\n  \n  if (device_id < 0x3c) {\n    bit_value = (int)(char)(&DAT_0800a908)[device_id];\n  }\n  else {\n    bit_value = -1;\n  }\n  if (bit_value != -1) {\n    check_result = check_device_params(bit_value,&DAT_0800a6cc);\n    if (check_result == 0) {\n      process_device_data(device_id,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          data_value = data_value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          data_value = data_value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (data_value < 0x80) {\n        update_memory_value(device_id,0);\n      }\n      else {\n        update_memory_value(device_id,1);\n      }\n    }\n    else {\n      check_result = check_bit_value(bit_value,&DAT_200006d8);\n      if (check_result == 0) {\n        set_bit_in_array(bit_value,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          data_value = data_value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          data_value = data_value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      init_or_update_memory(bit_value,0x3e418,0xff,data_value,check_result == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "process_data_080088e0",
                "param_1": "device_id",
                "param_2": "data_value",
                "iVar1": "check_result",
                "iVar2": "bit_value",
                "check_param_0800738a": "check_device_params",
                "process_device_data_08008990": "process_device_data",
                "update_memory_value_08008a24": "update_memory_value",
                "check_bit_value_08006b28": "check_bit_value",
                "set_bit_in_array_08006b3e": "set_bit_in_array",
                "initialize_or_update_memory_08007118": "init_or_update_memory"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "process_device_data_08008990",
            "code": "\nvoid process_device_data_08008990(uint device_index,undefined4 device_mode,undefined4 param_value,undefined1 *data_array)\n\n{\n  int bit_value_check_result;\n  undefined1 *bit_value_array_ptr;\n  int bit_value;\n  \n  if (device_index < 0x3c) {\n    bit_value = (int)(char)(&DAT_0800a908)[device_index];\n    bit_value_array_ptr = &DAT_0800a908;\n  }\n  else {\n    bit_value = -1;\n    bit_value_array_ptr = data_array;\n  }\n  if (bit_value != -1) {\n    bit_value_check_result = check_bit_value(bit_value,&DAT_200006d8,param_value,bit_value_array_ptr,data_array);\n    if (bit_value_check_result != 0) {\n      bit_value_check_result = check_param(bit_value,&DAT_0800a6cc);\n      if (bit_value_check_result != 0) {\n        process_data(bit_value);\n      }\n      update_bit(bit_value,&DAT_200006d8);\n    }\n    switch(device_mode) {\n    case 0:\n      initialize_device(bit_value,0);\n      break;\n    case 1:\n      initialize_device(bit_value,1,0);\n      break;\n    case 2:\n      initialize_device(bit_value,0,1);\n      break;\n    case 3:\n      initialize_device(bit_value,0,2);\n    }\n    set_bit_in_array(bit_value,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "process_device_data_08008990",
                "param_1": "device_index",
                "param_2": "device_mode",
                "param_3": "param_value",
                "param_4": "data_array",
                "iVar1": "bit_value_check_result",
                "puVar2": "bit_value_array_ptr",
                "iVar3": "bit_value",
                "check_bit_value_08006b28": "check_bit_value",
                "check_param_0800738a": "check_param",
                "process_data_080071e4": "process_data",
                "update_bit_08006b5c": "update_bit",
                "initialize_device_08007258": "initialize_device",
                "set_bit_in_array_08006b3e": "set_bit_in_array"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "update_memory_value_08008a24",
            "code": "\nvoid updateMemoryValue_08008a24(uint index,undefined4 value,undefined4 flag,undefined1 *data)\n\n{\n  int result;\n  undefined4 address;\n  undefined1 *pointer;\n  uint bitValue;\n  \n  if (index < 0x3c) {\n    bitValue = (uint)(char)(&DAT_0800a908)[index];\n    pointer = &DAT_0800a908;\n  }\n  else {\n    bitValue = 0xffffffff;\n    pointer = data;\n  }\n  if ((bitValue != 0xffffffff) &&\n     (result = check_bit_value_08006b28(bitValue,&DAT_200006ec,flag,pointer,data), result != 0)) {\n    address = get_memory_address_08006b7c((bitValue << 0x18) >> 0x1c);\n    set_param_value_based_on_flag_080072d8(address,1 << (bitValue & 0xf) & 0xffff,value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "update_memory_value_08008a24",
                "param_1": "index",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "address",
                "puVar3": "pointer",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_and_return_bit_08008a6c",
            "code": "\nchar check_and_return_bit_08008a6c(uint input)\n\n{\n  char result;\n  int bit_check_result;\n  undefined4 memory_address;\n  uint index;\n  \n  if (input < 0x3c) {\n    index = (uint)(char)(&DAT_0800a908)[input];\n  }\n  else {\n    index = 0xffffffff;\n  }\n  if (index == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    bit_check_result = check_bit_value_08006b28(index,&DAT_200006ec);\n    if (bit_check_result == 0) {\n      result = '\\0';\n    }\n    else {\n      memory_address = get_memory_address_08006b7c((index << 0x18) >> 0x1c);\n      result = check_bit_and_return_080072f0(memory_address,1 << (index & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_and_return_bit_08008a6c",
                "param_1": "input",
                "cVar1": "result",
                "iVar2": "bit_check_result",
                "uVar3": "memory_address",
                "uVar4": "index"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_global_value_08008abc",
            "code": "\nvoid initialize_global_value_08008abc(void)\n\n{\n  initialize_global_value_08008abc_0800723c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_global_value_08008abc"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_result_08008afa",
            "code": "\nushort calculate_result_08008afa(int input_value)\n\n{\n  result (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_result_08008afa",
                "param_1": "input_value",
                "return": "result"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "update_input_08008b66",
            "code": "\nvoid updateInput_08008b66(int input)\n\n{\n  int result;\n  ushort newIndex;\n  undefined newValue;\n  \n  result = parse_input_08008600(input,&newValue);\n  if ((result == 0) &&\n     (newIndex = *(short *)(input + 0x60) + 1U & 0x3f, newIndex != *(ushort *)(input + 0x62))) {\n    *(undefined *)(*(int *)(input + 0x5c) + (uint)*(ushort *)(input + 0x60)) = newValue;\n    *(ushort *)(input + 0x60) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "update_input_08008b66",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_function_08008c20",
            "code": "\nvoid initializeFunction_08008c20(int functionPtr)\n\n{\n  *(int *)(functionPtr + 0x130) = functionPtr + 0x11;\n  *(undefined2 *)(functionPtr + 0x134) = 0;\n  *(undefined2 *)(functionPtr + 0x136) = 0;\n  *(int *)(functionPtr + 0x138) = functionPtr + 0x51;\n  *(undefined2 *)(functionPtr + 0x13c) = 0;\n  *(undefined2 *)(functionPtr + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_function_08008c20",
                "param_1": "functionPtr"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "configure_uart_08008c44",
            "code": "\nvoid configureUART_08008c44(int baseAddress,undefined4 baudRate,byte configBits)\n\n{\n  uint errorFlag;\n  byte configMask;\n  int configValue;\n  code *assertionFailureFunction;\n  \n  *(undefined4 *)(baseAddress + 0x11c) = baudRate;\n  *(byte *)(baseAddress + 0x140) = configBits;\n  configMask = configBits & 7;\n  if (configMask == 4) {\n    configValue = 7;\n  }\n  else if (configMask == 6) {\n    configValue = 8;\n  }\n  else if (configMask == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((configBits & 0x30) == 0x30) {\n    *(undefined4 *)(baseAddress + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((configBits & 0x20) == 0) {\n    *(undefined4 *)(baseAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(baseAddress + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((configBits & 8) == 0) {\n    *(undefined4 *)(baseAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(baseAddress + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(baseAddress + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(baseAddress + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    configure_uart_pins_08008078(baseAddress + 0xd4);\n    update_data_0800863c(baseAddress + 0xd4,0x8008b67);\n    return;\n  }\n  assertionFailureFunction = (code *)0x8008cee;\n  handle_assertion_failure_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (errorFlag < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[errorFlag];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*assertionFailureFunction)(0,errorFlag,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "configure_uart_08008c44",
                "param_1": "baseAddress",
                "param_2": "baudRate",
                "param_3": "configBits",
                "extraout_r1": "errorFlag",
                "bVar1": "configMask",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "assertionFailureFunction"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "process_param_08008d00",
            "code": "\nvoid processParam_08008d00(int dataAddress,uint paramValue)\n\n{\n  undefined result;\n  code *jumpTable;\n  \n  if (paramValue < 0x3c) {\n    result = (&DAT_0800a908)[paramValue];\n  }\n  else {\n    result = 0xff;\n  }\n  *(undefined *)(dataAddress + 0x12d) = result;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "process_param_08008d00",
                "param_1": "dataAddress",
                "param_2": "paramValue",
                "uVar1": "result",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "update_parameter_value_08008d18",
            "code": "\nvoid updateParameterValue_08008d18(int baseAddress,uint index)\n\n{\n  undefined updatedValue;\n  \n  if (index < 0x3c) {\n    updatedValue = (&DAT_0800a908)[index];\n  }\n  else {\n    updatedValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "update_parameter_value_08008d18",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_param1_08008d30",
            "code": "\nundefined4 *\ninitialize_param1_08008d30(undefined4 *param_array,undefined4 param_value,undefined4 param_value_2,undefined4 param_value_3)\n\n{\n  undefined valid_index;\n  \n  param_array[1] = 0;\n  param_array[2] = 1000;\n  *param_array = &PTR_LAB_08008ba4_1_0800aab8;\n  if (param_array == (undefined4 *)&DAT_20000700) {\n    process_param(&DAT_20000700,0,param_value_2,&DAT_20000700,param_value_3);\n    update_parameter_value(&DAT_20000700,1);\n  }\n  else {\n    valid_index = get_valid_index(param_value,&DAT_0800a81c);\n    *(undefined *)((int)param_array + 0x12d) = valid_index;\n    valid_index = get_valid_index(param_value,&DAT_0800a864);\n    *(undefined *)(param_array + 0x4b) = valid_index;\n  }\n  initialize_function(param_array);\n  return param_array;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_param1_08008d30",
                "param_1": "param_array",
                "param_2": "param_value",
                "param_3": "param_value_2",
                "param_4": "param_value_3",
                "uVar1": "valid_index",
                "process_param_08008d00": "process_param",
                "update_parameter_value_08008d18": "update_parameter_value",
                "get_valid_index_0800734a": "get_valid_index",
                "initialize_function_08008c20": "initialize_function"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_if_param1_is_1_08008d8c",
            "code": "\nvoid initialize_if_param1_is_1_08008d8c(int input_value,int condition_value,undefined4 initialize_value_1,undefined4 initialize_value_2)\n\n{\n  if (input_value != 1) {\n    return;\n  }\n  if (condition_value == 0xffff) {\n    initialize_function(&DAT_20000700,0x40004400,initialize_value_1,0xffff,initialize_value_2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_if_param1_is_1_08008d8c",
                "param_1": "input_value",
                "param_2": "condition_value",
                "param_3": "initialize_value_1",
                "param_4": "initialize_value_2",
                "initialize_param1_08008d30": "initialize_function"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_0800ab0c;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_data_if_param1_is_1_and_param2_is_0xffff_08008e14",
            "code": "\nvoid initialize_data_if_param1_is_1_and_param2_is_0xffff_08008e14(int input_param1,int input_param2)\n\n{\n  if ((input_param1 == 1) && (input_param2 == 0xffff)) {\n    initialize_data_08008df8(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_data_if_param1_is_1_and_param2_is_0xffff_08008e14",
                "param_1": "input_param1",
                "param_2": "input_param2"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_interpolation_08008ef4",
            "code": "\nint calculate_interpolation_08008ef4(int value_a,int value_b,int value_c,int interpolation_a,int interpolation_b)\n\n{\n  result (unsigned_integer)((interpolation_b - interpolation_a) * (value_a - value_b)) / (unsigned_integer)(value_c - value_b) + interpolation_a;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_interpolation_08008ef4",
                "param_1": "value_a",
                "param_2": "value_b",
                "param_3": "value_c",
                "param_4": "interpolation_a",
                "param_5": "interpolation_b",
                "uint": "unsigned_integer",
                "return": "result"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_system_08008f0e",
            "code": "\nvoid initialize_system_08008f0e(void)\n\n{\n  update_data_register(3);\n  initialize_devices();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_system_08008f0e",
                "update_data_register_08003f0c": "update_data_register",
                "initialize_devices_080036a2": "initialize_devices"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "run_gateway_08008f1c",
            "code": "\nvoid runGateway_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initializeGateway();\n  do {\n    processInput();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "run_gateway_08008f1c",
                "initialize_gateway_08001b48": "initializeGateway",
                "process_and_handle_input_080022f8": "processInput"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\nchar count_set_bits_08008f3c(uint number)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "param_1": "number",
                "cVar1": "bit_count"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_parameters_08008f78",
            "code": "\nvoid initializeParameters_08008f78(int status,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    shift_parameters_080090c2(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_parameters_08008f78",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "process_data_08009084",
            "code": "\nvoid processData_08009084(int data)\n\n{\n  int count;\n  \n  if (*(int *)(data + 8) != 0) {\n    (**(code **)(data + 0xc))();\n    return;\n  }\n  handleInputAndProcess();\n  count = countSetBits();\n  if ((&DAT_20000858)[count * 5] != 0) {\n    processData_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "param_1": "data",
                "iVar1": "count",
                "handle_input_and_process_0800a18c": "handleInputAndProcess",
                "count_set_bits_08008f3c": "countSetBits"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_process_data_08009094",
            "code": "\nvoid checkAndProcessData_08009094(void)\n\n{\n  int bitCount;\n  \n  bitCount = countSetBits();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_process_data_08009094",
                "iVar1": "bitCount",
                "count_set_bits_08008f3c": "countSetBits",
                "process_data_08009084": "processData"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "shift_parameters_080090c2",
            "code": "\nvoid shiftParameters_080090c2(undefined4 destination,undefined4 source)\n\n{\n  shift_unsigned_long_long_08009108(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "shift_parameters_080090c2",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "handle_assertion_failure_080090cc",
            "code": "\nvoid handleAssertionFailure_080090cc(undefined4 file,undefined4 line,char *message,undefined4 function)\n\n{\n  undefined4 dataAddress;\n  char *additionalInfo;\n  undefined8 processedInput;\n  undefined4 processedFunction;\n  \n  dataAddress = *(undefined4 *)(DAT_20000090 + 0xc);\n  processedFunction = function;\n  if (message == (char *)0x0) goto LAB_080090f0;\n  additionalInfo = \", function: \";\n  do {\n    process_and_extract_data_08009124(dataAddress,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,additionalInfo,message,processedFunction);\n    processedInput = process_and_handle_input_08009b5c();\n    line = (undefined4)((ulonglong)processedInput >> 0x20);\n    dataAddress = (undefined4)processedInput;\nLAB_080090f0:\n    message = \"\";\n    additionalInfo = message;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "handle_assertion_failure_080090cc",
                "param_1": "file",
                "param_2": "line",
                "param_3": "message",
                "param_4": "function",
                "uVar1": "dataAddress",
                "pcVar2": "additionalInfo",
                "uVar3": "processedInput",
                "uVar4": "processedFunction"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_unsigned_long_long_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftUnsignedLongLong_08009108(undefined4 source,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_unsigned_long_long_08009108",
                "param_1": "source",
                "param_2": "value"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "process_and_extract_data_08009124",
            "code": "\nvoid process_and_extract_data_08009124(undefined4 input_param_1,undefined4 input_param_2,undefined4 output_param_1,undefined4 output_param_2)\n\n{\n  undefined4 output_param_temp;\n  undefined4 output_param_temp_2;\n  \n  output_param_temp = output_param_1;\n  output_param_temp_2 = output_param_2;\n  process_extracted_data_0800937c(DAT_20000090,input_param_1,input_param_2,&output_param_temp,input_param_1,&output_param_temp);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "process_and_extract_data_08009124",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "output_param_1",
                "param_4": "output_param_2",
                "uStack_8": "output_param_temp",
                "uStack_4": "output_param_temp_2"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid executeFunctions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_for_param_08009190",
            "code": "\nvoid allocate_memory_for_param_08009190(undefined4 param)\n\n{\n  allocate_memory_08009270(DAT_20000090,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_for_param_08009190",
                "param_1": "param"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "process_data_080091a0",
            "code": "\nvoid process_data_080091a0(undefined4 input_data)\n\n{\n  process_data_080091a0_080091d8(DAT_20000090,input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "process_data_080091a0",
                "param_1": "input_data"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_to_buffer_080091b0",
            "code": "\nvoid copy_data_to_buffer_080091b0(int buffer_start,undefined *source_data,int data_length)\n\n{\n  undefined *source_data_end;\n  undefined *buffer_end;\n  \n  buffer_end = (undefined *)(buffer_start + -1);\n  source_data_end = source_data + data_length;\n  for (; source_data != source_data_end; source_data = source_data + 1) {\n    buffer_end = buffer_end + 1;\n    *buffer_end = *source_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_to_buffer_080091b0",
                "param_1": "buffer_start",
                "param_2": "source_data",
                "param_3": "data_length",
                "puVar1": "source_data_end",
                "puVar2": "buffer_end"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *buffer,undefined value,int size)\n\n{\n  undefined *end;\n  \n  end = buffer + size;\n  for (; buffer != end; buffer = buffer + 1) {\n    *buffer = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "process_data_080091d8",
            "code": "\nvoid processData_080091d8(undefined4 *results,int size,undefined4 value1,undefined4 value2)\n\n{\n  int **tempPtr;\n  int **currentPtr;\n  int **nextPtr;\n  int *offset;\n  int **prevPtr;\n  int **newPtr;\n  \n  if (size == 0) {\n    return;\n  }\n  newPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(size + -4));\n  }\n  FUNC_08009f48();\n  nextPtr = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    currentPtr = tempPtr;\n    DAT_2000098c = newPtr;\n  }\n  else {\n    nextPtr = DAT_2000098c;\n    if (newPtr < DAT_2000098c) {\n      currentPtr = (int **)*newPtr;\n      nextPtr = (int **)((int)newPtr + (int)currentPtr);\n      if (DAT_2000098c == nextPtr) {\n        offset = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        nextPtr = (int **)((int)offset + (int)currentPtr);\n        *newPtr = (int *)nextPtr;\n      }\n      newPtr[1] = (int *)DAT_2000098c;\n      DAT_2000098c = newPtr;\n    }\n    else {\n      do {\n        prevPtr = nextPtr;\n        nextPtr = (int **)prevPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newPtr);\n      currentPtr = (int **)*prevPtr;\n      if ((int **)((int)prevPtr + (int)currentPtr) == newPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n        *prevPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)prevPtr + (int)currentPtr)) {\n          offset = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)offset);\n          *prevPtr = (int *)currentPtr;\n          prevPtr[1] = (int *)nextPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)prevPtr + (int)currentPtr)) {\n        *results = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)newPtr + (int)*newPtr);\n        if (nextPtr == currentPtr) {\n          offset = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)offset + (int)*newPtr);\n          *newPtr = (int *)currentPtr;\n        }\n        newPtr[1] = (int *)nextPtr;\n        prevPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  FUNC_08009f4a(results,currentPtr,nextPtr,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "process_data_080091d8",
                "param_1": "results",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "extraout_r1": "tempPtr",
                "ppiVar1": "currentPtr",
                "ppiVar2": "nextPtr",
                "piVar3": "offset",
                "ppiVar4": "prevPtr",
                "ppiVar5": "newPtr"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocate_memory_08009270(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int offset;\n  uint *previous_block;\n  uint block_size;\n  uint *previous_block_next;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current_block = DAT_2000098c;\n    previous_block_next = DAT_2000098c;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_size = *previous_block - allocated_size;\n      if (-1 < (int)block_size) {\n        if (block_size < 0xc) {\n          if (previous_block_next == previous_block) {\n            current_block = (uint *)previous_block_next[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block_next != previous_block) {\n            previous_block_next[1] = (uint)current_block;\n            previous_block_next = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_size;\n          *(uint *)((int)previous_block + block_size) = allocated_size;\n          previous_block_next = (uint *)((int)previous_block + block_size);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block_next = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = initialize_memory_08009918(result);\n    }\n    current_block = (uint *)initialize_memory_08009918(result,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block_next = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block_next ||\n        (offset = initialize_memory_08009918(result,(int)previous_block_next - (int)current_block), offset != -1)))) {\n      *previous_block_next = allocated_size;\nLAB_080092d4:\n      FUNC_08009f4a(result);\n      allocated_size = (int)previous_block_next + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(previous_block_next + 1);\n      if (offset != 0) {\n        *(int *)((int)previous_block_next + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result = 0xc;\n    FUNC_08009f4a(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "offset",
                "puVar3": "previous_block",
                "uVar4": "block_size",
                "puVar5": "previous_block_next",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_data_0800932c",
            "code": "\nuint process_data_0800932c(int input_parameter,byte data_byte,byte **data_array)\n\n{\n  int temp_variable_1;\n  byte *temp_variable_2;\n  byte *temp_variable_3;\n  uint result;\n  \n  temp_variable_2 = data_array[2] + -1;\n  data_array[2] = temp_variable_2;\n  if ((-1 < (int)temp_variable_2) ||\n     (((int)data_array[6] <= (int)temp_variable_2 && (temp_variable_2 = (byte *)(uint)data_byte, temp_variable_2 != (byte *)0xa))))\n  {\n    temp_variable_2 = *data_array;\n    *data_array = temp_variable_2 + 1;\n    *temp_variable_2 = data_byte;\n    return (uint)data_byte;\n  }\n  if ((input_parameter != 0) && (*(int *)(input_parameter + 0x18) == 0)) {\n    initialize_data_structure();\n  }\n  if (data_array == (byte **)&DAT_0800aba4) {\n    data_array = *(byte ***)(input_parameter + 4);\n  }\n  else if (data_array == (byte **)&DAT_0800abc4) {\n    data_array = *(byte ***)(input_parameter + 8);\n  }\n  else if (data_array == (byte **)&DAT_0800ab84) {\n    data_array = *(byte ***)(input_parameter + 0xc);\n  }\n  data_array[2] = data_array[6];\n  temp_variable_3 = (byte *)(uint)*(ushort *)(data_array + 3);\n  temp_variable_1 = (int)temp_variable_3 << 0x1c;\n  if (((temp_variable_1 < 0) && (temp_variable_3 = data_array[4], temp_variable_3 != (byte *)0x0)) ||\n     (temp_variable_1 = process_data_0800932c_helper(input_parameter,data_array,temp_variable_1,temp_variable_3,temp_variable_2), temp_variable_1 == 0)) {\n    result = (uint)data_byte;\n    temp_variable_1 = (int)*data_array - (int)data_array[4];\n    if ((temp_variable_1 < (int)data_array[5]) || (temp_variable_1 = process_data_0800932c_another_helper(input_parameter,data_array), temp_variable_1 == 0)) {\n      data_array[2] = data_array[2] + -1;\n      temp_variable_2 = *data_array;\n      *data_array = temp_variable_2 + 1;\n      *temp_variable_2 = data_byte;\n      if ((byte *)(temp_variable_1 + 1) != data_array[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_variable_1 = process_data_0800932c_another_helper(input_parameter,data_array);\n      if (temp_variable_1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_data_0800932c",
                "param_1": "input_parameter",
                "param_2": "data_byte",
                "param_3": "data_array",
                "iVar1": "temp_variable_1",
                "pbVar2": "temp_variable_2",
                "pbVar3": "temp_variable_3",
                "uVar4": "result",
                "initialize_data_structure_08009d50": "initialize_data_structure",
                "process_data_08009a80": "process_data_helper",
                "process_data_08009c7c": "process_data_another_helper"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_data_08009358",
            "code": "\nint processData_08009358(undefined4 param1,undefined4 param2,undefined *data,int length)\n\n{\n  int result;\n  undefined *end;\n  int current;\n  \n  end = data + length;\n  current = length;\n  do {\n    if (data == end) {\n      return 0;\n    }\n    result = process_data_0800932c(param1,*data,param2,length,current);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_data_08009358",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end",
                "iVar3": "current"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "process_extracted_data_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint processExtractedData_0800937c(int data,undefined4 *paramArray,byte *dataString,int *output)\n\n{\n  int result;\n  int *tempPtr;\n  bool isDigit;\n  byte *currentChar;\n  byte *nextChar;\n  int processResult;\n  int tempVar;\n  int *outputPtr;\n  uint options;\n  int precision;\n  undefined4 unusedVar;\n  int intValue;\n  int totalLength;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined prefix;\n  undefined4 dataType;\n  \n  outputPtr = output;\n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    initialize_data_structure_08009d50();\n  }\n  if (paramArray == &DAT_0800aba4) {\n    paramArray = *(undefined4 **)(data + 4);\n  }\n  else if (paramArray == (undefined4 *)&DAT_0800abc4) {\n    paramArray = *(undefined4 **)(data + 8);\n  }\n  else if (paramArray == (undefined4 *)&DAT_0800ab84) {\n    paramArray = *(undefined4 **)(data + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(paramArray + 3) << 0x1c)) || (paramArray[4] == 0)) &&\n     (tempVar = process_data_08009a80(data,paramArray), tempVar != 0)) {\n    return -1;\n  }\n  totalLength = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = dataString;\nLAB_080093be:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  tempVar = (int)nextChar - (int)dataString;\n  if (tempVar != 0) {\n    result = process_data_08009358(data,paramArray,dataString,tempVar);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(paramArray + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalLength;\n    }\n    totalLength = totalLength + tempVar;\n  }\n  if (*nextChar == 0) goto LAB_08009568;\n  options = 0;\n  intValue = 0;\n  precision = -1;\n  unusedVar = 0;\n  prefix = 0;\n  dataType = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    tempVar = find_character_08009f2c(\"#-0+ \",*currentChar);\n    dataString = currentChar + 1;\n    if (tempVar == 0) break;\n    options = 1 << (tempVar + 0xf7ff54b0U & 0xff) | options;\n    currentChar = dataString;\n  }\n  if ((int)(options << 0x1b) < 0) {\n    prefix = 0x20;\n  }\n  if ((int)(options << 0x1c) < 0) {\n    prefix = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    tempPtr = outputPtr + 1;\n    tempVar = *outputPtr;\n    outputPtr = tempPtr;\n    if (tempVar < 0) {\n      intValue = -tempVar;\n      options = options | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    isDigit = false;\n    tempVar = intValue;\n    dataString = currentChar;\n    while( true ) {\n      if (9 < *dataString - 0x30) break;\n      tempVar = tempVar * 10 + (*dataString - 0x30);\n      isDigit = true;\n      dataString = dataString + 1;\n    }\n    if (!isDigit) goto LAB_080094a6;\n  }\n  intValue = tempVar;\nLAB_080094a6:\n  if (*dataString == 0x2e) {\n    if (dataString[1] == 0x2a) {\n      dataString = dataString + 2;\n      tempPtr = outputPtr + 1;\n      precision = *outputPtr;\n      outputPtr = tempPtr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      isDigit = false;\n      tempVar = 0;\n      precision = 0;\n      while( true ) {\n        dataString = dataString + 1;\n        if (9 < *dataString - 0x30) break;\n        tempVar = tempVar * 10 + (*dataString - 0x30);\n        isDigit = true;\n      }\n      if (isDigit) {\n        precision = tempVar;\n      }\n    }\n  }\n  tempVar = find_character_08009f2c(&DAT_0800ab56,*dataString,3);\n  if (tempVar != 0) {\n    dataString = dataString + 1;\n    options = options | 0x40 << (tempVar + 0xf7ff54aaU & 0xff);\n  }\n  conversionSpecifier = *dataString;\n  dataString = dataString + 1;\n  tempVar = find_character_08009f2c(\"efgEFG\",conversionSpecifier,6);\n  if (tempVar == 0) {\n    processResult = process_and_convert_data_08009698(data,&options,paramArray,0x8009359,&outputPtr);\n    if (processResult == -1) goto LAB_08009568;\n  }\n  else {\n    outputPtr = (int *)(((int)outputPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalLength = totalLength + processResult;\n  currentChar = dataString;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "process_extracted_data_0800937c",
                "param_1": "data",
                "param_2": "paramArray",
                "param_3": "dataString",
                "param_4": "output",
                "iVar1": "result",
                "piVar2": "tempPtr",
                "bVar3": "isDigit",
                "pbVar4": "currentChar",
                "pbVar5": "nextChar",
                "unaff_r9": "processResult",
                "iVar6": "tempVar",
                "local_8c": "outputPtr",
                "local_88": "options",
                "local_7c": "intValue",
                "local_84": "precision",
                "local_80": "unusedVar",
                "local_74": "totalLength",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "prefix",
                "local_30": "dataType"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocessData_080095a8(undefined4 inputParam,uint *dataArray,uint *outputPtr,undefined4 param4,code *callbackFunc)\n\n{\n  int loopIndex1;\n  int loopIndex2;\n  uint maxDataValue;\n  uint uVar4;\n  bool isConditionTrue;\n  \n  maxDataValue = dataArray[4];\n  if ((int)dataArray[4] < (int)dataArray[2]) {\n    maxDataValue = dataArray[2];\n  }\n  *outputPtr = maxDataValue;\n  if (*(char *)((int)dataArray + 0x43) != '\\0') {\n    *outputPtr = maxDataValue + 1;\n  }\n  if ((int)(*dataArray << 0x1a) < 0) {\n    *outputPtr = *outputPtr + 2;\n  }\n  if ((*dataArray & 6) == 0) {\n    for (loopIndex1 = 0; loopIndex1 < (int)(dataArray[3] - *outputPtr); loopIndex1 = loopIndex1 + 1) {\n      loopIndex2 = (*callbackFunc)(inputParam,param4,(int)dataArray + 0x19,1);\n      if (loopIndex2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxDataValue = (uint)*(byte *)((int)dataArray + 0x43);\n  if (maxDataValue != 0) {\n    maxDataValue = 1;\n  }\n  uVar4 = maxDataValue;\n  if ((int)(*dataArray << 0x1a) < 0) {\n    *(undefined *)((int)dataArray + maxDataValue + 0x43) = 0x30;\n    uVar4 = maxDataValue + 2;\n    *(undefined *)((int)dataArray + maxDataValue + 0x44) = *(undefined *)((int)dataArray + 0x45);\n  }\n  loopIndex1 = (*callbackFunc)(inputParam,param4,(int)dataArray + 0x43,uVar4);\n  if (loopIndex1 != -1) {\n    maxDataValue = dataArray[3];\n    isConditionTrue = (*dataArray & 6) != 4;\n    if (isConditionTrue) {\n      maxDataValue = 0;\n    }\n    uVar4 = 0;\n    if (!isConditionTrue) {\n      maxDataValue = maxDataValue - *outputPtr;\n    }\n    if (!isConditionTrue) {\n      maxDataValue = maxDataValue & ~((int)maxDataValue >> 0x1f);\n    }\n    if ((int)dataArray[4] < (int)dataArray[2]) {\n      maxDataValue = maxDataValue + (dataArray[2] - dataArray[4]);\n    }\n    while( true ) {\n      if (maxDataValue == uVar4) {\n        return 0;\n      }\n      loopIndex1 = (*callbackFunc)(inputParam,param4,(int)dataArray + 0x1a,1);\n      if (loopIndex1 == -1) break;\n      uVar4 = uVar4 + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "inputParam",
                "param_2": "dataArray",
                "param_3": "outputPtr",
                "param_4": "param4",
                "param_5": "callbackFunc",
                "iVar1": "loopIndex1",
                "iVar2": "loopIndex2",
                "uVar3": "maxDataValue",
                "bVar5": "isConditionTrue"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "process_and_convert_data_08009698",
            "code": "\nuint process_and_convert_data_08009698(undefined4 input_param_1,uint *input_data,undefined4 input_param_3,code *conversion_function,uint **output_data_ptr)\n\n{\n  byte byte_val;\n  int loop_counter;\n  uint *ptr;\n  int inner_loop_counter;\n  char *hex_digits;\n  uint temp_var;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint result;\n  uint temp_var2;\n  char *temp_ptr;\n  char *data_ptr;\n  uint local_vars [2];\n  \n  byte_val = *(byte *)(input_data + 6);\n  data_ptr = (char *)((int)input_data + 0x43);\n  if (byte_val != 0x6e) {\n    if (byte_val < 0x6f) {\n      if (byte_val != 99) {\n        if (byte_val < 100) {\n          if (byte_val == 0) goto LAB_08009852;\n          if (byte_val != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)input_data + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nLAB_080097e2:\n          temp_var = *input_data;\n          ptr = *output_data_ptr;\n          *output_data_ptr = ptr + 1;\n          if (((temp_var & 0x80) == 0) && ((int)(temp_var << 0x19) < 0)) {\n            result = (uint)*(ushort *)ptr;\n          }\n          else {\n            result = *ptr;\n          }\n          if ((int)(temp_var << 0x1f) < 0) {\n            *input_data = temp_var | 0x20;\n          }\n          if (result == 0) {\n            *input_data = *input_data & 0xffffffdf;\n          }\n          temp_var = 0x10;\nLAB_08009778:\n          *(undefined *)((int)input_data + 0x43) = 0;\n        }\n        else {\n          if ((byte_val != 100) && (byte_val != 0x69)) goto LAB_080096c8;\n          result = *input_data;\n          ptr = *output_data_ptr;\n          if ((result & 0x80) == 0) {\n            *output_data_ptr = ptr + 1;\n            if ((result & 0x40) == 0) goto LAB_080096e8;\n            result = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output_data_ptr = ptr + 1;\nLAB_080096e8:\n            result = *ptr;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)input_data + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          temp_var = 10;\n        }\n        temp_var2 = input_data[1];\n        input_data[2] = temp_var2;\n        temp_ptr = data_ptr;\n        if ((int)temp_var2 < 0) {\n          if (result != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)input_data + 0x42) = *hex_digits;\n          temp_ptr = (char *)((int)input_data + 0x42);\n        }\n        else {\n          *input_data = *input_data & 0xfffffffb;\n          if (result == 0) {\n            if (temp_var2 != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              temp_var2 = result / temp_var;\n              temp_ptr = temp_ptr + -1;\n              *temp_ptr = hex_digits[result - temp_var * temp_var2];\n              result = temp_var2;\n            } while (temp_var2 != 0);\n          }\n        }\n        if (((temp_var == 8) && ((int)(*input_data << 0x1f) < 0)) && ((int)input_data[1] <= (int)input_data[4]))\n        {\n          temp_ptr[-1] = '0';\n          temp_ptr = temp_ptr + -1;\n        }\n        input_data[4] = (int)data_ptr - (int)temp_ptr;\n        data_ptr = temp_ptr;\n        goto LAB_080097be;\n      }\n      ptr = *output_data_ptr;\n      *output_data_ptr = ptr + 1;\n      *(char *)((int)input_data + 0x42) = (char)*ptr;\nLAB_08009728:\n      data_ptr = (char *)((int)input_data + 0x42);\n      result = 1;\n    }\n    else {\n      if (byte_val != 0x73) {\n        if (byte_val < 0x74) {\n          if (byte_val == 0x6f) {\nLAB_0800974e:\n            result = *input_data;\n            ptr = *output_data_ptr;\n            if ((result & 0x80) == 0) {\n              *output_data_ptr = ptr + 1;\n              if ((result & 0x40) == 0) goto LAB_0800975c;\n              result = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output_data_ptr = ptr + 1;\nLAB_0800975c:\n              result = *ptr;\n            }\n            if (byte_val == 0x6f) {\n              temp_var = 8;\n            }\n            else {\n              temp_var = 10;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (byte_val == 0x70) {\n            *input_data = *input_data | 0x20;\nLAB_0800970e:\n            hex_digits = \"0123456789abcdef\";\n            *(undefined *)((int)input_data + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (byte_val == 0x75) goto LAB_0800974e;\n          if (byte_val == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)input_data + 0x42) = byte_val;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*output_data_ptr;\n      *output_data_ptr = (uint *)(ppcVar8 + 1);\n      data_ptr = *ppcVar8;\n      loop_counter = find_character_08009f2c(data_ptr,0,input_data[1]);\n      if (loop_counter != 0) {\n        input_data[1] = loop_counter - (int)data_ptr;\n      }\n      result = input_data[1];\n    }\n    input_data[4] = result;\n    *(undefined *)((int)input_data + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  result = *input_data;\n  ppuVar7 = (uint **)*output_data_ptr;\n  temp_var = input_data[5];\n  if ((result & 0x80) == 0) {\n    *output_data_ptr = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((result & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr = (short)temp_var;\n  }\n  else {\n    *output_data_ptr = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800983e:\n    *ptr = temp_var;\n  }\nLAB_08009852:\n  input_data[4] = 0;\nLAB_080097be:\n  loop_counter = process_data_080095a8(input_param_1,input_data,local_vars,input_param_3,conversion_function);\n  if ((loop_counter == -1) || (loop_counter = (*conversion_function)(input_param_1,input_param_3,data_ptr,input_data[4]), loop_counter == -1)) {\nLAB_080097d2:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*input_data << 0x1e) < 0) {\n      for (loop_counter = 0; loop_counter < (int)(input_data[3] - local_vars[0]); loop_counter = loop_counter + 1) {\n        inner_loop_counter = (*conversion_function)(input_param_1,input_param_3,(int)input_data + 0x19,1);\n        if (inner_loop_counter == -1) goto LAB_080097d2;\n      }\n    }\n    result = input_data[3];\n    if ((int)input_data[3] < (int)local_vars[0]) {\n      result = local_vars[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009698": "process_and_convert_data_08009698",
                "param_1": "input_param_1",
                "param_2": "input_data",
                "param_3": "input_param_3",
                "param_4": "conversion_function",
                "param_5": "output_data_ptr",
                "bVar1": "byte_val",
                "iVar2": "loop_counter",
                "puVar3": "ptr",
                "iVar4": "inner_loop_counter",
                "pcVar5": "hex_digits",
                "uVar6": "temp_var",
                "uVar9": "result",
                "uVar10": "temp_var2",
                "pcVar11": "temp_ptr",
                "pcVar12": "data_ptr",
                "local_24": "local_vars"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "process_data_080098d8",
            "code": "\nvoid processData_080098d8(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int data_ptr;\n  undefined4 param_1_ptr;\n  undefined4 param_2_ptr;\n  undefined4 param_3_ptr;\n  undefined4 param_4_ptr;\n  \n  data_ptr = DAT_20000090;\n  param_1_ptr = input_param;\n  param_2_ptr = param_2;\n  param_3_ptr = param_3;\n  param_4_ptr = param_4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_structure_08009d50(DAT_20000090);\n  }\n  process_extracted_data_0800937c(data_ptr,*(undefined4 *)(data_ptr + 8),input_param,&param_2_ptr,param_1_ptr,&param_2_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "process_data_080098d8",
                "param_1": "input_param",
                "iVar1": "data_ptr",
                "uVar2": "param_1_ptr",
                "uStack_c": "param_2_ptr",
                "uStack_8": "param_3_ptr",
                "uStack_4": "param_4_ptr"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_and_process_data_08009908",
            "code": "\nint allocateAndProcessData_08009908(int inputSize,uint bufferSize)\n\n{\n  undefined4 constantValue;\n  int returnValue;\n  uint result;\n  \n  constantValue = DAT_20000090;\n  if (inputSize != 0) {\n    if (bufferSize == 0) {\n      processData();\n      returnValue = 0;\n    }\n    else {\n      result = calculateResult();\n      returnValue = inputSize;\n      if ((result < bufferSize) && (returnValue = allocateMemory(constantValue,bufferSize), returnValue != 0)) {\n        copyDataToBuffer(returnValue,inputSize,bufferSize);\n        processData(constantValue,inputSize);\n      }\n    }\n    return returnValue;\n  }\n  returnValue = allocateMemory(DAT_20000090,bufferSize,bufferSize,&DAT_20000090);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_and_process_data_08009908",
                "param_1": "inputSize",
                "param_2": "bufferSize",
                "uVar1": "constantValue",
                "iVar2": "returnValue",
                "uVar3": "result",
                "process_data_080091d8": "processData",
                "calculate_result_0800a154": "calculateResult",
                "allocate_memory_08009270": "allocateMemory",
                "copy_data_to_buffer_080091b0": "copyDataToBuffer"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "initialize_memory_08009918",
            "code": "\nvoid initializeMemory_08009918(int *outputPointer,undefined4 memorySize)\n\n{\n  int allocationResult;\n  \n  DAT_20000a38 = 0;\n  allocationResult = allocate_memory_08008804(memorySize);\n  if ((allocationResult == -1) && (DAT_20000a38 != 0)) {\n    *outputPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "initialize_memory_08009918",
                "param_1": "outputPointer",
                "param_2": "memorySize",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_in_string_08009938",
            "code": "\nchar * find_character_in_string_08009938(char *str,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = str;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    str = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_in_string_08009938",
                "param_1": "str",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nvoid copyString_08009954(char *destination,char *source,int size)\n\n{\n  char currentChar;\n  int remainingSize;\n  char *dstPtr;\n  \n  do {\n    dstPtr = destination;\n    remainingSize = size;\n    if (remainingSize == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = dstPtr + 1;\n    *dstPtr = currentChar;\n    source = source + 1;\n    size = remainingSize + -1;\n  } while (currentChar != '\\0');\n  for (; destination != dstPtr + remainingSize; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "cVar1": "currentChar",
                "iVar2": "remainingSize",
                "pcVar3": "dstPtr"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nint find_last_occurrence_0800997e(int input_string,int string_length,undefined4 character,undefined4 extra_parameter)\n\n{\n  int current_index;\n  int last_occurrence;\n  \n  if (string_length != 0) {\n    last_occurrence = 0;\n    while (current_index = find_character_in_string_08009938(input_string,string_length,character,input_string,extra_parameter), current_index != 0) {\n      input_string = current_index + 1;\n      last_occurrence = current_index;\n    }\n    return last_occurrence;\n  }\n  last_occurrence = find_character_in_string_08009938();\n  return last_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "input_string",
                "param_2": "string_length",
                "param_3": "character",
                "param_4": "extra_parameter",
                "iVar1": "current_index",
                "iVar2": "last_occurrence"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *string,char *substring)\n\n{\n  char *current_char;\n  char *current_substring_char;\n  char *substring_char;\n  \n  if (*string == '\\0') {\n    if (*substring != '\\0') {\n      string = (char *)0x0;\n    }\n    return string;\n  }\n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      return (char *)0x0;\n    }\n    substring_char = substring + -1;\n    current_substring_char = current_char + -1;\n    do {\n      substring_char = substring_char + 1;\n      if (*substring_char == '\\0') {\n        return current_char;\n      }\n      current_substring_char = current_substring_char + 1;\n      string = current_char + 1;\n    } while (*current_substring_char == *substring_char);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string",
                "param_2": "substring",
                "pcVar1": "current_char",
                "pcVar2": "current_substring_char",
                "pcVar3": "substring_char"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint process_data_08009a80(undefined4 *output_buffer,undefined4 *input_buffer)\n\n{\n  int data_address;\n  uint result;\n  ushort input_value;\n  \n  data_address = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_data_structure_08009d50(DAT_20000090);\n  }\n  if (input_buffer == &DAT_0800aba4) {\n    input_buffer = *(undefined4 **)(data_address + 4);\n  }\n  else if (input_buffer == (undefined4 *)&DAT_0800abc4) {\n    input_buffer = *(undefined4 **)(data_address + 8);\n  }\n  else if (input_buffer == (undefined4 *)&DAT_0800ab84) {\n    input_buffer = *(undefined4 **)(data_address + 0xc);\n  }\n  input_value = *(ushort *)(input_buffer + 3);\n  result = (uint)input_value;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output_buffer = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_buffer[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_buffer[0xd] != input_buffer + 0x11) {\n          process_data_08009a80_080091d8(output_buffer);\n        }\n        input_buffer[0xd] = 0;\n      }\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xffdb;\n      input_buffer[1] = 0;\n      *input_buffer = input_buffer[4];\n    }\n    *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 8;\n  }\n  if ((input_buffer[4] == 0) && ((*(ushort *)(input_buffer + 3) & 0x280) != 0x200)) {\n    initialize_memory_08009eac(output_buffer,input_buffer);\n  }\n  input_value = *(ushort *)(input_buffer + 3);\n  result = input_value & 1;\n  if ((input_value & 1) == 0) {\n    if (-1 < (int)((uint)input_value << 0x1e)) {\n      result = input_buffer[5];\n    }\n    input_buffer[2] = result;\n  }\n  else {\n    input_buffer[2] = 0;\n    input_buffer[6] = -input_buffer[5];\n  }\n  if (input_buffer[4] == 0) {\n    input_value = *(ushort *)(input_buffer + 3);\n    result = (int)(short)input_value & 0x80;\n    if (result != 0) {\nLAB_08009ab0:\n      *(ushort *)(input_buffer + 3) = input_value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "iVar1": "data_address",
                "uVar2": "result",
                "uVar3": "input_value"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          process_data_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_and_handle_input_08009b5c",
            "code": "\nvoid processAndHandleInput_08009b5c(void)\n\n{\n  uint *pointer;\n  int count;\n  int *array;\n  int *data;\n  uint value;\n  ushort flags;\n  int offset;\n  code *function;\n  int remaining;\n  uint temp;\n  code *jumpTable;\n  bool isZero;\n  undefined8 result;\n  \n  process_input_08009fe8(6);\n  jumpTable = (code *)0x8009b6b;\n  result = infinite_loop_08008868(1);\n  array = (int *)((ulonglong)result >> 0x20);\n  pointer = (uint *)result;\n  flags = *(ushort *)(array + 3);\n  value = (uint)flags;\n  if ((int)(value << 0x1c) < 0) {\n    count = array[4];\n    if (count != 0) {\n      offset = value << 0x1e;\n      isZero = offset != 0;\n      if (isZero) {\n        offset = 0;\n      }\n      remaining = *array;\n      if (!isZero) {\n        offset = array[5];\n      }\n      *array = count;\n      array[2] = offset;\n      for (remaining = remaining - count; 0 < remaining; remaining = remaining - offset) {\n        offset = (*(code *)array[10])(pointer,array[8],count,remaining);\n        if (offset < 1) {\n          flags = *(ushort *)(array + 3);\n          goto LAB_08009c62;\n        }\n        count = count + offset;\n      }\n    }\n  }\n  else if (((0 < array[1]) || (0 < array[0x10])) &&\n          (function = (code *)array[0xb], function != (code *)0x0)) {\n    temp = *pointer;\n    *pointer = 0;\n    if ((flags & 0x1000) == 0) {\n      count = (*function)(pointer,array[8],value & 0x1000,1);\n      if ((count == -1) && (value = *pointer, value != 0)) {\n        if ((value != 0x1d) && (value != 0x16)) {\n          *(ushort *)(array + 3) = *(ushort *)(array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *pointer = temp;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      count = array[0x15];\n    }\n    if (((int)((uint)*(ushort *)(array + 3) << 0x1d) < 0) &&\n       (count = count - array[1], array[0xd] != 0)) {\n      count = count - array[0x10];\n    }\n    count = (*(code *)array[0xb])(pointer,array[8],count,0);\n    flags = *(ushort *)(array + 3);\n    if ((count == -1) &&\n       ((0x1d < *pointer || (-1 < (int)((0x20400001U >> (*pointer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(array + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    array[1] = 0;\n    *array = array[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((count != -1 || (*pointer == 0)))) {\n      array[0x15] = count;\n    }\n    data = (int *)array[0xd];\n    *pointer = temp;\n    if (data != (int *)0x0) {\n      if (data != array + 0x11) {\n        process_data_080091d8(pointer);\n      }\n      array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_and_handle_input_08009b5c",
                "puVar1": "pointer",
                "iVar2": "count",
                "piVar3": "array",
                "piVar4": "data",
                "uVar5": "value",
                "uVar6": "flags",
                "iVar7": "offset",
                "pcVar8": "function",
                "iVar9": "remaining",
                "uVar10": "temp",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "isZero",
                "uVar12": "result"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "process_data_08009c7c",
            "code": "\nundefined4 process_data_08009c7c(uint *data,int *config)\n\n{\n  undefined4 returnValue;\n  int offset;\n  int *ptr;\n  uint var1;\n  ushort var2;\n  int counter;\n  undefined4 var3;\n  undefined4 var4;\n  code *handler;\n  int length;\n  uint tempVar;\n  code *jumpTable;\n  bool bVar10;\n  \n  if (config[4] != 0) {\n    if ((data != (uint *)0x0) && (data[6] == 0)) {\n      initialize_data_structure_08009d50();\n    }\n    if (config == &DAT_0800aba4) {\n      config = (int *)data[1];\n    }\n    else if (config == (int *)&DAT_0800abc4) {\n      config = (int *)data[2];\n    }\n    else if (config == (int *)&DAT_0800ab84) {\n      config = (int *)data[3];\n    }\n    if (*(short *)(config + 3) != 0) {\n      var2 = *(ushort *)(config + 3);\n      var1 = (uint)var2;\n      if ((int)(var1 << 0x1c) < 0) {\n        offset = config[4];\n        if (offset != 0) {\n          counter = var1 << 0x1e;\n          bVar10 = counter != 0;\n          if (bVar10) {\n            counter = 0;\n          }\n          length = *config;\n          if (!bVar10) {\n            counter = config[5];\n          }\n          *config = offset;\n          config[2] = counter;\n          for (length = length - offset; 0 < length; length = length - counter) {\n            counter = (*(code *)config[10])(data,config[8],offset,length,var3,var4);\n            if (counter < 1) {\n              var2 = *(ushort *)(config + 3);\n              goto LAB_08009c62;\n            }\n            offset = offset + counter;\n          }\n        }\n      }\n      else if (((0 < config[1]) || (0 < config[0x10])) &&\n              (handler = (code *)config[0xb], handler != (code *)0x0)) {\n        tempVar = *data;\n        *data = 0;\n        if ((var2 & 0x1000) == 0) {\n          offset = (*handler)(data,config[8],var1 & 0x1000,1);\n          if ((offset == -1) && (var1 = *data, var1 != 0)) {\n            if ((var1 != 0x1d) && (var1 != 0x16)) {\n              *(ushort *)(config + 3) = *(ushort *)(config + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *data = tempVar;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          offset = config[0x15];\n        }\n        if (((int)((uint)*(ushort *)(config + 3) << 0x1d) < 0) &&\n           (offset = offset - config[1], config[0xd] != 0)) {\n          offset = offset - config[0x10];\n        }\n        offset = (*(code *)config[0xb])(data,config[8],offset,0);\n        var2 = *(ushort *)(config + 3);\n        if ((offset == -1) &&\n           ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(config + 3) = var2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        config[1] = 0;\n        *config = config[4];\n        if (((int)((uint)var2 << 0x13) < 0) && ((offset != -1 || (*data == 0)))) {\n          config[0x15] = offset;\n        }\n        ptr = (int *)config[0xd];\n        *data = tempVar;\n        if (ptr != (int *)0x0) {\n          if (ptr != config + 0x11) {\n            process_data_08009c7c_080091d8(data);\n          }\n          config[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "process_data_08009c7c",
                "param_1": "data",
                "param_2": "config",
                "uVar1": "returnValue",
                "iVar2": "offset",
                "piVar3": "ptr",
                "uVar4": "var1",
                "uVar5": "var2",
                "iVar6": "counter",
                "unaff_r4": "var3",
                "unaff_r5": "var4",
                "pcVar7": "handler",
                "iVar8": "length",
                "uVar9": "tempVar",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            process_data_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_memory_08009cdc",
            "code": "\nvoid initializeMemory_08009cdc(undefined4 *buffer,undefined2 value1,undefined2 value2)\n\n{\n  *buffer = 0;\n  buffer[1] = 0;\n  buffer[2] = 0;\n  *(undefined2 *)(buffer + 3) = value1;\n  buffer[25] = 0;\n  *(undefined2 *)((int)buffer + 0xe) = value2;\n  buffer[4] = 0;\n  buffer[5] = 0;\n  buffer[6] = 0;\n  fill_memory_080091c6(buffer + 0x17,0,8);\n  buffer[8] = buffer;\n  buffer[9] = 0x800a021;\n  buffer[10] = 0x800a043;\n  buffer[11] = 0x800a07b;\n  buffer[12] = LAB_0800a09e_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_memory_08009cdc",
                "param_1": "buffer",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "buffer[1]",
                "param_1[2]": "buffer[2]",
                "param_1[0x19]": "buffer[25]",
                "param_1[4]": "buffer[4]",
                "param_1[5]": "buffer[5]",
                "param_1[6]": "buffer[6]",
                "param_1[8]": "buffer[8]",
                "param_1[9]": "buffer[9]",
                "param_1[10]": "buffer[10]",
                "param_1[0xb]": "buffer[11]",
                "param_1[0xc]": "buffer[12]",
                "&LAB_0800a09e_1": "LAB_0800a09e_1"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_and_fill_memory_08009d24",
            "code": "\nundefined4 * allocate_and_fill_memory_08009d24(undefined4 memory_pointer,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int memory_size;\n  \n  memory_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_memory_08009270(memory_pointer,memory_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_080091c6(allocated_memory + 3,0,memory_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_and_fill_memory_08009d24",
                "param_1": "memory_pointer",
                "param_2": "num_elements",
                "puVar1": "allocated_memory",
                "iVar2": "memory_size"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_structure_08009d50",
            "code": "\nvoid initialize_data_structure_08009d50(undefined4 *data_structure)\n\n{\n  undefined4 return_value;\n  undefined4 *temporary_variable;\n  \n  if (data_structure[6] == 0) {\n    data_structure[0x12] = 0;\n    data_structure[0x13] = 0;\n    data_structure[0x14] = 0;\n    temporary_variable = &DAT_20000094;\n    data_structure[10] = &LAB_08009cd0_1;\n    if (data_structure == &DAT_20000094) {\n      temporary_variable = (undefined4 *)0x1;\n    }\n    if (data_structure == &DAT_20000094) {\n      data_structure[6] = temporary_variable;\n    }\n    return_value = initialize_data();\n    data_structure[1] = return_value;\n    return_value = initialize_data(data_structure);\n    data_structure[2] = return_value;\n    return_value = initialize_data(data_structure);\n    data_structure[3] = return_value;\n    initialize_memory(data_structure[1],4,0);\n    initialize_memory(data_structure[2],9,1);\n    initialize_memory(data_structure[3],0x12,2);\n    data_structure[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_structure_08009d50",
                "param_1": "data_structure",
                "uVar1": "return_value",
                "puVar2": "temporary_variable",
                "initialize_data_08009db0": "initialize_data",
                "initialize_memory_08009cdc": "initialize_memory"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_data_08009db0",
            "code": "\nint * initializeData_08009db0(undefined4 *outputPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currentPtr;\n  int *nestedPtr;\n  int **listPtrPtr;\n  \n  if (DAT_200000ac == 0) {\n    initialize_data_structure_08009d50(&DAT_20000094);\n  }\n  listPtrPtr = (int **)&DAT_200000dc;\n  do {\n    nestedPtr = listPtrPtr[2];\n    currentPtr = listPtrPtr[1];\n    while (currentPtr = (int *)((int)currentPtr + -1), -1 < (int)currentPtr) {\n      if (*(short *)(nestedPtr + 3) == 0) {\n        *(undefined2 *)((int)nestedPtr + 0xe) = 0xffff;\n        nestedPtr[0x19] = 0;\n        *(undefined2 *)(nestedPtr + 3) = 1;\n        *nestedPtr = 0;\n        nestedPtr[2] = 0;\n        nestedPtr[1] = 0;\n        nestedPtr[4] = 0;\n        nestedPtr[5] = 0;\n        nestedPtr[6] = 0;\n        fill_memory_080091c6(nestedPtr + 0x17,0,8,1,param4);\n        nestedPtr[0xd] = 0;\n        nestedPtr[0xe] = 0;\n        nestedPtr[0x12] = 0;\n        nestedPtr[0x13] = 0;\n        return nestedPtr;\n      }\n      nestedPtr = nestedPtr + 0x1a;\n    }\n    if (*listPtrPtr == (int *)0x0) {\n      currentPtr = (int *)allocate_and_fill_memory_08009d24(outputPtr,4);\n      *listPtrPtr = currentPtr;\n      if (currentPtr == (int *)0x0) {\n        *outputPtr = 0xc;\n        return (int *)0x0;\n      }\n    }\n    listPtrPtr = (int **)*listPtrPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_data_08009db0",
                "param_1": "outputPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentPtr",
                "piVar2": "nestedPtr",
                "ppiVar3": "listPtrPtr"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_fill_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "initialize_and_check_memory_08009e64",
            "code": "\nundefined4 initialize_and_check_memory_08009e64(undefined4 param1,int param2,undefined4 *param3,uint *param4)\n\n{\n  int result;\n  undefined4 flag;\n  undefined stackVar [4];\n  uint localVar;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result = initialize_memory_0800a0ec(param1,(int)*(short *)(param2 + 0xe),stackVar), result < 0)) {\n    *param4 = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      flag = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *param4 = (uint)((localVar & 0xf000) == 0x2000);\n  }\n  flag = 0x400;\nLAB_08009ea4:\n  *param3 = flag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "initialize_and_check_memory_08009e64",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "flag",
                "auStack_4c": "stackVar",
                "local_48": "localVar"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_memory_08009eac",
            "code": "\nvoid initializeMemory_08009eac(int memoryAddress,int *memoryData)\n\n{\n  ushort initializedValue;\n  int allocatedMemory;\n  int localMemoryAddress;\n  int *localMemoryData;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryData + 3) << 0x1e)) {\n    localMemoryAddress = memoryAddress;\n    localMemoryData = memoryData;\n    initializedValue = initialize_and_check_memory_08009e64(memoryAddress,memoryData,&localMemoryAddress,&localMemoryData);\n    allocatedMemory = allocate_memory_08009270(memoryAddress,localMemoryAddress);\n    if (allocatedMemory != 0) {\n      *(undefined **)(memoryAddress + 0x28) = &LAB_08009cd0_1;\n      *memoryData = allocatedMemory;\n      *(ushort *)(memoryData + 3) = *(ushort *)(memoryData + 3) | 0x80;\n      memoryData[4] = allocatedMemory;\n      memoryData[5] = localMemoryAddress;\n      if ((localMemoryData != (int *)0x0) &&\n         (allocatedMemory = initialize_and_check_application_0800a110(memoryAddress,(int)*(short *)((int)memoryData + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(memoryData + 3) = *(ushort *)(memoryData + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryData + 3) = initializedValue | *(ushort *)(memoryData + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryData + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryData + 3) = *(ushort *)(memoryData + 3) & 0xfffc | 2;\n  }\n  *memoryData = (int)memoryData + 0x47;\n  memoryData[4] = (int)memoryData + 0x47;\n  memoryData[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_memory_08009eac",
                "param_1": "memoryAddress",
                "param_2": "memoryData",
                "uVar1": "initializedValue",
                "iVar2": "allocatedMemory",
                "local_18": "localMemoryAddress",
                "local_14": "localMemoryData"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_08009f2c",
            "code": "\nchar * find_character_08009f2c(char *string,char target_char,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != target_char);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "target_char",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "process_input_08009fe8",
            "code": "\nint processInput_08009fe8(uint input)\n\n{\n  int *resultPtr;\n  undefined4 returnValue;\n  int dataPtr;\n  code *functionPtr;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 linkRegister;\n  undefined4 *ptrToResult;\n  \n  resultPtr = DAT_20000090;\n  ptrToResult = &DAT_20000090;\n  if (0x1f < input) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  dataPtr = DAT_20000090[0x11];\n  if ((dataPtr != 0) && (functionPtr = *(code **)(dataPtr + input * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(dataPtr + input * 4) = 0;\n      (*functionPtr)(input);\n    }\n    return 0;\n  }\n  returnValue = thunk_initialize_function_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  dataPtr = initialize_data_0800886c(returnValue,input,input,0,ptrToResult,tempVar1,tempVar2,linkRegister);\n  if ((dataPtr == -1) && (DAT_20000a38 != 0)) {\n    *resultPtr = DAT_20000a38;\n  }\n  return dataPtr;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "process_input_08009fe8",
                "param_1": "input",
                "piVar1": "resultPtr",
                "uVar2": "returnValue",
                "iVar3": "dataPtr",
                "pcVar4": "functionPtr",
                "unaff_r4": "tempVar1",
                "unaff_r5": "tempVar2",
                "in_lr": "linkRegister",
                "puVar5": "ptrToResult"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "check_success_thunk_0800887c",
            "code": "\nint check_success_thunk_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "check_success_thunk_0800887c",
                "undefined4": "int"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_data_0800a020",
            "code": "\nvoid updateData_0800a020(undefined4 param1,int param2)\n\n{\n  int initializedValue;\n  uint updatedValue;\n  bool isPositive;\n  \n  initializedValue = initialize_data_0800a168(param1,(int)*(short *)(param2 + 0xe));\n  isPositive = -1 < initializedValue;\n  if (isPositive) {\n    updatedValue = *(int *)(param2 + 0x54) + initializedValue;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(param2 + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(param2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initializedValue",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "process_data_0800a042",
            "code": "\nvoid processData_0800a042(int *result,int data,undefined4 param1,undefined4 param2)\n\n{\n  int returnValue;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_application_0800a130(result,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  returnValue = process_data_0800885c((int)*(short *)(data + 0xe),param1,param2,param2,param2,unaff_r4,\n                       unaff_r5,in_lr);\n  if ((returnValue == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "result",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "initialize_application_0800a07a",
            "code": "\nvoid initializeApplication_0800a07a(undefined4 param1,int param2)\n\n{\n  int appStatus;\n  ushort updatedFlag;\n  bool isError;\n  \n  appStatus = initialize_application_0800a130(param1,(int)*(short *)(param2 + 0xe));\n  isError = appStatus == -1;\n  if (isError) {\n    updatedFlag = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = appStatus;\n    updatedFlag = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(param2 + 0xc) = updatedFlag;\n  }\n  if (!isError) {\n    *(ushort *)(param2 + 0xc) = updatedFlag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "initialize_application_0800a07a",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "appStatus",
                "uVar2": "updatedFlag",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "initialize_memory_0800a0ec",
            "code": "\nvoid initializeMemory_0800a0ec(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int returnValue;\n  \n  DAT_20000a38 = 0;\n  returnValue = initializeMemory_0800a0ecHelper(arg1,arg2,arg2,0,arg3);\n  if ((returnValue == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "initialize_memory_0800a0ec",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "initialize_memory_08008846": "initializeMemoryHelper",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "initialize_and_check_application_0800a110",
            "code": "\nvoid initializeAndCheckApplication_0800a110(int *resultPointer,undefined4 applicationParameter)\n\n{\n  int returnValue;\n  \n  DAT_20000a38 = 0;\n  returnValue = initialize_application_08008850(applicationParameter);\n  if ((returnValue == -1) && (DAT_20000a38 != 0)) {\n    *resultPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "initialize_and_check_application_0800a110",
                "param_1": "resultPointer",
                "param_2": "applicationParameter",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "initialize_application_0800a130",
            "code": "\nvoid initializeApplication_0800a130(int *outputResult,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_20000a38 = 0;\n  initResult = initialize_application_08008854(arg1,arg2,arg3,arg3,arg3);\n  if ((initResult == -1) && (DAT_20000a38 != 0)) {\n    *outputResult = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "initialize_application_0800a130",
                "param_1": "outputResult",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_result_0800a154",
            "code": "\nint calculateResult_0800a154(undefined4 result,int data_ptr)\n\n{\n  int adjusted_index;\n  \n  adjusted_index = *(int *)(data_ptr + -4) + -4;\n  if (*(int *)(data_ptr + -4) < 0) {\n    adjusted_index = adjusted_index + *(int *)(data_ptr + adjusted_index);\n  }\n  return adjusted_index;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_result_0800a154",
                "param_1": "result",
                "param_2": "data_ptr",
                "iVar1": "adjusted_index"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "initialize_data_0800a168",
            "code": "\nvoid initializeData_0800a168(int *result,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int initResult;\n  \n  DAT_20000a38 = 0;\n  initResult = initialize_08008858(param2,param3,param4,param4,param4);\n  if ((initResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "initialize_data_0800a168",
                "param_1": "result",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "handle_input_and_process_0800a18c",
            "code": "\nvoid handle_input_and_process_0800a18c(void)\n\n{\n  code *jmp_table;\n  \n  jmp_table = handle_input_and_process_0800a18c;\n  process_and_handle_input_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jmp_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "handle_input_and_process_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jmp_table"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 207691,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}